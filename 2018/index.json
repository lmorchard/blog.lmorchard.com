[
  {
    "title": "SIO2Pi = Atari 800 + Raspberry Pi",
    "tags": [
      "diy",
      "hardware",
      "retro",
      "atari",
      "atari800",
      "raspi"
    ],
    "year": "2018",
    "month": "03",
    "day": "01",
    "isDir": true,
    "slug": "sio2pi",
    "date": "2018-03-01T12:00:00.000Z",
    "postName": "2018-03-01-sio2pi",
    "html": "<p><strong>TL;DR</strong>: The first computer I programmed was an Atari 800. I&#39;m using a Raspberry Pi Zero W and a simple serial voltage conversion circuit to load disk images from the internet onto my Atari 800.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p><a href=\"https://blog.lmorchard.com/2003/06/13/newly-digital/\">I’ve written before about my first contact with computers</a>. But, man, I wrote that back in 2003. Long enough to make the itself post a retro artifact. The passage of time is weird.</p>\n<p>If you don&#39;t care to follow me down memory lane so much, go ahead and <a href=\"#hacking-the-sio-port\">skip on down to where I start building the gadget</a>.</p>\n<h2 id=\"atari-was-my-first-love\">Atari was my first love</h2>\n<p>To recap: I was a problematic kid - hyperactive and easily bored. I recall literally climbing the walls by way of the classroom curtains. At some point, the principal decided I needed a challenge. He plonked me down in front of an Atari 800 and a stack of books.</p>\n<p>I burned through those books and fell in love with computers. Typed in programs &amp; games. Found out how old I’d be in The Year 2000 - which, back then, was The Future. I learned how programming worked. Computers expanded to fill my head, gave outlet to my spastic energy. </p>\n<p>The problem was that I only had one hour per day with the machine at school. We didn’t have a computer at home. That didn’t keep me from picking up every computer book I could get my hands on at <a href=\"http://www.scholastic.com/bookfairs/\">the book fair</a> when it came through, though. I’d read through the programs and try to figure out how they worked while I waited until I could get some time at a keyboard to type them in.</p>\n<p><img src=\"image_0.jpg\" alt=\"Some of the programming books I still have from when I was a kid\"></p>\n<p>I even remember playing with a <a href=\"https://en.wikipedia.org/wiki/Lite-Brite\">Lite Brite</a> and trying to work out how to translate those pictures to Atari graphics. That frustrated me, of course, because <a href=\"https://jenn.glitch.me/a-post-of-utmost-hexellence/\">those old-school Lite Brites had a hexagonal layout of pegs rather than a square grid</a> that could directly translate to pixels.</p>\n<h2 id=\"but-then-commodore\">But, then, Commodore</h2>\n<p>That Christmas - or maybe the next - I got a Commodore 64 under the tree. My story with computers accelerated, because I had the thing all to myself in my bedroom. I left Atari behind, learned about the <a href=\"https://en.wikipedia.org/wiki/MOS_Technology_SID\">SID</a> chip but never explored the <a href=\"https://en.wikipedia.org/wiki/POKEY\">POKEY</a>.</p>\n<p><img src=\"image_1.jpg\" alt=\"Here&#39;s me opening a C64 for Christmas\"></p>\n<h2 id=\"the-computer-lab-in-my-office\">The computer lab in my office</h2>\n<p>Decades later, I hit up eBay for an Atari 800. I found one at a decent price - complete with an <a href=\"http://www.atarimuseum.com/computers/8bits/xl/xlperipherals/atari1050.html\">Atari 1050</a> floppy, <a href=\"http://www.atarimuseum.com/computers/8BITS/XL/xlperipherals/1010.html\">1010 cassette drive</a>, and a pile of disks and tapes and cartridges. I played with it a little, but mostly it sat as <a href=\"https://www.flickr.com/photos/deusx/8445963080/\">an office decoration</a> for a few years.</p>\n<p>This year, I decided to do something with all my old machines. I’ve got a small collection in my home office: Commodore 64, Amiga 1200, Apple IIe, and Atari 800 - all personal touchstones. But, as it happens, floppies and cassettes and rubber belts decay. I discovered that some of this stuff stopped working over the years.</p>\n<p><img src=\"image_2.jpg\" alt=\"I have a table in my office set up with C64, Atari 800, and Apple IIe\"></p>\n<h2 id=\"hacking-the-sio-port\">Hacking the SIO port</h2>\n<p>The core machines still work, though. And, thanks to the internet and folks generous with their time &amp; efforts, enormous archives of software for these systems can be accessed in seconds. But, how do you get this software into these archaic systems?</p>\n<p>I thought bridging the gap would be hard. But, a bit of cheap modern kit can twiddle the signals on an old-school input/output port such that an antique thinks it’s talking to something of its own vintage. Single-board computers and microcontrollers are capable enough to pretend to be almost anything to these old machines.</p>\n<img class=\"inset wide right\" alt=\"Pinout of Atari AIO port with legend\" src=\"image_3.gif\" />\n\n<p>That brings me to the <a href=\"https://en.wikipedia.org/wiki/Atari_SIO\">SIO port</a> on the Atari 800. Where most 80s computers had a handful of parallel &amp; serial ports of proprietary &amp; standard flavors - the Atari 8-bit computers had just this one port for talking to disks, cassettes, printers, modems, or whatever.  If that sounds familiar, the <a href=\"https://en.wikipedia.org/wiki/Atari_SIO\">SIO port</a> could be considered a predecessor to our modern USB port. Oddly enough, <a href=\"https://en.wikipedia.org/wiki/Joseph_C._Decuir\">Joseph C. Decuir</a> worked on both technologies, so I think the similarity is more than coincidental.</p>\n<p>In my idle googling on how to get new data piped into my old Atari, I found this 2013 post on AtariAge entitled &quot;<a href=\"http://atariage.com/forums/topic/209010-sio2pi-raspberry-pi-as-a-floppy/\">SIO2PI -&gt; Raspberry Pi as a floppy</a>&quot; by <a href=\"http://atariage.com/forums/user/29824-themontezuma/\">TheMontezuma</a>. </p>\n<p>In that post is a simple circuit: It used a logic level voltage converter, a diode, a Raspberry Pi, and some wires. I didn’t <em>really</em> know all that much about voltage levels and serial ports before this, but this seems handy for all kinds of things and well within my ability to build.</p>\n<p><img src=\"image_4.jpg\" alt=\"Rough schematic of connecting a Raspberry Pi to the SIO port\"></p>\n<p>Of course, there’s something ludicrous about using a Raspberry Pi for this. <a href=\"https://github.com/retropie/retropie-setup/wiki/Atari-800-and-5200\">That little thing can emulate an entire Atari 800 on its own</a>. You could hollow out the guts of the old computer, drop in the Pi, and with some clever wiring you’d probably never know the difference from the outside. <a href=\"https://makezine.com/2013/03/18/raspberry-pi-gives-amiga-a-new-life/\">Some people actually do that with classic computers like the Amiga</a>. </p>\n<p>But, I really wanted to get this particular machine up and running. And, overpowered as it might be for the task, a Raspberry Pi Zero W is also hilariously inexpensive.</p>\n<h2 id=\"building-the-sio2pi\">Building the SIO2Pi</h2>\n<p>So, I went shopping and picked up some parts:</p>\n<ul>\n<li><p><a href=\"http://a.co/j79Bk4z\">CanaKit Raspberry Pi Zero W (Wireless) Starter Kit with Official Case</a></p>\n</li>\n<li><p><a href=\"http://a.co/0Uo3bnl\">Logic Level Converter Bi-directional Shifter Module for Arduino</a></p>\n</li>\n<li><p><a href=\"http://a.co/4arTjGe\">Rectifier Diode Assorted Kit</a></p>\n</li>\n<li><p><a href=\"http://a.co/70wjtGE\">Breadboard jumpers in ribbon cable form</a></p>\n</li>\n<li><p><a href=\"http://a.co/70wjtGE\">Mini breadboards</a></p>\n</li>\n</ul>\n<p>I had a spare SIO cable that I cut in half for the project. I could have tried getting <a href=\"https://www.thingiverse.com/thing:1831769\">a new SIO connector 3D printed</a> - and I still might - but I knew this cable already worked. And, I was impatient. My first prototype came together on a little breadboard.</p>\n<p><img src=\"image_5.jpg\" alt=\"First SIO2Pi prototype on a breadboard\"></p>\n<p><img src=\"image_6.jpg\" alt=\"The prototype connected to my Atari 800\"></p>\n<p>My first attempt at using the thing was a failure. But, I did more reading into <a href=\"https://www.raspberrypi.org/documentation/configuration/uart.md\">how to configure the Raspberry Pi’s serial UART</a>. Two needful things came up:</p>\n<ul>\n<li><p>Disabling the out-of-box Bluetooth module</p>\n</li>\n<li><p>Disabling the service running a console on the serial port</p>\n</li>\n</ul>\n<p>So, heads up if you try this - make sure to properly set up the Pi&#39;s UART for use with the circuit. Things will either not work at all - or have strange corruption issues as a Linux login console tries to output along with floppy disk data.</p>\n<h2 id=\"loading-disks-with-the-sio2pi\">Loading disks with the SIO2Pi</h2>\n<p>After that, <a href=\"https://github.com/TheMontezuma/SIO2BSD\">sio2bsd</a> started working and my little rig piped images of Atari floppy disks downloaded from <a href=\"http://ftp.pigwa.net/\">ftp.pigwa.net</a> into my old computer as if they were the real thing.</p>\n<iframe class=\"lazyload\" width=\"560\" height=\"315\" data-src=\"https://www.youtube.com/embed/9j6Yy0ZjAK4?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n<p><img src=\"image_7.jpg\" alt=\"Voice of Silence music disk loaded up\"></p>\n<p>Oh and since we&#39;re living in The Future <a href=\"https://archive.org/details/a8b_Voice_of_Silence_1996_Taquart_pl\">and the Internet Archive is an awesome place</a> - you can try emulating what I loaded for real, right in your browser. I&#39;ve had these songs stuck in my head for like a week.</p>\n<iframe class=\"lazyload\" data-src=\"https://archive.org/embed/a8b_Voice_of_Silence_1996_Taquart_pl\" width=\"560\" height=\"384\" frameborder=\"0\" webkitallowfullscreen=\"true\" mozallowfullscreen=\"true\" allowfullscreen></iframe>\n\n<p>I’ve only spent a couple of hours with this stuff so far, so I’d totally welcome some suggestions for more things to check out. I knew there were games, but I was never aware of a demoscene or music packs on the Atari 8-bit computers. I’m also starting to learn a bit about the differences between members of the old Atari 8-bit family - insofar as not everything runs on the Atari 800.</p>\n<p>But, I&#39;ve also got an <a href=\"http://www.atarimuseum.com/computers/8bits/1200xl/1200xl.html\">Atari 1200XL</a> and an <a href=\"http://www.atarimuseum.com/computers/8bits/xe/65xe/65xe.html\">Atari 65XE</a> in the basement that I might try playing with next. I did lay hands on a 1200XL as a kid, but I was already onto Commodore by the time the 65XE arrived. It&#39;ll be interesting to see what runs on those things.</p>\n<h2 id=\"the-sio2pi-is-a-modem-too\">The SIO2Pi is a &quot;modem&quot; too!</h2>\n<p>Then, I discovered that I could run <a href=\"https://github.com/FozzTexx/tcpser\">tcpser</a> on the Raspberry PI - and suddenly my pretend disk drive was a pretend modem. I could &quot;dial out&quot; to the internet and explore <a href=\"http://bbs.retrobattlestations.com/\">a neo-retro world of BBSes</a> I’d never had a chance to experience back in the day on an Atari.</p>\n<p><img src=\"image_8.jpg\" alt=\"Loading BOB Term\"></p>\n<p><img src=\"image_9.jpg\" alt=\"&quot;Calling&quot; Level 29 BBS from my Atari 800\"></p>\n<h2 id=\"kitten-proofing-the-sio2pi\">Kitten-proofing the SIO2Pi</h2>\n<p>The little breadboard rig worked pretty well. But, the next morning, I found most of the wires pulled free thanks to a curious kitten. So, I decided to clean things up and make them more permanent with a <a href=\"https://www.adafruit.com/product/3203\">Perma Proto Bonnet Mini Kit</a>, a <a href=\"https://www.adafruit.com/product/2104\">16-pin IDC breakout helper</a>, and <a href=\"http://a.co/4IZlqkb\">some 30AWG wire</a> from Adafruit.</p>\n<p><img src=\"image_10.jpg\" alt=\"Next prototype of SIO2Pi soldered together on a Perma Proto Bonnet\"></p>\n<p>Even though there are only 5 pins needed between the Pi and the SIO port, soldering up all the pins to headers means I never have to remember what gets plugged into where. It&#39;s also good soldering practice. There are also 3 unused pins on the header - because SIO is 13 pins but the IDC breakout was convenient enough to use as-is and just ignore the extra connections.</p>\n<p>I managed to solder all the SIO cable wires onto header pins as a makeshift male connector to the SIO2Pi Bonnet. It ended up being a mess, often melting the plastic frame of the header, and I had to redo it at least once. But, it works. I’m also considering adding a female header to the other end of the SIO cable I chopped in half, if only to make it easier to join the two halves back into a working cable if I ever need it.</p>\n<p><img src=\"image_11.jpg\" alt=\"Amateurish job of soldering cable wires to header pins\"></p>\n<p>The finished product sits nicely on top of the Atari 800.</p>\n<p><img src=\"image_12.jpg\" alt=\"The SIO2Pi sitting atop the Atari 800\"></p>\n<p>The wires might be too thick, but I’m considering some <a href=\"http://a.co/4ptrVtJ\">IEC ribbon cable connectors</a> to crimp one onto the end of these wires and replace my rough soldering job. That might be cleaner and fit more naturally into how this sits on my desk, without bending all the wires awkwardly.</p>\n<img alt=\"The whole Atari 800 and SIO2Pi setup sitting on my table\" src=\"image_13.jpg\" id=\"thumbnail\" />\n\n<h2 id=\"next-steps\">Next steps</h2>\n<p>This setup works well enough. The main drawback is that I have to ssh into the Raspberry Pi and run sio2bsd manually to make it available for loading. And, if I want to switch to using it as a modem from a term program, I have to kill sio2bsd and start up tcpser.</p>\n<p><strong>Adding a display or web interface:</strong> The Raspberry Pi isn’t hooked up to a monitor - and I don’t really want to devote one to it. I could add some kind of small touchscreen or text display. It would also be nice to have a web interface I could hit from my phone. Maybe use that to select disk images and switch into terminal mode, do all the process management of sio2bsd and tcpser in the background with node.js. So, there’s a project for the future.</p>\n<p><strong>Using an ESP8266:</strong> I&#39;m toying with the idea of exploring whether an ESP8266 - or some other small board - would be up to snuff for this project. <a href=\"https://blog.lmorchard.com/2018/02/08/pumpkin/\">I had fun using one to build my wifi pumpkin</a>, so it could be fun for this too. That would take me learning a lot more about the SIO data protocols, though. Luckily, I have <a href=\"https://github.com/TheMontezuma/SIO2BSD\">the source code for sio2bsd</a>, so I have a starting point. But, the key to this SIO2Pi project was that I basically just glued things together and they worked without me entirely understanding the parts.</p>\n<p><strong>Calling more BBSes &amp; writing my own stuff:</strong> Beyond just digging into old software, I’m not sure where I’m going with this stuff next. I’ll probably keep calling some BBSes. I’ve also got a kind of masochistic notion to fetch some old computer magazines and try some of the type-in programs for old time’s sake. Maybe I’ll poke around with exploring the hardware and writing my own games. I haven&#39;t tried it, but it seems like this rig should be able to <em>save</em> to disk images, too.</p>\n<p><strong>A better case:</strong> I could also explore 3D printing a case that combines all this stuff into a tidy little module with an SIO socket (or two for daisy chaining) rather than using a butchered old cable. I&#39;ve also read about folks embedding this kind of hardware directly into the old computer - but I like this stuff to be easily reversible &amp; non-destructive, so I probably won&#39;t try that.</p>\n<p>Or, you know, maybe I’ll move on from this <a href=\"https://blog.lmorchard.com/2006/05/26/confessions-of-a-serial-enthusiast/\">serial enthusiasm</a> and let it hang out in my office for a few more years. Either way, it’s been a quick &amp; fun project to revive this old machine and get a look a some new-to-me software that I never had a chance to see back in the day.</p>\n",
    "body": "**TL;DR**: The first computer I programmed was an Atari 800. I'm using a Raspberry Pi Zero W and a simple serial voltage conversion circuit to load disk images from the internet onto my Atari 800.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n[I’ve written before about my first contact with computers](https://blog.lmorchard.com/2003/06/13/newly-digital/). But, man, I wrote that back in 2003. Long enough to make the itself post a retro artifact. The passage of time is weird.\n\nIf you don't care to follow me down memory lane so much, go ahead and [skip on down to where I start building the gadget](#hacking-the-sio-port).\n\n## Atari was my first love\n\nTo recap: I was a problematic kid - hyperactive and easily bored. I recall literally climbing the walls by way of the classroom curtains. At some point, the principal decided I needed a challenge. He plonked me down in front of an Atari 800 and a stack of books.\n\nI burned through those books and fell in love with computers. Typed in programs & games. Found out how old I’d be in The Year 2000 - which, back then, was The Future. I learned how programming worked. Computers expanded to fill my head, gave outlet to my spastic energy. \n\nThe problem was that I only had one hour per day with the machine at school. We didn’t have a computer at home. That didn’t keep me from picking up every computer book I could get my hands on at [the book fair](http://www.scholastic.com/bookfairs/) when it came through, though. I’d read through the programs and try to figure out how they worked while I waited until I could get some time at a keyboard to type them in.\n\n![Some of the programming books I still have from when I was a kid](image_0.jpg)\n\nI even remember playing with a [Lite Brite](https://en.wikipedia.org/wiki/Lite-Brite) and trying to work out how to translate those pictures to Atari graphics. That frustrated me, of course, because [those old-school Lite Brites had a hexagonal layout of pegs rather than a square grid](https://jenn.glitch.me/a-post-of-utmost-hexellence/) that could directly translate to pixels.\n\n## But, then, Commodore\n\nThat Christmas - or maybe the next - I got a Commodore 64 under the tree. My story with computers accelerated, because I had the thing all to myself in my bedroom. I left Atari behind, learned about the [SID](https://en.wikipedia.org/wiki/MOS_Technology_SID) chip but never explored the [POKEY](https://en.wikipedia.org/wiki/POKEY).\n\n![Here's me opening a C64 for Christmas](image_1.jpg)\n\n## The computer lab in my office\n\nDecades later, I hit up eBay for an Atari 800. I found one at a decent price - complete with an [Atari 1050](http://www.atarimuseum.com/computers/8bits/xl/xlperipherals/atari1050.html) floppy, [1010 cassette drive](http://www.atarimuseum.com/computers/8BITS/XL/xlperipherals/1010.html), and a pile of disks and tapes and cartridges. I played with it a little, but mostly it sat as [an office decoration](https://www.flickr.com/photos/deusx/8445963080/) for a few years.\n\nThis year, I decided to do something with all my old machines. I’ve got a small collection in my home office: Commodore 64, Amiga 1200, Apple IIe, and Atari 800 - all personal touchstones. But, as it happens, floppies and cassettes and rubber belts decay. I discovered that some of this stuff stopped working over the years.\n\n![I have a table in my office set up with C64, Atari 800, and Apple IIe](image_2.jpg)\n\n## Hacking the SIO port\n\nThe core machines still work, though. And, thanks to the internet and folks generous with their time & efforts, enormous archives of software for these systems can be accessed in seconds. But, how do you get this software into these archaic systems?\n\nI thought bridging the gap would be hard. But, a bit of cheap modern kit can twiddle the signals on an old-school input/output port such that an antique thinks it’s talking to something of its own vintage. Single-board computers and microcontrollers are capable enough to pretend to be almost anything to these old machines.\n\n<img class=\"inset wide right\" alt=\"Pinout of Atari AIO port with legend\" src=\"image_3.gif\" />\n\nThat brings me to the [SIO port](https://en.wikipedia.org/wiki/Atari_SIO) on the Atari 800. Where most 80s computers had a handful of parallel & serial ports of proprietary & standard flavors - the Atari 8-bit computers had just this one port for talking to disks, cassettes, printers, modems, or whatever.  If that sounds familiar, the [SIO port](https://en.wikipedia.org/wiki/Atari_SIO) could be considered a predecessor to our modern USB port. Oddly enough, [Joseph C. Decuir](https://en.wikipedia.org/wiki/Joseph_C._Decuir) worked on both technologies, so I think the similarity is more than coincidental.\n\nIn my idle googling on how to get new data piped into my old Atari, I found this 2013 post on AtariAge entitled \"[SIO2PI -> Raspberry Pi as a floppy](http://atariage.com/forums/topic/209010-sio2pi-raspberry-pi-as-a-floppy/)\" by [TheMontezuma](http://atariage.com/forums/user/29824-themontezuma/). \n\nIn that post is a simple circuit: It used a logic level voltage converter, a diode, a Raspberry Pi, and some wires. I didn’t *really* know all that much about voltage levels and serial ports before this, but this seems handy for all kinds of things and well within my ability to build.\n\n![Rough schematic of connecting a Raspberry Pi to the SIO port](image_4.jpg)\n\nOf course, there’s something ludicrous about using a Raspberry Pi for this. [That little thing can emulate an entire Atari 800 on its own](https://github.com/retropie/retropie-setup/wiki/Atari-800-and-5200). You could hollow out the guts of the old computer, drop in the Pi, and with some clever wiring you’d probably never know the difference from the outside. [Some people actually do that with classic computers like the Amiga](https://makezine.com/2013/03/18/raspberry-pi-gives-amiga-a-new-life/). \n\nBut, I really wanted to get this particular machine up and running. And, overpowered as it might be for the task, a Raspberry Pi Zero W is also hilariously inexpensive.\n\n## Building the SIO2Pi\n\nSo, I went shopping and picked up some parts:\n\n* [CanaKit Raspberry Pi Zero W (Wireless) Starter Kit with Official Case](http://a.co/j79Bk4z)\n\n* [Logic Level Converter Bi-directional Shifter Module for Arduino](http://a.co/0Uo3bnl)\n\n* [Rectifier Diode Assorted Kit](http://a.co/4arTjGe)\n\n* [Breadboard jumpers in ribbon cable form](http://a.co/70wjtGE)\n\n* [Mini breadboards](http://a.co/70wjtGE)\n\nI had a spare SIO cable that I cut in half for the project. I could have tried getting [a new SIO connector 3D printed](https://www.thingiverse.com/thing:1831769) - and I still might - but I knew this cable already worked. And, I was impatient. My first prototype came together on a little breadboard.\n\n![First SIO2Pi prototype on a breadboard](image_5.jpg)\n\n![The prototype connected to my Atari 800](image_6.jpg)\n\nMy first attempt at using the thing was a failure. But, I did more reading into [how to configure the Raspberry Pi’s serial UART](https://www.raspberrypi.org/documentation/configuration/uart.md). Two needful things came up:\n\n* Disabling the out-of-box Bluetooth module\n\n* Disabling the service running a console on the serial port\n\nSo, heads up if you try this - make sure to properly set up the Pi's UART for use with the circuit. Things will either not work at all - or have strange corruption issues as a Linux login console tries to output along with floppy disk data.\n\n## Loading disks with the SIO2Pi\n\nAfter that, [sio2bsd](https://github.com/TheMontezuma/SIO2BSD) started working and my little rig piped images of Atari floppy disks downloaded from [ftp.pigwa.net](http://ftp.pigwa.net/) into my old computer as if they were the real thing.\n\n<iframe class=\"lazyload\" width=\"560\" height=\"315\" data-src=\"https://www.youtube.com/embed/9j6Yy0ZjAK4?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n![Voice of Silence music disk loaded up](image_7.jpg)\n\nOh and since we're living in The Future [and the Internet Archive is an awesome place](https://archive.org/details/a8b_Voice_of_Silence_1996_Taquart_pl) - you can try emulating what I loaded for real, right in your browser. I've had these songs stuck in my head for like a week.\n\n<iframe class=\"lazyload\" data-src=\"https://archive.org/embed/a8b_Voice_of_Silence_1996_Taquart_pl\" width=\"560\" height=\"384\" frameborder=\"0\" webkitallowfullscreen=\"true\" mozallowfullscreen=\"true\" allowfullscreen></iframe>\n\nI’ve only spent a couple of hours with this stuff so far, so I’d totally welcome some suggestions for more things to check out. I knew there were games, but I was never aware of a demoscene or music packs on the Atari 8-bit computers. I’m also starting to learn a bit about the differences between members of the old Atari 8-bit family - insofar as not everything runs on the Atari 800.\n\nBut, I've also got an [Atari 1200XL](http://www.atarimuseum.com/computers/8bits/1200xl/1200xl.html) and an [Atari 65XE](http://www.atarimuseum.com/computers/8bits/xe/65xe/65xe.html) in the basement that I might try playing with next. I did lay hands on a 1200XL as a kid, but I was already onto Commodore by the time the 65XE arrived. It'll be interesting to see what runs on those things.\n\n## The SIO2Pi is a \"modem\" too!\n\nThen, I discovered that I could run [tcpser](https://github.com/FozzTexx/tcpser) on the Raspberry PI - and suddenly my pretend disk drive was a pretend modem. I could \"dial out\" to the internet and explore [a neo-retro world of BBSes](http://bbs.retrobattlestations.com/) I’d never had a chance to experience back in the day on an Atari.\n\n![Loading BOB Term](image_8.jpg)\n\n![\"Calling\" Level 29 BBS from my Atari 800](image_9.jpg)\n\n## Kitten-proofing the SIO2Pi\n\nThe little breadboard rig worked pretty well. But, the next morning, I found most of the wires pulled free thanks to a curious kitten. So, I decided to clean things up and make them more permanent with a [Perma Proto Bonnet Mini Kit](https://www.adafruit.com/product/3203), a [16-pin IDC breakout helper](https://www.adafruit.com/product/2104), and [some 30AWG wire](http://a.co/4IZlqkb) from Adafruit.\n\n![Next prototype of SIO2Pi soldered together on a Perma Proto Bonnet](image_10.jpg)\n\nEven though there are only 5 pins needed between the Pi and the SIO port, soldering up all the pins to headers means I never have to remember what gets plugged into where. It's also good soldering practice. There are also 3 unused pins on the header - because SIO is 13 pins but the IDC breakout was convenient enough to use as-is and just ignore the extra connections.\n\nI managed to solder all the SIO cable wires onto header pins as a makeshift male connector to the SIO2Pi Bonnet. It ended up being a mess, often melting the plastic frame of the header, and I had to redo it at least once. But, it works. I’m also considering adding a female header to the other end of the SIO cable I chopped in half, if only to make it easier to join the two halves back into a working cable if I ever need it.\n\n![Amateurish job of soldering cable wires to header pins](image_11.jpg)\n\nThe finished product sits nicely on top of the Atari 800.\n\n![The SIO2Pi sitting atop the Atari 800](image_12.jpg)\n\nThe wires might be too thick, but I’m considering some [IEC ribbon cable connectors](http://a.co/4ptrVtJ) to crimp one onto the end of these wires and replace my rough soldering job. That might be cleaner and fit more naturally into how this sits on my desk, without bending all the wires awkwardly.\n\n<img alt=\"The whole Atari 800 and SIO2Pi setup sitting on my table\" src=\"image_13.jpg\" id=\"thumbnail\" />\n\n## Next steps\n\nThis setup works well enough. The main drawback is that I have to ssh into the Raspberry Pi and run sio2bsd manually to make it available for loading. And, if I want to switch to using it as a modem from a term program, I have to kill sio2bsd and start up tcpser.\n\n**Adding a display or web interface:** The Raspberry Pi isn’t hooked up to a monitor - and I don’t really want to devote one to it. I could add some kind of small touchscreen or text display. It would also be nice to have a web interface I could hit from my phone. Maybe use that to select disk images and switch into terminal mode, do all the process management of sio2bsd and tcpser in the background with node.js. So, there’s a project for the future.\n\n**Using an ESP8266:** I'm toying with the idea of exploring whether an ESP8266 - or some other small board - would be up to snuff for this project. [I had fun using one to build my wifi pumpkin](https://blog.lmorchard.com/2018/02/08/pumpkin/), so it could be fun for this too. That would take me learning a lot more about the SIO data protocols, though. Luckily, I have [the source code for sio2bsd](https://github.com/TheMontezuma/SIO2BSD), so I have a starting point. But, the key to this SIO2Pi project was that I basically just glued things together and they worked without me entirely understanding the parts.\n\n**Calling more BBSes & writing my own stuff:** Beyond just digging into old software, I’m not sure where I’m going with this stuff next. I’ll probably keep calling some BBSes. I’ve also got a kind of masochistic notion to fetch some old computer magazines and try some of the type-in programs for old time’s sake. Maybe I’ll poke around with exploring the hardware and writing my own games. I haven't tried it, but it seems like this rig should be able to *save* to disk images, too.\n\n**A better case:** I could also explore 3D printing a case that combines all this stuff into a tidy little module with an SIO socket (or two for daisy chaining) rather than using a butchered old cable. I've also read about folks embedding this kind of hardware directly into the old computer - but I like this stuff to be easily reversible & non-destructive, so I probably won't try that.\n\nOr, you know, maybe I’ll move on from this [serial enthusiasm](https://blog.lmorchard.com/2006/05/26/confessions-of-a-serial-enthusiast/) and let it hang out in my office for a few more years. Either way, it’s been a quick & fun project to revive this old machine and get a look a some new-to-me software that I never had a chance to see back in the day.\n\n[modeline]: # ( vim: set wrap linebreak nolist wrapmargin=5 syntax=markdown textwidth=78 formatoptions-=t: )\n[modeline]: # ( vim: set wrap linebreak nolist wrapmargin=5 syntax=markdown textwidth=78 formatoptions-=t: )\n",
    "parentPath": "../blog.lmorchard.com/posts/2018-03-01-sio2pi",
    "path": "2018/03/01/sio2pi",
    "thumbnail": "/blog.lmorchard.com/2018/03/01/sio2pi/image_13.jpg",
    "summary": "<p><strong>TL;DR</strong>: The first computer I programmed was an Atari 800. I&apos;m using a Raspberry Pi Zero W and a simple serial voltage conversion circuit to load disk images from the internet onto my Atari 800.</p>\n",
    "prevPostPath": "2020/05/24/easy-blog-oven",
    "nextPostPath": "2018/03/01/themesrfun"
  },
  {
    "title": "Fun with Themes in Firefox",
    "tags": [
      "mozilla",
      "firefox",
      "themes",
      "themer",
      "quantum",
      "addons",
      "webpack",
      "node",
      "webdev"
    ],
    "year": "2018",
    "month": "03",
    "day": "01",
    "isDir": true,
    "slug": "themesrfun",
    "date": "2018-03-01T12:00:00.000Z",
    "postName": "2018-03-01-themesrfun",
    "html": "<p><strong>TL;DR</strong>: Last year, I started work on a new Test Pilot experiment playing with themes in Firefox. </p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<h2 id=\"new-theme-apis-are-fun\">New theme APIs are fun</h2>\n<p>At the core of this experiment are <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/theme\">new theme APIs for add-ons</a> shipping with Firefox. </p>\n<p>These APIs take inspiration <a href=\"https://developer.chrome.com/apps/themes\">from static themes in Google Chrome</a>, building from there to enable the creation of dynamic themes. </p>\n<p>For example, <a href=\"https://addons.mozilla.org/en-US/firefox/addon/quantum-lights-dynamic/\">Quantum Lights</a> changes based on the time of day.</p>\n<p><a href=\"https://addons.mozilla.org/en-US/firefox/addon/quantum-lights-dynamic/\"><img src=\"quantum-lights.png\" alt=\"Quantum Lights dynamic theme\"></a></p>\n<p><a href=\"https://addons.mozilla.org/en-US/firefox/addon/vivaldifox/\">VivaldiFox</a> reflects the sites you’re visiting.</p>\n<p><a href=\"https://addons.mozilla.org/en-US/firefox/addon/vivaldifox/\"><img src=\"image_0.png\" alt=\"VivaldiFox dynamic theme\"></a></p>\n<p>You could even build themes that use data from external HTTP services - e.g. to change based on the weather.</p>\n<p>To explore these new APIs, Firefox Themer consists of a website and a companion add-on for Firefox. The website offers a theme editor with a paper doll preview - you can click on parts of a simulated browser interface and dress it up however you like. The add-on grants special powers to the website, applying changes from the theme in the editor onto the browser itself.</p>\n<h2 id=\"editing-themes-on-the-web\">Editing themes on the web</h2>\n<p><a href=\"https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web\">The site</a> is built <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.web.js\">using Webpack</a>, React, and Redux. React offers a solid foundation for composing the editor. Personally, I really like working with <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/components/SavedThemeSelector/index.js\">stateless functional components</a> - they’re kind of what tipped me over into becoming a React convert a few years ago. I’m also a terrible visual designer with weak CSS-fu - but <a href=\"https://simonsmith.io/using-webpack-to-build-react-components-and-their-assets/\">using Webpack to bundle assets from per-component directories</a> makes it easier for teammates to step in where I fall short.</p>\n<img id=\"thumbnail\" title=\"An early snapshot of Themer in development\" alt=\"An early snapshot of Themer in development\" src=\"image_1.png\" />\n\n<p>Further under the hood, Redux offers a clean way to <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/lib/store.js\">manage theme data and UI state</a>. Adding <a href=\"https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/components/UndoRedoButtons\">undo &amp; redo buttons</a> is easy, thanks to <a href=\"https://github.com/omnidan/redux-undo/\">redux-undo</a>. And, by way of some <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L52\">simple Redux middleware</a>, I was able to easily add a hook to push every theme changes into the browser via the add-on.</p>\n<p>The website is just a static page - there’s no real server-side application. When you save a theme, <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/storage.js\">it ends up in your browser’s localStorage</a>. Though we plan to move to a Mozilla-owned production server on launch, I’ve been <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L29\">deploying</a> builds to <a href=\"https://mozilla.github.io/Themer/\">GitHub Pages</a> during development.</p>\n<p>Another interesting feature of the website is that we encode themes as a parameter in the URL. Rather than come up with a bespoke scheme, I use <a href=\"https://github.com/masotime/json-url\">this json-url module</a> to compress JSON and encode it as Base64, which makes for a long URL but not unreasonably so. This approach enables folks to simply copy &amp; paste a URL to share a theme they’ve made. You <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK6AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABND6bPaWX82IACoyBXlMz-ogPQMZx8jZw0gi6ZqepxjZiNq3qtC6ReDugh0DJEIcc-6Ekd4BML5haoPqlXvTBKbEuN12ZBm-SJaWyB2b9GzX0tU6b_u9yjWO4ukTDkntTK440uf__ug8AA\">can</a> <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK5AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNBRtj-x-Szc1kMeuEtwJYdDlHdJFchkY8sMP4iOzSOnr2vDVLFHcDTGfvoD2F-saWB-4Q-0HlUiMST82W8NTW8EedwTOfbOY_8T30w0e4gC9vlGFCU9f6FVIWiWSteBgU_b2G6fBR_7tUIAA\">even</a> <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK8AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNKtQKc4Qr-u-HdLUSjaBjcrH658wB_k4I1-yfpFsfTFeutvkNHhJd47c-oR5Cmx-mMJXZ4Lq7R98D2PE8etCHIG-B5_8oTyfPCjY6DxXN-uebtBycPe1q5OYxejC4KXCppxfkfniiH__gvZgA\">link</a> <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK7AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNC6bT6OtXpulKBw4DX1CffRksp6558s0k0DnUhq_LUMnHsWC8m0Ch34ivMZQ9sgV8nw4smjNTF6KwTBLBWoGene--BIiLoZeK7cfULCJbaoBYqyuNgz2tcB6oGDKcpyWUdMoffLb2h__-XfwA\">to</a> <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK2AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVAAfaPFobPrtxqh09bZ0dFlllNZAoZN2KxC18prV-JbJ_OWRSXO_BkFys9aW3y-ZXvULv_v6dWy1x1lwnCABmI9hLlcXkVKtiPaJ2TBI4QUpuGXbvJ__-RkwAA\">themes</a> from a blog post, if you wanted to!</p>\n<p><img src=\"image_2.png\" alt=\"Copy themes as URLs\"></p>\n<p>When the page loads and sees the ?theme URL, <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L201\">it unpacks the data</a> and <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L204\">loads it into editor’s Redux store</a>. I’ve also been able to work this into the location bar with the HTML5 History API and <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L61\">Redux middleware</a>. The browser location represents the current theme, while back &amp; forward buttons double as undo &amp; redo.</p>\n<h2 id=\"add-ons-can-be-expansion-cartridges\">Add-ons can be expansion cartridges</h2>\n<p><a href=\"http://www.syntiac.com/chameleon.html\"><img title=\"The Turbo Chameleon 64 cartridge adds many new capabilities to a Commodore 64\" class=\"inset wide right\" src=\"chameleon_housing_small.jpg\" /></a></p>\n<p><a href=\"https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension\">The companion add-on</a> is also built <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js\">using Webpack</a> and acts as an <a href=\"https://www.c64-wiki.com/wiki/Simons%27_BASIC\">expansion cartridge</a> for the theme editor on the website. (Can you tell <a href=\"https://blog.lmorchard.com/2018/03/01/sio2pi/\">I’ve had retro computers on the mind</a>, lately?)</p>\n<p>Add-ons in Firefox can install <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts\">content scripts</a> that access content and data on web pages. Content scripts can communicate with the parent add-on <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts#Communicating_with_background_scripts\">by way of a message port</a>. They can also communicate with a web page <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts#Communicating_with_the_web_page\">by way of synthetic events</a>. Put the two together, and you’ve got <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/contentScript.js\">a messaging channel</a> between a web page and an add-on in Firefox.</p>\n<p>Here&#39;s the heart of <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/contentScript.js\">that messaging bridge</a>:</p>\n<pre><code class=\"language-javascript\">import { CHANNEL_NAME } from &quot;../lib/constants&quot;;\n\n// Relay backend port messages to content\nlet port;\n\nfunction connect() {\n  port = browser.runtime.connect({ name: CHANNEL_NAME });\n  port.onDisconnect.addListener(() =&gt; {\n    port = null;\n    reconnect();\n  });\n  port.onMessage.addListener(message =&gt; {\n    window.postMessage({ ...message, channel: `${CHANNEL_NAME}-web` }, &quot;*&quot;);\n  });\n}\n\n// Relay content messages to backend port if the channel name matches\n// (Not a security feature so much as a noise filter)\nwindow.addEventListener(&quot;message&quot;, event =&gt; {\n  if (\n    port &amp;&amp;\n    event.source === window &amp;&amp;\n    event.data &amp;&amp;\n    event.data.channel === `${CHANNEL_NAME}-extension`\n  ) {\n    port.postMessage({ ...event.data, location: window.location.href });\n  }\n});\n\nconnect();</code></pre>\n<p>With this approach, the web page doesn’t actually gain access to any Firefox APIs. <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/background.js#L23\">The add-on can decide what to do with with messages it receives</a>. If the page sends invalid data or asks to do something not supported - nothing happens. Here&#39;s a snippet of that logic from the extension:</p>\n<pre><code class=\"language-javascript\">const messageListener = port =&gt; message =&gt; {\n  let theme;\n  switch (message.type) {\n    case &quot;fetchTheme&quot;:\n      log(&quot;fetchTheme&quot;);\n      fetchTheme().then(({ theme: currentTheme }) =&gt;\n        port.postMessage({ type: &quot;fetchedTheme&quot;, theme: currentTheme })\n      );\n      break;\n    case &quot;setTheme&quot;:\n      theme = normalizeTheme(message.theme);\n      log(&quot;setTheme&quot;, theme);\n      storeTheme({ theme });\n      applyTheme({ theme });\n      break;\n    case &quot;ping&quot;:\n      port.postMessage({ type: &quot;pong&quot; });\n      break;\n    default:\n      log(&quot;unexpected message&quot;, message);\n  }\n};</code></pre>\n<p>And here&#39;s a peek at <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L52\">that Redux middleware I mentioned earlier</a> which updates the add-on from the web:</p>\n<pre><code class=\"language-javascript\">const postMessage = (type, data = {}) =&gt;\n  window.postMessage(\n    { ...data, type, channel: `${CHANNEL_NAME}-extension` },\n    &quot;*&quot;\n  );\n\nconst updateExtensionThemeMiddleware = ({ getState }) =&gt; next =&gt; action =&gt; {\n  const returnValue = next(action);\n  const meta = action.meta || {};\n  if (!meta.skipAddon &amp;&amp; themeChangeActions.includes(action.type)) {\n    postMessage(&quot;setTheme&quot;, { theme: selectors.theme(getState()) });\n  }\n  return returnValue;\n};</code></pre>\n<p>The add-on can also restrict the set of pages from which it will accept messages: We <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js#L55\">hardcode the URL for the theme editor</a> into the add-on’s content script configuration at build time, which means no other web page should be able to ask the add-on to alter the theme in Firefox.</p>\n<h2 id=\"add-on-detection-is-hard\">Add-on detection is hard</h2>\n<img class=\"inset wide right\" src=\"loader.png\" title=\"The loading overlay that appears until the editor is visually stable\" />\n\n<p>There is a wrinkle to the relationship between website and add-on, though: A normal web page cannot detect whether or not a particular add-on has been installed. All the page can do is send a message. If the add-on responds, then we know the add-on is available.</p>\n<p>Proving a negative, however, is impossible: the web page can’t know for sure that the addon is *not *available. Responses to asynchronous messages take time - not necessarily a long time, but more than zero time. </p>\n<p>If the page sends a message and doesn’t get a response, that doesn’t mean the add-on is missing. It could just mean that the add-on is taking awhile to respond. So, we have to render the theme editor such that it starts off by assuming the add-on is not installed. If the add-on shows up, minutes or milliseconds later, the page can update itself to reflect the new state of things.</p>\n<p>Left as-is, you’d see several flashes of color and elements on the page move as things settle. That seems unpleasant and possibly confusing, so we came up with a loading spinner: When the page loads, it displays the spinner and a timer starts. If that timer expires, we consider things ready and reveal the editor. But, if there’s any change to the Redux store while that timer is running, we restart the clock.</p>\n<p>This is the gist of what that code does:</p>\n<pre><code class=\"language-javascript\">const unsubscribeLoader = store.subscribe(() =&gt; {\n  if (selectors.loaderDelayExpired(store.getState())) {\n    // State settled down long enough for timer to expire - stop listening.\n    unsubscribeLoader();\n  } else {\n    // Reset the timer again.\n    startLoaderDelay();\n  }\n});\n\n// Utility to (re)start up a timer to dismiss the loading indicator\nlet loaderTimer = null;\nfunction startLoaderDelay() {\n  if (loaderTimer) {\n    clearTimeout(loaderTimer);\n  }\n  loaderTimer = setTimeout(\n    () =&gt; store.dispatch(actions.ui.setLoaderDelayExpired(true)),\n    LOADER_DELAY_PERIOD\n  );\n}</code></pre>\n<p>Early changes to the store are driven by things like decoding a shared theme and responses from the add-on. Again, these are asynchronous and unpredictable. The timer duration is an arbitrary guess I made that seems to feel right. It’s a dirty hack, but it seems like a good enough effort for now.</p>\n<h2 id=\"using-npm-scripts-and-multiple-webpack-configs\">Using npm scripts and multiple Webpack configs</h2>\n<p>One of the things that has worked nicely on this project is building everything in parallel with a single npm command. You can <a href=\"https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05#get-started\">clone the repo and kick things off for development</a> with a simple <code>npm install &amp;&amp; npm start</code> dance.</p>\n<p>The add-on and the site both use Webpack. There’s <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.common.js\">a shared config</a> as a base and then specific configurations with tweaks for <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.web.js\">the site</a> and <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js\">the add-on</a>. So, we want to run two separate instances of Webpack to build everything, watch files, and host the dev server.</p>\n<p>This is where <a href=\"https://www.npmjs.com/package/npm-run-all\">npm-run-all</a> comes in: It’s a CLI tool that lets you run multiple npm scripts. I used to use gulp to orchestrate this sort of thing, but <a href=\"https://www.npmjs.com/package/npm-run-all\">npm-run-all</a> lets me arrange it all <a href=\"https://docs.npmjs.com/misc/scripts\">in <code>package.json</code></a>. It would be fine if this just enabled running scripts in series. But, npm-run-all also lets you run scripts* in parallel<em>. The cherry on top is that [this parallelization works on Linux, OS X, *and Windows</em>](<a href=\"https://www.npmjs.com/package/npm-run-all#%EF%B8%8F-motivation\">https://www.npmjs.com/package/npm-run-all#%EF%B8%8F-motivation</a>).</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n  &quot;start&quot;: &quot;npm-run-all --parallel server watch:extension watch:lint&quot;,\n  &quot;server&quot;: &quot;cross-env NODE_ENV=development webpack-dev-server --config webpack.web.js&quot;,\n  &quot;watch&quot;: &quot;npm-run-all --parallel watch:*&quot;,\n  &quot;watch:web&quot;: &quot;cross-env NODE_ENV=development webpack --watch --progress --colors --config webpack.web.js&quot;,\n  &quot;watch:extension&quot;: &quot;cross-env NODE_ENV=development webpack --watch --progress --colors --config webpack.extension.js&quot;,\n  &quot;watch:lint&quot;: &quot;onchange -p -v \\&quot;src/**/*.js\\&quot; -- npm run lint&quot;,\n  &quot;lint&quot;: &quot;eslint --color .&quot;,\n},</code></pre>\n<p>In past years, Windows support might have been an abstract novelty for me. But, in recent months, I’ve switched from Apple hardware to a PC laptop. I’ve found the new <a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\">Windows Subsystem for Linux</a> to be essential to that switch. But, sometimes it’s nice to just fire up a Node.js dev environment directly in PowerShell - <a href=\"https://www.npmjs.com/package/npm-run-all\">npm-run-all</a> lets me (and you) do that!</p>\n<p>So, <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L12\">the start script in our package.json</a> is able to fire up both Webpack processes for the site and add-on. It can also <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L17\">start a file watcher to run linting</a> and tests (when we have them) alongside. That simplifies using everything in a single shell window across platforms. <a href=\"https://decafbad.com/2011/06/os-webdev-vm/slides.html#1\">I used to lean on Vagrant or Docker to offer something &quot;simple&quot; to folks interested in contributing to a project</a>. But, though virtual machines and containers can hide apparent complexity in development, it’s hard to beat just running things in node on the native OS.</p>\n<h2 id=\"help-us-make-themes-more-fun\">Help us make themes more fun!</h2>\n<p>We’re launching this experiment soon. And, though it only makes limited use of the new theme APIs for now, we’re hoping that the web-based editor and ease of sharing makes it fun &amp; worth playing with. We’ve got some ideas on what to add over the course of the experiment and hope to get more from the community. </p>\n<p>Whether you can offer code, give feedback, participate in discussions, or just let us watch how you use something - everyone has something valuable to offer. In fact, one of <a href=\"https://wiki.mozilla.org/Test_Pilot/mission\">the overarching goals of Test Pilot</a> is to expand channels of contribution for folks interested in helping us build Firefox.</p>\n<p>As with all Test Pilot experiments, we’ll be watching how folks use this stuff as input for what happens next. We also encourage participation in our <a href=\"https://discourse.mozilla.org/c/test-pilot\">Discourse forums</a>. And finally, the project itself is <a href=\"https://github.com/mozilla/Themer\">open source on Github</a> and open to pull requests. </p>\n<p>In the meantime, start collecting color swatches for your own theme. Personally, I might try my hand at <a href=\"https://draculatheme.com/\">a Dracula theme</a> or maybe raid my Vim config directory for some inspiration.</p>\n",
    "body": "**TL;DR**: Last year, I started work on a new Test Pilot experiment playing with themes in Firefox. \n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n## New theme APIs are fun\n\nAt the core of this experiment are [new theme APIs for add-ons](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/theme) shipping with Firefox. \n\nThese APIs take inspiration [from static themes in Google Chrome](https://developer.chrome.com/apps/themes), building from there to enable the creation of dynamic themes. \n\nFor example, [Quantum Lights](https://addons.mozilla.org/en-US/firefox/addon/quantum-lights-dynamic/) changes based on the time of day.\n\n[![Quantum Lights dynamic theme](quantum-lights.png)](https://addons.mozilla.org/en-US/firefox/addon/quantum-lights-dynamic/)\n\n[VivaldiFox](https://addons.mozilla.org/en-US/firefox/addon/vivaldifox/) reflects the sites you’re visiting.\n\n[![VivaldiFox dynamic theme](image_0.png)](https://addons.mozilla.org/en-US/firefox/addon/vivaldifox/)\n\nYou could even build themes that use data from external HTTP services - e.g. to change based on the weather.\n\nTo explore these new APIs, Firefox Themer consists of a website and a companion add-on for Firefox. The website offers a theme editor with a paper doll preview - you can click on parts of a simulated browser interface and dress it up however you like. The add-on grants special powers to the website, applying changes from the theme in the editor onto the browser itself.\n\n## Editing themes on the web\n\n[The site](https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web) is built [using Webpack](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.web.js), React, and Redux. React offers a solid foundation for composing the editor. Personally, I really like working with [stateless functional components](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/components/SavedThemeSelector/index.js) - they’re kind of what tipped me over into becoming a React convert a few years ago. I’m also a terrible visual designer with weak CSS-fu - but [using Webpack to bundle assets from per-component directories](https://simonsmith.io/using-webpack-to-build-react-components-and-their-assets/) makes it easier for teammates to step in where I fall short.\n\n<img id=\"thumbnail\" title=\"An early snapshot of Themer in development\" alt=\"An early snapshot of Themer in development\" src=\"image_1.png\" />\n\nFurther under the hood, Redux offers a clean way to [manage theme data and UI state](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/lib/store.js). Adding [undo & redo buttons](https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/components/UndoRedoButtons) is easy, thanks to [redux-undo](https://github.com/omnidan/redux-undo/). And, by way of some [simple Redux middleware](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L52), I was able to easily add a hook to push every theme changes into the browser via the add-on.\n\nThe website is just a static page - there’s no real server-side application. When you save a theme, [it ends up in your browser’s localStorage](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/storage.js). Though we plan to move to a Mozilla-owned production server on launch, I’ve been [deploying](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L29) builds to [GitHub Pages](https://mozilla.github.io/Themer/) during development.\n\nAnother interesting feature of the website is that we encode themes as a parameter in the URL. Rather than come up with a bespoke scheme, I use [this json-url module](https://github.com/masotime/json-url) to compress JSON and encode it as Base64, which makes for a long URL but not unreasonably so. This approach enables folks to simply copy & paste a URL to share a theme they’ve made. You [can](https://mozilla.github.io/Themer/?theme=XQAAAAK6AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABND6bPaWX82IACoyBXlMz-ogPQMZx8jZw0gi6ZqepxjZiNq3qtC6ReDugh0DJEIcc-6Ekd4BML5haoPqlXvTBKbEuN12ZBm-SJaWyB2b9GzX0tU6b_u9yjWO4ukTDkntTK440uf__ug8AA) [even](https://mozilla.github.io/Themer/?theme=XQAAAAK5AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNBRtj-x-Szc1kMeuEtwJYdDlHdJFchkY8sMP4iOzSOnr2vDVLFHcDTGfvoD2F-saWB-4Q-0HlUiMST82W8NTW8EedwTOfbOY_8T30w0e4gC9vlGFCU9f6FVIWiWSteBgU_b2G6fBR_7tUIAA) [link](https://mozilla.github.io/Themer/?theme=XQAAAAK8AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNKtQKc4Qr-u-HdLUSjaBjcrH658wB_k4I1-yfpFsfTFeutvkNHhJd47c-oR5Cmx-mMJXZ4Lq7R98D2PE8etCHIG-B5_8oTyfPCjY6DxXN-uebtBycPe1q5OYxejC4KXCppxfkfniiH__gvZgA) [to](https://mozilla.github.io/Themer/?theme=XQAAAAK7AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNC6bT6OtXpulKBw4DX1CffRksp6558s0k0DnUhq_LUMnHsWC8m0Ch34ivMZQ9sgV8nw4smjNTF6KwTBLBWoGene--BIiLoZeK7cfULCJbaoBYqyuNgz2tcB6oGDKcpyWUdMoffLb2h__-XfwA) [themes](https://mozilla.github.io/Themer/?theme=XQAAAAK2AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVAAfaPFobPrtxqh09bZ0dFlllNZAoZN2KxC18prV-JbJ_OWRSXO_BkFys9aW3y-ZXvULv_v6dWy1x1lwnCABmI9hLlcXkVKtiPaJ2TBI4QUpuGXbvJ__-RkwAA) from a blog post, if you wanted to!\n\n![Copy themes as URLs](image_2.png)\n\nWhen the page loads and sees the ?theme URL, [it unpacks the data](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L201) and [loads it into editor’s Redux store](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L204). I’ve also been able to work this into the location bar with the HTML5 History API and [Redux middleware](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L61). The browser location represents the current theme, while back & forward buttons double as undo & redo.\n\n## Add-ons can be expansion cartridges\n\n[<img title=\"The Turbo Chameleon 64 cartridge adds many new capabilities to a Commodore 64\" class=\"inset wide right\" src=\"chameleon_housing_small.jpg\" />](http://www.syntiac.com/chameleon.html)\n\n[The companion add-on](https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension) is also built [using Webpack](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js) and acts as an [expansion cartridge](https://www.c64-wiki.com/wiki/Simons%27_BASIC) for the theme editor on the website. (Can you tell [I’ve had retro computers on the mind](https://blog.lmorchard.com/2018/03/01/sio2pi/), lately?)\n\nAdd-ons in Firefox can install [content scripts](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts) that access content and data on web pages. Content scripts can communicate with the parent add-on [by way of a message port](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts#Communicating_with_background_scripts). They can also communicate with a web page [by way of synthetic events](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts#Communicating_with_the_web_page). Put the two together, and you’ve got [a messaging channel](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/contentScript.js) between a web page and an add-on in Firefox.\n\nHere's the heart of [that messaging bridge](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/contentScript.js):\n\n```javascript\nimport { CHANNEL_NAME } from \"../lib/constants\";\n\n// Relay backend port messages to content\nlet port;\n\nfunction connect() {\n  port = browser.runtime.connect({ name: CHANNEL_NAME });\n  port.onDisconnect.addListener(() => {\n    port = null;\n    reconnect();\n  });\n  port.onMessage.addListener(message => {\n    window.postMessage({ ...message, channel: `${CHANNEL_NAME}-web` }, \"*\");\n  });\n}\n\n// Relay content messages to backend port if the channel name matches\n// (Not a security feature so much as a noise filter)\nwindow.addEventListener(\"message\", event => {\n  if (\n    port &&\n    event.source === window &&\n    event.data &&\n    event.data.channel === `${CHANNEL_NAME}-extension`\n  ) {\n    port.postMessage({ ...event.data, location: window.location.href });\n  }\n});\n\nconnect();\n```\n\nWith this approach, the web page doesn’t actually gain access to any Firefox APIs. [The add-on can decide what to do with with messages it receives](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/background.js#L23). If the page sends invalid data or asks to do something not supported - nothing happens. Here's a snippet of that logic from the extension:\n\n```javascript\nconst messageListener = port => message => {\n  let theme;\n  switch (message.type) {\n    case \"fetchTheme\":\n      log(\"fetchTheme\");\n      fetchTheme().then(({ theme: currentTheme }) =>\n        port.postMessage({ type: \"fetchedTheme\", theme: currentTheme })\n      );\n      break;\n    case \"setTheme\":\n      theme = normalizeTheme(message.theme);\n      log(\"setTheme\", theme);\n      storeTheme({ theme });\n      applyTheme({ theme });\n      break;\n    case \"ping\":\n      port.postMessage({ type: \"pong\" });\n      break;\n    default:\n      log(\"unexpected message\", message);\n  }\n};\n```\n\nAnd here's a peek at [that Redux middleware I mentioned earlier](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L52) which updates the add-on from the web:\n\n```javascript\nconst postMessage = (type, data = {}) =>\n  window.postMessage(\n    { ...data, type, channel: `${CHANNEL_NAME}-extension` },\n    \"*\"\n  );\n\nconst updateExtensionThemeMiddleware = ({ getState }) => next => action => {\n  const returnValue = next(action);\n  const meta = action.meta || {};\n  if (!meta.skipAddon && themeChangeActions.includes(action.type)) {\n    postMessage(\"setTheme\", { theme: selectors.theme(getState()) });\n  }\n  return returnValue;\n};\n```\n\nThe add-on can also restrict the set of pages from which it will accept messages: We [hardcode the URL for the theme editor](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js#L55) into the add-on’s content script configuration at build time, which means no other web page should be able to ask the add-on to alter the theme in Firefox.\n\n## Add-on detection is hard\n\n<img class=\"inset wide right\" src=\"loader.png\" title=\"The loading overlay that appears until the editor is visually stable\" />\n\nThere is a wrinkle to the relationship between website and add-on, though: A normal web page cannot detect whether or not a particular add-on has been installed. All the page can do is send a message. If the add-on responds, then we know the add-on is available.\n\nProving a negative, however, is impossible: the web page can’t know for sure that the addon is *not *available. Responses to asynchronous messages take time - not necessarily a long time, but more than zero time. \n\nIf the page sends a message and doesn’t get a response, that doesn’t mean the add-on is missing. It could just mean that the add-on is taking awhile to respond. So, we have to render the theme editor such that it starts off by assuming the add-on is not installed. If the add-on shows up, minutes or milliseconds later, the page can update itself to reflect the new state of things.\n\nLeft as-is, you’d see several flashes of color and elements on the page move as things settle. That seems unpleasant and possibly confusing, so we came up with a loading spinner: When the page loads, it displays the spinner and a timer starts. If that timer expires, we consider things ready and reveal the editor. But, if there’s any change to the Redux store while that timer is running, we restart the clock.\n\nThis is the gist of what that code does:\n\n```javascript\nconst unsubscribeLoader = store.subscribe(() => {\n  if (selectors.loaderDelayExpired(store.getState())) {\n    // State settled down long enough for timer to expire - stop listening.\n    unsubscribeLoader();\n  } else {\n    // Reset the timer again.\n    startLoaderDelay();\n  }\n});\n\n// Utility to (re)start up a timer to dismiss the loading indicator\nlet loaderTimer = null;\nfunction startLoaderDelay() {\n  if (loaderTimer) {\n    clearTimeout(loaderTimer);\n  }\n  loaderTimer = setTimeout(\n    () => store.dispatch(actions.ui.setLoaderDelayExpired(true)),\n    LOADER_DELAY_PERIOD\n  );\n}\n```\n\nEarly changes to the store are driven by things like decoding a shared theme and responses from the add-on. Again, these are asynchronous and unpredictable. The timer duration is an arbitrary guess I made that seems to feel right. It’s a dirty hack, but it seems like a good enough effort for now.\n\n## Using npm scripts and multiple Webpack configs\n\nOne of the things that has worked nicely on this project is building everything in parallel with a single npm command. You can [clone the repo and kick things off for development](https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05#get-started) with a simple `npm install && npm start` dance.\n\nThe add-on and the site both use Webpack. There’s [a shared config](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.common.js) as a base and then specific configurations with tweaks for [the site](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.web.js) and [the add-on](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js). So, we want to run two separate instances of Webpack to build everything, watch files, and host the dev server.\n\nThis is where [npm-run-all](https://www.npmjs.com/package/npm-run-all) comes in: It’s a CLI tool that lets you run multiple npm scripts. I used to use gulp to orchestrate this sort of thing, but [npm-run-all](https://www.npmjs.com/package/npm-run-all) lets me arrange it all [in `package.json`](https://docs.npmjs.com/misc/scripts). It would be fine if this just enabled running scripts in series. But, npm-run-all also lets you run scripts* in parallel*. The cherry on top is that [this parallelization works on Linux, OS X, *and Windows*](https://www.npmjs.com/package/npm-run-all#%EF%B8%8F-motivation).\n\n```json\n\"scripts\": {\n  \"start\": \"npm-run-all --parallel server watch:extension watch:lint\",\n  \"server\": \"cross-env NODE_ENV=development webpack-dev-server --config webpack.web.js\",\n  \"watch\": \"npm-run-all --parallel watch:*\",\n  \"watch:web\": \"cross-env NODE_ENV=development webpack --watch --progress --colors --config webpack.web.js\",\n  \"watch:extension\": \"cross-env NODE_ENV=development webpack --watch --progress --colors --config webpack.extension.js\",\n  \"watch:lint\": \"onchange -p -v \\\"src/**/*.js\\\" -- npm run lint\",\n  \"lint\": \"eslint --color .\",\n},\n```\n\nIn past years, Windows support might have been an abstract novelty for me. But, in recent months, I’ve switched from Apple hardware to a PC laptop. I’ve found the new [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10) to be essential to that switch. But, sometimes it’s nice to just fire up a Node.js dev environment directly in PowerShell - [npm-run-all](https://www.npmjs.com/package/npm-run-all) lets me (and you) do that!\n\nSo, [the start script in our package.json](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L12) is able to fire up both Webpack processes for the site and add-on. It can also [start a file watcher to run linting](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L17) and tests (when we have them) alongside. That simplifies using everything in a single shell window across platforms. [I used to lean on Vagrant or Docker to offer something \"simple\" to folks interested in contributing to a project](https://decafbad.com/2011/06/os-webdev-vm/slides.html#1). But, though virtual machines and containers can hide apparent complexity in development, it’s hard to beat just running things in node on the native OS.\n\n## Help us make themes more fun!\n\nWe’re launching this experiment soon. And, though it only makes limited use of the new theme APIs for now, we’re hoping that the web-based editor and ease of sharing makes it fun & worth playing with. We’ve got some ideas on what to add over the course of the experiment and hope to get more from the community. \n\nWhether you can offer code, give feedback, participate in discussions, or just let us watch how you use something - everyone has something valuable to offer. In fact, one of [the overarching goals of Test Pilot](https://wiki.mozilla.org/Test_Pilot/mission) is to expand channels of contribution for folks interested in helping us build Firefox.\n\nAs with all Test Pilot experiments, we’ll be watching how folks use this stuff as input for what happens next. We also encourage participation in our [Discourse forums](https://discourse.mozilla.org/c/test-pilot). And finally, the project itself is [open source on Github](https://github.com/mozilla/Themer) and open to pull requests. \n\nIn the meantime, start collecting color swatches for your own theme. Personally, I might try my hand at [a Dracula theme](https://draculatheme.com/) or maybe raid my Vim config directory for some inspiration.\n\n[modeline]: # ( vim: set wrap linebreak nolist wrapmargin=5 syntax=markdown textwidth=78 formatoptions-=t: )\n",
    "parentPath": "../blog.lmorchard.com/posts/2018-03-01-themesrfun",
    "path": "2018/03/01/themesrfun",
    "thumbnail": "/blog.lmorchard.com/2018/03/01/themesrfun/image_1.png",
    "summary": "<p><strong>TL;DR</strong>: Last year, I started work on a new Test Pilot experiment playing with themes in Firefox. </p>\n",
    "prevPostPath": "2018/03/01/sio2pi",
    "nextPostPath": "2018/02/08/pumpkin"
  },
  {
    "title": "I Made a WiFi Pumpkin",
    "tags": [
      "diy",
      "hardware",
      "halloween",
      "esp8266",
      "iot"
    ],
    "year": "2018",
    "month": "02",
    "day": "08",
    "isDir": true,
    "slug": "pumpkin",
    "date": "2018-02-08T12:00:00.000Z",
    "postName": "2018-02-08-pumpkin",
    "html": "<p><strong>TL;DR</strong>: I made a wifi pumpkin using an ESP8266 with LED matrix eyes and mouth.\nI added a web-based remote control for my phone using websockets. It was fun!</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>A few years ago, <a href=\"https://twitter.com/lmorchard/status/651958618800177152\">I decided</a> to use some LED matrices to make animated\neyes for a jack-o&#39;-lantern. Not terribly original, but it sounded fun.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Considering getting some LED matrices to make animated eyes &amp; mouth for a jack-o-lantern. Seems like it could be a fun project or a disaster</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/651958618800177152?ref_src=twsrc%5Etfw\">October 8, 2015</a></blockquote>\n\n<h2 id=\"v10-2015\">v1.0 (2015)</h2>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/21954391310/in/datetaken/\" title=\"LED matrix on a Raspberry PI\"><img class=\"inset wide left\" src=\"raspi.jpg\" alt=\"LED matrix on a Raspberry PI\"></a></p>\n<p>My first thought was to use a Raspberry Pi.  It was easy to get an LED matrix\nworking in Python. And, I had a notion to build some kind of remote control\nover wifi. But, it felt like overkill to stuff a whole Linux computer\ninto a gourd. (<a href=\"http://strangehorizons.com/non-fiction/articles/installing-linux-on-a-dead-badger-users-notes/\">A dead badger might work</a>, but this was not that kind\nof project.)</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/21994112010/in/datetaken/\" title=\"LED eyes for Pumpkin\"><img class=\"inset wide left\" src=\"arduino.jpg\" alt=\"LED eyes for Pumpkin\"></a></p>\n<p>That&#39;s when I remembered the Arduino Uno I had stashed in a drawer.  I found\n<a href=\"https://mjanyst.weebly.com/arduino-pumpkin-eyes.html\">this guy&#39;s project</a>, which confirmed I wasn&#39;t the first to try\nthis. But it was nice to start from <a href=\"https://github.com/michaltj/LedEyes/blob/master/LedEyes.ino\">someone else&#39;s code</a>. </p>\n<p>I had a brief go at scripting some animations, which resulted\nin an <a href=\"https://github.com/lmorchard/arduino-sketches/blob/master/googly_eyes/googly_eyes.ino\">over-engineered little sketch</a> that helped me \nexercise my rusty C skills.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/22453913015/in/datetaken/\" title=\"NES pad eyes for Pumpkin\"><img class=\"inset wide left\" src=\"nespad1.jpg\" alt=\"NES pad eyes for Pumpkin\"></a></p>\n<p>From there, I discovered an <a href=\"https://github.com/joshmarinacci/nespad-arduino\">NESPad library</a> that made <a href=\"https://github.com/lmorchard/arduino-sketches/blob/master/nespad_eyes/nespad_eyes.ino\">hooking up a\ncontroller</a> simple. It&#39;s just <a href=\"https://www.allaboutcircuits.com/projects/nes-controller-interface-with-an-arduino-uno/\">a serial interface\npowered by a shift register</a> - pre-teen me would have been impressed that I\nfinally learned how so many buttons worked with so few pins.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/22463866250/in/datetaken/\" title=\"Pumpkin, candy, NES pad\"><img class=\"inset wide left\" src=\"orig-real-pumpkin-3.jpg\" /></a></p>\n<p>When Halloween arrived, I hustled to get it done before dusk: I carved some\nquick square holes for eyes, nose, and mouth - let&#39;s say it&#39;s an 8-bit thing. </p>\n<p>I bundled up the electronics with plastic wrap and crammed the mess into\nthe pumpkin. I strapped the LED matrices in with picture\nwire. The results weren&#39;t too bad in the dark. \nTrick-or-treaters seemed entertained by my cyborg pumpkin buddy as I handed out\ncandy!</p>\n<p>Not long after Halloween, the gourd went downhill fast. Pumpkins are\nnot a good choice of long-term project enclosure. I put it off as long as I could, but\nfinally I had to put on some gloves to rescue my parts from the slimy\nmess. Those parts went in a box and went untouched for the next year. \n<br style=\"clear:both\"></p>\n<h2 id=\"v20-2016\">v2.0 (2016)</h2>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30331621951/in/datetaken/\" title=\"Pumpkin 2.0\"><img class=\"inset wide right\" src=\"pumpkin2-1.jpg\" /></a></p>\n<p>As Halloween approached again, I wanted to give the project another go. I\nfound a foam pumpkin at Target that seemed realistic. A little time at\n<a href=\"https://www.i3detroit.org/\">the local maker space</a> with my Swiss Army knife, and I had a freshly carved\nsynthetic jack-&#39;o-lantern. </p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30380916606/in/datetaken/\" title=\"Pumpkin 2.0\"><img class=\"inset wide right\" src=\"pumpkin2-2.jpg\" /></a></p>\n<p>Rather than glue things together, I just used some gaffer tape inside to hold\nthe eyes in place. I&#39;d planned to add some more LED matrices to give it a mouth,\nbut never quite got around to it. The little guy seems a bit creepy with just a\npair of eyes, though.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30380883136/in/datetaken/\" title=\"Pumpkin 2.0 NES connection\"><img class=\"inset wide right\" src=\"nes-connection.jpg\" alt=\"Pumpkin 2.0 NES connection\"></a></p>\n<p>With a house move in the works, my ambition ran out fast that year. I\ndidn&#39;t make any code changes, but I did have to do some reverse engineering.</p>\n<p>Because, of course, I hadn&#39;t left myself good notes and some of the wires had\ncome undone over the past year.  My poor NES controller was looking sad with\nwires just kind of crammed into it.  But, it still worked.</p>\n<p>I refreshed the thing just enough to make it live to see another day. We\ndidn&#39;t hand out candy that year, though, so the thing just decorated my office\nfor awhile. <br style=\"clear:both\"></p>\n<h2 id=\"v30-2017\">v3.0 (2017)</h2>\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37852469272/in/datetaken/\" title=\"Pumpkin meets hot glue\"><img class=\"inset wide right\" src=\"hot-glue.jpg\" alt=\"Pumpkin meets hot glue\"></a>\n-->\n\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031281868/in/datetaken/\" title=\"20171022_203806\"><img id=\"thumbnail\" class=\"inset wide left\" src=\"pumpkin.jpg\" alt=\"20171022_203806\"></a></p>\n<p>Another Halloween and I felt an urge to get more ambitious: I’d picked up that\nArduino at a Maker Faire back in 2011, pretty far from state of the art these \ndays. </p>\n<p>I’d been reading about the <a href=\"https://www.espressif.com/en/products/hardware/esp8266ex/overview\">ESP8266</a> -\na cheap and tiny WiFi module that had been repurposed for\nmore tinkery things.  In fact, I read that you could even flash unmodified\nArduino sketches onto the thing.</p>\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031428708/in/datetaken/\" title=\"Creepy pumpkin eyes\"><img class=\"inset wide left\" src=\"creepy.jpg\" alt=\"Creepy pumpkin eyes\"></a>\n-->\n\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626526390/in/datetaken/\" title=\"20171019_233614\"><img class=\"inset wide left\" src=\"interior.jpg\" alt=\"20171019_233614\"></a></p>\n<p>So, I ordered <a href=\"http://a.co/8zPcmQ5\">an ESP8266 dev board</a> and four more <a href=\"http://a.co/3Mc3qZZ\">8x8 LED\nmatrices</a> for a mouth.\nIt took me an hour to <a href=\"https://github.com/lmorchard/arduino-sketches/blob/master/nodemcu/nespad_eyes/nespad_eyes.ino\">port my old Arduino sketch over</a>,\nincluding the time to set up the dev stack. The eyes came alive on\nthe new hardware in very short order. Another hour and I had the\nmouth animating.</p>\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37852235042/in/datetaken/\" title=\"20171017_005235\"><img class=\"inset wide left\" src=\"mouth.jpg\" alt=\"20171017_005235\"></a>\n-->\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37173755914/in/datetaken/\" title=\"20171021_230802\"><img class=\"inset wide left\" src=\"missing-column.jpg\" alt=\"20171021_230802\"></a>\n-->\n\n<p>A bit more carving, and I was ready to install the mouth. I switched\nfrom gaffer tape to hot glue to make things more permanent. Alas, somehow I\ndamaged a column of LEDs in the process. But, oh well: I just gave it fangs.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626516700/in/datetaken/\" title=\"20171019_233504\"><img class=\"inset wide left\" src=\"plugs.jpg\" alt=\"20171019_233504\"></a></p>\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626520570/in/datetaken/\" title=\"20171019_233530\"><img class=\"inset wide wide left\" src=\"plugged-in.jpg\" alt=\"20171019_233530\"></a>\n-->\n\n<p>To tidy the whole thing up, I bought extension cables for USB power and the NES\ngamepad. I hacked those up and hot glued them into the back of the pumpkin. </p>\n<p>When I was done, I had no cables trailing out from the inside of the thing. And, I could\nstop shoving bare wires into the end of an NES pad. And, if I wanted to go\ncompletely wireless, I could drop a USB power bank into the top and just\nconnect it from inside.\n<br style=\"clear:both\"></p>\n<h2 id=\"v40-2017\">v4.0 (2017)</h2>\n<p>But, speaking of completely wireless: Back at the start, I&#39;d\nconsidered using a Raspberry Pi.  Given a USB wifi adapter, I could have\nwritten a little web app to use as a remote control for the pumpkin. I still\nwanted to make that happen.</p>\n<p>I knew this ESP8266 thing was handy, but I didn&#39;t realize just how handy until I did some more research. I found an interesting set of libraries to glue together:</p>\n<ul>\n<li><a href=\"https://github.com/esp8266/Arduino\">ESP8266 Arduino core</a> - this let me port my sketch over mostly unmodified</li>\n<li><a href=\"http://esp8266.github.io/Arduino/versions/2.0.0/doc/filesystem.html\">SPIFFS</a> - offers an onboard filesystem in flash memory</li>\n<li><a href=\"https://github.com/esp8266/Arduino/tree/master/libraries/ESP8266WebServer\">ESP8266WebServer</a> - an embedded webserver that <a href=\"https://github.com/esp8266/Arduino/tree/master/libraries/ESP8266WebServer/examples/FSBrowser\">serves up static files from SPIFFS</a> and lets me handle some URL routes with C code</li>\n<li><a href=\"https://github.com/Links2004/arduinoWebSockets\">arduinoWebsockets</a> - websockets server and client libraries</li>\n<li><a href=\"https://github.com/tzapu/WiFiManager\">WiFiManager</a> - code to fire up an temporary Access Point with a captive web portal to bootstrap wifi configuration - great for a device with no screen or keyboard</li>\n</ul>\n<p>Long story short, I used all the above to produce this masterpiece:</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031282388/in/datetaken/\" title=\"Screenshot_20171023-004211\"><img class=\"fullwidth\" src=\"controls.jpg\" alt=\"Screenshot_20171023-004211\"></a></p>\n<p>What you&#39;re looking at is the wifi remote control for my pumpkin. The big yellow square is a virtual touchpad - dragging my finger across it moves the eyeballs. Tapping &quot;Blink&quot; makes the eyes blink, while &quot;Talk&quot; makes the mouth open &amp; close.</p>\n<p>It&#39;s a little web page loaded up from the onboard file system. It connects back to a websocket server that <a href=\"https://github.com/lmorchard/arduino-sketches/blob/master/nodemcu/nespad_eyes/nespad_eyes.ino#L324\">accepts a bunch of little commands</a> - which, oddly enough, map directly to NES pad buttons so I could be lazy and just reuse all the same code paths.</p>\n<p>Building this went way easier than I expected. Sure, it&#39;s embarassing code that anyone sensible would shred in a code review. But, it was fun hacking and works pretty much like I hoped it would. In particular, I was surprised at how responsive it ended up being. Without any optimization, it follows my taps and drags without noticible lag.</p>\n<p>So, for another year, I sat next to an animated glowing pumpkin while I handed\nout candy. But this time, I played amateur ventriloquist and had the thing\ntalking to kids while I prodded at my cell phone. Pretty awkward and nerdy, but\nI think some folks appreciated it. They humored me, at least.</p>\n<h2 id=\"v50-whats-next\">v5.0? What&#39;s next?</h2>\n<p>A few months later, this project is lying fallow. It’s on display in my office, where I can watch the semi-random idle gibbering whenever I like. And though I haven&#39;t gotten back to any ESP8266 tinkering since October, I&#39;m still kind of musing over what I could hack together next.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37885815451/in/datetaken/\" title=\"20171023_144656\"><img class=\"fullwidth\" src=\"in-office.jpg\" alt=\"20171023_144656\"></a></p>\n<p>It feels weird to say it, but this project might be done: this pumpkin seems pretty close to my original idea. </p>\n<p>I’ve mused about maybe building some sort of voice assistant into it: talk to the pumpkin, control things around the house, hear about the weather, order it to fire candy into kids’ bags with tiny trebuchets - who knows?</p>\n<p>I could upgrade from LED matrices to <a href=\"https://learn.adafruit.com/animated-electronic-eyes-using-teensy-3-1/overview\">full-blown OLED screens</a>. Though, if I did that, I&#39;ve got a notion to build myself a replica of 790 from Lexx. I&#39;d probably regret it, but he seems more my kind of personal assistant than current offerings like Alexa or Siri:</p>\n<div style=\"position: relative; padding-bottom: 56.25%;\">\n  <iframe class=\"lazyload\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"\" data-src=\"https://www.youtube.com/embed/s8d1mfLa5Vk\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe>\n</div>\n\n<p>I&#39;ve also been thinking bigger: Like, what if I turned my <em>house</em> into an animated character? Combine some <a href=\"https://www.itead.cc/sonoff-wifi-wireless-switch.html\">ESP8266&#39;s with AC relays</a> and orchestrate strings of holiday lights into something animated? I could be <em>that</em> guy on the block!</p>\n<p>Anyway, let me know what you think!</p>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "body": "**TL;DR**: I made a wifi pumpkin using an ESP8266 with LED matrix eyes and mouth.\nI added a web-based remote control for my phone using websockets. It was fun!\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nA few years ago, [I decided][pumpkintweet] to use some LED matrices to make animated\neyes for a jack-o'-lantern. Not terribly original, but it sounded fun.\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Considering getting some LED matrices to make animated eyes &amp; mouth for a jack-o-lantern. Seems like it could be a fun project or a disaster</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/651958618800177152?ref_src=twsrc%5Etfw\">October 8, 2015</a></blockquote>\n\n[pumpkintweet]: https://twitter.com/lmorchard/status/651958618800177152\n\n## v1.0 (2015)\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/21954391310/in/datetaken/\" title=\"LED matrix on a Raspberry PI\"><img class=\"inset wide left\" src=\"raspi.jpg\" alt=\"LED matrix on a Raspberry PI\"></a>\n\nMy first thought was to use a Raspberry Pi.  It was easy to get an LED matrix\nworking in Python. And, I had a notion to build some kind of remote control\nover wifi. But, it felt like overkill to stuff a whole Linux computer\ninto a gourd. ([A dead badger might work][badger], but this was not that kind\nof project.)\n\n[badger]: http://strangehorizons.com/non-fiction/articles/installing-linux-on-a-dead-badger-users-notes/\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/21994112010/in/datetaken/\" title=\"LED eyes for Pumpkin\"><img class=\"inset wide left\" src=\"arduino.jpg\" alt=\"LED eyes for Pumpkin\"></a>\n\nThat's when I remembered the Arduino Uno I had stashed in a drawer.  I found\n[this guy's project][otherpump], which confirmed I wasn't the first to try\nthis. But it was nice to start from [someone else's code][workingcode]. \n\n[workingcode]: https://github.com/michaltj/LedEyes/blob/master/LedEyes.ino\n[otherpump]:  https://mjanyst.weebly.com/arduino-pumpkin-eyes.html\n\nI had a brief go at scripting some animations, which resulted\nin an [over-engineered little sketch][overengineered] that helped me \nexercise my rusty C skills.\n\n[overengineered]: https://github.com/lmorchard/arduino-sketches/blob/master/googly_eyes/googly_eyes.ino\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/22453913015/in/datetaken/\" title=\"NES pad eyes for Pumpkin\"><img class=\"inset wide left\" src=\"nespad1.jpg\" alt=\"NES pad eyes for Pumpkin\"></a>\n\nFrom there, I discovered an [NESPad library][] that made [hooking up a\ncontroller][hookingup] simple. It's just [a serial interface\npowered by a shift register][neshow] - pre-teen me would have been impressed that I\nfinally learned how so many buttons worked with so few pins.\n\n[neshow]: https://www.allaboutcircuits.com/projects/nes-controller-interface-with-an-arduino-uno/\n[hookingup]: https://github.com/lmorchard/arduino-sketches/blob/master/nespad_eyes/nespad_eyes.ino\n[nespad library]: https://github.com/joshmarinacci/nespad-arduino \n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/22463866250/in/datetaken/\" title=\"Pumpkin, candy, NES pad\"><img class=\"inset wide left\" src=\"orig-real-pumpkin-3.jpg\" /></a>\n\nWhen Halloween arrived, I hustled to get it done before dusk: I carved some\nquick square holes for eyes, nose, and mouth - let's say it's an 8-bit thing. \n\nI bundled up the electronics with plastic wrap and crammed the mess into\nthe pumpkin. I strapped the LED matrices in with picture\nwire. The results weren't too bad in the dark. \nTrick-or-treaters seemed entertained by my cyborg pumpkin buddy as I handed out\ncandy!\n\nNot long after Halloween, the gourd went downhill fast. Pumpkins are\nnot a good choice of long-term project enclosure. I put it off as long as I could, but\nfinally I had to put on some gloves to rescue my parts from the slimy\nmess. Those parts went in a box and went untouched for the next year. \n<br style=\"clear:both\">\n\n## v2.0 (2016)\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30331621951/in/datetaken/\" title=\"Pumpkin 2.0\"><img class=\"inset wide right\" src=\"pumpkin2-1.jpg\" /></a>\n\nAs Halloween approached again, I wanted to give the project another go. I\nfound a foam pumpkin at Target that seemed realistic. A little time at\n[the local maker space][i3] with my Swiss Army knife, and I had a freshly carved\nsynthetic jack-'o-lantern. \n\n[i3]: https://www.i3detroit.org/\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30380916606/in/datetaken/\" title=\"Pumpkin 2.0\"><img class=\"inset wide right\" src=\"pumpkin2-2.jpg\" /></a>\n\nRather than glue things together, I just used some gaffer tape inside to hold\nthe eyes in place. I'd planned to add some more LED matrices to give it a mouth,\nbut never quite got around to it. The little guy seems a bit creepy with just a\npair of eyes, though.\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30380883136/in/datetaken/\" title=\"Pumpkin 2.0 NES connection\"><img class=\"inset wide right\" src=\"nes-connection.jpg\" alt=\"Pumpkin 2.0 NES connection\"></a>\n\nWith a house move in the works, my ambition ran out fast that year. I\ndidn't make any code changes, but I did have to do some reverse engineering.\n\nBecause, of course, I hadn't left myself good notes and some of the wires had\ncome undone over the past year.  My poor NES controller was looking sad with\nwires just kind of crammed into it.  But, it still worked.\n\nI refreshed the thing just enough to make it live to see another day. We\ndidn't hand out candy that year, though, so the thing just decorated my office\nfor awhile. <br style=\"clear:both\">\n\n## v3.0 (2017)\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37852469272/in/datetaken/\" title=\"Pumpkin meets hot glue\"><img class=\"inset wide right\" src=\"hot-glue.jpg\" alt=\"Pumpkin meets hot glue\"></a>\n-->\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031281868/in/datetaken/\" title=\"20171022_203806\"><img id=\"thumbnail\" class=\"inset wide left\" src=\"pumpkin.jpg\" alt=\"20171022_203806\"></a>\n\nAnother Halloween and I felt an urge to get more ambitious: I’d picked up that\nArduino at a Maker Faire back in 2011, pretty far from state of the art these \ndays. \n\nI’d been reading about the [ESP8266][] -\na cheap and tiny WiFi module that had been repurposed for\nmore tinkery things.  In fact, I read that you could even flash unmodified\nArduino sketches onto the thing.\n\n[esp8266]: https://www.espressif.com/en/products/hardware/esp8266ex/overview\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031428708/in/datetaken/\" title=\"Creepy pumpkin eyes\"><img class=\"inset wide left\" src=\"creepy.jpg\" alt=\"Creepy pumpkin eyes\"></a>\n-->\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626526390/in/datetaken/\" title=\"20171019_233614\"><img class=\"inset wide left\" src=\"interior.jpg\" alt=\"20171019_233614\"></a>\n\nSo, I ordered [an ESP8266 dev board][nodemcu] and four more [8x8 LED\nmatrices][matrix] for a mouth.\nIt took me an hour to [port my old Arduino sketch over][ported],\nincluding the time to set up the dev stack. The eyes came alive on\nthe new hardware in very short order. Another hour and I had the\nmouth animating.\n\n[nodemcu]: http://a.co/8zPcmQ5 \n[matrix]: http://a.co/3Mc3qZZ\n[ported]: https://github.com/lmorchard/arduino-sketches/blob/master/nodemcu/nespad_eyes/nespad_eyes.ino\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37852235042/in/datetaken/\" title=\"20171017_005235\"><img class=\"inset wide left\" src=\"mouth.jpg\" alt=\"20171017_005235\"></a>\n-->\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37173755914/in/datetaken/\" title=\"20171021_230802\"><img class=\"inset wide left\" src=\"missing-column.jpg\" alt=\"20171021_230802\"></a>\n-->\n\nA bit more carving, and I was ready to install the mouth. I switched\nfrom gaffer tape to hot glue to make things more permanent. Alas, somehow I\ndamaged a column of LEDs in the process. But, oh well: I just gave it fangs.\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626516700/in/datetaken/\" title=\"20171019_233504\"><img class=\"inset wide left\" src=\"plugs.jpg\" alt=\"20171019_233504\"></a>\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626520570/in/datetaken/\" title=\"20171019_233530\"><img class=\"inset wide wide left\" src=\"plugged-in.jpg\" alt=\"20171019_233530\"></a>\n-->\n\nTo tidy the whole thing up, I bought extension cables for USB power and the NES\ngamepad. I hacked those up and hot glued them into the back of the pumpkin. \n\nWhen I was done, I had no cables trailing out from the inside of the thing. And, I could\nstop shoving bare wires into the end of an NES pad. And, if I wanted to go\ncompletely wireless, I could drop a USB power bank into the top and just\nconnect it from inside.\n<br style=\"clear:both\">\n\n## v4.0 (2017)\n\nBut, speaking of completely wireless: Back at the start, I'd\nconsidered using a Raspberry Pi.  Given a USB wifi adapter, I could have\nwritten a little web app to use as a remote control for the pumpkin. I still\nwanted to make that happen.\n\nI knew this ESP8266 thing was handy, but I didn't realize just how handy until I did some more research. I found an interesting set of libraries to glue together:\n\n* [ESP8266 Arduino core][espcore] - this let me port my sketch over mostly unmodified\n* [SPIFFS][] - offers an onboard filesystem in flash memory\n* [ESP8266WebServer][] - an embedded webserver that [serves up static files from SPIFFS][servestatic] and lets me handle some URL routes with C code\n* [arduinoWebsockets][] - websockets server and client libraries\n* [WiFiManager][] - code to fire up an temporary Access Point with a captive web portal to bootstrap wifi configuration - great for a device with no screen or keyboard\n\n[espcore]: https://github.com/esp8266/Arduino\n[SPIFFS]:http://esp8266.github.io/Arduino/versions/2.0.0/doc/filesystem.html \n[servestatic]: https://github.com/esp8266/Arduino/tree/master/libraries/ESP8266WebServer/examples/FSBrowser \n[arduinoWebsockets]: https://github.com/Links2004/arduinoWebSockets\n[ESP8266WebServer]: https://github.com/esp8266/Arduino/tree/master/libraries/ESP8266WebServer\n[WiFiManager]: https://github.com/tzapu/WiFiManager\n\nLong story short, I used all the above to produce this masterpiece:\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031282388/in/datetaken/\" title=\"Screenshot_20171023-004211\"><img class=\"fullwidth\" src=\"controls.jpg\" alt=\"Screenshot_20171023-004211\"></a>\n\nWhat you're looking at is the wifi remote control for my pumpkin. The big yellow square is a virtual touchpad - dragging my finger across it moves the eyeballs. Tapping \"Blink\" makes the eyes blink, while \"Talk\" makes the mouth open & close.\n\nIt's a little web page loaded up from the onboard file system. It connects back to a websocket server that [accepts a bunch of little commands][wscmds] - which, oddly enough, map directly to NES pad buttons so I could be lazy and just reuse all the same code paths.\n\n[wscmds]: https://github.com/lmorchard/arduino-sketches/blob/master/nodemcu/nespad_eyes/nespad_eyes.ino#L324 \n\nBuilding this went way easier than I expected. Sure, it's embarassing code that anyone sensible would shred in a code review. But, it was fun hacking and works pretty much like I hoped it would. In particular, I was surprised at how responsive it ended up being. Without any optimization, it follows my taps and drags without noticible lag.\n\nSo, for another year, I sat next to an animated glowing pumpkin while I handed\nout candy. But this time, I played amateur ventriloquist and had the thing\ntalking to kids while I prodded at my cell phone. Pretty awkward and nerdy, but\nI think some folks appreciated it. They humored me, at least.\n\n## v5.0? What's next?\n\nA few months later, this project is lying fallow. It’s on display in my office, where I can watch the semi-random idle gibbering whenever I like. And though I haven't gotten back to any ESP8266 tinkering since October, I'm still kind of musing over what I could hack together next.\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37885815451/in/datetaken/\" title=\"20171023_144656\"><img class=\"fullwidth\" src=\"in-office.jpg\" alt=\"20171023_144656\"></a>\n\nIt feels weird to say it, but this project might be done: this pumpkin seems pretty close to my original idea. \n\nI’ve mused about maybe building some sort of voice assistant into it: talk to the pumpkin, control things around the house, hear about the weather, order it to fire candy into kids’ bags with tiny trebuchets - who knows?\n\nI could upgrade from LED matrices to [full-blown OLED screens][oled]. Though, if I did that, I've got a notion to build myself a replica of 790 from Lexx. I'd probably regret it, but he seems more my kind of personal assistant than current offerings like Alexa or Siri:\n\n<div style=\"position: relative; padding-bottom: 56.25%;\">\n  <iframe class=\"lazyload\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"\" data-src=\"https://www.youtube.com/embed/s8d1mfLa5Vk\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe>\n</div>\n\n[oled]: https://learn.adafruit.com/animated-electronic-eyes-using-teensy-3-1/overview\n\nI've also been thinking bigger: Like, what if I turned my *house* into an animated character? Combine some [ESP8266's with AC relays][sonoff] and orchestrate strings of holiday lights into something animated? I could be *that* guy on the block!\n\nAnyway, let me know what you think!\n\n[sonoff]: https://www.itead.cc/sonoff-wifi-wireless-switch.html\n\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "parentPath": "../blog.lmorchard.com/posts/2018-02-08-pumpkin",
    "path": "2018/02/08/pumpkin",
    "thumbnail": "/blog.lmorchard.com/2018/02/08/pumpkin/pumpkin.jpg",
    "summary": "<p><strong>TL;DR</strong>: I made a wifi pumpkin using an ESP8266 with LED matrix eyes and mouth.\nI added a web-based remote control for my phone using websockets. It was fun!</p>\n",
    "prevPostPath": "2018/03/01/themesrfun",
    "nextPostPath": "2017/06/01/backyard-pond"
  }
]