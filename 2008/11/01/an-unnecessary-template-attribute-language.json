{"comments_archived":true,"date":"2008-11-01T00:00:00.000Z","layout":"post","tags":["webdev","js","javascript","entries","jquery","zope","zpt","tal","templates"],"title":"An unnecessary Template Attribute Language","wordpress_id":1450,"wordpress_slug":"an-unnecessary-template-attribute-language","wordpress_url":"http://decafbad.com/blog/?p=1450","url":"/2008/11/01/an-unnecessary-template-attribute-language/","path":"2008/11/01/an-unnecessary-template-attribute-language","content":"<p>A funny thing happened on the way to building <a href=\"http://svn.mozilla.org/projects/lizardfeeder/trunk/\">a delayed real-time feed display</a>:  I got temporarily obsessed with implementing <a href=\"http://github.com/lmorchard/jquery-tal-template/tree/master\">a template language in JavaScript</a> that, as it turned out later, I didn&#39;t need.  About <a href=\"http://svn.mozilla.org/projects/lizardfeeder/trunk/\">the feed project itself</a>, I hope to write more soon—but for now I want to get this extra template language thing out of my system and see if anyone else might have a use for it.</p>\n<p>See, I had a notion it would be keen if I had access to the same template language on the client as on the server.  I needed to render a number of list items statically on the server with feed entries, then update that list with new entries on the client as they became available through JSON feed polling.  It&#39;d be a pain in the butt to maintain two separate list item templates for client and server, so I reached for a shared template language.</p>\n<p>Never mind that I&#39;d just gotten done writing <a href=\"http://www.amazon.com/gp/product/0470452021?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;c%0D%0Areative=9325&amp;creativeASIN=0470452021\">a small book on Dojo</a>, and was already aware of the existence of the <a href=\"http://svn.dojotoolkit.org/src/dojox/trunk/dtl/README\">DojoX Django Template Language</a>.  This might&#39;ve worked, since the server end of things was written in Python (though not with Django).  That the JavaScript side already used <a href=\"http://jquery.com/\">jQuery</a> wasn&#39;t <em>too</em> tall a hurdle.  Also, I&#39;m sure there are a handful of other JavaScript/Python template language match-ups to be found.</p>\n<p>But, let&#39;s be honest here:  I&#39;ve always been a fan of Zope&#39;s <a href=\"http://wiki.zope.org/ZPT/TALSpecification14\">Template Attribute Language</a> for their <a href=\"http://wiki.zope.org/ZPT/FrontPage\">Page Templates</a>, and have long wondered how hard it would be to implement.  The concept seems so much cleaner to me than most string-formatting template languages, and the workflow from mockup-to-template and back again has always been appealing to me when it works.  So, when my first few experimental steps in trying my hand at it actually started working, I couldn&#39;t stop coding.  </p>\n<p>And now, <a href=\"http://github.com/lmorchard/jquery-tal-template/tree/master/jquery.taltemplate.js\">the thing</a> is mostly done.  It has no tests, has features left undone, and probably yields plenty of bugs—but I finished it enough to use it practically, and that was long enough to convince me it wasn&#39;t the right tool for the job.  </p>\n<p>Still, though, I can&#39;t help thinking it might be the right tool for <em>some</em> job.  That could be because I spent a lot of time on it, or that I&#39;m unreasonably fond of <a href=\"http://wiki.zope.org/ZPT/TALSpecification14\">TAL</a>, but it still feels like a decent little plugin to have on hand.  Maybe someone reading this will have a similar conclusion.</p>\n<p>Oh and by the way, plain <a href=\"http://jquery.com/\">jQuery</a> turned out to be a better tool for <a href=\"http://svn.mozilla.org/projects/lizardfeeder/trunk/\">the job in question</a>.  This seems to nicely balance the duplicate effort between server and client, demanding only that I stick with semantically significant CSS class names in the server template—something I should be doing anyway:</p>\n<pre><code>        // Clone and populate a new entry.\n        var new_item = $(&#39;#feed-items .entry:last&#39;)\n            .clone()\n            .attr(&#39;class&#39;, entry_classes.join(&#39; &#39;)) \n            .find(&#39;.group span&#39;)\n                .text(tags[&#39;group&#39;])\n            .end()\n            .find(&#39;.title&#39;)\n                .find(&#39;.favicon&#39;)\n                    .attr(&#39;src&#39;, favicon)\n                .end()\n                .find(&#39;.link&#39;)\n                    .attr(&#39;href&#39;, entry.link)\n                    .text(entry.title)\n                .end()\n            .end()\n            .find(&#39;.updated&#39;)\n                .find(&#39;.timeago&#39;)\n                    .attr(&#39;title&#39;, entry.updated)\n                    .text(entry_updated.strftime(&#39;%+&#39;))\n                    .timeago()\n                .end()\n                .find(&#39;.time&#39;)\n                    .text(entry_updated.strftime(&#39;%I:%M %p&#39;))\n                .end()\n            .end()\n            .find(&#39;.author&#39;)\n                .text(entry.author || &#39;n/a&#39;)\n            .end()\n            .prependTo(&#39;#feed-items&#39;)\n            .hide();\n</code></pre><p>Of course, <em>plain</em> is a relative term here.</p>\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n\n        <ul class=\"comments\">\n\n        <li class=\"comment\" id=\"comment-221083366\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3f398029eea744ce9ba9147aab627557&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">brad clements</a>\n                </div>\n                <a href=\"#comment-221083366\" class=\"permalink\"><time datetime=\"2008-11-03T21:26:42\">2008-11-03T21:26:42</time></a>\n            </div>\n            <div class=\"content\"><p>Groan,</p>\n\n<p>Too bad I haven&#39;t had a chance to finish documenting (and tweaking) the ATALi project.</p>\n\n<p>It&#39;s a collection of Alternative TAL Implementations.</p>\n\n<p>It currently has TAL for xslt (server side using libxslt directly or via lxml with metal support)</p>\n\n<p>and TAL for javascript (no libraries needed, though it does recognize mochikit iterators, no metal)</p>\n\n<p><a href=\"https://launchpad.net/atali\">https://launchpad.net/atali</a></p></div>\n\n<pre><code>    &lt;/li&gt;\n\n    &lt;li class=&quot;comment&quot; id=&quot;comment-221083367&quot;&gt;\n        &lt;div class=&quot;meta&quot;&gt;\n            &lt;div class=&quot;author&quot;&gt;\n                &lt;a class=&quot;avatar image&quot; rel=&quot;nofollow&quot; \n                   href=&quot;http://www.jm3.net/&quot;&gt;&lt;img src=&quot;http://disqus.com/api/users/avatars/jm3.jpg&quot;/&gt;&lt;/a&gt;\n                &lt;a class=&quot;avatar name&quot; rel=&quot;nofollow&quot; \n                   href=&quot;http://www.jm3.net/&quot;&gt;John Manoogian III (jm3)&lt;/a&gt;\n            &lt;/div&gt;\n            &lt;a href=&quot;#comment-221083367&quot; class=&quot;permalink&quot;&gt;&lt;time datetime=&quot;2008-11-24T18:51:17&quot;&gt;2008-11-24T18:51:17&lt;/time&gt;&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;content&quot;&gt;&lt;p&gt;Have you seen &quot;trimpath&quot;?&lt;/p&gt;\n</code></pre><p><p><a href=\"http://code.google.com/p/trimpath/wiki/JavaScriptTemplates\">http://code.google.com/p/trimpath/wiki/JavaScriptTemplates</a></p></div></p>\n<pre><code>    &lt;/li&gt;\n\n    &lt;/ul&gt;\n\n    &lt;/div&gt;\n</code></pre>"}