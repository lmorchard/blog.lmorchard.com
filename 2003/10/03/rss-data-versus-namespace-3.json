{"comments_archived":true,"date":"2003-10-03T00:00:00.000Z","layout":"post","title":"RSS 2.0 namespace versus RSS-Data, Part 3: Electric Boogalee","wordpress_id":490,"wordpress_slug":"rss-data-versus-namespace-3","wordpress_url":"http://www.decafbad.com/blog/?p=490","url":"/2003/10/03/rss-data-versus-namespace-3/","summary":"<p></p><p>\nSo, for the same of argument, yesterday I threw together\n<a href=\"http://www.decafbad.com/blog/tech/rss_data_versus_namespace.html\">examples</a>\nof what a use of RSS-Data might look like alongside what\nthe same data in an RSS namespace extension might look like.\nI promised code, but never got a chance to circle back around.\nFortunately, <a href=\"http://www.myelin.co.nz/post/\">Phillip Pearson</a>\nconnected the rest of the dots for me with two examples:\n</p><p></p>\n<p><ul></ul></p>\n<p><li><a href=\"http://www.myelin.co.nz/post/2003/10/3/#200310031\">Parsing RSS-Data</a></li></p>\n<p><li><a href=\"http://www.myelin.co.nz/post/2003/10/3/#200310032\">Parsing an RSS namespace extension</a></li>\n</p>\n<p></p><p>\nI was just a <i>little</i> surprised by his results, since I expected\nthe code to handle an RSS namespace to be at least a bit more complex\nthan the RSS-Data example.  But,\n<a href=\"http://www.myelin.co.nz/post/2003/10/3/#200310033\">as Phillip observed later</a>,\nthe scripts were pretty much equivalent in length, complexity, and\nease of construction.\n</p><p></p>\n<p></p><p>\nThen, this morning, I saw that Danny Ayers had posted an\n<a href=\"http://dannyayers.com/archives/001908.html\">example in RDF</a>\nof this same data.  It doesn&apos;t differ very much from my namespace\nextension example, except that the few differences there are enables\nhis example to flow through RDF tools (as well as, usually, XML tools like\nXPath and XSLT).\n</p><p></p>\n<p></p><p>\nIn <a href=\"http://www.myelin.co.nz/phil/pss/comments.php?u=2&amp;p=200310033&amp;link=http://www.myelin.co.nz/post/2003/10/3/#200310033\">a comment</a>\non one of Phillip&apos;s posts, though, Roger Benningfield makes\nthe point that this example is a bit biased:\n</p><p></p>\n<p><blockquote><i>\nI agree that there won&apos;t be a ton of difference between a struct full\nof strings and plain ol&apos; XML. But that&apos;s kind of a stacked example,\nsince SDL would allow a lot more than that... arrays, integers, and\narrays of integers inside structs.\n</i></blockquote></p>\n<p></p><p>\nWhat I did could be obscuring some work.  I just took an existing\nschema from Amazon, which gave me some initial work already for free.\n(Though, there&apos;s something to be said for <i>that</i> in and of itself.)\nThe structures were already established, and the schema was created\nwith XML representation already in mind.  This could have placed\nRSS-Data at an example.  While I really don&apos;t think\nthat XML-RPC serialization offers more flexibility in expression than\nXML itself, I could be wrong and I don&apos;t want to be tilting\nat <a href=\"http://www.nizkor.org/features/fallacies/straw-man.html\">straw men</a>.<br></p><p></p>\n<p></p><p>\nSo, while I doubt that I&apos;ll have a whole lot of time today, I think\nfor the same of completeness, someone should go through the parallel\nprocesses of going from problem statement up through data modeling and\non to production and consumption of RSS-Data and an RSS namespace\nextension.  While doing this, capture the work involved in both.\n</p><p></p>\n<p></p><p>\nI could see shortcuts taken on the RSS-Data side, since you don&apos;t have\nto be concerened with various bits of XML tech like DTDs or schema\nor whatnot.  You can jump right into coding up an example usage and\ncome up with your data model on the fly.  Whether this is a good thing\nor not, I&apos;m sure many will disagree.  Also, I&apos;m sure others would\ngo through this differently than I would.  Again, your mojo may\nexceed mine.\n</p><p></p>\n<p></p><p>\nAt this point, I can see the benefits of RSS-Data in rapidly cobbling\ntogether scripts, but I lean toward having a decently defined data\nmodel first.  You can do this in your scripts, but using the existing\nXML tech forces you through some specific processes.  On the other\nhand, I can see where some busy developers don&apos;t have time or spare\nbrain cycles to absorb all the XML tech.  It could be made easier\nat that end of things, which is where I&apos;d rather spend my effort.\n</p><p></p>\n<p></p><p>\nAnyway, I&apos;m really interested in seeing where this goes, because\nthis comparison of RSS-Data, RSS namespace extensions, and even\nRDF seems like another very concrete, non-theoretical way to demonstrate\nthe benefits and drawbacks of these ways of thinking about data\nand interoperability.\n</p>\n","path":"2003/10/03/rss-data-versus-namespace-3","content":"<p><p>\nSo, for the same of argument, yesterday I threw together\n<a href=\"http://www.decafbad.com/blog/tech/rss_data_versus_namespace.html\">examples</a>\nof what a use of RSS-Data might look like alongside what\nthe same data in an RSS namespace extension might look like.\nI promised code, but never got a chance to circle back around.\nFortunately, <a href=\"http://www.myelin.co.nz/post/\">Phillip Pearson</a>\nconnected the rest of the dots for me with two examples:\n</p></p>\n<p><ul></p>\n<p><li><a href=\"http://www.myelin.co.nz/post/2003/10/3/#200310031\">Parsing RSS-Data</a></li></p>\n<p><li><a href=\"http://www.myelin.co.nz/post/2003/10/3/#200310032\">Parsing an RSS namespace extension</a></li>\n</ul></p>\n<p><p>\nI was just a <i>little</i> surprised by his results, since I expected\nthe code to handle an RSS namespace to be at least a bit more complex\nthan the RSS-Data example.  But,\n<a href=\"http://www.myelin.co.nz/post/2003/10/3/#200310033\">as Phillip observed later</a>,\nthe scripts were pretty much equivalent in length, complexity, and\nease of construction.\n</p></p>\n<p><p>\nThen, this morning, I saw that Danny Ayers had posted an\n<a href=\"http://dannyayers.com/archives/001908.html\">example in RDF</a>\nof this same data.  It doesn&#39;t differ very much from my namespace\nextension example, except that the few differences there are enables\nhis example to flow through RDF tools (as well as, usually, XML tools like\nXPath and XSLT).\n</p></p>\n<p><p>\nIn <a href=\"http://www.myelin.co.nz/phil/pss/comments.php?u=2&p=200310033&link=http://www.myelin.co.nz/post/2003/10/3/#200310033\">a comment</a>\non one of Phillip&#39;s posts, though, Roger Benningfield makes\nthe point that this example is a bit biased:\n</p></p>\n<p><blockquote><i>\nI agree that there won&#39;t be a ton of difference between a struct full\nof strings and plain ol&#39; XML. But that&#39;s kind of a stacked example,\nsince SDL would allow a lot more than that... arrays, integers, and\narrays of integers inside structs.\n</i></blockquote></p>\n<p><p>\nWhat I did could be obscuring some work.  I just took an existing\nschema from Amazon, which gave me some initial work already for free.\n(Though, there&#39;s something to be said for <i>that</i> in and of itself.)\nThe structures were already established, and the schema was created\nwith XML representation already in mind.  This could have placed\nRSS-Data at an example.  While I really don&#39;t think\nthat XML-RPC serialization offers more flexibility in expression than\nXML itself, I could be wrong and I don&#39;t want to be tilting\nat <a href=\"http://www.nizkor.org/features/fallacies/straw-man.html\">straw men</a>.<br></p></p>\n<p><p>\nSo, while I doubt that I&#39;ll have a whole lot of time today, I think\nfor the same of completeness, someone should go through the parallel\nprocesses of going from problem statement up through data modeling and\non to production and consumption of RSS-Data and an RSS namespace\nextension.  While doing this, capture the work involved in both.\n</p></p>\n<p><p>\nI could see shortcuts taken on the RSS-Data side, since you don&#39;t have\nto be concerened with various bits of XML tech like DTDs or schema\nor whatnot.  You can jump right into coding up an example usage and\ncome up with your data model on the fly.  Whether this is a good thing\nor not, I&#39;m sure many will disagree.  Also, I&#39;m sure others would\ngo through this differently than I would.  Again, your mojo may\nexceed mine.\n</p></p>\n<p><p>\nAt this point, I can see the benefits of RSS-Data in rapidly cobbling\ntogether scripts, but I lean toward having a decently defined data\nmodel first.  You can do this in your scripts, but using the existing\nXML tech forces you through some specific processes.  On the other\nhand, I can see where some busy developers don&#39;t have time or spare\nbrain cycles to absorb all the XML tech.  It could be made easier\nat that end of things, which is where I&#39;d rather spend my effort.\n</p></p>\n<p><p>\nAnyway, I&#39;m really interested in seeing where this goes, because\nthis comparison of RSS-Data, RSS namespace extensions, and even\nRDF seems like another very concrete, non-theoretical way to demonstrate\nthe benefits and drawbacks of these ways of thinking about data\nand interoperability.\n</p>\n<!--more-->\nshortname=rss_data_versus_namespace_3</p>\n"}