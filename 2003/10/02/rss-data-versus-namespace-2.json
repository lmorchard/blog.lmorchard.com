{"comments_archived":true,"date":"2003-10-02T00:00:00.000Z","layout":"post","title":"RSS 2.0 namespace versus RSS-Data, Part 2: First impressions","wordpress_id":489,"wordpress_slug":"rss-data-versus-namespace-2","wordpress_url":"http://www.decafbad.com/blog/?p=489","url":"/2003/10/02/rss-data-versus-namespace-2/","summary":"<p>\nOkay, I got\n<a href=\"http://www.decafbad.com/blog/tech/rss_data_versus_namespace.html\">the example data</a> out there.\nHere&apos;s what&apos;s first on my mind about it:\n</p>\n<ol>\n<li>\n<p>\nMan, that RSS-Data is one verbose piece of XML.  The Amazon-specific\nnamespace version looks much more compact and readable; I&apos;d rather\n<a href=\"http://backend.userland.com/davesRss2PoliticalFaq\">View Source</a>\non that one.\n</p>\n</li>\n<li>\n<p>\nPython comes out of the box with\n<a href=\"http://www.python.org/doc/current/lib/module-xmlrpclib.html\">xmlrpclib</a>,\nand other languages have XML-RPC facilities available as well.  I can&apos;t imagine\nit&apos;d be too hard to get a hold of the core of it and employ it in\nunmarshalling the RSS-Data straight into idiomatic Python structures.\nOn the other hand, I&apos;ll need to write my own handlers for the Amazon XML\nusing the XML parser modules that come with Python.\n</p>\n</li>\n<li>\n<p>\nWith its clean, almost self-documenting structure, the Amazon XML is easily\nhandled with XPath and XSL.  If I had a pile of ProductInfo elements\nin a document, I could yank out all their images with something like:\n<code>//az:ProductInfo/az:Details/az:ImageUrlSmall</code>\n</p>\n<p>\nUsing the RSS-Data\nexample, it&apos;d probably be something more like:\n<code>//sdl:data/sdl:struct/sdl:member/sdl:name[@text=&apos;ImageUrlSmall&apos;]/../sdl:value</code>,\nand that&apos;s not considering if I have mixed kinds of RSS-Data schema represented in the\nfeed.\n</p>\n<p>\nI suppose I could help this out by surrounding the struct with another\nstruct, containing one member named &apos;AzProductInfo&apos;, making the path something\nlike so:\n<code>//sdl:data/sdl:struct/sdl:member/sdl:name[@text=&apos;AzProductInfo&apos;]<br>\n/../sdl:value/sdl:struct/sdl:member/sdl:name[@text=&apos;ImageUrlSmall&apos;]/../sdl:value</code>.\n</p>\n</li>\n</ol>\n\n<p>\nAnd these are the conclusions I&apos;m jumping to at the moment, before experimenting:\n</p>\n\n<p><ol></ol></p>\n<p><li>\nRSS-Data&apos;s convenience to script authors is at odds with the RSS 2.0\nspirit of View Source.\n</li></p>\n<p><li>\nProducing and consuming RSS-Data could be easier than handling\npurpose-specific XML schema in scripts.\n</li></p>\n<p><li>\nSince RSS-Data doesn&apos;t follow in the spirit of XML specs and schema,\nusing formal XML tools to handle this stuff will give you\nnothing but headaches.  (Then again, it seems like some of the\nstuff that&apos;s fully in the spirit of XML yields headaches just\nthe same.)\n</li></p>\n<p><li>\nRSS-Data might catch on and spread nonetheless, because lots\nof people don&apos;t read XML, don&apos;t use formal XML tools, and just\nwrite scripts to get their jobs done.\n</li>\n\n</p>","path":"2003/10/02/rss-data-versus-namespace-2","content":"<p>\nOkay, I got\n<a href=\"http://www.decafbad.com/blog/tech/rss_data_versus_namespace.html\">the example data</a> out there.\nHere&#39;s what&#39;s first on my mind about it:\n</p>\n<ol>\n<li>\n<p>\nMan, that RSS-Data is one verbose piece of XML.  The Amazon-specific\nnamespace version looks much more compact and readable; I&#39;d rather\n<a href=\"http://backend.userland.com/davesRss2PoliticalFaq\">View Source</a>\non that one.\n</p>\n</li>\n<li>\n<p>\nPython comes out of the box with\n<a href=\"http://www.python.org/doc/current/lib/module-xmlrpclib.html\">xmlrpclib</a>,\nand other languages have XML-RPC facilities available as well.  I can&#39;t imagine\nit&#39;d be too hard to get a hold of the core of it and employ it in\nunmarshalling the RSS-Data straight into idiomatic Python structures.\nOn the other hand, I&#39;ll need to write my own handlers for the Amazon XML\nusing the XML parser modules that come with Python.\n</p>\n</li>\n<li>\n<p>\nWith its clean, almost self-documenting structure, the Amazon XML is easily\nhandled with XPath and XSL.  If I had a pile of ProductInfo elements\nin a document, I could yank out all their images with something like:\n<code>//az:ProductInfo/az:Details/az:ImageUrlSmall</code>\n</p>\n<p>\nUsing the RSS-Data\nexample, it&#39;d probably be something more like:\n<code>//sdl:data/sdl:struct/sdl:member/sdl:name[@text=&#39;ImageUrlSmall&#39;]/../sdl:value</code>,\nand that&#39;s not considering if I have mixed kinds of RSS-Data schema represented in the\nfeed.\n</p>\n<p>\nI suppose I could help this out by surrounding the struct with another\nstruct, containing one member named &#39;AzProductInfo&#39;, making the path something\nlike so:\n<code>//sdl:data/sdl:struct/sdl:member/sdl:name[@text=&#39;AzProductInfo&#39;]<br />\n/../sdl:value/sdl:struct/sdl:member/sdl:name[@text=&#39;ImageUrlSmall&#39;]/../sdl:value</code>.\n</p>\n</li>\n</ol>\n\n<p>\nAnd these are the conclusions I&#39;m jumping to at the moment, before experimenting:\n</p>\n\n<p><ol></p>\n<p><li>\nRSS-Data&#39;s convenience to script authors is at odds with the RSS 2.0\nspirit of View Source.\n</li></p>\n<p><li>\nProducing and consuming RSS-Data could be easier than handling\npurpose-specific XML schema in scripts.\n</li></p>\n<p><li>\nSince RSS-Data doesn&#39;t follow in the spirit of XML specs and schema,\nusing formal XML tools to handle this stuff will give you\nnothing but headaches.  (Then again, it seems like some of the\nstuff that&#39;s fully in the spirit of XML yields headaches just\nthe same.)\n</li></p>\n<p><li>\nRSS-Data might catch on and spread nonetheless, because lots\nof people don&#39;t read XML, don&#39;t use formal XML tools, and just\nwrite scripts to get their jobs done.\n</li>\n</ol>\n<!--more-->\nshortname=rss_data_versus_namespace_2</p>\n"}