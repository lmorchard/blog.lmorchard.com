<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>blog.lmorchard.com</title>
      <description>It&#39;s all spinning wheels &amp; self-doubt until the first pot of coffee.</description>
      <link>https://lmorchard.github.io/blog.lmorchard.com</link>
      <atom:link href="https://lmorchard.github.io/blog.lmorchard.com/index.rss" rel="self" type="application/rss+xml" />      
      <item>
          <title>Beyond Backlinks, LiveJournal connections, and David Brin&#39;s Earth</title>
          <description>Sam Ruby wants to go Beyond Backlinks, and I&#39;m right there with him.  He writes about the various means we&#39;ve tried so far to discover connections (ie. referrers and linksback and Jon&#39;s analysis of blogroll connections), and muses further.  I love the idea of further automation in surprisingly discovering connections and automatically exploring other feeds, based on discovered connections.
A plug for LiveJournal:  I love their user info pages.  I&#39;ve been idly musing for a while now on how one might decentralize this and extend it web-wide throughout blogspace.  I love seeing the friends and friends-of lists, analogous to blogrolls and inverse-blogrolls.  And, I really love the interests lists, since just by entering a catalog of phrases, you can see unexpected links to other people interested in the same things.  Not quite correlations or deep analysis, but it helps.  
But it&#39;s the decentralization that rubs.  I could probably start a service that provides user info page workalikes to bloggers.  I could offer it for free, but then I might get popular and have to pay more for my altruism than I can afford.  (Sometimes I worry about BlogRolling.com.)  I could offer it for a small fee, but then the service would probably never see widespread use.  Were it decentrallized, I could write some software, and others could pay their own way in server resources.  More to think about this.
Also, if I can get time this weekend, there are a lot of parts of David Brin&#39;s novel, Earth, that I&#39;d like to babble about.  Reading it right now, and seeing that he wrote it just around 1990, I&#39;m amazed at how fresh it still is.  Sci-fi and speculative fiction rarely stand the test of years and unexpected advances, but a lot of the stuff in this book - particularly about the way in which people deal with information, how they discuss and create and manage it - seems to be happening right now.
Anyway, more soon.</description>
          
          <pubDate>Fri, 31 May 2002 19:25:10 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/31/oooagb/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/31/oooagb/</guid>
        </item><item>
          <title>AmphetaDesk / Radio + autodiscovered RSS feeds</title>
          <description>Found these hot little things via Phil Ringnalda and via Matt Griffith: Mark Pilgrim&#39;s Amphetadesk Auto-subscribe bookmarklet and Radio auto-subscribe bookmarklet.  So, now when you visit the site of someone who&#39;s joined the  RSS autodiscovery via HTML LINK element bandwagon, you can snag their RSS feed into your aggregator.
This makes me really want to get back to studying some in-browser scripting and DOM manipulation.  It&#39;s been awhile since I played with that, and I see more cool things done with it all the time.
Tasty.  Now I just have to wrap a few more things up, and I&#39;ll hopefully be contributing an updated Cocoa-based OS X faceplate/installer for AmphetaDesk to Morbus before the weekend&#39;s out.</description>
          
          <pubDate>Fri, 31 May 2002 19:02:38 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/31/oooaga/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/31/oooaga/</guid>
        </item><item>
          <title>RSS autodiscovery via the HTML LINK element</title>
          <description>Matt Griffith suggests using an HTML link element as a way to provide robots and news aggregators with means to find a site&#39;s RSS feed.  Mark Pilgrim chimes in with a few thoughts and an improvement.  And then, I see the buzz coming from Jenny Levine too.
So, well, it&#39;s easy enough.  I just joined the bandwagon too.</description>
          
          <pubDate>Fri, 31 May 2002 09:23:51 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/31/oooago/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/31/oooago/</guid>
        </item><item>
          <title>Obsolete Research Dooms Author to Irrelevance</title>
          <description>Ouch.  Remember that no matter how expert you may be on some things, if you start from false premises, you&#39;re doomed from the start.  Just caught this article over on Linux Journal entitled &quot;Obsolete Microkernel Dooms Mac OS X to Lag Linux in Performance&quot;.  
In the article, the author expounds at length on the nature of microkernels and their performance hits, and makes a very clear and unabashed claim that &quot;the microkernel project has failed&quot;.  Well, I don&#39;t know a great deal about microkernels, other than vague skimmings here and there.  But what I do know, is that you don&#39;t say &quot;Obsolete Microkernel Dooms Mac OS X to Lag Linux in Performance&quot; and then let slip something like &quot;I&#39;m not sure how Darwin&#39;s drivers work...&quot;, as well as never providing any metrics, analysis, code, or proof to back up the headline&#39;s claim other than to beat up a theoretical microkernel strawman.
The interesting thing to me though, is that rather than read the article first, I read the comments.  And the thing I saw was an enormous number of comments all pointing to Apple&#39;s Mach Overview, so almost instantly I was informed about the credibility of the article itself.  When you have a hundred geeks telling you to RTFM after a lenghty article, it says something.
In particular, the Apple document says:Mach 3.0 was originally conceived as a simple, extensible, communications microkernel. It is capable of running as a standalone kernel, with other traditional operating-system services such as I/O, file systems, and networking stacks running as user-mode servers.
However, in Mac OS X, Mach is linked with other kernel components into a single kernel address space. This is primarily for performance; it is much faster to make a direct call between linked components than it is to send messages or do RPCs between separate tasks. This modular structure results in a more robust and extensible system than a monolithic kernel would allow, without the performance penalty of a pure microkernel.So, from what I gathered, this little blurb counters much of what the author actually claimed would slow OS X down.  I may be mistaken on this, but it seems to be what everyone else was saying as well.
So, whereas in another circumstance, this article might&#39;ve been taken as Linuxite Anti-Mac-OS-X FUD (what&#39;s the world coming to? :) ), in this circumstance the article is just taken as an obvious demonstration of a lack of research.  Other than a bit of a sensation when I saw the headline in my aggregator, the steam got let out of it almost instantly.
Lather, rinse, repeat, and apply to all other utterances and publications.</description>
          
          <pubDate>Fri, 31 May 2002 00:37:40 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/31/oooafi/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/31/oooafi/</guid>
        </item><item>
          <title>A query on scheduling WinXP programs, and Radio resource demands</title>
          <description>Does anyone out there know of a workable, preferably free app for WinXP with which I can launch and quit a program on a scheduled basis?  Starting to work my mad Google skillz to find this, but having a hard time coming up with search terms that give me good results.  See, Radio UserLand demands too much CPU from any of the machines I currently own.  The desktop where I want to park it also serves as my PVR, and when it starts up to record a show, Radio keeps stealing CPU from the video encoding, and I end up with choppy and sometimes dead video.  I even tried screwing with priorities, and that only seems to help moderately.
So, I want to start up Radio, let it churn free.  Then just before a show comes on, I want to quit Radio.  I was doing this manually via a VNC connection from work, but that&#39;s just stupid.  The other alternatives I&#39;ve tried are running it under Wine on my Debian Linux box, which doesn&#39;t quite seem to work happily, or to run Radio again on my OS X iBook, which seems to crush the poor thing.
I suppose my desktop PC is due for an upgrade, containing only a 600MHz Athlon (though 512MB of RAM), but I&#39;ve been waiting on that.  Funny, the last time I upgraded, it was to run a few more games.  This time, its to make Radio happier.  :)
(Addendum: Hey, wait, Radio&#39;s an intelligent, reasonable platform...  I wonder if I couldn&#39;t just get it to shut itself down at a given time, and then have Windows launch it again.  I think the shutdown is the main issue, since Windows seems to come with a scheduler already for launching programs.)</description>
          
          <pubDate>Thu, 30 May 2002 23:52:24 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/30/oooafh/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/30/oooafh/</guid>
        </item><item>
          <title>The kuro5iv3 force of the wiki</title>
          <description>Rock on.  Kuro5hin now has a companion wiki named Ko4ting.  I&#39;ll be very interested to see where it goes.  (Thanks to nf0 for the link!)</description>
          
          <pubDate>Thu, 30 May 2002 22:25:59 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/30/oooafg/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/30/oooafg/</guid>
        </item><item>
          <title>Of metalinks, linkbacks, and Cocoa AmphetaDesk</title>
          <description>Still busy busy, but had to drop in for a minute to try out the Metalinker code here.  Two wishlist items: 1) Maybe use a micro-icon for the metalink, and 2) some indication of the number of links to the link on Blogdex would be hot, maybe even a green-through-red series of micro-icons for the link.  Could maybe count the links on the blogdex page via some sort of scraping, but that would require some server-side stuff since I doubt the client-side can do it.  (Or I just don&#39;t know enough modern browser scripting lately.)
Because of the obvious connections, this makes me want to get back to my new-and-improved linkback implementation very soon.  That&#39;ll be next after I tie up this Cocoa AmphetaDesk wrapper.  (Actually got it 2/3 done last night, yay!)
Back to work.</description>
          
          <pubDate>Wed, 29 May 2002 18:51:23 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/29/oooaff/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/29/oooaff/</guid>
        </item><item>
          <title>Not dead yet, just resting</title>
          <description>Oh yeah, and I am still alive.  Just heading toward the light at the end of the tunnel of a long project at work over many late nights.  Also have been living life a bit lately.  But I&#39;ve also been re-reading David Brin&#39;s Earth, VernorVinge&#39;s A Deepness in the Sky, and have a few musings about them.  Also have been doing some intermittent Lisp and Python hacking.  Oh, and I also will be trying a bit of Perl/Cocoa hacking for AmphetaDesk in the very, very near future.  Hope to get back to at the news aggregator and web log controls soon.  Anyone miss me?  :)</description>
          
          <pubDate>Tue, 28 May 2002 07:29:15 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/28/oooafe/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/28/oooafe/</guid>
        </item><item>
          <title>Yes, I am an outline nut</title>
          <description>Hmm.  I think I need to snatch up some of Marc Barrot&#39;s outline rendering code and apply it to my Movable Type weblog.  Wrapping many of my front-page elements in outline wedges would be very nice.  I suppose I could swing back toward the Radio side of things and use it more, but I really need to find a machine to be its permanent home.  Eats too much CPU on the iBook, disrupts PVR functions on my Win2K box, and seems to work half-heartedly via WINE on my Linux box.</description>
          
          <pubDate>Tue, 28 May 2002 07:24:34 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/28/oooafd/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/28/oooafd/</guid>
        </item><item>
          <title>Secret weapons of LISP and Perl</title>
          <description>Just saw Gordon Weakliem mention, via Roland Tanglao&#39;s Weblog, this article over at New Architect: Orbitz Reaches New Heights.  This snags my eye for two reasons: 1) Orbitz is a client of my employer - we do a ton of web promotions for them; and 2) LISP is one of those things I keep meaning to get back into, kinda like I keep meaning to read things from that gigantic Shakespeare collection I asked for and recieved for Christmas from me mum.
The quote that Ronald pulls out from the article is:The high-level algorithms are almost entirely in Lisp, one of the oldest programming languages. You&#39;re excused for chuckling, or saying &quot;Why Lisp?&quot; Although the language can be inefficient if used without extreme caution, it has a reputation for compactness. One line of Lisp can replace 20 lines of C. ITA&#39;s programmers, who learned the language inside and out while at MIT, note that LISP is highly effective if you ditch the prefabricated data structures. &quot;We&#39;re something of a poster child for LISP these days,&quot; says Wertheimer. &quot;Lisp vendors love us.&quot;Funny, if you did an s/Lisp/Perl/g and an s/LISP/Perl/g on that text, you&#39;d almost have a quote from me.  I&#39;ve also heard Perl often compared to LISP, amongst the upper ranks of Perl wizards.  Oldest language-- hmm, no, but it&#39;s been around the block.  Inefficient without caution-- check, hand-holding is at a minimum.  Compactness-- check, many bash it for obfucation facilitation.  Effective after ditching prefab structs-- check, if you enjoy slinging hashes all over, like I have until recently.  And so far, we&#39;re a poster child for Perl here.
What is it that I have in Perl?  Well, I&#39;ve named it the Toybox.  It&#39;s a web application platform.  We do everything with it.  Reusable software components composed into applications with a web-based construction tool.  The components contain machine and human readable descriptions on properties and methods, to enable inspection by tool and documentation generation.  Also, the components and the framework are designed to provide predefined collaboration patterns so that one component can supplement or modify the behavior of another without that other component needing to be modified or altered.  I&#39;ve also just recently added a persistent object layer for all those pesky little parameterizing trinkets we started needed to throw around.  (I really wish I could Open Source this thing. :) )
So there&#39;s a continual grumble here to switch to Java, sometimes from me, and sometimes from another developer or two.  In some ways, a switch and reimplmentation is a no-brainer, considering tool support and labor pool.  But, is this overhyped?  Wherever I&#39;ve gone, I&#39;ve just picked up whatever was used there.  My basic computer science background lets me switch technologies pretty easily.  Is this rare?
But as for the languages themselves... From the trenches, doing object-oriented stuff in perl is painful and dirty.  In a lot of other ways, it feels nice because you can jump out of the OO mindset and do some naughty things when you think you need to.  And if you&#39;re careful.  But when you do, you don&#39;t get any help from the language, which I think is one of the major selling points of Java.
And then occasionally, a client demands to know the specifics of our platform.  Such as, what vendor&#39;s app server are we using?  What database server?  And when we say Perl and a platform almost completely developed in-house, noses crinkle and doubts arise.  But they rarely have a complaint about the end result and the speed at which we execute it.
I guess what I&#39;m getting at is this:  Having a hard time untangling politics, job market, and the right tool choice.  LISP seems to have done alright by Orbitz, and Perl&#39;s done alright by us.  So far, that is.  I always vaguely worry about the &quot;non-standard technology&quot; I use here, though.  Is that such a valid worry, or am I just swallowing vendors&#39; marketing pills like our clients?  Because the &quot;standard&quot; just happens to be the buzzwordy things that a number of companies sunk money into and work hard to justify.
But, hell, someone had to have started creating something alien and new to come up with what&#39;s &quot;standard&quot; today.  I seem to see stories from time to time about companies whose &quot;secret weapon&quot; is just such a &quot;non-standard technology&quot;.  They avoid many of the pitfalls that the herd faces by taking their own path, but trade them for new ones.  There&#39;s risk in that, but then again there&#39;s risk in everything with a potential for gain.
Then again, there&#39;s the argument against wheel reinvention.  I seem to like reinventing wheels sometimes for the hell of it, simply because I want to know how wheels work.  Sometimes I even feel arrogant enough to assert that I can make a better wheel.  But there is a point where just buying the thing and moving on is the smart option.
Oh well...  I&#39;ve come to no conclusion.  But I&#39;m still writing Perl code in my xemacs window today, and about to get back to it when I hit the &quot;Post&quot; button.  And things seem pretty good here-- I mean this company managed to claw through the wreckage of the dot-com collapse and still edge toward a profit.  We lost more clients due to their bankruptcy than through customer dissatisfaction. 
I suppose I can at least say my choice of Perl, if not a secret weapon, didn&#39;t break the bank.  :)</description>
          
          <pubDate>Fri, 24 May 2002 19:30:44 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/24/oooafc/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/24/oooafc/</guid>
        </item><item>
          <title>Ideas on a next iteration of the linkback implementation</title>
          <description>Jotting down some wishlist ideas for a next iteration of a linkback implementation and/or service.
This reminds me:  I want to borrow Marc Barrot&#39;s activeRenderer code, combine it with maybe a nice ?JavaScript UI or at least Wiki markup to produce a simple web-based outliner.  I&#39;m sure this has been done before.</description>
          
          <pubDate>Thu, 23 May 2002 01:01:13 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/23/oooafb/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/23/oooafb/</guid>
        </item><item>
          <title>Of alligators and bloxsoms</title>
          <description>From Chris Heschong:...While I don&#39;t believe it&#39;s 100% done, I&#39;ve put up the code to my new pet RSS aggregator here for the moment. More to come shortly.A nice, simple RSS aggregator in PHP that seems to run nicely on my iBook.  Planning on poking at it some more, so I hope the alligator is of the non-bitey variety.
As Rael&#39;s little blosxom has hinted at, OS X has the potential to be the perfect end-user desktop website platform.  I even had Movable Type running on it without much fuss.  If only Apple had shipped with mod_perl and PHP modules active in Apache, it would be that much more amazing.  I suppose that&#39;s easy enough to rectify.  
Makes me feel strange running Radio UserLand on my OS X iBook, besides the CPU consumption.  So much duplication of what&#39;s already there.  Of course, there are the plusses of cross-platform goodness, integrated environment goodness, and things that just feel generally slick about it.  Eh, but I don&#39;t have to feel strange about that anymore, since I moved Radio to my Windows box.  Now Radio fights with my PVR program for CPU.  Grr.
I&#39;ve been thinking about this lately, too: Cocoa GUI talking via XML-RPC or SOAP to a web app locally hosted.  It&#39;s been mused about before, though I forget where.  I seem to remember that Dave had mentioned a company working on something like this.  Could be interesting.
Seems to me that the potential and power of OS X for these sorts of apps (ie. desktop websites, networked info filters, etc...) has barely been tapped yet.
Unix on the desktop.  Really.  Who woulda thunk it?</description>
          
          <pubDate>Wed, 22 May 2002 18:40:50 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/22/oooafa/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/22/oooafa/</guid>
        </item><item>
          <title>Mass media &amp; consumer culture, a mind-virus threat?</title>
          <description>We discover all kinds of harm done to ourselves by environmental pollutants, decades or centuries after the fact.  What if someday we discover that mass media and consumer culture, as we know it, is literally detrimental to one&#39;s health?
From Pravda.RU: NEUROLINGUISTIC DEPROGRAMMING(NLDP). NOUS-VIRUSES - A NEW THREAT FOR HUMANITY:... There is ... danger [of the deliberate using NLDP for harm]. ... NLDP-effect arises ... when a person is plunged into the intensive field of influence received by the optic, acoustic, kinesthetic perception ducts. ... often called TV programs, listening to the music, moving in the space of different texture, contacting with technical devices, etc.  ... In some industrial countries such aphasia disorders as dyslexia and agraphia ... are unaccountably widespread. This &quot;aphasia epidemic&quot; can be easily explained by NLDP-effects. ...  in the communication informational field certain informational-semantic blocks circulate. I call these blocks NOUS-VIRUSES. They get into the brain of a child or an adult, and, if his &quot;anti-virus&quot; defense does not work, the result of the destruction is a psychological disorder, which is not accompanied by the organic affection of the brain. ... In case the awkward translation threw you for a loop, what this author is basically saying is that there are certain &quot;idea viruses&quot; circulating in our surroundings which make it past certain mental barriers (&quot;anti-virus&quot; defense) to cause mental disorders such as dyslexia, aphasia, and agraphia.
Sounds very Snow-Crash-like.  Later on in the article, the author suggests establishing a new branch of science (&quot;NOUSEOLOGY&quot;) to deal with these things.  Maybe the translation missed it, but I don&#39;t suppose this author has heard of memetics...
Anyway, no research is mentioned to prove the claims, and there&#39;s nothing else to convince me that this is anything other than a wild rant... but the idea is interesting.  Another Cluetrain tie in for me, at least in my head:  What if some day, communicating to humans with a human voice (whether literally speaking, or in other channels) is determined to be the only medically safe way to communicate?  :)
I&#39;d like to think our minds aren&#39;t so fragile, though.</description>
          
          <pubDate>Tue, 21 May 2002 19:16:23 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/21/oooafo/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/21/oooafo/</guid>
        </item><item>
          <title>Improved linkback scripts, and finalizing the site move</title>
          <description>Still working on getting all the bits of this site working again on the new host.  One thing in particular that&#39;s broken are my beloved referer scripts.
But, I&#39;m working on replacements in PHP.  Noticed that my linkback scripts are linked to and described on IAwiki.  Also notice some decent wishlist ideas for linkback improvements-- such as first/last referral date and link karma.  And of course there are the improvements I&#39;ve been meaning to make-- such as metadata harvesting from referrer pages and some improvements on filtering out some bogus/unwanted links (ie. Radio UserLand aggregator links).  Might also be nice to allow someone to submit URL patterns they&#39;d like excluded-- that is, if you link to me and don&#39;t want me to publish the linkback, you can submit a URL pattern for your site.
Have also been thinking of throwing it together as an open service, like yaywastaken.com&#39;s Link Feedback and Stephen Downes&#39; referral ?JavaScript-includes.  I can offer the service, and the code.  The only drawback is, well, what might it cost me to offer others a free lunch if the service actually happens to be good. :)
Need to keep thinking about colocation.</description>
          
          <pubDate>Mon, 20 May 2002 20:01:00 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/20/oooaei/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/20/oooaei/</guid>
        </item><item>
          <title>Conference blogging and linkbacks</title>
          <description>From Aaron Swartz:Here&#39;s an annotated version of the schedule from the Emerging Technologies 2002 conference. Under each session are links to the blog entries about that session.  If I didn&#39;t include yours, send me an email...You know what would rock for something like this?  Provide a conference schedule, with each event in the schedule as a URL-addressable page or anchor within a page.  Tell bloggers to link to those URLs when blogging about a particular event.  Grab referrers and display links back to blog entries on those pages and on a summary page like Aaron provides.
Automatic conference annotation, and you don&#39;t even have to worry whether Aaron included your blog entry or not.</description>
          
          <pubDate>Mon, 20 May 2002 19:50:35 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/05/20/oooaeh/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/05/20/oooaeh/</guid>
        </item>
    </channel>
  </rss>