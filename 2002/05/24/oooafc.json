{"comments_archived":true,"date":"2002-05-24T00:00:00.000Z","layout":"post","title":"Secret weapons of LISP and Perl","wordpress_id":142,"wordpress_slug":"oooafc","wordpress_url":"http://www.decafbad.com/blog/?p=142","url":"/2002/05/24/oooafc/","summary":"<p></p><p>Just saw <a href=\"http://radio.weblogs.com/0106046/2002/05/24.html#a48\">Gordon Weakliem mention</a>, via <a href=\"http://www.rolandtanglao.com/2002/05/21.html#a1965\">Roland Tanglao&apos;s Weblog</a>, this article over at New Architect: <a href=\"http://www.newarchitectmag.com/documents/s=2286/new1015626014044/\">Orbitz Reaches New Heights</a>.  This snags my eye for two reasons: 1) Orbitz is a client of my employer - we do a ton of web promotions for them; and 2) LISP is one of those things I keep meaning to get back into, kinda like I keep meaning to read things from that gigantic Shakespeare collection I asked for and recieved for Christmas from me mum.</p><p></p>\n<p></p><p>The quote that Ronald pulls out from the article is:<blockquote><i>The high-level algorithms are almost entirely in Lisp, one of the oldest programming languages. You&apos;re excused for chuckling, or saying &quot;Why Lisp?&quot; Although the language can be inefficient if used without extreme caution, it has a reputation for compactness. One line of Lisp can replace 20 lines of C. ITA&apos;s programmers, who learned the language inside and out while at MIT, note that LISP is highly effective if you ditch the prefabricated data structures. &quot;We&apos;re something of a poster child for LISP these days,&quot; says Wertheimer. &quot;Lisp vendors love us.&quot;</i></blockquote>Funny, if you did an s/Lisp/Perl/g and an s/LISP/Perl/g on that text, you&apos;d almost have a quote from me.  I&apos;ve also heard Perl often compared to LISP, amongst the upper ranks of Perl wizards.  Oldest language-- hmm, no, but it&apos;s been around the block.  Inefficient without caution-- check, hand-holding is at a minimum.  Compactness-- check, many bash it for obfucation facilitation.  Effective after ditching prefab structs-- check, if you enjoy slinging hashes all over, like I have until recently.  And so far, we&apos;re a poster child for Perl here.</p><p></p>\n<p></p><p>What is it that I have in Perl?  Well, I&apos;ve named it the Toybox.  It&apos;s a web application platform.  We do everything with it.  Reusable software components composed into applications with a web-based construction tool.  The components contain machine and human readable descriptions on properties and methods, to enable inspection by tool and documentation generation.  Also, the components and the framework are designed to provide predefined collaboration patterns so that one component can supplement or modify the behavior of another without that other component needing to be modified or altered.  I&apos;ve also just recently added a persistent object layer for all those pesky little parameterizing trinkets we started needed to throw around.  (I really wish I could Open Source this thing. :) )</p><p></p>\n<p></p><p>So there&apos;s a continual grumble here to switch to Java, sometimes from me, and sometimes from another developer or two.  In some ways, a switch and reimplmentation is a no-brainer, considering tool support and labor pool.  But, is this overhyped?  Wherever I&apos;ve gone, I&apos;ve just picked up whatever was used there.  My basic computer science background lets me switch technologies pretty easily.  Is this rare?</p><p></p>\n<p></p><p>But as for the languages themselves... From the trenches, doing object-oriented stuff in perl is painful and dirty.  In a lot of other ways, it feels nice because you can jump out of the OO mindset and do some naughty things when you think you need to.  And if you&apos;re careful.  But when you do, you don&apos;t get any help from the language, which I think is one of the major selling points of Java.</p><p></p>\n<p></p><p>And then occasionally, a client demands to know the specifics of our platform.  Such as, what vendor&apos;s app server are we using?  What database server?  And when we say Perl and a platform almost completely developed in-house, noses crinkle and doubts arise.  But they rarely have a complaint about the end result and the speed at which we execute it.</p><p></p>\n<p></p><p>I guess what I&apos;m getting at is this:  Having a hard time untangling politics, job market, and the right tool choice.  LISP seems to have done alright by Orbitz, and Perl&apos;s done alright by us.  So far, that is.  I always vaguely worry about the &quot;non-standard technology&quot; I use here, though.  Is that such a valid worry, or am I just swallowing vendors&apos; marketing pills like our clients?  Because the &quot;standard&quot; just happens to be the buzzwordy things that a number of companies sunk money into and work hard to justify.</p><p></p>\n<p></p><p>But, hell, someone had to have started creating something alien and new to come up with what&apos;s &quot;standard&quot; today.  I seem to see stories from time to time about companies whose &quot;secret weapon&quot; is just such a &quot;non-standard technology&quot;.  They avoid many of the pitfalls that the herd faces by taking their own path, but trade them for new ones.  There&apos;s risk in that, but then again there&apos;s risk in everything with a potential for gain.</p><p></p>\n<p></p><p>Then again, there&apos;s the argument against wheel reinvention.  I seem to like reinventing wheels sometimes for the hell of it, simply because I want to know how wheels work.  Sometimes I even feel arrogant enough to assert that I can make a better wheel.  But there is a point where just buying the thing and moving on is the smart option.</p><p></p>\n<p></p><p>Oh well...  I&apos;ve come to no conclusion.  But I&apos;m still writing Perl code in my xemacs window today, and about to get back to it when I hit the &quot;Post&quot; button.  And things seem pretty good here-- I mean this company managed to claw through the wreckage of the dot-com collapse and still edge toward a profit.  We lost more clients due to their bankruptcy than through customer dissatisfaction. </p><p></p>\n<p></p><p>I suppose I can at least say my choice of Perl, if not a secret weapon, didn&apos;t break the bank.  :)</p>\n","path":"2002/05/24/oooafc","content":"<p><p>Just saw <a href=\"http://radio.weblogs.com/0106046/2002/05/24.html#a48\">Gordon Weakliem mention</a>, via <a href=\"http://www.rolandtanglao.com/2002/05/21.html#a1965\">Roland Tanglao&#39;s Weblog</a>, this article over at New Architect: <a href=\"http://www.newarchitectmag.com/documents/s=2286/new1015626014044/\">Orbitz Reaches New Heights</a>.  This snags my eye for two reasons: 1) Orbitz is a client of my employer - we do a ton of web promotions for them; and 2) LISP is one of those things I keep meaning to get back into, kinda like I keep meaning to read things from that gigantic Shakespeare collection I asked for and recieved for Christmas from me mum.</p></p>\n<p><p>The quote that Ronald pulls out from the article is:<blockquote><i>The high-level algorithms are almost entirely in Lisp, one of the oldest programming languages. You&#39;re excused for chuckling, or saying &quot;Why Lisp?&quot; Although the language can be inefficient if used without extreme caution, it has a reputation for compactness. One line of Lisp can replace 20 lines of C. ITA&#39;s programmers, who learned the language inside and out while at MIT, note that LISP is highly effective if you ditch the prefabricated data structures. &quot;We&#39;re something of a poster child for LISP these days,&quot; says Wertheimer. &quot;Lisp vendors love us.&quot;</i></blockquote>Funny, if you did an s/Lisp/Perl/g and an s/LISP/Perl/g on that text, you&#39;d almost have a quote from me.  I&#39;ve also heard Perl often compared to LISP, amongst the upper ranks of Perl wizards.  Oldest language-- hmm, no, but it&#39;s been around the block.  Inefficient without caution-- check, hand-holding is at a minimum.  Compactness-- check, many bash it for obfucation facilitation.  Effective after ditching prefab structs-- check, if you enjoy slinging hashes all over, like I have until recently.  And so far, we&#39;re a poster child for Perl here.</p></p>\n<p><p>What is it that I have in Perl?  Well, I&#39;ve named it the Toybox.  It&#39;s a web application platform.  We do everything with it.  Reusable software components composed into applications with a web-based construction tool.  The components contain machine and human readable descriptions on properties and methods, to enable inspection by tool and documentation generation.  Also, the components and the framework are designed to provide predefined collaboration patterns so that one component can supplement or modify the behavior of another without that other component needing to be modified or altered.  I&#39;ve also just recently added a persistent object layer for all those pesky little parameterizing trinkets we started needed to throw around.  (I really wish I could Open Source this thing. :) )</p></p>\n<p><p>So there&#39;s a continual grumble here to switch to Java, sometimes from me, and sometimes from another developer or two.  In some ways, a switch and reimplmentation is a no-brainer, considering tool support and labor pool.  But, is this overhyped?  Wherever I&#39;ve gone, I&#39;ve just picked up whatever was used there.  My basic computer science background lets me switch technologies pretty easily.  Is this rare?</p></p>\n<p><p>But as for the languages themselves... From the trenches, doing object-oriented stuff in perl is painful and dirty.  In a lot of other ways, it feels nice because you can jump out of the OO mindset and do some naughty things when you think you need to.  And if you&#39;re careful.  But when you do, you don&#39;t get any help from the language, which I think is one of the major selling points of Java.</p></p>\n<p><p>And then occasionally, a client demands to know the specifics of our platform.  Such as, what vendor&#39;s app server are we using?  What database server?  And when we say Perl and a platform almost completely developed in-house, noses crinkle and doubts arise.  But they rarely have a complaint about the end result and the speed at which we execute it.</p></p>\n<p><p>I guess what I&#39;m getting at is this:  Having a hard time untangling politics, job market, and the right tool choice.  LISP seems to have done alright by Orbitz, and Perl&#39;s done alright by us.  So far, that is.  I always vaguely worry about the &quot;non-standard technology&quot; I use here, though.  Is that such a valid worry, or am I just swallowing vendors&#39; marketing pills like our clients?  Because the &quot;standard&quot; just happens to be the buzzwordy things that a number of companies sunk money into and work hard to justify.</p></p>\n<p><p>But, hell, someone had to have started creating something alien and new to come up with what&#39;s &quot;standard&quot; today.  I seem to see stories from time to time about companies whose &quot;secret weapon&quot; is just such a &quot;non-standard technology&quot;.  They avoid many of the pitfalls that the herd faces by taking their own path, but trade them for new ones.  There&#39;s risk in that, but then again there&#39;s risk in everything with a potential for gain.</p></p>\n<p><p>Then again, there&#39;s the argument against wheel reinvention.  I seem to like reinventing wheels sometimes for the hell of it, simply because I want to know how wheels work.  Sometimes I even feel arrogant enough to assert that I can make a better wheel.  But there is a point where just buying the thing and moving on is the smart option.</p></p>\n<p><p>Oh well...  I&#39;ve come to no conclusion.  But I&#39;m still writing Perl code in my xemacs window today, and about to get back to it when I hit the &quot;Post&quot; button.  And things seem pretty good here-- I mean this company managed to claw through the wreckage of the dot-com collapse and still edge toward a profit.  We lost more clients due to their bankruptcy than through customer dissatisfaction. </p></p>\n<p><p>I suppose I can at least say my choice of Perl, if not a secret weapon, didn&#39;t break the bank.  :)</p>\n<!--more-->\nshortname=oooafc</p>\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n\n        <ul class=\"comments\">\n\n        <li class=\"comment\" id=\"comment-221086843\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://radio.beutelevision.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=429e504076cddcb5436f34d1ecf37371&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://radio.beutelevision.com\">Thomas Beutel</a>\n                </div>\n                <a href=\"#comment-221086843\" class=\"permalink\"><time datetime=\"2002-05-25T00:32:14\">2002-05-25T00:32:14</time></a>\n            </div>\n            <div class=\"content\">You might have already seen this article on Yahoo!stores and Lisp - but if not, it is an interesting read: <a href=\"http://www.paulgraham.com/lib/paulgraham/sec.txt\">http://www.paulgraham.com/lib/paulgraham/sec.txt</a>\n\nMark Jason Dominus taught a functional programming course at the latest Perl Whirl, and is also writing a book on functional Perl techniques. I have to say it really opened my eyes to alternate ways of programming.\n\n-Thomas</div>\n\n<pre><code>    &lt;/li&gt;\n\n    &lt;li class=&quot;comment&quot; id=&quot;comment-221086845&quot;&gt;\n        &lt;div class=&quot;meta&quot;&gt;\n            &lt;div class=&quot;author&quot;&gt;\n                &lt;a class=&quot;avatar image&quot; rel=&quot;nofollow&quot; \n                   href=&quot;http://www.decafbad.com&quot;&gt;&lt;img src=&quot;http://www.gravatar.com/avatar.php?gravatar_id=2ac2cffd36ada8c734b90e02a1e5c1ac&amp;amp;size=32&amp;amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png&quot;/&gt;&lt;/a&gt;\n                &lt;a class=&quot;avatar name&quot; rel=&quot;nofollow&quot; \n                   href=&quot;http://www.decafbad.com&quot;&gt;l.m.orchard&lt;/a&gt;\n            &lt;/div&gt;\n            &lt;a href=&quot;#comment-221086845&quot; class=&quot;permalink&quot;&gt;&lt;time datetime=&quot;2002-05-29T14:21:17&quot;&gt;2002-05-29T14:21:17&lt;/time&gt;&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;content&quot;&gt;Thanks for the link to that article!  I think it covers all of the ground I was rambling about, and much better than I did :)&lt;/div&gt;\n\n    &lt;/li&gt;\n\n    &lt;/ul&gt;\n\n    &lt;/div&gt;\n</code></pre>"}