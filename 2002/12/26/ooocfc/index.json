{
  "attachments": [],
  "comments_archived": true,
  "date": "2002-12-26T19:01:04.000Z",
  "layout": "post",
  "title": "There is no perfect software design",
  "wordpress_id": 336,
  "wordpress_slug": "ooocfc",
  "wordpress_url": "http://www.decafbad.com/blog/?p=336",
  "year": "2002",
  "month": "12",
  "day": "26",
  "isDir": false,
  "slug": "ooocfc",
  "type": "entry",
  "postName": "2002-12-26-ooocfc",
  "html": "<p>Chris Winters <a href=\"http://www.cwinters.com/News/show/?news_id=765\">threw me a link</a> to my <a href=\"http://www.decafbad.com/news_archives/000354.phtml\">recent ramble</a> on completely planned perfection versus workable organic imperfection in software design.  After citing a very good perspective on software as gardening from <a href=\"http://pragmaticprogrammer.com\">The Pragmatic Programmer</a>, he writes:</p><blockquote><i>As I've mentioned before there are a number of software development practices moving toward a more humane process. And I think the ideas underpinning worse-is-better play a big part in this. The major one in my mind is this hypothesis: there is no such thing as a perfect software design. Have you ever seen or heard of one? What design hasn't been modified over time due to changing needs or conditions?</i></blockquote><p></p>\n<p>Good points.  Still trying to find the middle ground between clean design and fecund dirt.  There's no perfect design I've ever run into in my time so far, and I don't expect to.  But, what I have learned, is that where there is no design at all, you have disaster.</p>\n<p>So I guess the main thing I've learned so far is that this guilty love of a dirty yet elegant hack while giving myself a \"tsk-tsk\" with a hope to design it more fully next time is useless.  There will be no time that I've participated in a design that ends up being marvelously perfect.  But what I'm trying to feel toward is how to get the balance right between clean and dirt, given skill levels and team sizes and project complexity.</p>\n<!--more-->\n\n\n<p>shortname=ooocfc</p>\n",
  "body": "Chris Winters <a href=\"http://www.cwinters.com/News/show/?news_id=765\">threw me a link</a> to my <a href=\"http://www.decafbad.com/news_archives/000354.phtml\">recent ramble</a> on completely planned perfection versus workable organic imperfection in software design.  After citing a very good perspective on software as gardening from <a href=\"http://pragmaticprogrammer.com\">The Pragmatic Programmer</a>, he writes:<blockquote><i>As I've mentioned before there are a number of software development practices moving toward a more humane process. And I think the ideas underpinning worse-is-better play a big part in this. The major one in my mind is this hypothesis: there is no such thing as a perfect software design. Have you ever seen or heard of one? What design hasn't been modified over time due to changing needs or conditions?</i></blockquote>Good points.  Still trying to find the middle ground between clean design and fecund dirt.  There's no perfect design I've ever run into in my time so far, and I don't expect to.  But, what I have learned, is that where there is no design at all, you have disaster.\r\n<br /><br />\r\nSo I guess the main thing I've learned so far is that this guilty love of a dirty yet elegant hack while giving myself a \"tsk-tsk\" with a hope to design it more fully next time is useless.  There will be no time that I've participated in a design that ends up being marvelously perfect.  But what I'm trying to feel toward is how to get the balance right between clean and dirt, given skill levels and team sizes and project complexity.\r\n<!--more-->\r\nshortname=ooocfc\r\n",
  "parentPath": "./content/posts/archives/2002",
  "path": "2002/12/26/ooocfc",
  "summary": "Chris Winters threw me a link to my recent ramble on completely planned perfection versus workable organic imperfection in software design.  After citing a very good perspective on software as gardening from The Pragmatic Programmer, he writes:As I've mentioned before there are a number of software development practices moving toward a more humane process. And I think the ideas underpinning worse-is-better play a big part in this. The major one in my mind is this hypothesis: there is no such thing as a perfect software design. Have you ever seen or heard of one? What design hasn't been modified over time due to changing needs or conditions?\nGood points.  Still trying to find the middle ground between clean design and fecund dirt.  There's no perfect design I've ever run into in my time so far, and I don't expect to.  But, what I have learned, is that where there is no design at all, you have disaster.\nSo I guess the main thing I've learned so far is that this guilty love of a dirty yet elegant hack while giving myself a \"tsk-tsk\" with a hope to design it more fully next time is useless.  There will be no time that I've participated in a design that ends up being marvelously perfect.  But what I'm trying to feel toward is how to get the balance right between clean and dirt, given skill levels and team sizes and project complexity.",
  "prevPostPath": "2002/12/27/ooocfd",
  "prevPostTitle": "AmphetaDesk-fed blogroll now cluttering my sidebar",
  "nextPostPath": "2002/12/23/ooocfb",
  "nextPostTitle": "PersonalWebProxy as personal Google and Wayback machine"
}