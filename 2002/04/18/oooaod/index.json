{
  "attachments": [],
  "comments_archived": true,
  "date": "2002-04-18T07:20:48.000Z",
  "layout": "post",
  "title": "Pipelining the web makes for messy URLs",
  "wordpress_id": 84,
  "wordpress_slug": "oooaod",
  "wordpress_url": "http://www.decafbad.com/blog/?p=84",
  "year": "2002",
  "month": "04",
  "day": "18",
  "isDir": false,
  "slug": "oooaod",
  "type": "entry",
  "postName": "2002-04-18-oooaod",
  "html": "<p>\nJon Udell wrote <a href=\"http://www.byte.com/documents/s=1113/byt20010816s0002/0820_udell.html\">a few columns</a> <a href=\"http://radio.weblogs.com/0100887/2002/03/27.html#a153\">and weblog entries</a> about <a href=\"http://www.decafbad.com/twiki/bin/view/Main/PipelineTheWeb\">pipelining the web</a>, and the power of the URL-line as akin to a UNIX command line with pipes.  His examples did nifty things with a publicly available XSLT processor to use an XSL stylesheet at one URL and an XML document at another to produce a new document.\n</p>\n<p>\nSo, this is what I've been playing with a bit this week, expecially with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/GoogleToRSS\">GoogleToRSS</a> and <a href=\"http://www.decafbad.com/twiki/bin/view/Main/RssDisplay\">RssDisplay</a>.  But, this is what the URL looks like when I string the two together (line wrapping forced):</p>\n\n\n\n<pre style=\"font-size:8pt\">http://www.decafbad.com/web-services/url-based/rss_display.cgi?xml_img=htt\np://www.decafbad.com/images/tinyXML.jpg&amp;src=http%3A%2F%2Fwww.decafbad.com%\n2Fweb-services%2Furl-based%2Fgoogle_rss.cgi%3Fquery%3Dlink%3AXGnxCbayl9UC%\n3Awww.decafbad.com%2F%26title%3DLinks+to+0xDECAFBAD%26description%3DTop%25\n2010%2520Links%2520to%25200xDECAFBAD%26</pre>\n\n\n\n<p>\nWhat a pain this was to build.  I had to make a little form in a throwaway page to trick my browser into doing the hard work.  I suppose I could make a lil utility script to do the meta character escaping more easily.  But, man, if people are already making fun of the punctuation and obfuscation possible in <i>Perl</i>, imagine what they'll say about scripts on the URL-line.  (Assuming I'm not missing reams of existing ridicule already. :) )\n</p>\n\n\n\n<p>\nJon does make a note of this little problem, but I'm thinking it's going to be what makes me wrap up my URL-as-command-line experiments.  What would this URL look like if it had 1 or 2 more levels of pipeline? \n</p>\n<p>\nI suppose I could, as he'd also mentioned, employ a few tricks like reducing script names and parameter names down to single characters, but then I'm sacrificing one of the virtues he'd mentioned: the human readable, self-documenting nature of URL-based services.  Well, that gets scrapped at the first layer of pipelined URL indirection with the escaping of URL meta characters.  Hmm...\n</p>\n\n\n\n<p>\nStill poking away at things, anyway.\n</p>\n\n\n<!--more-->\n\n\n<p>shortname=oooaod</p>\n",
  "body": "<p>\r\nJon Udell wrote <a href=\"http://www.byte.com/documents/s=1113/byt20010816s0002/0820_udell.html\">a few columns</a> <a href=\"http://radio.weblogs.com/0100887/2002/03/27.html#a153\">and weblog entries</a> about <a href=\"http://www.decafbad.com/twiki/bin/view/Main/PipelineTheWeb\">pipelining the web</a>, and the power of the URL-line as akin to a UNIX command line with pipes.  His examples did nifty things with a publicly available XSLT processor to use an XSL stylesheet at one URL and an XML document at another to produce a new document.\r\n</p>\r\n<p>\r\nSo, this is what I've been playing with a bit this week, expecially with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/GoogleToRSS\">GoogleToRSS</a> and <a href=\"http://www.decafbad.com/twiki/bin/view/Main/RssDisplay\">RssDisplay</a>.  But, this is what the URL looks like when I string the two together (line wrapping forced):</p>\r\n<br /><br />\r\n<pre style=\"font-size:8pt\">http://www.decafbad.com/web-services/url-based/rss_display.cgi?xml_img=htt\r\np://www.decafbad.com/images/tinyXML.jpg&amp;src=http%3A%2F%2Fwww.decafbad.com%\r\n2Fweb-services%2Furl-based%2Fgoogle_rss.cgi%3Fquery%3Dlink%3AXGnxCbayl9UC%\r\n3Awww.decafbad.com%2F%26title%3DLinks+to+0xDECAFBAD%26description%3DTop%25\r\n2010%2520Links%2520to%25200xDECAFBAD%26</pre>\r\n<br /><br />\r\n<p>\r\nWhat a pain this was to build.  I had to make a little form in a throwaway page to trick my browser into doing the hard work.  I suppose I could make a lil utility script to do the meta character escaping more easily.  But, man, if people are already making fun of the punctuation and obfuscation possible in <i>Perl</i>, imagine what they'll say about scripts on the URL-line.  (Assuming I'm not missing reams of existing ridicule already. :) )\r\n</p>\r\n<br /><br />\r\n<p>\r\nJon does make a note of this little problem, but I'm thinking it's going to be what makes me wrap up my URL-as-command-line experiments.  What would this URL look like if it had 1 or 2 more levels of pipeline? \r\n</p>\r\n<p>\r\nI suppose I could, as he'd also mentioned, employ a few tricks like reducing script names and parameter names down to single characters, but then I'm sacrificing one of the virtues he'd mentioned: the human readable, self-documenting nature of URL-based services.  Well, that gets scrapped at the first layer of pipelined URL indirection with the escaping of URL meta characters.  Hmm...\r\n</p>\r\n<br /><br />\r\n<p>\r\nStill poking away at things, anyway.\r\n</p>\r\n<!--more-->\r\nshortname=oooaod\r\n",
  "parentPath": "./content/posts/archives/2002",
  "path": "2002/04/18/oooaod",
  "summary": "Jon Udell wrote a few columns and weblog entries about pipelining the web, and the power of the URL-line as akin to a UNIX command line with pipes.  His examples did nifty things with a publicly available XSLT processor to use an XSL stylesheet at one URL and an XML document at another to produce a new document.\n\n\nSo, this is what I've been playing with a bit this week, expecially with GoogleToRSS and RssDisplay.  But, this is what the URL looks like when I string the two together (line wrapping forced):\n\n\n\nhttp://www.decafbad.com/web-services/url-based/rss_display.cgi?xml_img=htt\np://www.decafbad.com/images/tinyXML.jpg&src=http%3A%2F%2Fwww.decafbad.com%\n2Fweb-services%2Furl-based%2Fgoogle_rss.cgi%3Fquery%3Dlink%3AXGnxCbayl9UC%\n3Awww.decafbad.com%2F%26title%3DLinks+to+0xDECAFBAD%26description%3DTop%25\n2010%2520Links%2520to%25200xDECAFBAD%26\n\n\n\n\nWhat a pain this was to build.  I had to make a little form in a throwaway page to trick my browser into doing the hard work.  I suppose I could make a lil utility script to do the meta character escaping more easily.  But, man, if people are already making fun of the punctuation and obfuscation possible in Perl, imagine what they'll say about scripts on the URL-line.  (Assuming I'm not missing reams of existing ridicule already. :) )\n\n\n\n\n\nJon does make a note of this little problem, but I'm thinking it's going to be what makes me wrap up my URL-as-command-line experiments.  What would this URL look like if it had 1 or 2 more levels of pipeline? \n\n\nI suppose I could, as he'd also mentioned, employ a few tricks like reducing script names and parameter names down to single characters, but then I'm sacrificing one of the virtues he'd mentioned: the human readable, self-documenting nature of URL-based services.  Well, that gets scrapped at the first layer of pipelined URL indirection with the escaping of URL meta characters.  Hmm...\n\n\n\n\n\nStill poking away at things, anyway.",
  "prevPostPath": "2002/04/18/oooaoe",
  "prevPostTitle": "Auto-backlinks from blog entries via referral logs",
  "nextPostPath": "2002/04/18/oooaoc",
  "nextPostTitle": "Google Boxes?  Permasearch?"
}