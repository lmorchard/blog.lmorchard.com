{"comments_archived":true,"date":"2002-04-18T00:00:00.000Z","layout":"post","title":"Pipelining the web makes for messy URLs","wordpress_id":84,"wordpress_slug":"oooaod","wordpress_url":"http://www.decafbad.com/blog/?p=84","url":"/2002/04/18/oooaod/","summary":"<p></p><p>\nJon Udell wrote <a href=\"http://www.byte.com/documents/s=1113/byt20010816s0002/0820_udell.html\">a few columns</a> <a href=\"http://radio.weblogs.com/0100887/2002/03/27.html#a153\">and weblog entries</a> about <a href=\"http://www.decafbad.com/twiki/bin/view/Main/PipelineTheWeb\">pipelining the web</a>, and the power of the URL-line as akin to a UNIX command line with pipes.  His examples did nifty things with a publicly available XSLT processor to use an XSL stylesheet at one URL and an XML document at another to produce a new document.\n</p><p></p>\n<p></p><p>\nSo, this is what I&apos;ve been playing with a bit this week, expecially with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/GoogleToRSS\">GoogleToRSS</a> and <a href=\"http://www.decafbad.com/twiki/bin/view/Main/RssDisplay\">RssDisplay</a>.  But, this is what the URL looks like when I string the two together (line wrapping forced):</p>\n<br><br><p></p>\n<p><pre style=\"font-size:8pt\"><a href=\"http://www.decafbad.com/web-services/url-based/rss_display.cgi?xml_img=htt\">http://www.decafbad.com/web-services/url-based/rss_display.cgi?xml_img=htt</a>\np://<a href=\"http://www.decafbad.com/images/tinyXML.jpg&amp;src=http%3A%2F%2Fwww.decafbad.com%\">www.decafbad.com/images/tinyXML.jpg&amp;src=http%3A%2F%2Fwww.decafbad.com%</a>\n2Fweb-services%2Furl-based%2Fgoogle_rss.cgi%3Fquery%3Dlink%3AXGnxCbayl9UC%\n3A<a href=\"http://www.decafbad.com%2F%26title%3DLinks+to+0xDECAFBAD%26description%3DTop%25\">www.decafbad.com%2F%26title%3DLinks+to+0xDECAFBAD%26description%3DTop%25</a>\n2010%2520Links%2520to%25200xDECAFBAD%26</pre>\n<br><br></p>\n<p></p><p>\nWhat a pain this was to build.  I had to make a little form in a throwaway page to trick my browser into doing the hard work.  I suppose I could make a lil utility script to do the meta character escaping more easily.  But, man, if people are already making fun of the punctuation and obfuscation possible in <i>Perl</i>, imagine what they&apos;ll say about scripts on the URL-line.  (Assuming I&apos;m not missing reams of existing ridicule already. :) )\n</p>\n<br><br><p></p>\n<p></p><p>\nJon does make a note of this little problem, but I&apos;m thinking it&apos;s going to be what makes me wrap up my URL-as-command-line experiments.  What would this URL look like if it had 1 or 2 more levels of pipeline? \n</p><p></p>\n<p></p><p>\nI suppose I could, as he&apos;d also mentioned, employ a few tricks like reducing script names and parameter names down to single characters, but then I&apos;m sacrificing one of the virtues he&apos;d mentioned: the human readable, self-documenting nature of URL-based services.  Well, that gets scrapped at the first layer of pipelined URL indirection with the escaping of URL meta characters.  Hmm...\n</p>\n<br><br><p></p>\n<p></p><p>\nStill poking away at things, anyway.\n</p>\n","path":"2002/04/18/oooaod","content":"<p><p>\nJon Udell wrote <a href=\"http://www.byte.com/documents/s=1113/byt20010816s0002/0820_udell.html\">a few columns</a> <a href=\"http://radio.weblogs.com/0100887/2002/03/27.html#a153\">and weblog entries</a> about <a href=\"http://www.decafbad.com/twiki/bin/view/Main/PipelineTheWeb\">pipelining the web</a>, and the power of the URL-line as akin to a UNIX command line with pipes.  His examples did nifty things with a publicly available XSLT processor to use an XSL stylesheet at one URL and an XML document at another to produce a new document.\n</p></p>\n<p><p>\nSo, this is what I&#39;ve been playing with a bit this week, expecially with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/GoogleToRSS\">GoogleToRSS</a> and <a href=\"http://www.decafbad.com/twiki/bin/view/Main/RssDisplay\">RssDisplay</a>.  But, this is what the URL looks like when I string the two together (line wrapping forced):</p>\n<br /><br /></p>\n<p><pre style=\"font-size:8pt\"><a href=\"http://www.decafbad.com/web-services/url-based/rss_display.cgi?xml_img=htt\">http://www.decafbad.com/web-services/url-based/rss_display.cgi?xml_img=htt</a>\np://<a href=\"http://www.decafbad.com/images/tinyXML.jpg&amp;src=http%3A%2F%2Fwww.decafbad.com%\">www.decafbad.com/images/tinyXML.jpg&amp;src=http%3A%2F%2Fwww.decafbad.com%</a>\n2Fweb-services%2Furl-based%2Fgoogle_rss.cgi%3Fquery%3Dlink%3AXGnxCbayl9UC%\n3A<a href=\"http://www.decafbad.com%2F%26title%3DLinks+to+0xDECAFBAD%26description%3DTop%25\">www.decafbad.com%2F%26title%3DLinks+to+0xDECAFBAD%26description%3DTop%25</a>\n2010%2520Links%2520to%25200xDECAFBAD%26</pre>\n<br /><br /></p>\n<p><p>\nWhat a pain this was to build.  I had to make a little form in a throwaway page to trick my browser into doing the hard work.  I suppose I could make a lil utility script to do the meta character escaping more easily.  But, man, if people are already making fun of the punctuation and obfuscation possible in <i>Perl</i>, imagine what they&#39;ll say about scripts on the URL-line.  (Assuming I&#39;m not missing reams of existing ridicule already. :) )\n</p>\n<br /><br /></p>\n<p><p>\nJon does make a note of this little problem, but I&#39;m thinking it&#39;s going to be what makes me wrap up my URL-as-command-line experiments.  What would this URL look like if it had 1 or 2 more levels of pipeline? \n</p></p>\n<p><p>\nI suppose I could, as he&#39;d also mentioned, employ a few tricks like reducing script names and parameter names down to single characters, but then I&#39;m sacrificing one of the virtues he&#39;d mentioned: the human readable, self-documenting nature of URL-based services.  Well, that gets scrapped at the first layer of pipelined URL indirection with the escaping of URL meta characters.  Hmm...\n</p>\n<br /><br /></p>\n<p><p>\nStill poking away at things, anyway.\n</p>\n<!--more-->\nshortname=oooaod</p>\n"}