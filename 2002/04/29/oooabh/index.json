{
  "attachments": [],
  "comments_archived": true,
  "date": "2002-04-29T09:41:35.000Z",
  "layout": "post",
  "title": "REST, Part the Third.",
  "wordpress_id": 108,
  "wordpress_slug": "oooabh",
  "wordpress_url": "http://www.decafbad.com/blog/?p=108",
  "year": "2002",
  "month": "04",
  "day": "29",
  "isDir": false,
  "slug": "oooabh",
  "type": "entry",
  "postName": "2002-04-29-oooabh",
  "html": "<p>Here I am, a Busy Developer trying to work his way up to being a real Computer Scientist.  In doing this, I subject myself to things like RPC vs <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a>.  I see apparently intelligent people vehemently disagreeing about something, I figure there's something to it.  This may be naive.  I hope that by hurting my brain with this noise, I might take some of the hunch out of my back that gets me just one more caveman level up the evolutionary chart.  I hope you all don't mind hearing my grunts and unks.</p>\n<p>Dave <a href=\"http://scriptingnews.userland.com/backissues/2002/04/26#l8a0f5f3b2b135d1dfc731ae637ce8673\">linked to me</a> with an <i>Oy.</i>  Was that from my quoting of a quoter quoting?  Or is that an <i>Oy</i> on this <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> thing getting all outta hand? :) </p>\n<p>Well, here it goes again:  I found Gordon Weakleim linking to me from my referrers (yay for referrers!), where <a href=\"http://radio.weblogs.com/0106046/2002/04/26.html#a27\">quotes someone on a discussion forum</a> as having said \"REST, I'm afraid, is unlikely to get anywhere until it is presented in a more utilitarian fashion. It feels much too much like a philosophy or religion or something.\"  And I agree with this, too.  I got introduced to XML-RPC via simple toolkits and real problems solved with satisfaction, and I'm learning SOAP slowly the same way.  Gordon also captures some of my other sentiments.</p>\n<p>I think I get <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> now.  Maybe.  Between my <a href=\"http://www.decafbad.com/news_archives/000127.shtml\">last post on </a><a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> and finally finding and reading Paul Prescod's \"<a href=\"http://www.xml.com/pub/a/2002/02/20/rest.html?page=1\">REST and the Real World</a>\", I feel somewhat illuminated.  </p>\n<p>I also feel very, very behind.  This has all probably been covered ad nauseum on mailing lists I haven't read yet, but this is what I thought on Paul's article:</p><blockquote><i>Using someone else's [RESTful] web service requires you to understand their data structures (XML vocabulary and links between documents). . . . RPC APIs merely hide the problem behind an extra layer of non-standardization. First you must figure out the method names available. Then you must still figure out the data structures that may be used as parameters. And then behind those data structures is the implicit data model of the web service.</i></blockquote>\n\n<p>Hmm.  Yes, in an RPC API I have to supply my customer with my method definitions-- including their names, parameters, and return values.  This seems directly comparable to supplying my customer with all the URIs exposed by my app's resources, as well as the data structures used by them.</p><p></p>\n<p>How are these cases so very different?</p><blockquote><i>There is no free lunch. The biggest problem most will have with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> is that it requires you to rethink your problem in terms of manipulations of addressable resources instead of method calls to a component.</i></blockquote>\n\n<p>I don't want to rethink my problem, at least not without a clear payback.  When I first learned to rethink my problems in object oriented programming, I got immense payback.  I haven't seen the clear payback case for <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> yet.  So far, it looks like an interesting abstraction with a lot of vagueries, name calling, and intimations of harm and danger.</p><p></p>\n<blockquote><i>Of course you may actually implement it on the server side however you want. But the API you communicate to your clients should be in terms of HTTP manipulations on XML documents addressed by URIs, not in terms of method calls with parameters.</i></blockquote>\n\n<p>My customer doesn't want to mess with this, and doesn't want to learn about it.</p>\n<blockquote><i>Your customers may well prefer a component-based interface to a <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> interface.</i></blockquote>\n\n<p>Yup, they do.  My chances of altering their behavior is slim to none-- at least not without a clear case of payback to present.</p>\n<blockquote><i>Programmers are more used to APIs and APIs are better integrated into existing programming languages. For client-side programmers, <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> is somewhat of a departure although for server-side programmers it is not much different than what they have been doing for the last several years, building web sites.</i></blockquote>\n\n<p>The server-side programmers I work with have been building CGIs and various server-side things which treat URI's as mere gateways onto their applications.  <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> is pretty different than what they've been doing for the last several years.</p>\n<blockquote><i>REST is about imposing a programming discipline of many URIs and few methods. RPC allows you to structure your application however it feels best to you. Let it all hang out! If a particular problem can be solved with RPC, and future extensibility and security are not going to be issues for you, you should certainly use the looser approach.</i></blockquote>\n\n<p>I still don't see the payoff of few methods with many resources versus many methods with few resources.  Either way, should I change my application in the future I'll need to supply my customer with new data descriptions, or with new method descriptions.  How does <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> make me magically extensible?  Am I not seeing something?</p>\n<p>The security angle I can <i>sort of</i> see, given the already built-in ability of web servers and firewalls to control HTTP methods and URI accesses.  But, most times I want my application to manage its security and access control, not the web server or firewall.  Maybe this is a flaw in my application.</p>\n<p>Anyway, the simplicity of <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> feels like a possible elegance to me, which I like.  Elegance feels warm and fuzzy, not itchy.  XML-RPC is obviously a bit of a workable hack.  Being able to <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a>fully reduce my app down to database-like access via a web of URI resources seems neat.  But, the whole <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> thing feels like an inside-out turn of many things.  This is not useful to me unless I can find some abstraction or toolkit to help me wire my apps up to things in the <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> way.  XML-RPC was quick for me to get hooked on, since it was a mostly drop-in solution with me writing only a few wrapper methods.</p>\n<p>Now that I understand <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> better, I see that I could possibly do most of what I do with SOAP and XML-RPC in a <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a>ful manner with a bit of brain bending.  It reminds me of <a href=\"http://www.decafbad.com/news_archives/000090.shtml#000090\">threaded versus async / event driven</a> programming.  But I don't know why I should bother: I'm still looking for the payback of <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> and I'm still looking for the danger inherent in the RPC model.  </p>\n\n\n<!--more-->\n\n\n<p>shortname=oooabh</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086422\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" href=\"http://chris.wiw.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=41a3710dfca25cec2382a08ffb7cdba5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\" width=\"\" height=\"\"></a>\n<a class=\"avatar name\" rel=\"nofollow\" href=\"http://chris.wiw.org/\">Christopher Heschong</a>\n</div>\n\n\n<p><a href=\"#comment-221086422\" class=\"permalink\"><time datetime=\"2002-04-29T18:56:25\">2002-04-29T18:56:25</time></a></p>\n</div>\n\n\n<div class=\"content\">Dave's original post said something like: \"Oy, these weenies should stop talking and start writing scripts.\"</div>\n\n\n</li>\n</ul>\n\n\n</div>\n\n\n",
  "body": "<p>Here I am, a Busy Developer trying to work his way up to being a real Computer Scientist.  In doing this, I subject myself to things like RPC vs <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a>.  I see apparently intelligent people vehemently disagreeing about something, I figure there's something to it.  This may be naive.  I hope that by hurting my brain with this noise, I might take some of the hunch out of my back that gets me just one more caveman level up the evolutionary chart.  I hope you all don't mind hearing my grunts and unks.</p>\r\n<p>Dave <a href=\"http://scriptingnews.userland.com/backissues/2002/04/26#l8a0f5f3b2b135d1dfc731ae637ce8673\">linked to me</a> with an <i>Oy.</i>  Was that from my quoting of a quoter quoting?  Or is that an <i>Oy</i> on this <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> thing getting all outta hand? :) </p>\r\n<p>Well, here it goes again:  I found Gordon Weakleim linking to me from my referrers (yay for referrers!), where <a href=\"http://radio.weblogs.com/0106046/2002/04/26.html#a27\">quotes someone on a discussion forum</a> as having said \"REST, I'm afraid, is unlikely to get anywhere until it is presented in a more utilitarian fashion. It feels much too much like a philosophy or religion or something.\"  And I agree with this, too.  I got introduced to XML-RPC via simple toolkits and real problems solved with satisfaction, and I'm learning SOAP slowly the same way.  Gordon also captures some of my other sentiments.</p>\r\n<p>I think I get <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> now.  Maybe.  Between my <a href=\"http://www.decafbad.com/news_archives/000127.shtml\">last post on <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a></a> and finally finding and reading Paul Prescod's \"<a href=\"http://www.xml.com/pub/a/2002/02/20/rest.html?page=1\">REST and the Real World</a>\", I feel somewhat illuminated.  </p>\r\n<p>I also feel very, very behind.  This has all probably been covered ad nauseum on mailing lists I haven't read yet, but this is what I thought on Paul's article:<blockquote><i>Using someone else's [RESTful] web service requires you to understand their data structures (XML vocabulary and links between documents). . . . RPC APIs merely hide the problem behind an extra layer of non-standardization. First you must figure out the method names available. Then you must still figure out the data structures that may be used as parameters. And then behind those data structures is the implicit data model of the web service.</i></blockquote>Hmm.  Yes, in an RPC API I have to supply my customer with my method definitions-- including their names, parameters, and return values.  This seems directly comparable to supplying my customer with all the URIs exposed by my app's resources, as well as the data structures used by them.</p>\r\n<p>How are these cases so very different?<blockquote><i>There is no free lunch. The biggest problem most will have with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> is that it requires you to rethink your problem in terms of manipulations of addressable resources instead of method calls to a component.</i></blockquote>I don't want to rethink my problem, at least not without a clear payback.  When I first learned to rethink my problems in object oriented programming, I got immense payback.  I haven't seen the clear payback case for <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> yet.  So far, it looks like an interesting abstraction with a lot of vagueries, name calling, and intimations of harm and danger.</p>\r\n<blockquote><i>Of course you may actually implement it on the server side however you want. But the API you communicate to your clients should be in terms of HTTP manipulations on XML documents addressed by URIs, not in terms of method calls with parameters.</i></blockquote>My customer doesn't want to mess with this, and doesn't want to learn about it.\r\n<blockquote><i>Your customers may well prefer a component-based interface to a <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> interface.</i></blockquote>Yup, they do.  My chances of altering their behavior is slim to none-- at least not without a clear case of payback to present.\r\n<blockquote><i>Programmers are more used to APIs and APIs are better integrated into existing programming languages. For client-side programmers, <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> is somewhat of a departure although for server-side programmers it is not much different than what they have been doing for the last several years, building web sites.</i></blockquote>The server-side programmers I work with have been building CGIs and various server-side things which treat URI's as mere gateways onto their applications.  <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> is pretty different than what they've been doing for the last several years.\r\n<blockquote><i>REST is about imposing a programming discipline of many URIs and few methods. RPC allows you to structure your application however it feels best to you. Let it all hang out! If a particular problem can be solved with RPC, and future extensibility and security are not going to be issues for you, you should certainly use the looser approach.</i></blockquote>I still don't see the payoff of few methods with many resources versus many methods with few resources.  Either way, should I change my application in the future I'll need to supply my customer with new data descriptions, or with new method descriptions.  How does <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> make me magically extensible?  Am I not seeing something?\r\n<p>The security angle I can <i>sort of</i> see, given the already built-in ability of web servers and firewalls to control HTTP methods and URI accesses.  But, most times I want my application to manage its security and access control, not the web server or firewall.  Maybe this is a flaw in my application.</p>\r\n<p>Anyway, the simplicity of <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> feels like a possible elegance to me, which I like.  Elegance feels warm and fuzzy, not itchy.  XML-RPC is obviously a bit of a workable hack.  Being able to <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a>fully reduce my app down to database-like access via a web of URI resources seems neat.  But, the whole <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> thing feels like an inside-out turn of many things.  This is not useful to me unless I can find some abstraction or toolkit to help me wire my apps up to things in the <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> way.  XML-RPC was quick for me to get hooked on, since it was a mostly drop-in solution with me writing only a few wrapper methods.</p>\r\n<p>Now that I understand <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> better, I see that I could possibly do most of what I do with SOAP and XML-RPC in a <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a>ful manner with a bit of brain bending.  It reminds me of <a href=\"http://www.decafbad.com/news_archives/000090.shtml#000090\">threaded versus async / event driven</a> programming.  But I don't know why I should bother: I'm still looking for the payback of <a href=\"http://www.decafbad.com/twiki/bin/view/Main/REST\">REST</a> and I'm still looking for the danger inherent in the RPC model.  </p>\r\n<!--more-->\r\nshortname=oooabh\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221086422\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://chris.wiw.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=41a3710dfca25cec2382a08ffb7cdba5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://chris.wiw.org/\">Christopher Heschong</a>\r\n                </div>\r\n                <a href=\"#comment-221086422\" class=\"permalink\"><time datetime=\"2002-04-29T18:56:25\">2002-04-29T18:56:25</time></a>\r\n            </div>\r\n            <div class=\"content\">Dave's original post said something like: \"Oy, these weenies should stop talking and start writing scripts.\"</div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
  "parentPath": "./content/posts/archives/2002",
  "path": "2002/04/29/oooabh",
  "summary": "Here I am, a Busy Developer trying to work his way up to being a real Computer Scientist.  In doing this, I subject myself to things like RPC vs REST.  I see apparently intelligent people vehemently disagreeing about something, I figure there's something to it.  This may be naive.  I hope that by hurting my brain with this noise, I might take some of the hunch out of my back that gets me just one more caveman level up the evolutionary chart.  I hope you all don't mind hearing my grunts and unks.\nDave linked to me with an Oy.  Was that from my quoting of a quoter quoting?  Or is that an Oy on this REST thing getting all outta hand? :) \nWell, here it goes again:  I found Gordon Weakleim linking to me from my referrers (yay for referrers!), where quotes someone on a discussion forum as having said \"REST, I'm afraid, is unlikely to get anywhere until it is presented in a more utilitarian fashion. It feels much too much like a philosophy or religion or something.\"  And I agree with this, too.  I got introduced to XML-RPC via simple toolkits and real problems solved with satisfaction, and I'm learning SOAP slowly the same way.  Gordon also captures some of my other sentiments.\nI think I get REST now.  Maybe.  Between my last post on REST and finally finding and reading Paul Prescod's \"REST and the Real World\", I feel somewhat illuminated.  \nI also feel very, very behind.  This has all probably been covered ad nauseum on mailing lists I haven't read yet, but this is what I thought on Paul's article:Using someone else's [RESTful] web service requires you to understand their data structures (XML vocabulary and links between documents). . . . RPC APIs merely hide the problem behind an extra layer of non-standardization. First you must figure out the method names available. Then you must still figure out the data structures that may be used as parameters. And then behind those data structures is the implicit data model of the web service.\n\nHmm.  Yes, in an RPC API I have to supply my customer with my method definitions-- including their names, parameters, and return values.  This seems directly comparable to supplying my customer with all the URIs exposed by my app's resources, as well as the data structures used by them.\nHow are these cases so very different?There is no free lunch. The biggest problem most will have with REST is that it requires you to rethink your problem in terms of manipulations of addressable resources instead of method calls to a component.\n\nI don't want to rethink my problem, at least not without a clear payback.  When I first learned to rethink my problems in object oriented programming, I got immense payback.  I haven't seen the clear payback case for REST yet.  So far, it looks like an interesting abstraction with a lot of vagueries, name calling, and intimations of harm and danger.\nOf course you may actually implement it on the server side however you want. But the API you communicate to your clients should be in terms of HTTP manipulations on XML documents addressed by URIs, not in terms of method calls with parameters.\n\nMy customer doesn't want to mess with this, and doesn't want to learn about it.\nYour customers may well prefer a component-based interface to a REST interface.\n\nYup, they do.  My chances of altering their behavior is slim to none-- at least not without a clear case of payback to present.\nProgrammers are more used to APIs and APIs are better integrated into existing programming languages. For client-side programmers, REST is somewhat of a departure although for server-side programmers it is not much different than what they have been doing for the last several years, building web sites.\n\nThe server-side programmers I work with have been building CGIs and various server-side things which treat URI's as mere gateways onto their applications.  REST is pretty different than what they've been doing for the last several years.\nREST is about imposing a programming discipline of many URIs and few methods. RPC allows you to structure your application however it feels best to you. Let it all hang out! If a particular problem can be solved with RPC, and future extensibility and security are not going to be issues for you, you should certainly use the looser approach.\n\nI still don't see the payoff of few methods with many resources versus many methods with few resources.  Either way, should I change my application in the future I'll need to supply my customer with new data descriptions, or with new method descriptions.  How does REST make me magically extensible?  Am I not seeing something?\nThe security angle I can sort of see, given the already built-in ability of web servers and firewalls to control HTTP methods and URI accesses.  But, most times I want my application to manage its security and access control, not the web server or firewall.  Maybe this is a flaw in my application.\nAnyway, the simplicity of REST feels like a possible elegance to me, which I like.  Elegance feels warm and fuzzy, not itchy.  XML-RPC is obviously a bit of a workable hack.  Being able to RESTfully reduce my app down to database-like access via a web of URI resources seems neat.  But, the whole REST thing feels like an inside-out turn of many things.  This is not useful to me unless I can find some abstraction or toolkit to help me wire my apps up to things in the REST way.  XML-RPC was quick for me to get hooked on, since it was a mostly drop-in solution with me writing only a few wrapper methods.\nNow that I understand REST better, I see that I could possibly do most of what I do with SOAP and XML-RPC in a RESTful manner with a bit of brain bending.  It reminds me of threaded versus async / event driven programming.  But I don't know why I should bother: I'm still looking for the payback of REST and I'm still looking for the danger inherent in the RPC model.",
  "prevPostPath": "2002/04/29/oooabi",
  "prevPostTitle": "RDF, whitelist spam filtering, and personal metadata",
  "nextPostPath": "2002/04/26/oooabg",
  "nextPostTitle": "REST: What's it good for?  Part Deux"
}