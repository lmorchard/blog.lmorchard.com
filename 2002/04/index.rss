<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>blog.lmorchard.com</title>
      <description>It&#39;s all spinning wheels &amp; self-doubt until the first pot of coffee.</description>
      <link>https://lmorchard.github.io/blog.lmorchard.com</link>
      <atom:link href="https://lmorchard.github.io/blog.lmorchard.com/index.rss" rel="self" type="application/rss+xml" />
      <item>
          <title>Wil Wheaton vs Soul Coughing - FIGHT!</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;I &amp;amp;heart; the Internet and weblogs.
What happens when one of my favorite bands&#39; main man, Mike Doughty, and one of my favorite ex-Star-Trek-survived-the-80&#39;s actors, Wil Wheaton, collide in blogspace and discussion groups?
Well, first no one believe&#39;s it&#39;s really Wil Wheaton posting to the DG.  But then, when everyone realizes that yes, in fact, it&#39;s him, Mike himself posts the moral of the story:so the flip side of the don&#39;t believe what people


tell you on the internet lesson is--you know,
people on the internet might actually be who they
say they are. how bout them apples?
Not to have a Jerry Springer moment here, but:  Yes, how about them apples?  It&#39;s the new internet, where some people really are who they say they are, even if possessed of some vague degree of celebrity.  And not only that, but your ears turn red and ring when someone&#39;s talking about you.
Now, maybe if I say Wil Wheaton&#39;s name three times in a Beetlejuician manner, he&#39;ll show up over here too.  :)&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Tue, 30 Apr 2002 17:13:14 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/30/oooaco/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/30/oooaco/</guid>
        </item><item>
          <title>RDF, whitelist spam filtering, and personal metadata</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Okay, I&#39;m done thinking and writing about REST for the time being.  I think I understand it, but it doesn&#39;t seem to light any fires for me yet.  I&#39;ll just stuff it away into my utility belt and keep it in mind in case the need for a REST-headed screwdriver comes up, or until I discover that my RPC usage causes cancer.
What&#39;s much more exciting to me at the moment is whitelist-based spam filtering, and even more so is using RDF to share whitelists.  I really need to look more into this FOAF thing over at rdfweb.org.
One project I&#39;ve been mulling over is how to replace something like my user info page at LiveJournal with something web-wide and decentrallized.  RDF seems like a lead on that for a shared data format for personal metadata.  I want the friends and friends-of, and especially the interest links that let you pivot on interest phrases to view a list of others who list the same interest phrase.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Mon, 29 Apr 2002 22:11:09 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/29/oooabi/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/29/oooabi/</guid>
        </item><item>
          <title>REST, Part the Third.</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Here I am, a Busy Developer trying to work his way up to being a real Computer Scientist.  In doing this, I subject myself to things like RPC vs REST.  I see apparently intelligent people vehemently disagreeing about something, I figure there&#39;s something to it.  This may be naive.  I hope that by hurting my brain with this noise, I might take some of the hunch out of my back that gets me just one more caveman level up the evolutionary chart.  I hope you all don&#39;t mind hearing my grunts and unks.
Dave linked to me with an Oy.  Was that from my quoting of a quoter quoting?  Or is that an Oy on this REST thing getting all outta hand? :) 
Well, here it goes again:  I found Gordon Weakleim linking to me from my referrers (yay for referrers!), where quotes someone on a discussion forum as having said &quot;REST, I&#39;m afraid, is unlikely to get anywhere until it is presented in a more utilitarian fashion. It feels much too much like a philosophy or religion or something.&quot;  And I agree with this, too.  I got introduced to XML-RPC via simple toolkits and real problems solved with satisfaction, and I&#39;m learning SOAP slowly the same way.  Gordon also captures some of my other sentiments.
I think I get REST now.  Maybe.  Between my last post on REST and finally finding and reading Paul Prescod&#39;s &quot;REST and the Real World&quot;, I feel somewhat illuminated.  
I also feel very, very behind.  This has all probably been covered ad nauseum on mailing lists I haven&#39;t read yet, but this is what I thought on Paul&#39;s article:Using someone else&#39;s [RESTful] web service requires you to understand their data structures (XML vocabulary and links between documents). . . . RPC APIs merely hide the problem behind an extra layer of non-standardization. First you must figure out the method names available. Then you must still figure out the data structures that may be used as parameters. And then behind those data structures is the implicit data model of the web service.

Hmm.  Yes, in an RPC API I have to supply my customer with my method definitions-- including their names, parameters, and return values.  This seems directly comparable to supplying my customer with all the URIs exposed by my app&#39;s resources, as well as the data structures used by them.
How are these cases so very different?There is no free lunch. The biggest problem most will have with REST is that it requires you to rethink your problem in terms of manipulations of addressable resources instead of method calls to a component.

I don&#39;t want to rethink my problem, at least not without a clear payback.  When I first learned to rethink my problems in object oriented programming, I got immense payback.  I haven&#39;t seen the clear payback case for REST yet.  So far, it looks like an interesting abstraction with a lot of vagueries, name calling, and intimations of harm and danger.
Of course you may actually implement it on the server side however you want. But the API you communicate to your clients should be in terms of HTTP manipulations on XML documents addressed by URIs, not in terms of method calls with parameters.

My customer doesn&#39;t want to mess with this, and doesn&#39;t want to learn about it.
Your customers may well prefer a component-based interface to a REST interface.

Yup, they do.  My chances of altering their behavior is slim to none-- at least not without a clear case of payback to present.
Programmers are more used to APIs and APIs are better integrated into existing programming languages. For client-side programmers, REST is somewhat of a departure although for server-side programmers it is not much different than what they have been doing for the last several years, building web sites.

The server-side programmers I work with have been building CGIs and various server-side things which treat URI&#39;s as mere gateways onto their applications.  REST is pretty different than what they&#39;ve been doing for the last several years.
REST is about imposing a programming discipline of many URIs and few methods. RPC allows you to structure your application however it feels best to you. Let it all hang out! If a particular problem can be solved with RPC, and future extensibility and security are not going to be issues for you, you should certainly use the looser approach.

I still don&#39;t see the payoff of few methods with many resources versus many methods with few resources.  Either way, should I change my application in the future I&#39;ll need to supply my customer with new data descriptions, or with new method descriptions.  How does REST make me magically extensible?  Am I not seeing something?
The security angle I can sort of see, given the already built-in ability of web servers and firewalls to control HTTP methods and URI accesses.  But, most times I want my application to manage its security and access control, not the web server or firewall.  Maybe this is a flaw in my application.
Anyway, the simplicity of REST feels like a possible elegance to me, which I like.  Elegance feels warm and fuzzy, not itchy.  XML-RPC is obviously a bit of a workable hack.  Being able to RESTfully reduce my app down to database-like access via a web of URI resources seems neat.  But, the whole REST thing feels like an inside-out turn of many things.  This is not useful to me unless I can find some abstraction or toolkit to help me wire my apps up to things in the REST way.  XML-RPC was quick for me to get hooked on, since it was a mostly drop-in solution with me writing only a few wrapper methods.
Now that I understand REST better, I see that I could possibly do most of what I do with SOAP and XML-RPC in a RESTful manner with a bit of brain bending.  It reminds me of threaded versus async / event driven programming.  But I don&#39;t know why I should bother: I&#39;m still looking for the payback of REST and I&#39;m still looking for the danger inherent in the RPC model.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Mon, 29 Apr 2002 09:41:35 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/29/oooabh/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/29/oooabh/</guid>
        </item><item>
          <title>REST: What&#39;s it good for?  Part Deux</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Chris Heschong writes: Ken ?MacLeod notes that, in regards to REST, &quot;the only thing holding us back is a marshalling standard.&quot; I&#39;d be a lot happier with REST implementations if this were the case.
(Whew, I think I need a convention for quoting quoters.  Maybe a new language.  I seem to remember hearing on the Todd Mundt Show that the Turkish language has a facility for specifying whether something you&#39;re saying originates with you, or whether you heard it from someone else...)
Anyway, since Ken ?MacLeod had taken the time to respond in some detail to a post I made asking about REST not too long ago, I thought I should come back around to it.
So I think my first confusion was with marshalling.  This is why I like XML-RPC:  I don&#39;t worry about much.  As a client, I give it a URL and a method name, and then throw a pile of parameters for the method at it.  As a server-side method, the server gives me parameters when it calls me, and I throw back a return value.  The server takes care of turning the XML into my arguments, and my return value to XML.
In all the languages I&#39;ve worked with it in (ie. Perl, Python, ?UserTalk, and AppleScript), this works conveniently well.  I never actually pay much attention to the XML in XML-RPC.  So, I was very confused in reading a few things about REST and not seeing much mention of this, other than along the lines of &quot;Oh, well, you could go ahead and use XML-RPC libraries to build messages if you wanted to.&quot;  Which begged the question for me: Why not just go the whole hog and use XML-RPC?  (Or SOAP, for that matter, but that&#39;s another holy war I&#39;m avoiding for the present context.)
Okay, so REST isn&#39;t about marshalling parameters.  Then what is it about?  Well, I think a bit more reading and Ken&#39;s response to me have helped illuminate me a bit.
The REST point seems to me to be that all operations being attempted by Web Services can be distilled into a few actions:  retrieve, create, update, and delete.  REST says that these fundamentals are already defined as GET, POST, PUT, and DELETE, respectively.  I think.  Is this right?
So, I apply these verbs to URI nouns.  To concretize the concept:  I recently wrote &amp;amp; exposed an XML-RPC API to a scorekeeping component on one of our promotions.  Some of the methods of this API were along the lines of int points.get_points(string email), points.award_points(string email, int points), and points.create_points_account(string email).  To make myself a new account I&#39;d call points.create_points_account(&quot;deus_x@pobox.com&quot;) and then points.award_points(&quot;deus_x@pobox.com&quot;, 100) to drop myself some points in the scoreboard.  Then, I would do points.get_points(&quot;deus_x@pobox.com&quot;) to check my score.
I&#39;m afraid this example is too simple.  Jon Udell wrote that he wanted to see the &quot;stock quote example&quot; retired for being too simplistic to stress the technology in mental experiments.  Hmm.  Oh well, let&#39;s see where it goes.
So, if I were to RESTify the above example, would the sequence of things be like a POST, PUT, and GET, all to a URL that looks something like:
http://myhost/promotion/players/deus_x@pobox.com/points
Whereas POST does the account creation, PUT updates the points, and GET of course grabs the points total?
Okay, maybe POST needs to post to .../players/deus_x@pobox.com with a request body specifying &quot;points&quot;, to create the new URI?  The request body of the PUT should contain a points value -- positive for award, negative for debit?  And if the thing needed more complex data, I could use something like XML-RPC to encode a data structure as arguments, or as Chris Heschong wrote, use WDDX?
Do I get it?  Hmm...  okay, have to run to a meeting, but I wanted to post this and see if anyone could give me feedback on my understanding.  I think I see how, if all resources are manipulatable in this manner, one could envision a more abstracted and uniform interface on web resources than a pile of published web services APIs.  But...  can it really be that abstracted?
Hmm.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Fri, 26 Apr 2002 21:48:33 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/26/oooabg/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/26/oooabg/</guid>
        </item><item>
          <title>Hot patching, Radio UserLand, and not Microsoft</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;When I talk about Radio and my love/hate with it, this is one of the things I absolutely positively adore, fawn over, and plan to mimic in as many of my projects as I can where I can.  Back when the Mozilla source code was first released, and I happened to be at a Q&amp;amp;A with some Netscape guys, this was the [#1](/tag/1) feature I pestered them to spend time looking into.
John Robb of UserLand points it out, in relation to .NET:[Alchin said, &quot;]The hot patching technology will not find its way into the upcoming .Net Server family, but we have made progress on reducing reboots.[&quot;]
Radio already does this.

Yes, yes it does, and this is dead sexy.  I love that the system is put together in such a way that this is possible.  My monitoring of the Radio.root Updates RSS feed reminds me daily of where my $40/year is going.
Now, can we have Instant Outlines do this? :)  Heehee.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Fri, 26 Apr 2002 19:27:16 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/26/oooabf/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/26/oooabf/</guid>
        </item><item>
          <title>Thanks, kuro5hin.  Decaf is bad.  Caffeine is good.</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;I just had to link to this: A coder&#39;s guide to coffee @ kuro5hin
I think I&#39;m going to buy myself a french press tonight.
Oh, and just for fun, visit The Caffeine Archive.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Fri, 26 Apr 2002 00:04:44 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabe/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabe/</guid>
        </item><item>
          <title>I wish Radio sent me blog URLs as referers on news aggregator hits</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;One more thing, directed at the Radio UserLand crew:  With my recent discovery of and mania for referers, I&#39;ve seen that Radio sends me people claiming to have come from http://radio.outliners.com/instantOutliner and http://frontier.userland.com/xmlAggregator, for I/O and news aggregation respectively.
Here&#39;s a wishlist idea:  Make Radio send the URL to the user&#39;s blog instead of URLs to UserLand documents.  While the current referer URLs tell me why I&#39;m getting the hit, I&#39;d like to have a better handle on from whom the hit is coming.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Thu, 25 Apr 2002 22:32:40 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabd/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabd/</guid>
        </item><item>
          <title>Today&#39;s referers, PHP, and you!  (Okay, maybe not you.)</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Playing more with PHP, writing a replacement for ShowReferers.  You can view the source of my first attempt ever at a PHP page, or view the results.  I just replaced the front page sidebar referers box with an include to this page.  Soon, I&#39;ll replace the entire front page template with one written in PHP, and I might add the sidebar stuff to all my blog entries.  This is fun. :)&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Thu, 25 Apr 2002 21:34:51 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabc/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabc/</guid>
        </item><item>
          <title>Playing with ZOE, some assembly required</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Hmm.  Okay, so Zoe looks promising, but.. umm.. I can&#39;t figure it out.  
I added an IMAP account.  Stuff seems to happen, which ends up in a lot of ?FolderNotFoundException and ?OutOfMemoryError exceptions to my terminal.  No mail appears on the front page.  I tried changing my SMTP server to use Zoe, and then was going to foward email to import it as the FAQ suggests, but umm..  to what address do I forward it?
Urk.  This makes me feel dumb.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Thu, 25 Apr 2002 21:04:46 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabb/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabb/</guid>
        </item><item>
          <title>Tearing down fences around DecafbadWiki</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Oh, and I bit the bullet and turned off the authentication requirement on the wiki.  I&#39;ve decided that ultimately I agree that LoginsAreEvil.  I didn&#39;t really want to put up fences, or raise the laziness threshold.  I mostly wanted to identify people, but I was mistaken.  Now, I&#39;d rather AvoidIllusion.
There still are a few fences, however.  My reasoning is that my use of this wiki slides into the realm of cheap content management, and I don&#39;t prefer public input on certain things.  A few pages are access controlled, such as the wiki&#39;s front page and my home page.  For this purpose, there&#39;s an alternate password-protected set of wiki commands.  The non-authenticated are under /twiki/bin whereas the authenticated set are at /twiki/sbin.  Just as easy as putting an &#39;s&#39; in the URL.
Access to the authenticated commands doesn&#39;t necessarily mean you get to edit everything though. :)  That&#39;s access control for you.
Eventually, maybe I&#39;ll drop the access controls too.  I was also thinking of moving out of TWiki for another wiki implementation like MoinMoin, too.  Still tinkering.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Thu, 25 Apr 2002 18:57:01 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooaba/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooaba/</guid>
        </item><item>
          <title>Can ZOE make my mail intertwingly?</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Via Prof Avery, I just found ZOE.The goal here is to do for email (starting with your personal mailbox) what Google did for the web... The Google principle: It doesn&#39;t matter where information is because I can get to it with a keystroke.
So what is Zoe? Think about it as a sort of librarian, tirelessly, continuously, processing, slicing, indexing, organizing, your messages. The end result is this intertwingled web of information. Messages put in context. Your very own knowledge base accessible at your fingertip. No more &quot;attending to&quot; your messages. The messages organization is done automatically for you so as to not have the need to &quot;manage&quot; your email. Because once information is available at a keystroke, it doesn&#39;t matter in which folder you happened to file it two years ago. There is no folder. The information is always there. Accessible when you need it. In context.


Rock on!  I&#39;m either terribly unoriginal or my mind is being read or there&#39;s just a common Alpha Geek wavelength I&#39;m tuning into.  By the description, this is precisely what I wanted to do with a PersonalMailServer.  Getting tired of making folders, filtering rules, and MailToRSS needs a bit more work and tweaking to be really useful.  
From the FAQ:Q: On which platform does ZO? run?
A: ZO? has been known to run on the following &quot;platforms&quot;:


...
MacOSX 10.1.4, jre 1.3.1, Mozilla 0.9.9
...
Rock on.Q: How much does ZO? cost?
A: ZO? is free of charge for personal usage. Keep in mind, that you are getting what you are paying for... ;-)

Rock on.Q: Is ZO? open source?
A: No.

Awwww.  That&#39;s no fun!  I want to play!  I don&#39;t see it within 5 minutes of installation, but I think this thing really really needs IMAP.  IMAP would rock for both message import and external mail client access.
But, from the author&#39;s terse response to this question, I&#39;m imagining there are many who&#39;ve asked it and he&#39;s tired of answering why he&#39;s not being trendy :)  I guess I&#39;ll play and see what happens.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Thu, 25 Apr 2002 15:02:01 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabo/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/25/oooabo/</guid>
        </item><item>
          <title>On the destructive/constructive nature of news aggregation</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Playing with a range of news aggregators once more, since Radio UserLand is making me itchy again.  Pretty much the only ones I really like are Radio, AmphetaDesk, and sometimes Peerkat.
For the last week or so I&#39;ve been mostly alternating between Radio and AmphetaDesk.  The difference in aggregation styles is interesting:  While Radio slices and dices and aggregates feeds by items and serves them up to me in an interwoven chronological order, AmphetaDesk serves my feeds up to me whole and in order of feed modification.  I&#39;m not sure which I like more now.
I like Radio&#39;s style, because I see what&#39;s new and only what&#39;s new.  Usually.  But, I like AmphetaDesk&#39;s style because I see everything, and have realized that I miss things with the rush of new items from all my feeds.  For instance, if someone posts something once per day, I&#39;ll likely miss it with Radio unless I check every hour.  But, with AmphetaDesk, I get to see what&#39;s new with every person or source whenever I check, and I only miss items if that feed has scrolled them off.
Shelley Powers of burningbird.net wrote a bit about the context destroying nature that RSS and aggregators have on weblogs.  I agree with her somewhat, in that pulling the words out of the surrounding context of the blog and its presentation and community has an altering effect, I wouldn&#39;t say that it destroys the weblog.
For me, when I see something on my news aggregator, it&#39;s as if I&#39;m overhearing it from another room.  I don&#39;t get the whole context or see who else is listening or responding, but I hear the gist of something.  And, when subscribed to 100+ RSS feeds, it&#39;s like I&#39;m floating in this Nth dimensional space where I can overhear voices from hundreds of rooms without being overwhelmed.  When something triggers some of my mental filters and watchwords, I click the link and delve deeper.
There&#39;s no way, without an aggregator, that I&#39;d be able to track 100+ people and news sources in a day.  But, because I can, I&#39;ve been able to learn and discover things and hear voices I never would have before.
But, I think the way AmphetaDesk merges these sources might be a nicer alternative.  By not chopping up the feeds, some intra-item context is maintained at least, so I can see developing trains of thought.
Okay, must go back to work now.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Wed, 24 Apr 2002 22:33:43 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/24/oooaai/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/24/oooaai/</guid>
        </item><item>
          <title>Yes, I actually do get out and have a life sometimes :)</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Is it just me, or did my last entry make me sound like an obsessive, compulsive nerd?  :)  Funny, I don&#39;t think I am.  If I am, it&#39;s fun anyway.  And not all that expensive.  And I actually do get out and do things and have a bit of a social life.  Really, I do.  Sometimes.
Oh, and I just noticed my wiki was broken for editing.  Gah, that was unfun.  Fixed now.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Wed, 24 Apr 2002 22:01:24 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/24/oooaah/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/24/oooaah/</guid>
        </item><item>
          <title>On home servers and extreme personal PCs</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;John Robb writes about the next generation of PCs and such:Here is how I think the battle will evolve in the next five to ten years:...
1)  A home server.   This PC is always on and lives in a closet.  It serves multiple users that connect to it using mobile wireless screens and keyboards.  ...
2) An extremely mobile PC ala OQO.  This PC will be attached to a single individual.  ...

This sums up much of what I&#39;ve been anticipating and have found myself building.
In the case of the home server, I have two of them actually.
One is a headless Linux box behind a cable modem that has accumulated all sorts of autonomous functions: it gathers my mail from various accounts into an IMAP server that I access from everywhere; before I was using Radio UserLand, it used to host all of my news aggregation hacks; it controls and monitors all the X10 devices in my apartment (though these are dwindling away); and until my radio reception got bad when I moved, it used to record radio shows for me using a D-Link USB FM radio.  I actually have a Mac at work that does that does that for me, and dumps the sound files to my server at home periodically.
The other &quot;home server&quot; is a PC running Win2K with an ATI Radeon All-in-Wonder card.  This machine is my PVR, recording to VCD the few TV shows I actually want to keep up with.  That ends up being about 12 VCDs a week, counting all the episodes of Buffy that I capture.  (Guilty pleasures.)  I keep dumping more and more hard drive space into this machine, and use it as a general apartment-wide file server, as well as a dumping ground for stuff from remote when I&#39;m out yet have net access.  Occasionally I play Windows-based cames on the PC, but it mostly just sits there and does things.
I would like to combine these boxes into one big Linux box connected wirelessly to my cable modem, sitting in my closet in my apartment, or if I had a house, across the basement from the water heater.  I want this home server to be in the same class of appliances as the furnace, washing machine, and water heater.  The only thing keeping me from dumping the Win2K PC is the PVR functionality I haven&#39;t bothered to try under Linux yet.
In the case of my extremely mobile PC... 
Well, I&#39;m still in search of this, and the OQO looks very very attractive.  Lately, my mobile PC has been my iBook.  In most of my usual haunts (home, work, coffee shop), my iBook is present and tends to have net access.  I have scripts which auto launch some SSH tunnels back to my Linux server and mount shares on my Win2K box when I switch networks.  It usually works.  I have all my current developing projects on the thing, and I do news aggregation with Radio UserLand.  Occasionally at home, the iBook is what I have with me in the living room, so with the A/V cable I use the iBook to play internet radio on my living room stereo, or I stream movies over my LAN from Win2K PC in the other room.
But, what I really want is the Global from Earth: Final Conflict.  I can&#39;t find a link or direct info on the thing as used in the series, but it&#39;s an amazing fictional device.  Palm-sized with a pull-out screen, clips onto the belt.  Has world-wide satellite video phone, global positioning, and seemingly endless PDA capabilities.  I think I&#39;ve even seen someone drop it into a cradle and pull up their work on a desktop PC.  I&#39;ve at least seen some general scenes like: &quot;Hey, can you drop me a couple gig of that data onto my global so I can look at it later.&quot;  Seems to have ubiquitous net access, even in low earth orbit. :)
But until someone makes that, I&#39;m going to eye that OQO up for awhile and see what people think.  $1000 seems like a sweet price if I can run *BSD or Linux on it.  Funny thing is, so far, I haven&#39;t spent very much money at all on all these things I have.  They&#39;ve all been acquired used or on sale or for free.  Most all of it was cobbled together from scraps.
Living in the future is fun. :)&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Wed, 24 Apr 2002 21:56:36 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/24/oooaag/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/24/oooaag/</guid>
        </item><item>
          <title>The bunsen burners still burn and the beakers still... um... beak.</title>
          <description
                >&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;So I&#39;m starting to play with PHP and working on rewriting my Movable Type templates as *.phtml.
Having never really payed much attention to PHP, I&#39;m amazed at how close it is to Perl (obviously on purpose) yet how much effort has been made to sand off the rough bits.  Not sure how much I like it yet, but at least it&#39;s a familiar tune they&#39;re playing.  The mildly annoying thing is that it&#39;s familiar, but there are just a few things I would habitually reach for in Perl that I haven&#39;t sussed out yet in PHP.  Like autovivifying data structures.  I abuse those constantly.  I really need to wean myself away from that, methinks.
One thing that I was pleasantly surprised to find is PEAR, &quot;a framework and distribution system for reusable PHP components&quot;.  Hello, CPAN, my old friend. :)  Finding all kinds of things that are immediately useful, like a Cache I can use to more intelligently and easily do the output caching voodoo I do in the perl CGI widgets right now.  
You know, a lack of a centrallized CPAN-like system is what has kept me from leaving Perl for many other technologies.  I really wish Java (CJAN?) and Python (CPyAN?) had one supported by their respective communities.  It&#39;s just so nice to do a perl -MCPAN -e&quot;install Date::Parse&quot; and get what I need.  Maintaining CPAN bundles for my perl software is tasty, too.  Single-command installation of all my app&#39;s requirements, and sometimes I can roll it right into the app&#39;s installation itself.  Mmm.
Anyway, it&#39;s nice (to say it again) to have a running personal site to tinker with, now that I&#39;ve gotten off my butt and done it.  This laboratory is letting me manufacture reasons to play with tech I hadn&#39;t bothered with before.  
I mean, I&#39;ve used ASP and JSP, and for most of the things I&#39;ve done, I&#39;ve grown a severe dislike for them both.  I left the &quot;Hey, you&#39;ve got HTML in my code!&quot; paradigm behind, wandered through that &quot;Hey, you&#39;ve got code in my HTML&quot; model, and eventually settled on my standard pattern now:A central app logic controller takes in GET/POST data, dispatches to a method which processes the form data.  That method then constructs data structures, which are in turn passed through a template engine to be rendered by a pile of templates independent from the controller.

This, along with some very special self-assembling component-based automation sauce, is the core of what my employer&#39;s offerings run on.  But, this has crystallized as a habit for me, and I&#39;ve not even considered other possibilities for a long time.  This of course has made everything look like a nail for this hammer I have.  
For example, while PHP is not quite the right tool for the  things we&#39;re doing at my day job, it seems like a perfect option to quickly and easily replace SSI pages on my site with something meatier yet still simple to maintain and doesn&#39;t stink like ASP or JSP.  I&#39;ve also been looking at Cocoon, which if I can ever quite get in a groove with it, looks like a highly refined instance of my standard hammer.
And then there&#39;s Radio UserLand.  I love it and hate it.  The hate mostly comes from the slower iBook on which I run it, I think.  The bootstrappiness of it makes me itch sometimes, but other times that just makes it endearing.  The whole self-contained development biodome it represents is pretty sexy, too.  Speaking of autovivifying data structures...  I just have to love a system which has a live, manually tinkerable giant outline/hashtree for a persistence mechanism.
Next, I really want to swing back around to playing with Flash.  Last time I did something major with it, I was making a game for my employer which really wanted to use web services but I hadn&#39;t known it yet.  The game worked pretty well, but I want to see what it can do since last we met.  First thing in mind that seems mildly nifty might be a slick, live updating lil &quot;Recent Visitors&quot; app for my front page.
I&#39;m really feeling what Jon Udell means when he writes about thinking by analogy.  It&#39;s also something one of my favorite Comp Sci professors harped on, with regards to what makes a Computer Programmer versus what makes a Computer Scientist.  A small part of his speech always pointed to the notion that a a programmer is almost always pragmatic, memorizing the patterns and greasy innards of whatever tool he or she uses daily.  On the other hand, the scientist is an explorer and finds joy in confusing him or herself by finding the universals and generalities across a range of tools.  In the end, the programmer becomes specialized in a limited domain, while the scientist knows can pick up just about anything that comes along.  And sometimes, many times, the scientist makes new tools for programmers to specialize on.  I want to be and am working toward being a scientist.
More soon.&lt;/body&gt;&lt;/html&gt;</description
              >
          
          <pubDate>Wed, 24 Apr 2002 16:40:12 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2002/04/24/oooaaf/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2002/04/24/oooaaf/</guid>
        </item>
    </channel>
  </rss>