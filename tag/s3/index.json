[
  {
    "title": "Continual Blogployment",
    "tags": [
      "metablogging",
      "webdev",
      "js",
      "gulp",
      "github",
      "travis",
      "s3",
      "amazon",
      "devops"
    ],
    "year": "2015",
    "month": "10",
    "day": "22",
    "isDir": false,
    "slug": "blogging-via-travis",
    "date": "2015-10-22T12:00:00.000Z",
    "postName": "2015-10-22-blogging-via-travis",
    "html": "<p>Ever since <a href=\"http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">I switched this blog over to a Gulp-based toolchain</a> - <em>holy crap, 2 years ago</em> - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. </p>\n<!--more-->\n\n<p>Just to test the cloud machinery I&#39;m (ab)using here, I&#39;m writing this post as a new commit on GitHub in a browser. When I get done and commit this, Travis CI will fire up, install my node-based blog code and build all the content. Assuming that goes well, my code on Travis will then publish any changes in the content to Amazon S3. And, voila, I will have blogged via the magic of cheap cloud infrastructure.</p>\n<p>Up until now, I&#39;ve been doing this all from my laptop: Write a post in Vim, commit to git, build &amp; deploy from my local machine. I&#39;d push to GitHub to work in the open and have a handy backup. But from here on, the push to GitHub will actually make the magic happen!</p>\n<p>If you&#39;re curious about the plumbing, <a href=\"https://github.com/lmorchard/blog.lmorchard.com/compare/5992311ade7acc0e9dbeb0352ac4097c687be1a5...10149c0e520f7e75536535ff563dfe42aa30b960\">the changes in my recent commits</a> can tell the exact story. But, what I did in a nutshell is this:</p>\n<ul>\n<li><a href=\"https://github.com/lmorchard/blog.lmorchard.com/commit/4c029ab9a6d3f5869cee02b7265e0ad41908a8c4\">Switched to using environment vars to configure AWS credentials for S3 publishing</a>.</li>\n<li>Used <a href=\"http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables\"><code>travis secure</code></a> to supply credentials in encrypted environment vars.</li>\n<li>Started <a href=\"https://github.com/lmorchard/blog.lmorchard.com/commit/4b525710760ad70c0d83d910585e7bd9ddd80583\">maintaining a copy of file hashes on the site</a> so that <a href=\"https://www.npmjs.com/package/gulp-awspublish\">gulp-awspublish</a> will only publish changes.</li>\n<li>Composed a <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/.travis.yml\">.travis.yml</a> to build &amp; deploy everything.</li>\n</ul>\n<p>And, if you&#39;re reading this post, then that means everything worked when I hit the &quot;Commit new file&quot; button! (And, if you&#39;re reading <em>this</em> sentence, then I was able to update this post, too!)</p>\n",
    "body": "Ever since [I switched this blog over to a Gulp-based toolchain][gulp-blog] - *holy crap, 2 years ago* - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. \n\n<!--more-->\n\nJust to test the cloud machinery I'm (ab)using here, I'm writing this post as a new commit on GitHub in a browser. When I get done and commit this, Travis CI will fire up, install my node-based blog code and build all the content. Assuming that goes well, my code on Travis will then publish any changes in the content to Amazon S3. And, voila, I will have blogged via the magic of cheap cloud infrastructure.\n\nUp until now, I've been doing this all from my laptop: Write a post in Vim, commit to git, build & deploy from my local machine. I'd push to GitHub to work in the open and have a handy backup. But from here on, the push to GitHub will actually make the magic happen!\n\nIf you're curious about the plumbing, [the changes in my recent commits][recent-commits] can tell the exact story. But, what I did in a nutshell is this:\n\n* [Switched to using environment vars to configure AWS credentials for S3 publishing][env-config].\n* Used [`travis secure`][travis-secure] to supply credentials in encrypted environment vars.\n* Started [maintaining a copy of file hashes on the site][hash-stash] so that [gulp-awspublish][] will only publish changes.\n* Composed a [.travis.yml][travis-yml] to build & deploy everything.\n\nAnd, if you're reading this post, then that means everything worked when I hit the \"Commit new file\" button! (And, if you're reading *this* sentence, then I was able to update this post, too!)\n\n[env-config]: https://github.com/lmorchard/blog.lmorchard.com/commit/4c029ab9a6d3f5869cee02b7265e0ad41908a8c4\n[gulp-awspublish]: https://www.npmjs.com/package/gulp-awspublish\n[hash-stash]: https://github.com/lmorchard/blog.lmorchard.com/commit/4b525710760ad70c0d83d910585e7bd9ddd80583\n[travis-yml]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/.travis.yml\n[travis-secure]: http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables\n[recent-commits]: https://github.com/lmorchard/blog.lmorchard.com/compare/5992311ade7acc0e9dbeb0352ac4097c687be1a5...10149c0e520f7e75536535ff563dfe42aa30b960\n[gulp-blog]: http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/10/22/blogging-via-travis",
    "summary": "<p>Ever since <a href=\"http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">I switched this blog over to a Gulp-based toolchain</a> - <em>holy crap, 2 years ago</em> - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. </p>\n",
    "prevPostPath": "2015/10/28/catbearcoin",
    "nextPostPath": "2015/10/18/being-nice-at-alterconf"
  },
  {
    "title": "tootr: microblogging app, hosting not included",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2014/10/11/tootr-1",
    "response_url": [
      null
    ],
    "response_title": [
      null
    ],
    "response_quote": [
      null
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "amazon",
      "metablogging",
      "s3",
      "social",
      "tootr",
      "webdev"
    ],
    "year": "2014",
    "month": "10",
    "day": "11",
    "isDir": false,
    "slug": "tootr-1",
    "date": "2014-10-11T12:00:00.000Z",
    "postName": "2014-10-11-tootr-1",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#S3_is_not_simple_enough\"><span class=\"toc_number toc_depth_1\">1</span> S3 is not simple enough</a>\n    </li>\n    <li>\n      <a href=\"#Login_with_Amazon\"><span class=\"toc_number toc_depth_1\">2</span> Login with Amazon</a>\n    </li>\n    <li>\n      <a href=\"#IAM_and_Roles\"><span class=\"toc_number toc_depth_1\">3</span> IAM and Roles</a>\n    </li>\n    <li>\n      <a href=\"#STS_and_Temporary_Credentials\"><span class=\"toc_number toc_depth_1\">4</span> STS and Temporary Credentials</a>\n    </li>\n    <li>\n      <a href=\"#Demo_time_and_next_steps\"><span class=\"toc_number toc_depth_1\">5</span> Demo time and next steps</a>\n    </li>\n  </ul>\n</div>\n\n<p>In my last two posts, I wrote about how I&#8217;ve been <a href=\"http://blog.lmorchard.com/2014/10/08/microblogging-like-its-2002\">thinking about building yet another microblogging tool</a> and how I think it might be interesting to <a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\">separate web publishing apps from web hosting</a>. Well, I started tinkering, and I&#8217;ve got a rough prototype working.</p>\n<!--more-->\n\n<h2 style=\"text-align: left;\">\n  <span id=\"S3_is_not_simple_enough\">S3 is not simple enough</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  When I think about dead simple web hosting, the first thing that comes to mind is <a href=\"http://aws.amazon.com/s3/\">Amazon S3</a>. I&#8217;ve been a fan of S3 for long enough that <a href=\"https://twitter.com/lmorchard/status/518228792780005376\">digging up my old code freaked me out</a>.\n</p>\n\n<p style=\"text-align: left;\">\n  There&#8217;s not much to the API: GET, PUT, & DELETE web content in URLspace under a &#8220;bucket&#8221; that you pay for by the byte. Overall S3 fits my criteria of &#8220;<a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web#p[IadIcc]\">dead simple hosting service</a>&#8221; rather nicely.\n</p>\n\n<p style=\"text-align: left;\">\n  Amazon S3 is <a href=\"http://aws.amazon.com/s3/pricing/\">super cheap</a>. I&#8217;ve never paid much more than US$0.50 in a month, and that&#8217;s even when I was experimenting with <a href=\"https://github.com/lmorchard/S3Ajax/blob/master/js/wiki.js\">a public-access wiki built atop the service</a> that folks from Amazon itself were playing with. I&#8217;ll probably move my blog there, someday, once I get the notion to revisit static site generators again.\n</p>\n\n<p style=\"text-align: left;\">\n  Amazon S3 is, however, <a href=\"http://www.team.net/mjb/hawg.html\">a professional&#8217;s tool</a>. It expects documentation to be read and training to be had. For a busy person with non-developer things do to, it&#8217;s <a href=\"http://en.wikipedia.org/wiki/Colossal_Cave_Adventure\">a twisty maze of passages, all alike</a>. That makes it a poor consumer product.\n</p>\n\n<p>So, I wondered: How hard would it be to smooth over some of the rough parts and make the experience almost as easy as a normal social media site?</p>\n<h2 style=\"text-align: left;\">\n  <span id=\"Login_with_Amazon\">Login with Amazon</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  First, the on-ramp has to be easy. Filling out a form with username, password, nickname, and email address would be an okay start. (Billing info would be nice, too, but let&#8217;s not go there quite yet.)\n</p>\n\n<p style=\"text-align: left;\">\n  What would be even better, though, is to click one button and reuse data already filled out elsewhere! Filling out forms with personal data is part of the problem web wonks call &#8220;identity&#8221;. Apropos of that, did you know that <a href=\"http://login.amazon.com/website\">Amazon has an identity service</a>? I didn&#8217;t, at least not until last weekend. (<a href=\"http://mobile.awsblog.com/post/Tx3UKF4SV4V0LV3/Announcing-Web-Identity-Federation\">Man, am I behind</a>!)\n</p>\n\n<p style=\"text-align: left;\">\n  I can put a &#8220;<a href=\"http://login.amazon.com/\">Login with Amazon</a>&#8221; button on my web app. You login with your Amazon username & password, but my app doesn&#8217;t see them. Instead, Amazon offers my app some simple profile details &#8211; user ID, email, & full name.\n</p>\n\n<p style=\"text-align: left;\">\n  But, having access to your Amazon identity offers even more power:\n</p>\n\n<li style=\"text-align: left;\">\n  Clicking &#8220;<a href=\"http://login.amazon.com/\">Login with Amazon</a>&#8221; gives your Amazon identity to my app.\n</li>\n<li style=\"text-align: left;\">\n  My app can use your Amazon identity to assume a temporary role.\n</li>\n<li style=\"text-align: left;\">\n  This temporary role enables use of a portion of an S3 bucket.\n</li>\n\n<p style=\"text-align: left;\">\n  This is hewing pretty close to <a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\">the publishing app / hosting service notions I laid out in my last post</a>. So, how does it work?\n</p>\n\n<p style=\"text-align: left;\">\n  Well, one of the things my app receives when you click the &#8220;Login&#8221; button is an <a href=\"http://login.amazon.com/glossary#access_token\"><code>access_token</code></a>. Chasing that <code>access_token</code> down the rabbit hole, I rediscovered Amazon IAM and STS &#8211; <a href=\"http://aws.amazon.com/iam/\">Identity & Access Management</a> and <a href=\"http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html\">Secure Token Service</a>.\n</p>\n\n<h2 style=\"text-align: left;\">\n  <span id=\"IAM_and_Roles\">IAM and Roles</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  Among other things, Amazon IAM lets you define roles and associate them with apps. Roles contain policies that grant access to resources controlled by your account &#8211; e.g. an S3 bucket.\n</p>\n\n<p style=\"text-align: left;\">\n  For example, here&#8217;s a policy snippet for a role I created on IAM:\n</p>\n\n<pre class=\"language-javascript\" style=\"text-align: left;\">{\n \"Effect\": \"Allow\",\n \"Action\": [\n   \"s3:PutObject\",\n   \"s3:PutObjectAcl\",\n   \"s3:DeleteObject\",\n   \"s3:GetObject\",\n   \"s3:GetObjectAcl\"\n ],\n \"Resource\": [\n   \"arn:aws:s3:::tootr/users/amazon/${www.amazon.com:user_id}\",\n   \"arn:aws:s3:::tootr/users/amazon/${www.amazon.com:user_id}/*\"\n ]\n}</pre>\n\n<p style=\"text-align: left;\">\n  This role grants access to GET, PUT, & DELETE web resources in my S3 bucket named &#8220;tootr&#8221; &#8211; but only as long as the resources are under the &#8220;<code>users/amazon/{USER_ID}</code>&#8221; URLspace, where <code>{USER_ID}</code> is a uniquely generated identifier supplied by an Amazon profile.\n</p>\n\n<h2 style=\"text-align: left;\">\n  <span id=\"STS_and_Temporary_Credentials\">STS and Temporary Credentials</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  So, how can someone assume such a role? That&#8217;s <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L103\">where Amazon STS comes in</a>:\n</p>\n\n<pre style=\"text-align: left;\"><code class=\"language-javascript\">$.ajax('https://sts.amazonaws.com/?' + $.param({\n\n  'Action': 'AssumeRoleWithWebIdentity',\n  'Version': '2011-06-15',\n  'RoleArn': 'arn:aws:iam::8675309:role/tootr-amazon-user-buckets',\n  'RoleSessionName': 'web-identity-federation',\n  'ProviderId': 'www.amazon.com',\n  'DurationSeconds': '900',\n  'WebIdentityToken': access_token\n\n})).then(function (dataXML, status, xhr) {\n\n  var data = <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/misc.js#L11\">misc.xmlToObj</a>(dataXML);\n  var credentials = data\n    .AssumeRoleWithWebIdentityResponse\n    .AssumeRoleWithWebIdentityResult\n    .Credentials;\n\n});</code></pre>\n\n<p style=\"text-align: left;\">\n  The <code>RoleArn</code> parameter identifies the IAM role created earlier. The <code>access_token</code> is what my app got when you logged in. The <a href=\"http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html\"><code>AssumeRoleWithWebIdentity</code> API on Amazon STS</a> lets me <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L103\">connect the two and generate temporary credentials</a>.\n</p>\n\n<p style=\"text-align: left;\">\n  Those credentials look something like this:\n</p>\n\n<pre class=\"language-javascript\" style=\"text-align: left;\">{\n  \"SessionToken\":\"NIweiunfiunIUWNLFIsd87\",\n  \"Expiration\":\"2014-10-11T19:15:58Z\",\n  \"AccessKeyId\":\"ASIAQWERTYUIOP\",\n  \"SecretAccessKey\":\"SKLN9869KJnisdhfli\"\n}</pre>\n\n<p style=\"text-align: left;\">\n  As it turns out, <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L148\">these credentials work with Amazon S3</a>. So, after accepting a login and doing the <code>AssumeRoleWithWebIdentity</code> dance, my app can manage web hosting at Amazon S3 on your behalf.\n</p>\n\n<p style=\"text-align: left;\">\n  For further reading, check out &#8220;<a href=\"docs.aws.amazon.com/STS/latest/UsingSTS/CreatingWIF.html\">Creating Temporary Security Credentials for Mobile Apps Using Identity Providers</a>&#8221; in Amazon&#8217;s documentation. That&#8217;s from where I stole most of this stuff.\n</p>\n\n<h2 style=\"text-align: left;\">\n  <span id=\"Demo_time_and_next_steps\">Demo time and next steps</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  I&#8217;ve rolled all of this into <a href=\"https://github.com/lmorchard/tootr\">a microblogging app called &#8220;tootr&#8221;</a>. Here&#8217;s a demo:\n</p>\n\n<li style=\"text-align: left;\">\n  <a href=\"https://lmorchard.github.io/tootr/\">https://lmorchard.github.io/tootr/</a>\n</li>\n\n<p>You can visit the app, click &#8220;Login with Amazon&#8221;, and you&#8217;ll soon be tooting up a storm. But, you should notice some serious drawbacks:</p>\n<ul>\n<li>The app is terrible and missing almost every interesting feature.</li>\n<li>Your username is something like <a href=\"https://tootr.s3.amazonaws.com/users/amazon/amzn1.account.AF5OSES2YSFJEKYBANBHRFB25RXQ/index.html\">AF5OSES2YSFJEKYBANBHRFB25RXQ</a> and that&#8217;s also terrible.</li>\n<li>You&#8217;re tooting into my Amazon S3 bucket. You&#8217;re not paying me or Amazon. I <em>will</em> vandalize &amp; delete your stuff and not feel bad about it.</li>\n</ul>\n<p>As a proof-of-concept, though, I think it works: The &#8220;tootr&#8221; app at <a href=\"https://lmorchard.github.io/tootr/\">lmorchard.github.io</a> publishes to a hosting API at <a href=\"http://s3.amazonaws.com\">s3.amazonaws.com</a>. The on-ramp is a single button click and an Amazon sign-in dialog.</p>\n<p>But, I think all the above issues can be addressed. Also, Amazon is an interesting core for this stuff: Many people have an Amazon account, and Amazon is a place where people generally pay for things. So, it&#8217;s different territory than most social media sites.</p>\n<p>The challenge will be keeping the on-ramp simple while improving the app and switching to a user-owned web hosting space. Still, I think this is promising stuff. At any rate, it&#8217;s tinkering I&#8217;ve been procrastinating for years now, so I&#8217;ve got plenty of ideas to chase down.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#S3_is_not_simple_enough\"><span class=\"toc_number toc_depth_1\">1</span> S3 is not simple enough</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Login_with_Amazon\"><span class=\"toc_number toc_depth_1\">2</span> Login with Amazon</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#IAM_and_Roles\"><span class=\"toc_number toc_depth_1\">3</span> IAM and Roles</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#STS_and_Temporary_Credentials\"><span class=\"toc_number toc_depth_1\">4</span> STS and Temporary Credentials</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Demo_time_and_next_steps\"><span class=\"toc_number toc_depth_1\">5</span> Demo time and next steps</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nIn my last two posts, I wrote about how I&#8217;ve been [thinking about building yet another microblogging tool][1] and how I think it might be interesting to [separate web publishing apps from web hosting][2]. Well, I started tinkering, and I&#8217;ve got a rough prototype working.\r\n\r\n<!--more-->\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"S3_is_not_simple_enough\">S3 is not simple enough</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  When I think about dead simple web hosting, the first thing that comes to mind is <a href=\"http://aws.amazon.com/s3/\">Amazon S3</a>. I&#8217;ve been a fan of S3 for long enough that <a href=\"https://twitter.com/lmorchard/status/518228792780005376\">digging up my old code freaked me out</a>.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  There&#8217;s not much to the API: GET, PUT, & DELETE web content in URLspace under a &#8220;bucket&#8221; that you pay for by the byte. Overall S3 fits my criteria of &#8220;<a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web#p[IadIcc]\">dead simple hosting service</a>&#8221; rather nicely.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  Amazon S3 is <a href=\"http://aws.amazon.com/s3/pricing/\">super cheap</a>. I&#8217;ve never paid much more than US$0.50 in a month, and that&#8217;s even when I was experimenting with <a href=\"https://github.com/lmorchard/S3Ajax/blob/master/js/wiki.js\">a public-access wiki built atop the service</a> that folks from Amazon itself were playing with. I&#8217;ll probably move my blog there, someday, once I get the notion to revisit static site generators again.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  Amazon S3 is, however, <a href=\"http://www.team.net/mjb/hawg.html\">a professional&#8217;s tool</a>. It expects documentation to be read and training to be had. For a busy person with non-developer things do to, it&#8217;s <a href=\"http://en.wikipedia.org/wiki/Colossal_Cave_Adventure\">a twisty maze of passages, all alike</a>. That makes it a poor consumer product.\r\n</p>\r\n\r\nSo, I wondered: How hard would it be to smooth over some of the rough parts and make the experience almost as easy as a normal social media site?\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"Login_with_Amazon\">Login with Amazon</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  First, the on-ramp has to be easy. Filling out a form with username, password, nickname, and email address would be an okay start. (Billing info would be nice, too, but let&#8217;s not go there quite yet.)\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  What would be even better, though, is to click one button and reuse data already filled out elsewhere! Filling out forms with personal data is part of the problem web wonks call &#8220;identity&#8221;. Apropos of that, did you know that <a href=\"http://login.amazon.com/website\">Amazon has an identity service</a>? I didn&#8217;t, at least not until last weekend. (<a href=\"http://mobile.awsblog.com/post/Tx3UKF4SV4V0LV3/Announcing-Web-Identity-Federation\">Man, am I behind</a>!)\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  I can put a &#8220;<a href=\"http://login.amazon.com/\">Login with Amazon</a>&#8221; button on my web app. You login with your Amazon username & password, but my app doesn&#8217;t see them. Instead, Amazon offers my app some simple profile details &#8211; user ID, email, & full name.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  But, having access to your Amazon identity offers even more power:\r\n</p>\r\n\r\n<li style=\"text-align: left;\">\r\n  Clicking &#8220;<a href=\"http://login.amazon.com/\">Login with Amazon</a>&#8221; gives your Amazon identity to my app.\r\n</li>\r\n<li style=\"text-align: left;\">\r\n  My app can use your Amazon identity to assume a temporary role.\r\n</li>\r\n<li style=\"text-align: left;\">\r\n  This temporary role enables use of a portion of an S3 bucket.\r\n</li>\r\n\r\n<p style=\"text-align: left;\">\r\n  This is hewing pretty close to <a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\">the publishing app / hosting service notions I laid out in my last post</a>. So, how does it work?\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  Well, one of the things my app receives when you click the &#8220;Login&#8221; button is an <a href=\"http://login.amazon.com/glossary#access_token\"><code>access_token</code></a>. Chasing that <code>access_token</code> down the rabbit hole, I rediscovered Amazon IAM and STS &#8211; <a href=\"http://aws.amazon.com/iam/\">Identity & Access Management</a> and <a href=\"http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html\">Secure Token Service</a>.\r\n</p>\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"IAM_and_Roles\">IAM and Roles</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  Among other things, Amazon IAM lets you define roles and associate them with apps. Roles contain policies that grant access to resources controlled by your account &#8211; e.g. an S3 bucket.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  For example, here&#8217;s a policy snippet for a role I created on IAM:\r\n</p>\r\n\r\n<pre class=\"language-javascript\" style=\"text-align: left;\">{\r\n \"Effect\": \"Allow\",\r\n \"Action\": [\r\n   \"s3:PutObject\",\r\n   \"s3:PutObjectAcl\",\r\n   \"s3:DeleteObject\",\r\n   \"s3:GetObject\",\r\n   \"s3:GetObjectAcl\"\r\n ],\r\n \"Resource\": [\r\n   \"arn:aws:s3:::tootr/users/amazon/${www.amazon.com:user_id}\",\r\n   \"arn:aws:s3:::tootr/users/amazon/${www.amazon.com:user_id}/*\"\r\n ]\r\n}</pre>\r\n\r\n<p style=\"text-align: left;\">\r\n  This role grants access to GET, PUT, & DELETE web resources in my S3 bucket named &#8220;tootr&#8221; &#8211; but only as long as the resources are under the &#8220;<code>users/amazon/{USER_ID}</code>&#8221; URLspace, where <code>{USER_ID}</code> is a uniquely generated identifier supplied by an Amazon profile.\r\n</p>\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"STS_and_Temporary_Credentials\">STS and Temporary Credentials</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  So, how can someone assume such a role? That&#8217;s <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L103\">where Amazon STS comes in</a>:\r\n</p>\r\n\r\n<pre style=\"text-align: left;\"><code class=\"language-javascript\">$.ajax('https://sts.amazonaws.com/?' + $.param({\r\n\r\n  'Action': 'AssumeRoleWithWebIdentity',\r\n  'Version': '2011-06-15',\r\n  'RoleArn': 'arn:aws:iam::8675309:role/tootr-amazon-user-buckets',\r\n  'RoleSessionName': 'web-identity-federation',\r\n  'ProviderId': 'www.amazon.com',\r\n  'DurationSeconds': '900',\r\n  'WebIdentityToken': access_token\r\n\r\n})).then(function (dataXML, status, xhr) {\r\n\r\n  var data = <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/misc.js#L11\">misc.xmlToObj</a>(dataXML);\r\n  var credentials = data\r\n    .AssumeRoleWithWebIdentityResponse\r\n    .AssumeRoleWithWebIdentityResult\r\n    .Credentials;\r\n\r\n});</code></pre>\r\n\r\n<p style=\"text-align: left;\">\r\n  The <code>RoleArn</code> parameter identifies the IAM role created earlier. The <code>access_token</code> is what my app got when you logged in. The <a href=\"http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html\"><code>AssumeRoleWithWebIdentity</code> API on Amazon STS</a> lets me <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L103\">connect the two and generate temporary credentials</a>.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  Those credentials look something like this:\r\n</p>\r\n\r\n<pre class=\"language-javascript\" style=\"text-align: left;\">{\r\n  \"SessionToken\":\"NIweiunfiunIUWNLFIsd87\",\r\n  \"Expiration\":\"2014-10-11T19:15:58Z\",\r\n  \"AccessKeyId\":\"ASIAQWERTYUIOP\",\r\n  \"SecretAccessKey\":\"SKLN9869KJnisdhfli\"\r\n}</pre>\r\n\r\n<p style=\"text-align: left;\">\r\n  As it turns out, <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L148\">these credentials work with Amazon S3</a>. So, after accepting a login and doing the <code>AssumeRoleWithWebIdentity</code> dance, my app can manage web hosting at Amazon S3 on your behalf.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  For further reading, check out &#8220;<a href=\"docs.aws.amazon.com/STS/latest/UsingSTS/CreatingWIF.html\">Creating Temporary Security Credentials for Mobile Apps Using Identity Providers</a>&#8221; in Amazon&#8217;s documentation. That&#8217;s from where I stole most of this stuff.\r\n</p>\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"Demo_time_and_next_steps\">Demo time and next steps</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  I&#8217;ve rolled all of this into <a href=\"https://github.com/lmorchard/tootr\">a microblogging app called &#8220;tootr&#8221;</a>. Here&#8217;s a demo:\r\n</p>\r\n\r\n<li style=\"text-align: left;\">\r\n  <a href=\"https://lmorchard.github.io/tootr/\">https://lmorchard.github.io/tootr/</a>\r\n</li>\r\n\r\nYou can visit the app, click &#8220;Login with Amazon&#8221;, and you&#8217;ll soon be tooting up a storm. But, you should notice some serious drawbacks:\r\n\r\n*   The app is terrible and missing almost every interesting feature.\r\n*   Your username is something like [AF5OSES2YSFJEKYBANBHRFB25RXQ][3] and that&#8217;s also terrible.\r\n*   You&#8217;re tooting into my Amazon S3 bucket. You&#8217;re not paying me or Amazon. I *will* vandalize & delete your stuff and not feel bad about it.\r\n\r\nAs a proof-of-concept, though, I think it works: The &#8220;tootr&#8221; app at [lmorchard.github.io][4] publishes to a hosting API at [s3.amazonaws.com][5]. The on-ramp is a single button click and an Amazon sign-in dialog.\r\n\r\nBut, I think all the above issues can be addressed. Also, Amazon is an interesting core for this stuff: Many people have an Amazon account, and Amazon is a place where people generally pay for things. So, it&#8217;s different territory than most social media sites.\r\n\r\nThe challenge will be keeping the on-ramp simple while improving the app and switching to a user-owned web hosting space. Still, I think this is promising stuff. At any rate, it&#8217;s tinkering I&#8217;ve been procrastinating for years now, so I&#8217;ve got plenty of ideas to chase down.\r\n\r\n [1]: http://blog.lmorchard.com/2014/10/08/microblogging-like-its-2002\r\n [2]: http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\r\n [3]: https://tootr.s3.amazonaws.com/users/amazon/amzn1.account.AF5OSES2YSFJEKYBANBHRFB25RXQ/index.html\r\n [4]: https://lmorchard.github.io/tootr/\r\n [5]: http://s3.amazonaws.com\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/10/11/tootr-1",
    "summary": "\n\n<p>In my last two posts, I wrote about how I&#x2019;ve been <a href=\"http://blog.lmorchard.com/2014/10/08/microblogging-like-its-2002\">thinking about building yet another microblogging tool</a> and how I think it might be interesting to <a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\">separate web publishing apps from web hosting</a>. Well, I started tinkering, and I&#x2019;ve got a rough prototype working.</p>\n",
    "prevPostPath": "2014/10/20/static-blog-generation-with-gulp",
    "nextPostPath": "2014/10/09/separating-publishing-from-hosting-on-the-web"
  },
  {
    "comments_archived": true,
    "date": "2006-08-24T12:58:04.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "amazon",
      "s3",
      "ec2",
      "webservices"
    ],
    "title": "Amazon EC2 emerges",
    "wordpress_id": 984,
    "wordpress_slug": "amazon-ec2-emerges",
    "wordpress_url": "http://decafbad.com/blog/2006/08/24/amazon-ec2-emerges",
    "year": "2006",
    "month": "08",
    "day": "24",
    "isDir": false,
    "slug": "amazon-ec2-emerges",
    "postName": "2006-08-24-amazon-ec2-emerges",
    "html": "<blockquote cite=\"http://www.amazon.com/b/ref=sc_fe_c_1_3435361_1/002-3833110-2752034?ie=UTF8&node=201590011&no=3435361&me=A36L942TSJ2AJA\"><p>Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides resizable compute capacity in the cloud. It is designed to make web-scale computing easier for developers.\n</p><p>\nJust as Amazon Simple Storage Service (Amazon S3) enables storage in the cloud, Amazon EC2 enables \"compute\" in the cloud.</p></blockquote><div class=\"quotesource\">Source: <a href=\"http://www.amazon.com/b/ref=sc_fe_c_1_3435361_1/002-3833110-2752034?ie=UTF8&node=201590011&no=3435361&me=A36L942TSJ2AJA\">Amazon.com Amazon Web Services Store: Amazon EC2 / Amazon Web Services</a></div>\n\n<p>This seems like the sound of the second shoe hitting the floor.  Although I tried signing up for this as soon as I saw the email, I was already too late to get in on the beta and start playing.  Maybe I&#39;ll get in on a second round.</p>\n<p>EC2 seems a lot like <a href=\"http://user-mode-linux.sourceforge.net/\">User Mode Linux</a> virtual hosting, but it charges <del>by the CPU hour</del> by the hour of uptime instead of month-to-month.  I&#39;ll be very interested to see how this shakes out, and what sort of web app architecture it encourages when used in conjunction with S3 - say <a href=\"http://weblog.infoworld.com/udell/2006/07/07.html\">AJAX-based queues</a> for instance? - or if it just gets used as a straight <a href=\"http://en.wikipedia.org/wiki/LAMP_(software_bundle)\">LAMP</a> host in general.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221088886\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.sencer.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0e94b4d4662542b91df48f0ff3b36d26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.sencer.de\">Sencer</a>\n</div>\n<a href=\"#comment-221088886\" class=\"permalink\"><time datetime=\"2006-08-24T15:27:46\">2006-08-24T15:27:46</time></a>\n</div>\n<div class=\"content\"><blockquote>\n<p>it charges by the CPU hour</p>\n</blockquote>\n<p>Just to prevent confusion: They call it instance hours and mean the hours a vm/instance has been running (independent of utilization). \nOnly saying this, beause some hosts, like dreamhost, use(d) the term CPU-minutes for keeping track of \"how much time a processor spends working for your username\" and allow(ed) sth. like 60 CPU-minutes a day.</p>\n<p>At least that's how I understand the amazon offer.</p>\n<p>And thanks for the pointer! It'll be intereting to watch what people are going to come up with. Given that the instances are not \"persistent\", i.e. data is gone when you stop them (unless you move things int S3 or elsewhere), I am assuming that they <em>will</em> be used differently from regular dedicated machines. </p>\n<p>It reminds a little bit of DSL (Damnsmalllinux) which boots/runs of a CD, but allows you to save all your data and customization to an external storage (usb/ftp/etc.) and does auto-restore when you boot into it again. This is nice for people afraid of viruses or getting hacked etc.. I wonder whether this will turn out to be a plus for amazons offer as well. At first it does make things a bit more complicated wrt to usual linux way. But I guess tose things can be solved...</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088888\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088888\" class=\"permalink\"><time datetime=\"2006-08-24T16:29:44\">2006-08-24T16:29:44</time></a>\n</div>\n<div class=\"content\"><p>Sencer: Actually, I think your reading is the right one.  It's charge per hour of uptime of the instance, and not a meter on CPU cycles.  \n</p><p>\nSo, to do a quick napkin calculation - $0.10 per hour x 24 hours x 31 days = $74.40 per month to keep an instance running around the clock.  \n</p><p>\nThat makes me think that applications using this service will need to be designed around some clever resource usage, either through scheduled tasks or some interesting way to respond on demand.  Simply running a straight PHP app would seem a bit wasteful in many small-scale cases.</p>\n<p>If I were to run a blog from it, say, I'd lean more toward the Movable Type school of static publishing than the WordPress school of live PHP pages.  Of course, that could all be done from a behind-firewall personal desktop machine, so I need to think of a better example.</p>\n<p>Then again, being able to add and drop instances at will is a big, big deal for larger scale applications.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088891\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.jonathanboutelle.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d77d55a352cc3dc84a86510094b2dde8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.jonathanboutelle.com\">Jonathan Boutelle</a>\n</div>\n<a href=\"#comment-221088891\" class=\"permalink\"><time datetime=\"2006-08-24T17:12:09\">2006-08-24T17:12:09</time></a>\n</div>\n<div class=\"content\"><p>Let's see,  back of the envelope calculation ... that's a 10-machine cluster for 720$ /month + bandwidth. With redundant storage and firewall included. Holy crap! Web 2.0 apps just got a LOT cheaper to deploy.</p>\n<p>I am also stuck in limbo land: they sent the email out at 3AM PST, which is just rude: a west-coast company should at least wait until California and Washington wakes up before sending out a limited beta. Methinks the geeks in NYC and boston and the research triangle got all the slots.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088893\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088893\" class=\"permalink\"><time datetime=\"2006-08-24T17:57:58\">2006-08-24T17:57:58</time></a>\n</div>\n<div class=\"content\"><p>Jonathan: Yeah, I think your calculation is a better one.  Mine just reflects the fact that EC2 doesn't scale <em>down</em> to piddly little apps like I've been playing with.  But scaling up, it looks like a much better value.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088895\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://claimid.com/dne\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7cc1b40a65ed472663b1af1749e8fcb6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://claimid.com/dne\">Daniel Néri</a>\n</div>\n<a href=\"#comment-221088895\" class=\"permalink\"><time datetime=\"2006-08-24T19:04:19\">2006-08-24T19:04:19</time></a>\n</div>\n<div class=\"content\"><p></p><p>It appears to be based on <a href=\"http://www.cl.cam.ac.uk/Research/SRG/netos/xen/\" rel=\"nofollow\">Xen</a>, judging from the sample hostnames in the <a href=\"http://docs.amazonwebservices.com/AmazonEC2/gsg/2006-06-26/\" rel=\"nofollow\">docs</a>.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088899\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.base4.net/Blog.aspx?ID=93\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ef0b5680532c0e0fac2fe20ef4b01929&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.base4.net/Blog.aspx?ID=93\">Alex James</a>\n</div>\n<a href=\"#comment-221088899\" class=\"permalink\"><time datetime=\"2006-08-25T11:27:19\">2006-08-25T11:27:19</time></a>\n</div>\n<div class=\"content\"><p>I agree, you need to band together with a couple of mates to make it worthwhile for really small sites. But at the high end it is amazing value. </p>\n<p>Perhaps then there is an opportunity for someone to use EC2 based websites, you could easily create an sort of ISP or ASP model using this, by putting about 20 little websites/application servers on one Image. </p>\n<p>BTW Jonathan... I'm from little old New Zealand and I managed to nab a slot!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088900\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.waituk.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=accdd07341577af9d82a220a8a0f5a2d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.waituk.com\">Website Nepal</a>\n</div>\n<a href=\"#comment-221088900\" class=\"permalink\"><time datetime=\"2007-08-31T17:23:53\">2007-08-31T17:23:53</time></a>\n</div>\n<div class=\"content\"><p>I checked out the Amazon EC2 since I am planning to offer web hosting solution somewhat similar to what EC2 are doing.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://www.amazon.com/b/ref=sc_fe_c_1_3435361_1/002-3833110-2752034?ie=UTF8&node=201590011&no=3435361&me=A36L942TSJ2AJA\"><p>Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides resizable compute capacity in the cloud. It is designed to make web-scale computing easier for developers.\r\n</p><p>\r\nJust as Amazon Simple Storage Service (Amazon S3) enables storage in the cloud, Amazon EC2 enables \"compute\" in the cloud.</p></blockquote><div class=\"quotesource\">Source: <a href=\"http://www.amazon.com/b/ref=sc_fe_c_1_3435361_1/002-3833110-2752034?ie=UTF8&node=201590011&no=3435361&me=A36L942TSJ2AJA\">Amazon.com Amazon Web Services Store: Amazon EC2 / Amazon Web Services</a></div>\r\n\r\nThis seems like the sound of the second shoe hitting the floor.  Although I tried signing up for this as soon as I saw the email, I was already too late to get in on the beta and start playing.  Maybe I'll get in on a second round.\r\n  \r\nEC2 seems a lot like [User Mode Linux][uml] virtual hosting, but it charges <del>by the CPU hour</del> by the hour of uptime instead of month-to-month.  I'll be very interested to see how this shakes out, and what sort of web app architecture it encourages when used in conjunction with S3 - say [AJAX-based queues][aq] for instance? - or if it just gets used as a straight [LAMP][] host in general.\r\n\r\n[lamp]: http://en.wikipedia.org/wiki/LAMP_(software_bundle)\r\n[uml]:http://user-mode-linux.sourceforge.net/\r\n[aq]: http://weblog.infoworld.com/udell/2006/07/07.html\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221088886\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.sencer.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0e94b4d4662542b91df48f0ff3b36d26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.sencer.de\">Sencer</a>\n                </div>\n                <a href=\"#comment-221088886\" class=\"permalink\"><time datetime=\"2006-08-24T15:27:46\">2006-08-24T15:27:46</time></a>\n            </div>\n            <div class=\"content\"><blockquote>\n  <p>it charges by the CPU hour</p>\n</blockquote>\n\n<p>Just to prevent confusion: They call it instance hours and mean the hours a vm/instance has been running (independent of utilization). \nOnly saying this, beause some hosts, like dreamhost, use(d) the term CPU-minutes for keeping track of \"how much time a processor spends working for your username\" and allow(ed) sth. like 60 CPU-minutes a day.</p>\n\n<p>At least that's how I understand the amazon offer.</p>\n\n<p>And thanks for the pointer! It'll be intereting to watch what people are going to come up with. Given that the instances are not \"persistent\", i.e. data is gone when you stop them (unless you move things int S3 or elsewhere), I am assuming that they <em>will</em> be used differently from regular dedicated machines. </p>\n\n<p>It reminds a little bit of DSL (Damnsmalllinux) which boots/runs of a CD, but allows you to save all your data and customization to an external storage (usb/ftp/etc.) and does auto-restore when you boot into it again. This is nice for people afraid of viruses or getting hacked etc.. I wonder whether this will turn out to be a plus for amazons offer as well. At first it does make things a bit more complicated wrt to usual linux way. But I guess tose things can be solved...</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088888\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088888\" class=\"permalink\"><time datetime=\"2006-08-24T16:29:44\">2006-08-24T16:29:44</time></a>\n            </div>\n            <div class=\"content\"><p>Sencer: Actually, I think your reading is the right one.  It's charge per hour of uptime of the instance, and not a meter on CPU cycles.  \n</p><p>\nSo, to do a quick napkin calculation - $0.10 per hour x 24 hours x 31 days = $74.40 per month to keep an instance running around the clock.  \n</p><p>\nThat makes me think that applications using this service will need to be designed around some clever resource usage, either through scheduled tasks or some interesting way to respond on demand.  Simply running a straight PHP app would seem a bit wasteful in many small-scale cases.</p>\n\n<p>If I were to run a blog from it, say, I'd lean more toward the Movable Type school of static publishing than the WordPress school of live PHP pages.  Of course, that could all be done from a behind-firewall personal desktop machine, so I need to think of a better example.</p>\n\n<p>Then again, being able to add and drop instances at will is a big, big deal for larger scale applications.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088891\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.jonathanboutelle.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d77d55a352cc3dc84a86510094b2dde8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.jonathanboutelle.com\">Jonathan Boutelle</a>\n                </div>\n                <a href=\"#comment-221088891\" class=\"permalink\"><time datetime=\"2006-08-24T17:12:09\">2006-08-24T17:12:09</time></a>\n            </div>\n            <div class=\"content\"><p>Let's see,  back of the envelope calculation ... that's a 10-machine cluster for 720$ /month + bandwidth. With redundant storage and firewall included. Holy crap! Web 2.0 apps just got a LOT cheaper to deploy.</p>\n\n<p>I am also stuck in limbo land: they sent the email out at 3AM PST, which is just rude: a west-coast company should at least wait until California and Washington wakes up before sending out a limited beta. Methinks the geeks in NYC and boston and the research triangle got all the slots.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088893\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088893\" class=\"permalink\"><time datetime=\"2006-08-24T17:57:58\">2006-08-24T17:57:58</time></a>\n            </div>\n            <div class=\"content\"><p>Jonathan: Yeah, I think your calculation is a better one.  Mine just reflects the fact that EC2 doesn't scale <em>down</em> to piddly little apps like I've been playing with.  But scaling up, it looks like a much better value.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088895\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://claimid.com/dne\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7cc1b40a65ed472663b1af1749e8fcb6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://claimid.com/dne\">Daniel Néri</a>\n                </div>\n                <a href=\"#comment-221088895\" class=\"permalink\"><time datetime=\"2006-08-24T19:04:19\">2006-08-24T19:04:19</time></a>\n            </div>\n            <div class=\"content\"><p></p><p>It appears to be based on <a href=\"http://www.cl.cam.ac.uk/Research/SRG/netos/xen/\" rel=\"nofollow\">Xen</a>, judging from the sample hostnames in the <a href=\"http://docs.amazonwebservices.com/AmazonEC2/gsg/2006-06-26/\" rel=\"nofollow\">docs</a>.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088899\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.base4.net/Blog.aspx?ID=93\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ef0b5680532c0e0fac2fe20ef4b01929&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.base4.net/Blog.aspx?ID=93\">Alex James</a>\n                </div>\n                <a href=\"#comment-221088899\" class=\"permalink\"><time datetime=\"2006-08-25T11:27:19\">2006-08-25T11:27:19</time></a>\n            </div>\n            <div class=\"content\"><p>I agree, you need to band together with a couple of mates to make it worthwhile for really small sites. But at the high end it is amazing value. </p>\n\n<p>Perhaps then there is an opportunity for someone to use EC2 based websites, you could easily create an sort of ISP or ASP model using this, by putting about 20 little websites/application servers on one Image. </p>\n\n<p>BTW Jonathan... I'm from little old New Zealand and I managed to nab a slot!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088900\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.waituk.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=accdd07341577af9d82a220a8a0f5a2d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.waituk.com\">Website Nepal</a>\n                </div>\n                <a href=\"#comment-221088900\" class=\"permalink\"><time datetime=\"2007-08-31T17:23:53\">2007-08-31T17:23:53</time></a>\n            </div>\n            <div class=\"content\"><p>I checked out the Amazon EC2 since I am planning to offer web hosting solution somewhat similar to what EC2 are doing.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/08/24/amazon-ec2-emerges",
    "prevPostPath": "2006/08/24/refusefear",
    "nextPostPath": "2006/08/23/meetro-asks-myspace-who-i-am"
  }
]