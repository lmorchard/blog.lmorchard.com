[
  {
    "comments_archived": true,
    "date": "2008-09-07T05:20:20.000Z",
    "layout": "post",
    "tags": [
      "delicious",
      "web20",
      "firefox",
      "entries",
      "mozilla",
      "ubiquity"
    ],
    "title": "Improving my Delicious command for Ubiquity",
    "wordpress_id": 1380,
    "wordpress_slug": "improving-my-delicious-command-for-ubiquity",
    "wordpress_url": "http://decafbad.com/blog/?p=1380",
    "year": "2008",
    "month": "09",
    "day": "07",
    "isDir": false,
    "slug": "improving-my-delicious-command-for-ubiquity",
    "postName": "2008-09-07-improving-my-delicious-command-for-ubiquity",
    "html": "<p>After writing up my <a href=\"http://decafbad.com/blog/2008/09/01/writing-a-delicious-command-for-ubiquity\">first stab at a Delicious command for Ubiquity</a>, I planned to continue revising it based on feedback and to work on exploring more of what Ubiquity enables.  I started looking into writing my own nouns for tag suggestions, as well as playing with page load and browser startup hooks.  And, I also started poking at a little bit of deeper extension development, which took up most of my time today.</p>\n<p>I&#39;ve <a href=\"http://decafbad.com/UbiquityCommands/\">updated my UbiquityCommands</a> page and checked in my latest revision of <a href=\"http://decafbad.com/hgwebdir.cgi/UbiquityCommands/file/tip/delicious.ubiq.js\">the Delicious command</a>.  </p>\n<p>The main new feature is a status bar item reporting bookmarks for the current page:</p>\n<p><img style=\"padding: 0.25em\" src=\"http://decafbad.com/2008/ubiq-del-status.jpg\" />&nbsp;<img style=\"padding: 0.25em\" src=\"http://decafbad.com/2008/ubiq-del-tip.jpg\" /></p>\n<p>As you can see above, the command now comes with a status bar panel powered by the <a href=\"http://delicious.com/help/feeds\">Delicious URL info JSON feed</a>, providing bookmarking info on every page visited.  It shows a bookmark count, a tooltip with further information, and sends the user to the URL info page on Delicious when clicked.  It mostly works, but it could use some looking at.  This is my first time really cracking open the hood on Firefox and XUL, and so I&#39;m feeling around in the dark.</p>\n<p>Specifically, I&#39;m using Ubiquity&#39;s page load hookâ€”but I&#39;m also trying to augment that by tracking tab selection events, in order to keep the status bar info updated for the active tab.  But then, that leads me to trying to track new windows, to attach the tab selection event handler for every newly opened window.  Or I could just be barking up the wrong tree entirely.  At any rate, the code is probably brain-dead dumb, so I hope someone can clue me into a better way.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221088289\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://blog.mozilla.com/gen/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ef1b5a29836fa211b938d8ccbbd3e0a1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://blog.mozilla.com/gen/\">Gen Kanai</a>\n</div>\n<a href=\"#comment-221088289\" class=\"permalink\"><time datetime=\"2008-09-07T08:10:39\">2008-09-07T08:10:39</time></a>\n</div>\n<div class=\"content\"><p>Les, you may want to let R/RW know about your new command.</p>\n<p>http://www.readwriteweb.com/archives/the_ultimate_list_of_custom_ubiquity_verbs.php</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088292\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com/\">Abimanyu Raja</a>\n</div>\n<a href=\"#comment-221088292\" class=\"permalink\"><time datetime=\"2008-09-07T08:55:52\">2008-09-07T08:55:52</time></a>\n</div>\n<div class=\"content\"><p>I disagree... Your command doesn't fit on that list. It's way too good for that list. :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088296\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=61fc20fbb1afbfc057df523f9dae79da&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Jeton</a>\n</div>\n<a href=\"#comment-221088296\" class=\"permalink\"><time datetime=\"2008-09-07T21:56:43\">2008-09-07T21:56:43</time></a>\n</div>\n<div class=\"content\"><p>Well, i was having problems understanding the \"tagged\" and \"entitled\". Didn't knew it was without brackets....</p>\n<p>But i gotta say, it actually replaces the delicious firefox extension for its easy way of posting links on delicious.</p>\n<p>Well done, and seeing that it's only the begining i don't doubt that it will improve much more!</p>\n<p>Oh, and i had a WTF when i first saw that delicous icon on the status bar of Firefox. Didn't knew it was from your command ;)</p>\n<p>Thanks for making this.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088300\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=61fc20fbb1afbfc057df523f9dae79da&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Jeton</a>\n</div>\n<a href=\"#comment-221088300\" class=\"permalink\"><time datetime=\"2008-09-07T22:20:09\">2008-09-07T22:20:09</time></a>\n</div>\n<div class=\"content\"><p>One question:\nIs there a chance to remove the quotation marks (i meant the same on the above comment as well, not brackets) when saving a note about a bookmark?</p>\n<p>Everytime i bookmark a page via this command, it quotes the note.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088302\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088302\" class=\"permalink\"><time datetime=\"2008-09-07T22:41:20\">2008-09-07T22:41:20</time></a>\n</div>\n<div class=\"content\"><p>@Jeton: I guess the quoted thing is something I do by habit, to discriminate between what's my comment and what's summary straight from the page.  One way you can force it unquoted is with the \"noted\" modifier.  So, select some text on the page, and you can do something like:</p>\n<pre><code>sha noted this tagged foo bar baz\n</code></pre>\n<p>That should use the selected text without quotes.  Also, you can just type arbitrary stuff:</p>\n<pre><code>sha noted These are notes entitled A title goes here tagged foo bar baz\n</code></pre></div>\n</li>\n<li class=\"comment\" id=\"comment-221088304\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088304\" class=\"permalink\"><time datetime=\"2008-09-07T22:44:59\">2008-09-07T22:44:59</time></a>\n</div>\n<div class=\"content\"><p>@Jeton: Actually, I just made a check-in that flips it around.  There's now a \"quoted\" modifier to wrap the notes in quotes, leaving it unquoted otherwise.  I might be the weirdo here in my quote usage :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088306\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://jackmottram.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3a6aa11eff36e9d968119a6bb4cea05e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://jackmottram.com/\">Jack Mottram</a>\n</div>\n<a href=\"#comment-221088306\" class=\"permalink\"><time datetime=\"2008-09-09T10:04:12\">2008-09-09T10:04:12</time></a>\n</div>\n<div class=\"content\"><p>I'm a weirdo too, and now I can't quite work out how to get quotes around stuff I'm quoting from a page. I assumed this would work:</p>\n<p><code>sha this quoted</code></p>\n<p>but it just adds the word 'quoted' to the end of the quoted text, without quotes.</p>\n<p>Similarly:</p>\n<p><code>sha quoted this tagged test</code></p>\n<p>adds the words 'tagged' and 'test' to the end of the quoted text, though this time everything _is_ in quotes. (So it seems I can get quotes, but lose the ability to tag in the process.)</p>\n<p><code>sha this quoted text</code></p>\n<p>puts the word 'text' in quotes, but drops the selected text...</p>\n<p>So, I give up - what's the secret to getting quotes around quoted text?!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088310\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://jackmottram.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3a6aa11eff36e9d968119a6bb4cea05e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://jackmottram.com/\">Jack Mottram</a>\n</div>\n<a href=\"#comment-221088310\" class=\"permalink\"><time datetime=\"2008-09-09T10:11:59\">2008-09-09T10:11:59</time></a>\n</div>\n<div class=\"content\"><p>And of course I worked it out immediately after leaving that comment:</p>\n<p><code>sha tagged test monkey whatever quoted this</code></p>\n<p>works just fine (but feels the wrong way around to be tagging before quoting). And now I can't work out how to quote <i>and</i> note, so to speak. I tried adding</p>\n<p><code>noted These are my comments on what I just quoted</code></p>\n<p>but it doesn't work, it puts 'noted These are my &amp;c.' inside the quotes...</p>\n<p>(I should say, despite all this moaning, I really have been enjoying using the command - it's very slick compared to the official add-on.)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088312\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088312\" class=\"permalink\"><time datetime=\"2008-09-09T14:30:06\">2008-09-09T14:30:06</time></a>\n</div>\n<div class=\"content\"><p>Huh, weird - that's exactly how I use the command:</p>\n<pre><code>sha quoted this tagged foo bar baz\n</code></pre>\n<p>One major difference, though, is that I'm using a bleeding edge checkout of the Ubiquity extension.  I wonder if there's a bug in the parser for the last release.  :(  </p>\n<p>The definition of the modifiers is pretty simple, so there's not a whole lot of debugging I can do in the command itself.  Ugh.</p>\n<p>Oh, and also: RIght now it's either plain notes or quoted notes.  Presence of the quoted modifier clobbers plain notes.  But, how that I think about it I wonder if I should make those work together.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088314\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://FromTheGut.us\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3be27db3db50892929ef892ab04621a4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://FromTheGut.us\">Frank</a>\n</div>\n<a href=\"#comment-221088314\" class=\"permalink\"><time datetime=\"2008-09-09T17:40:39\">2008-09-09T17:40:39</time></a>\n</div>\n<div class=\"content\"><p>Hello, </p>\n<p>I was wondering if there was any chance you could put together a post annotating/explaining the changes/additions to your improved Delicious command. In particular, some explanations of the code dealing with the statusbar would be helpful for us beginners. Thanks.</p>\n<p>Frank</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088317\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tony</a>\n</div>\n<a href=\"#comment-221088317\" class=\"permalink\"><time datetime=\"2008-10-22T05:12:52\">2008-10-22T05:12:52</time></a>\n</div>\n<div class=\"content\"><p>Not a big fan of things adding stuff my status bar. :/ Ubiquity commands should just focus on Ubiquity, not XUL changes in Firefox.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088320\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088320\" class=\"permalink\"><time datetime=\"2008-10-29T16:04:28\">2008-10-29T16:04:28</time></a>\n</div>\n<div class=\"content\"><p>@Tony: Actually, commands are just one of the goals of Ubiquity.  Easier XUL hacking, ala Greasemonkey, is another goal, albeit under-explored so far.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088321\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://dy-verse.blogspot.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=40e05965a0c35ba44927a8e4b0546f9d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://dy-verse.blogspot.com/\">http://dy-verse.blogspot.com/</a>\n</div>\n<a href=\"#comment-221088321\" class=\"permalink\"><time datetime=\"2009-04-27T14:50:43\">2009-04-27T14:50:43</time></a>\n</div>\n<div class=\"content\"><p>Here is a share-to-delicious ubiquity command that automatically generates tags using YAHOO pipes. It also uses the text selected on the page as notes and the page title as the title of the article. </p>\n<p>http://gist.github.com/26425</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088327\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088327\" class=\"permalink\"><time datetime=\"2009-04-28T05:25:58\">2009-04-28T05:25:58</time></a>\n</div>\n<div class=\"content\"><p>Auto-generating tags via Yahoo Pipes is a neat trick, but it's unfortunately very much frowned upon by delicious.  Not that anything negative will happen to you, but it defeats the purpose of tagging altogether.</p>\n<p>Try searching for \"Lazy Sheep Bookmarklet\" and possibly read:</p>\n<p>http://www.mail-archive.com/ydn-delicious@yahoogroups.com/msg00853.html</p>\n<p>In particular - \"People add metadata so that 1) they can find things and 2) other people can find things. You are removing the step in which people add the tag metadata, thus making the system less valuable to themselves and others.\"</p>\n<p>The key word repeated there is \"people\"</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "After writing up my [first stab at a Delicious command for Ubiquity][first], I planned to continue revising it based on feedback and to work on exploring more of what Ubiquity enables.  I started looking into writing my own nouns for tag suggestions, as well as playing with page load and browser startup hooks.  And, I also started poking at a little bit of deeper extension development, which took up most of my time today.\r\n\r\nI've [updated my UbiquityCommands][ub] page and checked in my latest revision of [the Delicious command][cmd].  \r\n\r\nThe main new feature is a status bar item reporting bookmarks for the current page:\r\n\r\n<img style=\"padding: 0.25em\" src=\"http://decafbad.com/2008/ubiq-del-status.jpg\" />&nbsp;<img style=\"padding: 0.25em\" src=\"http://decafbad.com/2008/ubiq-del-tip.jpg\" />\r\n\r\nAs you can see above, the command now comes with a status bar panel powered by the [Delicious URL info JSON feed][urlinfo], providing bookmarking info on every page visited.  It shows a bookmark count, a tooltip with further information, and sends the user to the URL info page on Delicious when clicked.  It mostly works, but it could use some looking at.  This is my first time really cracking open the hood on Firefox and XUL, and so I'm feeling around in the dark.\r\n\r\nSpecifically, I'm using Ubiquity's page load hookâ€”but I'm also trying to augment that by tracking tab selection events, in order to keep the status bar info updated for the active tab.  But then, that leads me to trying to track new windows, to attach the tab selection event handler for every newly opened window.  Or I could just be barking up the wrong tree entirely.  At any rate, the code is probably brain-dead dumb, so I hope someone can clue me into a better way.\r\n\r\n[urlinfo]: http://delicious.com/help/feeds\r\n[cmd]: http://decafbad.com/hgwebdir.cgi/UbiquityCommands/file/tip/delicious.ubiq.js\r\n[ub]: http://decafbad.com/UbiquityCommands/\r\n[first]: http://decafbad.com/blog/2008/09/01/writing-a-delicious-command-for-ubiquity\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221088289\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://blog.mozilla.com/gen/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ef1b5a29836fa211b938d8ccbbd3e0a1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://blog.mozilla.com/gen/\">Gen Kanai</a>\n                </div>\n                <a href=\"#comment-221088289\" class=\"permalink\"><time datetime=\"2008-09-07T08:10:39\">2008-09-07T08:10:39</time></a>\n            </div>\n            <div class=\"content\"><p>Les, you may want to let R/RW know about your new command.</p>\n\n<p>http://www.readwriteweb.com/archives/the_ultimate_list_of_custom_ubiquity_verbs.php</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088292\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com/\">Abimanyu Raja</a>\n                </div>\n                <a href=\"#comment-221088292\" class=\"permalink\"><time datetime=\"2008-09-07T08:55:52\">2008-09-07T08:55:52</time></a>\n            </div>\n            <div class=\"content\"><p>I disagree... Your command doesn't fit on that list. It's way too good for that list. :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088296\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=61fc20fbb1afbfc057df523f9dae79da&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Jeton</a>\n                </div>\n                <a href=\"#comment-221088296\" class=\"permalink\"><time datetime=\"2008-09-07T21:56:43\">2008-09-07T21:56:43</time></a>\n            </div>\n            <div class=\"content\"><p>Well, i was having problems understanding the \"tagged\" and \"entitled\". Didn't knew it was without brackets....</p>\n\n<p>But i gotta say, it actually replaces the delicious firefox extension for its easy way of posting links on delicious.</p>\n\n<p>Well done, and seeing that it's only the begining i don't doubt that it will improve much more!</p>\n\n<p>Oh, and i had a WTF when i first saw that delicous icon on the status bar of Firefox. Didn't knew it was from your command ;)</p>\n\n<p>Thanks for making this.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088300\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=61fc20fbb1afbfc057df523f9dae79da&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Jeton</a>\n                </div>\n                <a href=\"#comment-221088300\" class=\"permalink\"><time datetime=\"2008-09-07T22:20:09\">2008-09-07T22:20:09</time></a>\n            </div>\n            <div class=\"content\"><p>One question:\nIs there a chance to remove the quotation marks (i meant the same on the above comment as well, not brackets) when saving a note about a bookmark?</p>\n\n<p>Everytime i bookmark a page via this command, it quotes the note.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088302\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088302\" class=\"permalink\"><time datetime=\"2008-09-07T22:41:20\">2008-09-07T22:41:20</time></a>\n            </div>\n            <div class=\"content\"><p>@Jeton: I guess the quoted thing is something I do by habit, to discriminate between what's my comment and what's summary straight from the page.  One way you can force it unquoted is with the \"noted\" modifier.  So, select some text on the page, and you can do something like:</p>\n\n<pre><code>sha noted this tagged foo bar baz\n</code></pre>\n\n<p>That should use the selected text without quotes.  Also, you can just type arbitrary stuff:</p>\n\n<pre><code>sha noted These are notes entitled A title goes here tagged foo bar baz\n</code></pre></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088304\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088304\" class=\"permalink\"><time datetime=\"2008-09-07T22:44:59\">2008-09-07T22:44:59</time></a>\n            </div>\n            <div class=\"content\"><p>@Jeton: Actually, I just made a check-in that flips it around.  There's now a \"quoted\" modifier to wrap the notes in quotes, leaving it unquoted otherwise.  I might be the weirdo here in my quote usage :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088306\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://jackmottram.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3a6aa11eff36e9d968119a6bb4cea05e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://jackmottram.com/\">Jack Mottram</a>\n                </div>\n                <a href=\"#comment-221088306\" class=\"permalink\"><time datetime=\"2008-09-09T10:04:12\">2008-09-09T10:04:12</time></a>\n            </div>\n            <div class=\"content\"><p>I'm a weirdo too, and now I can't quite work out how to get quotes around stuff I'm quoting from a page. I assumed this would work:</p>\n\n<p><code>sha this quoted</code></p>\n\n<p>but it just adds the word 'quoted' to the end of the quoted text, without quotes.</p>\n\n<p>Similarly:</p>\n\n<p><code>sha quoted this tagged test</code></p>\n\n<p>adds the words 'tagged' and 'test' to the end of the quoted text, though this time everything _is_ in quotes. (So it seems I can get quotes, but lose the ability to tag in the process.)</p>\n\n<p><code>sha this quoted text</code></p>\n\n<p>puts the word 'text' in quotes, but drops the selected text...</p>\n\n<p>So, I give up - what's the secret to getting quotes around quoted text?!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088310\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://jackmottram.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3a6aa11eff36e9d968119a6bb4cea05e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://jackmottram.com/\">Jack Mottram</a>\n                </div>\n                <a href=\"#comment-221088310\" class=\"permalink\"><time datetime=\"2008-09-09T10:11:59\">2008-09-09T10:11:59</time></a>\n            </div>\n            <div class=\"content\"><p>And of course I worked it out immediately after leaving that comment:</p>\n\n<p><code>sha tagged test monkey whatever quoted this</code></p>\n\n<p>works just fine (but feels the wrong way around to be tagging before quoting). And now I can't work out how to quote <i>and</i> note, so to speak. I tried adding</p>\n\n<p><code>noted These are my comments on what I just quoted</code></p>\n\n<p>but it doesn't work, it puts 'noted These are my &amp;c.' inside the quotes...</p>\n\n<p>(I should say, despite all this moaning, I really have been enjoying using the command - it's very slick compared to the official add-on.)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088312\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088312\" class=\"permalink\"><time datetime=\"2008-09-09T14:30:06\">2008-09-09T14:30:06</time></a>\n            </div>\n            <div class=\"content\"><p>Huh, weird - that's exactly how I use the command:</p>\n\n<pre><code>sha quoted this tagged foo bar baz\n</code></pre>\n\n<p>One major difference, though, is that I'm using a bleeding edge checkout of the Ubiquity extension.  I wonder if there's a bug in the parser for the last release.  :(  </p>\n\n<p>The definition of the modifiers is pretty simple, so there's not a whole lot of debugging I can do in the command itself.  Ugh.</p>\n\n<p>Oh, and also: RIght now it's either plain notes or quoted notes.  Presence of the quoted modifier clobbers plain notes.  But, how that I think about it I wonder if I should make those work together.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088314\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://FromTheGut.us\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3be27db3db50892929ef892ab04621a4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://FromTheGut.us\">Frank</a>\n                </div>\n                <a href=\"#comment-221088314\" class=\"permalink\"><time datetime=\"2008-09-09T17:40:39\">2008-09-09T17:40:39</time></a>\n            </div>\n            <div class=\"content\"><p>Hello, </p>\n\n<p>I was wondering if there was any chance you could put together a post annotating/explaining the changes/additions to your improved Delicious command. In particular, some explanations of the code dealing with the statusbar would be helpful for us beginners. Thanks.</p>\n\n<p>Frank</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088317\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Tony</a>\n                </div>\n                <a href=\"#comment-221088317\" class=\"permalink\"><time datetime=\"2008-10-22T05:12:52\">2008-10-22T05:12:52</time></a>\n            </div>\n            <div class=\"content\"><p>Not a big fan of things adding stuff my status bar. :/ Ubiquity commands should just focus on Ubiquity, not XUL changes in Firefox.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088320\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088320\" class=\"permalink\"><time datetime=\"2008-10-29T16:04:28\">2008-10-29T16:04:28</time></a>\n            </div>\n            <div class=\"content\"><p>@Tony: Actually, commands are just one of the goals of Ubiquity.  Easier XUL hacking, ala Greasemonkey, is another goal, albeit under-explored so far.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088321\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://dy-verse.blogspot.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=40e05965a0c35ba44927a8e4b0546f9d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://dy-verse.blogspot.com/\">http://dy-verse.blogspot.com/</a>\n                </div>\n                <a href=\"#comment-221088321\" class=\"permalink\"><time datetime=\"2009-04-27T14:50:43\">2009-04-27T14:50:43</time></a>\n            </div>\n            <div class=\"content\"><p>Here is a share-to-delicious ubiquity command that automatically generates tags using YAHOO pipes. It also uses the text selected on the page as notes and the page title as the title of the article. </p>\n\n<p>http://gist.github.com/26425</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088327\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088327\" class=\"permalink\"><time datetime=\"2009-04-28T05:25:58\">2009-04-28T05:25:58</time></a>\n            </div>\n            <div class=\"content\"><p>Auto-generating tags via Yahoo Pipes is a neat trick, but it's unfortunately very much frowned upon by delicious.  Not that anything negative will happen to you, but it defeats the purpose of tagging altogether.</p>\n\n<p>Try searching for \"Lazy Sheep Bookmarklet\" and possibly read:</p>\n\n<p>http://www.mail-archive.com/ydn-delicious@yahoogroups.com/msg00853.html</p>\n\n<p>In particular - \"People add metadata so that 1) they can find things and 2) other people can find things. You are removing the step in which people add the tag metadata, thus making the system less valuable to themselves and others.\"</p>\n\n<p>The key word repeated there is \"people\"</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/09/06/improving-my-delicious-command-for-ubiquity",
    "thumbnail": "http://decafbad.com/2008/ubiq-del-status.jpg"
  },
  {
    "comments_archived": true,
    "date": "2008-09-01T04:37:03.000Z",
    "layout": "post",
    "tags": [
      "delicious",
      "webdev",
      "javascript",
      "greasemonkey",
      "entries",
      "mozilla",
      "ubiquity"
    ],
    "title": "Writing a Delicious command for Ubiquity",
    "wordpress_id": 1310,
    "wordpress_slug": "writing-a-delicious-command-for-ubiquity",
    "wordpress_url": "http://decafbad.com/blog/?p=1310",
    "year": "2008",
    "month": "09",
    "day": "01",
    "isDir": false,
    "slug": "writing-a-delicious-command-for-ubiquity",
    "postName": "2008-09-01-writing-a-delicious-command-for-ubiquity",
    "html": "<p>In my <a href=\"http://decafbad.com/blog/2008/08/31/ubiquity-cracks-open-personal-mashup-tinkering\" title=\"Ubiquity cracks open personal mashup tinkering\">last post</a>, I got all fluffy about how cool <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> is but didn&#39;t share any code to prove the point.  As it happens, I have come up with at least one useful command that I&#39;m starting to use habitually in posting bookmarks to Delicious.  You can <a href=\"http://decafbad.com/UbiquityCommands/\">subscribe to my command</a> or <a href=\"http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js\">check out the full source</a>â€”this post will serve as a dissection of the thing.  Since this will be fairly lengthy, follow along after the jump.</p>\n<p>Oh, and it&#39;s been awhile since I posted something this in-depth around here, so feel free to let me know how this first draft works.  And, bug reports and patches are of course welcome.</p>\n<!--more-->\n\n<p>To begin, consider the following code starting off the command source code:</p>\n<pre lang=\"javascript\" line=\"1\">\n/**\n * share-on-delicious - an Ubiquity command for sharing bookmarks on\n * delicious.com\n *\n * l.m.orchard@pobox.com\n * http://decafbad.com/\n * Share and Enjoy!\n */\nvar uext = Application.extensions.get('ubiquity@labs.mozilla.com');\n\nvar cookie_mgr = Components.classes[\"@mozilla.org/cookiemanager;1\"]\n    .getService(Components.interfaces.nsICookieManager);\n</pre>\n\n<p>The first thing to note here is that a short header comment introduces the command.  This isn&#39;t required, but it&#39;s a good idea.  It&#39;s also something you can&#39;t really do with bookmarklets.  On the other hand, Greasemonkey user scripts expect metadata about the script to be provided here, but Ubiquity doesn&#39;t use this convention.</p>\n<p>Second, notice that the code accesses some chrome-level resources.  Again, this is something unavailable to bookmarklets and Greasemonkey user scripts.  Just take a look at the <a href=\"http://developer.mozilla.org/en/FUEL\">FUEL library documentation</a> to get a quick sense of what&#39;s available using that simplified API, not to mention what&#39;s available using the lower-level browser APIs.</p>\n<p>Now, check out this next chunk of code, which begins the construction of an Ubiquity command:</p>\n<pre lang=\"javascript\" line=\"13\">\nCmdUtils.CreateCommand({\n\n    name:        \n        'share-on-delicious',\n    icon:\n        'http://delicious.com/favicon.ico',\n    description: \n        'Share the current page as a bookmark on delicious.com',\n    help:        \n        'Select text on the page to use as notes, or enter your own ' + \n        'text after the command word.  You can also assign tags to the '+ \n        'bookmark with the \"tagged\" modifier, and alter the bookmark ' + \n        'default page title with the \"entitled\" modifier.  Note that ' + \n        'you must also already be logged in at delicious.com to use ' +\n        'this command.',\n\n    homepage:   \n        'http://decafbad.com',\n    author: { \n        name: 'Leslie Michael Orchard', \n        email: 'l.m.orchard@pobox.com' \n    },\n    license:\n        'MPL/GPL/LGPL',\n</pre>\n\n<p>Whereas Greasemonkey scripts support metadata in the header comment, the Ubiquity command script API works a little differently.  </p>\n<p>The <a href=\"http://hg.toolness.com/ubiquity-firefox/file/tip/ubiquity/chrome/content/cmdutils.js\"><code>CmdUtils</code> module</a> provided by Ubiquity offers a <code>CreateCommand</code> function, which expects an object as a parameter.  The object literal whose construction is begun in the code above serves as a self-contained package for the command, bearing metadata describing the command as well as containing all the code necessary to implement it.</p>\n<p>So, in the above code block, you can see the machine-readable description of the commandâ€”including a command name, display icon, home page URL, author information, and license.  The command name (<code>share-on-delicious</code>) will be used by the Ubiquity command parser, but the rest of the description will also be used in the list of commands available to the user, invoked by the <code>command-list</code> command, like so:</p>\n<img src=\"/2008/ubiq-share-on-delicious-list.jpg\" style=\"border: 1px solid #333; margin: 0.25em; padding: 0.25em\" />\n\n<p>Moving along, this next chunk of code introduces the first functional bits of the command:</p>\n<pre lang=\"javascript\" line=\"37\">\n    takes: { notes: noun_arb_text },\n    modifiers: { \n        tagged:  noun_arb_text,\n        entitled: noun_arb_text\n    },\n</pre>\n\n<p>Like smart keyword shortcut bookmarks, Ubiquity commands accept user-supplied input.  But, what&#39;s unique to Ubiquity is that it employs a parser whose goal is to support something approximating natural language.  At present, this results in commands that support a single primary argumentâ€”declared above with the <code>takes</code> propertyâ€”and any number of additional keyword modifiersâ€”declared above by the <code>modifiers</code> property.</p>\n<p>For the command under construction here, this establishes a pattern something like the following:</p>\n<pre><code>share-on-delicious {notes} [tagged {tags} entitled {title}]</code></pre>\n<p>Content for the <code>{notes}</code> argument can either be typed directly by hand, or it can be supplied by text highlighted on the page.  To use highlighted text, you can either issue the command alone, or use the word <code>this</code> for the <code>{notes}</code> argument before including further modifiers.</p>\n<p>The modifiers <code>tagged</code> and <code>entitled</code> are optional, and can be used in any order.  Each of these keywords signifies the start of a different argumentâ€”which unfortunately can collide with the literal data supplied for notes, which will hopefully be a rare occurrence.</p>\n<p>All of this adds up command invocations including the following:</p>\n<pre><code>share-on-delicious\nshare-on-delicious I really like this page tagged nifty amusing\nshare-on-delicious this entitled This bookmark has no tags\nsh this tagged osx software apple entitled This is good OS X software</code></pre>\n<p>That last example is importantâ€”since I have no other commands starting with &quot;<code>sh</code>&quot;, I can abbreviate the full command.  Ubiquity only requires enough of a command name to disambiguate it within your collection of commands.</p>\n<p>Another thing to note is the use of the constant value <code>noun_arb_text</code>, which declares that these arguments should expect any arbitrary text as input.  </p>\n<p>This facility is not exploited for the present command, but Ubiquity defines <a href=\"http://hg.toolness.com/ubiquity-firefox/file/tip/ubiquity/chrome/content/nlparser/en/nountypes.js\">noun types</a>.  These include concepts such as plain text, dates, address book contacts, browser tabs, bookmark tags, and more.  You can define your own noun types, as well as implement suggestion schemes that help guide the user toward constructing useful input values in the command interface.  You can <a href=\"https://wiki.mozilla.org/Labs/Ubiquity/Ubiquity_0.1_Author_Tutorial#Introduction_to_Noun_Types\">read more about this</a> in the official author tutorial.</p>\n<p>Next up is a quick bit of command-specific configuration:</p>\n<pre lang=\"javascript\" line=\"42\">\n    /**\n     * Command configuration settings.\n     */\n    _config: {\n        // Base URL for the delicious v1 API\n        api_base:      'https://api.del.icio.us',\n\n        // Domain and name of the delicious login session cookie.\n        cookie_domain: '.delicious.com',\n        cookie_name:   '_user'\n    },\n</pre>\n\n<p>Since this command will be posting to Delicious via the V1 API, it&#39;s handy to declare the base URL for the API in an easily changed spot.  That way, you could change this value later on to point the command at another implementation of the API.</p>\n<p>Additionally, this command will employ a little-known authentication trick supported by the Delicious API that accepts the user&#39;s login cookie set by the Delicious websiteâ€”this &quot;cookie god&quot; auth is used by the official Delicious addon for Firefox.  It&#39;s handy for piggybacking on the website login and removing the need to ask the user for their username and password again and possibly storing it in an insecure manner.</p>\n<p>In fact, this next chunk of code defines a utility method to rummage through the cookie jar:</p>\n<pre lang=\"javascript\" line=\"53\">\n    /**\n     * Dig up the Delicious login session cookie.\n     */\n    _getUserCookie: function() {\n        var iter = cookie_mgr.enumerator;\n        while (iter.hasMoreElements()) {\n            var cookie = iter.getNext();\n            if( cookie instanceof Components.interfaces.nsICookie && \n                cookie.host.indexOf(this._config.cookie_domain) != -1 && \n                cookie.name == this._config.cookie_name) {\n                return decodeURIComponent(cookie.value);\n            }\n        }\n    },\n</pre>\n\n<p>The method defined above, <code>._getUserCookie()</code>, uses the browser&#39;s cookie manager and the values defined in the previous configuration section to find the login session cookie set for Delicious.  Take note that this is far beyond the allowed capabilities of bookmarklets and Greasemoney user scriptsâ€”this is digging straight into the browser itself, skipping past the usual content-space security restrictions.  </p>\n<p>In other words: In Ubiquity, <em>the gun is loaded</em> and you should be careful.  </p>\n<p>Moving along, consider this next utility method:</p>\n<pre lang=\"javascript\" line=\"67\">\n    /**\n     * Given input data and modifiers, attempt to assemble data necessary to\n     * post a bookmark.\n     */\n    _extractBookmarkData: function(input_obj, mods) {\n        return {\n            _user:\n                this._getUserCookie(),\n            url:\n                context.focusedWindow.location,\n            description:\n                mods.entitled.text || context.focusedWindow.document.title,\n            extended: \n                input_obj.text,\n            tags:\n                mods.tagged.text\n        };\n    },\n</pre>\n\n<p>Named <code>._extractBookmarkData()</code>, this utility method accepts the results of Ubiquity&#39;s parser interpreting the primary argument and modifier arguments supplied by the user.  Using these data structures, it attempts to build a structure representing the fields of a Delicious bookmark.</p>\n<p>The <code>_user</code> field is used for authentication via the site login cookie.  The <code>url</code> is set from the location bar of the current page.  The <code>description</code>, or title, field of the bookmark is taken from either the <code>entitled</code> modifier or the title of the current page.  The <code>tags</code>, if any, come from the <code>tagged</code> modifier.  And, finally, the <code>extended</code> notes for the bookmark are taken from the primary input argument of the command.</p>\n<p>As you&#39;ll see shortly, this utility method will be used in both the preview and the execution of the command.</p>\n<p>Next, there&#39;s one more utility method to cover:</p>\n<pre lang=\"javascript\" line=\"85\">\n    /**\n     * Given an object, build a URL query string\n     */\n    _buildQueryString: function(data) {\n        var qs = [];\n        for (k in data) if (data[k]) \n            qs.push( encodeURIComponent(k) + '=' + \n                encodeURIComponent(data[k]) );\n        return qs.join('&');\n    },\n</pre>\n\n<p>In anticipation of using the Delicious V1 API, the <code>._buildQueryString()</code> method accepts an object and constructs a URL query string from the encoded properties of the object.  This will be paired with the <code>._extractBookmarkData()</code> method to supply data for API calls.</p>\n<p>Moving along, it&#39;s time to start digging into the meat of this Ubiquity command:</p>\n<pre lang=\"javascript\" line=\"95\">\n    /**\n     * Present a preview of the bookmark under construction during the course\n     * of composing the command.\n     */\n    preview: function(pblock, input_obj, mods) {\n\n        var bm          = this._extractBookmarkData(input_obj, mods);\n        var user_cookie = this._getUserCookie();\n        var user_name   = (user_cookie) ? user_cookie.split(' ')[0] : '';\n\n        var ns = { user_name: user_name, bm: bm };\n        var tmpl;\n</pre>\n\n<p>With this code, the implementation of command method <code>.preview()</code> has begun.  This method is used by Ubiquity to generate a live preview of the command.  Called with a DOM node (<code>pblock</code>) and partially completed command input (<code>input_obj</code> and <code>mods</code>), this method is expected to build a representation of the command&#39;s results in the DOM node.  As the user types, this method will be called over and over again, ideally offering feedback as the user composes a command.</p>\n<p>Continuing on, consider this next chunk of code checking the validity of command input:</p>\n<pre lang=\"javascript\" line=\"107\">\n        if (!user_name) {\n\n            // If there's no user name, there's no login, so this command won't work. \n            tmpl = [ \n                '<p style=\"color: #d44\">No active user found - log in at ', \n                '<img src=\"http://delicious.com/favicon.ico\"> ',\n                '<b><a style=\"color: #3774D0\" href=\"http://delicious.com\">delicious.com</a></b> ', \n                'to use this command.</p>'\n            ].join('');\n\n        } else if (!bm.description) {\n\n            // If there's no title, then this is an error too.\n            tmpl = [ \n                '<p style=\"color: #d44\">A title is required for bookmarks on ', \n                '<img src=\"http://delicious.com/favicon.ico\"> ',\n                '<b><a style=\"color: #3774D0\" href=\"http://delicious.com\">delicious.com</a></b> ', \n                '</p>'\n            ].join('');\n</pre>\n\n<p>This chunk of code first checks for a user name, which can be extracted from a valid Delicious login cookie, if one was found.  If not found, the command will failâ€”so the preview built here will instruct the user to login at Delicious before going further.</p>\n<p>The second precondition for using the command is that the bookmark has been given a title.  By default, this is the title of the current pageâ€”but, some pages don&#39;t offer titles.  So, an error needs to be flagged if the user hasn&#39;t manually supplied a title in this case.</p>\n<p>Finally, notice in both of these error cases, a string of HTML is composed in the variable <code>tmpl</code>.  This will be used at the end of the method to populate the DOM node passed in as <code>pblock</code>.</p>\n<p>Now, assuming that all the command&#39;s prerequisites have been met, it&#39;s time to try constructing a proper preview for the results of this command: </p>\n<pre lang=\"javascript\" line=\"126\">\n        } else {\n\n            // Attempt to construct a vaguely delicious-esque preview of a bookmark.\n            tmpl = [ \n                '<style type=\"text/css\">',\n                    '.preview a { color: #3774D0 }',\n                    '.del-bookmark { font: 12px arial; color: #ddd; background: #eee; line-height: 1.25em }',\n                    '.del-bookmark a.title { color: #1259C7 }',\n                    '.del-bookmark .full-url { color: #396C9B; font-size: 12px; display: block; padding: 0.25em 0 }',\n                    '.del-bookmark .notes { color: #4D4D4D }',\n                    '.del-bookmark .tags { color: #787878; padding-top: 0.25em; text-align: right }',\n                '</style>',\n                '<div class=\"preview\">',\n                    '<p>Share a bookmark at <img src=\"http://delicious.com/favicon.ico\"> ',\n                        '<b><a href=\"http://delicious.com/${user_name}\">delicious.com/${user_name}</a></b>:</p>',\n                    '<div class=\"del-bookmark\">',\n                        '<div style=\"padding: 1em;\">',\n                        '<a class=\"title\" href=\"${bm.url}\">${bm.description}</a>',\n                        '<a class=\"full-url\" href=\"${bm.url}\">${bm.url}</a>',\n                        bm.extended ? \n                            '<div class=\"notes\">${bm.extended}</div>' : '',\n                        bm.tags ?\n                            '<div class=\"tags\"><span>tags:</span> ${bm.tags}</div>' : '',\n                    '</div>',\n                '</div>'\n            ].join(\"\\n\");\n\n        }\n\n        pblock.innerHTML = CmdUtils.renderTemplate(tmpl, ns);\n    },\n</pre>\n\n<p>Building on the notion that previews are built in a DOM node, the code above uses both CSS and HTML to assemble a quick-and-dirty facsimile of a Delicious bookmarkâ€”which will be rendered like this:</p>\n<img src=\"/2008/ubiq-share-on-delicious-preview.jpg\" style=\"border: 1px solid #333; margin: 0.25em; padding: 0.25em\" />\n\n<p>Also note that Ubiquity provides a template engine for use in generating contentâ€”namely the <a href=\"http://code.google.com/p/trimpath/wiki/JavaScriptTemplates\">JavaScript Templates</a> engine from the <a href=\"http://code.google.com/p/trimpath/wiki/TrimPath\">TrimPath</a> project.  This engine may eventually be replaced with another, but the notion is that Ubiquity will provide tools to more easily generate previews and more.</p>\n<p>The conclusion of the <code>.preview()</code> method uses the template engine with a call to <code>CmdUtils.renderTemplate()</code> to inject content into the preview element by way of the <code>.innerHTML</code> property.</p>\n<p>Now that the preview is out of the way, it&#39;s time to get down to implementing the execution of the command:</p>\n<pre lang=\"javascript\" line=\"157\">    \n    /**\n     * Attempt to use the delicious v1 API to post a bookmark using the \n     * command input\n     */\n    execute: function(input_obj, mods) {\n        var bm          = this._extractBookmarkData(input_obj, mods);\n        var user_cookie = this._getUserCookie();\n        var user_name   = (user_cookie) ? user_cookie.split(' ')[0] : '';\n\n        if (!user_name) {\n            // If there's no user name, there's no login, so this command won't work. \n            displayMessage('No active user found - log in at delicious.com ' +\n                'to use this command.');\n            return false;\n        }\n\n        if (!bm.description) {\n            // If there's no title, somehow, then this is an error too.\n            displayMessage(\"A title is required for bookmarks at delicious.com\");\n            return false;\n        }\n</pre>\n\n<p>Mirroring the <code>.preview()</code> method, the <code>.execute()</code> method first checks for validity of the arguments given by the user.  A missing user name or title result in a notification that the command has failed.</p>\n<p>But, if the arguments are all valid, it&#39;s time to actually issue a request to the Delicious V1 API:</p>\n<pre lang=\"javascript\" line=\"178\">\n        var path = '/v1/posts/add';\n        var url  = this._config.api_base + path;\n\n        var req = Components.classes[\"@mozilla.org/xmlextras/xmlhttprequest;1\"].\n            createInstance();\n\n        req.open('POST', url, true);\n\n        req.onload = function(ev) { \n            displayMessage('Bookmark \"' + bm.description + '\" ' + \n                'shared at delicious.com/' + user_name);\n        }\n\n        req.onerror = function(ev) { \n            displayMessage('ERROR: Bookmark \"' + bm.description + '\" ' + \n                ' NOT shared on delicious.com/' + user_name);\n        }\n</pre>\n\n<p>Using the base URL for the Delicious API declared earlier in the configuration section, the <code>.execute()</code> method constructs an API URL for the <code>/v1/posts/add</code> method.  Then, it creates an instance of <code>XMLHttpRequest</code> from the browser to be used in sending the API request.  Event handlers are registered with the object to present notifications to the user indicating whether or not the API request was successful.</p>\n<p>At long last, it&#39;s time to wrap up this method and make the API request:</p>\n<pre lang=\"javascript\" line=\"195\">\n        req.setRequestHeader('Authorization', 'Basic Y29va2llOmNvb2tpZQ=='); // btoa('cookie:cookie')\n\n        var mediator = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\n            getService(Components.interfaces.nsIWindowMediator);\n        var win = mediator.getMostRecentWindow(null);\n        var user_agent = win.navigator.userAgent + \";Ubiquity-share-on-delicious\";\n\n        req.setRequestHeader(\"User-Agent\", user_agent);      \n\n        req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        req.send(this._buildQueryString(bm));\n    },\n\n    EOF:null // I hate trailing commas\n});\n</pre>\n\n<p>The login cookie authentication supported by the Delicious V1 API is triggered by supplying a user name / password pair of <code>cookie</code>, which is done by setting the <code>Authorization</code> request header.  The login cookie is then expected to be passed in as the POST variable <code>_user</code>, which is done in the <code>._extractBookmarkData()</code> utility method.</p>\n<p>Another bit here that shows more access of browser resources is the construction of a unique User-Agent header for this API call based on the browser&#39;s own User-Agent string, something that&#39;s suggested in the guidelines for using the Delicious API.</p>\n<p>Finally, the <code>.execute()</code> methodâ€”and the command itselfâ€”is wrapped up with by sending off the bookmark data encoded as POST form variables with the <code>._buildQueryString()</code> utility method.</p>\n<p>And, that&#39;s itâ€”a command-driven Delicious browser extension in a little over 200 lines of code.  There&#39;s still more to be done to really make this thing full-featured, but I think this shows off the basic features of Ubiquity.  I&#39;m hoping to dig in deeper and explore further, taking a look at running Greasemonkey-style code at <a href=\"https://wiki.mozilla.org/Labs/Ubiquity/Ubiquity_0.1_Author_Tutorial#Running_on_page_load_and_startup\">browser startup and page load</a>, as well as playing with some more browser chrome features.  </p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221085986\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://jclark.org/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d0a9ab4b71ce193e98b7284ca257e327&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://jclark.org/weblog/\">Jason Clark</a>\n</div>\n<a href=\"#comment-221085986\" class=\"permalink\"><time datetime=\"2008-09-01T14:47:35\">2008-09-01T14:47:35</time></a>\n</div>\n<div class=\"content\"><p>First off-  fantastic post.  Great to see a lengthy post here again, although I'm one to talk.  This is an excellent introduction to Ubiquity command development, and tres useful to boot.</p>\n<p>I'm wondering why you chose to construct and post the XMLHttpRequest manually instead of using jQuery, which is included with Ubiquity.  I don't know that there's any benefit other than some simplicity, but I took a crack at converting your code to use jQuery, which works nicely.  In the 'execute' function, replace everything after \"var url  = this._config.api_base + path;\" with this (hope code blocks work in comments):</p>\n<p><code>\nvar win = context.focusedWindow;\nvar user_agent = win.navigator.userAgent + \";Ubiquity-share-on-delicious\";</code></p>\n<pre><code>    jQuery.ajax({\ntype: \"POST\",\nurl: url,\ndata: this._buildQueryString(bm),\nusername: \"cookie\",\npassword: \"cookie\",\nbeforeSend: function( req ) {\nreq.setRequestHeader(\"User-Agent\", user_agent); \n},\nerror: function() {\ndisplayMessage('ERROR: Bookmark \"' + bm.description + '\" ' + \n' NOT shared on delicious.com/' + user_name);\n},\nsuccess: function() {\ndisplayMessage('Bookmark \"' + bm.description + '\" ' + \n'shared at delicious.com/' + user_name);\n},\n});\n</code></pre>\n<p></p>\n<p>Also, with both versions of the code, I'm seeing some unexpected behavior around authentication.  Assume I'm logged in to delicious, with \"stay logged in\" checked, and I restart my browser.  Trying to post with the command fails with a 401 unauthorized, even though I can see the cookie was sent (via Live HTTP Headers extension).  Going to delicious.com shows me logged in, and once I've viewed the site, the command works.  Except that now I can't reproduce; but I know it happened because I've got the headers.  At any rate, it is working nicely, but the previous failure is bugging me... feel like I'm overlooking something.  </p>\n<p>Thanks again for an awesome post.  Hope to see more of the same.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085988\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e799a79441c7543be48562403411cd13&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Ryan Scott Scheel</a>\n</div>\n<a href=\"#comment-221085988\" class=\"permalink\"><time datetime=\"2008-09-01T15:07:01\">2008-09-01T15:07:01</time></a>\n</div>\n<div class=\"content\"><p>You should be helping with the documentation, if you aren't already.  Very nice job with this article;</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085991\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://azarask.in\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e4307f205d017ba76647806951e14bb0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://azarask.in\">Aza Raskin</a>\n</div>\n<a href=\"#comment-221085991\" class=\"permalink\"><time datetime=\"2008-09-02T01:44:13\">2008-09-02T01:44:13</time></a>\n</div>\n<div class=\"content\"><p>Hi Leslie,</p>\n<p>This is a beautiful tutorial on writing a Ubiquity command. We'd love your help in making Ubiquity's documentation better (especially dev facing). You should totally link to this from the Ubiquity Wiki -- or even add the content in someway.</p>\n<p>Anyway, just wanted to say thanks.</p>\n<p>-- Aza</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085993\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.slackorama.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15b474c86cd73c2d12c1d77af11c1d8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.slackorama.com\">seth</a>\n</div>\n<a href=\"#comment-221085993\" class=\"permalink\"><time datetime=\"2008-09-08T17:30:16\">2008-09-08T17:30:16</time></a>\n</div>\n<div class=\"content\"><p>Am I doing something wrong?  </p>\n<p>When I enter in \"sh this tagged tag1 tag2 entitled This is a title\" everything after the tagged is added as a tag. It's not seeing the entitled part.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085994\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://spyced.blogspot.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=849810634810c960e5e7c27fa54a0f5b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://spyced.blogspot.com/\">http://spyced.blogspot.com/</a>\n</div>\n<a href=\"#comment-221085994\" class=\"permalink\"><time datetime=\"2008-09-15T19:12:58\">2008-09-15T19:12:58</time></a>\n</div>\n<div class=\"content\"><p>Did something break?  I'm getting a 404 accessing http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085995\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221085995\" class=\"permalink\"><time datetime=\"2008-09-15T23:07:42\">2008-09-15T23:07:42</time></a>\n</div>\n<div class=\"content\"><p>Yeah, looks like I had a small snafu with switching back from Lighttpd to Apache.  Left out a rewrite rule - doh!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085996\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tony</a>\n</div>\n<a href=\"#comment-221085996\" class=\"permalink\"><time datetime=\"2008-10-22T04:56:03\">2008-10-22T04:56:03</time></a>\n</div>\n<div class=\"content\"><p>Great article. This is replacing my delicious bookmarklet. Thanks!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085997\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=31461076fcbce091ff822fc9ac31315d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">dgtlchlk</a>\n</div>\n<a href=\"#comment-221085997\" class=\"permalink\"><time datetime=\"2009-04-14T01:06:57\">2009-04-14T01:06:57</time></a>\n</div>\n<div class=\"content\"><p>Great article and command.\nWish it worked correctly with the latest 0.1.8 release though. No matter what text you put in it adds everything as the notes. The tagged and entitled modifiers don't work.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085999\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.nolanhergert.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=957e24509baf770ba57ad306e20f201c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.nolanhergert.com\">Nolan</a>\n</div>\n<a href=\"#comment-221085999\" class=\"permalink\"><time datetime=\"2009-04-16T03:10:07\">2009-04-16T03:10:07</time></a>\n</div>\n<div class=\"content\"><p>I second that comment. Delicious is actually saying the link given was \"chrome://browser/content/browser.xul\" and marking it as harmful inside delicious!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086002\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3d056a5b07c384647fe0806b0dfc429e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Justin</a>\n</div>\n<a href=\"#comment-221086002\" class=\"permalink\"><time datetime=\"2009-07-06T12:39:39\">2009-07-06T12:39:39</time></a>\n</div>\n<div class=\"content\"><p>Hi Leslie,</p>\n<p>Thanks for the delicious ubiquity command. Unfortunately, as one of the commenters above mentions, the tagged modifier doesn't seem to work. I'm using Ubiquity 0.5 pre and typing the phrase:</p>\n<p>share tagged foo</p>\n<p>Adds the bookmark to Delicious with the note text \"tagged foo\"</p>\n<p>Cheers, Justin</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086004\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://ericscalf.com/stream\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0775f9beff626496b86d7cb602e5f46f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://ericscalf.com/stream\">Eric</a>\n</div>\n<a href=\"#comment-221086004\" class=\"permalink\"><time datetime=\"2009-07-20T22:43:17\">2009-07-20T22:43:17</time></a>\n</div>\n<div class=\"content\"><p>Echoing others.. I'm using the latest ubiquity (err, next to latest.. 0.1.8?), and doing \"share-on-delicious this is a note tagged testing\" saves the link with notes \"this is a note tagged testing\" and no tags. :(  Then again, the other delicious command I've found (by someone else) is having the same issue.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "In my [last post][last], I got all fluffy about how cool [Ubiquity][] is but didn't share any code to prove the point.  As it happens, I have come up with at least one useful command that I'm starting to use habitually in posting bookmarks to Delicious.  You can [subscribe to my command][subs] or [check out the full source][source]â€”this post will serve as a dissection of the thing.  Since this will be fairly lengthy, follow along after the jump.\r\n\r\nOh, and it's been awhile since I posted something this in-depth around here, so feel free to let me know how this first draft works.  And, bug reports and patches are of course welcome.\r\n\r\n[ubiquity]: http://labs.mozilla.com/2008/08/introducing-ubiquity/\r\n[last]: http://decafbad.com/blog/2008/08/31/ubiquity-cracks-open-personal-mashup-tinkering \"Ubiquity cracks open personal mashup tinkering\"\r\n[subs]: http://decafbad.com/UbiquityCommands/\r\n[source]: http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js\r\n\r\n<!--more-->\r\n\r\nTo begin, consider the following code starting off the command source code:\r\n\r\n<pre lang=\"javascript\" line=\"1\">\r\n/**\r\n * share-on-delicious - an Ubiquity command for sharing bookmarks on\r\n * delicious.com\r\n *\r\n * l.m.orchard@pobox.com\r\n * http://decafbad.com/\r\n * Share and Enjoy!\r\n */\r\nvar uext = Application.extensions.get('ubiquity@labs.mozilla.com');\r\n\r\nvar cookie_mgr = Components.classes[\"@mozilla.org/cookiemanager;1\"]\r\n    .getService(Components.interfaces.nsICookieManager);\r\n</pre>\r\n\r\nThe first thing to note here is that a short header comment introduces the command.  This isn't required, but it's a good idea.  It's also something you can't really do with bookmarklets.  On the other hand, Greasemonkey user scripts expect metadata about the script to be provided here, but Ubiquity doesn't use this convention.\r\n\r\nSecond, notice that the code accesses some chrome-level resources.  Again, this is something unavailable to bookmarklets and Greasemonkey user scripts.  Just take a look at the [FUEL library documentation][fuel] to get a quick sense of what's available using that simplified API, not to mention what's available using the lower-level browser APIs.\r\n\r\n[fuel]: http://developer.mozilla.org/en/FUEL\r\n\r\nNow, check out this next chunk of code, which begins the construction of an Ubiquity command:\r\n\r\n<pre lang=\"javascript\" line=\"13\">\r\nCmdUtils.CreateCommand({\r\n    \r\n    name:        \r\n        'share-on-delicious',\r\n    icon:\r\n        'http://delicious.com/favicon.ico',\r\n    description: \r\n        'Share the current page as a bookmark on delicious.com',\r\n    help:        \r\n        'Select text on the page to use as notes, or enter your own ' + \r\n        'text after the command word.  You can also assign tags to the '+ \r\n        'bookmark with the \"tagged\" modifier, and alter the bookmark ' + \r\n        'default page title with the \"entitled\" modifier.  Note that ' + \r\n        'you must also already be logged in at delicious.com to use ' +\r\n        'this command.',\r\n\r\n    homepage:   \r\n        'http://decafbad.com',\r\n    author: { \r\n        name: 'Leslie Michael Orchard', \r\n        email: 'l.m.orchard@pobox.com' \r\n    },\r\n    license:\r\n        'MPL/GPL/LGPL',\r\n</pre>\r\n\r\nWhereas Greasemonkey scripts support metadata in the header comment, the Ubiquity command script API works a little differently.  \r\n\r\nThe [`CmdUtils` module][cmdutils] provided by Ubiquity offers a `CreateCommand` function, which expects an object as a parameter.  The object literal whose construction is begun in the code above serves as a self-contained package for the command, bearing metadata describing the command as well as containing all the code necessary to implement it.\r\n\r\nSo, in the above code block, you can see the machine-readable description of the commandâ€”including a command name, display icon, home page URL, author information, and license.  The command name (`share-on-delicious`) will be used by the Ubiquity command parser, but the rest of the description will also be used in the list of commands available to the user, invoked by the `command-list` command, like so:\r\n\r\n<img src=\"/2008/ubiq-share-on-delicious-list.jpg\" style=\"border: 1px solid #333; margin: 0.25em; padding: 0.25em\" />\r\n\r\n[cmdutils]: http://hg.toolness.com/ubiquity-firefox/file/tip/ubiquity/chrome/content/cmdutils.js\r\n\r\nMoving along, this next chunk of code introduces the first functional bits of the command:\r\n\r\n<pre lang=\"javascript\" line=\"37\">\r\n    takes: { notes: noun_arb_text },\r\n    modifiers: { \r\n        tagged:  noun_arb_text,\r\n        entitled: noun_arb_text\r\n    },\r\n</pre>\r\n\r\nLike smart keyword shortcut bookmarks, Ubiquity commands accept user-supplied input.  But, what's unique to Ubiquity is that it employs a parser whose goal is to support something approximating natural language.  At present, this results in commands that support a single primary argumentâ€”declared above with the `takes` propertyâ€”and any number of additional keyword modifiersâ€”declared above by the `modifiers` property.\r\n\r\nFor the command under construction here, this establishes a pattern something like the following:\r\n\r\n    share-on-delicious {notes} [tagged {tags} entitled {title}]\r\n\r\nContent for the `{notes}` argument can either be typed directly by hand, or it can be supplied by text highlighted on the page.  To use highlighted text, you can either issue the command alone, or use the word `this` for the `{notes}` argument before including further modifiers.\r\n\r\nThe modifiers `tagged` and `entitled` are optional, and can be used in any order.  Each of these keywords signifies the start of a different argumentâ€”which unfortunately can collide with the literal data supplied for notes, which will hopefully be a rare occurrence.\r\n\r\nAll of this adds up command invocations including the following:\r\n\r\n    share-on-delicious\r\n    share-on-delicious I really like this page tagged nifty amusing\r\n    share-on-delicious this entitled This bookmark has no tags\r\n    sh this tagged osx software apple entitled This is good OS X software\r\n\r\nThat last example is importantâ€”since I have no other commands starting with \"`sh`\", I can abbreviate the full command.  Ubiquity only requires enough of a command name to disambiguate it within your collection of commands.\r\n\r\nAnother thing to note is the use of the constant value `noun_arb_text`, which declares that these arguments should expect any arbitrary text as input.  \r\n\r\nThis facility is not exploited for the present command, but Ubiquity defines [noun types][noun].  These include concepts such as plain text, dates, address book contacts, browser tabs, bookmark tags, and more.  You can define your own noun types, as well as implement suggestion schemes that help guide the user toward constructing useful input values in the command interface.  You can [read more about this][noun_tut] in the official author tutorial.\r\n\r\n[noun]: http://hg.toolness.com/ubiquity-firefox/file/tip/ubiquity/chrome/content/nlparser/en/nountypes.js\r\n[noun_tut]: https://wiki.mozilla.org/Labs/Ubiquity/Ubiquity_0.1_Author_Tutorial#Introduction_to_Noun_Types\r\n\r\nNext up is a quick bit of command-specific configuration:\r\n\r\n<pre lang=\"javascript\" line=\"42\">\r\n    /**\r\n     * Command configuration settings.\r\n     */\r\n    _config: {\r\n        // Base URL for the delicious v1 API\r\n        api_base:      'https://api.del.icio.us',\r\n\r\n        // Domain and name of the delicious login session cookie.\r\n        cookie_domain: '.delicious.com',\r\n        cookie_name:   '_user'\r\n    },\r\n</pre>\r\n\r\nSince this command will be posting to Delicious via the V1 API, it's handy to declare the base URL for the API in an easily changed spot.  That way, you could change this value later on to point the command at another implementation of the API.\r\n\r\nAdditionally, this command will employ a little-known authentication trick supported by the Delicious API that accepts the user's login cookie set by the Delicious websiteâ€”this \"cookie god\" auth is used by the official Delicious addon for Firefox.  It's handy for piggybacking on the website login and removing the need to ask the user for their username and password again and possibly storing it in an insecure manner.\r\n\r\nIn fact, this next chunk of code defines a utility method to rummage through the cookie jar:\r\n\r\n<pre lang=\"javascript\" line=\"53\">\r\n    /**\r\n     * Dig up the Delicious login session cookie.\r\n     */\r\n    _getUserCookie: function() {\r\n        var iter = cookie_mgr.enumerator;\r\n        while (iter.hasMoreElements()) {\r\n            var cookie = iter.getNext();\r\n            if( cookie instanceof Components.interfaces.nsICookie && \r\n                cookie.host.indexOf(this._config.cookie_domain) != -1 && \r\n                cookie.name == this._config.cookie_name) {\r\n                return decodeURIComponent(cookie.value);\r\n            }\r\n        }\r\n    },\r\n</pre>\r\n\r\nThe method defined above, `._getUserCookie()`, uses the browser's cookie manager and the values defined in the previous configuration section to find the login session cookie set for Delicious.  Take note that this is far beyond the allowed capabilities of bookmarklets and Greasemoney user scriptsâ€”this is digging straight into the browser itself, skipping past the usual content-space security restrictions.  \r\n\r\nIn other words: In Ubiquity, *the gun is loaded* and you should be careful.  \r\n\r\nMoving along, consider this next utility method:\r\n\r\n<pre lang=\"javascript\" line=\"67\">\r\n    /**\r\n     * Given input data and modifiers, attempt to assemble data necessary to\r\n     * post a bookmark.\r\n     */\r\n    _extractBookmarkData: function(input_obj, mods) {\r\n        return {\r\n            _user:\r\n                this._getUserCookie(),\r\n            url:\r\n                context.focusedWindow.location,\r\n            description:\r\n                mods.entitled.text || context.focusedWindow.document.title,\r\n            extended: \r\n                input_obj.text,\r\n            tags:\r\n                mods.tagged.text\r\n        };\r\n    },\r\n</pre>\r\n\r\nNamed `._extractBookmarkData()`, this utility method accepts the results of Ubiquity's parser interpreting the primary argument and modifier arguments supplied by the user.  Using these data structures, it attempts to build a structure representing the fields of a Delicious bookmark.\r\n\r\nThe `_user` field is used for authentication via the site login cookie.  The `url` is set from the location bar of the current page.  The `description`, or title, field of the bookmark is taken from either the `entitled` modifier or the title of the current page.  The `tags`, if any, come from the `tagged` modifier.  And, finally, the `extended` notes for the bookmark are taken from the primary input argument of the command.\r\n\r\nAs you'll see shortly, this utility method will be used in both the preview and the execution of the command.\r\n\r\nNext, there's one more utility method to cover:\r\n\r\n<pre lang=\"javascript\" line=\"85\">\r\n    /**\r\n     * Given an object, build a URL query string\r\n     */\r\n    _buildQueryString: function(data) {\r\n        var qs = [];\r\n        for (k in data) if (data[k]) \r\n            qs.push( encodeURIComponent(k) + '=' + \r\n                encodeURIComponent(data[k]) );\r\n        return qs.join('&');\r\n    },\r\n</pre>\r\n\r\nIn anticipation of using the Delicious V1 API, the `._buildQueryString()` method accepts an object and constructs a URL query string from the encoded properties of the object.  This will be paired with the `._extractBookmarkData()` method to supply data for API calls.\r\n\r\nMoving along, it's time to start digging into the meat of this Ubiquity command:\r\n\r\n<pre lang=\"javascript\" line=\"95\">\r\n    /**\r\n     * Present a preview of the bookmark under construction during the course\r\n     * of composing the command.\r\n     */\r\n    preview: function(pblock, input_obj, mods) {\r\n\r\n        var bm          = this._extractBookmarkData(input_obj, mods);\r\n        var user_cookie = this._getUserCookie();\r\n        var user_name   = (user_cookie) ? user_cookie.split(' ')[0] : '';\r\n\r\n        var ns = { user_name: user_name, bm: bm };\r\n        var tmpl;\r\n</pre>\r\n\r\nWith this code, the implementation of command method `.preview()` has begun.  This method is used by Ubiquity to generate a live preview of the command.  Called with a DOM node (`pblock`) and partially completed command input (`input_obj` and `mods`), this method is expected to build a representation of the command's results in the DOM node.  As the user types, this method will be called over and over again, ideally offering feedback as the user composes a command.\r\n\r\nContinuing on, consider this next chunk of code checking the validity of command input:\r\n\r\n<pre lang=\"javascript\" line=\"107\">\r\n        if (!user_name) {\r\n\r\n            // If there's no user name, there's no login, so this command won't work. \r\n            tmpl = [ \r\n                '<p style=\"color: #d44\">No active user found - log in at ', \r\n                '<img src=\"http://delicious.com/favicon.ico\"> ',\r\n                '<b><a style=\"color: #3774D0\" href=\"http://delicious.com\">delicious.com</a></b> ', \r\n                'to use this command.</p>'\r\n            ].join('');\r\n\r\n        } else if (!bm.description) {\r\n\r\n            // If there's no title, then this is an error too.\r\n            tmpl = [ \r\n                '<p style=\"color: #d44\">A title is required for bookmarks on ', \r\n                '<img src=\"http://delicious.com/favicon.ico\"> ',\r\n                '<b><a style=\"color: #3774D0\" href=\"http://delicious.com\">delicious.com</a></b> ', \r\n                '</p>'\r\n            ].join('');\r\n</pre>\r\n\r\nThis chunk of code first checks for a user name, which can be extracted from a valid Delicious login cookie, if one was found.  If not found, the command will failâ€”so the preview built here will instruct the user to login at Delicious before going further.\r\n\r\nThe second precondition for using the command is that the bookmark has been given a title.  By default, this is the title of the current pageâ€”but, some pages don't offer titles.  So, an error needs to be flagged if the user hasn't manually supplied a title in this case.\r\n\r\nFinally, notice in both of these error cases, a string of HTML is composed in the variable `tmpl`.  This will be used at the end of the method to populate the DOM node passed in as `pblock`.\r\n\r\nNow, assuming that all the command's prerequisites have been met, it's time to try constructing a proper preview for the results of this command: \r\n\r\n<pre lang=\"javascript\" line=\"126\">\r\n        } else {\r\n\r\n            // Attempt to construct a vaguely delicious-esque preview of a bookmark.\r\n            tmpl = [ \r\n                '<style type=\"text/css\">',\r\n                    '.preview a { color: #3774D0 }',\r\n                    '.del-bookmark { font: 12px arial; color: #ddd; background: #eee; line-height: 1.25em }',\r\n                    '.del-bookmark a.title { color: #1259C7 }',\r\n                    '.del-bookmark .full-url { color: #396C9B; font-size: 12px; display: block; padding: 0.25em 0 }',\r\n                    '.del-bookmark .notes { color: #4D4D4D }',\r\n                    '.del-bookmark .tags { color: #787878; padding-top: 0.25em; text-align: right }',\r\n                '</style>',\r\n                '<div class=\"preview\">',\r\n                    '<p>Share a bookmark at <img src=\"http://delicious.com/favicon.ico\"> ',\r\n                        '<b><a href=\"http://delicious.com/${user_name}\">delicious.com/${user_name}</a></b>:</p>',\r\n                    '<div class=\"del-bookmark\">',\r\n                        '<div style=\"padding: 1em;\">',\r\n                        '<a class=\"title\" href=\"${bm.url}\">${bm.description}</a>',\r\n                        '<a class=\"full-url\" href=\"${bm.url}\">${bm.url}</a>',\r\n                        bm.extended ? \r\n                            '<div class=\"notes\">${bm.extended}</div>' : '',\r\n                        bm.tags ?\r\n                            '<div class=\"tags\"><span>tags:</span> ${bm.tags}</div>' : '',\r\n                    '</div>',\r\n                '</div>'\r\n            ].join(\"\\n\");\r\n\r\n        }\r\n\r\n        pblock.innerHTML = CmdUtils.renderTemplate(tmpl, ns);\r\n    },\r\n</pre>\r\n\r\nBuilding on the notion that previews are built in a DOM node, the code above uses both CSS and HTML to assemble a quick-and-dirty facsimile of a Delicious bookmarkâ€”which will be rendered like this:\r\n\r\n<img src=\"/2008/ubiq-share-on-delicious-preview.jpg\" style=\"border: 1px solid #333; margin: 0.25em; padding: 0.25em\" />\r\n\r\nAlso note that Ubiquity provides a template engine for use in generating contentâ€”namely the [JavaScript Templates][jst] engine from the [TrimPath][] project.  This engine may eventually be replaced with another, but the notion is that Ubiquity will provide tools to more easily generate previews and more.\r\n\r\nThe conclusion of the `.preview()` method uses the template engine with a call to `CmdUtils.renderTemplate()` to inject content into the preview element by way of the `.innerHTML` property.\r\n\r\n[jst]: http://code.google.com/p/trimpath/wiki/JavaScriptTemplates\r\n[trimpath]: http://code.google.com/p/trimpath/wiki/TrimPath\r\n\r\nNow that the preview is out of the way, it's time to get down to implementing the execution of the command:\r\n\r\n<pre lang=\"javascript\" line=\"157\">    \r\n    /**\r\n     * Attempt to use the delicious v1 API to post a bookmark using the \r\n     * command input\r\n     */\r\n    execute: function(input_obj, mods) {\r\n        var bm          = this._extractBookmarkData(input_obj, mods);\r\n        var user_cookie = this._getUserCookie();\r\n        var user_name   = (user_cookie) ? user_cookie.split(' ')[0] : '';\r\n\r\n        if (!user_name) {\r\n            // If there's no user name, there's no login, so this command won't work. \r\n            displayMessage('No active user found - log in at delicious.com ' +\r\n                'to use this command.');\r\n            return false;\r\n        }\r\n\r\n        if (!bm.description) {\r\n            // If there's no title, somehow, then this is an error too.\r\n            displayMessage(\"A title is required for bookmarks at delicious.com\");\r\n            return false;\r\n        }\r\n</pre>\r\n\r\nMirroring the `.preview()` method, the `.execute()` method first checks for validity of the arguments given by the user.  A missing user name or title result in a notification that the command has failed.\r\n\r\nBut, if the arguments are all valid, it's time to actually issue a request to the Delicious V1 API:\r\n\r\n<pre lang=\"javascript\" line=\"178\">\r\n        var path = '/v1/posts/add';\r\n        var url  = this._config.api_base + path;\r\n\r\n        var req = Components.classes[\"@mozilla.org/xmlextras/xmlhttprequest;1\"].\r\n            createInstance();\r\n\r\n        req.open('POST', url, true);\r\n\r\n        req.onload = function(ev) { \r\n            displayMessage('Bookmark \"' + bm.description + '\" ' + \r\n                'shared at delicious.com/' + user_name);\r\n        }\r\n\r\n        req.onerror = function(ev) { \r\n            displayMessage('ERROR: Bookmark \"' + bm.description + '\" ' + \r\n                ' NOT shared on delicious.com/' + user_name);\r\n        }\r\n</pre>\r\n\r\nUsing the base URL for the Delicious API declared earlier in the configuration section, the `.execute()` method constructs an API URL for the `/v1/posts/add` method.  Then, it creates an instance of `XMLHttpRequest` from the browser to be used in sending the API request.  Event handlers are registered with the object to present notifications to the user indicating whether or not the API request was successful.\r\n\r\nAt long last, it's time to wrap up this method and make the API request:\r\n\r\n<pre lang=\"javascript\" line=\"195\">\r\n        req.setRequestHeader('Authorization', 'Basic Y29va2llOmNvb2tpZQ=='); // btoa('cookie:cookie')\r\n\r\n        var mediator = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\r\n            getService(Components.interfaces.nsIWindowMediator);\r\n        var win = mediator.getMostRecentWindow(null);\r\n        var user_agent = win.navigator.userAgent + \";Ubiquity-share-on-delicious\";\r\n\r\n        req.setRequestHeader(\"User-Agent\", user_agent);      \r\n\r\n        req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n        req.send(this._buildQueryString(bm));\r\n    },\r\n\r\n    EOF:null // I hate trailing commas\r\n});\r\n</pre>\r\n\r\nThe login cookie authentication supported by the Delicious V1 API is triggered by supplying a user name / password pair of `cookie`, which is done by setting the `Authorization` request header.  The login cookie is then expected to be passed in as the POST variable `_user`, which is done in the `._extractBookmarkData()` utility method.\r\n\r\nAnother bit here that shows more access of browser resources is the construction of a unique User-Agent header for this API call based on the browser's own User-Agent string, something that's suggested in the guidelines for using the Delicious API.\r\n\r\nFinally, the `.execute()` methodâ€”and the command itselfâ€”is wrapped up with by sending off the bookmark data encoded as POST form variables with the `._buildQueryString()` utility method.\r\n\r\nAnd, that's itâ€”a command-driven Delicious browser extension in a little over 200 lines of code.  There's still more to be done to really make this thing full-featured, but I think this shows off the basic features of Ubiquity.  I'm hoping to dig in deeper and explore further, taking a look at running Greasemonkey-style code at [browser startup and page load][load], as well as playing with some more browser chrome features.  \r\n\r\n[load]: https://wiki.mozilla.org/Labs/Ubiquity/Ubiquity_0.1_Author_Tutorial#Running_on_page_load_and_startup\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221085986\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://jclark.org/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d0a9ab4b71ce193e98b7284ca257e327&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://jclark.org/weblog/\">Jason Clark</a>\n                </div>\n                <a href=\"#comment-221085986\" class=\"permalink\"><time datetime=\"2008-09-01T14:47:35\">2008-09-01T14:47:35</time></a>\n            </div>\n            <div class=\"content\"><p>First off-  fantastic post.  Great to see a lengthy post here again, although I'm one to talk.  This is an excellent introduction to Ubiquity command development, and tres useful to boot.</p>\n\n<p>I'm wondering why you chose to construct and post the XMLHttpRequest manually instead of using jQuery, which is included with Ubiquity.  I don't know that there's any benefit other than some simplicity, but I took a crack at converting your code to use jQuery, which works nicely.  In the 'execute' function, replace everything after \"var url  = this._config.api_base + path;\" with this (hope code blocks work in comments):</p>\n\n<p><code>\n        var win = context.focusedWindow;\n        var user_agent = win.navigator.userAgent + \";Ubiquity-share-on-delicious\";</code></p>\n\n<pre><code>    jQuery.ajax({\n      type: \"POST\",\n      url: url,\n      data: this._buildQueryString(bm),\n      username: \"cookie\",\n      password: \"cookie\",\n      beforeSend: function( req ) {\n        req.setRequestHeader(\"User-Agent\", user_agent); \n      },\n      error: function() {\n        displayMessage('ERROR: Bookmark \"' + bm.description + '\" ' + \n            ' NOT shared on delicious.com/' + user_name);\n      },\n      success: function() {\n        displayMessage('Bookmark \"' + bm.description + '\" ' + \n            'shared at delicious.com/' + user_name);\n      },\n    });\n</code></pre>\n\n<p></p>\n\n<p>Also, with both versions of the code, I'm seeing some unexpected behavior around authentication.  Assume I'm logged in to delicious, with \"stay logged in\" checked, and I restart my browser.  Trying to post with the command fails with a 401 unauthorized, even though I can see the cookie was sent (via Live HTTP Headers extension).  Going to delicious.com shows me logged in, and once I've viewed the site, the command works.  Except that now I can't reproduce; but I know it happened because I've got the headers.  At any rate, it is working nicely, but the previous failure is bugging me... feel like I'm overlooking something.  </p>\n\n<p>Thanks again for an awesome post.  Hope to see more of the same.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085988\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e799a79441c7543be48562403411cd13&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Ryan Scott Scheel</a>\n                </div>\n                <a href=\"#comment-221085988\" class=\"permalink\"><time datetime=\"2008-09-01T15:07:01\">2008-09-01T15:07:01</time></a>\n            </div>\n            <div class=\"content\"><p>You should be helping with the documentation, if you aren't already.  Very nice job with this article;</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085991\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://azarask.in\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e4307f205d017ba76647806951e14bb0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://azarask.in\">Aza Raskin</a>\n                </div>\n                <a href=\"#comment-221085991\" class=\"permalink\"><time datetime=\"2008-09-02T01:44:13\">2008-09-02T01:44:13</time></a>\n            </div>\n            <div class=\"content\"><p>Hi Leslie,</p>\n\n<p>This is a beautiful tutorial on writing a Ubiquity command. We'd love your help in making Ubiquity's documentation better (especially dev facing). You should totally link to this from the Ubiquity Wiki -- or even add the content in someway.</p>\n\n<p>Anyway, just wanted to say thanks.</p>\n\n<p>-- Aza</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085993\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.slackorama.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15b474c86cd73c2d12c1d77af11c1d8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.slackorama.com\">seth</a>\n                </div>\n                <a href=\"#comment-221085993\" class=\"permalink\"><time datetime=\"2008-09-08T17:30:16\">2008-09-08T17:30:16</time></a>\n            </div>\n            <div class=\"content\"><p>Am I doing something wrong?  </p>\n\n<p>When I enter in \"sh this tagged tag1 tag2 entitled This is a title\" everything after the tagged is added as a tag. It's not seeing the entitled part.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085994\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://spyced.blogspot.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=849810634810c960e5e7c27fa54a0f5b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://spyced.blogspot.com/\">http://spyced.blogspot.com/</a>\n                </div>\n                <a href=\"#comment-221085994\" class=\"permalink\"><time datetime=\"2008-09-15T19:12:58\">2008-09-15T19:12:58</time></a>\n            </div>\n            <div class=\"content\"><p>Did something break?  I'm getting a 404 accessing http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085995\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221085995\" class=\"permalink\"><time datetime=\"2008-09-15T23:07:42\">2008-09-15T23:07:42</time></a>\n            </div>\n            <div class=\"content\"><p>Yeah, looks like I had a small snafu with switching back from Lighttpd to Apache.  Left out a rewrite rule - doh!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085996\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Tony</a>\n                </div>\n                <a href=\"#comment-221085996\" class=\"permalink\"><time datetime=\"2008-10-22T04:56:03\">2008-10-22T04:56:03</time></a>\n            </div>\n            <div class=\"content\"><p>Great article. This is replacing my delicious bookmarklet. Thanks!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085997\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=31461076fcbce091ff822fc9ac31315d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">dgtlchlk</a>\n                </div>\n                <a href=\"#comment-221085997\" class=\"permalink\"><time datetime=\"2009-04-14T01:06:57\">2009-04-14T01:06:57</time></a>\n            </div>\n            <div class=\"content\"><p>Great article and command.\nWish it worked correctly with the latest 0.1.8 release though. No matter what text you put in it adds everything as the notes. The tagged and entitled modifiers don't work.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085999\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.nolanhergert.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=957e24509baf770ba57ad306e20f201c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.nolanhergert.com\">Nolan</a>\n                </div>\n                <a href=\"#comment-221085999\" class=\"permalink\"><time datetime=\"2009-04-16T03:10:07\">2009-04-16T03:10:07</time></a>\n            </div>\n            <div class=\"content\"><p>I second that comment. Delicious is actually saying the link given was \"chrome://browser/content/browser.xul\" and marking it as harmful inside delicious!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086002\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3d056a5b07c384647fe0806b0dfc429e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Justin</a>\n                </div>\n                <a href=\"#comment-221086002\" class=\"permalink\"><time datetime=\"2009-07-06T12:39:39\">2009-07-06T12:39:39</time></a>\n            </div>\n            <div class=\"content\"><p>Hi Leslie,</p>\n\n<p>Thanks for the delicious ubiquity command. Unfortunately, as one of the commenters above mentions, the tagged modifier doesn't seem to work. I'm using Ubiquity 0.5 pre and typing the phrase:</p>\n\n<p>share tagged foo</p>\n\n<p>Adds the bookmark to Delicious with the note text \"tagged foo\"</p>\n\n<p>Cheers, Justin</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086004\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://ericscalf.com/stream\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0775f9beff626496b86d7cb602e5f46f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://ericscalf.com/stream\">Eric</a>\n                </div>\n                <a href=\"#comment-221086004\" class=\"permalink\"><time datetime=\"2009-07-20T22:43:17\">2009-07-20T22:43:17</time></a>\n            </div>\n            <div class=\"content\"><p>Echoing others.. I'm using the latest ubiquity (err, next to latest.. 0.1.8?), and doing \"share-on-delicious this is a note tagged testing\" saves the link with notes \"this is a note tagged testing\" and no tags. :(  Then again, the other delicious command I've found (by someone else) is having the same issue.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/08/31/writing-a-delicious-command-for-ubiquity",
    "thumbnail": "/2008/ubiq-share-on-delicious-list.jpg",
    "summary": "<p>In my <a href=\"http://decafbad.com/blog/2008/08/31/ubiquity-cracks-open-personal-mashup-tinkering\" title=\"Ubiquity cracks open personal mashup tinkering\">last post</a>, I got all fluffy about how cool <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> is but didn&apos;t share any code to prove the point.  As it happens, I have come up with at least one useful command that I&apos;m starting to use habitually in posting bookmarks to Delicious.  You can <a href=\"http://decafbad.com/UbiquityCommands/\">subscribe to my command</a> or <a href=\"http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js\">check out the full source</a>&#x2014;this post will serve as a dissection of the thing.  Since this will be fairly lengthy, follow along after the jump.</p>\n<p>Oh, and it&apos;s been awhile since I posted something this in-depth around here, so feel free to let me know how this first draft works.  And, bug reports and patches are of course welcome.</p>\n"
  },
  {
    "comments_archived": true,
    "date": "2008-08-31T04:07:22.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "mashups",
      "javascript",
      "entries",
      "mozilla",
      "ubiquity"
    ],
    "title": "Ubiquity cracks open personal mashup tinkering",
    "wordpress_id": 1286,
    "wordpress_slug": "ubiquity-cracks-open-personal-mashup-tinkering",
    "wordpress_url": "http://decafbad.com/blog/?p=1286",
    "year": "2008",
    "month": "08",
    "day": "31",
    "isDir": false,
    "slug": "ubiquity-cracks-open-personal-mashup-tinkering",
    "postName": "2008-08-31-ubiquity-cracks-open-personal-mashup-tinkering",
    "html": "<p>When I was a wee hacker, I lived my digital life though a <a href=\"http://www.virtualsky.net/iadoremyc64/\">Commodore 64</a>.  I played games on it, did homework, talked to people far awayâ€”you know, all the stuff they showed in the pictures on the box.  I also took things apartâ€”both the machine itself and software running on it.  I grew up learning that my digital environment was ultimately understandable, <a href=\"http://cbm.csbruce.com/~csbruce/cbm/transactor/\">susceptible to tinkering</a>, and open to being bent to my own purposes.</p>\n<p>From the Commodore 64, I graduated eventually to terminals and text editors, opening portals mostly onto computers elsewhere via powerful UNIX command shells.  And, of course, over the past decade, this has largely given way to life in a browser.  </p>\n<p>Yet, for a little while, particularly in the first few years of browsers, freedom to tinker seemed cramped.  JavaScript had yet to arrive, and was a little messy when it did.  There was no relatively easy addon development.  And, though the portals opened by a browser were richer than those provided by terminals, the paths of navigation defined by links controlled by site owners offered less freedom of movement than UNIX commands.  I could create my own pages, but I couldn&#39;t do much to others&#39; pages.</p>\n<p>But then, javascript: URLs came around, dots were connected, and <a href=\"http://en.wikipedia.org/wiki/Bookmarklet\">bookmarklets</a> were born.  Suddenly, it was possible to customize <em>my</em> browsing environment with arbitrary JavaScript code having access to the current pageâ€”no matter <em>whose</em> page it was.  And, through the various tricks of the AJAX trade, bookmarklets have only gotten more capable throughout the years.</p>\n<p><a href=\"http://www.mozilla.org/docs/end-user/keywords.html\">Smart keyword shortcuts</a> came around a little later, allowing quick access to bookmarks via simple keywords typed into the location bar.  The smart part, though, came in the form of bookmarked URLs with placeholders and keywords given arguments to fill the placeholdersâ€”allowing not only quick access to bookmarked pages but also search engine forms bookmarked with late-bound fields.</p>\n<p>Bookmarklets inherited the benefits of smart keyword shortcuts.  The same placeholder in http: URLs can be inserted into the code of a javascript: URL, thus parameterizing the JavaScript code and incidentally turning the location bar into a kind of primitive command line.  For example, one of my most heavily used &quot;<a href=\"http://naeblis.cx/weblog/2004/08/09/DeliciousAddresslets\">addresslets</a>&quot; is based on <a href=\"http://ejohn.org/blog/super-fast-delicious-bookmarklet/\">John Resig&#39;s original &quot;Super-Fast Delicious Bookmarklet&quot;</a>.</p>\n<p>Another leap in prying open the browser tinkering space came in the form of <a href=\"http://www.greasespot.net/\">Greasemonkey</a>â€”an addon-powered environment created explicitly for the purpose of end-user scripting applied to others&#39; pages.  <a href=\"http://www.greasespot.net/\">Greasemonkey</a> user scripts can do more than bookmarklets, and with a much better development environment to boot.  And, though a user script can&#39;t do quite as much as a proper browser addon, they&#39;re much easier to hack on and distribute.</p>\n<p>Now, consider one of <a href=\"http://labs.mozilla.com/\">Mozilla Labs</a>&#39; <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">newest projects</a>, named <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a>.  This rough and experimental addon for Firefox combines and improves upon everything I&#39;ve described so far:</p>\n<ul>\n<li><a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> is a hackable command line environment, better than <a href=\"http://en.wikipedia.org/wiki/Bookmarklet\">bookmarklets</a> and smart <a href=\"http://www.mozilla.org/docs/end-user/keywords.html\">keyword shortcuts</a>;</li>\n<li><a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> enables persistent customization of others&#39; pages, not unlike <a href=\"http://www.greasespot.net/\">Greasemonkey</a>; </li>\n<li><a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> facilitates live in-browser creation and web-based subscription to user commands and scripts;</li>\n<li><a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> gives access to browser chrome resources without a need for frequent restarts;</li>\n</ul>\n<p>So far, most of the <a href=\"https://labs.toolness.com/ubiquity-herd/\">commands</a> I see popping up since the 0.1 release have not accomplished much more than <a href=\"http://www.mozilla.org/docs/end-user/keywords.html\">smart keyword shortcuts</a> in the location bar could.  But, it&#39;s early yet, and <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> is far from limited to these commands.</p>\n<p>Once the basics have been well-explored, I expect to see more people taking a crack at the broader capabilities offered by <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a>.  <a href=\"http://en.wikipedia.org/wiki/Bookmarklet\">Bookmarklets</a> and <a href=\"http://www.greasespot.net/\">Greasemonkey</a> can&#39;t access browser chromeâ€”but <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> can.  <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> also offers a user interface that&#39;s so much more promising than keyword shortcuts, including command previews and typed parameters with suggestions.</p>\n<p>Ubiquity promises web-wide mashups directed by a conversational command interface.  All in all, the potential of this makes me feel like my digital environmentâ€”browser and web as a wholeâ€”is getting even more intimately, personally hackable.  </p>\n<p>It&#39;ll be very interesting to see where this project goes.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221089574\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=22b4e824255828f5aedd0e6e2558dc52&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Raul</a>\n</div>\n<a href=\"#comment-221089574\" class=\"permalink\"><time datetime=\"2008-08-31T10:20:58\">2008-08-31T10:20:58</time></a>\n</div>\n<div class=\"content\"><p>Hi, was using the original delicious command linked from the Ubiquity wiki, just tried yours and its definitely more polished and functional. Great job with the preview and the extra functionality. Only thing is 'share-to-delicious' is too much to type so I unsubscribed the previous command and changed the namespace in yours. This is clearly going to become a problems as the commands proliferate.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089575\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221089575\" class=\"permalink\"><time datetime=\"2008-08-31T14:43:39\">2008-08-31T14:43:39</time></a>\n</div>\n<div class=\"content\"><p>@Raul: \"share-to-delicious\" is long, but keep in mind is that you only need to type enough of the command to disambiguate it.  That is, all I type is \"sh this tagged osx software apple\" because I have no other commands starting with \"sh\".  Watch the list of commands in the preview as you type.  Those tell you what the parser thinks of what you're typing as you type.  It's like automatic tab-completion.</p>\n<p>Also, I think there's work planned to put some usage based sorting into the command parser, preferring the commands you use most in order of disambiguation.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089576\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\">Abi</a>\n</div>\n<a href=\"#comment-221089576\" class=\"permalink\"><time datetime=\"2008-08-31T15:33:24\">2008-08-31T15:33:24</time></a>\n</div>\n<div class=\"content\"><p>Nice post. I share your sentiment with regards to Ubiquity commands. A lot of commands that I see are just plain simple searches. I hope developers will work on more interesting things. For example, even things like auto-form filling for this comment (possibly even on page load without having to type a command) could be done by Ubiquity. There's still a lot more room for experimentation.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089578\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\">Abi</a>\n</div>\n<a href=\"#comment-221089578\" class=\"permalink\"><time datetime=\"2008-08-31T15:45:59\">2008-08-31T15:45:59</time></a>\n</div>\n<div class=\"content\"><p></p>\n<p>But otherwise, I <em>really</em> like your command especially the preivew. We should include it as a builtin command, if you don't mind. :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089580\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\">Abi</a>\n</div>\n<a href=\"#comment-221089580\" class=\"permalink\"><time datetime=\"2008-08-31T15:51:20\">2008-08-31T15:51:20</time></a>\n</div>\n<div class=\"content\"><p>I noticed a bug in your command. If I select some text in the awesomebar, the bookmark url is chrome. You should use something the command utils to get the url, instead.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089582\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221089582\" class=\"permalink\"><time datetime=\"2008-09-01T06:17:37\">2008-09-01T06:17:37</time></a>\n</div>\n<div class=\"content\"><p>@Abi: Making this a built-in command is totally fine by me!  It can use more work, though, for sure.</p>\n<p>Also, I can reproduce that bug.  Ugh.  I can't find any methods in the CmdUtils to get the current page URL, though.  I'll keep poking a bit though.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089584\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\">Abi</a>\n</div>\n<a href=\"#comment-221089584\" class=\"permalink\"><time datetime=\"2008-09-01T06:50:23\">2008-09-01T06:50:23</time></a>\n</div>\n<div class=\"content\"><p>Your blog seems to be rejecting code (that's why I had so many posts in the first place). You can get the current page url using (with dots):</p>\n<p>CmdUtils  getDocumentInsecure() location href</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089586\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://theunfocused.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=738af918f39d544f8b0d765850c986f8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://theunfocused.net/\">Blair McBride</a>\n</div>\n<a href=\"#comment-221089586\" class=\"permalink\"><time datetime=\"2008-09-02T02:50:12\">2008-09-02T02:50:12</time></a>\n</div>\n<div class=\"content\"><p>I recommend against using getDocumentInsecure() - its got \"Insecure\" in its name for a reason! Instead, you should use:</p>\n<p>Application.activeWindow.activeTab.uri.spec</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "When I was a wee hacker, I lived my digital life though a [Commodore 64][c64].  I played games on it, did homework, talked to people far awayâ€”you know, all the stuff they showed in the pictures on the box.  I also took things apartâ€”both the machine itself and software running on it.  I grew up learning that my digital environment was ultimately understandable, [susceptible to tinkering][transactor], and open to being bent to my own purposes.\r\n\r\nFrom the Commodore 64, I graduated eventually to terminals and text editors, opening portals mostly onto computers elsewhere via powerful UNIX command shells.  And, of course, over the past decade, this has largely given way to life in a browser.  \r\n\r\nYet, for a little while, particularly in the first few years of browsers, freedom to tinker seemed cramped.  JavaScript had yet to arrive, and was a little messy when it did.  There was no relatively easy addon development.  And, though the portals opened by a browser were richer than those provided by terminals, the paths of navigation defined by links controlled by site owners offered less freedom of movement than UNIX commands.  I could create my own pages, but I couldn't do much to others' pages.\r\n\r\nBut then, javascript: URLs came around, dots were connected, and [bookmarklets][] were born.  Suddenly, it was possible to customize *my* browsing environment with arbitrary JavaScript code having access to the current pageâ€”no matter *whose* page it was.  And, through the various tricks of the AJAX trade, bookmarklets have only gotten more capable throughout the years.\r\n\r\n[Smart keyword shortcuts][shortcuts] came around a little later, allowing quick access to bookmarks via simple keywords typed into the location bar.  The smart part, though, came in the form of bookmarked URLs with placeholders and keywords given arguments to fill the placeholdersâ€”allowing not only quick access to bookmarked pages but also search engine forms bookmarked with late-bound fields.\r\n\r\nBookmarklets inherited the benefits of smart keyword shortcuts.  The same placeholder in http: URLs can be inserted into the code of a javascript: URL, thus parameterizing the JavaScript code and incidentally turning the location bar into a kind of primitive command line.  For example, one of my most heavily used \"[addresslets](http://naeblis.cx/weblog/2004/08/09/DeliciousAddresslets)\" is based on [John Resig's original \"Super-Fast Delicious Bookmarklet\"](http://ejohn.org/blog/super-fast-delicious-bookmarklet/).\r\n\r\nAnother leap in prying open the browser tinkering space came in the form of [Greasemonkey][]â€”an addon-powered environment created explicitly for the purpose of end-user scripting applied to others' pages.  [Greasemonkey][] user scripts can do more than bookmarklets, and with a much better development environment to boot.  And, though a user script can't do quite as much as a proper browser addon, they're much easier to hack on and distribute.\r\n\r\nNow, consider one of [Mozilla Labs][labs]' [newest projects][ubiquity], named [Ubiquity][].  This rough and experimental addon for Firefox combines and improves upon everything I've described so far:\r\n\r\n* [Ubiquity][] is a hackable command line environment, better than [bookmarklets][] and smart [keyword shortcuts][shortcuts];\r\n* [Ubiquity][] enables persistent customization of others' pages, not unlike [Greasemonkey][]; \r\n* [Ubiquity][] facilitates live in-browser creation and web-based subscription to user commands and scripts;\r\n* [Ubiquity][] gives access to browser chrome resources without a need for frequent restarts;\r\n\r\nSo far, most of the [commands][] I see popping up since the 0.1 release have not accomplished much more than [smart keyword shortcuts][shortcuts] in the location bar could.  But, it's early yet, and [Ubiquity][] is far from limited to these commands.\r\n\r\nOnce the basics have been well-explored, I expect to see more people taking a crack at the broader capabilities offered by [Ubiquity][].  [Bookmarklets][] and [Greasemonkey][] can't access browser chromeâ€”but [Ubiquity][] can.  [Ubiquity][] also offers a user interface that's so much more promising than keyword shortcuts, including command previews and typed parameters with suggestions.\r\n\r\nUbiquity promises web-wide mashups directed by a conversational command interface.  All in all, the potential of this makes me feel like my digital environmentâ€”browser and web as a wholeâ€”is getting even more intimately, personally hackable.  \r\n\r\nIt'll be very interesting to see where this project goes.\r\n\r\n[labs]: http://labs.mozilla.com/\r\n[transactor]: http://cbm.csbruce.com/~csbruce/cbm/transactor/\r\n[c64]: http://www.virtualsky.net/iadoremyc64/\r\n[shortcuts]: http://www.mozilla.org/docs/end-user/keywords.html\r\n[greasemonkey]: http://www.greasespot.net/\r\n[bookmarklets]: http://en.wikipedia.org/wiki/Bookmarklet\r\n[ubiquity]: http://labs.mozilla.com/2008/08/introducing-ubiquity/\r\n[commands]: https://labs.toolness.com/ubiquity-herd/\r\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221089574\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=22b4e824255828f5aedd0e6e2558dc52&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Raul</a>\n                </div>\n                <a href=\"#comment-221089574\" class=\"permalink\"><time datetime=\"2008-08-31T10:20:58\">2008-08-31T10:20:58</time></a>\n            </div>\n            <div class=\"content\"><p>Hi, was using the original delicious command linked from the Ubiquity wiki, just tried yours and its definitely more polished and functional. Great job with the preview and the extra functionality. Only thing is 'share-to-delicious' is too much to type so I unsubscribed the previous command and changed the namespace in yours. This is clearly going to become a problems as the commands proliferate.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089575\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221089575\" class=\"permalink\"><time datetime=\"2008-08-31T14:43:39\">2008-08-31T14:43:39</time></a>\n            </div>\n            <div class=\"content\"><p>@Raul: \"share-to-delicious\" is long, but keep in mind is that you only need to type enough of the command to disambiguate it.  That is, all I type is \"sh this tagged osx software apple\" because I have no other commands starting with \"sh\".  Watch the list of commands in the preview as you type.  Those tell you what the parser thinks of what you're typing as you type.  It's like automatic tab-completion.</p>\n\n<p>Also, I think there's work planned to put some usage based sorting into the command parser, preferring the commands you use most in order of disambiguation.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089576\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\">Abi</a>\n                </div>\n                <a href=\"#comment-221089576\" class=\"permalink\"><time datetime=\"2008-08-31T15:33:24\">2008-08-31T15:33:24</time></a>\n            </div>\n            <div class=\"content\"><p>Nice post. I share your sentiment with regards to Ubiquity commands. A lot of commands that I see are just plain simple searches. I hope developers will work on more interesting things. For example, even things like auto-form filling for this comment (possibly even on page load without having to type a command) could be done by Ubiquity. There's still a lot more room for experimentation.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089578\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\">Abi</a>\n                </div>\n                <a href=\"#comment-221089578\" class=\"permalink\"><time datetime=\"2008-08-31T15:45:59\">2008-08-31T15:45:59</time></a>\n            </div>\n            <div class=\"content\"><p></p>\n\n<p>But otherwise, I <em>really</em> like your command especially the preivew. We should include it as a builtin command, if you don't mind. :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089580\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\">Abi</a>\n                </div>\n                <a href=\"#comment-221089580\" class=\"permalink\"><time datetime=\"2008-08-31T15:51:20\">2008-08-31T15:51:20</time></a>\n            </div>\n            <div class=\"content\"><p>I noticed a bug in your command. If I select some text in the awesomebar, the bookmark url is chrome. You should use something the command utils to get the url, instead.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089582\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221089582\" class=\"permalink\"><time datetime=\"2008-09-01T06:17:37\">2008-09-01T06:17:37</time></a>\n            </div>\n            <div class=\"content\"><p>@Abi: Making this a built-in command is totally fine by me!  It can use more work, though, for sure.</p>\n\n<p>Also, I can reproduce that bug.  Ugh.  I can't find any methods in the CmdUtils to get the current page URL, though.  I'll keep poking a bit though.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089584\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\">Abi</a>\n                </div>\n                <a href=\"#comment-221089584\" class=\"permalink\"><time datetime=\"2008-09-01T06:50:23\">2008-09-01T06:50:23</time></a>\n            </div>\n            <div class=\"content\"><p>Your blog seems to be rejecting code (that's why I had so many posts in the first place). You can get the current page url using (with dots):</p>\n\n<p>CmdUtils  getDocumentInsecure() location href</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089586\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://theunfocused.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=738af918f39d544f8b0d765850c986f8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://theunfocused.net/\">Blair McBride</a>\n                </div>\n                <a href=\"#comment-221089586\" class=\"permalink\"><time datetime=\"2008-09-02T02:50:12\">2008-09-02T02:50:12</time></a>\n            </div>\n            <div class=\"content\"><p>I recommend against using getDocumentInsecure() - its got \"Insecure\" in its name for a reason! Instead, you should use:</p>\n\n<p>Application.activeWindow.activeTab.uri.spec</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/08/30/ubiquity-cracks-open-personal-mashup-tinkering"
  }
]