[
  {
    "title": "Parsec Patrol Diaries: Construction Time Again",
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2015",
    "month": "02",
    "day": "09",
    "isDir": false,
    "slug": "parsec-patrol-resumes",
    "date": "2015-02-09T12:00:00.000Z",
    "postName": "2015-02-09-parsec-patrol-resumes",
    "html": "<p>Holy crap. Has it really been a year or so since I last hacked in earnest on\n<a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec Patrol</a>? I&#39;ve been meaning to get back to it, and it&#39;s always felt like\njust last week when I was poking at it.</p>\n<p>Well, a week or so ago, I read <a href=\"https://twitter.com/blakewilliams__\">Blake Williams&#39;</a> &quot;<a href=\"http://robots.thoughtbot.com/replace-%5Bcoffeescript%5D%5B%5D-with-es6\">Replace <a href=\"http://coffeescript.org/\">CoffeeScript</a>\nwith ES6</a>&quot; and thought, &quot;Hmm, on what project did I last use\n<a href=\"http://coffeescript.org/\">CoffeeScript</a>? Oh yeah: <a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec patrol</a>!&quot; So, I decided to take a swing through\nthe code and see what I was last up to. </p>\n<p>After a good look, I started an empty <a href=\"https://github.com/lmorchard/parsec-patrol/commits/newbranch\">new branch</a> in <a href=\"https://github.com/lmorchard/parsec-patrol\">my\nrepo</a> and started from scratch.</p>\n<p>See, I started <a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec Patrol</a> as an excuse to force myself to learn a bunch of\nnew things I&#39;d been putting off for awhile. Near the top of the list were\n<a href=\"http://yeoman.io/\">Yeoman</a>, <a href=\"http://gruntjs.com/\">Grunt</a>, <a href=\"http://bower.io/\">Bower</a>, <a href=\"http://requirejs.org/\">RequireJS</a>, and <a href=\"http://coffeescript.org/\">CoffeeScript</a>. Those\nwere all cool things, so I figured I&#39;d just stir them all up in a big mess and\nsee what happened.</p>\n<p>The process was fun - these were things that slotted into empty spots in my\nwebdev process, both expected and unexpected. Of course, <a href=\"http://requirejs.org/\">RequireJS</a> was a\nlittle awkward in comparison to modules in <a href=\"http://nodejs.org/\">Node.js</a>.  But hey, modules in\nthe browser! And, I never really quite grokked what was going on in those\ntangly <a href=\"http://gruntjs.com/\">Grunt</a> configuration files and just kind of copypasta&#39;d what others\nwere doing. But hey, build automation for all my weird webdev needs!</p>\n<p>Then, after a nice &amp; relaxing holiday vacation to wrap up 2013, I read &quot;<a href=\"http://www.100percentjs.com/just-like-%5Bgrunt%5D%5B%5D-%5Bgulp%5D%5B%5D-%5Bbrowserify%5D%5B%5D-now/\">And\njust like that Grunt and RequireJS are out, it’s all about Gulp and Browserify\nnow</a>&quot;. </p>\n<p>Well that, along with things that followed, just drained my enthusiasm for\n<a href=\"http://gruntjs.com/\">Grunt</a>, <a href=\"http://bower.io/\">Bower</a>, and <a href=\"http://requirejs.org/\">RequireJS</a> in an hurry. But, it didn&#39;t leave me\nwanting to dive into the next big thing right away. So, I took a step back and\nplayed with other things for a few seasons. <a href=\"https://github.com/lmorchard/brick-select\">Web components</a> and <a href=\"https://github.com/lmorchard/node-firefox\">developer\ntools</a> are kind of fun to hack on. <a href=\"https://www.polymer-project.org/\">Polymer</a> was kind of a crazy rabbit\nhole.</p>\n<p>But, over the past year, <a href=\"http://gulpjs.com/\">Gulp</a> and <a href=\"http://browserify.org/\">Browserify</a> started sneaking into my\nwork despite my fatigue - and they were helping me get things done. <a href=\"http://gulpjs.com/\">Gulp</a>\nmade sense to me: writing glue code to process file streams fit into my head a\nwhole lot better than trying to figure out how to shoehorn my intentions into\ndeclarative-ish config files. And <a href=\"http://browserify.org/\">Browserify</a> gave me some <a href=\"http://nodejs.org/\">Node.js</a>-style\nhappiness on the client-side, pushing most of the awkwardness into the build\nsystem.</p>\n<p>So, now I&#39;ve got <a href=\"http://gulpjs.com/\">Gulp</a>, <a href=\"https://www.npmjs.com/\">NPM</a>, <a href=\"http://browserify.org/\">Browserify</a>, and <a href=\"https://6to5.org/\">6to5</a> as a new pile\nof fun that seems like it might have a little bit of staying power. Of course,\n<a href=\"https://www.youtube.com/watch?v=1IOukA10QeQ\">all this io.js business</a> could throw some monkeywrenches around. But,\nit feels like the patterns I&#39;ve got in play here are more stable than the\nprevious regime. </p>\n<p>Maybe I&#39;ll even recover enough enthusiasm for chasing webdev mayflies by this\nspring to take a deeper dive at things like <a href=\"http://facebook.github.io/react/\">React</a> and <a href=\"https://angularjs.org/\">Angular</a> and\n<a href=\"http://emberjs.com/\">Ember</a>. Then again, maybe I&#39;ll bang together a framework of my own just to\nbe cool.</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "body": "Holy crap. Has it really been a year or so since I last hacked in earnest on\n[Parsec Patrol][]? I've been meaning to get back to it, and it's always felt like\njust last week when I was poking at it.\n\nWell, a week or so ago, I read [Blake Williams'][blake] \"[Replace [CoffeeScript][]\nwith ES6][replace]\" and thought, \"Hmm, on what project did I last use\n[CoffeeScript][]? Oh yeah: [Parsec patrol][]!\" So, I decided to take a swing through\nthe code and see what I was last up to. \n\nAfter a good look, I started an empty [new branch][newbranch] in [my\nrepo][repo] and started from scratch.\n\nSee, I started [Parsec Patrol][] as an excuse to force myself to learn a bunch of\nnew things I'd been putting off for awhile. Near the top of the list were\n[Yeoman][], [Grunt][], [Bower][], [RequireJS][], and [CoffeeScript][]. Those\nwere all cool things, so I figured I'd just stir them all up in a big mess and\nsee what happened.\n\nThe process was fun - these were things that slotted into empty spots in my\nwebdev process, both expected and unexpected. Of course, [RequireJS][] was a\nlittle awkward in comparison to modules in [Node.js][].  But hey, modules in\nthe browser! And, I never really quite grokked what was going on in those\ntangly [Grunt][] configuration files and just kind of copypasta'd what others\nwere doing. But hey, build automation for all my weird webdev needs!\n\nThen, after a nice & relaxing holiday vacation to wrap up 2013, I read \"[And\njust like that Grunt and RequireJS are out, it’s all about Gulp and Browserify\nnow][justlikethat]\". \n\nWell that, along with things that followed, just drained my enthusiasm for\n[Grunt][], [Bower][], and [RequireJS][] in an hurry. But, it didn't leave me\nwanting to dive into the next big thing right away. So, I took a step back and\nplayed with other things for a few seasons. [Web components][] and [developer\ntools][] are kind of fun to hack on. [Polymer][] was kind of a crazy rabbit\nhole.\n\nBut, over the past year, [Gulp][] and [Browserify][] started sneaking into my\nwork despite my fatigue - and they were helping me get things done. [Gulp][]\nmade sense to me: writing glue code to process file streams fit into my head a\nwhole lot better than trying to figure out how to shoehorn my intentions into\ndeclarative-ish config files. And [Browserify][] gave me some [Node.js][]-style\nhappiness on the client-side, pushing most of the awkwardness into the build\nsystem.\n\nSo, now I've got [Gulp][], [NPM][], [Browserify][], and [6to5][] as a new pile\nof fun that seems like it might have a little bit of staying power. Of course,\n[all this io.js business][iojs] could throw some monkeywrenches around. But,\nit feels like the patterns I've got in play here are more stable than the\nprevious regime. \n\nMaybe I'll even recover enough enthusiasm for chasing webdev mayflies by this\nspring to take a deeper dive at things like [React][] and [Angular][] and\n[Ember][]. Then again, maybe I'll bang together a framework of my own just to\nbe cool.\n\n[polymer]: https://www.polymer-project.org/\n[react]: http://facebook.github.io/react/\n[angular]: https://angularjs.org/\n[ember]: http://emberjs.com/ \n[web components]: https://github.com/lmorchard/brick-select\n[developer tools]: https://github.com/lmorchard/node-firefox \n[node.js]: http://nodejs.org/\n[npm]: https://www.npmjs.com/\n[parsec Patrol]: https://github.com/lmorchard/parsec-patrol\n[Browserify]: http://browserify.org/\n[yeoman]: http://yeoman.io/\n[6to5]: https://6to5.org/\n[grunt]: http://gruntjs.com/\n[gulp]: http://gulpjs.com/\n[RequireJS]: http://requirejs.org/\n[bower]: http://bower.io/\n[CoffeeScript]: http://coffeescript.org/\n[iojs]: https://www.youtube.com/watch?v=1IOukA10QeQ\n[repo]: https://github.com/lmorchard/parsec-patrol\n[justlikethat]: http://www.100percentjs.com/just-like-[grunt][]-[gulp][]-[browserify][]-now/\n[newbranch]: https://github.com/lmorchard/parsec-patrol/commits/newbranch\n[blake]: https://twitter.com/blakewilliams__\n[replace]: http://robots.thoughtbot.com/replace-[coffeescript][]-with-es6\n\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/02/09/parsec-patrol-resumes"
  },
  {
    "title": "Parsec Patrol Diaries: How To Avoid Smashing Into Things",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2014/01/18/ppd-avoidance",
    "dsq_thread_id": [
      2140934375
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2014",
    "month": "01",
    "day": "18",
    "isDir": false,
    "slug": "ppd-avoidance",
    "date": "2014-01-18T12:00:00.000Z",
    "postName": "2014-01-18-ppd-avoidance",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Where_to_start\"><span class=\"toc_number toc_depth_1\">1</span> Where to start?</a>\n    </li>\n    <li>\n      <a href=\"#Waypoint_Graphs_Navigation_Meshes\"><span class=\"toc_number toc_depth_1\">2</span> Waypoint Graphs & Navigation Meshes</a>\n    </li>\n    <li>\n      <a href=\"#A_Search\"><span class=\"toc_number toc_depth_1\">3</span> A* Search</a>\n    </li>\n    <li>\n      <a href=\"#Trigonometry_Refresher\"><span class=\"toc_number toc_depth_1\">4</span> Trigonometry Refresher</a>\n    </li>\n    <li>\n      <a href=\"#Spaceships_with_Whiskers\"><span class=\"toc_number toc_depth_1\">5</span> Spaceships with Whiskers</a>\n    </li>\n    <li>\n      <a href=\"#Functions_with_Potential\"><span class=\"toc_number toc_depth_1\">6</span> Functions with Potential</a>\n    </li>\n    <li>\n      <a href=\"#Further_research\"><span class=\"toc_number toc_depth_1\">7</span> Further research</a>\n    </li>\n  </ul>\n</div>\n\n<p>I made a hero ship with beam weapons. I even built drifting asteroids that handle smashing into things. What gave me trouble was finding a way to teach enemy ships how to <em>avoid</em> smashing into things. You know, not perfectly, but just well enough to seem vaguely cunning and worth pretending to outsmart in a video game.</p>\n<!--more-->\n\n<p>In developing Parsec Patrol, I&#8217;ve never had plans or specifications so much as doodles &amp; daydreams. One day I imagined this scene where I&#8217;m piloting the hero ship through a shifting maze of asteroids, a dozen enemy scout ships in fast pursuit. I dodge &amp; weave through the rocks, just barely negotiating the gaps. One by one, the baddies vanish in bursts of light &amp; debris: Some succumb to my beam weapons, while others smash into rocks or bungle into each other. Classic space dogfight material, here.</p>\n<h3 id=\"where-to-start\"><span id=\"Where_to_start\">Where to start?</span></h3>\n<p>From years of playing &amp; tinkering with shooters like Unreal &amp; Quake, I had a vague notion of bots needing &#8220;pathfinding&#8221; algorithms to find their way around levels. So, I started hitting Google, looking to see what I could find and understand just well enough to eliminate from consideration or flag for a deeper dive.</p>\n<h3 id=\"waypoint-graphs--navigation-meshes\"><span id=\"Waypoint_Graphs_Navigation_Meshes\">Waypoint Graphs &amp; Navigation Meshes</span></h3>\n<p>Some of the first pathfinding tools I started reading about were <em>waypoint graphs *and *navigation meshes</em>. It turns out that some bots rely on cheat sheets: map-specific and manually placed points or polygons, traversed to get from point A to point B. Generally it&#8217;s a cheap way to make bots seem like they know where they&#8217;re going, because a human being does most of the work up front.</p>\n<div style=\"width: 322px\" class=\"wp-caption alignleft\">\n  <a href=\"http://www.ai-blog.net/archives/000152.html\"><img class=\"    \" alt=\"\" src=\"http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_waypoints2_AB.jpg\" width=\"312\" height=\"250\" /></a><p class=\"wp-caption-text\">\n    Waypoint graph\n  </p>\n</div>\n\n<div style=\"width: 322px\" class=\"wp-caption alignleft\">\n  <a href=\"www.ai-blog.net/archives/000152.html\"><img class=\"    \" alt=\"\" src=\"http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_navmesh2_AB.jpg\" width=\"312\" height=\"250\" /></a><p class=\"wp-caption-text\">\n    Navigation mesh\n  </p>\n</div>\n\n<p>Unfortunately, an asteroid field is not like a Quake map. In Parsec Patrol, the clusters of rocks are randomly generated and only get more chaotic as the rocks drift and collide. There&#8217;s just no way to handcraft a map for robots in this scenario.</p>\n<h3 id=\"a-search\"><span id=\"A_Search\">A* Search</span></h3>\n<div style=\"width: 220px\" class=\"wp-caption alignright\">\n  <a href=\"http://en.wikipedia.org/wiki/A*_search_algorithm\"><img class=\"   \" alt=\"\" src=\"http://upload.wikimedia.org/wikipedia/commons/5/5d/Astar_progress_animation.gif\" width=\"210\" height=\"210\" /></a><p class=\"wp-caption-text\">\n    A* Search animation from Wikipedia\n  </p>\n</div>\n\n<p>Another approach I found was the <a href=\"http://en.wikipedia.org/wiki/A*_search_algorithm\">A* Search algorithm</a>. There are some <a href=\"http://buildnewgames.com/astar/\">great write-ups on this algorithm</a> out there, so I won&#8217;t try making a hash of it here. You can also <a href=\"http://easystar.nodejitsu.com/demo.html\">try out some implementations in JavaScript</a>.</p>\n<p>This algorithm seems best suited for navigating graphs with few connections between nodes &#8211; a 2D grid, for example, with 8 exits per cell. If I ever wrote a roguelike dungeon crawler, this would be my jam.</p>\n<p>Unfortunately, the world of Parsec Patrol uses a continuous coordinate system, rather than a map of discrete grid cells. And, it seems like a waste to try to find a complete path from point A to point B for this game &#8211; because that path is likely to be made obsolete from moment to moment. So, how about trying to work out the best move for just the next moment?</p>\n<h3 id=\"trigonometry-refresher\"><span id=\"Trigonometry_Refresher\">Trigonometry Refresher</span></h3>\n<div style=\"width: 203px\" class=\"wp-caption alignright\">\n  <a href=\"http://www.hyperionedge.com/2010/04/tron-13-lightcycle-game-grid.html\"><img class=\"     \" alt=\"\" src=\"http://2.bp.blogspot.com/_p21BV9S5a0k/S7n0ztF4bBI/AAAAAAAACKw/u9cPiF-dSXE/s1600/TronCards14.jpg\" width=\"193\" height=\"136\" /></a><p class=\"wp-caption-text\">\n    Right angles only, for Light Cycles\n  </p>\n</div>\n\n<p>I took a short break from research and decided to see what I could come up with on my own. What does it mean to avoid an obstacle?</p>\n<p>One way to avoid a collision is to make a full right angle turn, into a perpendicular course. That works on the Light Cycle Grid, but it&#8217;s a bit extreme. So, I need an angle between 0 and 90 degrees with respect to the ship&#8217;s vector and the obstacle.</p>\n<p>So, I decided to give myself a refresher course in trigonometry:</p>\n<div id=\"attachment_1206\" style=\"width: 510px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/trig2.png\"><img class=\"size-full wp-image-1206 \" alt=\"I am not good at math\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/trig2.png\" width=\"500\" height=\"558\" /></a><p class=\"wp-caption-text\">\n    I am not good at math\n  </p>\n</div>\n\n<p>These scribblings are not meant to impress. Rather, this shows how much I forgot about high school trigonometry. Nonetheless, I worked out how to <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1034\">calculate an appropriate target angle that would miss the obstacle by a defined distance</a>. Having that angle meant that I could turn less drastically while steering for avoidance.</p>\n<p>It was a small victory &#8211; and now I remember <a href=\"http://www.mathwords.com/s/sohcahtoa.htm\">SOHCAHTOA</a> again.</p>\n<h3 id=\"spaceships-with-whiskers\"><span id=\"Spaceships_with_Whiskers\">Spaceships with Whiskers</span></h3>\n<p>Now that I had a way to calculate a steering angle that avoided smashing into something, I needed a way to know when I was headed for a collision.</p>\n<p>If I were trying to build a physical robot, I might add some whiskers to detect the nearest obstacle and trigger a turn. But, how to do that in the virtual game world? A little bit of research brought me to the notion of using <a href=\"https://www.google.com/search?q=collision+detection+ray+casting\">raycasting combined with collision detection</a>, something like this:</p>\n<div id=\"attachment_1191\" style=\"width: 394px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/2014-01-16-21.18.36.jpg\"><img class=\"wp-image-1191 \" alt=\"\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/2014-01-16-21.18.36-1024x768.jpg\" width=\"384\" height=\"288\" /></a><p class=\"wp-caption-text\">\n    Spaceships with whiskers!\n  </p>\n</div>\n\n<p><a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L987\">The algorithm I came up with</a> constructs a vector on each side of the ship. <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1008\">I project circles along the vectors</a>, with a radius based on the margin by which I hoped to avoid obstacles. In order from nearest to farthest, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1015\">I run collision detection for each of the circles</a>. The search stops with the first hit, using the nearest obstacle found.</p>\n<p>So, when my ship finds an obstacle with the whiskers, calculate the avoidance angle, and set that as the steering target for the current game tick. This ends up much more lightweight than finding a complete optimal path, and it can react from moment to moment to the changing game environment.</p>\n<div id=\"attachment_1203\" style=\"width: 510px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/whiskers-twitch-3.gif.gif\"><img class=\"size-full wp-image-1203 \" alt=\"Whiskers are twitchy\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/whiskers-twitch-3.gif.gif\" width=\"500\" height=\"380\" /></a><p class=\"wp-caption-text\">\n    My whiskers are wiggly\n  </p>\n</div>\n\n<p>Unfortunately, this scheme looks funny in action: Since <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1085\">I revert back to target seeking after resolving obstacle avoidance</a>, the enemy ships wiggle as they oscillate between the two strategies. Tracking straight toward the target often brings the ship into collision course &#8211; so once an avoidance course is achieved, target tracking turns right back into the obstacle.</p>\n<h3 id=\"functions-with-potential\"><span id=\"Functions_with_Potential\">Functions with Potential</span></h3>\n<p>What I really wanted was some way for these ships to take many nearby obstacles into account along with seeking toward the target, and come up with a smoothly changing steering angle that seemed not entirely stupid or goofy looking.</p>\n<p>After some further research, I started reading <a href=\"http://www.amazon.com/gp/product/0596005555/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596005555&amp;linkCode=as2&amp;tag=0xdecafbad01-20\">AI for Game Developers</a><img class=\"tvatbijdbdexywujcjjd svuitzfraxzoondqiznf pybiawadmcxjgjpdvhto\" style=\"border: none !important; margin: 0px !important;\" alt=\"\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=0xdecafbad01-20&l=as2&o=1&a=0596005555\" width=\"1\" height=\"1\" border=\"0\" /> by David M. Bourg and Glenn Seemann. In Chapter 5, I found code using <a href=\"http://en.wikipedia.org/wiki/Lennard-Jones_potential\">the Lennard-Jones potential function</a> to drive avoidance of multiple obstacles and target seeking all in one algorithm.</p>\n<div style=\"width: 442px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://chemwiki.ucdavis.edu/Physical_Chemistry/Quantum_Mechanics/Atomic_Theory/Intermolecular_Forces/Lennard-Jones_Potential\"><img alt=\"\" src=\"http://chemwiki.ucdavis.edu/@api/deki/files/8914/Figure_B.jpg\" width=\"432\" height=\"324\" /></a><p class=\"wp-caption-text\">\n    Serious business, this potential function\n  </p>\n</div>\n\n<p>A thumbnail sketch of this function with respect to the game goes something like this: Entities can repel &amp; attract each other. Repulsion &amp; attraction change over distance. For example, swarming entities can attract at long distance and repel when too close.</p>\n<p>Here&#8217;s what <a href=\"http://en.wikipedia.org/wiki/Lennard-Jones_potential#AB_form\">the simplified AB form of this function</a> looks like in my code:</p>\n<p><code>U = (-A/Math.pow(d,n)) + (B/Math.pow(d,m))</code></p>\n<p>There are 4 constants in this function:</p>\n<ul>\n<li><code>A</code> &#8211; magnitude of attraction</li>\n<li><code>n</code> &#8211; attenuation of attraction over distance</li>\n<li><code>B</code> &#8211; magnitude of repulsion</li>\n<li><code>m</code> &#8211; attenuation of repulsion over distance</li>\n</ul>\n<p>Pick values for these constants, and you&#8217;ve got a function that yields a positive (repulsion) or negative (attraction) value for any given distance (<code>d</code>). So far, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/sketches/steering.coffee#L85\">I&#8217;ve just used trial &amp; error to find values for these constants</a>.</p>\n<p>To apply this function, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L904\">I search for obstacles within a certain radius of the ship</a>. That limits the number of calculations, because far-flung obstacles have no significant influence. For each nearby obstacle, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L868\">I calculate distance and apply the potential function</a>. I then <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L877\">calculate a unit vector from each obstacle to the ship and multiply by the result of the potential function</a>.</p>\n<p>Repeat all the above for targets, regardless of range, and with function constants that yield attraction rather than repulsion.</p>\n<p>That leaves me with a collection of vectors, each with a direction and a magnitude representing the weighted urgency of heading in that direction right now. I sum all these vectors, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L932\">leaving a single vector with an angle useful as a steering goal</a>. I ignore the magnitude, because it was only useful during addition for influencing the angle.</p>\n<p><span class='embed-youtube' style='text-align:center; display: block;'></span></p>\n<p>Now, perhaps I&#8217;ve come off sounding smart after having written the above. But, I&#8217;ve already established that I&#8217;m not good at math. It&#8217;s quite possible I&#8217;ve abused &amp; misused this function entirely. That said, <a href=\"http://lmorchard.github.io/parsec-patrol/sketches/steering.html\">I think it&#8217;s produced a satisfying result</a>.</p>\n<div id=\"attachment_1238\" style=\"width: 485px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/potential5.gif\"><img class=\"size-full wp-image-1238 \" alt=\"Smoother steering\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/potential5.gif\" width=\"475\" height=\"375\" /></a><p class=\"wp-caption-text\">\n    Smoother steering with math!\n  </p>\n</div>\n\n<p>The <a href=\"http://lmorchard.github.io/parsec-patrol/sketches/steering.html\">demo sketch</a> has a debug mode full of confusing circles and lines, but it might help illustrate how the function works on they fly. In a nutshell, this means that closer obstacles have a greater influence on causing the ship to steer away. Meanwhile, there&#8217;s a constant influence pulling the ship back toward the target, whenever the mass of obstacles nearby do not dominate steering.</p>\n<p>I want to tinker some more, maybe see if I can make the ships swarm with each other while also avoiding obstacles and heading toward the target. I&#8217;d also like to find a way to stop guessing and calculate the function constants based on the speed &amp; steering characteristics of a given ship. That is, fast &amp; nimble ships should be able to navigate tighter spaces, while big &amp; clumsy ships should start working to avoid collisions from farther away.</p>\n<h3 id=\"further-research\"><span id=\"Further_research\">Further research</span></h3>\n<p>I&#8217;ve been thinking I need to look into <a href=\"http://gamedevelopment.tutsplus.com/tutorials/goal-based-vector-field-pathfinding--gamedev-9007\">vector fields</a> and <a href=\"http://www.red3d.com/cwr/boids/\">flocking behaviors</a> next. I&#8217;m still looking for more options to make this work, too. If you&#8217;ve made it this far reading this post, feel free to toss some suggestions &amp; critique my way. I have basically no idea what I&#8217;m doing, nor even what terms to use in searching for this stuff.</p>\n<p>Still, these are some pretty fun results stumbling along from daydreams to code.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#Where_to_start\"><span class=\"toc_number toc_depth_1\">1</span> Where to start?</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Waypoint_Graphs_Navigation_Meshes\"><span class=\"toc_number toc_depth_1\">2</span> Waypoint Graphs & Navigation Meshes</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#A_Search\"><span class=\"toc_number toc_depth_1\">3</span> A* Search</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Trigonometry_Refresher\"><span class=\"toc_number toc_depth_1\">4</span> Trigonometry Refresher</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Spaceships_with_Whiskers\"><span class=\"toc_number toc_depth_1\">5</span> Spaceships with Whiskers</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Functions_with_Potential\"><span class=\"toc_number toc_depth_1\">6</span> Functions with Potential</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Further_research\"><span class=\"toc_number toc_depth_1\">7</span> Further research</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nI made a hero ship with beam weapons. I even built drifting asteroids that handle smashing into things. What gave me trouble was finding a way to teach enemy ships how to *avoid* smashing into things. You know, not perfectly, but just well enough to seem vaguely cunning and worth pretending to outsmart in a video game.\r\n\r\n<!--more-->\r\n\r\nIn developing Parsec Patrol, I&#8217;ve never had plans or specifications so much as doodles & daydreams. One day I imagined this scene where I&#8217;m piloting the hero ship through a shifting maze of asteroids, a dozen enemy scout ships in fast pursuit. I dodge & weave through the rocks, just barely negotiating the gaps. One by one, the baddies vanish in bursts of light & debris: Some succumb to my beam weapons, while others smash into rocks or bungle into each other. Classic space dogfight material, here.\r\n\r\n### <span id=\"Where_to_start\">Where to start?</span>\r\n\r\nFrom years of playing & tinkering with shooters like Unreal & Quake, I had a vague notion of bots needing &#8220;pathfinding&#8221; algorithms to find their way around levels. So, I started hitting Google, looking to see what I could find and understand just well enough to eliminate from consideration or flag for a deeper dive.\r\n\r\n### <span id=\"Waypoint_Graphs_Navigation_Meshes\">Waypoint Graphs & Navigation Meshes</span>\r\n\r\nSome of the first pathfinding tools I started reading about were *waypoint graphs *and *navigation meshes*. It turns out that some bots rely on cheat sheets: map-specific and manually placed points or polygons, traversed to get from point A to point B. Generally it&#8217;s a cheap way to make bots seem like they know where they&#8217;re going, because a human being does most of the work up front.\r\n\r\n<div style=\"width: 322px\" class=\"wp-caption alignleft\">\r\n  <a href=\"http://www.ai-blog.net/archives/000152.html\"><img class=\"    \" alt=\"\" src=\"http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_waypoints2_AB.jpg\" width=\"312\" height=\"250\" /></a><p class=\"wp-caption-text\">\r\n    Waypoint graph\r\n  </p>\r\n</div>\r\n\r\n<div style=\"width: 322px\" class=\"wp-caption alignleft\">\r\n  <a href=\"www.ai-blog.net/archives/000152.html\"><img class=\"    \" alt=\"\" src=\"http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_navmesh2_AB.jpg\" width=\"312\" height=\"250\" /></a><p class=\"wp-caption-text\">\r\n    Navigation mesh\r\n  </p>\r\n</div>\r\n\r\nUnfortunately, an asteroid field is not like a Quake map. In Parsec Patrol, the clusters of rocks are randomly generated and only get more chaotic as the rocks drift and collide. There&#8217;s just no way to handcraft a map for robots in this scenario.\r\n\r\n### <span id=\"A_Search\">A* Search</span>\r\n\r\n<div style=\"width: 220px\" class=\"wp-caption alignright\">\r\n  <a href=\"http://en.wikipedia.org/wiki/A*_search_algorithm\"><img class=\"   \" alt=\"\" src=\"http://upload.wikimedia.org/wikipedia/commons/5/5d/Astar_progress_animation.gif\" width=\"210\" height=\"210\" /></a><p class=\"wp-caption-text\">\r\n    A* Search animation from Wikipedia\r\n  </p>\r\n</div>\r\n\r\nAnother approach I found was the [A* Search algorithm][1]. There are some [great write-ups on this algorithm][2] out there, so I won&#8217;t try making a hash of it here. You can also [try out some implementations in JavaScript][3].\r\n\r\nThis algorithm seems best suited for navigating graphs with few connections between nodes &#8211; a 2D grid, for example, with 8 exits per cell. If I ever wrote a roguelike dungeon crawler, this would be my jam.\r\n\r\nUnfortunately, the world of Parsec Patrol uses a continuous coordinate system, rather than a map of discrete grid cells. And, it seems like a waste to try to find a complete path from point A to point B for this game &#8211; because that path is likely to be made obsolete from moment to moment. So, how about trying to work out the best move for just the next moment?\r\n\r\n### <span id=\"Trigonometry_Refresher\">Trigonometry Refresher</span>\r\n\r\n<div style=\"width: 203px\" class=\"wp-caption alignright\">\r\n  <a href=\"http://www.hyperionedge.com/2010/04/tron-13-lightcycle-game-grid.html\"><img class=\"     \" alt=\"\" src=\"http://2.bp.blogspot.com/_p21BV9S5a0k/S7n0ztF4bBI/AAAAAAAACKw/u9cPiF-dSXE/s1600/TronCards14.jpg\" width=\"193\" height=\"136\" /></a><p class=\"wp-caption-text\">\r\n    Right angles only, for Light Cycles\r\n  </p>\r\n</div>\r\n\r\nI took a short break from research and decided to see what I could come up with on my own. What does it mean to avoid an obstacle?\r\n\r\nOne way to avoid a collision is to make a full right angle turn, into a perpendicular course. That works on the Light Cycle Grid, but it&#8217;s a bit extreme. So, I need an angle between 0 and 90 degrees with respect to the ship&#8217;s vector and the obstacle.\r\n\r\nSo, I decided to give myself a refresher course in trigonometry:\r\n\r\n<div id=\"attachment_1206\" style=\"width: 510px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/trig2.png\"><img class=\"size-full wp-image-1206 \" alt=\"I am not good at math\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/trig2.png\" width=\"500\" height=\"558\" /></a><p class=\"wp-caption-text\">\r\n    I am not good at math\r\n  </p>\r\n</div>\r\n\r\nThese scribblings are not meant to impress. Rather, this shows how much I forgot about high school trigonometry. Nonetheless, I worked out how to [calculate an appropriate target angle that would miss the obstacle by a defined distance][4]. Having that angle meant that I could turn less drastically while steering for avoidance.\r\n\r\nIt was a small victory &#8211; and now I remember [SOHCAHTOA][5] again.\r\n\r\n### <span id=\"Spaceships_with_Whiskers\">Spaceships with Whiskers</span>\r\n\r\nNow that I had a way to calculate a steering angle that avoided smashing into something, I needed a way to know when I was headed for a collision.\r\n\r\nIf I were trying to build a physical robot, I might add some whiskers to detect the nearest obstacle and trigger a turn. But, how to do that in the virtual game world? A little bit of research brought me to the notion of using [raycasting combined with collision detection][6], something like this:\r\n\r\n<div id=\"attachment_1191\" style=\"width: 394px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/2014-01-16-21.18.36.jpg\"><img class=\"wp-image-1191 \" alt=\"\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/2014-01-16-21.18.36-1024x768.jpg\" width=\"384\" height=\"288\" /></a><p class=\"wp-caption-text\">\r\n    Spaceships with whiskers!\r\n  </p>\r\n</div>\r\n\r\n[The algorithm I came up with][7] constructs a vector on each side of the ship. [I project circles along the vectors][8], with a radius based on the margin by which I hoped to avoid obstacles. In order from nearest to farthest, [I run collision detection for each of the circles][9]. The search stops with the first hit, using the nearest obstacle found.\r\n\r\nSo, when my ship finds an obstacle with the whiskers, calculate the avoidance angle, and set that as the steering target for the current game tick. This ends up much more lightweight than finding a complete optimal path, and it can react from moment to moment to the changing game environment.\r\n\r\n<div id=\"attachment_1203\" style=\"width: 510px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/whiskers-twitch-3.gif.gif\"><img class=\"size-full wp-image-1203 \" alt=\"Whiskers are twitchy\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/whiskers-twitch-3.gif.gif\" width=\"500\" height=\"380\" /></a><p class=\"wp-caption-text\">\r\n    My whiskers are wiggly\r\n  </p>\r\n</div>\r\n\r\nUnfortunately, this scheme looks funny in action: Since [I revert back to target seeking after resolving obstacle avoidance][10], the enemy ships wiggle as they oscillate between the two strategies. Tracking straight toward the target often brings the ship into collision course &#8211; so once an avoidance course is achieved, target tracking turns right back into the obstacle.\r\n\r\n### <span id=\"Functions_with_Potential\">Functions with Potential</span>\r\n\r\nWhat I really wanted was some way for these ships to take many nearby obstacles into account along with seeking toward the target, and come up with a smoothly changing steering angle that seemed not entirely stupid or goofy looking.\r\n\r\nAfter some further research, I started reading [AI for Game Developers][11]<img class=\"tvatbijdbdexywujcjjd svuitzfraxzoondqiznf pybiawadmcxjgjpdvhto\" style=\"border: none !important; margin: 0px !important;\" alt=\"\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=0xdecafbad01-20&l=as2&o=1&a=0596005555\" width=\"1\" height=\"1\" border=\"0\" /> by David M. Bourg and Glenn Seemann. In Chapter 5, I found code using [the Lennard-Jones potential function][12] to drive avoidance of multiple obstacles and target seeking all in one algorithm.\r\n\r\n<div style=\"width: 442px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://chemwiki.ucdavis.edu/Physical_Chemistry/Quantum_Mechanics/Atomic_Theory/Intermolecular_Forces/Lennard-Jones_Potential\"><img alt=\"\" src=\"http://chemwiki.ucdavis.edu/@api/deki/files/8914/Figure_B.jpg\" width=\"432\" height=\"324\" /></a><p class=\"wp-caption-text\">\r\n    Serious business, this potential function\r\n  </p>\r\n</div>\r\n\r\nA thumbnail sketch of this function with respect to the game goes something like this: Entities can repel & attract each other. Repulsion & attraction change over distance. For example, swarming entities can attract at long distance and repel when too close.\r\n\r\nHere&#8217;s what [the simplified AB form of this function][13] looks like in my code:\r\n\r\n`U = (-A/Math.pow(d,n)) + (B/Math.pow(d,m))`\r\n\r\nThere are 4 constants in this function:\r\n\r\n*   `A` &#8211; magnitude of attraction\r\n*   `n` &#8211; attenuation of attraction over distance\r\n*   `B` &#8211; magnitude of repulsion\r\n*   `m` &#8211; attenuation of repulsion over distance\r\n\r\nPick values for these constants, and you&#8217;ve got a function that yields a positive (repulsion) or negative (attraction) value for any given distance (`d`). So far, [I&#8217;ve just used trial & error to find values for these constants][14].\r\n\r\nTo apply this function, [I search for obstacles within a certain radius of the ship][15]. That limits the number of calculations, because far-flung obstacles have no significant influence. For each nearby obstacle, [I calculate distance and apply the potential function][16]. I then [calculate a unit vector from each obstacle to the ship and multiply by the result of the potential function][17].\r\n\r\nRepeat all the above for targets, regardless of range, and with function constants that yield attraction rather than repulsion.\r\n\r\nThat leaves me with a collection of vectors, each with a direction and a magnitude representing the weighted urgency of heading in that direction right now. I sum all these vectors, [leaving a single vector with an angle useful as a steering goal][18]. I ignore the magnitude, because it was only useful during addition for influencing the angle.\r\n\r\n<span class='embed-youtube' style='text-align:center; display: block;'></span>\r\n\r\nNow, perhaps I&#8217;ve come off sounding smart after having written the above. But, I&#8217;ve already established that I&#8217;m not good at math. It&#8217;s quite possible I&#8217;ve abused & misused this function entirely. That said, [I think it&#8217;s produced a satisfying result][19].\r\n\r\n<div id=\"attachment_1238\" style=\"width: 485px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/potential5.gif\"><img class=\"size-full wp-image-1238 \" alt=\"Smoother steering\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/potential5.gif\" width=\"475\" height=\"375\" /></a><p class=\"wp-caption-text\">\r\n    Smoother steering with math!\r\n  </p>\r\n</div>\r\n\r\nThe [demo sketch][19] has a debug mode full of confusing circles and lines, but it might help illustrate how the function works on they fly. In a nutshell, this means that closer obstacles have a greater influence on causing the ship to steer away. Meanwhile, there&#8217;s a constant influence pulling the ship back toward the target, whenever the mass of obstacles nearby do not dominate steering.\r\n\r\nI want to tinker some more, maybe see if I can make the ships swarm with each other while also avoiding obstacles and heading toward the target. I&#8217;d also like to find a way to stop guessing and calculate the function constants based on the speed & steering characteristics of a given ship. That is, fast & nimble ships should be able to navigate tighter spaces, while big & clumsy ships should start working to avoid collisions from farther away.\r\n\r\n### <span id=\"Further_research\">Further research</span>\r\n\r\nI&#8217;ve been thinking I need to look into [vector fields][20] and [flocking behaviors][21] next. I&#8217;m still looking for more options to make this work, too. If you&#8217;ve made it this far reading this post, feel free to toss some suggestions & critique my way. I have basically no idea what I&#8217;m doing, nor even what terms to use in searching for this stuff.\r\n\r\nStill, these are some pretty fun results stumbling along from daydreams to code.\r\n\r\n [1]: http://en.wikipedia.org/wiki/A*_search_algorithm\r\n [2]: http://buildnewgames.com/astar/\r\n [3]: http://easystar.nodejitsu.com/demo.html\r\n [4]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1034\r\n [5]: http://www.mathwords.com/s/sohcahtoa.htm\r\n [6]: https://www.google.com/search?q=collision+detection+ray+casting\r\n [7]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L987\r\n [8]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1008\r\n [9]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1015\r\n [10]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1085\r\n [11]: http://www.amazon.com/gp/product/0596005555/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0596005555&linkCode=as2&tag=0xdecafbad01-20\r\n [12]: http://en.wikipedia.org/wiki/Lennard-Jones_potential\r\n [13]: http://en.wikipedia.org/wiki/Lennard-Jones_potential#AB_form\r\n [14]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/sketches/steering.coffee#L85\r\n [15]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L904\r\n [16]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L868\r\n [17]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L877\r\n [18]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L932\r\n [19]: http://lmorchard.github.io/parsec-patrol/sketches/steering.html\r\n [20]: http://gamedevelopment.tutsplus.com/tutorials/goal-based-vector-field-pathfinding--gamedev-9007\r\n [21]: http://www.red3d.com/cwr/boids/",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/01/18/ppd-avoidance",
    "thumbnail": "http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_waypoints2_AB.jpg",
    "summary": "\n\n<p>I made a hero ship with beam weapons. I even built drifting asteroids that handle smashing into things. What gave me trouble was finding a way to teach enemy ships how to <em>avoid</em> smashing into things. You know, not perfectly, but just well enough to seem vaguely cunning and worth pretending to outsmart in a video game.</p>\n"
  },
  {
    "title": "Parsec Patrol Diaries: Entity Component Systems",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/11/27/entity-component-system",
    "dsq_thread_id": [
      2003369569
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2013",
    "month": "11",
    "day": "27",
    "isDir": false,
    "slug": "entity-component-system",
    "date": "2013-11-27T12:00:00.000Z",
    "postName": "2013-11-27-entity-component-system",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Background\"><span class=\"toc_number toc_depth_1\">1</span> Background</a>\n    </li>\n    <li>\n      <a href=\"#Entities\"><span class=\"toc_number toc_depth_1\">2</span> Entities</a>\n    </li>\n    <li>\n      <a href=\"#Components\"><span class=\"toc_number toc_depth_1\">3</span> Components</a>\n    </li>\n    <li>\n      <a href=\"#Systems\"><span class=\"toc_number toc_depth_1\">4</span> Systems</a>\n    </li>\n    <li>\n      <a href=\"#Putting_it_together\"><span class=\"toc_number toc_depth_1\">5</span> Putting it together</a>\n    </li>\n    <li>\n      <a href=\"#Having_fun_with_it\"><span class=\"toc_number toc_depth_1\">6</span> Having fun with it</a>\n    </li>\n  </ul>\n</div>\n\n<p>The <strong>Entity</strong>, <strong>Component</strong>, &amp; <strong>System</strong> design pattern is old hat for many game developers. But, keep in mind that I&#8217;m a web developer, and mostly on the server side of things for the past decade or so. One of my last big revelations was discovering the Model, View, &amp; Controller way of doing things. Apropos of that, this ECS thing seems to be a Big Deal of similar proportions.</p>\n<!--more-->\n\n<p>When I first started working on <a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec Patrol</a>, I started sketching out a plain vanilla class hierarchy. You know, the kind I saw when I first started learning about Object Oriented Programming.</p>\n<p>I started with an <code>Entity</code>, which begat a <code>RenderableEntity</code>, which begat things like a <code>SpaceShipWithThrustersRenderableEntity</code>. I built a game loop that iterated through all the objects in the universe, calling a <code>tick()</code> method on each in turn. Simple, just like things I&#8217;d seen in textbooks.</p>\n<p>As I started trying to pile things in, though, I flirted with <a href=\"http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem\">multiple inheritance</a> and primitive <a href=\"http://en.wikipedia.org/wiki/Composite_pattern\">composite patterns</a> and everything just got messy and slow. Performance sucked, and <a href=\"http://blog.artillery.com/2012/10/browser-garbage-collection-and-framerate.html\">garbage collection</a> went wild. So, I figured I must be Doing It Wrong, and started on a Google quest into game engine design to maybe absorb some modern thinking on these matters. Eventually, I stubbed my brain on the notion of an &#8220;entity/component system&#8221;.</p>\n<h2 id=\"background\"><span id=\"Background\">Background</span></h2>\n<p>Plenty of other blog posts &amp; articles out there have done a great job of describing how an ECS design works:</p>\n<ul>\n<li><a href=\"http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/\">Entity Systems are the future of MMOG development</a> (Sep 2007)</li>\n<li><a href=\"http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/\">Evolve Your Hierarchy</a> (Jan 2007)</li>\n<li><a href=\"http://www.richardlord.net/blog/why-use-an-entity-framework\">Why use an entity system framework for game development?</a> (Feb 2012)</li>\n<li><a href=\"http://www.chris-granger.com/2012/12/11/anatomy-of-a-knockout/\">Anatomy of a Knockout</a> (Dec 2012)</li>\n<li><a href=\"http://www.gamedev.net/page/resources/_/technical/game-programming/understanding-component-entity-systems-r3013\">Understanding Component-Entity-Systems</a> (April 2013)</li>\n<li><a href=\"http://gamadu.com/artemis/tutorial.html\">Artemis Entity System Framework</a></li>\n<li><a href=\"http://www.ashframework.org/\">Ash entity framework</a></li>\n</ul>\n<p>I don&#8217;t want to totally reinvent the wheel here. But, let&#8217;s see if I can&#8217;t break it down a little, if only to convey my excitement with discovering this design pattern and the fun I&#8217;ve had with it.</p>\n<h2 id=\"entities\"><span id=\"Entities\">Entities</span></h2>\n<p>First, you&#8217;ve got the <strong>Entity</strong>: Everything in the game universe is an <strong>Entity</strong> &#8211; ships, rocks, missiles, the works. In my naive OOP world, Entities were instances of classes from my tangly, thorny hierarchy.</p>\n<p>But, in this ECS world, an <strong>Entity</strong> is a database ID &#8211; just a string, really.</p>\n<div id=\"attachment_1143\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities.jpg\"><img class=\"size-large wp-image-1143\" alt=\"Entities\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Entities: OOP & ECS\n  </p>\n</div>\n\n<p>Wait, what? Yeah, that was the first thing that bruised my lobes. This design pattern turns everything inside out. An ECS framework is better understood as a data-oriented system than an object-oriented system. In fact, <a href=\"http://t-machine.org/index.php/2009/10/26/entity-systems-are-the-future-of-mmos-part-5/\">a blog post describing an ECS system in relational database terms</a> really drove it home for me.</p>\n<h2 id=\"components\"><span id=\"Components\">Components</span></h2>\n<p>So, given that an <strong>Entity</strong> is an ID in a system that looks like a SQL database from a certain angle, what&#8217;s in the database?</p>\n<p><strong>Components</strong> are in the database. Specifically, <strong>Component</strong> types correspond to tables and <strong>Component</strong> instances correspond to rows. Structurally, a <strong>Component</strong> is a collection of properties &#8211; not unlike the columns in a row in a table in a database.</p>\n<div id=\"attachment_1145\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.14.50.jpg\"><img class=\"size-large wp-image-1145\" alt=\"Parsec Patrol Components\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.14.50-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Components: OOP & ECS\n  </p>\n</div>\n\n<p>In case it doesn&#8217;t quite make sense yet, here are some sample <strong>Components</strong>:</p>\n<ul>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L86\"><strong>Sprite</strong></a> &#8211; <em>width, height, shape</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L26\"><strong>Position</strong></a> &#8211; <em>x, y, rotation</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L33\"><strong>Motion</strong></a> &#8211; <em>dx, dy, drotation</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L40\"><strong>Thruster</strong></a> &#8211; <em>accel_per_second, max_speed</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L110\"><strong>Seeker</strong></a> &#8211; <em>target_entity_id, rotation_per_second</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L201\"><strong>Health</strong></a> &#8211; <em>max_health, current_health</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L201\"><strong>BeamWeapon</strong></a> &#8211; <em>max_power, current_power, recharge_per_second</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L137\"><strong>MissileWeapon</strong></a> &#8211; <em>number_turrets, reload_delay</em></li>\n</ul>\n<p>Imagine each of those as schema for database tables, each with the <strong>Entity</strong> ID as primary key. Given an <strong>Entity</strong> ID, you can query across all the tables and assemble a set of <strong>Components</strong> that completely describe an <strong>Entity</strong> in the game universe.</p>\n<p>Note that any given <strong>Entity</strong> can be composed of any combination of these <strong>Components</strong>: A spaceship might be described by <strong>Shape</strong>, <strong>Position</strong>, <strong>Motion</strong>, <strong>Thruster</strong>, <strong>Health</strong>, and <strong>BeamWeapon</strong>. Meanwhile, an asteroid drifting in space might only offer <strong>Shape</strong>, <strong>Position</strong>, and <strong>Motion</strong>.</p>\n<p>(Also, just to be pedantic: This doesn&#8217;t <em>really</em> have to live in a SQL database. In fact, I currently just use an ad-hoc in-memory key-value store &#8211; i.e. <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/entities.coffee#L9\">a set of heavily-abused JavaScript objects</a>.)</p>\n<h2 id=\"systems\"><span id=\"Systems\">Systems</span></h2>\n<p>So, where&#8217;s the stuff that makes things go? In an OOP design, this would live in the methods of the objects, bundled by classes to go alongside the data. In the ECS design, <strong>Entities</strong> are <em>just</em> IDs and <strong>Components</strong> are <em>just</em> data &#8211; neither methods nor code implementing game logic live in either of those artifacts.</p>\n<p>This is where <strong>Systems</strong> come in: <strong>Systems</strong> are modular mini-game loops. The <a href=\"https://github.com/lmorchard/parsec-patrol/blob/master/app/scripts/worlds.coffee#L62\">&#8220;master&#8221; game loop</a> holds a list of available systems and runs a <code>tick()</code> method on each of those in turn. Each <strong>System</strong> performs a query against the <strong>Component</strong> database &#8211; usually for all instances of a particular type &#8211; and crunches through updating the properties for each.</p>\n<div id=\"attachment_1146\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.47.11.jpg\"><img class=\"size-large wp-image-1146\" alt=\"Systems: Most confusing diagram ever?\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.47.11-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Systems: Most confusing diagram ever?\n  </p>\n</div>\n\n<p>Consider a <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L793\"><strong>MotionSystem</strong></a>:</p>\n<ul>\n<li>Fetch all the <strong>Motion</strong> components from the database</li>\n<li>For each <strong>Motion</strong>, look up a <strong>Position</strong> for the same <strong>Entity</strong>.</li>\n<li>Update the <code>x</code>, <code>y</code>, and <code>rotation</code> properties of the <strong>Position</strong> using the <strong>Motion</strong> properties.</li>\n</ul>\n<p>Consider a <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1136\"><strong>SeekerSystem</strong></a>:</p>\n<ul>\n<li>Fetch all the <strong>Seeker</strong> components.</li>\n<li>For each, find the <strong>Motion</strong> and <strong>Position</strong> components for the corresponding <strong>Entity</strong>.</li>\n<li>Also find <strong>Motion</strong> &amp; <strong>Position</strong> for the <strong>Entity</strong> identified as the <code>target_entity_id</code>.</li>\n<li>Calculate the angle between seeker &amp; target, update <strong>Motion</strong> to steer toward the target.</li>\n</ul>\n<p>Notice that each system deals only with data directly relevant to the job at hand. Rather than loading up a full representation of an <strong>Entity</strong>, each <strong>System</strong> only touches the specific <strong>Components</strong> needed. For instance, <strong>MotionSystem</strong> and <strong>SeekerSystem</strong> touch <strong>Motion</strong> and <strong>Position</strong> - but never <strong>Shape Components</strong>.</p>\n<p>This adds some efficiencies for data stored entirely in memory. But, I expect this will have <em>huge</em> implications for data that might someday come from a database or over a network. I&#8217;m also thinking that this pattern lends well to shuffling certain systems off onto background threads or Web Workers &#8211; the need for data coordination is limited to just the relevant <strong>Components</strong> when needed.</p>\n<h2 id=\"putting-it-together\"><span id=\"Putting_it_together\">Putting it together</span></h2>\n<div id=\"attachment_1149\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://lmorchard.github.io/parsec-patrol/sketches/sprites.html\"><img class=\"size-large wp-image-1149 \" alt=\"Parsec Patrol Dancing Sprites\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/Screenshot-2013-11-27-11.16.42-1024x714.png\" width=\"640\" height=\"446\" /></a><p class=\"wp-caption-text\">\n    Parade! Of! Sprites!\n  </p>\n</div>\n\n<p>These <strong>Systems</strong> feel a lot like <a href=\"html5hub.com/build-a-javascript-particle-system/\">particle systems</a>: Tight, focused code working close to the metal with data, skipping a lot of overhead and object juggling. <strong>Components</strong> get modified in place and are rarely discarded &#8211; that seems to save me from a lot of <a href=\"http://buildnewgames.com/garbage-collector-friendly-code/\">garbage collection issues</a>. And, if a particular <strong>Component</strong> is not actually used by any existing <strong>Entity</strong>, the <strong>System</strong> looking for it just won&#8217;t perform any work.</p>\n<p>For the most part, <strong>Systems</strong> act independently &amp; are very loosely coupled. They can cooperate through shared <strong>Component</strong> data &#8211; consider how the <strong>SeekerSystem</strong> modifies the <strong>Motion</strong> <strong>Component</strong>, and the <strong>MotionSystem</strong> uses that data to move the <strong>Position</strong> <strong>Component</strong>. I&#8217;m also playing with <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/worlds.coffee#L38\">a crude pub/sub messaging system</a> for things like <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1583\">transmitting damage</a> from one <strong>Entity</strong> to another, but I suspect that might be the wrong approach.</p>\n<p>And, once I was freed from my tangled class hierarchy, things started to get fun. The mental cost for adding a new layer to the system dropped fast: Add a new <strong>Component</strong> or two, add a new <strong>System</strong> &#8211; and suddenly <strong>Entities</strong> can do new things!</p>\n<h2 id=\"having-fun-with-it\"><span id=\"Having_fun_with_it\">Having fun with it</span></h2>\n<p>And, the most fun part? I get to describe things in the game world like a five-year-old and not give a crap about serious programming stuff:</p>\n<div id=\"attachment_1148\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-11.06.12.jpg\"><img class=\"size-large wp-image-1148\" alt=\"Spaceship doodles\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-11.06.12-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Spaceship doodles\n  </p>\n</div>\n\n<p>I&#8217;ve got <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/radar.coffee#L103\">a bad guy space ship</a>! And it&#8217;s <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L660\">shaped like an arrow</a>! And it&#8217;s got <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1193\">rocket thrusters</a>! And it <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1193\">chases the good guy</a>! And it has <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1271\">missile launchers</a>! And <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1574\">it blows up when the hero shoots it a lot</a>!</p>\n<p>Oh, and I&#8217;ve got <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/radar.coffee#L47\">a good guy ship</a>! And it&#8217;s <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L646\">shaped like a cool thing different than an arrow</a>! And it&#8217;s also got <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1193\">rocket thrusters</a>! And <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1245\">it goes where you click</a>! And <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1435\">it has lots of laser beam guns</a>!</p>\n<p>Oh, and <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/fields.coffee#L95\">there are rocks</a>! They kind of spin a bit and drift around! They <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L803\">bounce when they run into things</a>! Sometimes <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1608\">they blow up</a>!</p>\n<p>That&#8217;s almost exactly the running dialog in my head when I write the code. It&#8217;s pretty cool.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n  \n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Background\"><span class=\"toc_number toc_depth_1\">1</span> Background</a>\n    </li>\n    <li>\n      <a href=\"#Entities\"><span class=\"toc_number toc_depth_1\">2</span> Entities</a>\n    </li>\n    <li>\n      <a href=\"#Components\"><span class=\"toc_number toc_depth_1\">3</span> Components</a>\n    </li>\n    <li>\n      <a href=\"#Systems\"><span class=\"toc_number toc_depth_1\">4</span> Systems</a>\n    </li>\n    <li>\n      <a href=\"#Putting_it_together\"><span class=\"toc_number toc_depth_1\">5</span> Putting it together</a>\n    </li>\n    <li>\n      <a href=\"#Having_fun_with_it\"><span class=\"toc_number toc_depth_1\">6</span> Having fun with it</a>\n    </li>\n  </ul>\n</div>\n\nThe **Entity**, **Component**, & **System** design pattern is old hat for many game developers. But, keep in mind that I&#8217;m a web developer, and mostly on the server side of things for the past decade or so. One of my last big revelations was discovering the Model, View, & Controller way of doing things. Apropos of that, this ECS thing seems to be a Big Deal of similar proportions.\n\n<!--more-->\n\nWhen I first started working on [Parsec Patrol][1], I started sketching out a plain vanilla class hierarchy. You know, the kind I saw when I first started learning about Object Oriented Programming.\n\nI started with an `Entity`, which begat a `RenderableEntity`, which begat things like a `SpaceShipWithThrustersRenderableEntity`. I built a game loop that iterated through all the objects in the universe, calling a `tick()` method on each in turn. Simple, just like things I&#8217;d seen in textbooks.\n\nAs I started trying to pile things in, though, I flirted with [multiple inheritance][2] and primitive [composite patterns][3] and everything just got messy and slow. Performance sucked, and [garbage collection][4] went wild. So, I figured I must be Doing It Wrong, and started on a Google quest into game engine design to maybe absorb some modern thinking on these matters. Eventually, I stubbed my brain on the notion of an &#8220;entity/component system&#8221;.\n\n## <span id=\"Background\">Background</span>\n\nPlenty of other blog posts & articles out there have done a great job of describing how an ECS design works:\n\n*   [Entity Systems are the future of MMOG development][5] (Sep 2007)\n*   [Evolve Your Hierarchy][6] (Jan 2007)\n*   [Why use an entity system framework for game development?][7] (Feb 2012)\n*   [Anatomy of a Knockout][8] (Dec 2012)\n*   [Understanding Component-Entity-Systems][9] (April 2013)\n*   [Artemis Entity System Framework][10]\n*   [Ash entity framework][11]\n\nI don&#8217;t want to totally reinvent the wheel here. But, let&#8217;s see if I can&#8217;t break it down a little, if only to convey my excitement with discovering this design pattern and the fun I&#8217;ve had with it.\n\n## <span id=\"Entities\">Entities</span>\n\nFirst, you&#8217;ve got the **Entity**: Everything in the game universe is an **Entity** &#8211; ships, rocks, missiles, the works. In my naive OOP world, Entities were instances of classes from my tangly, thorny hierarchy.\n\nBut, in this ECS world, an **Entity** is a database ID &#8211; just a string, really.\n\n<div id=\"attachment_1143\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities.jpg\"><img class=\"size-large wp-image-1143\" alt=\"Entities\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Entities: OOP & ECS\n  </p>\n</div>\n\nWait, what? Yeah, that was the first thing that bruised my lobes. This design pattern turns everything inside out. An ECS framework is better understood as a data-oriented system than an object-oriented system. In fact, [a blog post describing an ECS system in relational database terms][12] really drove it home for me.\n\n## <span id=\"Components\">Components</span>\n\nSo, given that an **Entity** is an ID in a system that looks like a SQL database from a certain angle, what&#8217;s in the database?\n\n**Components** are in the database. Specifically, **Component** types correspond to tables and **Component** instances correspond to rows. Structurally, a **Component** is a collection of properties &#8211; not unlike the columns in a row in a table in a database.\n\n<div id=\"attachment_1145\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.14.50.jpg\"><img class=\"size-large wp-image-1145\" alt=\"Parsec Patrol Components\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.14.50-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Components: OOP & ECS\n  </p>\n</div>\n\nIn case it doesn&#8217;t quite make sense yet, here are some sample **Components**:\n\n*   [**Sprite**][13] &#8211; *width, height, shape*\n*   [**Position**][14] &#8211; *x, y, rotation*\n*   [**Motion**][15] &#8211; *dx, dy, drotation*\n*   [**Thruster**][16] &#8211; *accel\\_per\\_second, max_speed*\n*   [**Seeker**][17] &#8211; *target\\_entity\\_id, rotation\\_per\\_second*\n*   [**Health**][18] &#8211; *max\\_health, current\\_health*\n*   [**BeamWeapon**][18] &#8211; *max\\_power, current\\_power, recharge\\_per\\_second*\n*   [**MissileWeapon**][19] &#8211; *number\\_turrets, reload\\_delay*\n\nImagine each of those as schema for database tables, each with the **Entity** ID as primary key. Given an **Entity** ID, you can query across all the tables and assemble a set of **Components** that completely describe an **Entity** in the game universe.\n\nNote that any given **Entity** can be composed of any combination of these **Components**: A spaceship might be described by **Shape**, **Position**, **Motion**, **Thruster**, **Health**, and **BeamWeapon**. Meanwhile, an asteroid drifting in space might only offer **Shape**, **Position**, and **Motion**.\n\n(Also, just to be pedantic: This doesn&#8217;t *really* have to live in a SQL database. In fact, I currently just use an ad-hoc in-memory key-value store &#8211; i.e. [a set of heavily-abused JavaScript objects][20].)\n\n## <span id=\"Systems\">Systems</span>\n\nSo, where&#8217;s the stuff that makes things go? In an OOP design, this would live in the methods of the objects, bundled by classes to go alongside the data. In the ECS design, **Entities** are *just* IDs and **Components** are *just* data &#8211; neither methods nor code implementing game logic live in either of those artifacts.\n\nThis is where **Systems** come in: **Systems** are modular mini-game loops. The [&#8220;master&#8221; game loop][21] holds a list of available systems and runs a `tick()` method on each of those in turn. Each **System** performs a query against the **Component** database &#8211; usually for all instances of a particular type &#8211; and crunches through updating the properties for each.\n\n<div id=\"attachment_1146\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.47.11.jpg\"><img class=\"size-large wp-image-1146\" alt=\"Systems: Most confusing diagram ever?\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.47.11-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Systems: Most confusing diagram ever?\n  </p>\n</div>\n\nConsider a [**MotionSystem**][22]:\n\n*   Fetch all the **Motion** components from the database\n*   For each **Motion**, look up a **Position** for the same **Entity**.\n*   Update the `x`, `y`, and `rotation` properties of the **Position** using the **Motion** properties.\n\nConsider a [**SeekerSystem**][23]:\n\n*   Fetch all the **Seeker** components.\n*   For each, find the **Motion** and **Position** components for the corresponding **Entity**.\n*   Also find **Motion** & **Position** for the **Entity** identified as the `target_entity_id`.\n*   Calculate the angle between seeker & target, update **Motion** to steer toward the target.\n\nNotice that each system deals only with data directly relevant to the job at hand. Rather than loading up a full representation of an **Entity**, each **System** only touches the specific **Components** needed. For instance, **MotionSystem** and **SeekerSystem** touch **Motion** and **Position** - but never **Shape Components**.\n\nThis adds some efficiencies for data stored entirely in memory. But, I expect this will have *huge* implications for data that might someday come from a database or over a network. I&#8217;m also thinking that this pattern lends well to shuffling certain systems off onto background threads or Web Workers &#8211; the need for data coordination is limited to just the relevant **Components** when needed.\n\n## <span id=\"Putting_it_together\">Putting it together</span>\n\n<div id=\"attachment_1149\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://lmorchard.github.io/parsec-patrol/sketches/sprites.html\"><img class=\"size-large wp-image-1149 \" alt=\"Parsec Patrol Dancing Sprites\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/Screenshot-2013-11-27-11.16.42-1024x714.png\" width=\"640\" height=\"446\" /></a><p class=\"wp-caption-text\">\n    Parade! Of! Sprites!\n  </p>\n</div>\n\nThese **Systems** feel a lot like [particle systems][24]: Tight, focused code working close to the metal with data, skipping a lot of overhead and object juggling. **Components** get modified in place and are rarely discarded &#8211; that seems to save me from a lot of [garbage collection issues][25]. And, if a particular **Component** is not actually used by any existing **Entity**, the **System** looking for it just won&#8217;t perform any work.\n\nFor the most part, **Systems** act independently & are very loosely coupled. They can cooperate through shared **Component** data &#8211; consider how the **SeekerSystem** modifies the **Motion** **Component**, and the **MotionSystem** uses that data to move the **Position** **Component**. I&#8217;m also playing with [a crude pub/sub messaging system][26] for things like [transmitting damage][27] from one **Entity** to another, but I suspect that might be the wrong approach.\n\nAnd, once I was freed from my tangled class hierarchy, things started to get fun. The mental cost for adding a new layer to the system dropped fast: Add a new **Component** or two, add a new **System** &#8211; and suddenly **Entities** can do new things!\n\n## <span id=\"Having_fun_with_it\">Having fun with it</span>\n\nAnd, the most fun part? I get to describe things in the game world like a five-year-old and not give a crap about serious programming stuff:\n\n<div id=\"attachment_1148\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-11.06.12.jpg\"><img class=\"size-large wp-image-1148\" alt=\"Spaceship doodles\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-11.06.12-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Spaceship doodles\n  </p>\n</div>\n\nI&#8217;ve got [a bad guy space ship][28]! And it&#8217;s [shaped like an arrow][29]! And it&#8217;s got [rocket thrusters][30]! And it [chases the good guy][30]! And it has [missile launchers][31]! And [it blows up when the hero shoots it a lot][32]!\n\nOh, and I&#8217;ve got [a good guy ship][33]! And it&#8217;s [shaped like a cool thing different than an arrow][34]! And it&#8217;s also got [rocket thrusters][30]! And [it goes where you click][35]! And [it has lots of laser beam guns][36]!\n\nOh, and [there are rocks][37]! They kind of spin a bit and drift around! They [bounce when they run into things][38]! Sometimes [they blow up][39]!\n\nThat&#8217;s almost exactly the running dialog in my head when I write the code. It&#8217;s pretty cool.\n\n [1]: https://github.com/lmorchard/parsec-patrol\n [2]: http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem\n [3]: http://en.wikipedia.org/wiki/Composite_pattern\n [4]: http://blog.artillery.com/2012/10/browser-garbage-collection-and-framerate.html\n [5]: http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/\n [6]: http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/\n [7]: http://www.richardlord.net/blog/why-use-an-entity-framework\n [8]: http://www.chris-granger.com/2012/12/11/anatomy-of-a-knockout/\n [9]: http://www.gamedev.net/page/resources/_/technical/game-programming/understanding-component-entity-systems-r3013\n [10]: http://gamadu.com/artemis/tutorial.html\n [11]: http://www.ashframework.org/\n [12]: http://t-machine.org/index.php/2009/10/26/entity-systems-are-the-future-of-mmos-part-5/\n [13]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L86\n [14]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L26\n [15]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L33\n [16]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L40\n [17]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L110\n [18]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L201\n [19]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L137\n [20]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/entities.coffee#L9\n [21]: https://github.com/lmorchard/parsec-patrol/blob/master/app/scripts/worlds.coffee#L62\n [22]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L793\n [23]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1136\n [24]: html5hub.com/build-a-javascript-particle-system/\n [25]: http://buildnewgames.com/garbage-collector-friendly-code/\n [26]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/worlds.coffee#L38\n [27]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1583\n [28]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/radar.coffee#L103\n [29]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L660\n [30]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1193\n [31]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1271\n [32]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1574\n [33]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/radar.coffee#L47\n [34]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L646\n [35]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1245\n [36]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1435\n [37]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/fields.coffee#L95\n [38]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L803\n [39]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1608\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/11/27/entity-component-system",
    "thumbnail": "http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities-1024x577.jpg",
    "summary": "\n\n<p>The <strong>Entity</strong>, <strong>Component</strong>, &amp; <strong>System</strong> design pattern is old hat for many game developers. But, keep in mind that I&#x2019;m a web developer, and mostly on the server side of things for the past decade or so. One of my last big revelations was discovering the Model, View, &amp; Controller way of doing things. Apropos of that, this ECS thing seems to be a Big Deal of similar proportions.</p>\n"
  },
  {
    "title": "Parsec Patrol Diaries: Hello World",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/11/19/parsec-patrol-diaries-hello-world",
    "dsq_thread_id": [
      1979808552
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2013",
    "month": "11",
    "day": "19",
    "isDir": false,
    "slug": "parsec-patrol-diaries-hello-world",
    "date": "2013-11-19T12:00:00.000Z",
    "postName": "2013-11-19-parsec-patrol-diaries-hello-world",
    "html": "<p>So, I&#8217;ve been working on <a href=\"http://lmorchard.github.io/parsec-patrol/\">a retro space game for the web</a>. I planned it as a fun project to &#8220;<a href=\"https://www.stephencovey.com/7habits/7habits-habit7.php\">sharpen the saw</a>&#8221; and get myself more current on some newer technologies. I also planned to use it as blog fodder, writing little diary entries about what I&#8217;ve been doing &amp; discovering along the way. But, <a href=\"https://github.com/lmorchard/parsec-patrol/graphs/commit-activity\">147 commits and almost 4 months later</a>, I&#8217;ve had fun doing the coding and have totally neglected the writing.</p>\n<!--more-->\n\n<p><a href=\"https://gist.github.com/lmorchard/7548511\">I just brainstormed a topic list</a>, so maybe I could back-fill with posts about things I did a few months ago. Last month&#8217;s stuff is boring to write about, though. Meanwhile, today&#8217;s stuff is fresh and exciting. But, since I&#8217;ve told myself that I should write about all the things, I feel obligated to go back and do the chores first. So, nothing gets written.</p>\n<div style=\"width: 510px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://www.memecenter.com/search/procrastination\"><img alt=\"\" src=\"http://global3.memecdn.com/_o_102096.jpg\" width=\"500\" height=\"407\" /></a><p class=\"wp-caption-text\">\n    Bah.\n  </p>\n</div>\n\n<p>But, wait! It just occurred to me that I can do whatever I want! <a href=\"http://www.youtube.com/watch?v=n5diMImYIIA\">I can totally have pudding before I have any meat.</a> So, I can go all non-linear and just start writing about whatever seems fun, in whatever order strikes my fancy.</p>\n<p>Take that, <a href=\"https://www.google.com/search?q=internal+critic\">internal editor / critic</a>. Prepare for random access crap!</p>\n",
    "body": "So, I&#8217;ve been working on [a retro space game for the web][1]. I planned it as a fun project to &#8220;[sharpen the saw][2]&#8221; and get myself more current on some newer technologies. I also planned to use it as blog fodder, writing little diary entries about what I&#8217;ve been doing & discovering along the way. But, [147 commits and almost 4 months later][3], I&#8217;ve had fun doing the coding and have totally neglected the writing.\r\n\r\n<!--more-->\r\n\r\n[I just brainstormed a topic list][4], so maybe I could back-fill with posts about things I did a few months ago. Last month&#8217;s stuff is boring to write about, though. Meanwhile, today&#8217;s stuff is fresh and exciting. But, since I&#8217;ve told myself that I should write about all the things, I feel obligated to go back and do the chores first. So, nothing gets written.\r\n\r\n<div style=\"width: 510px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://www.memecenter.com/search/procrastination\"><img alt=\"\" src=\"http://global3.memecdn.com/_o_102096.jpg\" width=\"500\" height=\"407\" /></a><p class=\"wp-caption-text\">\r\n    Bah.\r\n  </p>\r\n</div>\r\n\r\nBut, wait! It just occurred to me that I can do whatever I want! [I can totally have pudding before I have any meat.][5] So, I can go all non-linear and just start writing about whatever seems fun, in whatever order strikes my fancy.\r\n\r\nTake that, [internal editor / critic][6]. Prepare for random access crap!\r\n\r\n [1]: http://lmorchard.github.io/parsec-patrol/\r\n [2]: https://www.stephencovey.com/7habits/7habits-habit7.php\r\n [3]: https://github.com/lmorchard/parsec-patrol/graphs/commit-activity\r\n [4]: https://gist.github.com/lmorchard/7548511\r\n [5]: http://www.youtube.com/watch?v=n5diMImYIIA\r\n [6]: https://www.google.com/search?q=internal+critic",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/11/19/parsec-patrol-diaries-hello-world",
    "thumbnail": "http://global3.memecdn.com/_o_102096.jpg",
    "summary": "<p>So, I&#x2019;ve been working on <a href=\"http://lmorchard.github.io/parsec-patrol/\">a retro space game for the web</a>. I planned it as a fun project to &#x201C;<a href=\"https://www.stephencovey.com/7habits/7habits-habit7.php\">sharpen the saw</a>&#x201D; and get myself more current on some newer technologies. I also planned to use it as blog fodder, writing little diary entries about what I&#x2019;ve been doing &amp; discovering along the way. But, <a href=\"https://github.com/lmorchard/parsec-patrol/graphs/commit-activity\">147 commits and almost 4 months later</a>, I&#x2019;ve had fun doing the coding and have totally neglected the writing.</p>\n"
  },
  {
    "title": "Parsec Patrol Diaries: Why a Game?",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/11/19/parsec-patrol-diaries-why-a-game",
    "dsq_thread_id": [
      1980027870
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2013",
    "month": "11",
    "day": "19",
    "isDir": false,
    "slug": "parsec-patrol-diaries-why-a-game",
    "date": "2013-11-19T12:00:00.000Z",
    "postName": "2013-11-19-parsec-patrol-diaries-why-a-game",
    "html": "<p>I decided to start writing <a href=\"https://github.com/lmorchard/parsec-patrol\">a retro space game for the web</a>, because I thought it might be a good way to exercise a lot of interesting technologies and have fun to boot. You know, like how <a href=\"http://spinoff.nasa.gov/\">sending rockets into space yields astronaut ice cream &amp; anti-shock trousers back down on Earth</a>. But, I&#8217;ve also wanted to make games all the way back to my Atari 2600, Commodore 64, and Apple ][ days &#8211; because <a href=\"http://en.wikipedia.org/wiki/Warren_Robinett\">Warren Robinett</a> is my hero.</p>\n<!--more-->\n\n<div style=\"width: 310px\" class=\"wp-caption alignright\">\n  <a href=\"http://www.flickr.com/photos/35034355597@N01/8445963080\"><img class=\" \" alt=\"\" src=\"http://farm9.staticflickr.com/8504/8445963080_f7a3ff2dd1_d.jpg\" width=\"300\" height=\"400\" /></a><p class=\"wp-caption-text\">\n    My nerd shrine, featuring a Commodore 64 & Atari 800\n  </p>\n</div>\n\n<p>Warren Robinett is the very model of the programmer-hero: He single-handedly created <a href=\"http://en.wikipedia.org/wiki/Adventure_%28Atari_2600%29\">Adventure</a>, then signed his work with <a href=\"http://en.wikipedia.org/wiki/Adventure_%28Atari_2600%29#Easter_egg\">the gaming world&#8217;s first easter egg</a> when they wouldn&#8217;t give him credit.</p>\n<p>If that weren&#8217;t enough, this guy also <a href=\"http://en.wikipedia.org/wiki/The_Learning_Company\">started his own company</a> after Atari and made <a href=\"http://en.wikipedia.org/wiki/Rocky%27s_Boots\">Rocky&#8217;s Boots</a>.</p>\n<p>It was only very recently that <a href=\"https://twitter.com/lmorchard/status/393572056266051584\">I pieced things together and realized</a> that <a href=\"https://archive.org/stream/Rockys_Boots_1982_Learning_Company/Rockys_Boots_1982_Learning_Company.do?module=apple2c&amp;scale=2\">Rocky&#8217;s Boots</a> is basically Adventure 2, except the bats and dragons and skeletons were drafted into warping wee brains like mine to understand binary logic and digital circuitry. I spent hours in that game, wrapping my 7-year-old head around things that wouldn&#8217;t be on exams until about 12 years later in my college compsci courses.</p>\n<p>That&#8217;s not to say Mr. Robinett is the only game-programming hero from my youth. Back then, you didn&#8217;t need a full-on studio to produce something impressive, at least speaking relative to the state of the art at the time. I couldn&#8217;t name all my 8-bit heroes &#8211; but consider folks like <a href=\"http://paulemozplaysagameaday.blogspot.com/2011/05/andrew-braybrook-c64-history.html\">Andrew Braybrook</a>, <a href=\"http://en.wikipedia.org/wiki/Jeff_Minter\">Jeff Minter</a>, <a href=\"http://en.wikipedia.org/wiki/Elite_%28video_game%29\">David Braben &amp; Ian Bell</a>. Along with old-school music makers like <a href=\"http://www.youtube.com/watch?v=D9CwsOOjNAo\">Rob Hubbard</a> and <a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=Ymajs4GdeFI#t=252\">Martin Galway</a>, these were the rockstars of my pre-WWW youth.</p>\n<p>Today, you&#8217;d call these folks <em>indie game developers</em>. Sometimes you still see the solo heros, sometimes teams of under a dozen. Still, it looks more like rock &amp; roll than an orchestral production. The games are often somewhat constrained in tech, relying more on clever gameplay and the kind of character that never survives design-by-committee.</p>\n<p>Of course, a lot of that rock &amp; roll stands on giant shoulders these days, thanks to abstractions like <a href=\"en.wikipedia.org/wiki/Microsoft_XNA\">Microsoft XNA</a> (R.I.P.) and the <a href=\"http://www.unrealengine.com/\">Unreal Engine</a>. There are also a bazillion other little game engines, web-based and native. But, there&#8217;s still a sweet spot for these indie rockstars to carve out a game using mere human-sized brains.</p>\n<p>For my part, I feel like the web is my new Commodore 64. So, <a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec Patrol</a> is my little project to play at being a game building rockstar. Hopefully, I&#8217;ll land somewhere on the scale between actual rockstar and playing Rock Band on Novice mode.</p>\n",
    "body": "I decided to start writing [a retro space game for the web][1], because I thought it might be a good way to exercise a lot of interesting technologies and have fun to boot. You know, like how [sending rockets into space yields astronaut ice cream & anti-shock trousers back down on Earth][2]. But, I&#8217;ve also wanted to make games all the way back to my Atari 2600, Commodore 64, and Apple ][ days &#8211; because [Warren Robinett][3] is my hero.\r\n\r\n<!--more-->\r\n\r\n<div style=\"width: 310px\" class=\"wp-caption alignright\">\r\n  <a href=\"http://www.flickr.com/photos/35034355597@N01/8445963080\"><img class=\" \" alt=\"\" src=\"http://farm9.staticflickr.com/8504/8445963080_f7a3ff2dd1_d.jpg\" width=\"300\" height=\"400\" /></a><p class=\"wp-caption-text\">\r\n    My nerd shrine, featuring a Commodore 64 & Atari 800\r\n  </p>\r\n</div>\r\n\r\nWarren Robinett is the very model of the programmer-hero: He single-handedly created [Adventure][4], then signed his work with [the gaming world&#8217;s first easter egg][5] when they wouldn&#8217;t give him credit.\r\n\r\nIf that weren&#8217;t enough, this guy also [started his own company][6] after Atari and made [Rocky&#8217;s Boots][7].\r\n\r\nIt was only very recently that [I pieced things together and realized][8] that [Rocky&#8217;s Boots][9] is basically Adventure 2, except the bats and dragons and skeletons were drafted into warping wee brains like mine to understand binary logic and digital circuitry. I spent hours in that game, wrapping my 7-year-old head around things that wouldn&#8217;t be on exams until about 12 years later in my college compsci courses.\r\n\r\nThat&#8217;s not to say Mr. Robinett is the only game-programming hero from my youth. Back then, you didn&#8217;t need a full-on studio to produce something impressive, at least speaking relative to the state of the art at the time. I couldn&#8217;t name all my 8-bit heroes &#8211; but consider folks like [Andrew Braybrook][10], [Jeff Minter][11], [David Braben & Ian Bell][12]. Along with old-school music makers like [Rob Hubbard][13] and [Martin Galway][14], these were the rockstars of my pre-WWW youth.\r\n\r\nToday, you&#8217;d call these folks *indie game developers*. Sometimes you still see the solo heros, sometimes teams of under a dozen. Still, it looks more like rock & roll than an orchestral production. The games are often somewhat constrained in tech, relying more on clever gameplay and the kind of character that never survives design-by-committee.\r\n\r\nOf course, a lot of that rock & roll stands on giant shoulders these days, thanks to abstractions like [Microsoft XNA][15] (R.I.P.) and the [Unreal Engine][16]. There are also a bazillion other little game engines, web-based and native. But, there&#8217;s still a sweet spot for these indie rockstars to carve out a game using mere human-sized brains.\r\n\r\nFor my part, I feel like the web is my new Commodore 64. So, [Parsec Patrol][1] is my little project to play at being a game building rockstar. Hopefully, I&#8217;ll land somewhere on the scale between actual rockstar and playing Rock Band on Novice mode.\r\n\r\n [1]: https://github.com/lmorchard/parsec-patrol\r\n [2]: http://spinoff.nasa.gov/\r\n [3]: http://en.wikipedia.org/wiki/Warren_Robinett\r\n [4]: http://en.wikipedia.org/wiki/Adventure_%28Atari_2600%29\r\n [5]: http://en.wikipedia.org/wiki/Adventure_%28Atari_2600%29#Easter_egg\r\n [6]: http://en.wikipedia.org/wiki/The_Learning_Company\r\n [7]: http://en.wikipedia.org/wiki/Rocky%27s_Boots\r\n [8]: https://twitter.com/lmorchard/status/393572056266051584\r\n [9]: https://archive.org/stream/Rockys_Boots_1982_Learning_Company/Rockys_Boots_1982_Learning_Company.do?module=apple2c&scale=2\r\n [10]: http://paulemozplaysagameaday.blogspot.com/2011/05/andrew-braybrook-c64-history.html\r\n [11]: http://en.wikipedia.org/wiki/Jeff_Minter\r\n [12]: http://en.wikipedia.org/wiki/Elite_%28video_game%29\r\n [13]: http://www.youtube.com/watch?v=D9CwsOOjNAo\r\n [14]: http://www.youtube.com/watch?feature=player_detailpage&v=Ymajs4GdeFI#t=252\r\n [15]: en.wikipedia.org/wiki/Microsoft_XNA\r\n [16]: http://www.unrealengine.com/",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/11/19/parsec-patrol-diaries-why-a-game",
    "thumbnail": "http://farm9.staticflickr.com/8504/8445963080_f7a3ff2dd1_d.jpg",
    "summary": "<p>I decided to start writing <a href=\"https://github.com/lmorchard/parsec-patrol\">a retro space game for the web</a>, because I thought it might be a good way to exercise a lot of interesting technologies and have fun to boot. You know, like how <a href=\"http://spinoff.nasa.gov/\">sending rockets into space yields astronaut ice cream &amp; anti-shock trousers back down on Earth</a>. But, I&#x2019;ve also wanted to make games all the way back to my Atari 2600, Commodore 64, and Apple ][ days &#x2013; because <a href=\"http://en.wikipedia.org/wiki/Warren_Robinett\">Warren Robinett</a> is my hero.</p>\n"
  }
]