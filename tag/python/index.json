[
  {
    "title": "Naming Things: CamelCase vs snake_case",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/01/23/naming-conventions",
    "dsq_thread_id": [
      1107007531
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "CamelCase",
      "dev",
      "javascript",
      "python",
      "snake_case",
      "webdev"
    ],
    "year": "2013",
    "month": "01",
    "day": "23",
    "isDir": false,
    "slug": "naming-conventions",
    "date": "2013-01-23T12:00:00.000Z",
    "postName": "2013-01-23-naming-conventions",
    "html": "<p>I&#8217;ve contributed code to a number of projects, often as a drive-by bug fix in a GitHub pull request. And, usually, I&#8217;ll try to do as the Romans do and follow the local naming and coding conventions. But, sometimes, I&#8217;ll fall back to my personal conventions and get dinged in the code review.</p>\n<!--more-->\n\n<p>For what it&#8217;s worth, those personal conventions look something like this:</p>\n<p><code>variable_names_in_snake_case</code>\n:   Variable, a mutable thing. All lower case, words separated by underscores.</p>\n<p><code>CONSTANTS_IN_ALL_CAPS</code>\n:   Constant, an immutable thing. All upper case, words separated by underscores.</p>\n<p><code>functionAndMethodNames</code>\n:   Functions and methods, immutable and callable things. Mixed camel case, first letter always lower case.</p>\n<p><code>StructAndClassNames</code>\n:   Structs and classes, immutable and instantiatable things. Mixed camel case, first letter always upper case.</p>\n<p>Of course, given the features of any particular language, these rules yield subtleties. For instance, in <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> a variable can be assigned a callable thing, a declared function can be replaced by assignment, and classes &amp; methods are themselves mainly just suggestions. These conventions are more about my intentions than anything literally baked into syntax.</p>\n<p>I&#8217;ve been using some variant of the above rules for close to 20 years, across probably a dozen languages. On <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> projects, I end up with <a href=\"http://en.wikipedia.org/wiki/Snake_case\">snake_case</a> in undesirable places. On Python projects, I&#8217;ll use <a href=\"http://en.wikipedia.org/wiki/CamelCase\">CamelCase</a> where it&#8217;s not wanted.</p>\n<p>On the Python side, I know there&#8217;s <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP 8</a>. That&#8217;s something to point at and claim uniformity, and <a href=\"http://pypi.python.org/pypi/pep8\">it has tooling support</a>. On the <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> side, I seem to be missing some recent consensus amongst the current wave of browser and nodejs enthusiasts. That, or I&#8217;m just contributing to more projects than my own these days (thanks to GitHub) and only running into this now.</p>\n<p>But, here&#8217;s what always leaves me mildly rankled: Why just one or the other? Why discard the semantic shading available through mixing <a href=\"http://en.wikipedia.org/wiki/Snake_case\">snake_case</a> and <a href=\"http://en.wikipedia.org/wiki/CamelCase\">CamelCase</a>, at least by way of consistent rules? I know there&#8217;s a such thing as syntax highlighting, but combining that with these conventions has often helped me with highlighting is unavailable. <a href=\"http://en.wiktionary.org/wiki/belt_and_suspenders\">Belt and suspenders</a>, and all that.</p>\n<p>Of course, I prefer my rules, because they&#8217;re a deeply ingrained habit. I know this is my peeve. But, what I&#8217;ve never quite been able to get is a satisfying answer as to why one style is preferred to the exclusion of another. Usually I get responses like &#8220;That&#8217;s just the way it&#8217;s done&#8221;, or &#8220;The other way is ugly&#8221;. So, it&#8217;s down to personal whim, project momentum, or <a href=\"http://en.wikipedia.org/wiki/Cargo_cult\">cargo cult</a>.</p>\n<p>I guess it bothers me to see a perfectly good semantic tool thrown out for no good reason as far as I can tell. Feel free to drop me a comment here, if I&#8217;m missing any good reasons. Some additional bits and pieces accumulate below:</p>\n<ul>\n<li><p>Here are some arguments against CamelCase for <a href=\"http://stackoverflow.com/questions/1740116/for-what-reason-do-we-have-the-lower-case-with-underscores-naming-convention/1740152#1740152\">accessibility reasons</a> and for <a href=\"http://stackoverflow.com/questions/1740116/for-what-reason-do-we-have-the-lower-case-with-underscores-naming-convention/1740131#1740131\">non-english speakers</a>.</p>\n</li>\n<li><p><a href=\"http://glyph.twistedmatrix.com/2012/10/a-tired-hobgoblin.html\">The Twisted project uses <em>both</em> CamelCase <em>and</em> snake_case in the same variable names.</a> The bit before the underscore signifies the type of a method, and the bit after is the name &#8211; eg. <code>remote_loginAnonymous</code> or <code>test_addDSAIdentityNoComment</code>.</p>\n</li>\n</ul>\n<p>Anyway, this has been bugging me for long enough that here I am finally blogging about it, so that I have an URL to throw into conversations when it comes up.</p>\n",
    "body": "I&#8217;ve contributed code to a number of projects, often as a drive-by bug fix in a GitHub pull request. And, usually, I&#8217;ll try to do as the Romans do and follow the local naming and coding conventions. But, sometimes, I&#8217;ll fall back to my personal conventions and get dinged in the code review.\r\n\r\n<!--more-->\r\n\r\nFor what it&#8217;s worth, those personal conventions look something like this:\r\n\r\n`variable_names_in_snake_case`\r\n:   Variable, a mutable thing. All lower case, words separated by underscores.\r\n\r\n`CONSTANTS_IN_ALL_CAPS`\r\n:   Constant, an immutable thing. All upper case, words separated by underscores.\r\n\r\n`functionAndMethodNames`\r\n:   Functions and methods, immutable and callable things. Mixed camel case, first letter always lower case.\r\n\r\n`StructAndClassNames`\r\n:   Structs and classes, immutable and instantiatable things. Mixed camel case, first letter always upper case.\r\n\r\nOf course, given the features of any particular language, these rules yield subtleties. For instance, in <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> a variable can be assigned a callable thing, a declared function can be replaced by assignment, and classes & methods are themselves mainly just suggestions. These conventions are more about my intentions than anything literally baked into syntax.\r\n\r\nI&#8217;ve been using some variant of the above rules for close to 20 years, across probably a dozen languages. On <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> projects, I end up with [snake_case][1] in undesirable places. On Python projects, I&#8217;ll use [CamelCase][2] where it&#8217;s not wanted.\r\n\r\nOn the Python side, I know there&#8217;s [PEP 8][3]. That&#8217;s something to point at and claim uniformity, and [it has tooling support][4]. On the <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> side, I seem to be missing some recent consensus amongst the current wave of browser and nodejs enthusiasts. That, or I&#8217;m just contributing to more projects than my own these days (thanks to GitHub) and only running into this now.\r\n\r\nBut, here&#8217;s what always leaves me mildly rankled: Why just one or the other? Why discard the semantic shading available through mixing [snake_case][1] and [CamelCase][2], at least by way of consistent rules? I know there&#8217;s a such thing as syntax highlighting, but combining that with these conventions has often helped me with highlighting is unavailable. [Belt and suspenders][5], and all that.\r\n\r\nOf course, I prefer my rules, because they&#8217;re a deeply ingrained habit. I know this is my peeve. But, what I&#8217;ve never quite been able to get is a satisfying answer as to why one style is preferred to the exclusion of another. Usually I get responses like &#8220;That&#8217;s just the way it&#8217;s done&#8221;, or &#8220;The other way is ugly&#8221;. So, it&#8217;s down to personal whim, project momentum, or [cargo cult][6].\r\n\r\nI guess it bothers me to see a perfectly good semantic tool thrown out for no good reason as far as I can tell. Feel free to drop me a comment here, if I&#8217;m missing any good reasons. Some additional bits and pieces accumulate below:\r\n\r\n*   Here are some arguments against CamelCase for [accessibility reasons][7] and for [non-english speakers][8].\r\n\r\n*   [The Twisted project uses *both* CamelCase *and* snake_case in the same variable names.][9] The bit before the underscore signifies the type of a method, and the bit after is the name &#8211; eg. `remote_loginAnonymous` or `test_addDSAIdentityNoComment`.\r\n\r\nAnyway, this has been bugging me for long enough that here I am finally blogging about it, so that I have an URL to throw into conversations when it comes up.\r\n\r\n [1]: http://en.wikipedia.org/wiki/Snake_case\r\n [2]: http://en.wikipedia.org/wiki/CamelCase\r\n [3]: http://www.python.org/dev/peps/pep-0008/\r\n [4]: http://pypi.python.org/pypi/pep8\r\n [5]: http://en.wiktionary.org/wiki/belt_and_suspenders\r\n [6]: http://en.wikipedia.org/wiki/Cargo_cult\r\n [7]: http://stackoverflow.com/questions/1740116/for-what-reason-do-we-have-the-lower-case-with-underscores-naming-convention/1740152#1740152\r\n [8]: http://stackoverflow.com/questions/1740116/for-what-reason-do-we-have-the-lower-case-with-underscores-naming-convention/1740131#1740131\r\n [9]: http://glyph.twistedmatrix.com/2012/10/a-tired-hobgoblin.html",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/01/23/naming-conventions",
    "summary": "<p>I&#x2019;ve contributed code to a number of projects, often as a drive-by bug fix in a GitHub pull request. And, usually, I&#x2019;ll try to do as the Romans do and follow the local naming and coding conventions. But, sometimes, I&#x2019;ll fall back to my personal conventions and get dinged in the code review.</p>\n",
    "prevPostPath": "2013/02/10/building-my-couch-computing-station",
    "nextPostPath": "2013/01/21/gaming-from-the-orchard-house-couch"
  },
  {
    "comments_archived": true,
    "date": "2011-07-18T15:03:13.030Z",
    "layout": "post",
    "published": true,
    "tags": [
      "badger",
      "social",
      "python",
      "mozilla",
      "django"
    ],
    "title": "Badger 2: Return of the Mustelidae",
    "year": "2011",
    "month": "07",
    "day": "18",
    "isDir": false,
    "slug": "badger2",
    "postName": "2011-07-18-badger2",
    "html": "<p><strong>TL;DR</strong>: <em>A year ago, I said I wanted to build a badging service\nfor the Mozilla community, so we could all celebrate how awesome we\nall are. Well, I putzed around and didn&#39;t get far, so I&#39;m starting\nover with something more immediately useful.</em></p>\n<img src=\"https://decafbad.com/blog/images/badger-logo-working.png\" style=\"width:98%; display: block\" />\n\n<p><em>(This is an awesome illustration by <a href=\"http://seanmartell.com/\">Sean\nMartell</a>, used entirely without permission.\nI&#39;ll take it down if anyone gets mad.)</em></p>\n<p>Almost a year ago, <a href=\"http://decafbad.com/2010/07/badger-article/\">I wrote about building a badging service for\nall of Mozilla</a>. </p>\n<p>In a nutshell, I left the <a href=\"http://www.flickr.com/photos/gen/4784616521/\">2010 Mozilla Summit</a>\nwanting to build a tool that empowered people to craft social objects\nrepresenting achievement and gratitude, and give them to each other.</p>\n<p>Since then, I&#39;ve <a href=\"https://github.com/lmorchard/badger\">played around with a prototype in Django with\nPinax</a>.  But, I abandoned that thing due to getting super\nbusy with the Firefox 4 release. It also didn&#39;t help that I was a\nDjango newb and that I got caught up in screwing around with shiny\nthings like <a href=\"http://pinaxproject.com\">Pinax</a> and <a href=\"http://lettuce.it\">Lettuce</a> and neglected the actual feature\nset.</p>\n<p>So now, finally, <a href=\"https://github.com/lmorchard/badger2\">I&#39;m picking the thread back up again</a>. This\ntime, with a little less ambition and a few more practical aims.</p>\n<h3 id=\"make-something-more-useful-right-away\">Make something more useful right away</h3>\n<p>While I <em>have</em> spent some dangerous time screwing around with shinies like\n<a href=\"http://vagrantup.com\">Vagrant</a>, <a href=\"http://pupetlabs.com\">Puppet</a>, and <a href=\"https://github.com/mozilla/playdoh\">Playdoh</a>, I think I&#39;ve gotten that\nmostly out of my system and have gotten down to work <a href=\"https://github.com/lmorchard/badger2/commits/master\">as of last\nnight</a>.</p>\n<p>Rather than build a Grand Central Station for badges, I&#39;ve reset my\ngoals to a progression of practical results:</p>\n<ul>\n<li>Build a reusable Django app that supports some basic use cases of\ncreating and awarding badges to users.</li>\n<li>Add <a href=\"http://activitystrea.ms\">Activity Stream</a>s narrating <a href=\"http://wiki.activitystrea.ms/w/page/27189812/Badge\">badge claims</a></li>\n<li>Add support for <a href=\"http://code.google.com/p/pubsubhubbub/\">PubSubHubbub</a> with Badger activity streams</li>\n<li>Add a REST API, maybe with OAuth</li>\n<li>Accept badges for local users, via <a href=\"http://code.google.com/p/pubsubhubbub/\">PuSH</a> from\nexternal sites</li>\n<li>See what the <a href=\"https://wiki.mozilla.org/Badges\">Open Badges Project</a> is up to, and how Badger can\nfit in with their goals.</li>\n</ul>\n<p>The idea here is to make Badger a practical, reusable, drop-in app for\nexisting sites—preferably (but not necessarily) the\n<a href=\"https://github.com/mozilla/playdoh\">Playdoh</a>-flavored sites we&#39;re building at Mozilla. Then,\nincrementally and optionally empower a Badger-enabled site to become a\nbadge hub by accepting reports of badge claims from other\nBadger-enabled sites.</p>\n<h3 id=\"take-baby-steps-to-federation\">Take baby steps to federation</h3>\n<p>So, for example, let&#39;s say we dropped Badger into a few sites like\nthese:</p>\n<ul>\n<li><a href=\"http://developer.mozilla.org\">http://developer.mozilla.org</a>;</li>\n<li><a href=\"http://support.mozilla.com\">http://support.mozilla.com</a>;</li>\n<li><a href=\"http://addons.mozilla.org\">http://addons.mozilla.org</a>.</li>\n</ul>\n<p>At first, Badger would just augment those sites with badging\nfacilities for their respective user bases. That could fill some needs\nright away.</p>\n<p>Then, say we built a site that offered personal profiles to members of\nthe Mozilla community.  With the <a href=\"http://activitystrea.ms\">Activity Stream</a> and <a href=\"http://code.google.com/p/pubsubhubbub/\">PuSH</a>\naugmentations, users could connect their profiles with each of the\nother Mozilla sites they use.  That way, whenever they claim a badge\nout there, it gets delivered to their community profile.</p>\n<h3 id=\"why-bother-federating-at-all\">Why bother federating at all?</h3>\n<p>If the only cross-site goal to build an all-in-one display case for\nbadges on a community profile, I could just build JSON feeds and wrap\nthem in a JS-based widget. In fact, <a href=\"http://activitystrea.ms/specs/json/1.0/\">a JSON-formatted Activity\nStream</a> will work nicely for that. Drop that into the profile\npage, and we&#39;re done.</p>\n<p>There are lots of reasons to federate. But, at least one thing not supported by\nthis solution are <a href=\"http://decafbad.com/2010/07/badger-article/#section-105\">meta-badges</a>. That is, badges awarded for badges.</p>\n<p>Let&#39;s say you close 100 bugs on Bugzilla, answer 100 questions on\nSUMO, edit 100 pages of documentation on MDN, and author 100 add-ons.\nAnd, let&#39;s say you get badges on the respective sites for all of those\nactivities.</p>\n<p>Well, now, I&#39;d like to give you a badge on your community profile for\nbeing a <strong>Mozilla Superhero</strong>. I could just do that by hand, having\nobserved all your greatness. But, I&#39;d rather the system just do that\nautomatically.</p>\n<p>If your community profile treated all your badges from your chosen affiliated\nsites as first-class citizens, then I could build the meta-badge\ntrigger right there.</p>\n<p>Of course, I could also write a program that monitors badge feeds from\nvarious sites. Then, use the community profile site&#39;s Badger API to\nissue a badge when the conditions are met. But, as maintainer of the\nmonitoring program, I&#39;d have to keep track of what feeds where count\nfor which people, which could be a mess.</p>\n<p>There&#39;s still some thinking to do here.</p>\n<h3 id=\"what-about-identity-and-co-opting-badges\">What about identity and co-opting badges?</h3>\n<p>I&#39;m still thinking through how someone connects a profile to other\nsites. As in, how can Badger ensure that the owner of the community\nprofile is also the owner of a badge claim feed on MDN?  Maybe some\nkind of OAuth dance that results in a <a href=\"http://code.google.com/p/pubsubhubbub/\">PuSH</a> subscription between\nsites?</p>\n<p>Consider the least-capable federation case: a Badger-compatible feed\nhosted as a static file on Amazon S3. And, by Badger-compatible, I\nmean an <a href=\"http://activitystrea.ms\">Activity Stream</a> that contains <a href=\"http://wiki.activitystrea.ms/w/page/27189812/Badge\">badge claims</a>. You\nshouldn&#39;t need my specific implementation of Badger-in-Django to\nproduce one of those.</p>\n<p>Although <a href=\"http://code.google.com/p/pubsubhubbub/\">PuSH</a> is still the ideal case (I think), occasional\npolling of an <a href=\"http://activitystrea.ms\">Activity Stream</a> feed should still be supported. If a\nuser connects that up to their community profile, we just have to take\ntheir word for it. We&#39;d rely on community members to\nflag stinkers trying to claim badge feeds that aren&#39;t theirs.</p>\n<p>Beyond that, there&#39;s probably some crypto-voodoo we can invoke here,\nfor cases where badge claim validity really matters—as opposed to the\nfun and games I have in mind for Mozilla.</p>\n<h3 id=\"what-about-the-open-badges-project\">What about the Open Badges Project?</h3>\n<p>From various conversations over the past year, it sounds to me like\nthe <a href=\"https://wiki.mozilla.org/Badges\">Open Badges Project</a> is getting the parts in place to do even\nmore interesting federation of badges that gives ownership of the\nbadge hub to the user.</p>\n<p>In that scenario, you have a backpack in your browser and can carry\nyour badge claims with you between sites with no prior coordination\nbetween the sites themselves. </p>\n<p>This sounds like something in which Badger should be able to\nparticipate, eventually. If not as a hub, Badger should at least offer\nthe tools to create and award badges that work with the user-owned hub\nscheme.</p>\n<h3 id=\"so-what-next\">So, what next?</h3>\n<p>Now that I&#39;ve written all this out, I need to hack on it. If you&#39;re\ninterested in this stuff, let me know. That way, it&#39;ll look like\nsomeone might actually find this stuff handy when I get something\nworking!</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=70: -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-256743407\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=afd2a7efeaad01509a571bae031dfc5c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">David Boswell</a>\n</div>\n<a href=\"#comment-256743407\" class=\"permalink\"><time datetime=\"2011-07-19T01:18:24\">2011-07-19T01:18:24</time></a>\n</div>\n<div class=\"content\">Very cool to see an update on Badger.  I'm definitely interested in this and would love to see something like this show up in the Mozillians phonebook that will be ready soonish :)\nDavid</div>\n</li>\n<li class=\"comment\" id=\"comment-257292756\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://briks.si\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=29e2f1888cdcc9c451d32ab902d5a19c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://briks.si\">Brian King</a>\n</div>\n<a href=\"#comment-257292756\" class=\"permalink\"><time datetime=\"2011-07-19T15:12:01\">2011-07-19T15:12:01</time></a>\n</div>\n<div class=\"content\">Over at the Mozilla Reps program, we are discussing the possible use of badges - https://wiki.mozilla.org/ReMo</div>\n</li>\n<li class=\"comment\" id=\"comment-257331862\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://kanai.net/weblog/\"><img src=\"http://disqus.com/api/users/avatars/gkanai.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://kanai.net/weblog/\">Gen Kanai</a>\n</div>\n<a href=\"#comment-257331862\" class=\"permalink\"><time datetime=\"2011-07-19T15:48:22\">2011-07-19T15:48:22</time></a>\n</div>\n<div class=\"content\">Agreed with DBos. Would love to see Badger as an official service, especially with the new Campus Reps program that Jason Haas is rebooting as well as with the Mozilla Representatives program. Also you might get a badge for contributing to the Join Mozilla program? So many great uses for us.</div>\n</li>\n<li class=\"comment\" id=\"comment-278082903\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/interstar.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">interstar</a>\n</div>\n<a href=\"#comment-278082903\" class=\"permalink\"><time datetime=\"2011-08-05T03:15:39\">2011-08-05T03:15:39</time></a>\n</div>\n<div class=\"content\">Hi Les,\nVery very interesting. \nI was just thinking that there needed to be something like the Open Badges project today. (I'd even got as far as knocking up a data-model in web2py.) And then I saw this.\nI quickly cloned and tried out your app with an ordinary Django project but it's blowing up without jingo and I guess other Playdoh related modules. Are you committed to Playdoh for Badger2 ?\n</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-278514925\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-278514925\" class=\"permalink\"><time datetime=\"2011-08-05T18:05:31\">2011-08-05T18:05:31</time></a>\n</div>\n<div class=\"content\">I'm committed to Playdoh insofar as my initial users will probably be my co-workers at Mozilla, who are all building Playdoh-based sites.\nBut, there's no reason why it shouldn't eventually work with vanilla Django. It's using core template loaders and shortcuts, so switching over to standard stuff shouldn't be an issue for the views and models.\nI'm hoping at some point to put together some more Django-conventional template tags and templates toward that end, unless someone gets to it before me in a pull request (patches welcome!). Really, I think the template tags are the more important thing, since any templates out of the box will likely get overridden on a real site.</div>\n</li>\n</ul>\n</li>\n<li class=\"comment\" id=\"comment-301119028\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.integrating-technology.org/\"><img src=\"http://disqus.com/api/users/avatars/nelliemuller.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.integrating-technology.org/\">Dr. Nellie Deutsch</a>\n</div>\n<a href=\"#comment-301119028\" class=\"permalink\"><time datetime=\"2011-09-02T14:07:45\">2011-09-02T14:07:45</time></a>\n</div>\n<div class=\"content\">I love the idea, Leslie.  I've been heading a self-funded organization that provides free online professional development workshops for educators around the world since 2006. We need badges for our graduates.  Let me know how I can be of help. </div>\n</li>\n</ul>\n</div>\n",
    "body": "**TL;DR**: <em>A year ago, I said I wanted to build a badging service\r\nfor the Mozilla community, so we could all celebrate how awesome we\r\nall are. Well, I putzed around and didn't get far, so I'm starting\r\nover with something more immediately useful.</em>\r\n\r\n<img src=\"https://decafbad.com/blog/images/badger-logo-working.png\" style=\"width:98%; display: block\" />\r\n\r\n<em>(This is an awesome illustration by [Sean\r\nMartell](http://seanmartell.com/), used entirely without permission.\r\nI'll take it down if anyone gets mad.)</em>\r\n\r\nAlmost a year ago, [I wrote about building a badging service for\r\nall of Mozilla][badger-paper]. \r\n\r\nIn a nutshell, I left the [2010 Mozilla Summit](http://www.flickr.com/photos/gen/4784616521/)\r\nwanting to build a tool that empowered people to craft social objects\r\nrepresenting achievement and gratitude, and give them to each other.\r\n\r\nSince then, I've [played around with a prototype in Django with\r\nPinax][badger1].  But, I abandoned that thing due to getting super\r\nbusy with the Firefox 4 release. It also didn't help that I was a\r\nDjango newb and that I got caught up in screwing around with shiny\r\nthings like [Pinax][] and [Lettuce][] and neglected the actual feature\r\nset.\r\n\r\nSo now, finally, [I'm picking the thread back up again][badger2]. This\r\ntime, with a little less ambition and a few more practical aims.\r\n\r\n### Make something more useful right away\r\n\r\nWhile I *have* spent some dangerous time screwing around with shinies like\r\n[Vagrant][], [Puppet][], and [Playdoh][], I think I've gotten that\r\nmostly out of my system and have gotten down to work [as of last\r\nnight][work].\r\n\r\n[work]: https://github.com/lmorchard/badger2/commits/master\r\n\r\nRather than build a Grand Central Station for badges, I've reset my\r\ngoals to a progression of practical results:\r\n\r\n* Build a reusable Django app that supports some basic use cases of\r\n  creating and awarding badges to users.\r\n* Add [Activity Stream][]s narrating [badge claims][]\r\n* Add support for [PubSubHubbub][push] with Badger activity streams\r\n* Add a REST API, maybe with OAuth\r\n* Accept badges for local users, via [PuSH][] from\r\n  external sites\r\n* See what the [Open Badges Project][] is up to, and how Badger can\r\n  fit in with their goals.\r\n\r\n[badge claims]: http://wiki.activitystrea.ms/w/page/27189812/Badge\r\n[Open Badges Project]: https://wiki.mozilla.org/Badges\r\n\r\nThe idea here is to make Badger a practical, reusable, drop-in app for\r\nexisting sites—preferably (but not necessarily) the\r\n[Playdoh][]-flavored sites we're building at Mozilla. Then,\r\nincrementally and optionally empower a Badger-enabled site to become a\r\nbadge hub by accepting reports of badge claims from other\r\nBadger-enabled sites.\r\n\r\n### Take baby steps to federation\r\n\r\nSo, for example, let's say we dropped Badger into a few sites like\r\nthese:\r\n\r\n* <http://developer.mozilla.org>;\r\n* <http://support.mozilla.com>;\r\n* <http://addons.mozilla.org>.\r\n\r\nAt first, Badger would just augment those sites with badging\r\nfacilities for their respective user bases. That could fill some needs\r\nright away.\r\n\r\nThen, say we built a site that offered personal profiles to members of\r\nthe Mozilla community.  With the [Activity Stream][] and [PuSH][]\r\naugmentations, users could connect their profiles with each of the\r\nother Mozilla sites they use.  That way, whenever they claim a badge\r\nout there, it gets delivered to their community profile.\r\n\r\n### Why bother federating at all?\r\n\r\nIf the only cross-site goal to build an all-in-one display case for\r\nbadges on a community profile, I could just build JSON feeds and wrap\r\nthem in a JS-based widget. In fact, [a JSON-formatted Activity\r\nStream][as-json] will work nicely for that. Drop that into the profile\r\npage, and we're done.\r\n\r\nThere are lots of reasons to federate. But, at least one thing not supported by\r\nthis solution are [meta-badges][]. That is, badges awarded for badges.\r\n\r\nLet's say you close 100 bugs on Bugzilla, answer 100 questions on\r\nSUMO, edit 100 pages of documentation on MDN, and author 100 add-ons.\r\nAnd, let's say you get badges on the respective sites for all of those\r\nactivities.\r\n\r\nWell, now, I'd like to give you a badge on your community profile for\r\nbeing a **Mozilla Superhero**. I could just do that by hand, having\r\nobserved all your greatness. But, I'd rather the system just do that\r\nautomatically.\r\n\r\nIf your community profile treated all your badges from your chosen affiliated\r\nsites as first-class citizens, then I could build the meta-badge\r\ntrigger right there.\r\n\r\nOf course, I could also write a program that monitors badge feeds from\r\nvarious sites. Then, use the community profile site's Badger API to\r\nissue a badge when the conditions are met. But, as maintainer of the\r\nmonitoring program, I'd have to keep track of what feeds where count\r\nfor which people, which could be a mess.\r\n\r\nThere's still some thinking to do here.\r\n\r\n### What about identity and co-opting badges?\r\n\r\nI'm still thinking through how someone connects a profile to other\r\nsites. As in, how can Badger ensure that the owner of the community\r\nprofile is also the owner of a badge claim feed on MDN?  Maybe some\r\nkind of OAuth dance that results in a [PuSH][] subscription between\r\nsites?\r\n\r\nConsider the least-capable federation case: a Badger-compatible feed\r\nhosted as a static file on Amazon S3. And, by Badger-compatible, I\r\nmean an [Activity Stream][] that contains [badge claims][]. You\r\nshouldn't need my specific implementation of Badger-in-Django to\r\nproduce one of those.\r\n\r\nAlthough [PuSH][] is still the ideal case (I think), occasional\r\npolling of an [Activity Stream][] feed should still be supported. If a\r\nuser connects that up to their community profile, we just have to take\r\ntheir word for it. We'd rely on community members to\r\nflag stinkers trying to claim badge feeds that aren't theirs.\r\n\r\nBeyond that, there's probably some crypto-voodoo we can invoke here,\r\nfor cases where badge claim validity really matters—as opposed to the\r\nfun and games I have in mind for Mozilla.\r\n\r\n### What about the Open Badges Project?\r\n\r\nFrom various conversations over the past year, it sounds to me like\r\nthe [Open Badges Project][] is getting the parts in place to do even\r\nmore interesting federation of badges that gives ownership of the\r\nbadge hub to the user.\r\n\r\nIn that scenario, you have a backpack in your browser and can carry\r\nyour badge claims with you between sites with no prior coordination\r\nbetween the sites themselves. \r\n\r\nThis sounds like something in which Badger should be able to\r\nparticipate, eventually. If not as a hub, Badger should at least offer\r\nthe tools to create and award badges that work with the user-owned hub\r\nscheme.\r\n\r\n### So, what next?\r\n\r\nNow that I've written all this out, I need to hack on it. If you're\r\ninterested in this stuff, let me know. That way, it'll look like\r\nsomeone might actually find this stuff handy when I get something\r\nworking!\r\n\r\n[as-json]: http://activitystrea.ms/specs/json/1.0/\r\n[meta-badges]: http://decafbad.com/2010/07/badger-article/#section-105\r\n[activity stream]: http://activitystrea.ms\r\n[push]: http://code.google.com/p/pubsubhubbub/\r\n[vagrant]: http://vagrantup.com\r\n[puppet]: http://pupetlabs.com\r\n[playdoh]: https://github.com/mozilla/playdoh\r\n[pinax]: http://pinaxproject.com\r\n[lettuce]: http://lettuce.it\r\n[badger-paper]: http://decafbad.com/2010/07/badger-article/\r\n[badger1]: https://github.com/lmorchard/badger\r\n[badger2]: https://github.com/lmorchard/badger2\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=70: -->\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-256743407\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=afd2a7efeaad01509a571bae031dfc5c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">David Boswell</a>\r\n                </div>\r\n                <a href=\"#comment-256743407\" class=\"permalink\"><time datetime=\"2011-07-19T01:18:24\">2011-07-19T01:18:24</time></a>\r\n            </div>\r\n            <div class=\"content\">Very cool to see an update on Badger.  I'm definitely interested in this and would love to see something like this show up in the Mozillians phonebook that will be ready soonish :)\r\n\r\nDavid</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-257292756\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://briks.si\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=29e2f1888cdcc9c451d32ab902d5a19c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://briks.si\">Brian King</a>\r\n                </div>\r\n                <a href=\"#comment-257292756\" class=\"permalink\"><time datetime=\"2011-07-19T15:12:01\">2011-07-19T15:12:01</time></a>\r\n            </div>\r\n            <div class=\"content\">Over at the Mozilla Reps program, we are discussing the possible use of badges - https://wiki.mozilla.org/ReMo</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-257331862\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://kanai.net/weblog/\"><img src=\"http://disqus.com/api/users/avatars/gkanai.jpg\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://kanai.net/weblog/\">Gen Kanai</a>\r\n                </div>\r\n                <a href=\"#comment-257331862\" class=\"permalink\"><time datetime=\"2011-07-19T15:48:22\">2011-07-19T15:48:22</time></a>\r\n            </div>\r\n            <div class=\"content\">Agreed with DBos. Would love to see Badger as an official service, especially with the new Campus Reps program that Jason Haas is rebooting as well as with the Mozilla Representatives program. Also you might get a badge for contributing to the Join Mozilla program? So many great uses for us.</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-278082903\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/interstar.jpg\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">interstar</a>\r\n                </div>\r\n                <a href=\"#comment-278082903\" class=\"permalink\"><time datetime=\"2011-08-05T03:15:39\">2011-08-05T03:15:39</time></a>\r\n            </div>\r\n            <div class=\"content\">Hi Les,\r\n\r\nVery very interesting. \r\n\r\nI was just thinking that there needed to be something like the Open Badges project today. (I'd even got as far as knocking up a data-model in web2py.) And then I saw this.\r\n\r\nI quickly cloned and tried out your app with an ordinary Django project but it's blowing up without jingo and I guess other Playdoh related modules. Are you committed to Playdoh for Badger2 ?\r\n\r\n</div>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-278514925\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://decafbad.com/\">Les Orchard</a>\r\n                </div>\r\n                <a href=\"#comment-278514925\" class=\"permalink\"><time datetime=\"2011-08-05T18:05:31\">2011-08-05T18:05:31</time></a>\r\n            </div>\r\n            <div class=\"content\">I'm committed to Playdoh insofar as my initial users will probably be my co-workers at Mozilla, who are all building Playdoh-based sites.\r\n\r\nBut, there's no reason why it shouldn't eventually work with vanilla Django. It's using core template loaders and shortcuts, so switching over to standard stuff shouldn't be an issue for the views and models.\r\n\r\nI'm hoping at some point to put together some more Django-conventional template tags and templates toward that end, unless someone gets to it before me in a pull request (patches welcome!). Really, I think the template tags are the more important thing, since any templates out of the box will likely get overridden on a real site.</div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-301119028\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.integrating-technology.org/\"><img src=\"http://disqus.com/api/users/avatars/nelliemuller.jpg\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.integrating-technology.org/\">Dr. Nellie Deutsch</a>\r\n                </div>\r\n                <a href=\"#comment-301119028\" class=\"permalink\"><time datetime=\"2011-09-02T14:07:45\">2011-09-02T14:07:45</time></a>\r\n            </div>\r\n            <div class=\"content\">I love the idea, Leslie.  I've been heading a self-funded organization that provides free online professional development workshops for educators around the world since 2006. We need badges for our graduates.  Let me know how I can be of help. </div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2011",
    "path": "2011/07/18/badger2",
    "thumbnail": "https://decafbad.com/blog/images/badger-logo-working.png",
    "prevPostPath": "2011/10/02/putting-clouds-in-boxes",
    "nextPostPath": "2011/06/11/five-years"
  },
  {
    "comments_archived": true,
    "date": "2010-07-05T23:00:56.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "firefox",
      "google",
      "python",
      "entries",
      "mozilla",
      "sync",
      "appengine"
    ],
    "title": "Firefox Sync server on Google App Engine",
    "wordpress_id": 1937,
    "wordpress_slug": "firefox-sync-server-on-google-app-engine",
    "wordpress_url": "http://decafbad.com/blog/?p=1937",
    "year": "2010",
    "month": "07",
    "day": "05",
    "isDir": false,
    "slug": "firefox-sync-server-on-google-app-engine",
    "postName": "2010-07-05-firefox-sync-server-on-google-app-engine",
    "html": "<p><em><strong>TL;DR:</strong> <a href=\"http://github.com/lmorchard/firefox-sync-appengine\">I built an implementation</a> of the <a href=\"https://wiki.mozilla.org/Labs/Weave/Sync/1.0/API\">Firefox Sync server API</a> for <a href=\"http://appengine.google.com/\">Google App Engine</a>.</em></p>\n<p><a href=\"http://www.mozilla.com/en-US/firefox/sync/\" style=\"float: right; padding: 0 0 0em 0em; display: block; text-decoration: none; border: none\"><img src=\"http://mozcom-cdn.mozilla.net/img/firefox/sync/sync-background.png\" style=\"border: none\" /></a></p>\n<p>To celebrate <a href=\"http://en.wikipedia.org/wiki/Independence_Day_%28United_States%29\">Independence Day</a>, I figured I might take a shot at liberating <a href=\"http://www.mozilla.com/en-US/firefox/sync/\">Firefox Sync</a> from the tyranny of <a href=\"https://services.mozilla.com/\">Mozilla&#39;s servers</a>. </p>\n<p>Thus, over the past few days, I&#39;ve <a href=\"http://github.com/lmorchard/firefox-sync-appengine\">built a sync server</a> using the <a href=\"https://wiki.mozilla.org/Labs/Weave/Sync/1.0/API\">1.0 Sync API</a>, hosted on <a href=\"http://appengine.google.com/\">Google App Engine</a>.</p>\n<p>I lied about the <em>tyranny</em> thing, though—I just wanted to say something clever about the holiday. In reality, with respect to <a href=\"http://www.mozilla.com/en-US/firefox/sync/\">Firefox Sync</a>, Mozilla has done all of the following:</p>\n<ol>\n<li>Published <a href=\"https://wiki.mozilla.org/Labs/Weave/Sync/1.0/API\">the Sync API spec</a>;</li>\n<li>Released <a href=\"http://hg.mozilla.org/services/sync-server/\">the source code for the server used in-house</a>;</li>\n<li>Explicitly included the option to use a custom server when setting up sync in the browser.</li>\n</ol>\n<p>This means that, although Mozilla offers servers to go along with <a href=\"http://www.mozilla.com/en-US/firefox/sync/\">Firefox Sync</a>, you&#39;re totally free to take your data elsewhere. Since your sync data is encrypted and practically opaque to the server, there&#39;s no direct profit for Mozilla in offering free sync hosting—not even through any clandestine data mining for devious purposes. It&#39;s just that sync makes Firefox a better browser, and <em>somebody</em> has to run some servers to make it work.</p>\n<p>So, there&#39;s every incentive to make it easy for you to switch sync providers and <em>stop freeloading</em> on Mozilla&#39;s servers. Building a server on <a href=\"http://appengine.google.com/\">Google App Engine</a> means I can freeload on <em>Google&#39;s</em> servers!</p>\n<p>I kid, of course. No one&#39;s really complaining about freeloaders, and App Engine has quotas in place to head off any serious mooching—which is why I&#39;m not telling you where to find <em>my</em> sync server deployed on Google App Engine, by the way. </p>\n<p>No, I did this because:</p>\n<ul>\n<li>Firefox Sync and Google App Engine are interesting and important technologies;</li>\n<li>I&#39;ve already done a bit of work on the PHP-based Firefox Sync server at Mozilla;</li>\n<li>I really wanted to take a break from PHP and spend some time with my old friend Python.</li>\n</ul>\n<p>There are, of course, a number of bugs in this server. But, it seems to be working between a number of machines and browser profiles I have at home. Things are really in need of optimization, it suffers from my inexperience with App Engine, and I keep running into those aforementioned App Engine resource limits—especially when updating or deleting large numbers of items (ie. 1000&#39;s to 10000&#39;s of items).</p>\n<p><a href=\"http://github.com/lmorchard/firefox-sync-appengine\"><em>Pull requests and issue reports on GitHub are welcome!</em></a></p>\n<p>A next step I&#39;d like to take with this thing is to revisit another old friend, the <a href=\"http://www.decafbad.com/twiki/bin/view/Main/DesktopWebAppServer\">desktop web app server</a>. (Also known as the <a href=\"http://www.scripting.com/davenet/2001/01/04/desktopWebsites.html#4\">desktop website</a>.) It seems to me that it would be interesting to scale this server down to a household appliance—say, just for use by my wife and I.</p>\n<p>I&#39;d be especially happy if the work I&#39;m doing for a Google-hosted app could be self-hosted at home. Seeing as the development environment for App Engine runs on my laptop, I&#39;m willing to bet I can hack the whole shebang into a simple, special-purpose app to download and double-click on a home desktop PC for use as your sync hub.</p>\n<p>Anyway, <a href=\"http://github.com/lmorchard/firefox-sync-appengine\">check it out</a> and let me know what you think.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221088097\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://coffeeonthekeyboard.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8371744716a9335eb3dcae228fd9d996&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://coffeeonthekeyboard.com/\">James Socol</a>\n</div>\n<a href=\"#comment-221088097\" class=\"permalink\"><time datetime=\"2010-07-06T01:28:02\">2010-07-06T01:28:02</time></a>\n</div>\n<div class=\"content\"><p>Assuming you already had a network and a Mac Mini or something at home, it would be pretty interesting to run your own small Sync server just to keep your home computers together. Maybe even use localtunnel for when you're away.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088102\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://morgamic.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=65b020128dafcdb4ef1e5e53c00ed37a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://morgamic.com/\">Mike</a>\n</div>\n<a href=\"#comment-221088102\" class=\"permalink\"><time datetime=\"2010-07-06T01:36:37\">2010-07-06T01:36:37</time></a>\n</div>\n<div class=\"content\"><p>You are a real-life hero!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088105\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088105\" class=\"permalink\"><time datetime=\"2010-07-06T01:52:00\">2010-07-06T01:52:00</time></a>\n</div>\n<div class=\"content\"><p>@James: Yup, exactly that. Maybe even roll in some SSL and UPnP port forwarding for easier setup behind a home router. And, if there were a Windows version, it could run on that cruddy desktop back in the spare room.</p>\n<p>@Mike: Naw... this guy is the real hero, <a href=\"http://twitter.com/johnolilly/status/17765272082\" rel=\"nofollow\">even John Lilly agrees</a>!</p>\n<p><a href=\"http://blogs.denverpost.com/celebritybull/2008/09/09/greatest-american-hero-coming-to-the-big-screen/\" rel=\"nofollow\"><img src=\"http://blogs.denverpost.com/celebritybull/files/2008/09/gah.jpg\" alt=\"Greatest American Hero\" title=\"\" /></a></p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088106\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d18681d9fa9b5d50b209a2a926dfe7d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Crash</a>\n</div>\n<a href=\"#comment-221088106\" class=\"permalink\"><time datetime=\"2010-07-06T09:20:54\">2010-07-06T09:20:54</time></a>\n</div>\n<div class=\"content\"><p>Is there already a App Id for this tool?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088107\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088107\" class=\"permalink\"><time datetime=\"2010-07-06T10:18:57\">2010-07-06T10:18:57</time></a>\n</div>\n<div class=\"content\"><p>@Crash: Sure, there's an app ID for <em>my</em> instance of this sync server. But, as I said in the blog post, I'm not sharing it. At least, not until or unless I get the quota usage down to a point that I wouldn't exhaust the free hosting limits.</p>\n<p>It's pretty easy to deploy your own sync server on AppEngine with the source, though.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088108\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=85283c3d40ca2b1a70a0f877a570107c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Peter Petrov</a>\n</div>\n<a href=\"#comment-221088108\" class=\"permalink\"><time datetime=\"2010-07-06T13:18:11\">2010-07-06T13:18:11</time></a>\n</div>\n<div class=\"content\"><p>@Leslie: The app ID of your instance is visible in app.yaml, so you've shared it anyway :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088113\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088113\" class=\"permalink\"><time datetime=\"2010-07-06T17:18:47\">2010-07-06T17:18:47</time></a>\n</div>\n<div class=\"content\"><p>@Peter hah! Right you are! But, at least you had to look at the source of the app first to figure that out :) That is mostly the point of this blog entry after all. Anyone who does that and then uses my installation anyway will probably be sad when I regularly blow away data and eventually make it invite only</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088115\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4fd1acfa0c7bd0767a90a30fbba73bfb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tobias</a>\n</div>\n<a href=\"#comment-221088115\" class=\"permalink\"><time datetime=\"2010-07-07T00:24:41\">2010-07-07T00:24:41</time></a>\n</div>\n<div class=\"content\"><p>Neat! TyphoonAE http://typhoonae.googlecode.com might help you to build your household appliance.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088117\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3e7e975f0fa432f4ae6604f72c132309&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Kumar McMillan</a>\n</div>\n<a href=\"#comment-221088117\" class=\"permalink\"><time datetime=\"2010-07-07T20:59:25\">2010-07-07T20:59:25</time></a>\n</div>\n<div class=\"content\"><p>Hey Les, this is super cool!  Google App Engine's Datastore API is still very shaky though.  In fact, it's been so bad lately that I've been considering porting one of my heavily used apps over to something else.  Thankfully, this post suggests that fixing the Datastore is their top priority: http://googleappengine.blogspot.com/2010/06/datastore-performance-growing-pains.html</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088119\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://home.kairo.at/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=59d914ad47e5c3fcd4c89668adcd43a2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://home.kairo.at/blog/\">Robert Kaiser</a>\n</div>\n<a href=\"#comment-221088119\" class=\"permalink\"><time datetime=\"2010-07-07T21:21:51\">2010-07-07T21:21:51</time></a>\n</div>\n<div class=\"content\"><p>Well, I actually feel more comfortable with my data being on Mozilla servers than on Google servers - even with the decreased trust I have in the Mozilla organization, I'd trust it more than Google any day! ;-)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088120\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://blog.chrisarndt.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02653ae22d36044e6870c17cf3d5a005&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://blog.chrisarndt.de\">Chris Arndt</a>\n</div>\n<a href=\"#comment-221088120\" class=\"permalink\"><time datetime=\"2010-09-28T11:06:55\">2010-09-28T11:06:55</time></a>\n</div>\n<div class=\"content\"><p>Instead of porting GAE to your desktop, why don't you just port your app to plain Django? Django should run off your desktop with no problems.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<em><strong>TL;DR:</strong> [I built an implementation][impl] of the [Firefox Sync server API][api10] for [Google App Engine][appengine].</em>\r\n\r\n[impl]: http://github.com/lmorchard/firefox-sync-appengine\r\n[api10]: https://wiki.mozilla.org/Labs/Weave/Sync/1.0/API\r\n[appengine]: http://appengine.google.com/\r\n\r\n<a href=\"http://www.mozilla.com/en-US/firefox/sync/\" style=\"float: right; padding: 0 0 0em 0em; display: block; text-decoration: none; border: none\"><img src=\"http://mozcom-cdn.mozilla.net/img/firefox/sync/sync-background.png\" style=\"border: none\" /></a>\r\n\r\nTo celebrate [Independence Day][july4], I figured I might take a shot at liberating [Firefox Sync][sync] from the tyranny of [Mozilla's servers][servers]. \r\n\r\nThus, over the past few days, I've [built a sync server][impl] using the [1.0 Sync API][api10], hosted on [Google App Engine][appengine].\r\n\r\nI lied about the *tyranny* thing, though—I just wanted to say something clever about the holiday. In reality, with respect to [Firefox Sync][sync], Mozilla has done all of the following:\r\n\r\n1. Published [the Sync API spec][api10];\r\n2. Released [the source code for the server used in-house][sync-server];\r\n3. Explicitly included the option to use a custom server when setting up sync in the browser.\r\n\r\nThis means that, although Mozilla offers servers to go along with [Firefox Sync][sync], you're totally free to take your data elsewhere. Since your sync data is encrypted and practically opaque to the server, there's no direct profit for Mozilla in offering free sync hosting—not even through any clandestine data mining for devious purposes. It's just that sync makes Firefox a better browser, and *somebody* has to run some servers to make it work.\r\n\r\nSo, there's every incentive to make it easy for you to switch sync providers and *stop freeloading* on Mozilla's servers. Building a server on [Google App Engine][appengine] means I can freeload on *Google's* servers!\r\n\r\nI kid, of course. No one's really complaining about freeloaders, and App Engine has quotas in place to head off any serious mooching—which is why I'm not telling you where to find *my* sync server deployed on Google App Engine, by the way. \r\n\r\nNo, I did this because:\r\n\r\n* Firefox Sync and Google App Engine are interesting and important technologies;\r\n* I've already done a bit of work on the PHP-based Firefox Sync server at Mozilla;\r\n* I really wanted to take a break from PHP and spend some time with my old friend Python.\r\n\r\nThere are, of course, a number of bugs in this server. But, it seems to be working between a number of machines and browser profiles I have at home. Things are really in need of optimization, it suffers from my inexperience with App Engine, and I keep running into those aforementioned App Engine resource limits—especially when updating or deleting large numbers of items (ie. 1000's to 10000's of items).\r\n\r\n[*Pull requests and issue reports on GitHub are welcome!*][impl]\r\n\r\nA next step I'd like to take with this thing is to revisit another old friend, the [desktop web app server][desktopserver]. (Also known as the [desktop website][dw].) It seems to me that it would be interesting to scale this server down to a household appliance—say, just for use by my wife and I.\r\n\r\nI'd be especially happy if the work I'm doing for a Google-hosted app could be self-hosted at home. Seeing as the development environment for App Engine runs on my laptop, I'm willing to bet I can hack the whole shebang into a simple, special-purpose app to download and double-click on a home desktop PC for use as your sync hub.\r\n\r\nAnyway, [check it out][impl] and let me know what you think.\r\n\r\n[dw]: http://www.scripting.com/davenet/2001/01/04/desktopWebsites.html#4\r\n[dave]: http://www.scripting.com/davenet/1997/09/14/FractionalHorsepowerHTTPSe.html\r\n[desktopserver]: http://www.decafbad.com/twiki/bin/view/Main/DesktopWebAppServer\r\n[sync-server]: http://hg.mozilla.org/services/sync-server/\r\n[july4]: http://en.wikipedia.org/wiki/Independence_Day_%28United_States%29\r\n[sync]: http://www.mozilla.com/en-US/firefox/sync/\r\n[servers]: https://services.mozilla.com/\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221088097\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://coffeeonthekeyboard.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8371744716a9335eb3dcae228fd9d996&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://coffeeonthekeyboard.com/\">James Socol</a>\r\n                </div>\r\n                <a href=\"#comment-221088097\" class=\"permalink\"><time datetime=\"2010-07-06T01:28:02\">2010-07-06T01:28:02</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Assuming you already had a network and a Mac Mini or something at home, it would be pretty interesting to run your own small Sync server just to keep your home computers together. Maybe even use localtunnel for when you're away.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088102\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://morgamic.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=65b020128dafcdb4ef1e5e53c00ed37a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://morgamic.com/\">Mike</a>\r\n                </div>\r\n                <a href=\"#comment-221088102\" class=\"permalink\"><time datetime=\"2010-07-06T01:36:37\">2010-07-06T01:36:37</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>You are a real-life hero!</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088105\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221088105\" class=\"permalink\"><time datetime=\"2010-07-06T01:52:00\">2010-07-06T01:52:00</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>@James: Yup, exactly that. Maybe even roll in some SSL and UPnP port forwarding for easier setup behind a home router. And, if there were a Windows version, it could run on that cruddy desktop back in the spare room.</p>\r\n\r\n<p>@Mike: Naw... this guy is the real hero, <a href=\"http://twitter.com/johnolilly/status/17765272082\" rel=\"nofollow\">even John Lilly agrees</a>!</p>\r\n\r\n<p><a href=\"http://blogs.denverpost.com/celebritybull/2008/09/09/greatest-american-hero-coming-to-the-big-screen/\" rel=\"nofollow\"><img src=\"http://blogs.denverpost.com/celebritybull/files/2008/09/gah.jpg\" alt=\"Greatest American Hero\" title=\"\" /></a></p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088106\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d18681d9fa9b5d50b209a2a926dfe7d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Crash</a>\r\n                </div>\r\n                <a href=\"#comment-221088106\" class=\"permalink\"><time datetime=\"2010-07-06T09:20:54\">2010-07-06T09:20:54</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Is there already a App Id for this tool?</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088107\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221088107\" class=\"permalink\"><time datetime=\"2010-07-06T10:18:57\">2010-07-06T10:18:57</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>@Crash: Sure, there's an app ID for <em>my</em> instance of this sync server. But, as I said in the blog post, I'm not sharing it. At least, not until or unless I get the quota usage down to a point that I wouldn't exhaust the free hosting limits.</p>\r\n\r\n<p>It's pretty easy to deploy your own sync server on AppEngine with the source, though.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088108\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=85283c3d40ca2b1a70a0f877a570107c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Peter Petrov</a>\r\n                </div>\r\n                <a href=\"#comment-221088108\" class=\"permalink\"><time datetime=\"2010-07-06T13:18:11\">2010-07-06T13:18:11</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>@Leslie: The app ID of your instance is visible in app.yaml, so you've shared it anyway :)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088113\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221088113\" class=\"permalink\"><time datetime=\"2010-07-06T17:18:47\">2010-07-06T17:18:47</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>@Peter hah! Right you are! But, at least you had to look at the source of the app first to figure that out :) That is mostly the point of this blog entry after all. Anyone who does that and then uses my installation anyway will probably be sad when I regularly blow away data and eventually make it invite only</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088115\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4fd1acfa0c7bd0767a90a30fbba73bfb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Tobias</a>\r\n                </div>\r\n                <a href=\"#comment-221088115\" class=\"permalink\"><time datetime=\"2010-07-07T00:24:41\">2010-07-07T00:24:41</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Neat! TyphoonAE http://typhoonae.googlecode.com might help you to build your household appliance.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088117\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3e7e975f0fa432f4ae6604f72c132309&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Kumar McMillan</a>\r\n                </div>\r\n                <a href=\"#comment-221088117\" class=\"permalink\"><time datetime=\"2010-07-07T20:59:25\">2010-07-07T20:59:25</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Hey Les, this is super cool!  Google App Engine's Datastore API is still very shaky though.  In fact, it's been so bad lately that I've been considering porting one of my heavily used apps over to something else.  Thankfully, this post suggests that fixing the Datastore is their top priority: http://googleappengine.blogspot.com/2010/06/datastore-performance-growing-pains.html</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088119\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://home.kairo.at/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=59d914ad47e5c3fcd4c89668adcd43a2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://home.kairo.at/blog/\">Robert Kaiser</a>\r\n                </div>\r\n                <a href=\"#comment-221088119\" class=\"permalink\"><time datetime=\"2010-07-07T21:21:51\">2010-07-07T21:21:51</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Well, I actually feel more comfortable with my data being on Mozilla servers than on Google servers - even with the decreased trust I have in the Mozilla organization, I'd trust it more than Google any day! ;-)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088120\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://blog.chrisarndt.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02653ae22d36044e6870c17cf3d5a005&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://blog.chrisarndt.de\">Chris Arndt</a>\r\n                </div>\r\n                <a href=\"#comment-221088120\" class=\"permalink\"><time datetime=\"2010-09-28T11:06:55\">2010-09-28T11:06:55</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Instead of porting GAE to your desktop, why don't you just port your app to plain Django? Django should run off your desktop with no problems.</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2010",
    "path": "2010/07/05/firefox-sync-server-on-google-app-engine",
    "thumbnail": "http://mozcom-cdn.mozilla.net/img/firefox/sync/sync-background.png",
    "prevPostPath": "2010/09/27/so-simultaneously-extraordinary-and-mundane",
    "nextPostPath": "2010/06/22/case-study-building-a-bookmark-management-ui-for-mozillas-byob"
  },
  {
    "comments_archived": true,
    "date": "2007-07-09T20:21:41.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "php",
      "zend",
      "symfony",
      "frameworks",
      "django",
      "python",
      "curmudgeons"
    ],
    "title": "A Curmudgeon Playing with the Zend Framework",
    "wordpress_id": 1058,
    "wordpress_slug": "a-curmudgeon-playing-with-the-zend-framework",
    "wordpress_url": "http://decafbad.com/blog/2007/07/09/a-curmudgeon-playing-with-the-zend-framework",
    "year": "2007",
    "month": "07",
    "day": "09",
    "isDir": false,
    "slug": "a-curmudgeon-playing-with-the-zend-framework",
    "postName": "2007-07-09-a-curmudgeon-playing-with-the-zend-framework",
    "html": "<p>Because it's been awhile since I last surveyed the landscape, I played around a bit with web frameworks this weekend.  Mainly, I tried getting something simple working with the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  After intermittent play and much studying of documentation between Saturday and Sunday, I got to \"hello world.\"</p>\n<p>Unlike other web frameworks of late, Zend Framework doesn't come with any magical CLI tools to build out directory trees and / or generate code.  Being somewhat suspicious and curmudgeonly about that sort of magic to begin with, this actually struck me as an attractive thing about ZF.  In fact, what I really liked about ZF at first glance is that it's less of a monolithic <b>system</b> and more of a bucket of parts from a single source that fit together decently.</p>\n<p>And, all my favorite parts are there:  Among other things there's <a href=\"http://framework.zend.com/manual/en/zend.config.html\">config</a>, <a href=\"http://framework.zend.com/manual/en/zend.log.html\">logging</a>, <a href=\"http://framework.zend.com/manual/en/zend.controller.html\">a front controller</a> with <a href=\"http://framework.zend.com/manual/en/zend.controller.router.html\">URL routing</a>, template-system agnostic <a href=\"http://framework.zend.com/manual/en/zend.view.html\">view support</a>, and somewhat non-magical <a href=\"http://framework.zend.com/manual/en/zend.db.html\">DB / model support</a>.</p>\n<p>These were all things I'd grabbed from <a href=\"http://pear.php.net/\">PEAR</a> for <a href=\"http://decafbad.com/svn/trunk/Cuckoo/lib/MiniFramework.php\">my more recent PHP mini-framework</a> play, but I figured there should be some benefit from finding them in a unified collection like the Zend Framework.</p>\n<p>The experience was somewhat similar to rolling my own, though.  I stumbled through some docs and eventually found some blog entries and a tutorial.  It's all very loosely-coupled and somewhat DIY, which is actually what I wanted.  The experience has left me wondering if I really <b>should</b> have wanted it, but I'm guessing it'll go easier from here on out.</p>\n<p>In the meantime, though, I feel like I have a decent grasp on what all those loosely-coupled parts are doing.  I've skimmed through code, traced wires, broken things and watched the errors.</p>\n<p>See, my problem with a lot of modern magic-imbued web frameworks is that I have a deep distrust of what they're doing.  They come with a lot of moving parts doing things that I don't see - and when I do finally see them, I tend to run into decisions with which I disagree.  I see abstraction where I think the gritty concrete needs to be left bare.  I often see lots of astronaut acrobatics that just have to be burning tons of cycles.  I see further acrobatics done to compensate, unrolling loops and pre-parsing config files - which requires further layers of magical tools to generate code and caches.</p>\n<p>Too many moving parts wherein assumptions can hide, later to bite me when we're hundreds of miles into the post-launch desert and trying to fight scaling fires or develop a new feature with some weird angles to it.</p>\n<p>For example, consider <a href=\"http://www.symfony-project.com/\">Symfony</a> for PHP.  Their configuration system runs PHP code that results in YAML.  Parsing that YAML, along with cascading layers of other generated YAML, then drives a PHP code generation stage, composing all the static code necessary to bootstrap the framework with each request.  There's an amazing amount of flexibility exposed by that system, and it's quite clever -&nbsp;but my curmudgeonly side catches whiffs of insanity.</p>\n<p>Maybe that's really the issue -&nbsp;I've been doing this stuff long enough to have written my own one of everything, so I've got my own opinions and I like to have a grasp on everything.  I've written front controllers, templating systems, and model abstraction layers.  I've worked in a half-dozen or so languages doing all the above.  I don't yet accept that web app development has <a href=\"http://mengwong.livejournal.com/38969.html\">passed the da Vinci point</a> -&nbsp;a single developer should be able to grasp the structure of a web framework in mind without getting lost in too many fractal branchings.</p>\n<p>Anyway, I'm rambling like an old grouch, but I think I've reached my point.  Hopefully more actual experimentation soon.</p>\n",
    "body": "<p>Because it's been awhile since I last surveyed the landscape, I played around a bit with web frameworks this weekend.  Mainly, I tried getting something simple working with the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  After intermittent play and much studying of documentation between Saturday and Sunday, I got to \"hello world.\"</p>\r\n<p>Unlike other web frameworks of late, Zend Framework doesn't come with any magical CLI tools to build out directory trees and / or generate code.  Being somewhat suspicious and curmudgeonly about that sort of magic to begin with, this actually struck me as an attractive thing about ZF.  In fact, what I really liked about ZF at first glance is that it's less of a monolithic <b>system</b> and more of a bucket of parts from a single source that fit together decently.</p>\r\n<p>And, all my favorite parts are there:  Among other things there's <a href=\"http://framework.zend.com/manual/en/zend.config.html\">config</a>, <a href=\"http://framework.zend.com/manual/en/zend.log.html\">logging</a>, <a href=\"http://framework.zend.com/manual/en/zend.controller.html\">a front controller</a> with <a href=\"http://framework.zend.com/manual/en/zend.controller.router.html\">URL routing</a>, template-system agnostic <a href=\"http://framework.zend.com/manual/en/zend.view.html\">view support</a>, and somewhat non-magical <a href=\"http://framework.zend.com/manual/en/zend.db.html\">DB / model support</a>.</p>\r\n<p>These were all things I'd grabbed from <a href=\"http://pear.php.net/\">PEAR</a> for <a href=\"http://decafbad.com/svn/trunk/Cuckoo/lib/MiniFramework.php\">my more recent PHP mini-framework</a> play, but I figured there should be some benefit from finding them in a unified collection like the Zend Framework.</p>\r\n<p>The experience was somewhat similar to rolling my own, though.  I stumbled through some docs and eventually found some blog entries and a tutorial.  It's all very loosely-coupled and somewhat DIY, which is actually what I wanted.  The experience has left me wondering if I really <b>should</b> have wanted it, but I'm guessing it'll go easier from here on out.</p>\r\n<p>In the meantime, though, I feel like I have a decent grasp on what all those loosely-coupled parts are doing.  I've skimmed through code, traced wires, broken things and watched the errors.</p>\r\n<p>See, my problem with a lot of modern magic-imbued web frameworks is that I have a deep distrust of what they're doing.  They come with a lot of moving parts doing things that I don't see - and when I do finally see them, I tend to run into decisions with which I disagree.  I see abstraction where I think the gritty concrete needs to be left bare.  I often see lots of astronaut acrobatics that just have to be burning tons of cycles.  I see further acrobatics done to compensate, unrolling loops and pre-parsing config files - which requires further layers of magical tools to generate code and caches.</p>\r\n<p>Too many moving parts wherein assumptions can hide, later to bite me when we're hundreds of miles into the post-launch desert and trying to fight scaling fires or develop a new feature with some weird angles to it.</p>\r\n<p>For example, consider <a href=\"http://www.symfony-project.com/\">Symfony</a> for PHP.  Their configuration system runs PHP code that results in YAML.  Parsing that YAML, along with cascading layers of other generated YAML, then drives a PHP code generation stage, composing all the static code necessary to bootstrap the framework with each request.  There's an amazing amount of flexibility exposed by that system, and it's quite clever -&nbsp;but my curmudgeonly side catches whiffs of insanity.</p>\r\n<p>Maybe that's really the issue -&nbsp;I've been doing this stuff long enough to have written my own one of everything, so I've got my own opinions and I like to have a grasp on everything.  I've written front controllers, templating systems, and model abstraction layers.  I've worked in a half-dozen or so languages doing all the above.  I don't yet accept that web app development has <a href=\"http://mengwong.livejournal.com/38969.html\">passed the da Vinci point</a> -&nbsp;a single developer should be able to grasp the structure of a web framework in mind without getting lost in too many fractal branchings.</p>\r\n<p>Anyway, I'm rambling like an old grouch, but I think I've reached my point.  Hopefully more actual experimentation soon.</p>\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/07/09/a-curmudgeon-playing-with-the-zend-framework",
    "prevPostPath": "2007/07/23/a-curmudgeon-playing-with-the-codeigniter-framework-and-openid",
    "nextPostPath": "2007/05/16/damn-kids-get-off-my-web"
  },
  {
    "comments_archived": true,
    "date": "2006-01-08T01:33:47.000Z",
    "layout": "post",
    "tags": [
      "wordpress",
      "webdev",
      "syndication",
      "python",
      "programming",
      "perl",
      "templating",
      "smarty",
      "dtml",
      "cheetah",
      "reblog",
      "evil"
    ],
    "title": "Smarty is on my evil list",
    "wordpress_id": 818,
    "wordpress_slug": "smarty-is-on-my-evil-list",
    "wordpress_url": "http://decafbad.com/blog/?p=818",
    "year": "2006",
    "month": "01",
    "day": "07",
    "isDir": false,
    "slug": "smarty-is-on-my-evil-list",
    "postName": "2006-01-07-smarty-is-on-my-evil-list",
    "html": "<p>Although I have <a href=\"http://decafbad.com/blog/2005/12/18/not-so-deep-php-thoughts\">my grousing about PHP in general</a>, I have to say that it makes much better template language as-is before pulling something like <a href=\"http://smarty.php.net\">Smarty</a> into the mix.  </p>\n<p>At this point, I consider <a href=\"http://smarty.php.net\">Smarty</a> to be evil—though I&#39;m willing to admit that I haven&#39;t grokked it fully yet.  And this is coming from <a href=\"http://decafbad.com/blog/2005/09/25/templates-good-or-evil\">a templating addict</a> who has been at times in love with <a href=\"http://www.template-toolkit.org/\">Template Toolkit</a> in Perl,  <a href=\"http://jakarta.apache.org/velocity/\">Velocity</a> in Java, and <a href=\"http://www.cheetahtemplate.org/\">Cheetah</a> and <a href=\"http://twisted.sourceforge.net/TwistedDocs-1.2.0rc3/howto/woven.html\">Woven</a> and <a href=\"http://www.owlfish.com/software/simpleTAL/\">ZPT/TAL</a> in Python.  </p>\n<p><a href=\"http://wordpress.org/\">WordPress</a> seems to have put native-PHP-as-templating to good use, so I&#39;ve already got a favorite for comparison.  But the use of <a href=\"http://smarty.php.net\">Smarty</a> in <a href=\"http://www.reblog.org/\">reBlog</a> rubs me the wrong way.  Of course, <a href=\"http://www.reblog.org/\">reBlog</a> has a lot of highly-abstracted MVC architecture going on.  And this, itself, is something I haven&#39;t much in my PHP explorations thus far.  (In fact, I almost hate to see PHP chopped up in this J2EE-esque fashion, but that&#39;s another story.  Oh, and <a href=\"http://www.reblog.org/\">reBlog</a> rocks, by the way.)</p>\n<p>But either way, <a href=\"http://smarty.php.net\">Smarty</a> makes this right-handed hacker feel like he&#39;s writing with his left.  It seems to have a lot of weird conventions and terminology for which neither knowledge of PHP nor knowledge of other templating systems in general seem much help.  It could just be a learning curve, but to me it seems like an odd <em>sideways</em> curve at the moment.  </p>\n<p>In fact, you know what?  <a href=\"http://smarty.php.net\">Smarty</a> reminds me a lot of <a href=\"http://www.zope.org/Documentation/Guides/DTML-HTML/DTML.html\">DTML in Zope</a>.  I hate <a href=\"http://www.zope.org/Documentation/Guides/DTML-HTML/DTML.html\">DTML</a>—it, also, is most firmly on my evil list.</p>\n<p>Yuck.  Again, it could be just that I haven&#39;t known <a href=\"http://smarty.php.net\">Smarty</a> long enough to like it... but yuck.</p>\n<!-- tags: templating php smarty dtml python perl cheetah webdev programming syndication reblog wordpress evil -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221082526\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://luka.kladaric.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=78b0e32da6ce10e17db345a9aa8cde78&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://luka.kladaric.net/\">Luka Kladaric</a>\n</div>\n<a href=\"#comment-221082526\" class=\"permalink\"><time datetime=\"2006-01-08T11:55:40\">2006-01-08T11:55:40</time></a>\n</div>\n<div class=\"content\"><p>I agree with you... I used Smarty in one project and am now using it in another work-in-progress... and I have to say, the decision to use it with the second was a bad one... Smarty is pretty cool for simple templating, but when you need raw power, it leaves you shipwrecked... I had to turn to some really black magic to get things done... Anyway, a rewrite of the first project is in negotiations and I'm 100% sure I will <em>NOT</em> be using Smarty there, either.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082527\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://laughingmeme.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=01457d1a0f0e533062cd0d1033fb4d7a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://laughingmeme.org\">kellan</a>\n</div>\n<a href=\"#comment-221082527\" class=\"permalink\"><time datetime=\"2006-01-08T14:34:57\">2006-01-08T14:34:57</time></a>\n</div>\n<div class=\"content\"><p>Agreed.  Using a templating languages with PHP makes no sense. (though I'm not sure the fact that WP does or doesn't do something makes it good design)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082528\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082528\" class=\"permalink\"><time datetime=\"2006-01-08T15:03:33\">2006-01-08T15:03:33</time></a>\n</div>\n<div class=\"content\"><p>Kellan:  Oh, no, WordPress isn't an automatic gold standard for me...  There's plenty that could be better about WP.  (Not having checked out 2.0 yet)  But, I just had a much better time setting up the templates for this blog than I have had in hacking around with templates implemented in Smarty.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082529\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://sporkmonger.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://sporkmonger.com/\">Bob Aman</a>\n</div>\n<a href=\"#comment-221082529\" class=\"permalink\"><time datetime=\"2006-01-08T17:41:17\">2006-01-08T17:41:17</time></a>\n</div>\n<div class=\"content\"><p>Me, I just wish there was a templating system for Ruby for me to fall in love with.  With all due respect to the Rails people, ERb just doesn't really do it for me.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082530\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221082530\" class=\"permalink\"><time datetime=\"2006-01-08T21:04:14\">2006-01-08T21:04:14</time></a>\n</div>\n<div class=\"content\"><p><a href=\"#comment-3388\" rel=\"nofollow\">Bob</a>: port <a href=\"http://kid.lesscode.org/language.html\" rel=\"nofollow\">Kid</a> to Ruby. :-<i></i>)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082532\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://talideon.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e698f564ac90c4c248f1f678caafd624&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://talideon.com/\">Keith Gaughan</a>\n</div>\n<a href=\"#comment-221082532\" class=\"permalink\"><time datetime=\"2006-01-08T21:28:05\">2006-01-08T21:28:05</time></a>\n</div>\n<div class=\"content\"><p>What's moronic is that people go to all this trouble building templating systems when all you really need is extract(). Sad, really.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082533\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.ntwizards.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cb564795a1912c36f9fa1399fd22ce29&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.ntwizards.net/\">Bryce</a>\n</div>\n<a href=\"#comment-221082533\" class=\"permalink\"><time datetime=\"2006-01-12T13:33:10\">2006-01-12T13:33:10</time></a>\n</div>\n<div class=\"content\"><p>PHP as a template engine is more evil than Smarty. The main issue is that template authors may not be trustworthy. Once you include or eval() a PHP template the app is no longer in control and I don't see any way of structuring a PHP app such that it cannot be subverted from within. </p>\n<p>The only defense seems to be using the tokenizer functions to build a PHP parser that validates templates against a \"whitelist\" of allowed operations. Savant's Restricted Compiler is about the only implementation out there, but it's not quite complete and seems to be more of a proof-of-concept than battle-tested code.</p>\n<p>Whatever Smarty's faults, it solves the untrusted templates problem nicely.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082534\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082534\" class=\"permalink\"><time datetime=\"2006-01-12T14:27:42\">2006-01-12T14:27:42</time></a>\n</div>\n<div class=\"content\"><p>Bryce: Oh, I totally understand the implications of offering too much capability to template authors.  That's just how much I dislike Smarty—I'm willing to risk it, rather than put up with that particular implementation.  On the other hand, in my situation, I'm on the same team with the template developers, so we're all on the same team to sink or swim.  I know it's not that simple, in principle, but it covers the 80% of the 80/20 equation.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082536\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://dougal.gunters.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=81717a172b6918071fbea1a52483294b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://dougal.gunters.org/\">Dougal Campbell</a>\n</div>\n<a href=\"#comment-221082536\" class=\"permalink\"><time datetime=\"2006-01-12T15:25:25\">2006-01-12T15:25:25</time></a>\n</div>\n<div class=\"content\"><p>Yeah, I was never able to get into Smarty either, and I've never been able to put my finger on why. Philosophically, I like the idea of using template engines, particularly if you're collaborating with a non-programming designer. I even wrote one (albeit a <em>very simple</em> one) myself, once. But I've never used any of the PHP template packages that I've looked at.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082537\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://sporkmonger.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://sporkmonger.com/\">Bob Aman</a>\n</div>\n<a href=\"#comment-221082537\" class=\"permalink\"><time datetime=\"2006-01-13T01:10:16\">2006-01-13T01:10:16</time></a>\n</div>\n<div class=\"content\"><p>Aristotle: When TurboGears first came out, I almost did, believe it or not.  But then I remembered that FeedTools eats all of the time I have available for open-source projects, and I figured someone else would probably do it for me anyways...</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082538\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221082538\" class=\"permalink\"><time datetime=\"2006-01-13T09:02:38\">2006-01-13T09:02:38</time></a>\n</div>\n<div class=\"content\"><p>Hehe. Well, I plan to port it to Perl, in any case. :<i></i>-)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082539\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=31475c246f5521e40d92a29ec0e36aa8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Brian Grayless</a>\n</div>\n<a href=\"#comment-221082539\" class=\"permalink\"><time datetime=\"2006-01-19T16:00:24\">2006-01-19T16:00:24</time></a>\n</div>\n<div class=\"content\"><p>Smarty is really a waste of time. Some food for thought....</p>\n<p><a href=\"http://www.fudnik.com/main/tiki-read_article.php?articleId=7\" rel=\"nofollow\">Smarty for Dummies?</a></p>\n<p>Just write better code!!!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082540\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bdbf6409528370f5549e8470caf6ba30&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tali Banana</a>\n</div>\n<a href=\"#comment-221082540\" class=\"permalink\"><time datetime=\"2006-02-01T07:33:41\">2006-02-01T07:33:41</time></a>\n</div>\n<div class=\"content\"><p>Well, quite opinionated I see.</p>\n<p>Smarty solves some fantastic problems and the cacheing system is beyond fabulous at this level.</p>\n<p>I've used Smarty on several projects and have been using it now exclusively for 4 years.  Of course, I used others but it was getting sick coming to a new phase in a project and finding out the template system had become RIP....abandoned before their time.</p>\n<p>Smarty has done two great things for me, and I'll speak about them until the day that PHP is abolished:</p>\n<ol>\n<li><p>Smarty has reduced my code to a reasonably sized, scan-able, masterpiece.  Having the logic and presentation seperate is so nice.  I recently rewrote one of my old projects using smarty and all of a sudden it made sense!  No more php in the html and no more html in the php.  And that's something you can't solve without templates for you juniors out there.</p></li>\n<li><p>Smarty's caching has turned monster db queries into non issues.  Consider this.  A top 10 list from all-time sales.  I'm talking about searching a db with sales spanning 6 years for all items purchased and creating a top sales page.  Easy!  Smarty does it once and caches the results until I decide they need to be refreshed.  Took a 4 second execution time down to less than 0.4 seconds.  And all without having to implement a CMS or otherwise.  Even if you have limitless resources to buy new hardware, caching like this still makes sense.  And the intermediate php/html cache is brilliant.  Everything is so much faster with smarty.</p></li>\n</ol>\n<p>I can't deny, I love Smarty.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082542\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082542\" class=\"permalink\"><time datetime=\"2006-02-01T11:43:36\">2006-02-01T11:43:36</time></a>\n</div>\n<div class=\"content\"><p>Tali: I'm usually opinionated, but I try to listen &amp; learn :)</p>\n<p>The benefits you describe with Smarty would seem to come with any decent web development system.  Separating logic and presentation are the general idea behind templating, and some sort of caching is a must no matter what you're using as a presentation-side tool.  My beef is that, out of all the templating systems I've used, Smarty is one of the ugliest.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082543\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bdbf6409528370f5549e8470caf6ba30&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tali Banana</a>\n</div>\n<a href=\"#comment-221082543\" class=\"permalink\"><time datetime=\"2006-02-01T17:30:03\">2006-02-01T17:30:03</time></a>\n</div>\n<div class=\"content\"><p>Smarty does need some standards redesign on the interface, as does php itself which has been well documented but slow going.</p>\n<p>Coming from the PERL background and previous php template systems I've been very happy with Smarty in general, even if there are a few things that could be done to speed up the learning curve.</p>\n<p>May be worthwhile jumping on the dev team and making some suggestions.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082544\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221082544\" class=\"permalink\"><time datetime=\"2006-02-02T01:30:31\">2006-02-02T01:30:31</time></a>\n</div>\n<div class=\"content\"><p>But why would you need a template system when you’re already working with PHP, which is itself a template system? Why do You don’t have to have different languages to be able to put the business logic in one file and the display logic in another.</p>\n<p>Perl (not PERL), btw, has the Template Toolkit on the CPAN, which is the spiritual father of Smarty. (And it’s vaguely more defensible in Perl’s case becase Perl is not a template system; though constrated with Perl the deficiencies of TT’s mini language are just all the more painfully obvious.)</p>\n<p>By all of which I mean to say that whether people use languages in stupid ways does not mean the language is the problem; not in either PHP’s or Perl’s case.</p>\n<p>I also don’t see why you need a templating system to implement caching; in fact, having caching coupled with the template engine sounds like a bad distribution of responsibilities. (Indeed, Template Toolkit has no such facilities.) But there’s the Cache::Cache family of modules on the CPAN, which you can use to cache things completely independently of <em>what</em> is being cached – whether it be the output of a template, or the query results themselves, or anything else, which might not even have anything to do without any output you generate.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082546\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bab1c370ad7b246023e23e87c8e206c4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">M.</a>\n</div>\n<a href=\"#comment-221082546\" class=\"permalink\"><time datetime=\"2006-02-16T14:13:18\">2006-02-16T14:13:18</time></a>\n</div>\n<div class=\"content\"><p>I've good experiences with the Expose PHP template engine (www.kwasd.nl/expose). It doesn't require you to learn a new language, because it uses plain PHP and still offers security, because it contains a tokenizer and, in fact, a small compiler. I used it for some projects and it really offered all I needed. </p>\n<p>And for people who wonder why one would need a template engine: I work with designers and I don't want them to mingle application code. By setting up a shared folder which contains the templates, they can safely work on design and never need to touch my controller or module files. Especially since this template engine has a tokenizer/compiler, they can't call unsafe PHP functions (only those that you, the programmer, register).</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082549\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://mike.teczno.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e3b46099c3fd3844c4539b27f143fd97&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://mike.teczno.com\">Michal Migurski</a>\n</div>\n<a href=\"#comment-221082549\" class=\"permalink\"><time datetime=\"2006-03-05T23:16:25\">2006-03-05T23:16:25</time></a>\n</div>\n<div class=\"content\"><p>Smarty appealed to us because it offered a (relatively) clean way to separate the code from the HTML output. It's definitely got its problems. A large part of the choice was based on my perception of Smarty as having much thought &amp; effort behind it, plus I like the idea of templates caching down to plain PHP. I've done a few PHP projects where I used PHP as the templating language, and frequently succumbed to the temptation to stash app logic into the templates where it didn't really belong. Smarty has a pretty extensive vocabulary, but has (so far) resisted the pull to incorporate more real-language features, like PHP did. It's worth remembering that PHP was originally supposed to be a template language for \"real\" code to be written in C. <em>shudder</em></p>\n<p>When we forked Reblog from Feed On Feeds, we were starting with raw-PHP display code mixed in with database calls, and it was a freaking disaster. One of my first design goals was to make it hacker-friendly, clarifying and documenting as many seams as possible so people could make localized changes more easily. I'd like to be using Python under the hood with Smarty on top, though there's a lot to be said for using commonly-known tools like Smarty in apps where you want to encourage modifications.</p>\n<p>And Wordpress.... oh, Wordpress. My eyes roll back in my head when I'm forced to touch its convoluted innards. I pushed hard for a Reblog plug-in API specifically so I could cheerfully deprecate the old-style Wordpress plug-in. =)</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Although I have [my grousing about PHP in general][gphp], I have to say that it makes much better template language as-is before pulling something like [Smarty][smarty] into the mix.  \r\n\r\nAt this point, I consider [Smarty][] to be evil—though I'm willing to admit that I haven't grokked it fully yet.  And this is coming from [a templating addict][tmpl] who has been at times in love with [Template Toolkit][tt] in Perl,  [Velocity][] in Java, and [Cheetah][] and [Woven][] and [ZPT/TAL][zpt] in Python.  \r\n\r\n[WordPress][] seems to have put native-PHP-as-templating to good use, so I've already got a favorite for comparison.  But the use of [Smarty][] in [reBlog][] rubs me the wrong way.  Of course, [reBlog][] has a lot of highly-abstracted MVC architecture going on.  And this, itself, is something I haven't much in my PHP explorations thus far.  (In fact, I almost hate to see PHP chopped up in this J2EE-esque fashion, but that's another story.  Oh, and [reBlog][] rocks, by the way.)\r\n\r\nBut either way, [Smarty][] makes this right-handed hacker feel like he's writing with his left.  It seems to have a lot of weird conventions and terminology for which neither knowledge of PHP nor knowledge of other templating systems in general seem much help.  It could just be a learning curve, but to me it seems like an odd *sideways* curve at the moment.  \r\n\r\nIn fact, you know what?  [Smarty][] reminds me a lot of [DTML in Zope][dtml].  I hate [DTML][]—it, also, is most firmly on my evil list.\r\n\r\nYuck.  Again, it could be just that I haven't known [Smarty][] long enough to like it... but yuck.\r\n\r\n<!-- tags: templating php smarty dtml python perl cheetah webdev programming syndication reblog wordpress evil -->\r\n\r\n[dtml]: http://www.zope.org/Documentation/Guides/DTML-HTML/DTML.html\r\n[tt]: http://www.template-toolkit.org/\r\n[velocity]: http://jakarta.apache.org/velocity/\r\n[gphp]: http://decafbad.com/blog/2005/12/18/not-so-deep-php-thoughts\r\n[cheetah]: http://www.cheetahtemplate.org/\r\n[zpt]: http://www.owlfish.com/software/simpleTAL/\r\n[smarty]: http://smarty.php.net\r\n[wordpress]: http://wordpress.org/\r\n[reblog]: http://www.reblog.org/\r\n[woven]: http://twisted.sourceforge.net/TwistedDocs-1.2.0rc3/howto/woven.html\r\n[tmpl]: http://decafbad.com/blog/2005/09/25/templates-good-or-evil\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221082526\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://luka.kladaric.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=78b0e32da6ce10e17db345a9aa8cde78&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://luka.kladaric.net/\">Luka Kladaric</a>\r\n                </div>\r\n                <a href=\"#comment-221082526\" class=\"permalink\"><time datetime=\"2006-01-08T11:55:40\">2006-01-08T11:55:40</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I agree with you... I used Smarty in one project and am now using it in another work-in-progress... and I have to say, the decision to use it with the second was a bad one... Smarty is pretty cool for simple templating, but when you need raw power, it leaves you shipwrecked... I had to turn to some really black magic to get things done... Anyway, a rewrite of the first project is in negotiations and I'm 100% sure I will <em>NOT</em> be using Smarty there, either.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082527\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://laughingmeme.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=01457d1a0f0e533062cd0d1033fb4d7a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://laughingmeme.org\">kellan</a>\r\n                </div>\r\n                <a href=\"#comment-221082527\" class=\"permalink\"><time datetime=\"2006-01-08T14:34:57\">2006-01-08T14:34:57</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Agreed.  Using a templating languages with PHP makes no sense. (though I'm not sure the fact that WP does or doesn't do something makes it good design)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082528\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221082528\" class=\"permalink\"><time datetime=\"2006-01-08T15:03:33\">2006-01-08T15:03:33</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Kellan:  Oh, no, WordPress isn't an automatic gold standard for me...  There's plenty that could be better about WP.  (Not having checked out 2.0 yet)  But, I just had a much better time setting up the templates for this blog than I have had in hacking around with templates implemented in Smarty.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082529\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://sporkmonger.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://sporkmonger.com/\">Bob Aman</a>\r\n                </div>\r\n                <a href=\"#comment-221082529\" class=\"permalink\"><time datetime=\"2006-01-08T17:41:17\">2006-01-08T17:41:17</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Me, I just wish there was a templating system for Ruby for me to fall in love with.  With all due respect to the Rails people, ERb just doesn't really do it for me.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082530\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\r\n                </div>\r\n                <a href=\"#comment-221082530\" class=\"permalink\"><time datetime=\"2006-01-08T21:04:14\">2006-01-08T21:04:14</time></a>\r\n            </div>\r\n            <div class=\"content\"><p><a href=\"#comment-3388\" rel=\"nofollow\">Bob</a>: port <a href=\"http://kid.lesscode.org/language.html\" rel=\"nofollow\">Kid</a> to Ruby. :-<i></i>)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082532\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://talideon.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e698f564ac90c4c248f1f678caafd624&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://talideon.com/\">Keith Gaughan</a>\r\n                </div>\r\n                <a href=\"#comment-221082532\" class=\"permalink\"><time datetime=\"2006-01-08T21:28:05\">2006-01-08T21:28:05</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>What's moronic is that people go to all this trouble building templating systems when all you really need is extract(). Sad, really.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082533\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.ntwizards.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cb564795a1912c36f9fa1399fd22ce29&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.ntwizards.net/\">Bryce</a>\r\n                </div>\r\n                <a href=\"#comment-221082533\" class=\"permalink\"><time datetime=\"2006-01-12T13:33:10\">2006-01-12T13:33:10</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>PHP as a template engine is more evil than Smarty. The main issue is that template authors may not be trustworthy. Once you include or eval() a PHP template the app is no longer in control and I don't see any way of structuring a PHP app such that it cannot be subverted from within. </p>\r\n\r\n<p>The only defense seems to be using the tokenizer functions to build a PHP parser that validates templates against a \"whitelist\" of allowed operations. Savant's Restricted Compiler is about the only implementation out there, but it's not quite complete and seems to be more of a proof-of-concept than battle-tested code.</p>\r\n\r\n<p>Whatever Smarty's faults, it solves the untrusted templates problem nicely.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082534\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221082534\" class=\"permalink\"><time datetime=\"2006-01-12T14:27:42\">2006-01-12T14:27:42</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Bryce: Oh, I totally understand the implications of offering too much capability to template authors.  That's just how much I dislike Smarty—I'm willing to risk it, rather than put up with that particular implementation.  On the other hand, in my situation, I'm on the same team with the template developers, so we're all on the same team to sink or swim.  I know it's not that simple, in principle, but it covers the 80% of the 80/20 equation.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082536\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://dougal.gunters.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=81717a172b6918071fbea1a52483294b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://dougal.gunters.org/\">Dougal Campbell</a>\r\n                </div>\r\n                <a href=\"#comment-221082536\" class=\"permalink\"><time datetime=\"2006-01-12T15:25:25\">2006-01-12T15:25:25</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Yeah, I was never able to get into Smarty either, and I've never been able to put my finger on why. Philosophically, I like the idea of using template engines, particularly if you're collaborating with a non-programming designer. I even wrote one (albeit a <em>very simple</em> one) myself, once. But I've never used any of the PHP template packages that I've looked at.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082537\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://sporkmonger.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://sporkmonger.com/\">Bob Aman</a>\r\n                </div>\r\n                <a href=\"#comment-221082537\" class=\"permalink\"><time datetime=\"2006-01-13T01:10:16\">2006-01-13T01:10:16</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Aristotle: When TurboGears first came out, I almost did, believe it or not.  But then I remembered that FeedTools eats all of the time I have available for open-source projects, and I figured someone else would probably do it for me anyways...</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082538\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\r\n                </div>\r\n                <a href=\"#comment-221082538\" class=\"permalink\"><time datetime=\"2006-01-13T09:02:38\">2006-01-13T09:02:38</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Hehe. Well, I plan to port it to Perl, in any case. :<i></i>-)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082539\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=31475c246f5521e40d92a29ec0e36aa8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Brian Grayless</a>\r\n                </div>\r\n                <a href=\"#comment-221082539\" class=\"permalink\"><time datetime=\"2006-01-19T16:00:24\">2006-01-19T16:00:24</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Smarty is really a waste of time. Some food for thought....</p>\r\n\r\n<p><a href=\"http://www.fudnik.com/main/tiki-read_article.php?articleId=7\" rel=\"nofollow\">Smarty for Dummies?</a></p>\r\n\r\n<p>Just write better code!!!</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082540\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bdbf6409528370f5549e8470caf6ba30&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Tali Banana</a>\r\n                </div>\r\n                <a href=\"#comment-221082540\" class=\"permalink\"><time datetime=\"2006-02-01T07:33:41\">2006-02-01T07:33:41</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Well, quite opinionated I see.</p>\r\n\r\n<p>Smarty solves some fantastic problems and the cacheing system is beyond fabulous at this level.</p>\r\n\r\n<p>I've used Smarty on several projects and have been using it now exclusively for 4 years.  Of course, I used others but it was getting sick coming to a new phase in a project and finding out the template system had become RIP....abandoned before their time.</p>\r\n\r\n<p>Smarty has done two great things for me, and I'll speak about them until the day that PHP is abolished:</p>\r\n\r\n<ol>\r\n<li><p>Smarty has reduced my code to a reasonably sized, scan-able, masterpiece.  Having the logic and presentation seperate is so nice.  I recently rewrote one of my old projects using smarty and all of a sudden it made sense!  No more php in the html and no more html in the php.  And that's something you can't solve without templates for you juniors out there.</p></li>\r\n<li><p>Smarty's caching has turned monster db queries into non issues.  Consider this.  A top 10 list from all-time sales.  I'm talking about searching a db with sales spanning 6 years for all items purchased and creating a top sales page.  Easy!  Smarty does it once and caches the results until I decide they need to be refreshed.  Took a 4 second execution time down to less than 0.4 seconds.  And all without having to implement a CMS or otherwise.  Even if you have limitless resources to buy new hardware, caching like this still makes sense.  And the intermediate php/html cache is brilliant.  Everything is so much faster with smarty.</p></li>\r\n</ol>\r\n\r\n<p>I can't deny, I love Smarty.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082542\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221082542\" class=\"permalink\"><time datetime=\"2006-02-01T11:43:36\">2006-02-01T11:43:36</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Tali: I'm usually opinionated, but I try to listen &amp; learn :)</p>\r\n\r\n<p>The benefits you describe with Smarty would seem to come with any decent web development system.  Separating logic and presentation are the general idea behind templating, and some sort of caching is a must no matter what you're using as a presentation-side tool.  My beef is that, out of all the templating systems I've used, Smarty is one of the ugliest.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082543\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bdbf6409528370f5549e8470caf6ba30&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Tali Banana</a>\r\n                </div>\r\n                <a href=\"#comment-221082543\" class=\"permalink\"><time datetime=\"2006-02-01T17:30:03\">2006-02-01T17:30:03</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Smarty does need some standards redesign on the interface, as does php itself which has been well documented but slow going.</p>\r\n\r\n<p>Coming from the PERL background and previous php template systems I've been very happy with Smarty in general, even if there are a few things that could be done to speed up the learning curve.</p>\r\n\r\n<p>May be worthwhile jumping on the dev team and making some suggestions.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082544\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\r\n                </div>\r\n                <a href=\"#comment-221082544\" class=\"permalink\"><time datetime=\"2006-02-02T01:30:31\">2006-02-02T01:30:31</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>But why would you need a template system when you’re already working with PHP, which is itself a template system? Why do You don’t have to have different languages to be able to put the business logic in one file and the display logic in another.</p>\r\n\r\n<p>Perl (not PERL), btw, has the Template Toolkit on the CPAN, which is the spiritual father of Smarty. (And it’s vaguely more defensible in Perl’s case becase Perl is not a template system; though constrated with Perl the deficiencies of TT’s mini language are just all the more painfully obvious.)</p>\r\n\r\n<p>By all of which I mean to say that whether people use languages in stupid ways does not mean the language is the problem; not in either PHP’s or Perl’s case.</p>\r\n\r\n<p>I also don’t see why you need a templating system to implement caching; in fact, having caching coupled with the template engine sounds like a bad distribution of responsibilities. (Indeed, Template Toolkit has no such facilities.) But there’s the Cache::Cache family of modules on the CPAN, which you can use to cache things completely independently of <em>what</em> is being cached – whether it be the output of a template, or the query results themselves, or anything else, which might not even have anything to do without any output you generate.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082546\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bab1c370ad7b246023e23e87c8e206c4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">M.</a>\r\n                </div>\r\n                <a href=\"#comment-221082546\" class=\"permalink\"><time datetime=\"2006-02-16T14:13:18\">2006-02-16T14:13:18</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I've good experiences with the Expose PHP template engine (www.kwasd.nl/expose). It doesn't require you to learn a new language, because it uses plain PHP and still offers security, because it contains a tokenizer and, in fact, a small compiler. I used it for some projects and it really offered all I needed. </p>\r\n\r\n<p>And for people who wonder why one would need a template engine: I work with designers and I don't want them to mingle application code. By setting up a shared folder which contains the templates, they can safely work on design and never need to touch my controller or module files. Especially since this template engine has a tokenizer/compiler, they can't call unsafe PHP functions (only those that you, the programmer, register).</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082549\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://mike.teczno.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e3b46099c3fd3844c4539b27f143fd97&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://mike.teczno.com\">Michal Migurski</a>\r\n                </div>\r\n                <a href=\"#comment-221082549\" class=\"permalink\"><time datetime=\"2006-03-05T23:16:25\">2006-03-05T23:16:25</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Smarty appealed to us because it offered a (relatively) clean way to separate the code from the HTML output. It's definitely got its problems. A large part of the choice was based on my perception of Smarty as having much thought &amp; effort behind it, plus I like the idea of templates caching down to plain PHP. I've done a few PHP projects where I used PHP as the templating language, and frequently succumbed to the temptation to stash app logic into the templates where it didn't really belong. Smarty has a pretty extensive vocabulary, but has (so far) resisted the pull to incorporate more real-language features, like PHP did. It's worth remembering that PHP was originally supposed to be a template language for \"real\" code to be written in C. <em>shudder</em></p>\r\n\r\n<p>When we forked Reblog from Feed On Feeds, we were starting with raw-PHP display code mixed in with database calls, and it was a freaking disaster. One of my first design goals was to make it hacker-friendly, clarifying and documenting as many seams as possible so people could make localized changes more easily. I'd like to be using Python under the hood with Smarty on top, though there's a lot to be said for using commonly-known tools like Smarty in apps where you want to encourage modifications.</p>\r\n\r\n<p>And Wordpress.... oh, Wordpress. My eyes roll back in my head when I'm forced to touch its convoluted innards. I pushed hard for a Reblog plug-in API specifically so I could cheerfully deprecate the old-style Wordpress plug-in. =)</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/01/08/smarty-is-on-my-evil-list",
    "prevPostPath": "2006/01/12/got-your-music-store-butting-into-my-library",
    "nextPostPath": "2006/01/07/ocd-thoughts-syndicated"
  },
  {
    "comments_archived": true,
    "date": "2005-12-19T03:50:25.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "python",
      "ruby",
      "perl"
    ],
    "title": "Not-so-deep PHP thoughts",
    "wordpress_id": 803,
    "wordpress_slug": "not-so-deep-php-thoughts",
    "wordpress_url": "http://decafbad.com/blog/?p=803",
    "year": "2005",
    "month": "12",
    "day": "18",
    "isDir": false,
    "slug": "not-so-deep-php-thoughts",
    "postName": "2005-12-18-not-so-deep-php-thoughts",
    "html": "<p>You know, not that I&#39;ve been at it for long, but I&#39;ve had an long-running observation about PHP:</p>\n<p>As a language and an API, <a href=\"http://www.netalive.org/swsu/archives/2004/09/why_php_still_s.html\">PHP kinda stinks</a>.  It&#39;s got more crud than I left behind in Perl, but without all the meta-magic that made it worth it.  And, I get a little nervous tic when I think about it in relation to Python and Ruby.</p>\n<p>On the other hand, it&#39;s ubiquitous and cheap—and because it&#39;s in the hands of people with all levels of skill, most popular PHP apps have by necessity managed a high standard of easy install and simplicity.  The languages with more meta-magic tend to attract eggheads (myself included) who can forget about keeping things simple.</p>\n<p>And, did I mention PHP is ubiquitous?</p>\n<!-- tags: php webdev perl python ruby -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221083537\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.whump.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=152a649080e99c313ecae9a34c60d11d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.whump.com/\">Bill Humphries</a>\n</div>\n<a href=\"#comment-221083537\" class=\"permalink\"><time datetime=\"2005-12-19T06:38:33\">2005-12-19T06:38:33</time></a>\n</div>\n<div class=\"content\"><ol>\n<li>PHP has some future-proofing in that almost everyone doing web development knows it or can pick it up. That reduces risks for IT adoption.</li>\n<li>$5/month web hosts have it installed.</li>\n</ol></div>\n</li>\n<li class=\"comment\" id=\"comment-221083539\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://wdogsystems.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6e24f47aa88626872c16e0f740739e8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://wdogsystems.com\">Tim Howland</a>\n</div>\n<a href=\"#comment-221083539\" class=\"permalink\"><time datetime=\"2006-01-10T14:27:54\">2006-01-10T14:27:54</time></a>\n</div>\n<div class=\"content\"><p>While I don't care for the crappy structure that the language seems to revel in (SQL in your HTML? WTF?), what I despise about PHP is how hard it is to build and deploy it with a ny extensions to the basic feature set.</p>\n<p>If you need to do images, you compile in LibGD, if you want to render text, you get the freetype libraries, if you need something that isn't mysql, you compile that in- and then off you go trying to find the version of libJpeg from 1993, because the ancient version of libGD that's bundled with PHP doesn't work with anything more recent.</p>\n<p>Plain-vanilla PHP is ubiquitous, but trying to roll your own on an arbitrary box somewhere and do something that doesn't come with the default PHP that ships with your distribution is a huge and unnecessary pain in the ass. Perl can be annoying, but at least it isn't a monolithic binary- the library system drastically reduces the cross-component dependencies that PHP suffers from.</p>\n<p>PHP sucks, and it amazes me that it is so ubiquitous. On the otherhand, so is Microsoft Windows.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "You know, not that I've been at it for long, but I've had an long-running observation about PHP:\r\n\r\nAs a language and an API, [PHP kinda stinks][ps].  It's got more crud than I left behind in Perl, but without all the meta-magic that made it worth it.  And, I get a little nervous tic when I think about it in relation to Python and Ruby.\r\n\r\nOn the other hand, it's ubiquitous and cheap—and because it's in the hands of people with all levels of skill, most popular PHP apps have by necessity managed a high standard of easy install and simplicity.  The languages with more meta-magic tend to attract eggheads (myself included) who can forget about keeping things simple.\r\n\r\nAnd, did I mention PHP is ubiquitous?\r\n\r\n<!-- tags: php webdev perl python ruby -->\r\n\r\n[ps]: http://www.netalive.org/swsu/archives/2004/09/why_php_still_s.html\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221083537\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.whump.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=152a649080e99c313ecae9a34c60d11d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.whump.com/\">Bill Humphries</a>\r\n                </div>\r\n                <a href=\"#comment-221083537\" class=\"permalink\"><time datetime=\"2005-12-19T06:38:33\">2005-12-19T06:38:33</time></a>\r\n            </div>\r\n            <div class=\"content\"><ol>\r\n<li>PHP has some future-proofing in that almost everyone doing web development knows it or can pick it up. That reduces risks for IT adoption.</li>\r\n<li>$5/month web hosts have it installed.</li>\r\n</ol></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221083539\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://wdogsystems.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6e24f47aa88626872c16e0f740739e8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://wdogsystems.com\">Tim Howland</a>\r\n                </div>\r\n                <a href=\"#comment-221083539\" class=\"permalink\"><time datetime=\"2006-01-10T14:27:54\">2006-01-10T14:27:54</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>While I don't care for the crappy structure that the language seems to revel in (SQL in your HTML? WTF?), what I despise about PHP is how hard it is to build and deploy it with a ny extensions to the basic feature set.</p>\r\n\r\n<p>If you need to do images, you compile in LibGD, if you want to render text, you get the freetype libraries, if you need something that isn't mysql, you compile that in- and then off you go trying to find the version of libJpeg from 1993, because the ancient version of libGD that's bundled with PHP doesn't work with anything more recent.</p>\r\n\r\n<p>Plain-vanilla PHP is ubiquitous, but trying to roll your own on an arbitrary box somewhere and do something that doesn't come with the default PHP that ships with your distribution is a huge and unnecessary pain in the ass. Perl can be annoying, but at least it isn't a monolithic binary- the library system drastically reduces the cross-component dependencies that PHP suffers from.</p>\r\n\r\n<p>PHP sucks, and it amazes me that it is so ubiquitous. On the otherhand, so is Microsoft Windows.</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/12/19/not-so-deep-php-thoughts",
    "prevPostPath": "2005/12/19/js-versus-php",
    "nextPostPath": "2005/12/19/feedmagick-gains-an-rss-to-json-filter"
  },
  {
    "comments_archived": true,
    "date": "2005-10-25T16:28:01.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "python",
      "xbox",
      "xbmc",
      "lazyweb"
    ],
    "title": "IPython as networked command shell on XBMC?",
    "wordpress_id": 749,
    "wordpress_slug": "ipython-as-networked-command-shell-on-xbmc",
    "wordpress_url": "http://decafbad.com/blog/?p=749",
    "year": "2005",
    "month": "10",
    "day": "25",
    "isDir": false,
    "slug": "ipython-as-networked-command-shell-on-xbmc",
    "postName": "2005-10-25-ipython-as-networked-command-shell-on-xbmc",
    "html": "<p>Just in case it&#39;s already been done, or I don&#39;t get around do doing it, hear me oh <a href=\"http://www.lazyweb.org/\">LazyWeb</a>:  </p>\n<p>I want to cobble together a version of <a href=\"http://ipython.scipy.org/\">IPython</a> (or at least an <a href=\"http://docs.python.org/lib/module-code.html\">InteractiveConsole</a>) that runs on a network socket for access via telnet.  I then intend to upload this to my <a href=\"http://decafbad.com/blog/2005/09/26/making-the-xbox-maker-friendly\">XBMC-equipped Xbox</a> and run it as a command shell there for access from my LAN.  It seems like an idea that should work, since XBMC packs a Python install.</p>\n<!-- tags: python xbmc xbox lazyweb -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087779\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://edey.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6558a34bd2590143d0e945e7020b49bf&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://edey.org\">mike</a>\n</div>\n<a href=\"#comment-221087779\" class=\"permalink\"><time datetime=\"2005-10-26T02:59:28\">2005-10-26T02:59:28</time></a>\n</div>\n<div class=\"content\"><p>I don't have such a toy to play with but I'm wondering why the question wasn't asked, and answered, with ssh+screen?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087782\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221087782\" class=\"permalink\"><time datetime=\"2005-10-26T03:36:57\">2005-10-26T03:36:57</time></a>\n</div>\n<div class=\"content\"><p>@Mike: Because XBMC doesn't run ssh+screen, only a Python interpreter embedded in an entertainment center media dashboard. (ie. Not an OS like Linux)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087784\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://thoughts.keenspace.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=adb573897a5fbaeda0d049a803a33c3f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://thoughts.keenspace.com/\">kaolin fire</a>\n</div>\n<a href=\"#comment-221087784\" class=\"permalink\"><time datetime=\"2005-10-26T06:37:55\">2005-10-26T06:37:55</time></a>\n</div>\n<div class=\"content\"><p>when you say 'like telnet' you mean just opening up port 23 and listening on it and executing said instructions?  I don't know Python (though coincidentally I had to debug some 2-3yo python today; that was interesting), but I presume it makes it not-so-hard to open server sockets and listener sockets, and then execute the dynamic code in a readloop... but then I don't know XBMC beyond the above link you posted, so this is probably just all optimistic hot air. ;)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087786\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221087786\" class=\"permalink\"><time datetime=\"2005-10-26T10:44:00\">2005-10-26T10:44:00</time></a>\n</div>\n<div class=\"content\"><p>@kaolin: Oh, yeah, I think it would / will be about as easy as that.  I've just been too busy or lazy to have done it yet, and hoped that someone somewhere had already done something whizbangy with a Python shell-on-a-socket.  :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087789\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=740b38f7d90076fee1dd8aac4459b354&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Chris</a>\n</div>\n<a href=\"#comment-221087789\" class=\"permalink\"><time datetime=\"2005-10-27T11:50:52\">2005-10-27T11:50:52</time></a>\n</div>\n<div class=\"content\"><p>Perhaps PYRO (Python Remote Objects) is a choice, I might give it a try\non weekend (on my xbox of course). Though I cannot imagine any real use\nso far.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087792\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d7875f8cfd8ba9262bfff2bf6f6f9b35&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Itamar Shtull-Trauring</a>\n</div>\n<a href=\"#comment-221087792\" class=\"permalink\"><time datetime=\"2005-10-27T18:02:14\">2005-10-27T18:02:14</time></a>\n</div>\n<div class=\"content\"><p>twisted.conch lets you hook up a python interpreter to a telnet or ssh server (which are implemented in Python, of course).</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087794\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221087794\" class=\"permalink\"><time datetime=\"2005-10-27T19:18:32\">2005-10-27T19:18:32</time></a>\n</div>\n<div class=\"content\"><p>Hmm, it's been a year or so since last I tinkered with Twisted...  It's tempting, since I remember all the nifty toys I played with in that environment-- and an Xbox with XBMC is just the place for it, since it doesn't have a shell or much OS infrastructure.  Though, I was kinda looking for something that used the core Python modules so I didn't have to plunk down a lot of code on the HD.</p>\n<p>On the other hand...  Twisted could let me do a lot of things on that little box without installing Linux.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087796\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://highearthorbit.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a25421f6c79d5f381fab65c82abf85e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://highearthorbit.com\">Andrew</a>\n</div>\n<a href=\"#comment-221087796\" class=\"permalink\"><time datetime=\"2005-11-13T23:17:37\">2005-11-13T23:17:37</time></a>\n</div>\n<div class=\"content\"><p>What about looking at Nokia's Python btconsole. I run the python script on my phone, and then open a screen to the /dev/tty.NokiaBTSocket and am presented with a console on the phone itself.</p>\n<p>I imagine you could grab the btconsole.py or simplebtconsole.py and set it up on XBMC. Depends on what modules are available.</p>\n<p>I'm running a REALLY old version of XBMP (predecessor/sibling to XMBC) and have happily been running Xebian and MythTV frontend. However, recently came across the MythTV front-end with XMBC as well as all these new features so will upgrading it myself. However, the fiance' doesn't much like me messing with her \"Tivo\".</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Just in case it's already been done, or I don't get around do doing it, hear me oh [LazyWeb][lw]:  \r\n\r\nI want to cobble together a version of [IPython][ip] (or at least an [InteractiveConsole][ic]) that runs on a network socket for access via telnet.  I then intend to upload this to my [XBMC-equipped Xbox][xb] and run it as a command shell there for access from my LAN.  It seems like an idea that should work, since XBMC packs a Python install.\r\n\r\n[lw]: http://www.lazyweb.org/\r\n[ip]: http://ipython.scipy.org/\r\n[ic]: http://docs.python.org/lib/module-code.html\r\n[xb]: http://decafbad.com/blog/2005/09/26/making-the-xbox-maker-friendly\r\n\r\n<!-- tags: python xbmc xbox lazyweb -->\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087779\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://edey.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6558a34bd2590143d0e945e7020b49bf&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://edey.org\">mike</a>\n                </div>\n                <a href=\"#comment-221087779\" class=\"permalink\"><time datetime=\"2005-10-26T02:59:28\">2005-10-26T02:59:28</time></a>\n            </div>\n            <div class=\"content\"><p>I don't have such a toy to play with but I'm wondering why the question wasn't asked, and answered, with ssh+screen?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087782\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221087782\" class=\"permalink\"><time datetime=\"2005-10-26T03:36:57\">2005-10-26T03:36:57</time></a>\n            </div>\n            <div class=\"content\"><p>@Mike: Because XBMC doesn't run ssh+screen, only a Python interpreter embedded in an entertainment center media dashboard. (ie. Not an OS like Linux)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087784\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://thoughts.keenspace.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=adb573897a5fbaeda0d049a803a33c3f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://thoughts.keenspace.com/\">kaolin fire</a>\n                </div>\n                <a href=\"#comment-221087784\" class=\"permalink\"><time datetime=\"2005-10-26T06:37:55\">2005-10-26T06:37:55</time></a>\n            </div>\n            <div class=\"content\"><p>when you say 'like telnet' you mean just opening up port 23 and listening on it and executing said instructions?  I don't know Python (though coincidentally I had to debug some 2-3yo python today; that was interesting), but I presume it makes it not-so-hard to open server sockets and listener sockets, and then execute the dynamic code in a readloop... but then I don't know XBMC beyond the above link you posted, so this is probably just all optimistic hot air. ;)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087786\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221087786\" class=\"permalink\"><time datetime=\"2005-10-26T10:44:00\">2005-10-26T10:44:00</time></a>\n            </div>\n            <div class=\"content\"><p>@kaolin: Oh, yeah, I think it would / will be about as easy as that.  I've just been too busy or lazy to have done it yet, and hoped that someone somewhere had already done something whizbangy with a Python shell-on-a-socket.  :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087789\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=740b38f7d90076fee1dd8aac4459b354&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Chris</a>\n                </div>\n                <a href=\"#comment-221087789\" class=\"permalink\"><time datetime=\"2005-10-27T11:50:52\">2005-10-27T11:50:52</time></a>\n            </div>\n            <div class=\"content\"><p>Perhaps PYRO (Python Remote Objects) is a choice, I might give it a try\non weekend (on my xbox of course). Though I cannot imagine any real use\nso far.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087792\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d7875f8cfd8ba9262bfff2bf6f6f9b35&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Itamar Shtull-Trauring</a>\n                </div>\n                <a href=\"#comment-221087792\" class=\"permalink\"><time datetime=\"2005-10-27T18:02:14\">2005-10-27T18:02:14</time></a>\n            </div>\n            <div class=\"content\"><p>twisted.conch lets you hook up a python interpreter to a telnet or ssh server (which are implemented in Python, of course).</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087794\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221087794\" class=\"permalink\"><time datetime=\"2005-10-27T19:18:32\">2005-10-27T19:18:32</time></a>\n            </div>\n            <div class=\"content\"><p>Hmm, it's been a year or so since last I tinkered with Twisted...  It's tempting, since I remember all the nifty toys I played with in that environment-- and an Xbox with XBMC is just the place for it, since it doesn't have a shell or much OS infrastructure.  Though, I was kinda looking for something that used the core Python modules so I didn't have to plunk down a lot of code on the HD.</p>\n\n<p>On the other hand...  Twisted could let me do a lot of things on that little box without installing Linux.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087796\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://highearthorbit.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a25421f6c79d5f381fab65c82abf85e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://highearthorbit.com\">Andrew</a>\n                </div>\n                <a href=\"#comment-221087796\" class=\"permalink\"><time datetime=\"2005-11-13T23:17:37\">2005-11-13T23:17:37</time></a>\n            </div>\n            <div class=\"content\"><p>What about looking at Nokia's Python btconsole. I run the python script on my phone, and then open a screen to the /dev/tty.NokiaBTSocket and am presented with a console on the phone itself.</p>\n\n<p>I imagine you could grab the btconsole.py or simplebtconsole.py and set it up on XBMC. Depends on what modules are available.</p>\n\n<p>I'm running a REALLY old version of XBMP (predecessor/sibling to XMBC) and have happily been running Xebian and MythTV frontend. However, recently came across the MythTV front-end with XMBC as well as all these new features so will upgrading it myself. However, the fiance' doesn't much like me messing with her \"Tivo\".</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/10/25/ipython-as-networked-command-shell-on-xbmc",
    "prevPostPath": "2005/10/25/ipod-go-thud-then-click-click-click",
    "nextPostPath": "2005/10/25/looks-like-i-need-a-new-library-card"
  },
  {
    "comments_archived": true,
    "date": "2005-09-30T16:11:09.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "projects",
      "python",
      "decafbad",
      "trac"
    ],
    "title": "Trac rocks like a really rocking thing",
    "wordpress_id": 710,
    "wordpress_slug": "trac-rocks-like-a-really-rocking-thing",
    "wordpress_url": "http://decafbad.com/blog/?p=710",
    "year": "2005",
    "month": "09",
    "day": "30",
    "isDir": false,
    "slug": "trac-rocks-like-a-really-rocking-thing",
    "postName": "2005-09-30-trac-rocks-like-a-really-rocking-thing",
    "html": "<p>Say hello to <a href=\"http://decafbad.com/trac/\">my new Trac installation</a>!</p>\n<p>For a couple of years now, I&#39;ve been meaning to take a serious look at <a href=\"http://projects.edgewall.com/trac/\">Trac</a>.  But, general level of busy, as well as random obstacles to getting it up and running kept me from getting very far.  Such is so often the story with me.</p>\n<p>Finally, though, I&#39;ve gotten <a href=\"http://decafbad.com/trac/\">an instance</a> running on our server here.  All I can say is, &quot;<strong>Wow!</strong>&quot;  This package does everything I ever wanted to cobble together using <a href=\"http://twiki.org/\">TWiki</a>, <a href=\"http://moinmoin.wikiwikiweb.de/\">MoinMoin</a>, <a href=\"http://www.kwiki.org/\">kwiki</a> <a href=\"http://viewcvs.sourceforge.net/\">viewcvs</a>, and any other pieces I ever looked at (ie. <a href=\"http://www.bugzilla.org\">Bugzilla</a>, <a href=\"http://www.bestpractical.com/rt/\">Request Tracker</a>, etc)</p>\n<p><a href=\"http://projects.edgewall.com/trac/\">Trac</a> has an amazingly dead-simple macro and plugin system which puts <a href=\"http://twiki.org/\">TWiki</a> and possibly <a href=\"http://www.kwiki.org/\">kwiki</a> to shame.  Just take a look at the <a href=\"http://projects.edgewall.com/trac/wiki/MacroBazaar\">MacroBazzar</a> and this <a href=\"http://trac-hacks.swapoff.org/\">hacks collection</a>.  And, the system seems pretty cleanly architected—templates pages, simple extension points, SQLite database.  I&#39;ve already been able to easily wade in and make some tweaks of my own under the hood, as well as fix a few macro/plugins which were broken between v0.8 / v0.9 revisions.</p>\n<p>Your mileage may vary, of course, but I think I&#39;ve found my new favorite web app.  It&#39;s now a replacement for the wiki and SVN repository browser I used to have running on 0xDECAFBAD v3.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090855\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://simon.incutio.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=de99266e9eaac8b6946541f8661afbd8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://simon.incutio.com/\">Simon Willison</a>\n</div>\n<a href=\"#comment-221090855\" class=\"permalink\"><time datetime=\"2005-09-30T16:19:27\">2005-09-30T16:19:27</time></a>\n</div>\n<div class=\"content\"><p>I couldn't agree more - Trac is an absolute gem. It's even written in Python :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090856\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a0b347907bfaf05694805210ec595d6c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Martin Atkins</a>\n</div>\n<a href=\"#comment-221090856\" class=\"permalink\"><time datetime=\"2005-09-30T18:54:02\">2005-09-30T18:54:02</time></a>\n</div>\n<div class=\"content\"><p>My favourite thing is that you can use Wiki markup in the commit log. Sure, it doesn't work if you're not viewing it through Trac, but Wiki markup tends to be unobtrusive anyway.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090857\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cb8d1a00f46e0382a9e9c2f36fcedb5f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Brandon Pierce</a>\n</div>\n<a href=\"#comment-221090857\" class=\"permalink\"><time datetime=\"2005-10-02T19:31:27\">2005-10-02T19:31:27</time></a>\n</div>\n<div class=\"content\"><p>My only complaint about Trac is how difficult it is to get installed and going. I consider myself a power user, though I'm not exactly a code whiz, and I still had a rough time getting it going on my OS X machine (and quite frankly never really did get it fully going). I suppose I'm spoiled by all of the great double-clickable installers that people make for these kinds of packages. :) If I knew more I'd figure out how to make one for Trac.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090858\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.brunningonline.net/simon/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02b2184590d81d2280d2c9802b05fe83&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.brunningonline.net/simon/blog/\">Simon Brunning</a>\n</div>\n<a href=\"#comment-221090858\" class=\"permalink\"><time datetime=\"2005-10-04T13:47:23\">2005-10-04T13:47:23</time></a>\n</div>\n<div class=\"content\"><p>Re Trac on OSX - anyone tried http://trac.darwinports.com/ ?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090860\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://esc.web.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d648b96ed56c22d316154432e12967c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://esc.web.com\">Richard Bogle</a>\n</div>\n<a href=\"#comment-221090860\" class=\"permalink\"><time datetime=\"2005-10-09T23:06:50\">2005-10-09T23:06:50</time></a>\n</div>\n<div class=\"content\"><p>I had the same grief with getting Trac running and then <a href=\"http://www.cvsdude.com/\" rel=\"nofollow\">CVSDude</a> offered it all nicely hosted for me. :)  The price is right and the system works and it's exactly what I wanted.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Say hello to [my new Trac installation][dbtrac]!\r\n\r\nFor a couple of years now, I've been meaning to take a serious look at [Trac][].  But, general level of busy, as well as random obstacles to getting it up and running kept me from getting very far.  Such is so often the story with me.\r\n\r\nFinally, though, I've gotten [an instance][dbtrac] running on our server here.  All I can say is, \"**Wow!**\"  This package does everything I ever wanted to cobble together using [TWiki][twiki], [MoinMoin][moin], [kwiki][] [viewcvs][], and any other pieces I ever looked at (ie. [Bugzilla][], [Request Tracker][], etc)\r\n\r\n[Trac][] has an amazingly dead-simple macro and plugin system which puts [TWiki][] and possibly [kwiki][] to shame.  Just take a look at the [MacroBazzar][baz] and this [hacks collection][hacks].  And, the system seems pretty cleanly architected—templates pages, simple extension points, SQLite database.  I've already been able to easily wade in and make some tweaks of my own under the hood, as well as fix a few macro/plugins which were broken between v0.8 / v0.9 revisions.\r\n\r\nYour mileage may vary, of course, but I think I've found my new favorite web app.  It's now a replacement for the wiki and SVN repository browser I used to have running on 0xDECAFBAD v3.\r\n\r\n[moin]: http://moinmoin.wikiwikiweb.de/\r\n[kwiki]: http://www.kwiki.org/\r\n[baz]: http://projects.edgewall.com/trac/wiki/MacroBazaar\r\n[hacks]: http://trac-hacks.swapoff.org/\r\n[tag]: http://dev.muness.textdriven.com/trac.cgi/wiki/tags/Setup\r\n[request tracker]: http://www.bestpractical.com/rt/\r\n[bugzilla]: http://www.bugzilla.org\r\n[twiki]: http://twiki.org/\r\n[viewcvs]: http://viewcvs.sourceforge.net/\r\n[dbtrac]: http://decafbad.com/trac/\r\n[trac]: http://projects.edgewall.com/trac/\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221090855\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://simon.incutio.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=de99266e9eaac8b6946541f8661afbd8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://simon.incutio.com/\">Simon Willison</a>\n                </div>\n                <a href=\"#comment-221090855\" class=\"permalink\"><time datetime=\"2005-09-30T16:19:27\">2005-09-30T16:19:27</time></a>\n            </div>\n            <div class=\"content\"><p>I couldn't agree more - Trac is an absolute gem. It's even written in Python :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090856\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a0b347907bfaf05694805210ec595d6c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Martin Atkins</a>\n                </div>\n                <a href=\"#comment-221090856\" class=\"permalink\"><time datetime=\"2005-09-30T18:54:02\">2005-09-30T18:54:02</time></a>\n            </div>\n            <div class=\"content\"><p>My favourite thing is that you can use Wiki markup in the commit log. Sure, it doesn't work if you're not viewing it through Trac, but Wiki markup tends to be unobtrusive anyway.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090857\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cb8d1a00f46e0382a9e9c2f36fcedb5f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Brandon Pierce</a>\n                </div>\n                <a href=\"#comment-221090857\" class=\"permalink\"><time datetime=\"2005-10-02T19:31:27\">2005-10-02T19:31:27</time></a>\n            </div>\n            <div class=\"content\"><p>My only complaint about Trac is how difficult it is to get installed and going. I consider myself a power user, though I'm not exactly a code whiz, and I still had a rough time getting it going on my OS X machine (and quite frankly never really did get it fully going). I suppose I'm spoiled by all of the great double-clickable installers that people make for these kinds of packages. :) If I knew more I'd figure out how to make one for Trac.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090858\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.brunningonline.net/simon/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02b2184590d81d2280d2c9802b05fe83&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.brunningonline.net/simon/blog/\">Simon Brunning</a>\n                </div>\n                <a href=\"#comment-221090858\" class=\"permalink\"><time datetime=\"2005-10-04T13:47:23\">2005-10-04T13:47:23</time></a>\n            </div>\n            <div class=\"content\"><p>Re Trac on OSX - anyone tried http://trac.darwinports.com/ ?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090860\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://esc.web.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d648b96ed56c22d316154432e12967c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://esc.web.com\">Richard Bogle</a>\n                </div>\n                <a href=\"#comment-221090860\" class=\"permalink\"><time datetime=\"2005-10-09T23:06:50\">2005-10-09T23:06:50</time></a>\n            </div>\n            <div class=\"content\"><p>I had the same grief with getting Trac running and then <a href=\"http://www.cvsdude.com/\" rel=\"nofollow\">CVSDude</a> offered it all nicely hosted for me. :)  The price is right and the system works and it's exactly what I wanted.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/09/30/trac-rocks-like-a-really-rocking-thing",
    "prevPostPath": "2005/10/03/a-kerfluffle-of-opml-and-web-directories",
    "nextPostPath": "2005/09/29/ode-to-a-vertical-tab-strip-in-firefox"
  },
  {
    "comments_archived": true,
    "date": "2004-12-03T01:15:52.000Z",
    "excerpt": "Both ZPT and XSLT very different technologies, but they are often used in similar contexts.  More than once, I've wished that XSLT was as simple as ZPT (i.e. less verbose and intrusive, more document centered), and I've wished that ZPT had some of the features of XSLT (i.e. ability to be used as a transforming filter).",
    "layout": "post",
    "tags": [
      "xml",
      "python"
    ],
    "title": "Cross-breeding XSLT and ZPT",
    "wordpress_id": 570,
    "wordpress_slug": "crossbreedingxsltzpt",
    "wordpress_url": "http://www.decafbad.com/blog/?p=570",
    "year": "2004",
    "month": "12",
    "day": "02",
    "isDir": false,
    "slug": "crossbreedingxsltzpt",
    "postName": "2004-12-02-crossbreedingxsltzpt",
    "html": "<p>I&#39;ve recently been doing some side work involving Zope and, along with the rest of the suite of technologies it offers, I&#39;ve been happy to be working with <a href=\"http://dev.zope.org/Wikis/DevSite/Projects/ZPT/FrontPage\">Zope Page Templates</a> again.  I dabbled with them a bit when they first came out, and a Zope-free implementation named <a href=\"http://www.owlfish.com/software/simpleTAL/\">SimpleTAL</a> was one of the core components of the iteration of my news aggregator which came before FeedReactor.</p>\n<p>Out of all the templating and content generation approaches I&#39;ve used, Zope Page Templates are my favorite yet.  Pretty expressive, yet unobtrusive; nicely powerful, yet not quite something with which you&#39;d want to write an entire application (<a href=\"http://naeblis.cx/rtomayko/2004/12/02/a-note-on-template-design\">and that&#39;s a feature, not a bug</a>).  </p>\n<p>I&#39;ve yet to be in a work-a-day team that uses ZPT-- but I can see where a lot of production, delegation, and integration issues would have gone much smoother had I used ZPT instead of <a href=\"http://www.template-toolkit.org/\">Template Toolkit</a> for the web app framework I created at a previous company.  (Though I do have to say TT2 is <em>very</em> nicely done!)  And where I am now, I spend most of my days trying to pummel ASP 3.0 pages into some semblance of logic/presentation separation-- I would certainly dive at the chance to dump VBScript and <code>&lt;% cruft %&gt;</code> for a bit of Python and ZPT.  (But, you know, <em>it&#39;s a living</em>.)</p>\n<p>A close second favorite is XSLT.  I&#39;ve really been hot on it lately, having worked it into the core of FeedReactor in place of SimpleTAL.  And in <a href=\"http://www.decafbad.com/blog/2003/09/02/xsl_scraper\">other</a> <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">hacks</a>, I&#39;ve really come to appreciate it&#39;s role as a filter segment in pipelines between REST web services and <a href=\"http://udell.roninhouse.com/bytecols/2001-08-15.html\">URL-as-command-line</a> invocations.</p>\n<p>Granted, both ZPT and XSLT very different technologies, but they are often used in similar contexts.  More than once, I&#39;ve wished that XSLT was as simple as ZPT (i.e. less verbose and intrusive, more document centered), and I&#39;ve wished that ZPT had some of the features of XSLT (i.e. ability to be used as a transforming filter).</p>\n<p>Reading <a href=\"http://naeblis.cx/rtomayko/2004/11/30/pythonic-xml-based-templating-language\">Ryan Tomayko&#39;s description of Kid</a> got me thinking, and googling.  One thing I turned up from a mailing list archive asked about an &#8220;<a href=\"http://mail.zope.org/pipermail/zpt/2002-January/002651.html\">XSL implementation of TAL?</a>&#8221;  It struck me as a tad nutty at first, but then I started having inklings that just maybe it could be done.  (Whether it <em>should</em> be done, well...)  But the kernel of the idea grabbed me: Instead of using <a href=\"http://zope.org/Wikis/DevSite/Projects/ZPT/TALES%20Specification%201.3\">TALES path expressions</a> to look up values in Pythonic space, why not use XPath expressions to look up values from a supplied XML document?</p>\n<p>This strikes me as such an obvious idea that someone has to already have done it and possibly rejected it for good reason.  On the other hand, maybe this is the sort of thing Ryan&#39;s thinking about-- I wonder how hard it would be to hack this into Kid?  It would give only a subset of XSLT&#39;s capabilities in trade for simplicity, and would only offer the &#8220;<a href=\"http://www.dpawson.co.uk/xsl/sect2/pushpull.html\">pull</a>&#8221; approach, but it would give XML-pipelining to a ZPT-ish technology.</p>\n<p>I think this is something I want to look into a bit further at some point.</p>\n<!--more-->\n<p>shortname=crossbreedingxsltzpt</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087930\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://blog.ianbicking.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cc8334869c9d2a9e603017f2da805eb3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://blog.ianbicking.org\">Ian Bicking</a>\n</div>\n<a href=\"#comment-221087930\" class=\"permalink\"><time datetime=\"2004-12-04T17:16:09\">2004-12-04T17:16:09</time></a>\n</div>\n<div class=\"content\">I've been meaning to write about this on my blog, as I've done something similar.\nInstead of using XSLT, I've used ZPT for the transformations.  It was an application where the user created a document in a WYSIWYG editor, then we wanted to pull information out of the content -- like a table of contents, or a title.\nTo do this I parsed the content into a DOM, then put some objects in the ZPT namespace that manipulated it.  For instance, the ToC object took a tag name (through getitem) and returned a list of the content and id of those tags (it created ids if necessary, modifying the content).  Then you could easily create a ToC by looking through and creating anchor tags from, say, all the  tags in the document.  It should be easy to expand with other transformations (all coded in Python, of course).  The actual code was only like 20 lines of Python, maybe less, and easy to understand from both sides (ZPT and Python).</div>\n</li>\n<li class=\"comment\" id=\"comment-221087932\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=14076d6ce3d0e8a0fd751a36d9912df5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Petri Savolainen</a>\n</div>\n<a href=\"#comment-221087932\" class=\"permalink\"><time datetime=\"2004-12-13T05:21:41\">2004-12-13T05:21:41</time></a>\n</div>\n<div class=\"content\">See http://zope.org/Members/DaddyGravity/PT_XPath\nIt would be great to have that in SimpleTAL, too.</div>\n</li>\n<li class=\"comment\" id=\"comment-221087935\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://blog.ianbicking.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cc8334869c9d2a9e603017f2da805eb3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://blog.ianbicking.org\">Ian Bicking</a>\n</div>\n<a href=\"#comment-221087935\" class=\"permalink\"><time datetime=\"2004-12-13T11:43:33\">2004-12-13T11:43:33</time></a>\n</div>\n<div class=\"content\">Another thing you might want to look at: in the last few days there's been discussion on the ZPT mailing list about an extension to stylesheets (TERSE) for ZPT that introduces transformations.</div>\n</li>\n<li class=\"comment\" id=\"comment-221087937\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://codeconsult.ch/bertrand\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d244e495717742bd0776b715a45877eb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://codeconsult.ch/bertrand\">Bertrand Delacretaz</a>\n</div>\n<a href=\"#comment-221087937\" class=\"permalink\"><time datetime=\"2004-12-13T15:15:55\">2004-12-13T15:15:55</time></a>\n</div>\n<div class=\"content\">FYI, people from the Apache Cocoon and BXE projects are working on similar stuff, in the opposite direction: we're taking TAL-like templates and converting them to XSLT, adding simple \"match\" templates for declarative rules. It's only prototypes and experiments for now, but the results look promising.\nMore info at\nhttp://wiki.apache.org/cocoon/HtmlToXsltExperiments\nand\nhttp://blog.bitflux.ch/archive/further-improvements-on-xsl-tal.html</div>\n</li>\n<li class=\"comment\" id=\"comment-221087939\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.manuzhai.nl/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d62bb8855d45ab52fd5a414f0ca47703&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.manuzhai.nl/\">Manuzhai</a>\n</div>\n<a href=\"#comment-221087939\" class=\"permalink\"><time datetime=\"2004-12-13T16:07:54\">2004-12-13T16:07:54</time></a>\n</div>\n<div class=\"content\">I like XSLT a lot, myself, and I have advocated it in the past on my weblog, but it just doesn't seem to be very wide-spread. Which is a pity, I think the world would be much easier if more people used this *standard* way of templating.\nOne of the bigger problems with it seems to be the verbosity, so I've been thinking of a more compact syntax, kind of like RELAX NG has the .rnc compact stuff. I don't know if it's very feasible, but it seems like that would be not very hard; just have some compact syntax which maps onto a real XSLT-sheet (it could be \"compiled\" and cached, if need be).</div>\n</li>\n<li class=\"comment\" id=\"comment-221087942\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.owlfish.com/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=377cef4245e0fcbf76e021d9cd253e35&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.owlfish.com/weblog/\">Colin Stewart</a>\n</div>\n<a href=\"#comment-221087942\" class=\"permalink\"><time datetime=\"2004-12-13T23:47:18\">2004-12-13T23:47:18</time></a>\n</div>\n<div class=\"content\">Integrating an XPATH implementation into SimpleTAL shouldn't be too hard as the TALES and TAL implementations share a fairly simple interface.  There are 6 methods you'd have to provide to the simpleTAL module and that's about it.\nI don't know if XPATH is the right approach though - how would things like tal:define work if the paths were pure XPATH instead of TALES?  Being able to mix XPATH and TALES would work better I think.\nA more promising approach would be to integrate ElementTree so that the 'find*' methods were usable from within TALES.  Making it so that '/mydoc/root/find/.//searchElement' works would be fairly easy, but getting '/mydoc/root/find/.//searchElement/attrib/firstAtt' to work would require more co-operation between ElemenTree and SimpleTAL.\nI'll have a think about this though as it sounds like a promising approach.</div>\n</li>\n<li class=\"comment\" id=\"comment-221087946\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d67eea2ce18dd70f4642cb971c2c5ad2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Paul Everitt</a>\n</div>\n<a href=\"#comment-221087946\" class=\"permalink\"><time datetime=\"2004-12-14T00:45:18\">2004-12-14T00:45:18</time></a>\n</div>\n<div class=\"content\">Chapter 11 of Jeni Tennison's \"XSLT and XPath On The Edge\" book has a section called \"Using Page Templates\".  It includes an example of using substitution points.\nLike some of the others in this thread, playing with doing merges using DOM IDs and other patterns.  This lets you write \"themes\" that are simpler than even ZPT, as they contain no non-XHTML namespace elements.\nThanks for the article, which also seems to have brought out some interesting comments and URLs!</div>\n</li>\n<li class=\"comment\" id=\"comment-221087948\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n</div>\n<a href=\"#comment-221087948\" class=\"permalink\"><time datetime=\"2004-12-14T20:23:08\">2004-12-14T20:23:08</time></a>\n</div>\n<div class=\"content\">Don't forget you can run Python within IIS/ASP!\nhttp://webseitz.fluxent.com/articles/PythonViaIis</div>\n</li>\n<li class=\"comment\" id=\"comment-221087950\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.owlfish.com/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=377cef4245e0fcbf76e021d9cd253e35&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.owlfish.com/weblog/\">Colin Stewart</a>\n</div>\n<a href=\"#comment-221087950\" class=\"permalink\"><time datetime=\"2004-12-15T22:49:30\">2004-12-15T22:49:30</time></a>\n</div>\n<div class=\"content\">I've put together an experimental build of SimpleTAL that integrates ElementTree to provide some of the XPATH syntax.  It's just an experiment, but see what you think.\n(More detail here: http://www.owlfish.com/weblog/2004/12/15122004.html#20:59:59)</div>\n</li>\n</ul>\n</div>\n",
    "body": "I've recently been doing some side work involving Zope and, along with the rest of the suite of technologies it offers, I've been happy to be working with [Zope Page Templates](http://dev.zope.org/Wikis/DevSite/Projects/ZPT/FrontPage) again.  I dabbled with them a bit when they first came out, and a Zope-free implementation named [SimpleTAL](http://www.owlfish.com/software/simpleTAL/) was one of the core components of the iteration of my news aggregator which came before FeedReactor.\r\n\r\nOut of all the templating and content generation approaches I've used, Zope Page Templates are my favorite yet.  Pretty expressive, yet unobtrusive; nicely powerful, yet not quite something with which you'd want to write an entire application ([and that's a feature, not a bug](http://naeblis.cx/rtomayko/2004/12/02/a-note-on-template-design)).  \r\n  \r\nI've yet to be in a work-a-day team that uses ZPT-- but I can see where a lot of production, delegation, and integration issues would have gone much smoother had I used ZPT instead of [Template Toolkit](http://www.template-toolkit.org/) for the web app framework I created at a previous company.  (Though I do have to say TT2 is *very* nicely done!)  And where I am now, I spend most of my days trying to pummel ASP 3.0 pages into some semblance of logic/presentation separation-- I would certainly dive at the chance to dump VBScript and `<% cruft %>` for a bit of Python and ZPT.  (But, you know, *it's a living*.)\r\n   \r\nA close second favorite is XSLT.  I've really been hot on it lately, having worked it into the core of FeedReactor in place of SimpleTAL.  And in [other](http://www.decafbad.com/blog/2003/09/02/xsl_scraper) [hacks](http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1), I've really come to appreciate it's role as a filter segment in pipelines between REST web services and [URL-as-command-line](http://udell.roninhouse.com/bytecols/2001-08-15.html) invocations.\r\n\r\nGranted, both ZPT and XSLT very different technologies, but they are often used in similar contexts.  More than once, I've wished that XSLT was as simple as ZPT (i.e. less verbose and intrusive, more document centered), and I've wished that ZPT had some of the features of XSLT (i.e. ability to be used as a transforming filter).\r\n\r\nReading [Ryan Tomayko's description of Kid](http://naeblis.cx/rtomayko/2004/11/30/pythonic-xml-based-templating-language) got me thinking, and googling.  One thing I turned up from a mailing list archive asked about an &#8220;[XSL implementation of TAL?](http://mail.zope.org/pipermail/zpt/2002-January/002651.html)&#8221;  It struck me as a tad nutty at first, but then I started having inklings that just maybe it could be done.  (Whether it *should* be done, well...)  But the kernel of the idea grabbed me: Instead of using [TALES path expressions](http://zope.org/Wikis/DevSite/Projects/ZPT/TALES%20Specification%201.3) to look up values in Pythonic space, why not use XPath expressions to look up values from a supplied XML document?\r\n\r\nThis strikes me as such an obvious idea that someone has to already have done it and possibly rejected it for good reason.  On the other hand, maybe this is the sort of thing Ryan's thinking about-- I wonder how hard it would be to hack this into Kid?  It would give only a subset of XSLT's capabilities in trade for simplicity, and would only offer the &#8220;[pull](http://www.dpawson.co.uk/xsl/sect2/pushpull.html)&#8221; approach, but it would give XML-pipelining to a ZPT-ish technology.\r\n\r\nI think this is something I want to look into a bit further at some point.\r\n<!--more-->\r\nshortname=crossbreedingxsltzpt\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221087930\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://blog.ianbicking.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cc8334869c9d2a9e603017f2da805eb3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://blog.ianbicking.org\">Ian Bicking</a>\r\n                </div>\r\n                <a href=\"#comment-221087930\" class=\"permalink\"><time datetime=\"2004-12-04T17:16:09\">2004-12-04T17:16:09</time></a>\r\n            </div>\r\n            <div class=\"content\">I've been meaning to write about this on my blog, as I've done something similar.\r\n\r\nInstead of using XSLT, I've used ZPT for the transformations.  It was an application where the user created a document in a WYSIWYG editor, then we wanted to pull information out of the content -- like a table of contents, or a title.\r\n\r\nTo do this I parsed the content into a DOM, then put some objects in the ZPT namespace that manipulated it.  For instance, the ToC object took a tag name (through getitem) and returned a list of the content and id of those tags (it created ids if necessary, modifying the content).  Then you could easily create a ToC by looking through and creating anchor tags from, say, all the  tags in the document.  It should be easy to expand with other transformations (all coded in Python, of course).  The actual code was only like 20 lines of Python, maybe less, and easy to understand from both sides (ZPT and Python).</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087932\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=14076d6ce3d0e8a0fd751a36d9912df5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Petri Savolainen</a>\r\n                </div>\r\n                <a href=\"#comment-221087932\" class=\"permalink\"><time datetime=\"2004-12-13T05:21:41\">2004-12-13T05:21:41</time></a>\r\n            </div>\r\n            <div class=\"content\">See http://zope.org/Members/DaddyGravity/PT_XPath\r\n\r\nIt would be great to have that in SimpleTAL, too.</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087935\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://blog.ianbicking.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cc8334869c9d2a9e603017f2da805eb3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://blog.ianbicking.org\">Ian Bicking</a>\r\n                </div>\r\n                <a href=\"#comment-221087935\" class=\"permalink\"><time datetime=\"2004-12-13T11:43:33\">2004-12-13T11:43:33</time></a>\r\n            </div>\r\n            <div class=\"content\">Another thing you might want to look at: in the last few days there's been discussion on the ZPT mailing list about an extension to stylesheets (TERSE) for ZPT that introduces transformations.</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087937\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://codeconsult.ch/bertrand\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d244e495717742bd0776b715a45877eb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://codeconsult.ch/bertrand\">Bertrand Delacretaz</a>\r\n                </div>\r\n                <a href=\"#comment-221087937\" class=\"permalink\"><time datetime=\"2004-12-13T15:15:55\">2004-12-13T15:15:55</time></a>\r\n            </div>\r\n            <div class=\"content\">FYI, people from the Apache Cocoon and BXE projects are working on similar stuff, in the opposite direction: we're taking TAL-like templates and converting them to XSLT, adding simple \"match\" templates for declarative rules. It's only prototypes and experiments for now, but the results look promising.\r\n\r\nMore info at\r\nhttp://wiki.apache.org/cocoon/HtmlToXsltExperiments\r\nand\r\nhttp://blog.bitflux.ch/archive/further-improvements-on-xsl-tal.html</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087939\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.manuzhai.nl/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d62bb8855d45ab52fd5a414f0ca47703&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.manuzhai.nl/\">Manuzhai</a>\r\n                </div>\r\n                <a href=\"#comment-221087939\" class=\"permalink\"><time datetime=\"2004-12-13T16:07:54\">2004-12-13T16:07:54</time></a>\r\n            </div>\r\n            <div class=\"content\">I like XSLT a lot, myself, and I have advocated it in the past on my weblog, but it just doesn't seem to be very wide-spread. Which is a pity, I think the world would be much easier if more people used this *standard* way of templating.\r\n\r\nOne of the bigger problems with it seems to be the verbosity, so I've been thinking of a more compact syntax, kind of like RELAX NG has the .rnc compact stuff. I don't know if it's very feasible, but it seems like that would be not very hard; just have some compact syntax which maps onto a real XSLT-sheet (it could be \"compiled\" and cached, if need be).</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087942\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.owlfish.com/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=377cef4245e0fcbf76e021d9cd253e35&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.owlfish.com/weblog/\">Colin Stewart</a>\r\n                </div>\r\n                <a href=\"#comment-221087942\" class=\"permalink\"><time datetime=\"2004-12-13T23:47:18\">2004-12-13T23:47:18</time></a>\r\n            </div>\r\n            <div class=\"content\">Integrating an XPATH implementation into SimpleTAL shouldn't be too hard as the TALES and TAL implementations share a fairly simple interface.  There are 6 methods you'd have to provide to the simpleTAL module and that's about it.\r\n\r\nI don't know if XPATH is the right approach though - how would things like tal:define work if the paths were pure XPATH instead of TALES?  Being able to mix XPATH and TALES would work better I think.\r\n\r\nA more promising approach would be to integrate ElementTree so that the 'find*' methods were usable from within TALES.  Making it so that '/mydoc/root/find/.//searchElement' works would be fairly easy, but getting '/mydoc/root/find/.//searchElement/attrib/firstAtt' to work would require more co-operation between ElemenTree and SimpleTAL.\r\n\r\nI'll have a think about this though as it sounds like a promising approach.</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087946\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d67eea2ce18dd70f4642cb971c2c5ad2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Paul Everitt</a>\r\n                </div>\r\n                <a href=\"#comment-221087946\" class=\"permalink\"><time datetime=\"2004-12-14T00:45:18\">2004-12-14T00:45:18</time></a>\r\n            </div>\r\n            <div class=\"content\">Chapter 11 of Jeni Tennison's \"XSLT and XPath On The Edge\" book has a section called \"Using Page Templates\".  It includes an example of using substitution points.\r\n\r\nLike some of the others in this thread, playing with doing merges using DOM IDs and other patterns.  This lets you write \"themes\" that are simpler than even ZPT, as they contain no non-XHTML namespace elements.\r\n\r\nThanks for the article, which also seems to have brought out some interesting comments and URLs!</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087948\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\r\n                </div>\r\n                <a href=\"#comment-221087948\" class=\"permalink\"><time datetime=\"2004-12-14T20:23:08\">2004-12-14T20:23:08</time></a>\r\n            </div>\r\n            <div class=\"content\">Don't forget you can run Python within IIS/ASP!\r\n\r\nhttp://webseitz.fluxent.com/articles/PythonViaIis</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087950\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.owlfish.com/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=377cef4245e0fcbf76e021d9cd253e35&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.owlfish.com/weblog/\">Colin Stewart</a>\r\n                </div>\r\n                <a href=\"#comment-221087950\" class=\"permalink\"><time datetime=\"2004-12-15T22:49:30\">2004-12-15T22:49:30</time></a>\r\n            </div>\r\n            <div class=\"content\">I've put together an experimental build of SimpleTAL that integrates ElementTree to provide some of the XPATH syntax.  It's just an experiment, but see what you think.\r\n\r\n(More detail here: http://www.owlfish.com/weblog/2004/12/15122004.html#20:59:59)</div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/12/03/crossbreedingxsltzpt",
    "summary": "<p>I&apos;ve recently been doing some side work involving Zope and, along with the rest of the suite of technologies it offers, I&apos;ve been happy to be working with <a href=\"http://dev.zope.org/Wikis/DevSite/Projects/ZPT/FrontPage\">Zope Page Templates</a> again.  I dabbled with them a bit when they first came out, and a Zope-free implementation named <a href=\"http://www.owlfish.com/software/simpleTAL/\">SimpleTAL</a> was one of the core components of the iteration of my news aggregator which came before FeedReactor.</p>\n<p>Out of all the templating and content generation approaches I&apos;ve used, Zope Page Templates are my favorite yet.  Pretty expressive, yet unobtrusive; nicely powerful, yet not quite something with which you&apos;d want to write an entire application (<a href=\"http://naeblis.cx/rtomayko/2004/12/02/a-note-on-template-design\">and that&apos;s a feature, not a bug</a>).  </p>\n<p>I&apos;ve yet to be in a work-a-day team that uses ZPT-- but I can see where a lot of production, delegation, and integration issues would have gone much smoother had I used ZPT instead of <a href=\"http://www.template-toolkit.org/\">Template Toolkit</a> for the web app framework I created at a previous company.  (Though I do have to say TT2 is <em>very</em> nicely done!)  And where I am now, I spend most of my days trying to pummel ASP 3.0 pages into some semblance of logic/presentation separation-- I would certainly dive at the chance to dump VBScript and <code>&lt;% cruft %&gt;</code> for a bit of Python and ZPT.  (But, you know, <em>it&apos;s a living</em>.)</p>\n<p>A close second favorite is XSLT.  I&apos;ve really been hot on it lately, having worked it into the core of FeedReactor in place of SimpleTAL.  And in <a href=\"http://www.decafbad.com/blog/2003/09/02/xsl_scraper\">other</a> <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">hacks</a>, I&apos;ve really come to appreciate it&apos;s role as a filter segment in pipelines between REST web services and <a href=\"http://udell.roninhouse.com/bytecols/2001-08-15.html\">URL-as-command-line</a> invocations.</p>\n<p>Granted, both ZPT and XSLT very different technologies, but they are often used in similar contexts.  More than once, I&apos;ve wished that XSLT was as simple as ZPT (i.e. less verbose and intrusive, more document centered), and I&apos;ve wished that ZPT had some of the features of XSLT (i.e. ability to be used as a transforming filter).</p>\n<p>Reading <a href=\"http://naeblis.cx/rtomayko/2004/11/30/pythonic-xml-based-templating-language\">Ryan Tomayko&apos;s description of Kid</a> got me thinking, and googling.  One thing I turned up from a mailing list archive asked about an &#x201C;<a href=\"http://mail.zope.org/pipermail/zpt/2002-January/002651.html\">XSL implementation of TAL?</a>&#x201D;  It struck me as a tad nutty at first, but then I started having inklings that just maybe it could be done.  (Whether it <em>should</em> be done, well...)  But the kernel of the idea grabbed me: Instead of using <a href=\"http://zope.org/Wikis/DevSite/Projects/ZPT/TALES%20Specification%201.3\">TALES path expressions</a> to look up values in Pythonic space, why not use XPath expressions to look up values from a supplied XML document?</p>\n<p>This strikes me as such an obvious idea that someone has to already have done it and possibly rejected it for good reason.  On the other hand, maybe this is the sort of thing Ryan&apos;s thinking about-- I wonder how hard it would be to hack this into Kid?  It would give only a subset of XSLT&apos;s capabilities in trade for simplicity, and would only offer the &#x201C;<a href=\"http://www.dpawson.co.uk/xsl/sect2/pushpull.html\">pull</a>&#x201D; approach, but it would give XML-pipelining to a ZPT-ish technology.</p>\n<p>I think this is something I want to look into a bit further at some point.</p>\n",
    "prevPostPath": "2004/12/03/if-you-snore-get-tested-for-sleep-apnea-now",
    "nextPostPath": "2004/12/02/nofroogleapi"
  },
  {
    "comments_archived": true,
    "date": "2004-08-05T23:53:34.000Z",
    "excerpt": "I've just dumped what code I have into my CVS repository.  So, go ahead and poke fun at it.",
    "layout": "post",
    "tags": [
      "syndication",
      "python"
    ],
    "title": "dbagg3 code in CVS",
    "wordpress_id": 537,
    "wordpress_slug": "dbagg3cvs",
    "wordpress_url": "http://www.decafbad.com/blog/?p=537",
    "year": "2004",
    "month": "08",
    "day": "05",
    "isDir": false,
    "slug": "dbagg3cvs",
    "postName": "2004-08-05-dbagg3cvs",
    "html": "<p>I&#39;ve just dumped what code I have into my CVS repository.  So, go ahead and poke fun at it:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/dbagg3/\">http://www.decafbad.com/cvs/dbagg3/</a></li>\n</ul>\n<p>Or, fetch it from CVS:</p>\n<pre><code>$ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot login\n(Logging in to anoncvs@www.decafbad.com)\nCVS password: anoncvs\n$ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot co dbagg3</code></pre>\n<!--more-->\n<p>shortname=dbagg3cvs</p>\n",
    "body": "I've just dumped what code I have into my CVS repository.  So, go ahead and poke fun at it:\r\n\r\n   * <http://www.decafbad.com/cvs/dbagg3/>\r\n\r\nOr, fetch it from CVS:\r\n\r\n    $ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot login\r\n    (Logging in to anoncvs@www.decafbad.com)\r\n    CVS password: anoncvs\r\n    $ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot co dbagg3\r\n<!--more-->\r\nshortname=dbagg3cvs\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/08/05/dbagg3cvs",
    "summary": "<p>I&apos;ve just dumped what code I have into my CVS repository.  So, go ahead and poke fun at it:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/dbagg3/\">http://www.decafbad.com/cvs/dbagg3/</a></li>\n</ul>\n<p>Or, fetch it from CVS:</p>\n<pre><code>$ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot login\n(Logging in to anoncvs@www.decafbad.com)\nCVS password: anoncvs\n$ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot co dbagg3</code></pre>\n",
    "prevPostPath": "2004/08/23/mysql-and-xml-output",
    "nextPostPath": "2004/08/05/introducing-dbagg3-an-atom-powered-clientserver-aggregator"
  },
  {
    "comments_archived": true,
    "date": "2004-08-05T13:04:56.000Z",
    "excerpt": "It's a new feed aggregator, my third attempt at such.  Everything is clunky and command-line driven at present--but I've got further plans, like a REST API for feed queries and manipulation of various things such as feed subscriptions and the read/unread state of items.  Pair this with an XSLT-driven browser UI, and the possibility of other clients (not the least of include other Atom-consuming aggregators).\n\nThe goal is to make a Client/Server Aggregator.",
    "layout": "post",
    "tags": [
      "syndication",
      "python"
    ],
    "title": "Introducing dbagg3, an Atom-powered client/server aggregator",
    "wordpress_id": 536,
    "wordpress_slug": "introducing-dbagg3-an-atom-powered-clientserver-aggregator",
    "wordpress_url": "http://www.decafbad.com/blog/?p=536",
    "year": "2004",
    "month": "08",
    "day": "05",
    "isDir": false,
    "slug": "introducing-dbagg3-an-atom-powered-clientserver-aggregator",
    "postName": "2004-08-05-introducing-dbagg3-an-atom-powered-clientserver-aggregator",
    "html": "<p><strong>Update</strong>: I&#39;ve just dumped what code I have into my CVS repository.  So, go ahead and poke fun at it:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/dbagg3/\">http://www.decafbad.com/cvs/dbagg3/</a></li>\n</ul>\n<p>Or, fetch it from CVS:</p>\n<pre><code>$ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot login\n(Logging in to anoncvs@www.decafbad.com)\nCVS password: anoncvs\n$ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot co dbagg3</code></pre>\n<hr>\n<p>So, besides the funk, there&#39;s a little project in which I&#39;ve gotten immersed.  Here&#39;s a teaser diagram:</p>\n<img src=\"http://www.decafbad.com/2004/08/dbagg3-demo/dbagg3-phase1.jpg\" />\n\n<p>It&#39;s a feed aggregator, my third attempt at such.  At present, things are roughly close to the diagram above.  Everything is clunky and command-line driven at present--but I&#39;ve got further plans, like a REST API for feed queries and manipulation of various things such as feed subscriptions and the read/unread state of items.  Pair this with an XSLT-driven browser UI, and the possibility of other clients (not the least of include other Atom-consuming aggregators).</p>\n<p>The goal is to make a <a href=\"http://www.intertwingly.net/wiki/pie/ClientServerAggregator\">Client/Server Aggregator</a>.  Somewhat serendipitously, I just caught Bob DuCharme&#39;s xml.com <a href=\"http://www.xml.com/pub/a/2004/08/04/tr-xml.html\">article on Amazon.com&#39;s web services</a>, which <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">I really like</a> and have drawn inspiration from in thinking about this new aggregator.  Eventually, I want to offer the same sort of XML+XSL style of service that they&#39;ve put together, along with some futher inspiration from the <a href=\"http://www.atomenabled.org/developers/api/atom-api-spec.php\">Atom API</a>.  </p>\n<p>Anyway, as another teaser, check out this early demo involving the XML this thing has been producing, coupled with some experimental XSL:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi?xsl=http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl&#38;xml=http://www.decafbad.com/2004/08/dbagg3-demo/demo.xml\">dbagg3 demo page</a></li>\n</ul>\n<p>You&#39;ll notice that there are three URLs involved here:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi\">An XSLT processor service</a></li>\n<li><a href=\"http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl\">An XSLT stylesheet</a></li>\n<li><a href=\"http://www.decafbad.com/2004/08/dbagg3-demo/demo.xml\">Some aggregated Atom feeds</a></li>\n</ul>\n<p>The XSLT expects Atom (plus a few extensions of my own), so you can also do things like this:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi?xsl=http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl&#38;xml=http://www.diveintomark.org/xml/atom.xml\">Dive Into Mark</a></li>\n<li><a href=\"http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi?xsl=http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl&#38;xml=http://www.intertwingly.net/blog/index.atom\">Intertwingly</a></li>\n<li><a href=\"http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi?xsl=http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl&#38;xml=http://www.decafbad.com/blog/atom.xml\">0xDECAFBAD</a></li>\n</ul>\n<p>These are the sorts of tricks I was looking forward to when I started thinking about things like a <a href=\"http://www.decafbad.com/blog/2004/05/17/use_atom_for_a_universal_blog_transfer_protocol\">universal blog transfer format</a> and <a href=\"http://www.decafbad.com/blog/2004/05/03/put_on_your_rsscolored_glasses_and_forget_about_atom\">rose-colored glasses</a>.  XSLT used like this could just as easily produce a blog or RSS 2.0 content.</p>\n<p>Anyway, hoping to get some code into CVS by this weekend that&#39;s not entirely embarassing.  So if you&#39;re interested in this stuff, stay tuned.  I&#39;m hoping that this thing can provide a base for others interested in feed aggregation--if you just want to play with UI, use the scanning and storage as-is and tinker with XSLT; if you want to play with storage and query, leave the scanning and UI alone; if you want to tinker with parsing... er, <a href=\"http://www.feedparser.org/\">talk to Mark Pilgrim</a>.</p>\n<p>More soon!  </p>\n<p>(Oh yeah, and I <em>will</em> be working on coming up with a better name than <code>dbagg3</code>.  Unfortunately, I probably won&#39;t be coming up with a more visually appealing design for the UI, since what you see is the best I can do.  Heh, heh.  Don&#39;t let your programmers do visual design...)</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221084326\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://blog.nur-eine-i.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e7368d797917d0df7942c26d4ed2e580&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://blog.nur-eine-i.de\">Benjamin</a>\n</div>\n<a href=\"#comment-221084326\" class=\"permalink\"><time datetime=\"2004-08-05T10:22:30\">2004-08-05T10:22:30</time></a>\n</div>\n<div class=\"content\">This is great. It seems that this could be the base, for what I've been dreaming/thinking about the last half year or so. In contrast to you, I haven't come up with any code yet (mostly due to the fact, that I don't python yet, and I found no other reasonably good feed parser, than the Universal Feed Parser), but with a name: Roosster \nFeatures I'd really like to have in such a ClientServerAggregator are:\n(a) search over entries the aggregator has seen to date\n(b) add and arbitrary number of notes to any entry\n(c) add multiple category-tags to entries\n(d) interlink entries (I know this could be solved by some 'Related Entries' stuff, but somtimes I don't trust these \"automatic classifiers\")\nCan't wait, until I can take a look at the code and see if I can extend it. This would finally be a real reason to learn python.\nBy the way, I really like the interface. Might be, that's because I'm a programmer too?!</div>\n</li>\n<li class=\"comment\" id=\"comment-221084328\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e1cc8e7103bb0f77a7d7abf91b1a961b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Christopher Drake</a>\n</div>\n<a href=\"#comment-221084328\" class=\"permalink\"><time datetime=\"2004-08-05T18:30:41\">2004-08-05T18:30:41</time></a>\n</div>\n<div class=\"content\">Very nice. The demo has me salivating a little.\nOddly enough, I like the UI. If you can slim it down, side-to-side-wise a bit, it would also be a great aggregator to rip whole chunks from and feed to a Palm Pilot or PocketPC, as well. They're not as big as they were in the past, but with decent strides every couple of weeks, they still have a lot of following. Your page-width is dynamic, and that means a lot to me, a Palm user.\nA feature I'd like to see is kind of like Bloglines, where you receive a small box of info from the RSS feed, or what-have-you to give you a taste of an article. If going 1 link deep from any link on the aggregator page linked to a small page with such a tidbit, it would make surfing the articles a lot faster. This would allow a PDA or cellphone to drag an aggregator page 1 link deep with specialised software and get all of the highlights from say, 20 blogs.\nThat could be a major boon, especially for people that connect while at wireless access points on business trips, etc.\nKeep it up, this looks like it'll rock when you are done.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084331\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://b4mad.net/datenbrei/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0038a1e9f4492e2f964f0f39d2d0dc7f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://b4mad.net/datenbrei/\">Christoph Görn</a>\n</div>\n<a href=\"#comment-221084331\" class=\"permalink\"><time datetime=\"2004-08-08T12:41:08\">2004-08-08T12:41:08</time></a>\n</div>\n<div class=\"content\">Hi,\nand I will try to plug an jabber/XMPP bot into it, so it will deliver the aggragated content rigth to my beloved IM app...</div>\n</li>\n</ul>\n</div>\n",
    "body": "**Update**: I've just dumped what code I have into my CVS repository.  So, go ahead and poke fun at it:\r\n\r\n   * <http://www.decafbad.com/cvs/dbagg3/>\r\n\r\nOr, fetch it from CVS:\r\n\r\n    $ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot login\r\n    (Logging in to anoncvs@www.decafbad.com)\r\n    CVS password: anoncvs\r\n    $ cvs -d:pserver:anoncvs@www.decafbad.com:/cvsroot co dbagg3\r\n\r\n* * *\r\n\r\nSo, besides the funk, there's a little project in which I've gotten immersed.  Here's a teaser diagram:\r\n\r\n<img src=\"http://www.decafbad.com/2004/08/dbagg3-demo/dbagg3-phase1.jpg\" />\r\n\r\nIt's a feed aggregator, my third attempt at such.  At present, things are roughly close to the diagram above.  Everything is clunky and command-line driven at present--but I've got further plans, like a REST API for feed queries and manipulation of various things such as feed subscriptions and the read/unread state of items.  Pair this with an XSLT-driven browser UI, and the possibility of other clients (not the least of include other Atom-consuming aggregators).\r\n\r\nThe goal is to make a [Client/Server Aggregator][clientserveragg].  Somewhat serendipitously, I just caught Bob DuCharme's xml.com [article on Amazon.com's web services][amazonrest], which [I really like][wishes] and have drawn inspiration from in thinking about this new aggregator.  Eventually, I want to offer the same sort of XML+XSL style of service that they've put together, along with some futher inspiration from the [Atom API][atomapi].  \r\n\r\nAnyway, as another teaser, check out this early demo involving the XML this thing has been producing, coupled with some experimental XSL:\r\n\r\n* [dbagg3 demo page][dbagg3demo]\r\n\r\nYou'll notice that there are three URLs involved here:\r\n\r\n* [An XSLT processor service][dbagg3xsltproc]\r\n* [An XSLT stylesheet][dbagg3xsl]\r\n* [Some aggregated Atom feeds][dbagg3xml]\r\n\r\nThe XSLT expects Atom (plus a few extensions of my own), so you can also do things like this:\r\n\r\n* [Dive Into Mark][mark]\r\n* [Intertwingly][sam]\r\n* [0xDECAFBAD][me]\r\n\r\nThese are the sorts of tricks I was looking forward to when I started thinking about things like a [universal blog transfer format][blogxfer] and [rose-colored glasses][roseglasses].  XSLT used like this could just as easily produce a blog or RSS 2.0 content.\r\n\r\nAnyway, hoping to get some code into CVS by this weekend that's not entirely embarassing.  So if you're interested in this stuff, stay tuned.  I'm hoping that this thing can provide a base for others interested in feed aggregation--if you just want to play with UI, use the scanning and storage as-is and tinker with XSLT; if you want to play with storage and query, leave the scanning and UI alone; if you want to tinker with parsing... er, [talk to Mark Pilgrim][ufp].\r\n\r\nMore soon!  \r\n\r\n(Oh yeah, and I *will* be working on coming up with a better name than `dbagg3`.  Unfortunately, I probably won't be coming up with a more visually appealing design for the UI, since what you see is the best I can do.  Heh, heh.  Don't let your programmers do visual design...)\r\n\r\n[atomapi]: http://www.atomenabled.org/developers/api/atom-api-spec.php\r\n[urchin]: http://urchin.sourceforge.net/\r\n[ufp]: http://www.feedparser.org/\r\n[roseglasses]: http://www.decafbad.com/blog/2004/05/03/put_on_your_rsscolored_glasses_and_forget_about_atom\r\n[blogxfer]: http://www.decafbad.com/blog/2004/05/17/use_atom_for_a_universal_blog_transfer_protocol\r\n[me]: http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi?xsl=http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl&#38;xml=http://www.decafbad.com/blog/atom.xml\r\n[sam]: http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi?xsl=http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl&#38;xml=http://www.intertwingly.net/blog/index.atom\r\n[mark]: http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi?xsl=http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl&#38;xml=http://www.diveintomark.org/xml/atom.xml\r\n[dbagg3xsltproc]: http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi\r\n[dbagg3xsl]: http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl\r\n[dbagg3xml]: http://www.decafbad.com/2004/08/dbagg3-demo/demo.xml\r\n[awsrss]: http://www.decafbad.com/2004/03/xml-rss091.xsl\r\n[dbagg3demo]: http://www.decafbad.com/2004/08/dbagg3-demo/xsltproc.cgi?xsl=http://www.decafbad.com/2004/08/dbagg3-demo/new.xsl&#38;xml=http://www.decafbad.com/2004/08/dbagg3-demo/demo.xml\r\n[clientserveragg]: http://www.intertwingly.net/wiki/pie/ClientServerAggregator\r\n[amazonrest]: http://www.xml.com/pub/a/2004/08/04/tr-xml.html\r\n[wishes]: http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221084326\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://blog.nur-eine-i.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e7368d797917d0df7942c26d4ed2e580&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://blog.nur-eine-i.de\">Benjamin</a>\r\n                </div>\r\n                <a href=\"#comment-221084326\" class=\"permalink\"><time datetime=\"2004-08-05T10:22:30\">2004-08-05T10:22:30</time></a>\r\n            </div>\r\n            <div class=\"content\">This is great. It seems that this could be the base, for what I've been dreaming/thinking about the last half year or so. In contrast to you, I haven't come up with any code yet (mostly due to the fact, that I don't python yet, and I found no other reasonably good feed parser, than the Universal Feed Parser), but with a name: Roosster \r\n\r\nFeatures I'd really like to have in such a ClientServerAggregator are:\r\n(a) search over entries the aggregator has seen to date\r\n(b) add and arbitrary number of notes to any entry\r\n(c) add multiple category-tags to entries\r\n(d) interlink entries (I know this could be solved by some 'Related Entries' stuff, but somtimes I don't trust these \"automatic classifiers\")\r\n\r\nCan't wait, until I can take a look at the code and see if I can extend it. This would finally be a real reason to learn python.\r\n\r\nBy the way, I really like the interface. Might be, that's because I'm a programmer too?!</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221084328\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e1cc8e7103bb0f77a7d7abf91b1a961b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Christopher Drake</a>\r\n                </div>\r\n                <a href=\"#comment-221084328\" class=\"permalink\"><time datetime=\"2004-08-05T18:30:41\">2004-08-05T18:30:41</time></a>\r\n            </div>\r\n            <div class=\"content\">Very nice. The demo has me salivating a little.\r\n\r\nOddly enough, I like the UI. If you can slim it down, side-to-side-wise a bit, it would also be a great aggregator to rip whole chunks from and feed to a Palm Pilot or PocketPC, as well. They're not as big as they were in the past, but with decent strides every couple of weeks, they still have a lot of following. Your page-width is dynamic, and that means a lot to me, a Palm user.\r\n\r\nA feature I'd like to see is kind of like Bloglines, where you receive a small box of info from the RSS feed, or what-have-you to give you a taste of an article. If going 1 link deep from any link on the aggregator page linked to a small page with such a tidbit, it would make surfing the articles a lot faster. This would allow a PDA or cellphone to drag an aggregator page 1 link deep with specialised software and get all of the highlights from say, 20 blogs.\r\n\r\nThat could be a major boon, especially for people that connect while at wireless access points on business trips, etc.\r\n\r\nKeep it up, this looks like it'll rock when you are done.</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221084331\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://b4mad.net/datenbrei/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0038a1e9f4492e2f964f0f39d2d0dc7f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://b4mad.net/datenbrei/\">Christoph Görn</a>\r\n                </div>\r\n                <a href=\"#comment-221084331\" class=\"permalink\"><time datetime=\"2004-08-08T12:41:08\">2004-08-08T12:41:08</time></a>\r\n            </div>\r\n            <div class=\"content\">Hi,\r\n and I will try to plug an jabber/XMPP bot into it, so it will deliver the aggragated content rigth to my beloved IM app...</div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/08/05/introducing-dbagg3-an-atom-powered-clientserver-aggregator",
    "thumbnail": "http://www.decafbad.com/2004/08/dbagg3-demo/dbagg3-phase1.jpg",
    "prevPostPath": "2004/08/05/dbagg3cvs",
    "nextPostPath": "2004/07/30/kibo-kibo-kibo"
  }
]