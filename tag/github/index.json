[
  {
    "title": "Continual Blogployment",
    "tags": [
      "metablogging",
      "webdev",
      "js",
      "gulp",
      "github",
      "travis",
      "s3",
      "amazon",
      "devops"
    ],
    "year": "2015",
    "month": "10",
    "day": "22",
    "isDir": false,
    "slug": "blogging-via-travis",
    "date": "2015-10-22T12:00:00.000Z",
    "postName": "2015-10-22-blogging-via-travis",
    "html": "<p>Ever since <a href=\"http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">I switched this blog over to a Gulp-based toolchain</a> - <em>holy crap, 2 years ago</em> - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. </p>\n<!--more-->\n\n<p>Just to test the cloud machinery I&#39;m (ab)using here, I&#39;m writing this post as a new commit on GitHub in a browser. When I get done and commit this, Travis CI will fire up, install my node-based blog code and build all the content. Assuming that goes well, my code on Travis will then publish any changes in the content to Amazon S3. And, voila, I will have blogged via the magic of cheap cloud infrastructure.</p>\n<p>Up until now, I&#39;ve been doing this all from my laptop: Write a post in Vim, commit to git, build &amp; deploy from my local machine. I&#39;d push to GitHub to work in the open and have a handy backup. But from here on, the push to GitHub will actually make the magic happen!</p>\n<p>If you&#39;re curious about the plumbing, <a href=\"https://github.com/lmorchard/blog.lmorchard.com/compare/5992311ade7acc0e9dbeb0352ac4097c687be1a5...10149c0e520f7e75536535ff563dfe42aa30b960\">the changes in my recent commits</a> can tell the exact story. But, what I did in a nutshell is this:</p>\n<ul>\n<li><a href=\"https://github.com/lmorchard/blog.lmorchard.com/commit/4c029ab9a6d3f5869cee02b7265e0ad41908a8c4\">Switched to using environment vars to configure AWS credentials for S3 publishing</a>.</li>\n<li>Used <a href=\"http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables\"><code>travis secure</code></a> to supply credentials in encrypted environment vars.</li>\n<li>Started <a href=\"https://github.com/lmorchard/blog.lmorchard.com/commit/4b525710760ad70c0d83d910585e7bd9ddd80583\">maintaining a copy of file hashes on the site</a> so that <a href=\"https://www.npmjs.com/package/gulp-awspublish\">gulp-awspublish</a> will only publish changes.</li>\n<li>Composed a <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/.travis.yml\">.travis.yml</a> to build &amp; deploy everything.</li>\n</ul>\n<p>And, if you&#39;re reading this post, then that means everything worked when I hit the &quot;Commit new file&quot; button! (And, if you&#39;re reading <em>this</em> sentence, then I was able to update this post, too!)</p>\n",
    "body": "Ever since [I switched this blog over to a Gulp-based toolchain][gulp-blog] - *holy crap, 2 years ago* - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. \n\n<!--more-->\n\nJust to test the cloud machinery I'm (ab)using here, I'm writing this post as a new commit on GitHub in a browser. When I get done and commit this, Travis CI will fire up, install my node-based blog code and build all the content. Assuming that goes well, my code on Travis will then publish any changes in the content to Amazon S3. And, voila, I will have blogged via the magic of cheap cloud infrastructure.\n\nUp until now, I've been doing this all from my laptop: Write a post in Vim, commit to git, build & deploy from my local machine. I'd push to GitHub to work in the open and have a handy backup. But from here on, the push to GitHub will actually make the magic happen!\n\nIf you're curious about the plumbing, [the changes in my recent commits][recent-commits] can tell the exact story. But, what I did in a nutshell is this:\n\n* [Switched to using environment vars to configure AWS credentials for S3 publishing][env-config].\n* Used [`travis secure`][travis-secure] to supply credentials in encrypted environment vars.\n* Started [maintaining a copy of file hashes on the site][hash-stash] so that [gulp-awspublish][] will only publish changes.\n* Composed a [.travis.yml][travis-yml] to build & deploy everything.\n\nAnd, if you're reading this post, then that means everything worked when I hit the \"Commit new file\" button! (And, if you're reading *this* sentence, then I was able to update this post, too!)\n\n[env-config]: https://github.com/lmorchard/blog.lmorchard.com/commit/4c029ab9a6d3f5869cee02b7265e0ad41908a8c4\n[gulp-awspublish]: https://www.npmjs.com/package/gulp-awspublish\n[hash-stash]: https://github.com/lmorchard/blog.lmorchard.com/commit/4b525710760ad70c0d83d910585e7bd9ddd80583\n[travis-yml]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/.travis.yml\n[travis-secure]: http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables\n[recent-commits]: https://github.com/lmorchard/blog.lmorchard.com/compare/5992311ade7acc0e9dbeb0352ac4097c687be1a5...10149c0e520f7e75536535ff563dfe42aa30b960\n[gulp-blog]: http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/10/22/blogging-via-travis",
    "summary": "<p>Ever since <a href=\"http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">I switched this blog over to a Gulp-based toolchain</a> - <em>holy crap, 2 years ago</em> - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. </p>\n",
    "prevPostPath": "2015/10/28/catbearcoin",
    "nextPostPath": "2015/10/18/being-nice-at-alterconf"
  },
  {
    "comments_archived": true,
    "layout": "post",
    "published": true,
    "tags": [
      "jekyll",
      "metablogging",
      "github"
    ],
    "time": "5:46PM",
    "title": "Further Jekyll notes",
    "year": "2011",
    "month": "06",
    "day": "08",
    "isDir": false,
    "slug": "further-jekyll-notes",
    "date": "2011-06-08T12:00:00.000Z",
    "postName": "2011-06-08-further-jekyll-notes",
    "html": "<p><strong>TL;DR</strong>: This is an in-progress entry, where I plan to collect some notes on how I&#39;ve\nset up and am using Jekyll. I may call it &quot;done&quot; at some random point and\npublish it. I may even subsequently update it from time to time, after that.</p>\n<ul>\n<li><p>To speed up the authoring / previewing cycle on my laptop, I move all but this\nyears&#39; posts into a <code>_posts_archived</code> folder and don&#39;t commit the change.</p>\n<ul>\n<li>Kind of a pain; feels like I&#39;m Doing It Wrong.</li>\n</ul>\n</li>\n<li><p><a href=\"http://pages.github.com/\">Github Pages</a> seems interesting, but I don&#39;t think it&#39;s right for me.</p>\n<ul>\n<li>My plugins don&#39;t run, so my tag pages aren&#39;t created.<ul>\n<li><a href=\"https://github.com/davedash/davedash.github.com\">davedash</a> has a different approach for this, though.</li>\n</ul>\n</li>\n<li>I can&#39;t get the permalinks just the way I like them</li>\n<li>I&#39;d have to set a <code>CNAME</code> in my DNS to point at a subdomain (ie.\n<code>blog.decafbad.com</code>), because I don&#39;t want to delegate my entire root\ndomain over to GitHub.</li>\n<li>I would 100% totally use <a href=\"http://pages.github.com/\">GitHub Pages</a> for another project that\nI&#39;m starting from scratch, though.</li>\n</ul>\n</li>\n<li><p>Since related posts via LSI is such a bear, I may try doing something with\ntags. That is: </p>\n<ul>\n<li>take all the tags from a post;</li>\n<li>find the 5 latest posts for each tag;</li>\n<li>display the unique set of posts</li>\n</ul>\n</li>\n<li><p>I want my permalinks to look like <code>/2011/06/08/slug</code></p>\n<ul>\n<li>Not <code>/2011/06/08/slug/</code> or <code>/2011/06/08/slug.html</code></li>\n<li>Look, ma, no trailing slash!</li>\n<li>This is the way I&#39;ve had my URLs for years, and I want to maintain my URLspace.</li>\n<li>And I also don&#39;t want every URL missing a trailing slash to get bounced\nwith a <code>301 Moved Permanently</code> to the equivalent <em>with</em> a trailing\nslash. That&#39;s bogus.</li>\n<li>So, I&#39;m using the <code>pretty</code> permalinks setting, and I have this in my\nnginx config:<ul>\n<li><code>if (-f $request_filename/index.html) { rewrite ^(.+)$ $1/index.html last; }</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221995558\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\">fluffy</a>\n</div>\n<a href=\"#comment-221995558\" class=\"permalink\"><time datetime=\"2011-06-09T04:55:35\">2011-06-09T04:55:35</time></a>\n</div>\n<div class=\"content\">I appreciate the notion behind the no-trailing-slash permalink (because really the only thing that should care about the specific format is the user-agent, and that's what content-type is for), but does that particular rule possibly wreak havoc on relative links? Or do you ever even use those anyway? I'm one of those few weirdos who actually does use relative links wherever possible, even on blog entries with a potentially weird URL (since I like uploading one-off images to the same directory as the published entry, and only having them visible \"below the cut\" as all the cool kids are calling \"extended entry\" these days).</div>\n</li>\n<li class=\"comment\" id=\"comment-289436387\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.michel-kraemer.de\"><img src=\"http://disqus.com/api/users/avatars/michelkraemer.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.michel-kraemer.de\">Michel Krämer</a>\n</div>\n<a href=\"#comment-289436387\" class=\"permalink\"><time datetime=\"2011-08-17T19:19:29\">2011-08-17T19:19:29</time></a>\n</div>\n<div class=\"content\">Thanks for your tips. Did you have success with your custom approach for generating related posts? It would be quite cool, if you could share your plugin.\nThanks,\nMichel</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-289452539\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-289452539\" class=\"permalink\"><time datetime=\"2011-08-17T19:44:18\">2011-08-17T19:44:18</time></a>\n</div>\n<div class=\"content\">Alas, I haven't gotten around to the related posts stuff, yet</div>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n",
    "body": "**TL;DR**: This is an in-progress entry, where I plan to collect some notes on how I've\r\nset up and am using Jekyll. I may call it \"done\" at some random point and\r\npublish it. I may even subsequently update it from time to time, after that.\r\n\r\n* To speed up the authoring / previewing cycle on my laptop, I move all but this\r\n  years' posts into a `_posts_archived` folder and don't commit the change.\r\n    * Kind of a pain; feels like I'm Doing It Wrong.\r\n\r\n* [Github Pages][pages] seems interesting, but I don't think it's right for me.\r\n    * My plugins don't run, so my tag pages aren't created.\r\n        * [davedash][] has a different approach for this, though.\r\n    * I can't get the permalinks just the way I like them\r\n    * I'd have to set a `CNAME` in my DNS to point at a subdomain (ie.\r\n      `blog.decafbad.com`), because I don't want to delegate my entire root\r\n      domain over to GitHub.\r\n    * I would 100% totally use [GitHub Pages][pages] for another project that\r\n      I'm starting from scratch, though.\r\n\r\n* Since related posts via LSI is such a bear, I may try doing something with\r\n  tags. That is: \r\n    * take all the tags from a post;\r\n    * find the 5 latest posts for each tag;\r\n    * display the unique set of posts\r\n\r\n* I want my permalinks to look like `/2011/06/08/slug`\r\n    * Not `/2011/06/08/slug/` or `/2011/06/08/slug.html`\r\n    * Look, ma, no trailing slash!\r\n    * This is the way I've had my URLs for years, and I want to maintain my URLspace.\r\n    * And I also don't want every URL missing a trailing slash to get bounced\r\n      with a `301 Moved Permanently` to the equivalent *with* a trailing\r\n      slash. That's bogus.\r\n    * So, I'm using the `pretty` permalinks setting, and I have this in my\r\n      nginx config:\r\n        * `if (-f $request_filename/index.html) { rewrite ^(.+)$ $1/index.html last; }`\r\n      \r\n[pages]: http://pages.github.com/\r\n[davedash]: https://github.com/davedash/davedash.github.com\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221995558\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://beesbuzz.biz/\">fluffy</a>\r\n                </div>\r\n                <a href=\"#comment-221995558\" class=\"permalink\"><time datetime=\"2011-06-09T04:55:35\">2011-06-09T04:55:35</time></a>\r\n            </div>\r\n            <div class=\"content\">I appreciate the notion behind the no-trailing-slash permalink (because really the only thing that should care about the specific format is the user-agent, and that's what content-type is for), but does that particular rule possibly wreak havoc on relative links? Or do you ever even use those anyway? I'm one of those few weirdos who actually does use relative links wherever possible, even on blog entries with a potentially weird URL (since I like uploading one-off images to the same directory as the published entry, and only having them visible \"below the cut\" as all the cool kids are calling \"extended entry\" these days).</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-289436387\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.michel-kraemer.de\"><img src=\"http://disqus.com/api/users/avatars/michelkraemer.jpg\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.michel-kraemer.de\">Michel Krämer</a>\r\n                </div>\r\n                <a href=\"#comment-289436387\" class=\"permalink\"><time datetime=\"2011-08-17T19:19:29\">2011-08-17T19:19:29</time></a>\r\n            </div>\r\n            <div class=\"content\">Thanks for your tips. Did you have success with your custom approach for generating related posts? It would be quite cool, if you could share your plugin.\r\n\r\nThanks,\r\nMichel</div>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-289452539\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://decafbad.com/\">Les Orchard</a>\r\n                </div>\r\n                <a href=\"#comment-289452539\" class=\"permalink\"><time datetime=\"2011-08-17T19:44:18\">2011-08-17T19:44:18</time></a>\r\n            </div>\r\n            <div class=\"content\">Alas, I haven't gotten around to the related posts stuff, yet</div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2011",
    "path": "2011/06/08/further-jekyll-notes",
    "prevPostPath": "2011/06/10/cutting-the-cord",
    "nextPostPath": "2011/06/08/moved-to-jekyll"
  }
]