[
  {
    "comments_archived": true,
    "date": "2007-10-17T07:22:47.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "rss",
      "php",
      "atom",
      "xml",
      "opml",
      "feedmagick",
      "feedmagick2",
      "feeds"
    ],
    "title": "OPML reading lists in FeedMagick2",
    "wordpress_id": 1066,
    "wordpress_slug": "opml-reading-lists-in-feedmagick2",
    "wordpress_url": "http://decafbad.com/blog/2007/10/17/opml-reading-lists-in-feedmagick2",
    "year": "2007",
    "month": "10",
    "day": "17",
    "isDir": false,
    "slug": "opml-reading-lists-in-feedmagick2",
    "postName": "2007-10-17-opml-reading-lists-in-feedmagick2",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/10/17/opml-reading-lists-in-feedmagick2",
    "prevPostPath": "2007/10/18/wine-is-nicely-enabled",
    "nextPostPath": "2007/10/10/beautiful-code"
  },
  {
    "comments_archived": true,
    "date": "2007-04-30T03:06:32.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "rss",
      "php",
      "atom",
      "xml",
      "feedmagick",
      "feedmagick2",
      "feeds"
    ],
    "title": "Say hello to FeedMagick2",
    "wordpress_id": 1048,
    "wordpress_slug": "say-hello-to-feedmagick2",
    "wordpress_url": "http://decafbad.com/blog/2007/04/29/say-hello-to-feedmagick2",
    "year": "2007",
    "month": "04",
    "day": "29",
    "isDir": false,
    "slug": "say-hello-to-feedmagick2",
    "postName": "2007-04-29-say-hello-to-feedmagick2",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/04/30/say-hello-to-feedmagick2",
    "prevPostPath": "2007/05/09/scribbling-in-ink",
    "nextPostPath": "2007/04/05/i-heart-ficlets-microformats-and-feed-scrapers"
  },
  {
    "comments_archived": true,
    "date": "2006-11-24T06:28:11.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "aggregators",
      "rss",
      "firefox",
      "atom",
      "xsl",
      "xml"
    ],
    "title": "content sniffing sucks",
    "wordpress_id": 1021,
    "wordpress_slug": "content-sniffing-sucks",
    "wordpress_url": "http://decafbad.com/blog/2006/11/24/content-sniffing-sucks",
    "year": "2006",
    "month": "11",
    "day": "24",
    "isDir": false,
    "slug": "content-sniffing-sucks",
    "postName": "2006-11-24-content-sniffing-sucks",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/24/content-sniffing-sucks",
    "prevPostPath": "2006/11/28/stickis-and-subethaedit-icon",
    "nextPostPath": "2006/11/17/macbook-pro-volume-settings-are-aware-of-headphone-presence"
  },
  {
    "comments_archived": true,
    "date": "2006-11-15T08:07:12.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "php",
      "outliners",
      "outlining",
      "xoxooutliner",
      "xsl",
      "xoxo",
      "xml",
      "opml"
    ],
    "title": "XoxoOutliner and further outline addressing adventures",
    "wordpress_id": 1019,
    "wordpress_slug": "xoxooutliner-and-further-outline-addressing-adventures",
    "wordpress_url": "http://decafbad.com/blog/2006/11/15/xoxooutliner-and-further-outline-addressing-adventures",
    "year": "2006",
    "month": "11",
    "day": "15",
    "isDir": false,
    "slug": "xoxooutliner-and-further-outline-addressing-adventures",
    "postName": "2006-11-15-xoxooutliner-and-further-outline-addressing-adventures",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/15/xoxooutliner-and-further-outline-addressing-adventures",
    "prevPostPath": "2006/11/17/macbook-pro-volume-settings-are-aware-of-headphone-presence",
    "nextPostPath": "2006/11/13/xoxooutliner-and-suboutline-addressing"
  },
  {
    "comments_archived": true,
    "date": "2006-11-13T09:34:02.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "php",
      "outlining",
      "xoxooutliner",
      "xsl",
      "xoxo",
      "xml"
    ],
    "title": "XoxoOutliner and suboutline addressing",
    "wordpress_id": 1018,
    "wordpress_slug": "xoxooutliner-and-suboutline-addressing",
    "wordpress_url": "http://decafbad.com/blog/2006/11/13/xoxooutliner-and-suboutline-addressing",
    "year": "2006",
    "month": "11",
    "day": "13",
    "isDir": false,
    "slug": "xoxooutliner-and-suboutline-addressing",
    "postName": "2006-11-13-xoxooutliner-and-suboutline-addressing",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/13/xoxooutliner-and-suboutline-addressing",
    "prevPostPath": "2006/11/15/xoxooutliner-and-further-outline-addressing-adventures",
    "nextPostPath": "2006/11/12/xoxooutliner-shows-some-signs-of-life"
  },
  {
    "comments_archived": true,
    "date": "2005-12-19T23:15:03.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "xml",
      "feedmagick",
      "lazyweb",
      "syndcation",
      "facepalm"
    ],
    "title": "Sometimes the lazyweb delivers with a deluge",
    "wordpress_id": 806,
    "wordpress_slug": "sometimes-the-lazyweb-delivers-with-a-deluge",
    "wordpress_url": "http://decafbad.com/blog/?p=806",
    "year": "2005",
    "month": "12",
    "day": "19",
    "isDir": false,
    "slug": "sometimes-the-lazyweb-delivers-with-a-deluge",
    "postName": "2005-12-19-sometimes-the-lazyweb-delivers-with-a-deluge",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/12/19/sometimes-the-lazyweb-delivers-with-a-deluge",
    "prevPostPath": "2005/12/22/modding-is-not-the-same-as-piracy",
    "nextPostPath": "2005/12/19/feedburner-feeds-give-heartburn-to-php-xml-parsers"
  },
  {
    "comments_archived": true,
    "date": "2005-12-19T04:17:55.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "ajax",
      "json",
      "webdev",
      "xml"
    ],
    "title": "Okay, okay, JSON is pretty hot",
    "wordpress_id": 802,
    "wordpress_slug": "okay-okay-json-is-pretty-hot",
    "wordpress_url": "http://decafbad.com/blog/?p=802",
    "year": "2005",
    "month": "12",
    "day": "18",
    "isDir": false,
    "slug": "okay-okay-json-is-pretty-hot",
    "postName": "2005-12-18-okay-okay-json-is-pretty-hot",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/12/19/okay-okay-json-is-pretty-hot",
    "prevPostPath": "2005/12/19/feedburner-feeds-give-heartburn-to-php-xml-parsers",
    "nextPostPath": "2005/12/19/js-versus-php"
  },
  {
    "comments_archived": true,
    "date": "2005-09-26T01:12:46.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "rss",
      "syndication",
      "webservices",
      "atom",
      "xml"
    ],
    "title": "Templates:  Good or Evil?",
    "wordpress_id": 689,
    "wordpress_slug": "templates-good-or-evil",
    "wordpress_url": "http://decafbad.com/blog/?p=689",
    "year": "2005",
    "month": "09",
    "day": "25",
    "isDir": false,
    "slug": "templates-good-or-evil",
    "postName": "2005-09-25-templates-good-or-evil",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/09/26/templates-good-or-evil",
    "prevPostPath": "2005/09/26/let-there-be-no-serenity-1701b",
    "nextPostPath": "2005/09/25/battlestar-galacticas-opening-teaser"
  },
  {
    "comments_archived": true,
    "date": "2005-09-13T23:45:47.000Z",
    "layout": "post",
    "tags": [
      "rss",
      "syndication",
      "writing",
      "atom",
      "xml",
      "books",
      "hackingrssandatom"
    ],
    "title": "Hacking RSS and Atom is out!",
    "wordpress_id": 680,
    "wordpress_slug": "hacking-rss-and-atom-is-out",
    "wordpress_url": "http://www.decafbad.com/blog/?p=680",
    "year": "2005",
    "month": "09",
    "day": "13",
    "isDir": false,
    "slug": "hacking-rss-and-atom-is-out",
    "postName": "2005-09-13-hacking-rss-and-atom-is-out",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/09/13/hacking-rss-and-atom-is-out",
    "thumbnail": "http://www.decafbad.com/blog_attachments/IMG_3554-1-tm.jpg",
    "prevPostPath": "2005/09/22/yaks-books-feeds",
    "nextPostPath": "2005/09/13/redesigninprogress"
  },
  {
    "comments_archived": true,
    "date": "2004-12-23T05:58:41.000Z",
    "excerpt": "So, in the spirit of pico-projects, I've started building that address book application I mentioned awhile ago and I want to start writing about it as I go.",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "Building an Address Book as a Modern Web App",
    "wordpress_id": 580,
    "wordpress_slug": "abook1",
    "wordpress_url": "http://www.decafbad.com/blog/?p=580",
    "year": "2004",
    "month": "12",
    "day": "23",
    "isDir": false,
    "slug": "abook1",
    "postName": "2004-12-23-abook1",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/12/23/abook1",
    "thumbnail": "http://www.decafbad.com/2004/12/abook-architecture.jpg",
    "summary": "<img src=\"http://www.decafbad.com/2004/12/abook-architecture.jpg\" align=\"right\">\n\n<p>So, in the spirit of <a href=\"http://www.decafbad.com/blog/2004/11/30/picoprojects_and_trepanation\">pico-projects</a>, I've started building <a href=\"http://www.decafbad.com/blog/2004/11/30/nextgenwebapps\">that address book application</a> I mentioned awhile ago and I want to start writing about it as I go.</p>\n<p>First off, hopefully you'll notice the quick diagram I threw together in OmniGraffle.  This is a sort of rough sketch of the loosely-joined architecture I want to explore with this thing.  </p>\n<ul>\n<li><em>Data</em>: This is where address book entries live.</li>\n<li><em>Model</em>: A set of objects encapsulating the data, this is how address book entries will be accessed.</li>\n<li><em>REST API</em>: Model objects exposed as resources identified by URI, serialized and deserialized as XML, and manipulated by GET / PUT / POST / DELETE methods.</li>\n<li><em>XSLT Filter</em>: XML data produced by REST API calls can be first passed through XSL at a given URL before being served up as a response.  </li>\n<li><em>HTML, CSS, JavaScript</em>: Thanks to the XSLT filter layer, the XML vocabulary used to describe address book entries can be transformed into user interface presentation.</li>\n<li><em>HTTP</em>: Everything happens via HTTP...</li>\n<li><em>Web Browser Client</em>: ...and everything is viewed in a web browser.</li>\n</ul>\n<p>Now, I call this a loosely-joined architecture because I want to stress that you should be able to swap out just about any part of this whenever you want.  </p>\n<p>Want the <em>Data</em> to be in MySQL?  Fine.  Want it to be in flat files?  Fine.  Just make sure the <em>Model</em> can cope while maintaining a consistent interface for the <em>REST API</em>.  Want to change the user interface in the browser?  Great-- ideally, all you have to do is change some XSLT files.  I'm writing everything from the <em>XSLT Filter</em> down to the <em>Model</em> in Python.  Don't like that?  Fine.  Rewrite it all in Perl, and hopefully everything from the XSLT up to the browser will still be useful to you.</p>\n<p>At some point, you might even want to ditch the browser for a native desktop client.  Fabulous! Just ignore everything past the <em>REST API</em> and <em>HTTP</em>, don't use any XSLT in the <em>Filter</em>, and use the API and XML directly.</p>\n<p>I don't think any of this is particularly revolutionary-- although I thought it was when I first saw Amazon Web Services doing some of this, and I hope to throw a little GMail in as well.  I hope that this will all be useful as I muddle through explaining what I'm doing.  In the meantime, you can see me getting the stage set as I start checking things into my Subversion repository over here:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/svn/trunk/hacks/abook/\">http://www.decafbad.com/svn/trunk/hacks/abook/</a></li></ul>",
    "prevPostPath": "2005/01/07/belated-happy-new-year",
    "nextPostPath": "2004/12/16/synchronet"
  },
  {
    "comments_archived": true,
    "date": "2004-12-03T01:15:52.000Z",
    "excerpt": "Both ZPT and XSLT very different technologies, but they are often used in similar contexts.  More than once, I've wished that XSLT was as simple as ZPT (i.e. less verbose and intrusive, more document centered), and I've wished that ZPT had some of the features of XSLT (i.e. ability to be used as a transforming filter).",
    "layout": "post",
    "tags": [
      "xml",
      "python"
    ],
    "title": "Cross-breeding XSLT and ZPT",
    "wordpress_id": 570,
    "wordpress_slug": "crossbreedingxsltzpt",
    "wordpress_url": "http://www.decafbad.com/blog/?p=570",
    "year": "2004",
    "month": "12",
    "day": "02",
    "isDir": false,
    "slug": "crossbreedingxsltzpt",
    "postName": "2004-12-02-crossbreedingxsltzpt",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/12/03/crossbreedingxsltzpt",
    "summary": "<p>I've recently been doing some side work involving Zope and, along with the rest of the suite of technologies it offers, I've been happy to be working with <a href=\"http://dev.zope.org/Wikis/DevSite/Projects/ZPT/FrontPage\">Zope Page Templates</a> again.  I dabbled with them a bit when they first came out, and a Zope-free implementation named <a href=\"http://www.owlfish.com/software/simpleTAL/\">SimpleTAL</a> was one of the core components of the iteration of my news aggregator which came before FeedReactor.</p>\n<p>Out of all the templating and content generation approaches I've used, Zope Page Templates are my favorite yet.  Pretty expressive, yet unobtrusive; nicely powerful, yet not quite something with which you'd want to write an entire application (<a href=\"http://naeblis.cx/rtomayko/2004/12/02/a-note-on-template-design\">and that's a feature, not a bug</a>).  </p>\n<p>I've yet to be in a work-a-day team that uses ZPT-- but I can see where a lot of production, delegation, and integration issues would have gone much smoother had I used ZPT instead of <a href=\"http://www.template-toolkit.org/\">Template Toolkit</a> for the web app framework I created at a previous company.  (Though I do have to say TT2 is <em>very</em> nicely done!)  And where I am now, I spend most of my days trying to pummel ASP 3.0 pages into some semblance of logic/presentation separation-- I would certainly dive at the chance to dump VBScript and <code>&lt;% cruft %&gt;</code> for a bit of Python and ZPT.  (But, you know, <em>it's a living</em>.)</p>\n<p>A close second favorite is XSLT.  I've really been hot on it lately, having worked it into the core of FeedReactor in place of SimpleTAL.  And in <a href=\"http://www.decafbad.com/blog/2003/09/02/xsl_scraper\">other</a> <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">hacks</a>, I've really come to appreciate it's role as a filter segment in pipelines between REST web services and <a href=\"http://udell.roninhouse.com/bytecols/2001-08-15.html\">URL-as-command-line</a> invocations.</p>\n<p>Granted, both ZPT and XSLT very different technologies, but they are often used in similar contexts.  More than once, I've wished that XSLT was as simple as ZPT (i.e. less verbose and intrusive, more document centered), and I've wished that ZPT had some of the features of XSLT (i.e. ability to be used as a transforming filter).</p>\n<p>Reading <a href=\"http://naeblis.cx/rtomayko/2004/11/30/pythonic-xml-based-templating-language\">Ryan Tomayko's description of Kid</a> got me thinking, and googling.  One thing I turned up from a mailing list archive asked about an “<a href=\"http://mail.zope.org/pipermail/zpt/2002-January/002651.html\">XSL implementation of TAL?</a>”  It struck me as a tad nutty at first, but then I started having inklings that just maybe it could be done.  (Whether it <em>should</em> be done, well...)  But the kernel of the idea grabbed me: Instead of using <a href=\"http://zope.org/Wikis/DevSite/Projects/ZPT/TALES%20Specification%201.3\">TALES path expressions</a> to look up values in Pythonic space, why not use XPath expressions to look up values from a supplied XML document?</p>\n<p>This strikes me as such an obvious idea that someone has to already have done it and possibly rejected it for good reason.  On the other hand, maybe this is the sort of thing Ryan's thinking about-- I wonder how hard it would be to hack this into Kid?  It would give only a subset of XSLT's capabilities in trade for simplicity, and would only offer the “<a href=\"http://www.dpawson.co.uk/xsl/sect2/pushpull.html\">pull</a>” approach, but it would give XML-pipelining to a ZPT-ish technology.</p>\n<p>I think this is something I want to look into a bit further at some point.</p>\n",
    "prevPostPath": "2004/12/03/if-you-snore-get-tested-for-sleep-apnea-now",
    "nextPostPath": "2004/12/02/nofroogleapi"
  },
  {
    "comments_archived": true,
    "date": "2004-11-30T21:53:35.000Z",
    "excerpt": "This has been where most of my private hacking sessions have been taking me over the past year or so:  combining HTML, CSS, DOM, JavaScript, XML, XSLT, and REST to build what I consider to be a next-generation web app.",
    "layout": "post",
    "tags": [
      "syndication",
      "xml"
    ],
    "title": "Next generation web apps using REST, XML, XSLT, and XmlHTTPRequest",
    "wordpress_id": 568,
    "wordpress_slug": "nextgenwebapps",
    "wordpress_url": "http://www.decafbad.com/blog/?p=568",
    "year": "2004",
    "month": "11",
    "day": "30",
    "isDir": false,
    "slug": "nextgenwebapps",
    "postName": "2004-11-30-nextgenwebapps",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/11/30/nextgenwebapps",
    "summary": "<p>So, like I was saying:  I've been working on <a href=\"http://www.decafbad.com/kwiki?FeedReactor\">FeedReactor</a> and have been doing some things with it that I find rather interesting, independent of news aggregation.  </p>\n<p>One of the core goals I have for FeedReactor is to explore what it takes to build a web app that exploits <a href=\"http://www.xfront.com/REST-Web-Services.html\">principles of REST architecture</a>.  Having already <a href=\"http://www.decafbad.com/blog/tech/old/oooccb\">sung the praises</a> of XML-RPC, I wanted to get immersed in REST and see what all the hubbub was about.  I've got some ways to go, but I think I understand the major concepts now, and it's a pretty nifty frame within which to work.</p>\n<p>But, two other things I've added to my mix have really made things interesting for me:  </p>\n<ol>\n<li>XSLT filtering</li>\n<li>The XmlHTTPRequest object</li>\n</ol>\n<p>XSLT and REST make a really good pair, as <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">Amazon Web Services already demonstrate</a>.  Inspired by that API (<a href=\"http://www.decafbad.com/blog/2003/09/02/xsl_scraper\">and earlier experiments</a>), I use XML for all the input and output formats in my API and accept a query string parameter that contains the path to an XSLT file.  When this parameter is supplied, the XML output by the API is first processed using the given XSLT.  (Think of it like piping API output through <code>xsltproc</code>.)</p>\n<p>So, with a properly constructed collection of XSLT, I can present a browser-viewable HTML user interface served up directly from REST API calls.  Links, frame sets, and iframes present in the HTML lead the user from that call to the next XSLT-wrapped REST API call. </p>\n<p>But, once the initial HTML-and-JavaScript payload reaches the browser, it gets better (<a href=\"http://www.infoworld.com/article/04/10/22/43OPstrategic_1.html\">ala Gmail</a>):  </p>\n<p>On older browsers (if I happen to care about them), I can make new HTTP requests back to the server <a href=\"http://developer.apple.com/internet/webcontent/iframe.html\">from JavaScript using iframes</a>.  In this case, XSLT filtering lets me retrofit the API's responses to the HTML-and-JavaScript crud I need to serve up to make things happen back in the browser client.  Unfortunately, passing data <em>to</em> the API (which expects XML, not form submissions) is still a bit wonky and requires some hacks and exceptions involving hidden forms and such.</p>\n<p>However, on the newer browsers, it's all about the <a href=\"http://developer.apple.com/internet/webcontent/xmlhttpreq.html\">XmlHTTPRequest object</a>.  With this facility, I can make clean asynchronous requests back to the REST API, including XML data in the request body if I feel like it.  Responses are handled by JavaScript callbacks, which twiddle the browser DOM to update the user interface in response.  </p>\n<p>So, after the major initial contact with the API to supply the browser with HTML by way of XSLT, most future interactions take place in the form of direct calls to the REST API using XML.  Although for some things, it's easier to just reload a page of HTML, it's nicer for most interactions to be handled via DOM manipulations in-place.  I've been amazed at the Gmail-like responsiveness I get from FeedReactor when I'm skimming through news items, marking some as seen or flagged, and popping open the descriptions on others.  </p>\n<p>I suppose I <em>shouldn't</em> be amazed at the responsiveness, since I'm using some of the same techniques as Gmail.  However, my daily-use installation of FeedReactor is presently running on an old 300Mhz Debian Linux PC at home, and it's taking me through the daily produce of 600 subscribed feeds faster than any desktop aggregator has yet.  Of course, this is partly a product of my familiarity with the UI I've cobbled together, but... <em>the server's running on a 300Mhz PC with 256MB of RAM!</em>  And the client is my 867Mhz G4 PowerBook, running Firefox or Safari, depending on my mood.</p>\n<p>Although I can't see when I'll have time for it, I really want to explore this approach further using desktop apps on OS X and accessing the API from Flash movies (maybe using <a href=\"http://openlaszlo.org/\">Laszlo</a>).  I'd also like to see how far I can go toward adapting the interface toward mobile devices like my Treo 600.</p>\n<p>So anyway, this has been where most of my private hacking sessions have been taking me over the past year or so:  combining HTML, CSS, DOM, JavaScript, XML, XSLT, and REST to build what I consider to be a next-generation web app.  </p>\n<p>Now, although I use FeedReactor on a daily basis to keep up with all my feeds, it's nowhere near any state suitable for public consumption.  I add new subscriptions from a command-line script and still fiddle with the database directly for some operations.  I'd like to have a personal-server version of it ready for use by some alpha geeks before or not long into the new year, but I'd like to share some of the things I've been doing with it before then.</p>\n<p>With that in mind, I think I'll wrap up this entry and think about putting together a quick tutorial pico-project to demonstrate some of the concepts.  Maybe an address book, or something equally simple-yet-useful.  </p>\n<p>Stay tuned.</p>\n",
    "prevPostPath": "2004/12/02/nofroogleapi",
    "nextPostPath": "2004/11/30/pico-projects-and-trepanation"
  },
  {
    "comments_archived": true,
    "date": "2004-10-08T17:07:49.000Z",
    "excerpt": "So I had an idea for a quick podcasting listening hack on the way into work this morning.",
    "layout": "post",
    "tags": [
      "syndication",
      "xml"
    ],
    "title": "Using iTunes as a podcast aggregator, with a little help from XSLT",
    "wordpress_id": 561,
    "wordpress_slug": "itunesxslt",
    "wordpress_url": "http://www.decafbad.com/blog/?p=561",
    "year": "2004",
    "month": "10",
    "day": "08",
    "isDir": false,
    "slug": "itunesxslt",
    "postName": "2004-10-08-itunesxslt",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/10/08/itunesxslt",
    "summary": "<p>So I had an idea for a quick podcasting listening hack on the way into work this morning. Check it out:</p>\n<ul>\n<li>Take one <a href=\"http://www.decafbad.com/2004/10/podcasts.opml\">list of RSS feeds in OPML</a>.</li>\n<li>Throw in <a href=\"http://www.decafbad.com/2004/10/opml-to-playlist.xsl\">a bit of XSLT</a>.</li>\n<li>Combine using <code>xsltproc</code> to make <a href=\"http://www.decafbad.com/2004/10/podcasts.pls\">a playlist</a> that works in iTunes.</li>\n</ul>\n<p>And, oh yeah, I just happen to have an <code>xsltproc</code> web service laying around, so:</p>\n<ul>\n<li>Supply a URL to your OPML in <a href=\"http://www.decafbad.com/2004/10/xsltproc.cgi?xsl=http%3A%2F%2Fwww.decafbad.com%2F2004%2F10%2Fopml-to-playlist.xsl\">this form</a>.</li>\n<li>Get a <a href=\"http://www.decafbad.com/2004/10/xsltproc.cgi?xsl=http%3A%2F%2Fwww.decafbad.com%2F2004%2F10%2Fopml-to-playlist.xsl&amp;xml=http%3A%2F%2Fwww.decafbad.com%2F2004%2F10%2Fpodcasts.opml\">freshly-built playlist</a>.</li>\n</ul>\n<p>Now, this has been barely tested and is the product of a ten-minute hacking session.  There are likely an enormous number of things wrong with this.  That said, iTunes does seem to open the playlist happily, and it looks like only new streams are added with repeated openings of the playlist.</p>\n<p>You will want to be careful to ensure that your OPML is valid XML (mine wasn't, on initial export from iPodderX - escape those freaking ampersands in URLs already!), and I have no idea what would happen if any of the RSS feeds in your subscriptions turn up invalid.  </p>\n<p>Have I mentioned that, despite their unforgiving and sometimes fragile nature, I love XML technologies?</p>\n<p>If this looks useful, maybe I'll work it over a bit more and pair it up with some python to handle actually downloading the MP3s and torrents.</p>\n<p><strong>Update:</strong> Oh yeah, and I'm expecting this will be useful with an iTunes smart playlist crafted along these lines:</p>\n<ul>\n<li>Date Added in the last 1 days</li>\n<li>Play Count is less than 1</li>\n</ul>\n<p><strong>Update #2:</strong> Another use I just found for this playlist, is on my <a href=\"http://www.xboxmediacenter.com/\">Xbox Media Center</a>.  I generate this playlist via cronjob every few hours, and store it on an SMB share accessible to the XBMC.  Voila!  Listening to podcasts on my stereo system via the Xbox.  Yeah, nothing big, just kind of nifty.</p>\n",
    "prevPostPath": "2004/10/11/allgrowedup",
    "nextPostPath": "2004/10/07/podcastinghype"
  },
  {
    "comments_archived": true,
    "date": "2004-09-17T13:32:30.000Z",
    "excerpt": "Wow.  So it looks like there are some people starting to follow to what I'm doing with dbagg3, and they're showing me how woefully prepared I am for the attention from tinkerers who are actually trying to, you know, run my code.",
    "layout": "post",
    "tags": [
      "syndication",
      "xml"
    ],
    "title": "dbagg3: Please excuse the mess",
    "wordpress_id": 549,
    "wordpress_slug": "dbagg3mess",
    "wordpress_url": "http://www.decafbad.com/blog/?p=549",
    "year": "2004",
    "month": "09",
    "day": "17",
    "isDir": false,
    "slug": "dbagg3mess",
    "postName": "2004-09-17-dbagg3mess",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/09/17/dbagg3mess",
    "summary": "<p>Wow.  So it looks like there are some people starting to follow to what I'm doing with <code>dbagg3</code>, and they're showing me how woefully prepared I am for the attention from tinkerers who are actually trying to, you know, <strong>run</strong> my code.  Things have been crazy busy for me at work, so I haven't been getting done what I've planned.  But, I do need to pull a few things together and clean a few things up.  I'll soon be answering the smattering of email I've gotten so far, but until then, a few quick thoughts:</p>\n<ul>\n<li><p>My source control is a bit of a mess at the moment.  Not only have I <a href=\"http://www.decafbad.com/blog/2004/09/16/moving_time_from_cvs_to_subversion\">switched from CVS to SVN</a>-- but even if you followed me in that migration, I've not kept committed code in working order.  I already know that this is a horrible habit, but since no one's really been looking, I haven't been called on it until now.  (Heh, heh--d'oh.)  Planning this weekend (but hopefully today) to resolve this, so that moving forward, svn trunk will be (as far as possible) in a working state at any given moment.</p>\n</li>\n<li><p>I've hacked one of my dependencies, SQLObject, by applying <a href=\"http://sourceforge.net/mailarchive/message.php?msg_id=9122066\">a patch</a> to support SELECT DISTINCT queries.  This has understandably caused problems for some people who have no idea what I did.  This patch has turned out to be essential, though I don't know if/when it will or would be included in a release of SQLObject.  So...  I wonder if I should dump my working copy of SQLObject into source control?  Otherwise, applying the DISTINCT patch to your SQLObject install should work.</p>\n</li>\n<li><p>At some point very soon, I want to change the name of this thing to <strong>feedReactor</strong>.  Yes, I know there's already a <em>feedparser</em>, and a <em>feeddemon</em>, and a <em>feedburner</em>, and someone's probably got a <em>feedkitchensink</em> in the works, but I like this name and want to run with it.</p>\n</li>\n</ul>\n<p>So, in the meantime while I straighten some things out, please excuse the mess and thanks for bearing with me!</p>\n",
    "prevPostPath": "2004/09/18/are-powerbook-hard-drives-supposed-to-sound-like-amiga-floppy-drives",
    "nextPostPath": "2004/09/16/moving-time-from-cvs-to-subversion"
  },
  {
    "comments_archived": true,
    "date": "2004-09-16T15:29:04.000Z",
    "excerpt": "So, I'm waiting for the other shoe to drop.  After making sure things seemed reasonably stable post-server-move, I migrated my CVS repository here to Subversion.",
    "layout": "post",
    "tags": [
      "syndication",
      "xml"
    ],
    "title": "Moving time: From CVS to Subversion",
    "wordpress_id": 548,
    "wordpress_slug": "moving-time-from-cvs-to-subversion",
    "wordpress_url": "http://www.decafbad.com/blog/?p=548",
    "year": "2004",
    "month": "09",
    "day": "16",
    "isDir": false,
    "slug": "moving-time-from-cvs-to-subversion",
    "postName": "2004-09-16-moving-time-from-cvs-to-subversion",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/09/16/moving-time-from-cvs-to-subversion",
    "prevPostPath": "2004/09/17/dbagg3mess",
    "nextPostPath": "2004/09/15/manipulating-aggregate-resources-in-a-rest-api"
  },
  {
    "comments_archived": true,
    "date": "2004-09-15T18:48:53.000Z",
    "excerpt": "So... am I missing a more elegant RESTful way of doing this which doesn't result in a quadrillion HTTP requests?",
    "layout": "post",
    "tags": [
      "xml"
    ],
    "title": "Manipulating aggregate resources in a REST API?",
    "wordpress_id": 547,
    "wordpress_slug": "manipulating-aggregate-resources-in-a-rest-api",
    "wordpress_url": "http://www.decafbad.com/blog/?p=547",
    "year": "2004",
    "month": "09",
    "day": "15",
    "isDir": false,
    "slug": "manipulating-aggregate-resources-in-a-rest-api",
    "postName": "2004-09-15-manipulating-aggregate-resources-in-a-rest-api",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/09/15/manipulating-aggregate-resources-in-a-rest-api",
    "prevPostPath": "2004/09/16/moving-time-from-cvs-to-subversion",
    "nextPostPath": "2004/09/13/dbagg3alive"
  },
  {
    "comments_archived": true,
    "date": "2004-09-13T22:11:41.000Z",
    "excerpt": "So at this point, it's all URLs and barely working HTML, but it's exciting to me at least.  And it's dogfood for me, since I'm using this crud to get my daily (hourly?) fix.  Pretty soon, I'll be diving into wrapping more of a proper usable web app around this, with user management and stuff that works in MSIE.  Until then, maybe someone else will see this and catch a buzz from it.",
    "layout": "post",
    "tags": [
      "syndication",
      "xml"
    ],
    "title": "Early dbagg3 demo is alive and kicking",
    "wordpress_id": 546,
    "wordpress_slug": "dbagg3alive",
    "wordpress_url": "http://www.decafbad.com/blog/?p=546",
    "year": "2004",
    "month": "09",
    "day": "13",
    "isDir": false,
    "slug": "dbagg3alive",
    "postName": "2004-09-13-dbagg3alive",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/09/13/dbagg3alive",
    "summary": "<p>Got some very good work in this weekend on switching servers and getting <a href=\"http://www.decafbad.com/cvs/dbagg3/\"><code>dbagg3</code></a> in some semblance of working order somewhere other than on my overworked and decidedly non-publicly-demonstrable laptop.</p>\n<p>This stuff is so this side of premature, that I'm probably about to cause <a href=\"http://www.johncompanies.com\">JohnCompanies</a> to send hit-men out to cancel <strong>me</strong>, along with my hosting account (have I said that I <em>really</em> appreciate the help so far?).  But I just have to get this out: I'm easily excited by shiny code and gadgets, but it's so much easier to get excited when I can see something in working condition before taking a screwdriver to it.  So... remember <a href=\"http://www.decafbad.com/blog/2004/08/30/dbagg3_makingprogress\">when I mentioned all those URLs</a>?  They're working out nicely.</p>\n<p>First, check out a simple two-pane view of news items, ala <a href=\"http://www.bloglines.com/\">Bloglines</a>:</p>\n<ul>\n<li><a href=\"http://feeds.decafbad.com/api/users/demo.xml?xsl=xsl/two-pane/index.xsl&amp;content-type=text/html\" target=\"new\">http://feeds.decafbad.com/api/users/demo.xml?xsl=xsl/two-pane/index.xsl&amp;content-type=text/html</a></li>\n</ul>\n<p>Taking this apart, you can see:</p>\n<ul>\n<li>A user account: <a href=\"http://feeds.decafbad.com/api/users/demo.xml\">http://feeds.decafbad.com/api/users/demo.xml</a></li>\n<li>Some XSL: <a href=\"http://feeds.decafbad.com/xsl/two-pane/index.xsl\">http://feeds.decafbad.com/xsl/two-pane/index.xsl</a></li>\n<li>... and a specified content type (text/html)</li>\n</ul>\n<p>If your curiosity is piqued by this, view source and pay attention to link URLs.  It's more of the same:  XML produced by a REST API, passed through XSL, delivered as HTML.</p>\n<p>Here, take a look at another view on this demo user's aggregated items:</p>\n<ul>\n<li><a href=\"http://feeds.decafbad.com/api/users/demo/subscriptions/now-12.xml?xsl=xsl/outliner/index.xsl&amp;content-type=text/html\" target=\"new\">http://feeds.decafbad.com/api/users/demo/subscriptions/now-12.xml?xsl=xsl/outliner/index.xsl&amp;content-type=text/html</a></li>\n</ul>\n<p>Unfortunately, this only seems to be working decently with Firefox and Safari.  MSIE seems to be balking at the dynamic stuff, though I've had it working there in a previous incarnation of this code.  So hopefully this will be fixed soon.</p>\n<p>At any rate, what you should see is a single-pane outliner-style display of feed entries.  This is the style of aggregator UI I've been using for almost 3 years now.  Disclosure triangles open entries up to show summaries and further content.  “[seen]” links hide the entries, while “[queue]” hides an entry while tossing it into a queue for viewing later.</p>\n<p>Speaking of that, you can see what's in the queue right now:</p>\n<ul>\n<li><a href=\"http://feeds.decafbad.com/api/users/demo/subscriptions/now-12.xml?xsl=xsl/full.xsl&amp;content-type=text/html&amp;show_queued=1\" target=\"new\">http://feeds.decafbad.com/api/users/demo/subscriptions/now-12.xml?xsl=xsl/full.xsl&amp;content-type=text/html&amp;show_queued=1</a></li>\n</ul>\n<p>Here is a display of queued entries, with another stylesheet applied that shows everything in a flat and open blog-like template.  It's not reverse-chronological, but that's not hard to accomplish with a flag or a tweak to an &lt;xsl:sort&gt; tag.  </p>\n<p>So that's just the start of things.  Remember <a href=\"http://www.decafbad.com/blog/2004/08/23/slicing_and_dicing_to_make_atom_soup_in_dbagg3\">when I was rambling on about XML storage and query</a>?  A URL like this is one product of that:</p>\n<ul>\n<li><a href=\"http://feeds.decafbad.com/api/users/demo/subscriptions/now-12.xml?xsl=xsl/full.xsl&amp;content-type=text/html&amp;entry_xpath=//entry/title[contains(text(),'OS%20X')]\" target=\"new\">http://feeds.decafbad.com/api/users/demo/subscriptions/now-12.xml?xsl=xsl/full.xsl&amp;content-type=text/html&amp;entry_xpath=//entry/title[contains(text(),'OS%20X')]</a></li>\n</ul>\n<p>This should show you a flat listing of all entries whose titles contain “OS X”.  This is far from perfect, but it's very exciting to me-- it's got a lot of promise, stuff that first caught my eye when I saw <a href=\"http://webservices.xml.com/pub/a/ws/2003/04/15/semanticblog.html\">Jon Udell playing</a> <a href=\"http://webservices.xml.com/pub/a/ws/2003/06/10/xpathsearch.html?page=1\">awhile back</a>.</p>\n<p>Now, something that you might not notice until doing a bit more digging, is that all these attributes like “seen” and “query” are annotations made by the user on entries.  If you take a peek at <a href=\"http://feeds.decafbad.com/js/agg.js\">some of the Javascript</a> under the hood, you might notice some XmlHTTPRequest code going on.  To mark something as “seen” or “queued”, I POST XML to a URL like this:</p>\n<ul>\n<li><a href=\"http://feeds.decafbad.com/api/users/demo/subscriptions/638/entries/60567/notes/\">http://feeds.decafbad.com/api/users/demo/subscriptions/638/entries/60567/notes/</a></li>\n</ul>\n<p>The upshot of this is that these attributes are not limited to “seen” or “queued” flags-- in fact, these annotations can (well, in theory) be any pairing of arbitrary XML and a name.  This annotation then gets injected into the entry, when viewed by the user who owns the annotation, like so:</p>\n<ul>\n<li><a href=\"http://feeds.decafbad.com/api/users/demo/subscriptions/638/entries/60567.xml\">http://feeds.decafbad.com/api/users/demo/subscriptions/638/entries/60567.xml</a></li>\n</ul>\n<p>In fact, you could invent a new annotation called 'tags' and filter for entries with this annotation with a URL like this:</p>\n<ul>\n<li><a href=\"http://feeds.decafbad.com/api/users/demo/subscriptions/now-12.xml?xsl=xsl/full.xsl&amp;content-type=text/html&amp;entry%5C_notes%5C_xpath=//dbagg3:note%5B@name='tags'\">http://feeds.decafbad.com/api/users/demo/subscriptions/now-12.xml?xsl=xsl/full.xsl&amp;content-type=text/html&amp;entry\\_notes\\_xpath=//dbagg3:note[@name='tags'</a> and contains(text(),'#food#') and contains(text(),'#odd#')]</li>\n</ul>\n<p>Eventually, what I'd <em>really</em> like to see this start doing is something akin to del.icio.us-style tagging while you're reading.  Then, you can have public queries that pull feeds based on your (and others') tags and spit things back out as feeds again with the proper XSL stylings.</p>\n<p>So at this point, it's all URLs and barely working HTML, but it's exciting to me at least.  And it's dogfood for me, since I'm using this crud to get my daily (hourly?) fix.  Pretty soon, I'll be diving into wrapping more of a proper usable web app around this, with user management and stuff that works in MSIE.  Until then, maybe someone else will see this and catch a buzz from it.</p>\n<p>Stay tuned.</p>\n",
    "prevPostPath": "2004/09/15/manipulating-aggregate-resources-in-a-rest-api",
    "nextPostPath": "2004/09/12/moving-time-again"
  },
  {
    "comments_archived": true,
    "date": "2004-09-01T10:47:41.000Z",
    "excerpt": "But, while I'm in the process of wheel reinvention, how about I borrow Kimbro's idea?  I just threw together a quick class called XPathDict, based on libxml2.",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "XPath based Python dictionaries, on loan",
    "wordpress_id": 544,
    "wordpress_slug": "xpath-based-python-dictionaries-on-loan",
    "wordpress_url": "http://www.decafbad.com/blog/?p=544",
    "year": "2004",
    "month": "09",
    "day": "01",
    "isDir": false,
    "slug": "xpath-based-python-dictionaries-on-loan",
    "postName": "2004-09-01-xpath-based-python-dictionaries-on-loan",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/09/01/xpath-based-python-dictionaries-on-loan",
    "prevPostPath": "2004/09/12/moving-time-again",
    "nextPostPath": "2004/08/31/dbagg3-makingprogress"
  },
  {
    "comments_archived": true,
    "date": "2004-08-31T01:37:42.000Z",
    "excerpt": "Work has been insanely busy lately, but I have made some more progress with [`dbagg3`][dbagg3].  The code is all in CVS, so feel free to take a gander-- I don't have a ton of time for a proper write up, but I do want to spew a little bit.",
    "layout": "post",
    "tags": [
      "hacks",
      "syndication",
      "xml"
    ],
    "title": "Making progress on dbagg3",
    "wordpress_id": 543,
    "wordpress_slug": "dbagg3-makingprogress",
    "wordpress_url": "http://www.decafbad.com/blog/?p=543",
    "year": "2004",
    "month": "08",
    "day": "30",
    "isDir": false,
    "slug": "dbagg3-makingprogress",
    "postName": "2004-08-30-dbagg3-makingprogress",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/08/31/dbagg3-makingprogress",
    "summary": "<p>Work has been insanely busy lately, but I have made some more progress with <a href=\"http://www.decafbad.com/cvs/dbagg3/\"><code>dbagg3</code></a>.  The code is all in CVS, so feel free to take a gander-- I don't have a ton of time for a proper write up, but I do want to spew a little bit. </p>\n<p>As per my <a href=\"http://www.decafbad.com/blog/2004/08/23/slicing_and_dicing_to_make_atom_soup_in_dbagg3\">previous musings on XML in a SQL database</a>, I revamped the database.  Now things are sliced up by feed and entry tables, rows in each containing a few metadata columns and then one big column for an XML dump.  This lets me index on  date and parent feed and such, meanwhile punting on the issue of dicing things like authors or content up further.  And, as extension elements start to show up, this handling is dumb enough to simply store things it doesn't know about without mangling them.  This is a very good thing and one of my big goals for this beast.</p>\n<p>The other thing that I'm getting excited about is the REST API built atop the Atom store.  Rather than spend time on proper documentation, here's a quick dump from the <a href=\"http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/rest.py\">appropriate module</a>:</p>\n<pre><code>URL: GET /feeds/\nURL: GET /feeds/{id}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hh}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}/{dd}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}.xml\nURL: GET /feeds/{id}/now-{nowoff}.xml\nURL: GET /feeds/{fid}/entries/{eid}.xml\nURL: GET /users/\nURL: GET /users/{uname}.xml\nURL: POST /users/\nURL: DELETE /users/{uname}.xml\nURL: PUT /users/{uname}.xml\nURL: GET /users/{uname}/prefs.xml\nURL: GET /users/{uname}/prefs/\nURL: POST /users/{uname}/prefs/{pname}.{type}\nURL: PUT /users/{uname}/prefs/{pname}.{type}\nURL: GET /users/{uname}/prefs/{pname}.{type}\nURL: DELETE /users/{uname}/prefs/{pname}.{type}\nURL: GET /users/{uname}/subscriptions.{type}\nURL: GET /users/{uname}/subscriptions/\nURL: POST /users/{uname}/subscriptions/\nURL: DELETE /users/{uname}/subscriptions/{id}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hh}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/now-{hours}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/now.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hh}.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}.xml\nURL: GET /users/{uname}/subscriptions/now-{hours}.xml\nURL: GET /users/{uname}/subscriptions/now.xml\nURL: GET /users/{uname}/subscriptions/{sid}/entries/{eid}.xml\n</code></pre>\n<p>Hopefully, the structure of these URL patterns make a little bit of sense.  The too-clever thing about these is that they're both documentation in the module's docstrings, and parsed out to register methods with automagically-generated regexes applied to incoming URL requests.  (I may eventually realize just how stupid an idea this is, but not yet.)  </p>\n<p>This list is nowhere near complete or final or even all that well thought out yet.  But, it seems to be working out pretty well so far, and it's so easy to tinker with the API to sketch out ideas in working code.  Eating my own dogfood, my first browser window of the day tends to open on this URL:</p>\n<pre><code>http://localhost/~deusx/dbagg3.5/api/users/default/subscriptions/\nnow-12.xml?xsl=xsl/full.xsl&amp;#38;content-type=text/html\n</code></pre>\n<p>This grabs the last 12 hours' worth of items from <code>default</code>'s subscriptions, passing them through the XSL at <code>xsl/full.xsl</code> on the way to my browser with a content type of <code>text/html</code>.  This tends to produce about 1000-1500 entries in about 15 seconds on my PowerBook, which is better than I'd expected.  </p>\n<p>Pretty soon, I'll be implementing the ability to post metadata onto feed entries under subscriptions.  Then, I can mark items as seen, attach categories, tags, and notes.  From there, I can exclude seen items from queries, produce new aggregate feeds based on my tagging or notes, among a few other ideas I've got stewing.</p>\n<p>A little more work, and I think I'll be able to throw together the beginnings of a <a href=\"http://www.bloglines.com\">Bloglines</a>-style three-pane browser interface, as well as improving the functionality of my own outliner-style display with <a href=\"http://developer.apple.com/internet/webcontent/xmlhttpreq.html\">XmlHTTPRequest</a>-based calls to the API to enable refresh-free interaction.  From there, I have some ideas for desktop apps and maybe even some <a href=\"http://www.decafbad.com/blog/2003/06/19/flash_agg\">tinkering in Flash</a>.  (Wow... has it really been over a year since I was writing about Flash &amp; REST?)</p>\n<p>And <em>then</em>, I want to implement the Atom API and allow users to create feeds to which they can post their own items and share read-only with others (or share writing with a group).  From there, this thing can turn into a read/write Atom storage tank, serving both as an aggregator and a blog publishing engine, given the appropriate XSL work.</p>\n<p>Lots of ideas stewing.  Now I just have to get the time and possibly a new web server, since I'd like to eventually open up an installation of this to fellow tinkerers, but this poor little box can barely take what it's tasked with at present...</p>\n<p>Oh yeah, and one other thing:  I've been thinking about names better than <code>dbagg3</code>.  The one that's sticking around in my head so far is <strong>feedReactor</strong>.  What do you think?</p>\n",
    "prevPostPath": "2004/09/01/xpath-based-python-dictionaries-on-loan",
    "nextPostPath": "2004/08/30/crappyvideogames"
  },
  {
    "comments_archived": true,
    "date": "2004-08-24T03:14:40.000Z",
    "excerpt": "I tell ya, this is an idea that's catching.  Feeds go into a searchable stew, come back out as new synthetic feeds.  What comes out looks like what goes in, and there's a well-defined spec behind it.  Sprinkle in the elegance of loosely coupled UNIX pipelines and filters, REST interfaces, and XML tech like XSLT for munging, and you've got the makings of the next generation of syndication and XML feeds.",
    "layout": "post",
    "tags": [
      "syndication",
      "xml"
    ],
    "title": "More Cooks in the Feed Stew Kitchen",
    "wordpress_id": 540,
    "wordpress_slug": "more-cooks-in-the-feed-stew-kitchen",
    "wordpress_url": "http://www.decafbad.com/blog/?p=540",
    "year": "2004",
    "month": "08",
    "day": "23",
    "isDir": false,
    "slug": "more-cooks-in-the-feed-stew-kitchen",
    "postName": "2004-08-23-more-cooks-in-the-feed-stew-kitchen",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/08/24/more-cooks-in-the-feed-stew-kitchen",
    "prevPostPath": "2004/08/29/blogging-without-thought",
    "nextPostPath": "2004/08/23/slicing-and-dicing-to-make-atom-soup-in-dbagg3"
  },
  {
    "comments_archived": true,
    "date": "2004-08-23T22:52:06.000Z",
    "excerpt": "I've been putting more work into dbagg3, but I'm getting hung up on the database.  Well, actually I'm getting hung up on the subject of XML storage, query, and retrieval in general-- but at present, I'm trying to cram all this data into MySQL and SQLite databases.  But, my tendencies as an abstraction astronaut and my lack of database savvy are tying me (and my data) in knots.  I kept meaning to write a bit Atom (and XML in general) with regard to database storage and query, so maybe now's the time.",
    "layout": "post",
    "tags": [
      "syndication",
      "xml"
    ],
    "title": "Slicing and Dicing to Make Atom Soup in dbagg3",
    "wordpress_id": 539,
    "wordpress_slug": "slicing-and-dicing-to-make-atom-soup-in-dbagg3",
    "wordpress_url": "http://www.decafbad.com/blog/?p=539",
    "year": "2004",
    "month": "08",
    "day": "23",
    "isDir": false,
    "slug": "slicing-and-dicing-to-make-atom-soup-in-dbagg3",
    "postName": "2004-08-23-slicing-and-dicing-to-make-atom-soup-in-dbagg3",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/08/23/slicing-and-dicing-to-make-atom-soup-in-dbagg3",
    "prevPostPath": "2004/08/24/more-cooks-in-the-feed-stew-kitchen",
    "nextPostPath": "2004/08/23/mysql-and-xml-output"
  },
  {
    "comments_archived": true,
    "date": "2004-08-23T05:09:51.000Z",
    "excerpt": "So...  How many of you have ever used mysql -X?",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "mysql and XML output",
    "wordpress_id": 538,
    "wordpress_slug": "mysql-and-xml-output",
    "wordpress_url": "http://www.decafbad.com/blog/?p=538",
    "year": "2004",
    "month": "08",
    "day": "23",
    "isDir": false,
    "slug": "mysql-and-xml-output",
    "postName": "2004-08-23-mysql-and-xml-output",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/08/23/mysql-and-xml-output",
    "prevPostPath": "2004/08/23/slicing-and-dicing-to-make-atom-soup-in-dbagg3",
    "nextPostPath": "2004/08/05/dbagg3cvs"
  },
  {
    "comments_archived": true,
    "date": "2004-07-06T21:05:45.000Z",
    "excerpt": "This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts one and two.",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "Wish-of-the-Month Club, Part 3 of 3",
    "wordpress_id": 532,
    "wordpress_slug": "wishofthemonthclub3",
    "wordpress_url": "http://www.decafbad.com/blog/?p=532",
    "year": "2004",
    "month": "07",
    "day": "06",
    "isDir": false,
    "slug": "wishofthemonthclub3",
    "postName": "2004-07-06-wishofthemonthclub3",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/07/06/wishofthemonthclub3",
    "thumbnail": "http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg",
    "summary": "<p><i>This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">one</a> and <a href=\"http://www.decafbad.com/blog/2004/06/27/wishofthemonthclub2\">two</a>.</i></p>\n<h3 id=\"presenting-the-results\">Presenting the Results</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\"><code>wishes-ex5.xsl</code></a>: The fifth iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.html\"><code>wishes.html</code></a>: Sample output in HTML</li>\n</ul>\n<p>We've finally gotten together all the bits of information we need--wishlists have been queried; random items have been selected; and a shopping cart has been prepared.  Now we just have to present the selections and a link to check out with the shopping cart.</p>\n<p>First, locate the following line toward the end of the stylesheet as we left it in the last section:</p>\n<pre><code>    &lt;xsl:copy-of select=\"$shopping_cart\" /&gt;\n</code></pre>\n<p>Delete this, and let's replace it by building some HTML:</p>\n<pre><code>    &lt;xsl:variable name=\"shopping_cart_purchase_url\" \n                  select=\"exsl:node-set($shopping_cart)//PurchaseUrl\" /&gt;\n    \n    &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n      &lt;head&gt;&lt;title&gt;Wishlist Shopping Cart&lt;/title&gt;\\&lt;/head&gt;\n      &lt;body&gt;\n        &lt;p class=\"title\"&gt;\n          Here are your wishlist items\n          &lt;a href=\"{$shopping_cart_purchase_url}\"&gt;\n            &lt;img src=\"http://g-images.amazon.com/images/G/01/detail/shoppingcart-header-02.gif\" /&gt;\n          &lt;/a&gt; \n          items:\n        &lt;/p&gt;\n</code></pre>\n<p>We're using the <code>exsl:note-set</code> function again to access the contents of <code>$shopping_cart</code> with an XPath expression.  We pluck out the value of the <code>PurchaseUrl</code> in the shopping cart and place it in the variable <code>shopping_cart_purchase_url</code>.  Then, after a bit of HTML preamble, we borrow a shopping cart icon from Amazon itself to construct a link to which we can browse later to purchase the selected items.  This HTML is very simple so far; it's likely too simple, so eventually you may like to toss some CSS in here to improve the looks of things.  But, I'll leave that as an exercise for the reader.  </p>\n<p>Next, let's build a display of the items selected by iterating first through the wishlists:</p>\n<pre><code>        &lt;xsl:for-each select=\"exsl:node-set($random_products)/wishes:wishitem\"&gt;\n          &lt;div class=\"Detail\"&gt;\n\n            &lt;p class=\"wishlistLabel\"&gt;\n              &lt;xsl:value-of select=\"wishes:wishlist/@label\" /&gt;\n            &lt;/p&gt;\n</code></pre>\n<p>This begins a block for each wishlist, starting off with a paragraph containing the label we gave each wishlist.  Next, let's include a few details about the product chosen.  Again, all of the bits of data included for each product are described in the AWS documentation in the <em>Overview</em> under <em>Amazon Web Services Data Model</em>.  Checking that out, we can see that the data includes a URL to images of several sizes representing the product.  Let's include the medium-sized image as a link to the product's detail page:</p>\n<pre><code>            &lt;p class=\"Product\"&gt;\n              &lt;a href=\"{Details/@url}\"&gt;\n                &lt;img src=\"{Details/ImageUrlMedium}\" /&gt;\n              &lt;/a&gt;\n              &lt;br /&gt;\n</code></pre>\n<p>We can also include the product's name as a link:</p>\n<pre><code>              &lt;span class=\"ProductName\"&gt;\n                &lt;a href=\"{Details/@url}\"&gt;\n                  &lt;xsl:value-of select=\"Details/ProductName\" /&gt;\n                &lt;/a&gt;\n              &lt;/span&gt;\n              &lt;br /&gt;\n</code></pre>\n<p>And, it would be nice to provide a listing of people involved in creating the product (ie. the artists and/or authors):</p>\n<pre><code>          &lt;xsl:for-each select=\"./Details/Artists/Artist | \n                                ./Details/Authors/Author\"&gt;\n            &lt;span class=\"Author\"&gt;by &lt;xsl:value-of select=\".\" /&gt;&lt;/span&gt;&lt;br /&gt;\n          &lt;/xsl:for-each&gt;\n</code></pre>\n<p>Note that here, the XPath selecting the data is just a bit more involved, since this information can be found in both <code>Artist</code> and <code>Author</code> elements.  In another case, we might care to make a distinction, but it really isn't all that important for this project.  The data model also provides an indication of from which catalog this product came, as well as its date of release.  Let's include that for good measure:</p>\n<pre><code>          (\n          &lt;xsl:value-of select=\"Details/Catalog\" /&gt; -\n          &lt;span class=\"ReleaseDate\"&gt;\n            &lt;xsl:value-of select=\"Details/ReleaseDate\" /&gt;\n          &lt;/span&gt;\n          )\n          &lt;br /&gt;\n        &lt;/p&gt;\n</code></pre>\n<p>Another thing that would be nice to know is how much this thing costs--we've got this information provided in the XML data as well, so let's include it:</p>\n<pre><code>        &lt;p&gt;\n          &lt;span class=\"PriceLabel\"&gt;List Price:&lt;/span&gt; \n          &lt;span class=\"ListPrice\"&gt;\n            &lt;xsl:value-of select=\"Details/ListPrice\" /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n          \n          &lt;span class=\"PriceLabel\"&gt;Our Price:&lt;/span&gt;\n          &lt;span class=\"OurPrice\"&gt;\n            &lt;xsl:value-of select=\"Details/OurPrice\" /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n\n          &lt;span class=\"PriceLabel\"&gt;Used Price:&lt;/span&gt; \n          &lt;span class=\"UsedPrice\"&gt;\n            &lt;xsl:value-of select=\"Details/UsedPrice\" /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n        &lt;/p&gt;\n</code></pre>\n<p>Something to note about these prices, too, is that although the used price is listed, the shopping cart will contain new items from Amazon's shelves.  You might want to compare these prices though, and make a change to the shopping cart when you get there, if a used item is acceptable.  (Another good reason for manual intervention in our Wish-of-the-Month club.)</p>\n<p>Oh yeah, and we should include one other bit of information:</p>\n<pre><code>        &lt;p&gt;(&lt;xsl:value-of select=\"Details/Availability\" /&gt;)&lt;/p&gt;\n</code></pre>\n<p>This tells us whether or not this item can actually be bought, at present.  Although we used this data earlier to try to filter out unavailable items, we should still display this information just in case we missed something.</p>\n<p>Finally, let's clean up and finish the HTML:</p>\n<pre><code>      &lt;/div&gt;\n    &lt;/xsl:for-each&gt;\n    \n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Running this stylesheet (<a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\">wishes-ex5.xsl</a>) should give you a page that looks something like this in a browser:</p>\n<p><img src=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg\" alt=\"Wishlist HTML screenshot\"></p>\n<h3 id=\"scheduling-monthly-emails\">Scheduling Monthly Emails</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex6.xsl\"><code>wishes-ex6.xsl</code></a>: The sixth (and final) iteration of the stylesheet in development.</li>\n</ul>\n<p>That HTML we're producing is fine, but what we really want to do is get it delivered to us.  We could set up a scheduled run that would periodically generate a page for us to visit, but the whole point of this is laziness.  How about firing off an email with this content?  There are two things to help us with this: <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> shows us how to construct email messages with a variety of content types; and <a href=\"http://www.hmug.org/man/8/sendmail.html\" title=\"man: sendmail\"><code>sendmail</code></a> will let us send these messages out.  And then, with the help of <code>cron</code>, we can fire up this process every month.</p>\n<p>Along with producing XML, XSLT can also construct plain text output--which is just what we need to create MIME email messages.  <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> doesn't make for the most thrilling reading, but there are a few articles to be found that summarize things (such as <a href=\"http://www.abiglime.com/webmaster/articles/cgi/010698.htm\" title=\"How to encapsulate HTML in an email message\">this article</a> and <a href=\"http://www.wilsonweb.com/wmt5/html-email-multi.htm\" title=\"Sending HTML and Plain Text E-Mail Simultaneously\">this article</a>).   To make a long story short, a basic shell for an email message using MIME to include an HTML part and a plain text part looks something like this:</p>\n<pre><code>To: someone@example.org\nSubject: Some useful email subject\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=\"theBoundaryString\"\n\n--theBoundaryString\nContent-Type: text/plain\n\nSome plain text representation goes here...\n\n--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: \"http://www.decafbad.com/\"\n\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n    &lt;p&gt;Some HTML representation goes here...&lt;/p&gt;\n&lt;/html&gt;\n\n--theBoundaryString--\n</code></pre>\n<p>I've snuck in the idea of providing both an HTML version (which we've already done) and a new plain text version.  Depending on your email program and your preferences, one type might be more useful than the other.  In any case, it's not all that hard to offer both here.  To start sending these email messages, though, we'll need an email address.  So, add that as an element in <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\">wishes.xml</a>:</p>\n<pre><code>&lt;wishes xmlns=\"http://www.decafbad.com/2004/05/wishes\"&gt;\n  &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n  &lt;maxprice&gt;15.00&lt;/maxprice&gt;\n  &lt;associate&gt;0xdecafbad-20&lt;/associate&gt;\n  &lt;devtoken&gt;D8HVH869XA0NP&lt;/devtoken&gt;\n  &lt;wishlists&gt;\n    &lt;wishlist label=\"Me\"&gt;1QWYI6P2JF3Q5&lt;/wishlist&gt;\n    &lt;wishlist label=\"The Girl\"&gt;35OIOYWQ9XQAE&lt;/wishlist&gt;\n  &lt;/wishlists&gt;\n&lt;/wishes&gt;\n</code></pre>\n<p>Let's extract this data into a global variable near the start of the stylesheet:</p>\n<pre><code>  &lt;xsl:variable name=\"email_to\"  select=\"/wishes:wishes/wishes:email\" /&gt;\n</code></pre>\n<p>Start editing the final template of the stylesheet, inserting before the start of HTML content:</p>\n<pre><code>    &lt;!-- Eat all the line breaks generated so far --&gt;\n    &lt;xsl:text&gt;To: &lt;/xsl:text&gt;&lt;xsl:value-of select=\"$email_to\" /&gt;   \nSubject: 0xDECAFBAD's Amazon Wish-of-the-Month Club\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=\"theBoundaryString\"\n</code></pre>\n<p>This is the header for the email.  Up until now, we've been generating XML with the stylesheet and haven't cared very much about any extra whitespace or line breaks which might sneak into the output.  However, in an email header, whitespace is important since a blank line is what's used to separate the headers from the body of the email message.  So, any stray blank lines will cause what we might have meant to be headers to be interpreted as part of the message instead.  Producing the first header in the email with <code>xsl:text</code> tags causes the XSL processor to throw away any leading whitespace which would have appeared before the first header.</p>\n<p>Other than this little twist, the email header looks pretty much like the shell.  We fill in the <code>To</code> address from the global variable <code>$email_to</code> and define a <code>Subject</code> line.  The <code>MIME-Version</code> and <code>Content-Type</code> headers are what enable us to include both text and HTML versions in one email.</p>\n<p>Now we can start into one of the parts:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/plain\n</code></pre>\n<p>This begins the plain text section of the email, using the <em>boundary string</em> as defined in the headers to delinieate the section's beginning.  The section can also have its own set of headers, of which we use only one: <code>Content-Type</code>.  Moving along, let's work on the text content itself.</p>\n<pre><code>Here are your wishlist items:\n\n&lt;xsl:value-of select=\"$shopping_cart_purchase_url\" /&gt;&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n</code></pre>\n<p>No shopping cart image here, but this includes the human-viewable URL which leads to a shopping cart on Amazon.com.  The usage of <code>xsl:text</code> here forces a line break where there otherwise wouldn't have been one with the usage of <code>xsl:value-of</code>.  Now, let's iterate through each of the wishlists and list out the product details:</p>\n<pre><code>&lt;xsl:for-each select=\"exsl:node-set($random_products)/wishes:wishitem\"&gt;\n---------------------------------------------------------------------------\n&lt;xsl:value-of select=\"wishes:wishlist/@label\" \n       disable-output-escaping=\"yes\" /&gt;\n---------------------------------------------------------------------------\n\n&lt;xsl:value-of select=\"Details/ProductName\" \n       disable-output-escaping=\"yes\" /&gt;\n\n&lt;xsl:for-each select=\"./Details/Artists/Artist | \n                      ./Details/Authors/Author\"&gt;\nby &lt;xsl:value-of select=\".\"  \n   disable-output-escaping=\"yes\"/&gt;\n&lt;/xsl:for-each&gt;\n\nCatalog:      &lt;xsl:value-of select=\"Details/Catalog\" \n   disable-output-escaping=\"yes\" /&gt;\nReleased:     &lt;xsl:value-of select=\"Details/ReleaseDate\" \n   disable-output-escaping=\"yes\" /&gt;\n\nList Price:   &lt;xsl:value-of select=\"Details/ListPrice\"  \n     disable-output-escaping=\"yes\"/&gt; \nOur  Price:   &lt;xsl:value-of select=\"Details/UsedPrice\"  \n     disable-output-escaping=\"yes\"/&gt; \nUsed Price:   &lt;xsl:value-of select=\"Details/OurPrice\"  \n     disable-output-escaping=\"yes\"/&gt; \n        \nAvailability: &lt;xsl:value-of select=\"Details/Availability\"  \n       disable-output-escaping=\"yes\"/&gt;\n&lt;xsl:text&gt;\n\n&lt;/xsl:text&gt;\n&lt;xsl:value-of select=\"Details/@url\"  \n       disable-output-escaping=\"yes\"/&gt;\n&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n\n&lt;/xsl:for-each&gt;\n</code></pre>\n<p>Most everything in this stretch should look very similar to the HTML version we just finished.  The biggest difference is that every bit of information pulled in using <code>xsl:value-of</code> is done using the <code>disable-output-escaping</code> option.  When this is <code>yes</code>, things like ampersands are no longer escaped for valid XML output.  Since this bit of the email is plain text, we don't want to see <code>&amp;amp;</code> in album titles, so this will cause ampersands to appear unmolested.</p>\n<p>That's the plain text version finished.  Now let's create the HTML version:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: \"http://www.decafbad.com/2004/05/wishes\"\n</code></pre>\n<p>The boundary string appears again, signifying the end of the plain text section and the start of the HTML section.  Headers appear here which specify that what follows is HTML; that it's encoded in 7-bit characters; that it should be included in the message display itself (rather than presented as an attachment to be saved); and that all relative URLs which might appear in the HTML should be treated as having a base URL as specified.  This last part allows HTML in email to refer to images and other pages on another site without making all the URLs absolute.</p>\n<p>We don't need to make any modifications to the HTML as we built it in the last iteration of the stylesheet, so we can just include it unchanged:</p>\n<pre><code>&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n...\n&lt;/html&gt;\n\n--theBoundaryString--\n</code></pre>\n<p>This final appearance of the boundary string is bracketed on both sides by dashes, which indicates the end of the final section of the document.  We should be ready to try this in combination with <code>sendmail</code> in a shell:</p>\n<pre><code>$ xsltproc wishes-ex6.xsl wishes.xml | sendmail -it\n</code></pre>\n<p>If everything has worked correctly, there should be an email arriving in your mailbox sometime soon.  (Or in my inbox, if you followed the directions literally and didn't supply your own email address.)  The options supplied to <code>sendmail</code> are fairly basic: </p>\n<ul>\n<li><code>-i</code> causes lines consisting solely of <code>.</code> <em>not</em> to be treated as an end-of-input signal.</li>\n<li><code>-t</code> causes <code>sendmail</code> to look in the message headers (ie. <code>To:</code>) for a list of recipients.</li>\n</ul>\n<p>If you don't happen to have have <code>sendmail</code> available, you might want to look into what local mail programs you have available which can accept the output from the stylesheet.</p>\n<p>Once you have this working, the final task is to schedule its monthly execution with your local <code>cron</code> installation.  If you haven't played with <code>cron</code> before, there are many resources and tutorials available (<a href=\"http://www.lysator.liu.se/~forsberg/linux/cron.html\" title=\"Doing things periodically - Using CRON\">here's one</a> and <a href=\"http://www.itworld.com/Comp/2378/swol-0825-unix101/\" title=\"Using cron basics\">here's another</a>).  You should add something like the following to your user account's <code>crontab</code>:</p>\n<pre><code>0 0 * 1 *  (cd /your/working/path; xsltproc wishes.xsl wishes.xml | sendmail -it)\n</code></pre>\n<p>The \"<code>0 0 * 1 *</code>\" indicates to <code>cron</code> that this set of commands should be run at midnight on the first of every months.  Note also that <code>/your/working/path</code> should be replaced by the path to where you've been working during this project.  And finally, I've renamed the final iteration of the stylesheet file to simply <code>wishes.xsl</code>.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>So that's it--we have an XSL stylesheet which queries Amazon Web Services for products contained in multiple wishlists; selects a random item from each; prepares a shopping cart containing those items; and finally generates an email message containing both plain text and HTML presentations of the shopping cart and selected items.</p>\n<p>Though this implementation serves the purpose I wrote about at the start of this article, there are definitely many areas where this can be improved upon or expanded:</p>\n<ul>\n<li><p>Many people think Amazon is an evil company for their use of patents.  I can't say that I'm entirely happy with them for this myself, but their AWS offering is just too nice to resist tinkering with.  It might be interesting to investigate other retailers' wishlist offerings, where they exist, and to see how this idea might be made to work with other (or even multiple) retailers.  Even better, come up with your own wishlist system, and a cross-retailer shopping cart.</p>\n</li>\n<li><p>I chose XSLT as the implementation technology because I thought it would be more natural to deal with Amazon's XML this way.  There are, admittedly, a few awkward parts in the resulting stylesheet however.  Sometimes it's good to see a project like this through, just to get a sense for where things do go awkward with a technology or my understanding of it.  It could be interesting to transliterate this into a scripting language like Python or Perl, perhaps using the <a href=\"http://xmlsoft.org/python.html\">libxml bindings</a> to do so.</p>\n</li>\n<li><p>The error and failure handling in this implementation are all but non-existent.  Should anything unexpected happen while dealing with Amazon Web Services, the results aren't likely to be very pretty.  You may want to consider improving in this area.  One instance I identified was to report when the sanity limit was hit in looping through wishlist pages, versus an actual end of pages.</p>\n</li>\n<li><p>If you play around with making more wishlist queries using the techniques here, you might want to consider caching the full set of data pulled in by the multiple-page calls to AWS, in order to prevent hammering Amazon's servers with repeated requests for the same data, likely unchanged.</p>\n</li>\n<li><p>I still don't know why <code>exsl:random</code> doesn't work for me.  Although I thought using a web service for random numbers was intereting, it would be very nice if I didn't have to use it.</p>\n</li>\n<li><p>The HTML presentation could certainly use some good CSS to make it more attractive.</p>\n</li>\n</ul>\n<p>Feel free to send me any suggestions, criticisms, or complaints related to this article!</p>\n",
    "prevPostPath": "2004/07/15/dork-funk",
    "nextPostPath": "2004/06/28/radioiorock-scraper"
  },
  {
    "comments_archived": true,
    "date": "2004-06-28T01:44:51.000Z",
    "excerpt": "Here's the next installment of the Wish-of-the-Month Club.  You can revisit the first part, too, if you've missed it.  I'd meant to post it within a week of the first part, so apologies all around to anyone who has been tapping a foot waiting for it.  Enjoy!",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "Wish-of-the-Month Club, Part 2 of 3",
    "wordpress_id": 530,
    "wordpress_slug": "wishofthemonthclub2",
    "wordpress_url": "http://www.decafbad.com/blog/?p=530",
    "year": "2004",
    "month": "06",
    "day": "27",
    "isDir": false,
    "slug": "wishofthemonthclub2",
    "postName": "2004-06-27-wishofthemonthclub2",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/06/28/wishofthemonthclub2",
    "summary": "<p><i>Here's the next installment of the Wish-of-the-Month Club.  You can <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">revisit the first part</a>, too, if you've missed it.  I'd meant to post it within a week of the first part, so apologies all around to anyone who has been tapping a foot waiting for it.  Enjoy!</i></p>\n<h3 id=\"paging-through-wishes\">Paging Through Wishes</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex2.xsl\"><code>wishes-ex2.xsl</code></a>: The second iteration of the stylesheet in development.</li>\n</ul>\n<p>Now we've got a way to make queries against Amazon Web Services, not entirely unlike what you might be used to if you tinker with MySQL databases on a regular basis.  At this point, though, we still have a bit of refining to make to this query.  If you take a look at the data produced by the query in its current state, and compare that to what you see on wishlists in your browser, you should notice some things missing.</p>\n<p>If you look at <a href=\"http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5\" title=\"Buy me something, will ya?\">my wishlist</a>, you'll notice that items span several pages when visited by browser.  As it turns out, AWS queries work in a similar fashion--each query returns only a limited number of items (about 10), and an additional parameter supplied to further queries is required to step through further pages of results.  So, using what we've built so far will only get us to the first page of wishlist items; to get all of the items, we'll need a way to step through all of the pages.</p>\n<p>In playing with this, I experienced a bit of hairpulling frustration:  The AWS documentation, under \"Generating Additional Product Results\", claims that XML returned by the service will supply a count of the total pages available for a given query.  And although I see this element present in other types of searches, the <code>TotalPages</code> element is absent when querying on wishlists.  This may be a bug, or it may be an undocumented change in the service--either way, it was a surprise and leaves me with no official way to know how many pages I need to ask for in order to have a complete set of data.  </p>\n<p>With some further tinkering, though, I figured out a workaround: If a query is made for a page number beyond the final page, the XML returned will be a duplicate of the final page.  Once I see a duplicate item appear, I know it's time to stop paging through results.  This is completely undocumented behavior, and could break at any time (ie. if Amazon decided to start issuing an error for a page index out of bounds), but it'll work for now.</p>\n<p>This calls for reworking the <code>processWishlist</code> template.  For a given wishlist, it will need to iterate through a sequence of page numbers, requesting XML from AWS for each, stopping when the first duplicate page is found.  Since XSLT is heavily steeped in functional programming concepts, this sort of <a href=\"http://www.dpawson.co.uk/xsl/sect2/N4806.html\" title=\"Iteration in XSLT\">iteration in XSLT</a> is best done <a href=\"http://www-106.ibm.com/developerworks/xml/library/x-xslrecur/\" title=\"Use recursion effectively in XSL\">with recursion</a>:</p>\n<pre><code>  &lt;xsl:template name=\"processWishlist\"&gt;\n\n    &lt;xsl:param name=\"wishlist\" /&gt;              &lt;!-- Wishlist ID --&gt;\n    &lt;xsl:param name=\"max\"   select=\"50\" /&gt;     &lt;!-- Arbitrary upper loop limit --&gt;\n    &lt;xsl:param name=\"curr_page\" select=\"1\" /&gt;  &lt;!-- Curr page # --&gt;\n    &lt;xsl:param name=\"prev_first_asin\" /&gt;       &lt;!-- Keeping track of repeats --&gt;\n</code></pre>\n<p>The first modification to this template is the addition of three parameters:</p>\n<ul>\n<li><code>max</code> provides an arbitrary upper limit to the number of pages through which this template will iterate.</li>\n<li><code>curr_page</code> contains the number of the page to be requested in this iteration.</li>\n<li><code>prev_first_asin</code> will contain the ASIN number of the first item from the previous iteration's page of results.</li>\n</ul>\n<p>Next, we modify the URL used to query for wishlist data:</p>\n<pre><code>    &lt;!-- Fetch the wishlist products --&gt;\n    &lt;xsl:variable name=\"details\" select=\"document(concat(\n                  'http://xml.amazon.com/onca/xml3?',\n                  't=',$associate,'&amp;amp;',\n                  'dev-t=',$devtoken,'&amp;amp;',\n                  'WishlistSearch=',$wishlist,'&amp;amp;',\n                  'type=lite&amp;amp;f=xml&amp;amp;',\n                  'page=',$curr_page))//Details\" /&gt;\n</code></pre>\n<p>The only addition here beyond the previous version is the <code>page</code> parameter in the URL.  Not much mystery here--this parameter specifies which page of results we want.  Now, let's build the loop:</p>\n<pre><code>    &lt;!-- Snag the first item Asin --&gt;\n    &lt;xsl:variable name=\"curr_first_asin\" select=\"$details/Asin/text()\" /&gt;\n\n    &lt;!-- If we haven't exceeded the loop limit, and this first Asin isn't --&gt;\n    &lt;!-- a repeat of the previous loop (indicating we've run out of new   --&gt;\n    &lt;!-- pages), then go ahead...                                         --&gt;\n    &lt;xsl:if test=\"(($curr_page+1) &amp;lt; $max) and\n                  (string-length($curr_first_asin) &amp;gt; 0) and\n                  not($curr_first_asin = $prev_first_asin)\"&gt;\n  \n</code></pre>\n<p>We capture the ASIN of the first item in this page of results and check to see if we should continue.  This <code>if</code> conditional first ensures that we're not past the sanity guard for loop iterations, makes sure that we actually got a non-empty current first ASIN, then checks our current first product's ASIN against what was passed in as the previous iteration's first product's ASIN.  If this was the first time through the loop, this value should be empty and therefore wouldn't match the current ASIN.  But, if we've gone past the end of results, the previous and current ASIN values should match, and the conditional will fail.</p>\n<p>Moving along into the body of the conditional, we copy in wishlist products filtered on a price maximum, just as before:</p>\n<pre><code>      &lt;!-- Copy products, filtering on a maximum price --&gt;\n      &lt;xsl:copy-of select=\"$details/OurPrice[number(substring(\n                   text(),2)) &amp;lt; $maxprice]/..\" /&gt;\n</code></pre>\n<p>Having done that, we move onto the recursive end of this template:</p>\n<pre><code>      &lt;!-- Loop by recursion to get the next page --&gt;\n      &lt;xsl:call-template name=\"processWishlist\"&gt;\n        &lt;xsl:with-param name=\"wishlist\"        select=\"$wishlist\" /&gt;\n        &lt;xsl:with-param name=\"max\"             select=\"$max\" /&gt;\n        &lt;xsl:with-param name=\"curr_page\"       select=\"$curr_page + 1\" /&gt;\n        &lt;xsl:with-param name=\"prev_first_asin\" select=\"$curr_first_asin\" /&gt;\n      &lt;/xsl:call-template&gt;\n\n    &lt;/xsl:if&gt;    \n  &lt;/xsl:template&gt;\n</code></pre>\n<p>Here, the template makes a recursive call back to itself, passing through the wishlist ID and the maximum iteration count.  Since variables in XSLT are immutable, meaning that their values can't be changed once they've been set, we can't increment <code>$curr_page</code> in-place like a loop counter in other languages--so, the current page count <em>value</em> is incremented and passed to the recursive call as a parameter.  Finally, the current first item's ASIN is passed along, to become the previous ASIN for the next iteration.</p>\n<p>Note that when the conditional fails--that is, if the loop limit is passed or a duplicate page is detected--the loop ends.  In other words, nothing further happens and execution pops back up out of all the levels of recursion and the top-level template ends.  </p>\n<p>I wrote \"<em>when</em> the conditional fails\".  This is a key point: for the loop to eventually end, this conditional <em>must</em> fail (or be made to fail) at some point, else this loop will happily progress through page requests forever.  This is the reason for the <code>$max</code> parameter limiting the number of iterations, in case something goes haywire--like, oh say, a failure of our duplicate-page detection hack as a loop ending condition.  A useful exercise for the reader might be to add some additional diagnostic code to report that the limit was hit versus a natural end to results.</p>\n<h3 id=\"random-numbers\">Random Numbers</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex3.xsl\"><code>wishes-ex3.xsl</code></a>: The third iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/random-xml\"><code>random-xml</code></a>: A Perl CGI script used as a web service to generate random numbers.</li>\n</ul>\n<p>Armed with a template that will query against the full set of items in a wishlist, we're ready to look into making a random selection from a list of products.  </p>\n<p>But first, we need to pick a random number.  Unfortunately, there doesn't appear to be any <code>random()</code> function in the XPath or XSLT standards.  There <em>is</em> a <a href=\"http://www.exslt.org/math/functions/random/index.html\"><code>math:random()</code></a> from EXSLT implemented in <code>libxslt</code>, but I seem to be having a bit of a problem getting it to produce anything other than the same sequence of numbers.  I suspect there's a problem in seeding the random number generator, but I've yet to work out how to fix it.  (Suggestions welcome.)</p>\n<p>So, I cheated and made another workaround with a CGI script on my web server that generates random numbers in a simple XML document.  Currently, it's hosted here:</p>\n<pre><code>http://www.decafbad.com/2004/05/random-xml\n</code></pre>\n<p>And this is what the script looks like:</p>\n<pre><code>#!/usr/bin/perl\n\nuse strict;\nuse CGI;\n\nmy $q = new CGI();\n\nmy $min = $q-&gt;param('min') or 0;\nmy $max = $q-&gt;param('max') or 1;\nmy $int = $q-&gt;param('int');\n\nmy $num = $min + ( rand() * ($max - $min));\nif ($int) { $num = int($num); }\n\nprint $q-&gt;header('text/xml');\nprint \"&lt;rand&gt;$num&lt;/rand&gt;\\n\";\n</code></pre>\n<p>This is a very simple CGI.  It accepts the parameters <code>max</code>, <code>min</code>, and <code>int</code>.  The values of these parameters determine the maximum and minimum value for the random number returned, and whether or not it should be an integer.  For example, the <a href=\"http://www.decafbad.com/2004/05/random-xml?int=1&amp;min=10&amp;max=20\" title=\"A random integer between 10 and 20, in XML\">following URL</a> should return an integer between 10 and 20:</p>\n<pre><code>http://www.decafbad.com/2004/05/random-xml?\nint=1&amp;#38;min=10&amp;#38;max=20\n</code></pre>\n<p>Using this as a web service in the stylesheet with the <code>document()</code> function, we can get a random number.  If you've got web space where you can host CGI scripts, I suggest you host a copy of this script yourself, since I can't guarantee how long mine will stick around.  But, for as long at works, feel free to use the service from my server.</p>\n<p>Moving along, let's add a new named template to the stylesheet, called <code>randomWishlistProduct</code>:</p>\n<pre><code>  &lt;xsl:template name=\"randomWishlistProduct\"&gt;\n\n    &lt;xsl:param name=\"wishlist\" /&gt; &lt;!-- Wishlist ID --&gt;\n    \n    &lt;!-- Gather all the products for the current wishlist --&gt;\n    &lt;xsl:variable name=\"products\"&gt;\n      &lt;xsl:call-template name=\"processWishlist\"&gt;\n        &lt;xsl:with-param name=\"wishlist\" select=\"$wishlist\" /&gt;\n      &lt;/xsl:call-template&gt;\n    &lt;/xsl:variable&gt;\n</code></pre>\n<p>Just like the <code>processWishlist</code> template, we start by defining the parameter <code>wishlist</code> to accept a wishlist ID.  Using this ID, we call the <code>processWishlist</code> template itself and store the complete list of products queried from the wishlist into the variable <code>$products</code>.</p>\n<pre><code>    &lt;!-- Count the products in the wishlist --&gt;\n    &lt;xsl:variable name=\"max_products\"\n                  select=\"count(exsl:node-set($products)/Details)\" /&gt;\n</code></pre>\n<p>This next step counts the number of products found in the wishlist.  The one tricky bit here is the use of the EXSLT function <a href=\"http://www.exslt.org/exsl/functions/node-set/index.html\"><code>exsl:node-set()</code></a>: The <code>$products</code> variable contains what's called a <a href=\"http://www.w3.org/TR/xslt#section-Result-Tree-Fragments\"><em>result tree fragment</em></a>, which is a kind of cross between XML data nodes and a plain old string.  This type of data does not normally allow the full set of XPath operators to be used on it, so first we need to use <code>exsl:node-set()</code> to turn it into a full-fledged node set.  Then we can look up the <code>Details</code> element nodes and count them.  </p>\n<pre><code>    &lt;!-- Conjure up a random index within the list of products --&gt;\n    &lt;xsl:variable name=\"rand_product_num\"\n                  select=\"document(concat(\n                  'http://www.decafbad.com/2004/05/random-xml?',\n                  'int=1&amp;amp;',\n                  'min=1&amp;amp;',\n                  'max=',$max_products))/rand\" /&gt;\n</code></pre>\n<p>Here is where the random number service comes in handy.  The <code>concat()</code> function is used to build the URL to the service, with parameters specifying that the number should be an integer, and should fall between 1 and the number of products in the wishlist.  The <code>document()</code> function grabs the XML document from the service, and the value is extracted from the single element the document contains.</p>\n<p>There is an alternative to this last bit, should you happen to have a properly working <code>math:random()</code> function in your XSLT processor:</p>\n<pre><code>    &lt;xsl:variable name=\"rand_product_num\" select=\"round( math:random() *\n                  $max_products ) + 1\" /&gt;\n</code></pre>\n<p>If you can use this instead, you'll have no need for the random number web service.  This version is obviously more concise, and doesn't require another trip out to a web service.  You might want to try it--but if you find that you keep getting the same wishlist items selected, then you've run into the problem I found with the random number generator.</p>\n<p>Now, let's wrap this template up by selecting an item:</p>\n<pre><code>    &lt;!-- Copy the product as indexed by the random number --&gt;\n    &lt;xsl:copy-of select=\"exsl:node-set($products)/Details[\n                 position()=$rand_product_num]\" /&gt;\n       \n  &lt;/xsl:template&gt;\n</code></pre>\n<p>Again, we need to use the <code>exsl:node-set()</code> function to turn the result tree fragment in the <code>$products</code> variable into a node set, from which we select and copy the <code>Details</code> element whose position in the data is indexed by the random number we just selected.  Just one last tweak needed to wrap up this iteration of our stylesheet.  We need to swap out the call to the <code>processWishlist</code> function at the end and replace it with a call to <code>randomWishlistProduct</code>:</p>\n<pre><code>  &lt;xsl:template match=\"/wishes:wishes\"&gt;\n\n    &lt;xsl:for-each select=\"//wishes:wishlist\"&gt;\n      &lt;wishes:wishitem&gt;\n        &lt;xsl:copy-of select=\".\" /&gt;\n        &lt;xsl:call-template name=\"randomWishlistProduct\"&gt;\n          &lt;xsl:with-param name=\"wishlist\" select=\".\" /&gt;\n        &lt;/xsl:call-template&gt;\n      &lt;/wishes:wishitem&gt;\n    &lt;/xsl:for-each&gt;\n\n  &lt;/xsl:template&gt;\n</code></pre>\n<p>After these changes, you should be able to run the stylesheet ([wishes-ex3.xsl][wishes_ex3]) and get something like the following:</p>\n<pre><code>&lt;wishes:wishitem xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\"&gt;\n    &lt;wishes:wishlist label=\"The Girl\"&gt;35OIOYWQ9XQAE&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n&lt;/wishes:wishitem&gt;\n&lt;wishes:wishitem xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\"&gt;\n    &lt;wishes:wishlist label=\"Me\"&gt;1QWYI6P2JF3Q5&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n&lt;/wishes:wishitem&gt;\n</code></pre>\n<p>This is similar to the output of the previous iteration of the stylesheet, but this time there's only one product selected at random for each wishlist.  </p>\n<h3 id=\"shopping-carts\">Shopping Carts</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex4.xsl\"><code>wishes-ex4.xsl</code></a>: The fourth iteration of the stylesheet in development.</li>\n</ul>\n<p>By this point, we've been able to query and filter products in Amazon wishlists, and we've selected an item at random from each wishlist we've queried.  Now, let's enable some purchases.</p>\n<p>The AWS provides for Remote Shopping Cart functionality, whereby items can be added to an Amazon.com shopping cart programmatically.  This is about as close as we can get to automating the purchase of items selected from the wishlists--there is no API functionality for actually completing the ordering of items.  If you really think about it, this really is a good thing and <em>should</em> demand human intervention; we certainly wouldn't want this script going crazy and accidentally buying up everything on a wishlist.</p>\n<p>Documentation for the AWS Remote Shopping Cart explains that a shopping cart can be created and items added with a URL like the following:</p>\n<pre><code>http://xml.amazon.com/onca/xml3?\nShoppingCart=add&amp;#38;\nf=xml&amp;#38;\ndev-t=[Developer Token goes here]&amp;#38;\nt=[Associates ID goes here]&amp;#38;\nAsin.[ASIN goes here]=[quantity goes here]&amp;#38;\nsims=true\n</code></pre>\n<p>Part of this should look familiar, so we already know what to do with the developer token and the associates ID.  The last part, specifying product ASIN and quantity, can be filled out with information contained in the product records selected at random from the wishlists.  </p>\n<p>So, let's start by revising the template at the end of the stylesheet:</p>\n<pre><code>&lt;xsl:template match=\"/wishes:wishes\"&gt;\n\n    &lt;xsl:variable name=\"random_products\"&gt;      \n      &lt;xsl:for-each select=\"//wishes:wishlist\"&gt;\n        &lt;wishes:wishitem&gt;\n          &lt;xsl:copy-of select=\".\" /&gt;\n          &lt;xsl:call-template name=\"randomWishlistProduct\"&gt;\n            &lt;xsl:with-param name=\"wishlist\" select=\".\" /&gt;\n          &lt;/xsl:call-template&gt;\n        &lt;/wishes:wishitem&gt;\n      &lt;/xsl:for-each&gt;\n    &lt;/xsl:variable&gt;\n</code></pre>\n<p>Here, we've taken what was the output of the previous iteration of the stylesheet and stuffed it into the variable <code>$random_products</code>.  Next, let's fill in the blanks and build a Remote Shopping Cart URL:</p>\n<pre><code>    &lt;xsl:variable name=\"shopping_cart_create_url\"&gt;\n      &lt;!-- Standard AWS URL --&gt;\n      &lt;xsl:text&gt;http://xml.amazon.com/onca/xml3?&lt;/xsl:text&gt;\n\n      &lt;!-- Add in the selected items --&gt;\n      &lt;xsl:for-each select=\"exsl:node-set($random_products)\n                            /wishes:wishitem/Details\"&gt;\n        &lt;xsl:text&gt;Asin.&lt;/xsl:text&gt;&lt;xsl:value-of select=\"Asin\" /&gt;\n        &lt;xsl:text&gt;=1&amp;amp;&lt;/xsl:text&gt;\n      &lt;/xsl:for-each&gt;\n\n      &lt;!-- Wrap up with the shopping cart function and required tokens --&gt;\n      &lt;xsl:text&gt;ShoppingCart=add&amp;amp;&lt;/xsl:text&gt;\n      &lt;xsl:text&gt;f=xml&amp;amp;&lt;/xsl:text&gt;\n      &lt;xsl:text&gt;dev-t=&lt;/xsl:text&gt;&lt;xsl:value-of select=\"$devtoken\" /&gt;\n      &lt;xsl:text&gt;&amp;amp;&lt;/xsl:text&gt;\n      &lt;xsl:text&gt;t=&lt;/xsl:text&gt;&lt;xsl:value-of select=\"$associate\" /&gt;\n    &lt;/xsl:variable&gt;\n</code></pre>\n<p>Since simple XPath doesn't allow for the looping needed for multiple items, we can't just concatenate this URL together in a <code>select</code> expression like we did with the wishlist item query.  So, we use <code>xslt:foreach</code> to build this with blocks of text using the <code>xsl:text</code> element.  We iterate though the random products chosen from wishlists and add an ASIN for each to the URL with a quantity of 1. Then, we use the <code>$devtoken</code> and <code>$associate</code> variables to fill in their respective spots.</p>\n<p>Note that this could have been written without using the <code>xsl:text</code> elements like so:</p>\n<pre><code>    &lt;xsl:variable name=\"shopping_cart_create_url\"&gt;http://xml.amazon.\n    com/onca/xml3?ShoppingCart=add&amp;amp;f=xml&amp;amp;dev-t=&lt;xsl:value-of \n    select=\"$devtoken\" /&gt;&amp;amp;t=&lt;xsl:value-of select=\"$associate\" /&gt;\n    &amp;amp;&lt;xsl:for-each select=\"exsl:node-set($random_products)/\n    wishes:wishitem/Details\"&gt;Asin.&lt;xsl:value-of select=\"Asin\" /&gt;=1\n    &amp;amp;&lt;/xsl:for-each&gt;&lt;/xsl:variable&gt;\n</code></pre>\n<p>This removes the clutter of all the <code>xsl:text</code> elements, but it would need to be piled all on one line in order to keep undesired whitespace from getting into the URL.  I made a small attempt at wrapping this line here, but line breaks and spaces would leave us with a non-functioning shopping cart URL.  It's up to you to decide which to use--personally, I prefer the <code>xsl:text</code> clutter for the ability to add in comments and clarify things a bit.</p>\n<p>Finally, having built the shopping cart URL, let's use it to get a shopping cart and wrap things up:</p>\n<pre><code>    &lt;xsl:variable name=\"shopping_cart\"\n                  select=\"document($shopping_cart_create_url)\" /&gt;\n\n    &lt;xsl:copy-of select=\"$shopping_cart\" /&gt;\n\n&lt;/xsl:template&gt;  \n</code></pre>\n<p>As an aside, this part is pushing the concept of a REST web service a bit: In the REST philosophy, requests using the GET method (which is what <code>document()</code> uses) should only return existing resources and not create new resources or cause modifications to happen.  Instead, these sorts of actions should use a POST request.  But, since we've already accepted a few rough edges and workarounds in this project so far, we won't let a point of esoterica like that stop us.  (That and, well, this is the way Amazon designed their web service, so we'll take what we can get.)</p>\n<p>Once you run this iteration of the stylesheet ([wishes-ex4.xsl][wishes_ex4]), you should get something like this XML as output:</p>\n<pre><code>&lt;ShoppingCartResponse ...&gt;\n  ...\n  &lt;ShoppingCart&gt;\n   &lt;CartId&gt;...&lt;/CartId&gt;\n   &lt;HMAC&gt;...&lt;/HMAC&gt;\n   &lt;PurchaseUrl&gt;...&lt;/PurchaseUrl&gt;\n   &lt;Items&gt;\n    &lt;Item&gt;...&lt;/item&gt;\n    &lt;Item&gt;...&lt;/item&gt;\n   &lt;/Items&gt;\n  &lt;/ShoppingCart&gt;\n  ...\n&lt;/ShoppingCartResponse&gt;\n</code></pre>\n<p>The AWS documentation describes the vital elements here like so:</p>\n<ul>\n<li><code>CartId</code> - The Cart ID is the unique identifier for a given shopping cart.</li>\n<li><code>HMAC</code> - The HMAC is a security token that must be passed back to Amazon Web Services for using an existing cart.</li>\n<li><code>PurchaseUrl</code> - Use the purchase URL to transfer the remote shopping cart from your application to Amazon so that your application's users may complete their purchases.&nbsp; The purchase URL merges the remote shopping cart with the Amazon.com shopping cart. </li>\n</ul>\n<p>So, in short, whenever we want to do any sort of manipulation on this Remote Shopping Cart via AWS, we'll need to remember and later supply both the <code>CartId</code> and <code>HMAC</code> found in the XML returned at its creation.  And, once we're all ready to check out, the <code>PurchaseUrl</code> points to where we'll need to browse in person.</p>\n<h3 id=\"stay-tuned\">Stay Tuned!</h3>\n<p>This concludes Part 2 of the Wish-of-the-Month Club.  Following this will be the final part, where we tie everything together and start firing off monthly emails!</p>\n<!-- links -->\n\n",
    "prevPostPath": "2004/06/28/radioiorock-scraper",
    "nextPostPath": "2004/06/16/wishofthemonthclub1"
  },
  {
    "comments_archived": true,
    "date": "2004-06-16T11:42:48.000Z",
    "excerpt": "For some time now, my girlfriend and I have been accumulating things we want in wishlists on Amazon.com.  Though they have come in handy with relatives at Christmas and on birthdays, neither of us really expects to see a regular flow of gifts from them.  For the most part, they've just become holding tanks for things we intend to buy for each other or ourselves.  On one particular visit, though, the notion of a Wish-of-the-Month club popped into my head.",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "Wish-of-the-Month Club, Part 1 of 3",
    "wordpress_id": 529,
    "wordpress_slug": "wishofthemonthclub1",
    "wordpress_url": "http://www.decafbad.com/blog/?p=529",
    "year": "2004",
    "month": "06",
    "day": "16",
    "isDir": false,
    "slug": "wishofthemonthclub1",
    "postName": "2004-06-16-wishofthemonthclub1",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/06/16/wishofthemonthclub1",
    "summary": "<p><i>Remember that <a href=\"http://www.decafbad.com/blog/2004/05/25/i_was_a_preteen_transactor_author_wannabe_and_still_am\">I wrote a little while ago</a> about wanting to publish some articles here that I'd want to read?  Well, I've been hard at work since then to turn out the first set and I think I've finally got something for you.  I <a href=\"http://www.decafbad.com/blog/2004/06/13/i_will_do_the_fandango\">mentioned</a> earlier this week that I was taking this seriously, so I hope it shows.  So, with many thanks to <a href=\"http://missadroit.livejournal.com\" title=\"Miss Adroit, my favorite girl in the world\">my girlfriend's</a> kind editorial help, and with some measure of anxiety, here goes...</i></p>\n<h3 id=\"introduction\">Introduction</h3>\n<p>For some time now, my girlfriend and I have been accumulating things we want in wishlists on Amazon.com.  <a href=\"http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5\">Here's mine</a> and <a href=\"http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE\">here's hers</a> - if you visit them, you can see we've both got quite a few things listed.  Though they have come in handy with relatives at Christmas and on birthdays, neither of us really expects to see a regular flow of gifts from them.  For the most part, they've just become holding tanks for things we intend to buy for each other or ourselves.  </p>\n<p>However, I tend to forget we have these lists except for occasional visit to Amazon when I think, \"Oh yeah, wishlists.  I should pick up a thing or two, there's some good stuff piled up in them.\"  On one particular visit, though, the notion of a Wish-of-the-Month club popped into my head: We could afford to grab at least one item for each of us from our wishlists on a monthly basis, provided that we remembered to place an order.  It'd be better than signing up for a book or music club, driven by someone else's idea of what we wanted.  Unfortunately, there's that problem for busy, absentminded, and people like us: remembering to place an order.</p>\n<p>But wait, isn't this the sort of thing computers are for?  I should be able to cobble something together that would peruse our wishlists and--given some criteria like a price maximum--select an item at random for each of us and send them on their way.  With this, I could schedule a monthly run and start whittling down those lists.</p>\n<h3 id=\"gathering-tools\">Gathering Tools</h3>\n<p>Before I start working through the project itself, let's establish some assumptions and then gather some tools and materials:</p>\n<p>I'm going to assume that you're using a UN*X operating system (ie. Linux, Mac OS X, etc.) and that you're reasonably familiar with getting around in a shell and editing files.  Things presented here could be adapted for Windows fairly easily, but I'll leave that as an exercise to the reader.  Also, you may need to build and install a package or two, so know-how in that regard will serve as well.  And finally: some familiarity with XML and XSLT would be useful, but you won't need to be a guru with either.</p>\n<p>Oh, and all the files I'll be introducing in this project can be downloaded from my website as a tarball:  <a href=\"http://www.decafbad.com/cvs/hacks/wishes/wishes.tar.gz?tarball=1\" title=\"All Wish-of-the-Month Club files wrapped up in a tarball\"><code>wishes.tar.gz</code></a>.  If you feel like browsing, you can see these files in my <a href=\"http://www.decafbad.com/cvs/hacks/wishes/\">CVS repository</a>.  And if you feel like checking out a copy via anonymous CVS, the username is <code>anoncvs</code> and the password is blank--email me for help, if you need it.</p>\n<p>So, how do we get a look at these wishlists?  Lately, I've been tinkering a bit with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/XslScraper\" title=\"Scrape RSS and Atom from HTML using Tidy and XSLT\">scraping information from</a> and <a href=\"http://www.amazon.com/exec/obidos/ASIN/0596005776/0xdecafbad-20\" title=\"O'Reilly's Spidering Hacks\">automating access to</a> websites.  It's a bit like a puzzle game, with all the accompanying frustrations and happy breakthroughs.  However, where most puzzle games are designed with a solution in mind, this game isn't even necessarily meant to be played depending on the intentions of website owners.</p>\n<p>Fortunately, the folks at Amazon.com have made things very friendly to tinkerers by providing an API, called <a href=\"http://www.amazon.com/gp/aws/landing.html\" title=\"Amazon Web Services\">Amazon Web Services</a> (or AWS).  You'll want to <a href=\"http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&amp;node=3434641&amp;no=3435361&amp;me=A36L942TSJ2AJA\">download</a> the AWS developer's kit, which contains a wealth of documentation and examples.  After downloading these materials, you should <a href=\"https://associates.amazon.com/exec/panama/associates/join/developer/application.html\">apply for a developer's token</a> for use with the service.  AWS provides both SOAP and REST interfaces to functionality and data at their site; personally, I prefer the HTTP-and-XML approach taken by the REST interface, so that's what we'll be using here. </p>\n<p>To handle the XML produced by AWS, we'll be using the <code>xsltproc</code> command from <a href=\"http://www.xmlsoft.org/XSLT.html\">the XML C parser and toolkit of Gnome</a>.  There are other XSLT processors--such as <a href=\"http://xml.apache.org/xalan-j/\">Xalan</a>, <a href=\"http://www.gingerall.com/charlie/ga/xml/p_sab.xml\">Sablotron</a>, and <a href=\"http://saxon.sourceforge.net/\">Saxon</a>--but I've found <a href=\"http://www.xmlsoft.org/XSLT.html\">libxslt</a> easiest to feed and care for on the various platforms with which I tinker.  It also seems to support a very large swath of <a href=\"http://www.exslt.org/\">EXSLT extensions</a>, all of which come in very handy, yet seem to receive uneven support in other XSLT processors.  We'll be pulling a trick or two out of that bag, so its support is key.</p>\n<p>You may or may not already have <a href=\"http://www.xmlsoft.org/XSLT.html\">libsxlt</a> installed.  Depending on your variant of Linux, it might be as simple as a single package-management command or it might be a bit more complex if you need to compile from source.  For Mac OS X, I recommend using <a href=\"http://fink.sourceforge.net\">Fink</a> for your packaging needs.  Although, <a href=\"http://darwinports.opendarwin.org/\">DarwinPorts</a> is nice as well, if you're used to The BSD Way.</p>\n<p>A bonus for OS X users: Marc Liyanage has provided a great Open Source tool named <a href=\"http://www.entropy.ch:16080/software/macosx/#testxslt\">TestXSLT</a> that embeds <a href=\"http://www.xmlsoft.org/XSLT.html\">libxslt</a>, among other XSLT processors, in a slick GUI for easier use.  This might come in handy for you as things develop.</p>\n<h3 id=\"wishlists-in-xml\">Wishlists in XML</h3>\n<p>Okay, we've got a working environment, a head start on accessing Amazon wishlists as XML, and a way to manipulate that XML using <code>xsltproc</code>.  Let's start playing.  First things first, we need to gain access to Amazon wishlists in XML form.  Reading through the <a href=\"http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&amp;node=3434641&amp;no=3435361&amp;me=A36L942TSJ2AJA\">AWS documentation</a> reveals that wish list searches are available via a URL constructed like so:</p>\n<pre><code>http://xml.amazon.com/onca/xml3?\nt=[Associates ID goes here]&amp;#38;\ndev-t=[Developer Token goes here]&amp;#38;\nWishlistSearch=[wishlist ID goes here]&amp;#38;\ntype=[lite or heavy]&amp;#38;\nf=xml\n</code></pre>\n<p>I received an ID of <code>0xdecafbad-20</code> when I <a href=\"http://associates.amazon.com\">signed up to be an associate</a> a few years ago.  This will ensure that I get credited for sales made via the API--which isn't as important for the present project, since I'll be buying items myself, but it'll come in handy in later projects.  Also, when I <a href=\"https://associates.amazon.com/exec/panama/associates/join/developer/application.html\">signed up for a developer's token</a>, this is what I was given: <code>D8HVH869XA0NP</code>  I'm disclosing my own here for the sake of example, but you should <a href=\"https://associates.amazon.com/exec/panama/associates/join/developer/application.html\">sign up</a> and get your own.</p>\n<p>So, that fills in the first two parts of the URL.  For the purposes of this project, let's just go with the <code>lite</code> option for type.  As for the wishlist ID, let's take a look the wishlist URLs to which I linked earlier:</p>\n<pre><code>http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE\nhttp://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5\n</code></pre>\n<p>You can discover these wishlist URLs using <a href=\"http://www.amazon.com/gp/registry/search.html/002-7899886-3676027?%5Fencoding=UTF8&amp;type=wishlist\">Amazon's Wish List Search</a> feature, in which case a wishlist URL might appear like so:</p>\n<pre><code>http://www.amazon.com/gp/registry/registry.html/\n002-7899886-3676027?%5Fencoding=UTF8&amp;#38;\nid=35OIOYWQ9XQAE\n</code></pre>\n<p>In either case, there is a 13-character ID in each variety of wish list URL: this string is the wish list ID.  So, the ID for my girlfriend's wishlist is <code> 35OIOYWQ9XQAE</code> and mine is <code>1QWYI6P2JF3Q5</code>.  Given this piece of the puzzle, we can fill in the blanks to come up with the following URL for my girlfriend's wish list:</p>\n<pre><code>http://xml.amazon.com/onca/xml3?\nt=0xdecafbad-20&amp;#38;\ndev-t=D8HVH869XA0NP&amp;#38;\ntype=lite&amp;#38;\nWishlistSearch=35OIOYWQ9XQAE&amp;#38;\nf=xml\n</code></pre>\n<p><a href=\"http://xml.amazon.com/onca/xml3?t=0xdecafbad-20&amp;dev-t=D8HVH869XA0NP&amp;type=lite&amp;WishlistSearch=35OIOYWQ9XQAE&amp;f=xml\">Check out the XML resulting from this URL</a>--you may want to use a tool such as <code>curl</code> or <code>wget</code> instead of viewing this directly in your browser.  You'll see some XML that looks something like this:</p>\n<pre><code>&lt;ProductInfo&gt;\n...\n&lt;Details url=\"(some long URL)\"&gt;\n  &lt;Asin&gt;0262133601&lt;/Asin&gt;\n  &lt;ProductName&gt;Foundations of Statistical Natural Language Processing&lt;/ProductName&gt;\n  &lt;Catalog&gt;Book&lt;/Catalog&gt;\n  &lt;Authors&gt;\n     &lt;Author&gt;Christopher D. Manning&lt;/Author&gt;\n     &lt;Author&gt;Hinrich Sch&amp;#252;tze&lt;/Author&gt;\n  &lt;/Authors&gt;\n  &lt;ReleaseDate&gt;18 June, 1999&lt;/ReleaseDate&gt;\n  &lt;Manufacturer&gt;MIT Press&lt;/Manufacturer&gt;\n  &lt;ImageUrlSmall&gt;(another long url)&lt;/ImageUrlSmall&gt;\n  &lt;ImageUrlMedium&gt;(yet another long url)&lt;/ImageUrlMedium&gt;\n  &lt;ImageUrlLarge&gt;(one last long url)&lt;/ImageUrlLarge&gt;\n  &lt;Availability&gt;Usually ships within 24 hours&lt;/Availability&gt;\n  &lt;ListPrice&gt;$75.00&lt;/ListPrice&gt;\n  &lt;OurPrice&gt;$63.75&lt;/OurPrice&gt;\n  &lt;UsedPrice&gt;$49.99&lt;/UsedPrice&gt;\n&lt;/Details&gt;\n...\n&lt;/ProductInfo&gt;\n</code></pre>\n<p>Note that the <a href=\"http://www.amazon.com/exec/obidos/ASIN/0262133601/0xdecafbad-20?dev-t=D8HVH869XA0NP%26camp=2025%26link_code=xm2\">long URL</a> in the <code>Detail</code> element's <code>url</code> attribute links to the human-viewable product detail page at Amazon.  I've also left a few other things out, such as the URLs to product images; I just thought I'd edit it a bit to be friendlier to your browser at home.  There's a <a href=\"http://xml.amazon.com/schemas3/dev-lite.xsd\">schema</a> for this XML data, and the ins-and-outs are explained in the AWS documentation under \"Amazon Web Services Data Model\".</p>\n<h3 id=\"querying-the-wishes\">Querying The Wishes</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\"><code>wishes-ex1.xsl</code></a>: The first iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\"><code>wishes.xml</code></a>: An XML document used as input with the stylesheet.</li>\n</ul>\n<p>Now that we've got some XML from Amazon to play with, let's start tinkering with an XSLT stylesheet to process it.  In the interests of flexibility and reusability, we can parameterize a few things in XML before starting in on the stylesheet:</p>\n<pre><code>&lt;wishes xmlns=\"http://www.decafbad.com/2004/05/wishes\"&gt;\n  &lt;maxprice&gt;15.00&lt;/maxprice&gt;\n  &lt;associate&gt;0xdecafbad-20&lt;/associate&gt;\n  &lt;devtoken&gt;D8HVH869XA0NP&lt;/devtoken&gt;\n  &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n  &lt;wishlists&gt;\n    &lt;wishlist label=\"The Girl\"&gt;35OIOYWQ9XQAE&lt;/wishlist&gt;\n    &lt;wishlist label=\"Me\"&gt;1QWYI6P2JF3Q5&lt;/wishlist&gt;\n  &lt;/wishlists&gt;\n&lt;/wishes&gt;\n</code></pre>\n<p>Hopefully, the data here is fairly self-explanatory:  I've established a maximum price for item selection; provided my associate ID and developer token; there's an email address to which I eventually want to send the results of all this work; and I've made a list of wishlist IDs, each with a readable label. Given this, let's start out simple and  use this to get some data from Amazon:</p>\n<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\"\n            xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\"\n            xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n  &lt;xsl:output indent=\"yes\" /&gt;\n\n  &lt;!-- Grab our global settings --&gt;\n  &lt;xsl:variable name=\"maxprice\"  select=\"/wishes:wishes/wishes:maxprice\" /&gt;  \n  &lt;xsl:variable name=\"associate\" select=\"/wishes:wishes/wishes:associate\" /&gt;\n  &lt;xsl:variable name=\"devtoken\"  select=\"/wishes:wishes/wishes:devtoken\" /&gt;\n</code></pre>\n<p>So far so good--things start off by pulling in some of the parameters into variables.  Next, let's dig into actually querying wishlist data with a reusable template:</p>\n<pre><code>  &lt;xsl:template name=\"processWishlist\"&gt;\n    &lt;xsl:param name=\"wishlist\" /&gt;\n\n    &lt;xsl:variable name=\"details\" select=\"document(concat(\n        'http://xml.amazon.com/onca/xml3?',\n        't=',$associate,'&amp;amp;',\n        'dev-t=',$devtoken,'&amp;amp;',\n        'WishlistSearch=',$wishlist,'&amp;amp;',\n        'type=lite&amp;amp;f=xml'))//Details\" /&gt;\n</code></pre>\n<p>First thing into this template, we accept a parameter named <code>wishlist</code> which is expected to contain a wishlist ID string.  Next, we build an AWS URL by concatenating together the pieces we have in variables (associate ID, developer's token, and wishlist ID) using the XPath function <a href=\"http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-concat\"><code>concat()</code></a>.  Once we have this URL, we use the function <a href=\"http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-document\"><code>document()</code></a> to make a request and fetch the XML data for that URL.  From this, we select all the <code>Details</code> elements.  </p>\n<p>Then with that data, we can do some filtering on the price and availability.  We want to make sure that not only will we select items that are within our budget, but that they are available to buy in the first place:</p>\n<pre><code>    &lt;xsl:copy-of select=\"$details[\n      number(substring(OurPrice/text(),2)) &amp;lt; $maxprice\n      and\n      contains(Availability, 'Usually ships within')\n      ]\" /&gt;\n\n  &lt;/xsl:template&gt;\n</code></pre>\n<p>This code is just a little bit funky, since the price data given by Amazon contains a dollar sign, and we want to make a numerical comparison.  So, we chop the dollar sign off and convert to a number before making the comparison.  Also, there's an assumption here about what will show up in the <code>Availability</code> element: \"Usually ships within\"  Other things that might show up will declare that the item is out of stock, discontinued, or otherwise not shipping.  This might need some tweaking someday, but it seems to work for now.</p>\n<p>Taken all together, this template has the effect of a SQL SELECT statement somewhat like this:</p>\n<pre><code>SELECT * \nFROM Amazon.WishlistItems \nWHERE WishlistID = $wishlist AND \n      OurPrice &lt; $maxprice AND\n      Availability like '%Usually ships within%';\n</code></pre>\n<p><code>document()</code> is a very useful XPath function.  It allows us to pull in XML from external files and, in our case, from external URLs via HTTP requests.  This gives us the ability to make queries against REST web services like AWS--which, among many other reasons, is why I prefer REST web services over SOAP.  (I don't even want to think about trying to access a SOAP service from XSLT.)</p>\n<p>Now, let's wrap up this first iteration of the stylesheet by trying out the query template on each of the wishlist IDs:</p>\n<pre><code>  &lt;xsl:template match=\"/wishes:wishes\"&gt;\n    &lt;xsl:for-each select=\"//wishes:wishlist\"&gt;\n      &lt;wishes:wishitem&gt;\n        &lt;xsl:copy-of select=\".\" /&gt;\n        &lt;xsl:call-template name=\"processWishlist\"&gt;\n              &lt;xsl:with-param name=\"wishlist\" \n                              select=\".\" /&gt;\n        &lt;/xsl:call-template&gt;\n      &lt;/wishes:wishitem&gt;\n    &lt;/xsl:for-each&gt;\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</code></pre>\n<p>You can get a <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\">completed version of this stylesheet</a>, along with <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\">the input XML</a>, in case you haven't been cutting and pasting together a copy of your own along the way.  Try it out in a shell with:</p>\n<pre><code>$ xsltproc wishes_ex1.xsl wishes.xml\n</code></pre>\n<p>Alternately, you could check it out using <a href=\"http://www.entropy.ch:16080/software/macosx/#testxslt\">TestXSLT</a> under OS X.  You should get something like the following:</p>\n<pre><code>&lt;wishes:wishitem xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\"&gt;\n    &lt;wishes:wishlist label=\"The Girl\"&gt;35OIOYWQ9XQAE&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    ...\n&lt;/wishes:wishitem&gt;\n&lt;wishes:wishitem xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\"&gt;\n    &lt;wishes:wishlist label=\"Me\"&gt;1QWYI6P2JF3Q5&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    ...\n&lt;/wishes:wishitem&gt;\n</code></pre>\n<p>Obviously, this example XML is much abridged, but hopefully you can get the gist:  For each wishlist ID, there is a containing <code>wishitem</code> element.  It contains a copy of the <code>wishlist</code> element from the input XML, followed by all the <code>Details</code> elements filtered and copied from the Amazon XML with the help of the <code>processWishlist</code> template.</p>\n<h3 id=\"thats-all-for-now\">That's All for Now!</h3>\n<p>And that's the end of Part 1.  Next up, we'll be delving into a few more wrinkles in the wishlist querying process, selecting random items in XSLT, and the Remote Shopping Cart interface in Amazon Web Services.  Stay tuned!</p>\n<!-- links -->\n\n",
    "prevPostPath": "2004/06/28/wishofthemonthclub2",
    "nextPostPath": "2004/06/14/info-freako-or-whos-already-past-arguing-about-syndication-formats"
  }
]