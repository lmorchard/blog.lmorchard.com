[
  {
    "title": "Making of the GameChord",
    "tags": [
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "thumbnail": "/uploads/2016/gamechord/thumbnail.jpg",
    "year": "2016",
    "month": "08",
    "day": "29",
    "isDir": false,
    "slug": "gamechord",
    "date": "2016-08-29T12:00:00.000Z",
    "postName": "2016-08-29-gamechord",
    "html": "<p><strong>TL;DR</strong>: I made a USB keypad that&#39;s good for gaming and typing entirely with\none hand.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>So, remember back in February when I said that <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">keyboard hacking seems like\nfun</a>?  Well, I\nfinished this GameChord thing back in July after about 5 months of occasional\nwork. But, I&#39;ve been too busy <a href=\"https://twitter.com/lmorchard/status/770771394816729088\">drinking booze\nand playing video games</a> \nto get my butt in a chair and write about it.</p>\n<p>Let&#39;s see if I can fix that now...</p>\n<h2 id=\"the-design\">The design</h2>\n<p><a href=\"http://www.keyboard-layout-editor.com/##@_name=gamechord&amp;author=lmorchard;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@_r:35&amp;rx:2.5&amp;ry:3.5&amp;y:-1&amp;x:1;&amp;=a&amp;=b&amp;=c\"><img class=\"inset left\"\nsrc=\"/uploads/2016/gamechord/keyboard-layout.png\"></a></p>\n<p>I started doodling with key layouts and <a href=\"http://www.keyboard-layout-editor.com/##@_name=gamechord&amp;author=lmorchard;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@_r:35&amp;rx:2.5&amp;ry:3.5&amp;y:-1&amp;x:1;&amp;=a&amp;=b&amp;=c\">came up with\nthis</a>. Only 18 switches, but enough for gaming. At the\ntime, I was putting a lot of hours into Elite\nDangerous, so this felt promising as a spaceship control pad.<br><a href=\"https://www.flickr.com/photos/deusx/24872268889/\"><img class=\"inset right\" src=\"/uploads/2016/gamechord/paper-planning.jpg\"></a></p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24781232904/in/datetaken-public/\"><img class=\"inset right\" src=\"/uploads/2016/gamechord/cats-happen.jpg\"></a></p>\n<p>Over on <a href=\"http://builder.swillkb.com/\">builder.swillkb.com</a>, I plonked in the JSON from <a href=\"http://www.keyboard-layout-editor.com/##@_name=gamechord&amp;author=lmorchard;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@_r:35&amp;rx:2.5&amp;ry:3.5&amp;y:-1&amp;x:1;&amp;=a&amp;=b&amp;=c\">Keyboard\nLayout Editor</a> and came up with some SVG files that printed\nup nicely.</p>\n<p>That gave me a paper mockup of a mounting plate for key switches. I had some\nclear keycaps, so I dropped them onto the paper to get a sense for how it\nwould feel under my hand.</p>\n<p>Of course, cats happen - so those keycaps didn&#39;t stay put for very long. But,\nthat&#39;s okay. Nothing wandered off too far, and I got what I needed from\nthe mess on my desk.</p>\n<h2 id=\"making-the-case\">Making the case</h2>\n<p>Back when <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">I first started thinking about building a\nkeyboard</a>, I\nassumed I&#39;d send off whatever design files I came up with to a place\nlike <a href=\"https://www.ponoko.com/\">Ponoko</a> and get the mounting plate made for me.</p>\n<p>Prices at those places were just a bit higher than I liked, though. I also\nsuspected things wouldn&#39;t work with my first attempt. I wanted to be able\nto iterate without it taking days or weeks to learn from my mistakes\nand refine.</p>\n<p>That&#39;s when I remembered <a href=\"https://i3detroit.org\">i3Detroit</a> was just down the road. I&#39;d been\nmeaning to get over there for a couple of years: Among other things, the space\nhas <a href=\"https://www.i3detroit.org/wiki/Category:Laser_Cutter\">nice laser cutters</a> that I really wish I&#39;d used <a href=\"http://blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/\">back when\nI butchered some plastic to make a terrible PC monitor case</a>. </p>\n<p>A month or so later, I&#39;d gotten through the new member onboarding process\nand a few training sessions with the laser cutter. I had some\nacrylic sheets still on hand, so I gave my design a shot:</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/25839524664/\" title=\"Cutting a keyboard mounting plate on a laser cutter\"><img src=\"https://c1.staticflickr.com/2/1506/25839524664_3250860a23_c.jpg\" width=\"800\" height=\"450\" alt=\"Cutting a keyboard mounting plate on a laser cutter\"></a></p>\n<p>Pretty sure I had the power too high and the speed too low for the run\nin this video. But, the result was not too bad for a first attempt.  I had a\nfew dozen Cherry MX Clear switches to play with, so I snapped them into the\nplate and put on the keycaps I&#39;d used in the paper mockup earlier:</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/clear-keycaps.jpg\">\n\n<p>Still lots of work ahead, but I was feeling pretty accomplished after taking\nthis little glamour shot. I even took it into an <a href=\"https://i3detroit.org\">i3Detroit</a> member meeting\nfor show &amp; tell.</p>\n<h2 id=\"re-making-the-case\">Re-making the case</h2>\n<p>At this point, I&#39;d already heard the term &quot;kerf&quot;. Like a saw blade, the laser\nhas a width that destroys material while cutting. You want that on the\n<em>inside</em> edge of something like a key switch mounting hole, in order to keep\nthe dimensions correct. Unlike a blade, the laser is a cylindrical\nbeam that passes through a lens to form <a href=\"http://www.buildlog.net/blog/2013/05/why-are-my-laser-cut-edges-not-straight/\">something like an\nhourglass</a>. So, the\nkerf&#39;s shape depends on the lens focal length and the conical section that\nintersects with the material.</p>\n<p>Well, I didn&#39;t account for the kerf well enough in my first plate. All the key\nswitches were wobbly. Some would just fall out if I flipped\nthe thing over. Time for some of those iterations I\nfigured I&#39;d have to end up doing.</p>\n<img class=\"inset wide right\" src=\"/uploads/2016/gamechord/kerf-is-real.jpg\">\n\n<p>I know the saying is &quot;measure twice, cut once&quot; - but in this case it was\neasier to measure by cutting! I tried mounting holes with a sampling of kerf\nwidths until I found one that matched the key switch tolerances. Not so snug\nthat it cracked the plate, but not so loose that it wiggled or fell out. </p>\n<p>Once I found a good laser focus and figured out the kerf, I\nattacked another sheet of acrylic with the laser to produce another\niteration of the case.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/26975072884/\"><img class=\"fullwidth\" src=\"/uploads/2016/gamechord/glamour-shot.jpg\"></a></p>\n<p>Two changes you might notice: I added slots to glue in some socket\nheaders, so I could unplug or replace the Teensy without soldering. I also found some\n<a href=\"http://dro.ps/b/x3g0KCy\">relegendable keycaps</a> on Massdrop - they have little removable covers that\ntake 14mm paper squares. I figured that would come in handy for crazy\nkey layouts I might come up with.</p>\n<h2 id=\"wiring-up-the-key-matrix\">Wiring up the key matrix</h2>\n<p>I haven&#39;t learned how to design circuit boards yet, so I figured I&#39;d just\nhandwire this <a href=\"https://www.youtube.com/watch?v=MrokZ1afnVg\">like I saw in the video</a>. Only 18 switches, so\nhow bad could it be?\nTurns out, it&#39;s rather annoying. Interesting exercise with my terrible old\nRadio Shack soldering iron. </p>\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/matrix-wired-up.jpg\">\n\n\n<p>I think I&#39;d much rather get over that PCB fabrication hurdle for when I try\nscaling this up to a 60% keyboard like my HHKB.</p>\n<p>The technique here involves first building up rows of diodes across the\nright-hand pin of every key switch. The diodes serve to prevent <a href=\"https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\">ghosting when\nmultiple keys are pressed</a>. </p>\n<p>Then, I stripped sections of wires to\nrun as columns down the left-hand pin of the switches. </p>\n<p>The remaining\ninsulation ensures the column wires don&#39;t short against the row diodes.</p>\n<h2 id=\"wiring-up-the-teensy\">Wiring up the Teensy</h2>\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/teensy-wired-up.jpg\">\n\n<p>This matrix gives me 4 rows (counting the thumb switches) and 5 columns - or 9\nI/O pins to scan 18 switches.</p>\n<p>Except for <a href=\"https://geekhack.org/index.php?topic=72804.0\">magical PD6</a> - which is hardwired to an onboard LED - just\nabout every pin is fair game on the Teensy for rows or columns. </p>\n<p>So, I tried to pick a set that would be easiest to route wires. Since this\ncase is transparent, I wanted to keep things visually interesting with\ndifferent colored wires and a neat shape to the runs.</p>\n<p>Of course, I botched things a bit and marred the acrylic by splashing\nsolder and slipping with the iron a few times. But, maybe no one will really\nnotice.</p>\n<p>If I had to do this over again - and I <em>still</em> hadn&#39;t learned how to make a\nPCB - I&#39;d probably try using something thinner like <a href=\"https://www.adafruit.com/product/1446\">30AWG repair\nwire</a>. That seems like it would thread through the spaces much\nbetter, which would be even more important for a board with many more\nswitches. </p>\n<h2 style=\"clear: both\">Programming the Teensy</h2>\n\n<p>I based <a href=\"https://github.com/lmorchard/gamechord\">the GameChord firmware</a> on the great <a href=\"https://github.com/tmk/tmk_keyboard\">tmk\nfirmware</a> that seems popular on mech keyboard forums.</p>\n<p>Building <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/matrix.c\">the matrix</a> was easy: The firmware scans through rows (DF0, DF1,\nDF4, and DF5) by pulling each low in turn. The columns (DB4, DB5, DB6, DF7,\nand DF6) are set as &quot;active low&quot; pins - which means keys pressed in the\ncurrent scan row get connected to ground and read as signals. So,\nI wrote the functions to manipulate &amp; read the appropriate row &amp; column pins,\nrespectively. </p>\n<p>It was almost <em>too</em> easy:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Holy crap. My attempt at setting up firmware for my newly wired DIY keypad worked first time. How does this happen. <a href=\"https://t.co/xWESzku4Lp\">https://t.co/xWESzku4Lp</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/746518856328372225\">June 25, 2016</a></blockquote>\n\n<p>From there, I built <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_plain.c\">a dead simple key map</a> with just enough\nkeys to play <a href=\"https://playoverwatch.com/en-us/\">Overwatch</a>:</p>\n<pre><code class=\"language-c\">#include &quot;keymap_common.h&quot;\n\nconst uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    KEYMAP( ESC,   1,    2,    3,    T, \\\n            TAB,   Q,    W,    E,    R, \\\n           LSFT,   A,    S,    D,    F, \\\n             NO,  NO, LCTL,  SPC,    C),\n};\nconst uint16_t PROGMEM fn_actions[] = {};</code></pre>\n<p>I got it all working and had myself a nice evening of pushing carts and taking\nobjectives.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/test-run-on-gaming-station.jpg\">\n\n<h2 id=\"going-crazy-with-chording\">Going crazy with chording</h2>\n<p>I had all these <a href=\"http://dro.ps/b/x3g0KCy\">relegendable keycaps</a> and this crazy flexible <a href=\"https://github.com/tmk/tmk_keyboard\">tmk\nfirmware</a> - so I decided to try implementing <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c\">a complex and fully impractical\nkeymap based on chords with the thumb keys</a>.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/finished-key-legends.jpg\">\n\n<p>Given two thumb keys in combination, I can get 4 layers out of the other 15\nkeys - for a total of 60 keys. The firmware also <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c#L43\">lets me distinguish\nbetween keys held or just tapped</a>, which gives me a few more layers or\nmodifier keys.</p>\n<p>Long story short, I can get most of the functionality of a regular keyboard\nout of just one hand. All I have to do is just get used to putting my left\nhand through some very awkward and uncomfortable contortions until I get up to\nfull typing speed!</p>\n<p><a href=\"http://blog.lmorchard.com/2016/02/05/steam-controller/\">As I&#39;ve written before</a>, I do really like odd input devices.\nBut, this got old fast. This isn&#39;t so much a practical peripheral as a thing I\ndid because I could. It gave me an excuse to explore the firmware more\nand to use Inkscape to design some legends for my nifty keycaps.</p>\n<h2 id=\"showing-it-off\">Showing it off</h2>\n<p>And just to wrap things up, this happened:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I even have a project out in the <a href=\"https://twitter.com/i3Detroit\">@i3Detroit</a> tent at <a href=\"https://twitter.com/hashtag/MakerFaireDetroit?src=hash\">#MakerFaireDetroit</a> ! <a href=\"https://t.co/v0goD3DCBk\">pic.twitter.com/v0goD3DCBk</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/759400946514427904\">July 30, 2016</a></blockquote>\n\n<p>This was the first summer I went to <a href=\"http://www.makerfairedetroit.com/\">Maker Faire Detroit</a> as a Maker. I\nhelped for a bit at the <a href=\"https://i3detroit.org\">i3Detroit</a> tent, mainly just standing and smiling\nat the front table as folks walked in. But, I had my little keyboard out there\non a table, with a project card and everything.</p>\n<p>It and I were only there for a handful of hours, but it&#39;s pretty satisfying to\nhave actually gotten this thing done!</p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I made a USB keypad that's good for gaming and typing entirely with\none hand.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nSo, remember back in February when I said that [keyboard hacking seems like\nfun][keyboardhacking]?  Well, I\nfinished this GameChord thing back in July after about 5 months of occasional\nwork. But, I've been too busy [drinking booze\nand playing video games](https://twitter.com/lmorchard/status/770771394816729088) \nto get my butt in a chair and write about it.\n\nLet's see if I can fix that now...\n\n[keyboardhacking]: http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\n\n## The design\n\n[<img class=\"inset left\"\nsrc=\"/uploads/2016/gamechord/keyboard-layout.png\">][layoutpermalink]\n\nI started doodling with key layouts and [came up with\nthis][layoutpermalink]. Only 18 switches, but enough for gaming. At the\ntime, I was putting a lot of hours into Elite\nDangerous, so this felt promising as a spaceship control pad.  \n[<img class=\"inset right\" src=\"/uploads/2016/gamechord/paper-planning.jpg\">](https://www.flickr.com/photos/deusx/24872268889/)\n\n[<img class=\"inset right\" src=\"/uploads/2016/gamechord/cats-happen.jpg\">](https://www.flickr.com/photos/deusx/24781232904/in/datetaken-public/)\n\nOver on [builder.swillkb.com][builder], I plonked in the JSON from [Keyboard\nLayout Editor][layoutpermalink] and came up with some SVG files that printed\nup nicely.\n\nThat gave me a paper mockup of a mounting plate for key switches. I had some\nclear keycaps, so I dropped them onto the paper to get a sense for how it\nwould feel under my hand.\n\nOf course, cats happen - so those keycaps didn't stay put for very long. But,\nthat's okay. Nothing wandered off too far, and I got what I needed from\nthe mess on my desk.\n\n[builder]: http://builder.swillkb.com/\n\n## Making the case\n\nBack when [I first started thinking about building a\nkeyboard][keyboardhacking], I\nassumed I'd send off whatever design files I came up with to a place\nlike [Ponoko](https://www.ponoko.com/) and get the mounting plate made for me.\n\nPrices at those places were just a bit higher than I liked, though. I also\nsuspected things wouldn't work with my first attempt. I wanted to be able\nto iterate without it taking days or weeks to learn from my mistakes\nand refine.\n\nThat's when I remembered [i3Detroit][] was just down the road. I'd been\nmeaning to get over there for a couple of years: Among other things, the space\nhas [nice laser cutters][lasercutters] that I really wish I'd used [back when\nI butchered some plastic to make a terrible PC monitor case][monitorcase]. \n\n[lasercutters]: https://www.i3detroit.org/wiki/Category:Laser_Cutter\n[monitorcase]: http://blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/\n[i3Detroit]: https://i3detroit.org\n\nA month or so later, I'd gotten through the new member onboarding process\nand a few training sessions with the laser cutter. I had some\nacrylic sheets still on hand, so I gave my design a shot:\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/25839524664/\" title=\"Cutting a keyboard mounting plate on a laser cutter\"><img src=\"https://c1.staticflickr.com/2/1506/25839524664_3250860a23_c.jpg\" width=\"800\" height=\"450\" alt=\"Cutting a keyboard mounting plate on a laser cutter\"></a>\n\nPretty sure I had the power too high and the speed too low for the run\nin this video. But, the result was not too bad for a first attempt.  I had a\nfew dozen Cherry MX Clear switches to play with, so I snapped them into the\nplate and put on the keycaps I'd used in the paper mockup earlier:\n\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/clear-keycaps.jpg\">\n\nStill lots of work ahead, but I was feeling pretty accomplished after taking\nthis little glamour shot. I even took it into an [i3Detroit][] member meeting\nfor show & tell.\n\n## Re-making the case\n\nAt this point, I'd already heard the term \"kerf\". Like a saw blade, the laser\nhas a width that destroys material while cutting. You want that on the\n*inside* edge of something like a key switch mounting hole, in order to keep\nthe dimensions correct. Unlike a blade, the laser is a cylindrical\nbeam that passes through a lens to form [something like an\nhourglass][beamshape]. So, the\nkerf's shape depends on the lens focal length and the conical section that\nintersects with the material.\n\n[beamshape]: http://www.buildlog.net/blog/2013/05/why-are-my-laser-cut-edges-not-straight/\n\nWell, I didn't account for the kerf well enough in my first plate. All the key\nswitches were wobbly. Some would just fall out if I flipped\nthe thing over. Time for some of those iterations I\nfigured I'd have to end up doing.\n\n<img class=\"inset wide right\" src=\"/uploads/2016/gamechord/kerf-is-real.jpg\">\n\nI know the saying is \"measure twice, cut once\" - but in this case it was\neasier to measure by cutting! I tried mounting holes with a sampling of kerf\nwidths until I found one that matched the key switch tolerances. Not so snug\nthat it cracked the plate, but not so loose that it wiggled or fell out. \n\nOnce I found a good laser focus and figured out the kerf, I\nattacked another sheet of acrylic with the laser to produce another\niteration of the case.\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/glamour-shot.jpg\">](https://www.flickr.com/photos/deusx/26975072884/)\n\nTwo changes you might notice: I added slots to glue in some socket\nheaders, so I could unplug or replace the Teensy without soldering. I also found some\n[relegendable keycaps][] on Massdrop - they have little removable covers that\ntake 14mm paper squares. I figured that would come in handy for crazy\nkey layouts I might come up with.\n\n[relegendable keycaps]: http://dro.ps/b/x3g0KCy\n\n## Wiring up the key matrix\n\nI haven't learned how to design circuit boards yet, so I figured I'd just\nhandwire this [like I saw in the video][handwirevideo]. Only 18 switches, so\nhow bad could it be?\nTurns out, it's rather annoying. Interesting exercise with my terrible old\nRadio Shack soldering iron. \n\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/matrix-wired-up.jpg\">\n\n\nI think I'd much rather get over that PCB fabrication hurdle for when I try\nscaling this up to a 60% keyboard like my HHKB.\n\nThe technique here involves first building up rows of diodes across the\nright-hand pin of every key switch. The diodes serve to prevent [ghosting when\nmultiple keys are pressed][ghosting]. \n\nThen, I stripped sections of wires to\nrun as columns down the left-hand pin of the switches. \n\nThe remaining\ninsulation ensures the column wires don't short against the row diodes.\n\n[handwirevideo]: https://www.youtube.com/watch?v=MrokZ1afnVg\n[ghosting]: https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\n\n## Wiring up the Teensy\n\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/teensy-wired-up.jpg\">\n\nThis matrix gives me 4 rows (counting the thumb switches) and 5 columns - or 9\nI/O pins to scan 18 switches.\n\nExcept for [magical PD6][pd6] - which is hardwired to an onboard LED - just\nabout every pin is fair game on the Teensy for rows or columns. \n\nSo, I tried to pick a set that would be easiest to route wires. Since this\ncase is transparent, I wanted to keep things visually interesting with\ndifferent colored wires and a neat shape to the runs.\n\nOf course, I botched things a bit and marred the acrylic by splashing\nsolder and slipping with the iron a few times. But, maybe no one will really\nnotice.\n\nIf I had to do this over again - and I *still* hadn't learned how to make a\nPCB - I'd probably try using something thinner like [30AWG repair\nwire][30awg]. That seems like it would thread through the spaces much\nbetter, which would be even more important for a board with many more\nswitches. \n\n[30awg]: https://www.adafruit.com/product/1446\n\n[pd6]: https://geekhack.org/index.php?topic=72804.0\n\n<h2 style=\"clear: both\">Programming the Teensy</h2>\n\nI based [the GameChord firmware][gamechordfirmware] on the great [tmk\nfirmware][] that seems popular on mech keyboard forums.\n\nBuilding [the matrix][] was easy: The firmware scans through rows (DF0, DF1,\nDF4, and DF5) by pulling each low in turn. The columns (DB4, DB5, DB6, DF7,\nand DF6) are set as \"active low\" pins - which means keys pressed in the\ncurrent scan row get connected to ground and read as signals. So,\nI wrote the functions to manipulate & read the appropriate row & column pins,\nrespectively. \n\nIt was almost *too* easy:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Holy crap. My attempt at setting up firmware for my newly wired DIY keypad worked first time. How does this happen. <a href=\"https://t.co/xWESzku4Lp\">https://t.co/xWESzku4Lp</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/746518856328372225\">June 25, 2016</a></blockquote>\n\nFrom there, I built [a dead simple key map][plainmap] with just enough\nkeys to play [Overwatch][]:\n\n```c\n#include \"keymap_common.h\"\n\nconst uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    KEYMAP( ESC,   1,    2,    3,    T, \\\n            TAB,   Q,    W,    E,    R, \\\n           LSFT,   A,    S,    D,    F, \\\n             NO,  NO, LCTL,  SPC,    C),\n};\nconst uint16_t PROGMEM fn_actions[] = {};\n```\n\nI got it all working and had myself a nice evening of pushing carts and taking\nobjectives.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/test-run-on-gaming-station.jpg\">\n\n[the matrix]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/matrix.c\n[plainmap]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_plain.c\n[gamechordfirmware]: https://github.com/lmorchard/gamechord\n[tmk firmware]: https://github.com/tmk/tmk_keyboard\n[overwatch]: https://playoverwatch.com/en-us/\n\n## Going crazy with chording\n\nI had all these [relegendable keycaps][] and this crazy flexible [tmk\nfirmware][] - so I decided to try implementing [a complex and fully impractical\nkeymap based on chords with the thumb keys][halfqwerty].\n\n[halfqwerty]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c\n\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/finished-key-legends.jpg\">\n\nGiven two thumb keys in combination, I can get 4 layers out of the other 15\nkeys - for a total of 60 keys. The firmware also [lets me distinguish\nbetween keys held or just tapped][taps], which gives me a few more layers or\nmodifier keys.\n\n[taps]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c#L43\n\nLong story short, I can get most of the functionality of a regular keyboard\nout of just one hand. All I have to do is just get used to putting my left\nhand through some very awkward and uncomfortable contortions until I get up to\nfull typing speed!\n\n[As I've written before][steamcontroller], I do really like odd input devices.\nBut, this got old fast. This isn't so much a practical peripheral as a thing I\ndid because I could. It gave me an excuse to explore the firmware more\nand to use Inkscape to design some legends for my nifty keycaps.\n\n[steamcontroller]: http://blog.lmorchard.com/2016/02/05/steam-controller/\n\n## Showing it off\n\nAnd just to wrap things up, this happened:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I even have a project out in the <a href=\"https://twitter.com/i3Detroit\">@i3Detroit</a> tent at <a href=\"https://twitter.com/hashtag/MakerFaireDetroit?src=hash\">#MakerFaireDetroit</a> ! <a href=\"https://t.co/v0goD3DCBk\">pic.twitter.com/v0goD3DCBk</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/759400946514427904\">July 30, 2016</a></blockquote>\n\nThis was the first summer I went to [Maker Faire Detroit][] as a Maker. I\nhelped for a bit at the [i3Detroit][] tent, mainly just standing and smiling\nat the front table as folks walked in. But, I had my little keyboard out there\non a table, with a project card and everything.\n\nIt and I were only there for a handful of hours, but it's pretty satisfying to\nhave actually gotten this thing done!\n\n[maker faire detroit]: http://www.makerfairedetroit.com/\n[laservideo]: https://www.flickr.com/photos/deusx/25839524664/\n[layoutpermalink]: http://www.keyboard-layout-editor.com/##@_name=gamechord&author=lmorchard;&@=1&=2&=3&=4&=5;&@=1&=2&=3&=4&=5;&@=1&=2&=3&=4&=5;&@_r:35&rx:2.5&ry:3.5&y:-1&x:1;&=a&=b&=c\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/08/29/gamechord",
    "summary": "<p><strong>TL;DR</strong>: I made a USB keypad that&apos;s good for gaming and typing entirely with\none hand.</p>\n"
  },
  {
    "title": "Building a USB controller for an IBM Model M",
    "tags": [
      "modelm",
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "year": "2016",
    "month": "02",
    "day": "21",
    "isDir": false,
    "slug": "modelm-controller",
    "date": "2016-02-21T12:00:00.000Z",
    "postName": "2016-02-21-modelm-controller",
    "html": "<p><strong>TL;DR</strong>: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>In my <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">previous post</a>, I wrote about my initial forays into\nkeyboard hacking. I got my hands on a few IBM Model M keyboards, and built a\nPS/2-to-USB converter with a <a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a> so I could use it with my\nMacBook Pro after remapping some keys via the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK keyboard firmware</a>.</p>\n<p>That was a pretty rewarding little hack. But, then, I found <a href=\"https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\">Lawrence Wu&#39;s\nnotes</a> on replacing the original controller inside the IBM\nModel M.  In a nutshell, it turns out you can find ribbon connectors that work\nwith the Model M membrane layers and fit on a breadboard. That makes it easy\nto build - and reversible if I decide to return the keyboard to its original\nstate.</p>\n<h2 id=\"initial-prototype\">Initial Prototype</h2>\n<p>So, I ordered a few of the <a href=\"http://www.mouser.com/ProductDetail/TE-Connectivity/6-520315-6/?qs=sGAEpiMZZMvYKGyZxp8jxkA16bSpREuh\">16-pin ribbon connectors from Mouser</a>\nand a <a href=\"https://www.pjrc.com/store/teensypp.html\">Teensy 2.0++</a>. My first stab at wiring things up was\npretty simple:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24987051026/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k\" title=\"Original prototype for replacement IBM Model M keyboard controller\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24987051026_0d0b1ac2a9_z.jpg\" alt=\"Original prototype for replacement IBM Model M keyboard controller\"></a></p>\n<p>The <a href=\"https://www.pjrc.com/store/teensypp.html\">Teensy 2.0++</a> has 20 pins per side, and I needed 16 for the\nfirst ribbon. So, it was convenient to just plonk both onto the breadboard and\ntake advantage of the built-in conductors. That&#39;s also why I upgraded from a\n<a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a>: I needed more pins. The second ribbon needed\n8 pins, so I cut some lengths of <a href=\"http://amzn.to/1oCuCJ1\">hook-up wire</a> to keep things neat\nand ran the connections over.</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24684318539/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"5.5mm nut driver needed for opening IBM Model M keyboards\"><img class=\"inset wide right\" src=\"/uploads/2016/modelm-controller/24684318539_4dde739235_n.jpg\" alt=\"5.5mm nut driver needed for opening IBM Model M keyboards\"></a></p>\n<h2 id=\"driving-me-nuts\">Driving Me Nuts</h2>\n<p>Then, I wanted to get inside the keyboard to start tinkering. As it turns out,\nopening up an IBM Model M is annoying: None of the tools I had on hand could\ndo it. </p>\n<p>The case is assembled using screws with 5.5mm nut heads, rather than\nsomething like a Phillips-head screw. And, the screws are down in deep wells\ntoo narrow to fit any of the socket wrench heads I had on hand.</p>\n<p>So, I had to order <a href=\"http://amzn.to/1RgjN8k\">a 5.5mm nut driver</a> with a very slim head.\nReading <a href=\"http://www.amazon.com/Dynamite-2803-Nut-Driver-5-5mm/product-reviews/B000BQ4XP6/ref=cm_cr_dp_see_all_summary?ie=UTF8&amp;showViewpoints=1&amp;sortBy=helpful\">the reviews</a>, I can see I&#39;m not alone in this.</p>\n<p>While that made its way to my house, I&#39;d read that <a href=\"https://deskthority.net/workshop-f7/model-m-disassembly-t1960.html#p34013\">some folks used a lighter\nand a pen</a> to form a makeshift nut driver. That was a terrible\nidea, but it worked. In hindsight, I really should have just waited for the\ndriver to show up. But, I was determined to get the thing open while I had\ntime to play with it.</p>\n<h2 id=\"the-original-controller\">The Original Controller</h2>\n<p>And, once open, this is the board I found inside:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/25046846995/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M original controller board\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/25046846995_c8dab2484c_z.jpg\" alt=\"IBM Model M original controller board\"></a></p>\n<p>I should have taken a picture of it in place, but oh well. The board has a\ngrounding strap that was screwed down to the steel plate under the keys.\nBeyond that, it just fit into plastic brackets in the case and wasn&#39;t\notherwise fastened down. And, in a weird coincidence, the board was almost the\nexact same dimensions as my breadboard. Maybe these things are standard sizes?</p>\n<h2 id=\"mapping-the-membranes\">Mapping the Membranes</h2>\n<p>With the keyboard membrane ribbons free from the original board, I hooked them up to\nmy prototype. From there, I wanted to start making the keys send the right\nsignals. There are three parts to this:</p>\n<ol>\n<li>Mapping Teensy pins to a 16 x 8 switch matrix</li>\n<li>Mapping the 16 x 8 switch matrix to physical key locations</li>\n<li>Mapping physical key locations to USB key codes</li>\n</ol>\n<p>To accomplish #1, <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/matrix.c#L163\">I set up pins in the firmware</a>. The way this works is\nthat the rows are set to input and the columns are set to output. By pulsing a\ncurrent for each column in turn and reading the rows, you can build up a\nmatrix of switch state where the circuit is completed. This is called\n<a href=\"https://www.massdrop.com/article/introduction-to-keyboard-programming\">scanning the keyboard</a>. There are problems in this process - <a href=\"http://blog.komar.be/how-to-make-a-keyboard-the-matrix/\">like\nghosting</a> - but I&#39;ll skip describing them for now.</p>\n<p>To double check that I had my matrix working, I threw together an initial\nkeymap and set every key to emit &quot;1&quot;.  I tapped each key and saw a &quot;1&quot; in my\nnotepad. Hooray, it worked! At least, electrically speaking.</p>\n<p>For step #2, I started googling for IBM Model M membrane matrix maps. Surely\nsomeone had done this before! Well, <a href=\"https://deskthority.net/workshop-f7/universal-model-m-controller-t9820.html#p207736\">it turns out someone had</a>.\nDeskthority user <a href=\"https://deskthority.net/idollar-u6930/\">idollar</a> had traced all the wires and annotated the\nmembranes with row &amp; column numbers in marker:</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9298.jpg\">\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9300.jpg\">\n\n<p>Just to be clear: These two are not my photos. I stand on the shoulders of\n<a href=\"https://deskthority.net/idollar-u6930/\">forum giants</a>. But, after awhile, I couldn&#39;t really read the\nhandwriting and started making mistakes. </p>\n<p>That&#39;s when I remembered <a href=\"https://github.com/tmk/tmk_keyboard#magic-commands\">the matrix debug mode in TMK</a>: After\nconfiguring just enough keys to enable it, I could just watch the debug\noutput to tell me the rows &amp; columns as I hit other keys.</p>\n<p>Thus equipped, I spent a Sunday morning over coffee mapping the keyboard:\nMethodically pressing keys, noting rows &amp; columns, and building up <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L34\">the KEYMAP\nmacro</a> that converts symbols for physical keys to logical matrix\npositions. Along the way, I also built up <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L54\">the initial\nkeymap</a> using that macro to assign keycodes to the physical\nkeys.</p>\n<h2 id=\"fitting-the-prototype\">Fitting the Prototype</h2>\n<p>After that, I had an initial stab at steps #2 &amp; #3 - the keyboard was pretty\nmuch working and I could start typing practically with it. But, because I was\nhacking on this from the couch, it was all super-awkward holding things\ntogether in my lap.</p>\n<p>I should mention that these ribbon connectors have short, fragile leads.\nThey&#39;re really meant for soldering into a PCB. They snap into the breadboard,\nbut just barely. They spring free at the slightest pressure - you know, like\nhooking up ribbons and moving the keyboard around. And, whenever I reinsert\nthem, invariably one pin or another gets bent up and then snaps off after the\n4th or 5th realignment. I&#39;m really glad I bought extras, because I&#39;m down to\nmy last two that still work.</p>\n<p>So, I got tired of things falling apart and started positioning my breadboard\ninto the case. Everything fit physically, but the parts were all in the wrong\nplace. With a sigh, I pulled everything out of the board, rewired it, and\nreassigned all the pins:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24742861610/in/dateposted-public/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24742861610_8c3c931768_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a></p>\n<p>That put the ribbon connectors in the right spots for the keyboard membranes\nto connect, as well as room for a USB connector I bought to loop around without\ntoo much bend. Oh, and I slightly rewired things again, because I discovered\nI&#39;d connected all the LEDs backward:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24945773791/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24945773791_b208614dd7_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a></p>\n<h2 id=\"my-keyboard-is-haunted\">My Keyboard is Haunted</h2>\n<p>After all the rewiring and reassigned pins, I fired things up again. This\ntime, I started getting mysterious spontaneous keystrokes. I thought it might\nbe a grounding issue with static electricity, because I could usually make it\nhappen by waving my hands over the keyboard. While a <a href=\"https://en.wikipedia.org/wiki/Theremin\">theremin</a>\nkeyboard might be fun, that&#39;s not actually what I was going for here.</p>\n<p>So, I ran a wire from the steel plate to the GND pin on the Teensy. That\ndidn&#39;t fix it.</p>\n<p>Finally, I realized that one of my new pins in use was D6 - and\nD6 is hardwired to an LED on the Teensy board. And, it so happens that LEDs\ncan do weird things when hooked up as an input - <a href=\"http://www.analog.com/library/analogdialogue/archives/48-08/raq_108.html\">such as detecting\nlight</a>. You know, maybe like the changing light from waving my\nhands over the keyboard.</p>\n<p>Thus, I was able to exorcise my keyboard ghost by bending up the pin at D6 to\ndisconnect it from the breadboard. Then, I ran a jumper over to D1 and\n<a href=\"https://github.com/lmorchard/tmk_keyboard/commit/f5b31e9d320d494a4d3fc75db614883b7225d332\">switched the pin assignments in the firmware</a>. No more spontaneous\nkeypresses.</p>\n<h2 id=\"secrets-of-2kro-matrices\">Secrets of 2KRO Matrices</h2>\n<p>After typing a bit, I realized I couldn&#39;t get certain key combinations to work -\nShift-T, for example.</p>\n<p>Now, I know that the IBM Model M isn&#39;t <a href=\"https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\">an NKRO keyboard</a>. That is, you\ncannot press any arbitrary combination of keys together. But, of course, a\nkeyboard is useless if you can&#39;t press at least <em>some</em> keys together - like, say,\nShift and T. In fact, I&#39;ve read that the IBM Model M is described as 2KRO -\ni.e. two-key rollover.</p>\n<p>So, I knew that the original controller supported Shift-T. Looking in the\nmatrix debug output, I noticed that I couldn&#39;t press any 2 keys in the same\nrow together - that included Left Shift and T.</p>\n<p>Scratching my head, I noticed that the membrane matrix had some interesting\nproperties: Pretty much all the modifier keys were in different columns than\nthe other keys I wanted to press along with them. So, my problem might be\nsolved by rotating the matrix - that is, <a href=\"https://github.com/lmorchard/tmk_keyboard/commit/afc4d0f23be23e8c69bc1dfbe127898a7fe82db7\">turning rows into columns and columns\ninto rows</a>.</p>\n<p>I don&#39;t entirely have my head wrapped around the design of the Model M\nmembrane layout, but I think this is part of it: After I rotated the matrix,\nthere are 8 columns per row. As far as I can tell, only one key can be pressed\nper row - so that means any given key has 7 others that cannot be pressed at\nthe same time. Practical key rollover, then, is implemented by putting keys\nyou&#39;re likely to press together in different rows.</p>\n<p>For example, modifiers like Left Shift and Right Shift share a row, and so\ncannot be pressed together. But, Left Shift &amp; T are found in different rows\nand can work together. However, some of the letters in the QWER &amp; ASDF cluster\nshare rows, so that can be trouble for gaming - directional keypresses and\nsuchlike might cancel each other out in the heat of the keymashing moment.\nBut, since this keyboard harkens to an era where keys were more for typing\nwords than for controlling games, the tradeoff makes sense.</p>\n<h2 id=\"the-result\">The Result</h2>\n<p><a data-flickr-embed=\"true\" data-header=\"false\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24422592514/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz\" title=\"IBM Model M keyboard with USB controller\"><img class=\"inset wide right\" id=\"thumbnail\" src=\"/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg\" alt=\"IBM Model M keyboard with USB controller\"></a></p>\n<p>So, after all the above and a few more random adventures in C programming,\nthis IBM Model M keyboard is now sitting on my desk with a USB cable plugged\ninto it.</p>\n<p>I ordered <a href=\"http://www.pckeyboard.com/page/category/Buttons\">some custom replacement keycaps from Unicomp</a> to reflect\nsome of the remapped keys I implemented - i.e. media control, Command (⌘),\nCaps Lock replaced by Ctrl. </p>\n<p>I&#39;ve been having some clicky-clacky fun with this thing, and it&#39;s been easy to\nreconfigure &amp; reflash along the way as needed. Experience with <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a> to\nconfigure my previous project really came in handy.</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24959916191/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M with USB controller upgrade\"><img class=\"inset wide left\" src=\"/uploads/2016/modelm-controller/24959916191_bfe3246ded_z.jpg\" alt=\"IBM Model M with USB controller upgrade\"></a></p>\n<p>The one part that could be considered irreversible with this project is that I\nended up drilling two small holes in the back to secure the USB port. I&#39;m just\nslightly sad about that. But, I guess if I ever sell this thing on eBay, I&#39;ll\ntry talking up the benefits of the new USB controller.</p>\n<p>But, otherwise, if I wanted to undo all this work, I could just open it back\nup and plonk the original controller back in. I&#39;ve currently got that board\nsitting in an anti-static bag in a drawer, taking a rest after decades of\nservice.\n<br style=\"clear: both\"></p>\n<h2 id=\"next-steps\">Next Steps</h2>\n<h3 id=\"breadboard-to-pcb\">Breadboard to PCB</h3>\n<p>Like I mentioned before, those ribbon connectors are fragile and meant to be\nsoldered to a PCB. I&#39;d also like to learn how to design PCBs, so this seems\nlike a super easy project to start with. The only things needed are places to\nsolder the connectors, a socket for a Teensy, and traces connecting everything\nproperly. I wouldn&#39;t even need to learn SMD soldering yet!</p>\n<h3 id=\"bluetooth\">Bluetooth</h3>\n<p>I saw <a href=\"https://learn.adafruit.com/convert-your-model-m-keyboard-to-bluetooth-with-bluefruit-ez-key-hid/overview\">a project on Adafruit to add Bluetooth support to an IBM Model\nM</a>. But, that was using the original controller board and\nconverting from PS/2. With my controller, I could hook a Bluetooth module\ndirectly up to Teensy pins and talk to it from <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a>. That should be\ninteresting.</p>\n<h3 id=\"alphanumeric-display\">Alphanumeric Display</h3>\n<p>I noticed that a backlit alphanumeric LCD display is pretty much the exact\ndimensions of the Num Lock / Scroll Lock / Caps Lock LED area on the keyboard\ncase. It would definitely be a destructive change, but it might be kind of\ncool to replace that section with a text readout. I&#39;m not really sure what it\nwould display, but it could be a fun little project like a retro-DIY version\nof <a href=\"http://amzn.to/1TuflVD\">a Logitech G15 keyboard</a>.</p>\n<h3 id=\"reset-button\">Reset button</h3>\n<p>Flashing the Teensy firmware usually requires pushing a button on the board.\nThere are also a couple of pins on the board that do the same when shorted, so\nI threaded some wires out of the case to do that. It&#39;s ugly.</p>\n<p>The <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a> firmware also supports a key combination that does the same thing,\nwhich would let me just toss the wires. But, after once or twice where I\nlocked the firmware and had to reopen the case, I don&#39;t think I can totally go\nwithout a reset button.</p>\n<p>So, I&#39;m considering where and how to mount an external reset / programming\nbutton that doesn&#39;t require any more holes to be drilled or anything else\ndestructive.</p>\n<h3 id=\"60-model-m\">60% Model M</h3>\n<p>On the topic of destructive changes: <a href=\"https://geekhack.org/index.php?action=profile;u=3412\">hasu</a>, the author of the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a>\nfirmware, <a href=\"https://geekhack.org/index.php?action=profile;u=3412\">literally carved up</a> an IBM Model M keyboard and <a href=\"https://geekhack.org/index.php?topic=29483.0\">reduced it\nto a 60% layout</a> more comparable to a Happy Hacking Keyboard.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/yROEN.jpg\">\n\n<p>That project took a bit of work reconstituting the membrane using copper tape\nand conductive ink, as well as work to join the plastic bits back together.\nBut, the electronics end up being simpler after discarding piles of keys.\nI know it would be a certain kind of sacriledge to Model M lovers, but I might\nattempt it once I get tired of just how huge this keyboard is on my desk.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This was a pretty fun project, and a bit of a step up from the PS/2 converter\nI just built. I learned a bit about the innards of this keyboard, and I&#39;ve got\nsome decent next steps to pursue in the future. All of this feels like it&#39;s\ngiving me some good foundational know-how for when I finally get all the parts\ntogether to try building my own DIY keyboard from the ground up.</p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nIn my [previous post][keyboard-hacking], I wrote about my initial forays into\nkeyboard hacking. I got my hands on a few IBM Model M keyboards, and built a\nPS/2-to-USB converter with a [Teensy 2.0][teensy] so I could use it with my\nMacBook Pro after remapping some keys via the [TMK keyboard firmware][tmk].\n\nThat was a pretty rewarding little hack. But, then, I found [Lawrence Wu's\nnotes][original-notes] on replacing the original controller inside the IBM\nModel M.  In a nutshell, it turns out you can find ribbon connectors that work\nwith the Model M membrane layers and fit on a breadboard. That makes it easy\nto build - and reversible if I decide to return the keyboard to its original\nstate.\n\n## Initial Prototype\n\nSo, I ordered a few of the [16-pin ribbon connectors from Mouser][connector]\nand a [Teensy 2.0++][teensy-plus]. My first stab at wiring things up was\npretty simple:\n\n[connector]: http://www.mouser.com/ProductDetail/TE-Connectivity/6-520315-6/?qs=sGAEpiMZZMvYKGyZxp8jxkA16bSpREuh\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24987051026/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k\" title=\"Original prototype for replacement IBM Model M keyboard controller\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24987051026_0d0b1ac2a9_z.jpg\" alt=\"Original prototype for replacement IBM Model M keyboard controller\"></a>\n\nThe [Teensy 2.0++][teensy-plus] has 20 pins per side, and I needed 16 for the\nfirst ribbon. So, it was convenient to just plonk both onto the breadboard and\ntake advantage of the built-in conductors. That's also why I upgraded from a\n[Teensy 2.0][teensy]: I needed more pins. The second ribbon needed\n8 pins, so I cut some lengths of [hook-up wire][hookup] to keep things neat\nand ran the connections over.\n\n[tmk]: https://geekhack.org/index.php?topic=41989.0\n[hookup]: http://amzn.to/1oCuCJ1\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24684318539/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"5.5mm nut driver needed for opening IBM Model M keyboards\"><img class=\"inset wide right\" src=\"/uploads/2016/modelm-controller/24684318539_4dde739235_n.jpg\" alt=\"5.5mm nut driver needed for opening IBM Model M keyboards\"></a>\n\n## Driving Me Nuts\n\nThen, I wanted to get inside the keyboard to start tinkering. As it turns out,\nopening up an IBM Model M is annoying: None of the tools I had on hand could\ndo it. \n  \nThe case is assembled using screws with 5.5mm nut heads, rather than\nsomething like a Phillips-head screw. And, the screws are down in deep wells\ntoo narrow to fit any of the socket wrench heads I had on hand.\n\nSo, I had to order [a 5.5mm nut driver][nut-driver] with a very slim head.\nReading [the reviews][reviews], I can see I'm not alone in this.\n\nWhile that made its way to my house, I'd read that [some folks used a lighter\nand a pen][driver-hack] to form a makeshift nut driver. That was a terrible\nidea, but it worked. In hindsight, I really should have just waited for the\ndriver to show up. But, I was determined to get the thing open while I had\ntime to play with it.\n\n[reviews]: http://www.amazon.com/Dynamite-2803-Nut-Driver-5-5mm/product-reviews/B000BQ4XP6/ref=cm_cr_dp_see_all_summary?ie=UTF8&showViewpoints=1&sortBy=helpful\n[driver-hack]: https://deskthority.net/workshop-f7/model-m-disassembly-t1960.html#p34013\n\n## The Original Controller\n\nAnd, once open, this is the board I found inside:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/25046846995/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M original controller board\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/25046846995_c8dab2484c_z.jpg\" alt=\"IBM Model M original controller board\"></a>\n\nI should have taken a picture of it in place, but oh well. The board has a\ngrounding strap that was screwed down to the steel plate under the keys.\nBeyond that, it just fit into plastic brackets in the case and wasn't\notherwise fastened down. And, in a weird coincidence, the board was almost the\nexact same dimensions as my breadboard. Maybe these things are standard sizes?\n\n## Mapping the Membranes\n\nWith the keyboard membrane ribbons free from the original board, I hooked them up to\nmy prototype. From there, I wanted to start making the keys send the right\nsignals. There are three parts to this:\n\n1. Mapping Teensy pins to a 16 x 8 switch matrix\n2. Mapping the 16 x 8 switch matrix to physical key locations\n3. Mapping physical key locations to USB key codes\n\nTo accomplish #1, [I set up pins in the firmware][pins]. The way this works is\nthat the rows are set to input and the columns are set to output. By pulsing a\ncurrent for each column in turn and reading the rows, you can build up a\nmatrix of switch state where the circuit is completed. This is called\n[scanning the keyboard][scanning]. There are problems in this process - [like\nghosting][ghosting] - but I'll skip describing them for now.\n\n[scanning]: https://www.massdrop.com/article/introduction-to-keyboard-programming\n[ghosting]: http://blog.komar.be/how-to-make-a-keyboard-the-matrix/\n\nTo double check that I had my matrix working, I threw together an initial\nkeymap and set every key to emit \"1\".  I tapped each key and saw a \"1\" in my\nnotepad. Hooray, it worked! At least, electrically speaking.\n\n[pins]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/matrix.c#L163\n\nFor step #2, I started googling for IBM Model M membrane matrix maps. Surely\nsomeone had done this before! Well, [it turns out someone had][matrix-map].\nDeskthority user [idollar][] had traced all the wires and annotated the\nmembranes with row & column numbers in marker:\n\n[idollar]: https://deskthority.net/idollar-u6930/\n[matrix-map]: https://deskthority.net/workshop-f7/universal-model-m-controller-t9820.html#p207736\n\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9298.jpg\">\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9300.jpg\">\n\nJust to be clear: These two are not my photos. I stand on the shoulders of\n[forum giants][idollar]. But, after awhile, I couldn't really read the\nhandwriting and started making mistakes. \n\nThat's when I remembered [the matrix debug mode in TMK][matrix-debug]: After\nconfiguring just enough keys to enable it, I could just watch the debug\noutput to tell me the rows & columns as I hit other keys.\n\n[matrix-debug]: https://github.com/tmk/tmk_keyboard#magic-commands\n\nThus equipped, I spent a Sunday morning over coffee mapping the keyboard:\nMethodically pressing keys, noting rows & columns, and building up [the KEYMAP\nmacro][keymap-macro] that converts symbols for physical keys to logical matrix\npositions. Along the way, I also built up [the initial\nkeymap][keymap-plain] using that macro to assign keycodes to the physical\nkeys.\n\n[keymap-macro]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L34\n[keymap-plain]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L54\n\n## Fitting the Prototype\n\nAfter that, I had an initial stab at steps #2 & #3 - the keyboard was pretty\nmuch working and I could start typing practically with it. But, because I was\nhacking on this from the couch, it was all super-awkward holding things\ntogether in my lap.\n\nI should mention that these ribbon connectors have short, fragile leads.\nThey're really meant for soldering into a PCB. They snap into the breadboard,\nbut just barely. They spring free at the slightest pressure - you know, like\nhooking up ribbons and moving the keyboard around. And, whenever I reinsert\nthem, invariably one pin or another gets bent up and then snaps off after the\n4th or 5th realignment. I'm really glad I bought extras, because I'm down to\nmy last two that still work.\n\nSo, I got tired of things falling apart and started positioning my breadboard\ninto the case. Everything fit physically, but the parts were all in the wrong\nplace. With a sigh, I pulled everything out of the board, rewired it, and\nreassigned all the pins:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24742861610/in/dateposted-public/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24742861610_8c3c931768_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a>\n\nThat put the ribbon connectors in the right spots for the keyboard membranes\nto connect, as well as room for a USB connector I bought to loop around without\ntoo much bend. Oh, and I slightly rewired things again, because I discovered\nI'd connected all the LEDs backward:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24945773791/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24945773791_b208614dd7_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a>\n\n## My Keyboard is Haunted\n\nAfter all the rewiring and reassigned pins, I fired things up again. This\ntime, I started getting mysterious spontaneous keystrokes. I thought it might\nbe a grounding issue with static electricity, because I could usually make it\nhappen by waving my hands over the keyboard. While a [theremin][]\nkeyboard might be fun, that's not actually what I was going for here.\n\n[theremin]: https://en.wikipedia.org/wiki/Theremin\n\nSo, I ran a wire from the steel plate to the GND pin on the Teensy. That\ndidn't fix it.\n\nFinally, I realized that one of my new pins in use was D6 - and\nD6 is hardwired to an LED on the Teensy board. And, it so happens that LEDs\ncan do weird things when hooked up as an input - [such as detecting\nlight][photodiode]. You know, maybe like the changing light from waving my\nhands over the keyboard.\n\nThus, I was able to exorcise my keyboard ghost by bending up the pin at D6 to\ndisconnect it from the breadboard. Then, I ran a jumper over to D1 and\n[switched the pin assignments in the firmware][d0-pin]. No more spontaneous\nkeypresses.\n\n[photodiode]: http://www.analog.com/library/analogdialogue/archives/48-08/raq_108.html\n[d0-pin]: https://github.com/lmorchard/tmk_keyboard/commit/f5b31e9d320d494a4d3fc75db614883b7225d332\n\n## Secrets of 2KRO Matrices\n\nAfter typing a bit, I realized I couldn't get certain key combinations to work -\nShift-T, for example.\n\nNow, I know that the IBM Model M isn't [an NKRO keyboard][nkro]. That is, you\ncannot press any arbitrary combination of keys together. But, of course, a\nkeyboard is useless if you can't press at least *some* keys together - like, say,\nShift and T. In fact, I've read that the IBM Model M is described as 2KRO -\ni.e. two-key rollover.\n\nSo, I knew that the original controller supported Shift-T. Looking in the\nmatrix debug output, I noticed that I couldn't press any 2 keys in the same\nrow together - that included Left Shift and T.\n\nScratching my head, I noticed that the membrane matrix had some interesting\nproperties: Pretty much all the modifier keys were in different columns than\nthe other keys I wanted to press along with them. So, my problem might be\nsolved by rotating the matrix - that is, [turning rows into columns and columns\ninto rows][matrix-swap].\n\nI don't entirely have my head wrapped around the design of the Model M\nmembrane layout, but I think this is part of it: After I rotated the matrix,\nthere are 8 columns per row. As far as I can tell, only one key can be pressed\nper row - so that means any given key has 7 others that cannot be pressed at\nthe same time. Practical key rollover, then, is implemented by putting keys\nyou're likely to press together in different rows.\n\nFor example, modifiers like Left Shift and Right Shift share a row, and so\ncannot be pressed together. But, Left Shift & T are found in different rows\nand can work together. However, some of the letters in the QWER & ASDF cluster\nshare rows, so that can be trouble for gaming - directional keypresses and\nsuchlike might cancel each other out in the heat of the keymashing moment.\nBut, since this keyboard harkens to an era where keys were more for typing\nwords than for controlling games, the tradeoff makes sense.\n\n[nkro]: https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\n[matrix-swap]: https://github.com/lmorchard/tmk_keyboard/commit/afc4d0f23be23e8c69bc1dfbe127898a7fe82db7\n\n## The Result\n\n<a data-flickr-embed=\"true\" data-header=\"false\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24422592514/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz\" title=\"IBM Model M keyboard with USB controller\"><img class=\"inset wide right\" id=\"thumbnail\" src=\"/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg\" alt=\"IBM Model M keyboard with USB controller\"></a>\n\nSo, after all the above and a few more random adventures in C programming,\nthis IBM Model M keyboard is now sitting on my desk with a USB cable plugged\ninto it.\n\nI ordered [some custom replacement keycaps from Unicomp][unicomp] to reflect\nsome of the remapped keys I implemented - i.e. media control, Command (⌘),\nCaps Lock replaced by Ctrl. \n\nI've been having some clicky-clacky fun with this thing, and it's been easy to\nreconfigure & reflash along the way as needed. Experience with [TMK][] to\nconfigure my previous project really came in handy.\n\n[unicomp]: http://www.pckeyboard.com/page/category/Buttons\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24959916191/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M with USB controller upgrade\"><img class=\"inset wide left\" src=\"/uploads/2016/modelm-controller/24959916191_bfe3246ded_z.jpg\" alt=\"IBM Model M with USB controller upgrade\"></a>\n\nThe one part that could be considered irreversible with this project is that I\nended up drilling two small holes in the back to secure the USB port. I'm just\nslightly sad about that. But, I guess if I ever sell this thing on eBay, I'll\ntry talking up the benefits of the new USB controller.\n\nBut, otherwise, if I wanted to undo all this work, I could just open it back\nup and plonk the original controller back in. I've currently got that board\nsitting in an anti-static bag in a drawer, taking a rest after decades of\nservice.\n<br style=\"clear: both\">\n\n[teensy]: https://www.pjrc.com/store/teensy.html\n[teensy-plus]: https://www.pjrc.com/store/teensypp.html\n[nut-driver]: http://amzn.to/1RgjN8k\n[keyboard-hacking]: http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\n[original-notes]: https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\n[photo-tag]: https://www.flickr.com/photos/tags/modelmcontroller\n\n## Next Steps\n\n### Breadboard to PCB\n\nLike I mentioned before, those ribbon connectors are fragile and meant to be\nsoldered to a PCB. I'd also like to learn how to design PCBs, so this seems\nlike a super easy project to start with. The only things needed are places to\nsolder the connectors, a socket for a Teensy, and traces connecting everything\nproperly. I wouldn't even need to learn SMD soldering yet!\n\n### Bluetooth\n\nI saw [a project on Adafruit to add Bluetooth support to an IBM Model\nM][Adafruit-Bluetooth]. But, that was using the original controller board and\nconverting from PS/2. With my controller, I could hook a Bluetooth module\ndirectly up to Teensy pins and talk to it from [TMK][]. That should be\ninteresting.\n\n[adafruit-bluetooth]: https://learn.adafruit.com/convert-your-model-m-keyboard-to-bluetooth-with-bluefruit-ez-key-hid/overview\n\n### Alphanumeric Display\n\nI noticed that a backlit alphanumeric LCD display is pretty much the exact\ndimensions of the Num Lock / Scroll Lock / Caps Lock LED area on the keyboard\ncase. It would definitely be a destructive change, but it might be kind of\ncool to replace that section with a text readout. I'm not really sure what it\nwould display, but it could be a fun little project like a retro-DIY version\nof [a Logitech G15 keyboard][g15].\n\n[g15]: http://amzn.to/1TuflVD\n\n### Reset button\n\nFlashing the Teensy firmware usually requires pushing a button on the board.\nThere are also a couple of pins on the board that do the same when shorted, so\nI threaded some wires out of the case to do that. It's ugly.\n\nThe [TMK][] firmware also supports a key combination that does the same thing,\nwhich would let me just toss the wires. But, after once or twice where I\nlocked the firmware and had to reopen the case, I don't think I can totally go\nwithout a reset button.\n\nSo, I'm considering where and how to mount an external reset / programming\nbutton that doesn't require any more holes to be drilled or anything else\ndestructive.\n\n### 60% Model M\n\nOn the topic of destructive changes: [hasu][], the author of the [TMK][]\nfirmware, [literally carved up][hbkb2] an IBM Model M keyboard and [reduced it\nto a 60% layout][hbkb] more comparable to a Happy Hacking Keyboard.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/yROEN.jpg\">\n\n[hasu]: https://geekhack.org/index.php?action=profile;u=3412\n[hbkb]: https://geekhack.org/index.php?topic=29483.0\n[hbkb2]: https://geekhack.org/index.php?action=profile;u=3412\n\nThat project took a bit of work reconstituting the membrane using copper tape\nand conductive ink, as well as work to join the plastic bits back together.\nBut, the electronics end up being simpler after discarding piles of keys.\nI know it would be a certain kind of sacriledge to Model M lovers, but I might\nattempt it once I get tired of just how huge this keyboard is on my desk.\n\n## Conclusion\n\nThis was a pretty fun project, and a bit of a step up from the PS/2 converter\nI just built. I learned a bit about the innards of this keyboard, and I've got\nsome decent next steps to pursue in the future. All of this feels like it's\ngiving me some good foundational know-how for when I finally get all the parts\ntogether to try building my own DIY keyboard from the ground up.\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/21/modelm-controller",
    "thumbnail": "/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg",
    "summary": "<p><strong>TL;DR</strong>: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.</p>\n"
  },
  {
    "title": "Keyboard hacking seems like fun",
    "tags": [
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "year": "2016",
    "month": "02",
    "day": "06",
    "isDir": false,
    "slug": "keyboard-hacking",
    "date": "2016-02-06T12:00:00.000Z",
    "postName": "2016-02-06-keyboard-hacking",
    "html": "<p><strong>TL;DR</strong>: I think I&#39;ve caught the DIY keyboard hacking bug, and I&#39;ll probably\nend up building something weird.</p>\n<!--more-->\n\n<p>I love tinkering and I love keyboards. But, I&#39;d never really tinkered with my\nkeyboards - at least, not beyond <a href=\"http://blog.lmorchard.com/2006/07/31/i-heart-my-filthy-happy-hacking-keyboard/\">disassembling &amp; cleaning them</a>.\nI&#39;d seen a smattering of crowdfunded projects over the years like the\n<a href=\"https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/\">ErgoDox</a> and <a href=\"http://shop.keyboard.io/\">Keyboardio</a>. But, those seemed like complex design\n&amp; manufacturing efforts - not like, you know, something I&#39;d do for fun.</p>\n<p>But then, last summer, I ran across <a href=\"https://www.massdrop.com/\">Massdrop</a> and saw the <a href=\"https://www.massdrop.com/buy/infinity-keyboard-kit\">Infinity 60%\nKeyboard Kit</a>. From there, I ran across &quot;<a href=\"https://www.massdrop.com/article/introduction-to-keyboard-programming\">Introduction to Keyboard\nProgramming</a>&quot; and some rusty gears turned over in my brain. I\ndiscovered <a href=\"https://geekhack.org/\">geekhack</a> and <a href=\"https://deskthority.net/\">Deskthority</a> and fell down a dangerous\nrabbit hole of <a href=\"https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\">switches</a> and <a href=\"https://geekhack.org/index.php?board=80.0\">caps</a>, <a href=\"https://geekhack.org/index.php?topic=47133\">layouts</a> and <a href=\"https://deskthority.net/workshop-f7/thkb-tiny-hacking-keyboard-40-t6455.html\">plates</a>,\n<a href=\"https://www.pjrc.com/teensy/\">microcontrollers</a> and <a href=\"https://geekhack.org/index.php?topic=41989.0\">firmware</a>.</p>\n<p>Turns out there are a bunch of folks doing this stuff as a hobby, along with a\nniche industry to support it.</p>\n<p>After a few months of absorbing information and spectating on projects in\nforums, it occurred to me that this did in fact seem like something I&#39;d have\nfun doing. But, rather than just dive in, I decided to start small:</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24832952956/\"><img class=\"fullwidth\" id=\"thumbnail\" src=\"/uploads/2016/teensy-ps2-adapter/minikey.jpg\"></a></p>\n<p>Last weekend, I ran to my local <a href=\"http://www.microcenter.com/site/stores/madison-heights.aspx\">Micro Center</a> and picked up a <a href=\"https://www.pjrc.com/teensy/\">Teensy\n2.0</a>. That seems to be the microcontroller board a lot of keyboard\nprojects have been using, so I figured getting acquainted with it would be\nhandy. After the traditional &quot;hello world&quot; project of <a href=\"https://www.pjrc.com/teensy/tutorial.html\">getting an LED to\nblink</a>, I wired up a pile of buttons on a breadboard and <a href=\"https://www.pjrc.com/teensy/td_keyboard.html\">built the\nfirmware to my first DIY USB keyboard</a>.</p>\n<p>Okay, so it was just a tutorial and no special effort on my part. But, the\nprocess was super easy, so the hacking possibilities started piling up in my\nhead.</p>\n<p>Then, I discovered the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK keyboard firmware</a> on the\n<a href=\"https://geekhack.org/\">geekhack</a> forums. Basically, all the software work had been done for me.\nThe TMK firmware is a ready-made pile of code for translating from basically any\nmatrix of switches or wire protocol to USB HID keyboard codes - complete with\nsupport for flexible key maps, mouse control, function-key layers, macros, and\na bunch of other things. </p>\n<p>My little 10-key breadboard toy wasn&#39;t all that practical. But, I discovered\nthat the TMK firmware also supported building keyboard <em>converters</em>. Of\nparticular interest was the <a href=\"https://github.com/tmk/tmk_keyboard/blob/master/converter/ps2_usb/README.md\">PS/2 to USB keyboard converter</a>, since I\njust happen to have a pile of older PS/2 keyboards lying around doing nothing.</p>\n<p>The converter only took 4 wires, so I sacrificed a PS/2 cable from the back of\na drawer and came up with this:</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24832952956/\"><img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/adapter.jpg\"></a></p>\n<p>Coincidentally, the day after I built this, I got some IBM Model M keyboards\nfrom <a href=\"https://nuxx.net/blog/\">a friend</a> of mine. I&#39;ve been wanting to fill my office with the\nsound of buckling springs for awhile, now. </p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24685464831/\"><img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/modelm.jpg\"></a></p>\n<p>This is all hooked up to a modern MacBook Pro, but the IBM Model M is\ndecidedly lacking in <a href=\"https://en.wikipedia.org/wiki/Command_key\">Command (⌘) keys</a>. So, the DIY converter\nproved its worth immediately. </p>\n<p>I put together <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/lmo-model-mac/converter/ps2_usb/keymap_modelmac.c\">my own simple keymap</a> and spent a day with it,\ntweaking as I went.  I set up <a href=\"https://github.com/alloy/kicker\">a file watcher</a> to rebuild the\nfirmware whenever I changed the source. Along with that, the <a href=\"https://www.pjrc.com/teensy/loader.html\">Teensy\nLoader</a> has an &quot;auto&quot; mode which reprograms the Teensy whenever I hit\nthe reset button. </p>\n<p>At this point, I&#39;ve replaced the Caps Lock key with Control and changed Alt keys\nto Command keys.  Then, I turned the Print Screen / Caps Lock / Pause trio\ninto volume control keys. After that, F10, F11, and F12 were pressed into\nservice as previous, next, &amp; pause buttons for music. It was all a bit fiddly,\nbut it&#39;s the kind of thing I enjoy.</p>\n<p>Overall, this all feels like a nice intro into a new hobby. Next, I&#39;m\nconsidering <a href=\"https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\">replacing the IBM Model M keyboard controller</a>\naltogether, which will embed the Teensy right in the case. </p>\n<p>After that, I&#39;m tempted to turn my screwdriver on that other keyboard on my\ndesk - the Happy Hacking Keyboard Professional. There&#39;s a <a href=\"https://geekhack.org/index.php?topic=12047.0\">Teensy-based\nalternative controller</a> option for it, also using the TMK firmware.</p>\n<p>Once I feel comfortable with all that, it might be time to build something of\nmy own! <a href=\"http://www.keyboard-layout-editor.com/##@_name=noisy%20fat%20hacker%20keyboard&amp;author=lmorchard&amp;switchMount=cherry&amp;switchBrand=cherry&amp;plate:true%3B&amp;@=Esc&amp;=!%0A1&amp;=%2F@%0A2&amp;=%23%0A3&amp;=$%0A4&amp;=%25%0A5&amp;=%5E%0A6&amp;=%2F&amp;%0A7&amp;=*%0A8&amp;=%28%0A9&amp;=%29%0A0&amp;=%2F_%0A-&amp;=+%0A%2F=&amp;=%7C%0A%5C&amp;=~%0A%60&amp;_x:0.25%3B&amp;=Insert&amp;=Home&amp;=PgUp%3B&amp;@_w:1.5%3B&amp;=Tab&amp;=Q&amp;=W&amp;=E&amp;=R&amp;=T&amp;=Y&amp;=U&amp;=I&amp;=O&amp;=P&amp;=%7B%0A%5B&amp;=%7D%0A%5D&amp;_a:0&amp;w:1.5%3B&amp;=Delete%0A%0A%0A%0ABS&amp;_x:0.25&amp;a:4%3B&amp;=Delete&amp;=End&amp;=PgDn%3B&amp;@_w:1.75%3B&amp;=Control&amp;=A&amp;=S&amp;=D&amp;=F&amp;=G&amp;=H&amp;=J&amp;=K&amp;=L&amp;=%2F:%0A%2F%3B&amp;=%22%0A%27&amp;_w:2.25%3B&amp;=Enter&amp;_x:0.25%3B&amp;=Op1&amp;=Op2&amp;=Op3%3B&amp;@_w:2.25%3B&amp;=Shift&amp;=Z&amp;=X&amp;=C&amp;=V&amp;=B&amp;=N&amp;=M&amp;=%3C%0A,&amp;=%3E%0A.&amp;=%3F%0A%2F%2F&amp;_w:2.75%3B&amp;=Shift&amp;_x:1.25%3B&amp;=%E2%86%91%3B&amp;@_w:1.25%3B&amp;=Fn&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-logo-apple-outline%27%3E%3C%2F%2Fi%3E&amp;_a:7&amp;w:6.25%3B&amp;=&amp;_a:4&amp;w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-logo-apple%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-Hamburger-Menu%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=Fn&amp;_x:0.25%3B&amp;=%E2%86%90&amp;=%E2%86%93&amp;=%E2%86%92\">I&#39;ve got a 75-key layout I&#39;m mulling over.</a> If I end up liking\nthat, I can get a case &amp; mounting plate <a href=\"http://builder.swillkb.com/\">designed</a> &amp;\n<a href=\"https://www.ponoko.com/\">fabricated</a>. Then, I can buy all the <a href=\"https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\">switches</a> and\n<a href=\"http://amzn.to/1UUHUu8\">diodes</a>. And last, but not least, I&#39;ll have to design a circuit board &amp;\n<a href=\"https://oshpark.com/\">get that fabricated</a>.</p>\n<p>Or, if I really want to go for that handcrafted artisan experience - which I\njust might, because I&#39;m a glutton for punishment - I&#39;ve got something like\nthis in my future:</p>\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/MrokZ1afnVg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I think I've caught the DIY keyboard hacking bug, and I'll probably\nend up building something weird.\n\n<!--more-->\n\nI love tinkering and I love keyboards. But, I'd never really tinkered with my\nkeyboards - at least, not beyond [disassembling & cleaning them][hhkbclean].\nI'd seen a smattering of crowdfunded projects over the years like the\n[ErgoDox][] and [Keyboardio][]. But, those seemed like complex design\n& manufacturing efforts - not like, you know, something I'd do for fun.\n\nBut then, last summer, I ran across [Massdrop][] and saw the [Infinity 60%\nKeyboard Kit][infinity60]. From there, I ran across \"[Introduction to Keyboard\nProgramming][kbprog]\" and some rusty gears turned over in my brain. I\ndiscovered [geekhack][] and [Deskthority][] and fell down a dangerous\nrabbit hole of [switches][] and [caps][], [layouts][] and [plates][],\n[microcontrollers][teensy] and [firmware][].\n\nTurns out there are a bunch of folks doing this stuff as a hobby, along with a\nniche industry to support it.\n\nAfter a few months of absorbing information and spectating on projects in\nforums, it occurred to me that this did in fact seem like something I'd have\nfun doing. But, rather than just dive in, I decided to start small:\n\n[kits]: http://www.geekhackers.org/products/jd40-jdcarpe-s-40-keyboard-kit-sorbothane-titanium-all-profits-go-to-the-nathan-j-walters-foundation-rip-smallfry\n[firmware]: https://geekhack.org/index.php?topic=41989.0\n[teensy]: https://www.pjrc.com/teensy/\n[plates]: https://deskthority.net/workshop-f7/thkb-tiny-hacking-keyboard-40-t6455.html\n[layouts]: https://geekhack.org/index.php?topic=47133\n[caps]: https://geekhack.org/index.php?board=80.0\n[switches]: https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\n[Deskthority]: https://deskthority.net/\n[geekhack]: https://geekhack.org/\n[infinity60]: https://www.massdrop.com/buy/infinity-keyboard-kit\n[keyboardio]: http://shop.keyboard.io/\n[ergodox]: https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/\n[key64]: http://www.key64.org/\n[hhkbclean]: http://blog.lmorchard.com/2006/07/31/i-heart-my-filthy-happy-hacking-keyboard/\n[kbprog]: https://www.massdrop.com/article/introduction-to-keyboard-programming\n[massdrop]: https://www.massdrop.com/\n\n[<img class=\"fullwidth\" id=\"thumbnail\" src=\"/uploads/2016/teensy-ps2-adapter/minikey.jpg\">](https://www.flickr.com/photos/deusx/24832952956/)\n\nLast weekend, I ran to my local [Micro Center][] and picked up a [Teensy\n2.0][teensy]. That seems to be the microcontroller board a lot of keyboard\nprojects have been using, so I figured getting acquainted with it would be\nhandy. After the traditional \"hello world\" project of [getting an LED to\nblink][blinky], I wired up a pile of buttons on a breadboard and [built the\nfirmware to my first DIY USB keyboard][keyboardtut].\n\nOkay, so it was just a tutorial and no special effort on my part. But, the\nprocess was super easy, so the hacking possibilities started piling up in my\nhead.\n\nThen, I discovered the [TMK keyboard firmware][firmware] on the\n[geekhack][] forums. Basically, all the software work had been done for me.\nThe TMK firmware is a ready-made pile of code for translating from basically any\nmatrix of switches or wire protocol to USB HID keyboard codes - complete with\nsupport for flexible key maps, mouse control, function-key layers, macros, and\na bunch of other things. \n\nMy little 10-key breadboard toy wasn't all that practical. But, I discovered\nthat the TMK firmware also supported building keyboard *converters*. Of\nparticular interest was the [PS/2 to USB keyboard converter][ps2usb], since I\njust happen to have a pile of older PS/2 keyboards lying around doing nothing.\n\nThe converter only took 4 wires, so I sacrificed a PS/2 cable from the back of\na drawer and came up with this:\n\n[ps2usb]: https://github.com/tmk/tmk_keyboard/blob/master/converter/ps2_usb/README.md\n[keyboardtut]: https://www.pjrc.com/teensy/td_keyboard.html\n[blinky]: https://www.pjrc.com/teensy/tutorial.html\n[micro center]: http://www.microcenter.com/site/stores/madison-heights.aspx\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/adapter.jpg\">](https://www.flickr.com/photos/deusx/24832952956/)\n\nCoincidentally, the day after I built this, I got some IBM Model M keyboards\nfrom [a friend][nuxx] of mine. I've been wanting to fill my office with the\nsound of buckling springs for awhile, now. \n\n[nuxx]: https://nuxx.net/blog/\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/modelm.jpg\">](https://www.flickr.com/photos/deusx/24685464831/)\n\nThis is all hooked up to a modern MacBook Pro, but the IBM Model M is\ndecidedly lacking in [Command (⌘) keys][command]. So, the DIY converter\nproved its worth immediately. \n\nI put together [my own simple keymap][lmotmk] and spent a day with it,\ntweaking as I went.  I set up [a file watcher][kicker] to rebuild the\nfirmware whenever I changed the source. Along with that, the [Teensy\nLoader][loader] has an \"auto\" mode which reprograms the Teensy whenever I hit\nthe reset button. \n\nAt this point, I've replaced the Caps Lock key with Control and changed Alt keys\nto Command keys.  Then, I turned the Print Screen / Caps Lock / Pause trio\ninto volume control keys. After that, F10, F11, and F12 were pressed into\nservice as previous, next, & pause buttons for music. It was all a bit fiddly,\nbut it's the kind of thing I enjoy.\n\nOverall, this all feels like a nice intro into a new hobby. Next, I'm\nconsidering [replacing the IBM Model M keyboard controller][ibmcontrol]\naltogether, which will embed the Teensy right in the case. \n\nAfter that, I'm tempted to turn my screwdriver on that other keyboard on my\ndesk - the Happy Hacking Keyboard Professional. There's a [Teensy-based\nalternative controller][hhkbalt] option for it, also using the TMK firmware.\n\nOnce I feel comfortable with all that, it might be time to build something of\nmy own! [I've got a 75-key layout I'm mulling over.][nfhkb] If I end up liking\nthat, I can get a case & mounting plate [designed][platebuilder] &\n[fabricated][ponoko]. Then, I can buy all the [switches][switches] and\n[diodes][]. And last, but not least, I'll have to design a circuit board &\n[get that fabricated][oshpark].\n\nOr, if I really want to go for that handcrafted artisan experience - which I\njust might, because I'm a glutton for punishment - I've got something like\nthis in my future:\n\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/MrokZ1afnVg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n[oshpark]: https://oshpark.com/\n[diodes]: http://amzn.to/1UUHUu8\n[ponoko]: https://www.ponoko.com/\n[platebuilder]: http://builder.swillkb.com/\n[hhkbalt]: https://geekhack.org/index.php?topic=12047.0\n[ibmcontrol]: https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\n[kicker]: https://github.com/alloy/kicker\n[loader]: https://www.pjrc.com/teensy/loader.html\n[lmotmk]: https://github.com/lmorchard/tmk_keyboard/blob/lmo-model-mac/converter/ps2_usb/keymap_modelmac.c\n[command]: https://en.wikipedia.org/wiki/Command_key\n[nfhkb]: http://www.keyboard-layout-editor.com/##@_name=noisy%20fat%20hacker%20keyboard&author=lmorchard&switchMount=cherry&switchBrand=cherry&plate:true%3B&@=Esc&=!%0A1&=%2F@%0A2&=%23%0A3&=$%0A4&=%25%0A5&=^%0A6&=%2F&%0A7&=*%0A8&=%28%0A9&=%29%0A0&=%2F_%0A-&=+%0A%2F=&=|%0A\\&=~%0A%60&_x:0.25%3B&=Insert&=Home&=PgUp%3B&@_w:1.5%3B&=Tab&=Q&=W&=E&=R&=T&=Y&=U&=I&=O&=P&={%0A[&=}%0A]&_a:0&w:1.5%3B&=Delete%0A%0A%0A%0ABS&_x:0.25&a:4%3B&=Delete&=End&=PgDn%3B&@_w:1.75%3B&=Control&=A&=S&=D&=F&=G&=H&=J&=K&=L&=%2F:%0A%2F%3B&=%22%0A%27&_w:2.25%3B&=Enter&_x:0.25%3B&=Op1&=Op2&=Op3%3B&@_w:2.25%3B&=Shift&=Z&=X&=C&=V&=B&=N&=M&=%3C%0A,&=%3E%0A.&=%3F%0A%2F%2F&_w:2.75%3B&=Shift&_x:1.25%3B&=%E2%86%91%3B&@_w:1.25%3B&=Fn&_w:1.25%3B&=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-logo-apple-outline%27%3E%3C%2F%2Fi%3E&_a:7&w:6.25%3B&=&_a:4&w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-logo-apple%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-Hamburger-Menu%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=Fn&_x:0.25%3B&=%E2%86%90&=%E2%86%93&=%E2%86%92\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/06/keyboard-hacking",
    "thumbnail": "/uploads/2016/teensy-ps2-adapter/minikey.jpg",
    "summary": "<p><strong>TL;DR</strong>: I think I&apos;ve caught the DIY keyboard hacking bug, and I&apos;ll probably\nend up building something weird.</p>\n"
  }
]