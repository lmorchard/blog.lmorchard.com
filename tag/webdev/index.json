[
  {
    "title": "Fun with Themes in Firefox",
    "tags": [
      "mozilla",
      "firefox",
      "themes",
      "themer",
      "quantum",
      "addons",
      "webpack",
      "node",
      "webdev"
    ],
    "year": "2018",
    "month": "03",
    "day": "01",
    "isDir": true,
    "slug": "themesrfun",
    "date": "2018-03-01T12:00:00.000Z",
    "postName": "2018-03-01-themesrfun",
    "html": "<p><strong>TL;DR</strong>: Last year, I started work on a new Test Pilot experiment playing with themes in Firefox. </p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<h2 id=\"new-theme-apis-are-fun\">New theme APIs are fun</h2>\n<p>At the core of this experiment are <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/theme\">new theme APIs for add-ons</a> shipping with Firefox. </p>\n<p>These APIs take inspiration <a href=\"https://developer.chrome.com/apps/themes\">from static themes in Google Chrome</a>, building from there to enable the creation of dynamic themes. </p>\n<p>For example, <a href=\"https://addons.mozilla.org/en-US/firefox/addon/quantum-lights-dynamic/\">Quantum Lights</a> changes based on the time of day.</p>\n<p><a href=\"https://addons.mozilla.org/en-US/firefox/addon/quantum-lights-dynamic/\"><img src=\"quantum-lights.png\" alt=\"Quantum Lights dynamic theme\"></a></p>\n<p><a href=\"https://addons.mozilla.org/en-US/firefox/addon/vivaldifox/\">VivaldiFox</a> reflects the sites you’re visiting.</p>\n<p><a href=\"https://addons.mozilla.org/en-US/firefox/addon/vivaldifox/\"><img src=\"image_0.png\" alt=\"VivaldiFox dynamic theme\"></a></p>\n<p>You could even build themes that use data from external HTTP services - e.g. to change based on the weather.</p>\n<p>To explore these new APIs, Firefox Themer consists of a website and a companion add-on for Firefox. The website offers a theme editor with a paper doll preview - you can click on parts of a simulated browser interface and dress it up however you like. The add-on grants special powers to the website, applying changes from the theme in the editor onto the browser itself.</p>\n<h2 id=\"editing-themes-on-the-web\">Editing themes on the web</h2>\n<p><a href=\"https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web\">The site</a> is built <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.web.js\">using Webpack</a>, React, and Redux. React offers a solid foundation for composing the editor. Personally, I really like working with <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/components/SavedThemeSelector/index.js\">stateless functional components</a> - they’re kind of what tipped me over into becoming a React convert a few years ago. I’m also a terrible visual designer with weak CSS-fu - but <a href=\"https://simonsmith.io/using-webpack-to-build-react-components-and-their-assets/\">using Webpack to bundle assets from per-component directories</a> makes it easier for teammates to step in where I fall short.</p>\n<img id=\"thumbnail\" title=\"An early snapshot of Themer in development\" alt=\"An early snapshot of Themer in development\" src=\"image_1.png\" />\n\n<p>Further under the hood, Redux offers a clean way to <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/lib/store.js\">manage theme data and UI state</a>. Adding <a href=\"https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/components/UndoRedoButtons\">undo &amp; redo buttons</a> is easy, thanks to <a href=\"https://github.com/omnidan/redux-undo/\">redux-undo</a>. And, by way of some <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L52\">simple Redux middleware</a>, I was able to easily add a hook to push every theme changes into the browser via the add-on.</p>\n<p>The website is just a static page - there’s no real server-side application. When you save a theme, <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/storage.js\">it ends up in your browser’s localStorage</a>. Though we plan to move to a Mozilla-owned production server on launch, I’ve been <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L29\">deploying</a> builds to <a href=\"https://mozilla.github.io/Themer/\">GitHub Pages</a> during development.</p>\n<p>Another interesting feature of the website is that we encode themes as a parameter in the URL. Rather than come up with a bespoke scheme, I use <a href=\"https://github.com/masotime/json-url\">this json-url module</a> to compress JSON and encode it as Base64, which makes for a long URL but not unreasonably so. This approach enables folks to simply copy &amp; paste a URL to share a theme they’ve made. You <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK6AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABND6bPaWX82IACoyBXlMz-ogPQMZx8jZw0gi6ZqepxjZiNq3qtC6ReDugh0DJEIcc-6Ekd4BML5haoPqlXvTBKbEuN12ZBm-SJaWyB2b9GzX0tU6b_u9yjWO4ukTDkntTK440uf__ug8AA\">can</a> <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK5AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNBRtj-x-Szc1kMeuEtwJYdDlHdJFchkY8sMP4iOzSOnr2vDVLFHcDTGfvoD2F-saWB-4Q-0HlUiMST82W8NTW8EedwTOfbOY_8T30w0e4gC9vlGFCU9f6FVIWiWSteBgU_b2G6fBR_7tUIAA\">even</a> <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK8AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNKtQKc4Qr-u-HdLUSjaBjcrH658wB_k4I1-yfpFsfTFeutvkNHhJd47c-oR5Cmx-mMJXZ4Lq7R98D2PE8etCHIG-B5_8oTyfPCjY6DxXN-uebtBycPe1q5OYxejC4KXCppxfkfniiH__gvZgA\">link</a> <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK7AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNC6bT6OtXpulKBw4DX1CffRksp6558s0k0DnUhq_LUMnHsWC8m0Ch34ivMZQ9sgV8nw4smjNTF6KwTBLBWoGene--BIiLoZeK7cfULCJbaoBYqyuNgz2tcB6oGDKcpyWUdMoffLb2h__-XfwA\">to</a> <a href=\"https://mozilla.github.io/Themer/?theme=XQAAAAK2AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVAAfaPFobPrtxqh09bZ0dFlllNZAoZN2KxC18prV-JbJ_OWRSXO_BkFys9aW3y-ZXvULv_v6dWy1x1lwnCABmI9hLlcXkVKtiPaJ2TBI4QUpuGXbvJ__-RkwAA\">themes</a> from a blog post, if you wanted to!</p>\n<p><img src=\"image_2.png\" alt=\"Copy themes as URLs\"></p>\n<p>When the page loads and sees the ?theme URL, <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L201\">it unpacks the data</a> and <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L204\">loads it into editor’s Redux store</a>. I’ve also been able to work this into the location bar with the HTML5 History API and <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L61\">Redux middleware</a>. The browser location represents the current theme, while back &amp; forward buttons double as undo &amp; redo.</p>\n<h2 id=\"add-ons-can-be-expansion-cartridges\">Add-ons can be expansion cartridges</h2>\n<p><a href=\"http://www.syntiac.com/chameleon.html\"><img title=\"The Turbo Chameleon 64 cartridge adds many new capabilities to a Commodore 64\" class=\"inset wide right\" src=\"chameleon_housing_small.jpg\" /></a></p>\n<p><a href=\"https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension\">The companion add-on</a> is also built <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js\">using Webpack</a> and acts as an <a href=\"https://www.c64-wiki.com/wiki/Simons%27_BASIC\">expansion cartridge</a> for the theme editor on the website. (Can you tell <a href=\"https://blog.lmorchard.com/2018/03/01/sio2pi/\">I’ve had retro computers on the mind</a>, lately?)</p>\n<p>Add-ons in Firefox can install <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts\">content scripts</a> that access content and data on web pages. Content scripts can communicate with the parent add-on <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts#Communicating_with_background_scripts\">by way of a message port</a>. They can also communicate with a web page <a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts#Communicating_with_the_web_page\">by way of synthetic events</a>. Put the two together, and you’ve got <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/contentScript.js\">a messaging channel</a> between a web page and an add-on in Firefox.</p>\n<p>Here&#39;s the heart of <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/contentScript.js\">that messaging bridge</a>:</p>\n<pre><code class=\"language-javascript\">import { CHANNEL_NAME } from &quot;../lib/constants&quot;;\n\n// Relay backend port messages to content\nlet port;\n\nfunction connect() {\n  port = browser.runtime.connect({ name: CHANNEL_NAME });\n  port.onDisconnect.addListener(() =&gt; {\n    port = null;\n    reconnect();\n  });\n  port.onMessage.addListener(message =&gt; {\n    window.postMessage({ ...message, channel: `${CHANNEL_NAME}-web` }, &quot;*&quot;);\n  });\n}\n\n// Relay content messages to backend port if the channel name matches\n// (Not a security feature so much as a noise filter)\nwindow.addEventListener(&quot;message&quot;, event =&gt; {\n  if (\n    port &amp;&amp;\n    event.source === window &amp;&amp;\n    event.data &amp;&amp;\n    event.data.channel === `${CHANNEL_NAME}-extension`\n  ) {\n    port.postMessage({ ...event.data, location: window.location.href });\n  }\n});\n\nconnect();</code></pre>\n<p>With this approach, the web page doesn’t actually gain access to any Firefox APIs. <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/background.js#L23\">The add-on can decide what to do with with messages it receives</a>. If the page sends invalid data or asks to do something not supported - nothing happens. Here&#39;s a snippet of that logic from the extension:</p>\n<pre><code class=\"language-javascript\">const messageListener = port =&gt; message =&gt; {\n  let theme;\n  switch (message.type) {\n    case &quot;fetchTheme&quot;:\n      log(&quot;fetchTheme&quot;);\n      fetchTheme().then(({ theme: currentTheme }) =&gt;\n        port.postMessage({ type: &quot;fetchedTheme&quot;, theme: currentTheme })\n      );\n      break;\n    case &quot;setTheme&quot;:\n      theme = normalizeTheme(message.theme);\n      log(&quot;setTheme&quot;, theme);\n      storeTheme({ theme });\n      applyTheme({ theme });\n      break;\n    case &quot;ping&quot;:\n      port.postMessage({ type: &quot;pong&quot; });\n      break;\n    default:\n      log(&quot;unexpected message&quot;, message);\n  }\n};</code></pre>\n<p>And here&#39;s a peek at <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L52\">that Redux middleware I mentioned earlier</a> which updates the add-on from the web:</p>\n<pre><code class=\"language-javascript\">const postMessage = (type, data = {}) =&gt;\n  window.postMessage(\n    { ...data, type, channel: `${CHANNEL_NAME}-extension` },\n    &quot;*&quot;\n  );\n\nconst updateExtensionThemeMiddleware = ({ getState }) =&gt; next =&gt; action =&gt; {\n  const returnValue = next(action);\n  const meta = action.meta || {};\n  if (!meta.skipAddon &amp;&amp; themeChangeActions.includes(action.type)) {\n    postMessage(&quot;setTheme&quot;, { theme: selectors.theme(getState()) });\n  }\n  return returnValue;\n};</code></pre>\n<p>The add-on can also restrict the set of pages from which it will accept messages: We <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js#L55\">hardcode the URL for the theme editor</a> into the add-on’s content script configuration at build time, which means no other web page should be able to ask the add-on to alter the theme in Firefox.</p>\n<h2 id=\"add-on-detection-is-hard\">Add-on detection is hard</h2>\n<img class=\"inset wide right\" src=\"loader.png\" title=\"The loading overlay that appears until the editor is visually stable\" />\n\n<p>There is a wrinkle to the relationship between website and add-on, though: A normal web page cannot detect whether or not a particular add-on has been installed. All the page can do is send a message. If the add-on responds, then we know the add-on is available.</p>\n<p>Proving a negative, however, is impossible: the web page can’t know for sure that the addon is *not *available. Responses to asynchronous messages take time - not necessarily a long time, but more than zero time. </p>\n<p>If the page sends a message and doesn’t get a response, that doesn’t mean the add-on is missing. It could just mean that the add-on is taking awhile to respond. So, we have to render the theme editor such that it starts off by assuming the add-on is not installed. If the add-on shows up, minutes or milliseconds later, the page can update itself to reflect the new state of things.</p>\n<p>Left as-is, you’d see several flashes of color and elements on the page move as things settle. That seems unpleasant and possibly confusing, so we came up with a loading spinner: When the page loads, it displays the spinner and a timer starts. If that timer expires, we consider things ready and reveal the editor. But, if there’s any change to the Redux store while that timer is running, we restart the clock.</p>\n<p>This is the gist of what that code does:</p>\n<pre><code class=\"language-javascript\">const unsubscribeLoader = store.subscribe(() =&gt; {\n  if (selectors.loaderDelayExpired(store.getState())) {\n    // State settled down long enough for timer to expire - stop listening.\n    unsubscribeLoader();\n  } else {\n    // Reset the timer again.\n    startLoaderDelay();\n  }\n});\n\n// Utility to (re)start up a timer to dismiss the loading indicator\nlet loaderTimer = null;\nfunction startLoaderDelay() {\n  if (loaderTimer) {\n    clearTimeout(loaderTimer);\n  }\n  loaderTimer = setTimeout(\n    () =&gt; store.dispatch(actions.ui.setLoaderDelayExpired(true)),\n    LOADER_DELAY_PERIOD\n  );\n}</code></pre>\n<p>Early changes to the store are driven by things like decoding a shared theme and responses from the add-on. Again, these are asynchronous and unpredictable. The timer duration is an arbitrary guess I made that seems to feel right. It’s a dirty hack, but it seems like a good enough effort for now.</p>\n<h2 id=\"using-npm-scripts-and-multiple-webpack-configs\">Using npm scripts and multiple Webpack configs</h2>\n<p>One of the things that has worked nicely on this project is building everything in parallel with a single npm command. You can <a href=\"https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05#get-started\">clone the repo and kick things off for development</a> with a simple <code>npm install &amp;&amp; npm start</code> dance.</p>\n<p>The add-on and the site both use Webpack. There’s <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.common.js\">a shared config</a> as a base and then specific configurations with tweaks for <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.web.js\">the site</a> and <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js\">the add-on</a>. So, we want to run two separate instances of Webpack to build everything, watch files, and host the dev server.</p>\n<p>This is where <a href=\"https://www.npmjs.com/package/npm-run-all\">npm-run-all</a> comes in: It’s a CLI tool that lets you run multiple npm scripts. I used to use gulp to orchestrate this sort of thing, but <a href=\"https://www.npmjs.com/package/npm-run-all\">npm-run-all</a> lets me arrange it all <a href=\"https://docs.npmjs.com/misc/scripts\">in <code>package.json</code></a>. It would be fine if this just enabled running scripts in series. But, npm-run-all also lets you run scripts* in parallel<em>. The cherry on top is that [this parallelization works on Linux, OS X, *and Windows</em>](<a href=\"https://www.npmjs.com/package/npm-run-all#%EF%B8%8F-motivation\">https://www.npmjs.com/package/npm-run-all#%EF%B8%8F-motivation</a>).</p>\n<pre><code class=\"language-json\">&quot;scripts&quot;: {\n  &quot;start&quot;: &quot;npm-run-all --parallel server watch:extension watch:lint&quot;,\n  &quot;server&quot;: &quot;cross-env NODE_ENV=development webpack-dev-server --config webpack.web.js&quot;,\n  &quot;watch&quot;: &quot;npm-run-all --parallel watch:*&quot;,\n  &quot;watch:web&quot;: &quot;cross-env NODE_ENV=development webpack --watch --progress --colors --config webpack.web.js&quot;,\n  &quot;watch:extension&quot;: &quot;cross-env NODE_ENV=development webpack --watch --progress --colors --config webpack.extension.js&quot;,\n  &quot;watch:lint&quot;: &quot;onchange -p -v \\&quot;src/**/*.js\\&quot; -- npm run lint&quot;,\n  &quot;lint&quot;: &quot;eslint --color .&quot;,\n},</code></pre>\n<p>In past years, Windows support might have been an abstract novelty for me. But, in recent months, I’ve switched from Apple hardware to a PC laptop. I’ve found the new <a href=\"https://docs.microsoft.com/en-us/windows/wsl/install-win10\">Windows Subsystem for Linux</a> to be essential to that switch. But, sometimes it’s nice to just fire up a Node.js dev environment directly in PowerShell - <a href=\"https://www.npmjs.com/package/npm-run-all\">npm-run-all</a> lets me (and you) do that!</p>\n<p>So, <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L12\">the start script in our package.json</a> is able to fire up both Webpack processes for the site and add-on. It can also <a href=\"https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L17\">start a file watcher to run linting</a> and tests (when we have them) alongside. That simplifies using everything in a single shell window across platforms. <a href=\"https://decafbad.com/2011/06/os-webdev-vm/slides.html#1\">I used to lean on Vagrant or Docker to offer something &quot;simple&quot; to folks interested in contributing to a project</a>. But, though virtual machines and containers can hide apparent complexity in development, it’s hard to beat just running things in node on the native OS.</p>\n<h2 id=\"help-us-make-themes-more-fun\">Help us make themes more fun!</h2>\n<p>We’re launching this experiment soon. And, though it only makes limited use of the new theme APIs for now, we’re hoping that the web-based editor and ease of sharing makes it fun &amp; worth playing with. We’ve got some ideas on what to add over the course of the experiment and hope to get more from the community. </p>\n<p>Whether you can offer code, give feedback, participate in discussions, or just let us watch how you use something - everyone has something valuable to offer. In fact, one of <a href=\"https://wiki.mozilla.org/Test_Pilot/mission\">the overarching goals of Test Pilot</a> is to expand channels of contribution for folks interested in helping us build Firefox.</p>\n<p>As with all Test Pilot experiments, we’ll be watching how folks use this stuff as input for what happens next. We also encourage participation in our <a href=\"https://discourse.mozilla.org/c/test-pilot\">Discourse forums</a>. And finally, the project itself is <a href=\"https://github.com/mozilla/Themer\">open source on Github</a> and open to pull requests. </p>\n<p>In the meantime, start collecting color swatches for your own theme. Personally, I might try my hand at <a href=\"https://draculatheme.com/\">a Dracula theme</a> or maybe raid my Vim config directory for some inspiration.</p>\n",
    "body": "**TL;DR**: Last year, I started work on a new Test Pilot experiment playing with themes in Firefox. \n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n## New theme APIs are fun\n\nAt the core of this experiment are [new theme APIs for add-ons](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/theme) shipping with Firefox. \n\nThese APIs take inspiration [from static themes in Google Chrome](https://developer.chrome.com/apps/themes), building from there to enable the creation of dynamic themes. \n\nFor example, [Quantum Lights](https://addons.mozilla.org/en-US/firefox/addon/quantum-lights-dynamic/) changes based on the time of day.\n\n[![Quantum Lights dynamic theme](quantum-lights.png)](https://addons.mozilla.org/en-US/firefox/addon/quantum-lights-dynamic/)\n\n[VivaldiFox](https://addons.mozilla.org/en-US/firefox/addon/vivaldifox/) reflects the sites you’re visiting.\n\n[![VivaldiFox dynamic theme](image_0.png)](https://addons.mozilla.org/en-US/firefox/addon/vivaldifox/)\n\nYou could even build themes that use data from external HTTP services - e.g. to change based on the weather.\n\nTo explore these new APIs, Firefox Themer consists of a website and a companion add-on for Firefox. The website offers a theme editor with a paper doll preview - you can click on parts of a simulated browser interface and dress it up however you like. The add-on grants special powers to the website, applying changes from the theme in the editor onto the browser itself.\n\n## Editing themes on the web\n\n[The site](https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web) is built [using Webpack](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.web.js), React, and Redux. React offers a solid foundation for composing the editor. Personally, I really like working with [stateless functional components](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/components/SavedThemeSelector/index.js) - they’re kind of what tipped me over into becoming a React convert a few years ago. I’m also a terrible visual designer with weak CSS-fu - but [using Webpack to bundle assets from per-component directories](https://simonsmith.io/using-webpack-to-build-react-components-and-their-assets/) makes it easier for teammates to step in where I fall short.\n\n<img id=\"thumbnail\" title=\"An early snapshot of Themer in development\" alt=\"An early snapshot of Themer in development\" src=\"image_1.png\" />\n\nFurther under the hood, Redux offers a clean way to [manage theme data and UI state](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/lib/store.js). Adding [undo & redo buttons](https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/components/UndoRedoButtons) is easy, thanks to [redux-undo](https://github.com/omnidan/redux-undo/). And, by way of some [simple Redux middleware](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L52), I was able to easily add a hook to push every theme changes into the browser via the add-on.\n\nThe website is just a static page - there’s no real server-side application. When you save a theme, [it ends up in your browser’s localStorage](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/lib/storage.js). Though we plan to move to a Mozilla-owned production server on launch, I’ve been [deploying](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L29) builds to [GitHub Pages](https://mozilla.github.io/Themer/) during development.\n\nAnother interesting feature of the website is that we encode themes as a parameter in the URL. Rather than come up with a bespoke scheme, I use [this json-url module](https://github.com/masotime/json-url) to compress JSON and encode it as Base64, which makes for a long URL but not unreasonably so. This approach enables folks to simply copy & paste a URL to share a theme they’ve made. You [can](https://mozilla.github.io/Themer/?theme=XQAAAAK6AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABND6bPaWX82IACoyBXlMz-ogPQMZx8jZw0gi6ZqepxjZiNq3qtC6ReDugh0DJEIcc-6Ekd4BML5haoPqlXvTBKbEuN12ZBm-SJaWyB2b9GzX0tU6b_u9yjWO4ukTDkntTK440uf__ug8AA) [even](https://mozilla.github.io/Themer/?theme=XQAAAAK5AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNBRtj-x-Szc1kMeuEtwJYdDlHdJFchkY8sMP4iOzSOnr2vDVLFHcDTGfvoD2F-saWB-4Q-0HlUiMST82W8NTW8EedwTOfbOY_8T30w0e4gC9vlGFCU9f6FVIWiWSteBgU_b2G6fBR_7tUIAA) [link](https://mozilla.github.io/Themer/?theme=XQAAAAK8AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNKtQKc4Qr-u-HdLUSjaBjcrH658wB_k4I1-yfpFsfTFeutvkNHhJd47c-oR5Cmx-mMJXZ4Lq7R98D2PE8etCHIG-B5_8oTyfPCjY6DxXN-uebtBycPe1q5OYxejC4KXCppxfkfniiH__gvZgA) [to](https://mozilla.github.io/Themer/?theme=XQAAAAK7AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVABNC6bT6OtXpulKBw4DX1CffRksp6558s0k0DnUhq_LUMnHsWC8m0Ch34ivMZQ9sgV8nw4smjNTF6KwTBLBWoGene--BIiLoZeK7cfULCJbaoBYqyuNgz2tcB6oGDKcpyWUdMoffLb2h__-XfwA) [themes](https://mozilla.github.io/Themer/?theme=XQAAAAK2AAAAAAAAAABBKYhm849SCiaxqiaEGccwS-xNVAAfaPFobPrtxqh09bZ0dFlllNZAoZN2KxC18prV-JbJ_OWRSXO_BkFys9aW3y-ZXvULv_v6dWy1x1lwnCABmI9hLlcXkVKtiPaJ2TBI4QUpuGXbvJ__-RkwAA) from a blog post, if you wanted to!\n\n![Copy themes as URLs](image_2.png)\n\nWhen the page loads and sees the ?theme URL, [it unpacks the data](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L201) and [loads it into editor’s Redux store](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L204). I’ve also been able to work this into the location bar with the HTML5 History API and [Redux middleware](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L61). The browser location represents the current theme, while back & forward buttons double as undo & redo.\n\n## Add-ons can be expansion cartridges\n\n[<img title=\"The Turbo Chameleon 64 cartridge adds many new capabilities to a Commodore 64\" class=\"inset wide right\" src=\"chameleon_housing_small.jpg\" />](http://www.syntiac.com/chameleon.html)\n\n[The companion add-on](https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension) is also built [using Webpack](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js) and acts as an [expansion cartridge](https://www.c64-wiki.com/wiki/Simons%27_BASIC) for the theme editor on the website. (Can you tell [I’ve had retro computers on the mind](https://blog.lmorchard.com/2018/03/01/sio2pi/), lately?)\n\nAdd-ons in Firefox can install [content scripts](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts) that access content and data on web pages. Content scripts can communicate with the parent add-on [by way of a message port](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts#Communicating_with_background_scripts). They can also communicate with a web page [by way of synthetic events](https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Content_scripts#Communicating_with_the_web_page). Put the two together, and you’ve got [a messaging channel](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/contentScript.js) between a web page and an add-on in Firefox.\n\nHere's the heart of [that messaging bridge](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/contentScript.js):\n\n```javascript\nimport { CHANNEL_NAME } from \"../lib/constants\";\n\n// Relay backend port messages to content\nlet port;\n\nfunction connect() {\n  port = browser.runtime.connect({ name: CHANNEL_NAME });\n  port.onDisconnect.addListener(() => {\n    port = null;\n    reconnect();\n  });\n  port.onMessage.addListener(message => {\n    window.postMessage({ ...message, channel: `${CHANNEL_NAME}-web` }, \"*\");\n  });\n}\n\n// Relay content messages to backend port if the channel name matches\n// (Not a security feature so much as a noise filter)\nwindow.addEventListener(\"message\", event => {\n  if (\n    port &&\n    event.source === window &&\n    event.data &&\n    event.data.channel === `${CHANNEL_NAME}-extension`\n  ) {\n    port.postMessage({ ...event.data, location: window.location.href });\n  }\n});\n\nconnect();\n```\n\nWith this approach, the web page doesn’t actually gain access to any Firefox APIs. [The add-on can decide what to do with with messages it receives](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/extension/background.js#L23). If the page sends invalid data or asks to do something not supported - nothing happens. Here's a snippet of that logic from the extension:\n\n```javascript\nconst messageListener = port => message => {\n  let theme;\n  switch (message.type) {\n    case \"fetchTheme\":\n      log(\"fetchTheme\");\n      fetchTheme().then(({ theme: currentTheme }) =>\n        port.postMessage({ type: \"fetchedTheme\", theme: currentTheme })\n      );\n      break;\n    case \"setTheme\":\n      theme = normalizeTheme(message.theme);\n      log(\"setTheme\", theme);\n      storeTheme({ theme });\n      applyTheme({ theme });\n      break;\n    case \"ping\":\n      port.postMessage({ type: \"pong\" });\n      break;\n    default:\n      log(\"unexpected message\", message);\n  }\n};\n```\n\nAnd here's a peek at [that Redux middleware I mentioned earlier](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/src/web/index.js#L52) which updates the add-on from the web:\n\n```javascript\nconst postMessage = (type, data = {}) =>\n  window.postMessage(\n    { ...data, type, channel: `${CHANNEL_NAME}-extension` },\n    \"*\"\n  );\n\nconst updateExtensionThemeMiddleware = ({ getState }) => next => action => {\n  const returnValue = next(action);\n  const meta = action.meta || {};\n  if (!meta.skipAddon && themeChangeActions.includes(action.type)) {\n    postMessage(\"setTheme\", { theme: selectors.theme(getState()) });\n  }\n  return returnValue;\n};\n```\n\nThe add-on can also restrict the set of pages from which it will accept messages: We [hardcode the URL for the theme editor](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js#L55) into the add-on’s content script configuration at build time, which means no other web page should be able to ask the add-on to alter the theme in Firefox.\n\n## Add-on detection is hard\n\n<img class=\"inset wide right\" src=\"loader.png\" title=\"The loading overlay that appears until the editor is visually stable\" />\n\nThere is a wrinkle to the relationship between website and add-on, though: A normal web page cannot detect whether or not a particular add-on has been installed. All the page can do is send a message. If the add-on responds, then we know the add-on is available.\n\nProving a negative, however, is impossible: the web page can’t know for sure that the addon is *not *available. Responses to asynchronous messages take time - not necessarily a long time, but more than zero time. \n\nIf the page sends a message and doesn’t get a response, that doesn’t mean the add-on is missing. It could just mean that the add-on is taking awhile to respond. So, we have to render the theme editor such that it starts off by assuming the add-on is not installed. If the add-on shows up, minutes or milliseconds later, the page can update itself to reflect the new state of things.\n\nLeft as-is, you’d see several flashes of color and elements on the page move as things settle. That seems unpleasant and possibly confusing, so we came up with a loading spinner: When the page loads, it displays the spinner and a timer starts. If that timer expires, we consider things ready and reveal the editor. But, if there’s any change to the Redux store while that timer is running, we restart the clock.\n\nThis is the gist of what that code does:\n\n```javascript\nconst unsubscribeLoader = store.subscribe(() => {\n  if (selectors.loaderDelayExpired(store.getState())) {\n    // State settled down long enough for timer to expire - stop listening.\n    unsubscribeLoader();\n  } else {\n    // Reset the timer again.\n    startLoaderDelay();\n  }\n});\n\n// Utility to (re)start up a timer to dismiss the loading indicator\nlet loaderTimer = null;\nfunction startLoaderDelay() {\n  if (loaderTimer) {\n    clearTimeout(loaderTimer);\n  }\n  loaderTimer = setTimeout(\n    () => store.dispatch(actions.ui.setLoaderDelayExpired(true)),\n    LOADER_DELAY_PERIOD\n  );\n}\n```\n\nEarly changes to the store are driven by things like decoding a shared theme and responses from the add-on. Again, these are asynchronous and unpredictable. The timer duration is an arbitrary guess I made that seems to feel right. It’s a dirty hack, but it seems like a good enough effort for now.\n\n## Using npm scripts and multiple Webpack configs\n\nOne of the things that has worked nicely on this project is building everything in parallel with a single npm command. You can [clone the repo and kick things off for development](https://github.com/mozilla/Themer/tree/5cdcb7e15d64934f0e71521512c74337dc58fa05#get-started) with a simple `npm install && npm start` dance.\n\nThe add-on and the site both use Webpack. There’s [a shared config](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.common.js) as a base and then specific configurations with tweaks for [the site](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.web.js) and [the add-on](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/webpack.extension.js). So, we want to run two separate instances of Webpack to build everything, watch files, and host the dev server.\n\nThis is where [npm-run-all](https://www.npmjs.com/package/npm-run-all) comes in: It’s a CLI tool that lets you run multiple npm scripts. I used to use gulp to orchestrate this sort of thing, but [npm-run-all](https://www.npmjs.com/package/npm-run-all) lets me arrange it all [in `package.json`](https://docs.npmjs.com/misc/scripts). It would be fine if this just enabled running scripts in series. But, npm-run-all also lets you run scripts* in parallel*. The cherry on top is that [this parallelization works on Linux, OS X, *and Windows*](https://www.npmjs.com/package/npm-run-all#%EF%B8%8F-motivation).\n\n```json\n\"scripts\": {\n  \"start\": \"npm-run-all --parallel server watch:extension watch:lint\",\n  \"server\": \"cross-env NODE_ENV=development webpack-dev-server --config webpack.web.js\",\n  \"watch\": \"npm-run-all --parallel watch:*\",\n  \"watch:web\": \"cross-env NODE_ENV=development webpack --watch --progress --colors --config webpack.web.js\",\n  \"watch:extension\": \"cross-env NODE_ENV=development webpack --watch --progress --colors --config webpack.extension.js\",\n  \"watch:lint\": \"onchange -p -v \\\"src/**/*.js\\\" -- npm run lint\",\n  \"lint\": \"eslint --color .\",\n},\n```\n\nIn past years, Windows support might have been an abstract novelty for me. But, in recent months, I’ve switched from Apple hardware to a PC laptop. I’ve found the new [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10) to be essential to that switch. But, sometimes it’s nice to just fire up a Node.js dev environment directly in PowerShell - [npm-run-all](https://www.npmjs.com/package/npm-run-all) lets me (and you) do that!\n\nSo, [the start script in our package.json](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L12) is able to fire up both Webpack processes for the site and add-on. It can also [start a file watcher to run linting](https://github.com/mozilla/Themer/blob/5cdcb7e15d64934f0e71521512c74337dc58fa05/package.json#L17) and tests (when we have them) alongside. That simplifies using everything in a single shell window across platforms. [I used to lean on Vagrant or Docker to offer something \"simple\" to folks interested in contributing to a project](https://decafbad.com/2011/06/os-webdev-vm/slides.html#1). But, though virtual machines and containers can hide apparent complexity in development, it’s hard to beat just running things in node on the native OS.\n\n## Help us make themes more fun!\n\nWe’re launching this experiment soon. And, though it only makes limited use of the new theme APIs for now, we’re hoping that the web-based editor and ease of sharing makes it fun & worth playing with. We’ve got some ideas on what to add over the course of the experiment and hope to get more from the community. \n\nWhether you can offer code, give feedback, participate in discussions, or just let us watch how you use something - everyone has something valuable to offer. In fact, one of [the overarching goals of Test Pilot](https://wiki.mozilla.org/Test_Pilot/mission) is to expand channels of contribution for folks interested in helping us build Firefox.\n\nAs with all Test Pilot experiments, we’ll be watching how folks use this stuff as input for what happens next. We also encourage participation in our [Discourse forums](https://discourse.mozilla.org/c/test-pilot). And finally, the project itself is [open source on Github](https://github.com/mozilla/Themer) and open to pull requests. \n\nIn the meantime, start collecting color swatches for your own theme. Personally, I might try my hand at [a Dracula theme](https://draculatheme.com/) or maybe raid my Vim config directory for some inspiration.\n\n[modeline]: # ( vim: set wrap linebreak nolist wrapmargin=5 syntax=markdown textwidth=78 formatoptions-=t: )\n",
    "parentPath": "../blog.lmorchard.com/posts/2018-03-01-themesrfun",
    "path": "2018/03/01/themesrfun",
    "thumbnail": "/blog.lmorchard.com/2018/03/01/themesrfun/image_1.png",
    "summary": "<p><strong>TL;DR</strong>: Last year, I started work on a new Test Pilot experiment playing with themes in Firefox. </p>\n"
  },
  {
    "title": "Firefox Test Pilot: The Flattening",
    "tags": [
      "mozilla",
      "testpilot",
      "webdev",
      "django",
      "gulp"
    ],
    "thumbnail": "/blog.lmorchard.com/uploads/2016/tp-flat.png",
    "year": "2016",
    "month": "09",
    "day": "26",
    "isDir": false,
    "slug": "testpilot-static",
    "date": "2016-09-26T12:00:00.000Z",
    "postName": "2016-09-26-testpilot-static",
    "html": "<p><strong>TL;DR</strong>: Firefox Test Pilot is becoming a statically-generated site from content in flat files. We&#39;re moving away from Django and PostgreSQL, and it&#39;s been a bit of a journey.</p>\n<!--more-->\n\n<img class=\"fullwidth\" src=\"/uploads/2016/tp-header.png\" />\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>I&#39;ve been working on <a href=\"https://testpilot.firefox.com/\">Firefox Test Pilot</a> for over a year, but I haven&#39;t written about it here before now. Mostly because I&#39;ve been busy and lazy and <a href=\"/2016/08/31/yak-shaving-habits/\">busily shaving yaks</a>.</p>\n<p>But, there have been big things afoot lately, and I figured they were worth writing about - if only because they&#39;re invisible, behind-the-scenes things that nonetheless took a lot of work to accomplish.</p>\n<h2 id=\"be-prepared---but-for-what\">Be prepared - but for what?</h2>\n<p>When we started building Test Pilot last summer, we based the server-side on Django &amp; PostgreSQL. We had assumptions about the future: </p>\n<ul>\n<li><p>We&#39;d need to collect measurements from experiments. </p>\n</li>\n<li><p>We thought experiments would need some active server-side resources provided by the mothership.</p>\n</li>\n<li><p>We&#39;d need to manage user profiles &amp; preferences, so we required sign-in with a Firefox Account. </p>\n</li>\n</ul>\n<p>A year later, these assumptions didn&#39;t quite pan out: </p>\n<ul>\n<li><p>Rather than reinvent the wheel by collecting &amp; analyzing measurements ourselves, we took advantage of Google Analytics and the efforts of <a href=\"https://wiki.mozilla.org/Telemetry\">the Firefox Telemetry team</a>.</p>\n</li>\n<li><p>We found it&#39;s best to stay out of the way of teams building Test Pilot experiments - let them manage their own services as necessary, rather than be tied to the delivery cadence of the core project.</p>\n</li>\n<li><p>The sign-in requirement turned away many potential users. But, we didn&#39;t need accounts to facilitate experiment participation anyway. Our metrics are anonymous and a Firefox add-on manages opt-in.</p>\n<p>Accounts ended up being private data we had to keep secure, but only used for email notifications. We have better ways to manage email subscriptions across Mozilla - so one less wheel to reinvent!</p>\n</li>\n</ul>\n<h2 id=\"didnt-need-that-server-anyway\">Didn&#39;t need that server anyway</h2>\n<p>There was just one last reason to use Django &amp; PostgreSQL on Test Pilot: A web-based content management system to update the site without heavyweight server deployments &amp; database migrations. </p>\n<p>But, wait a minute: If the other reasons for a server dropped away - why do we need complex deployments?</p>\n<p>Furthermore, why maintain content <a href=\"https://indieweb.org/database-antipattern\">in a database</a> at all?</p>\n<p>The whole Test Pilot team knows their way around text editors and GitHub - so let&#39;s make that our CMS. We can <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\">bake the whole site</a> from <a href=\"https://github.com/mozilla/testpilot/tree/master/content-src/experiments\">flat files</a>. Deployment is <a href=\"https://github.com/mozilla/testpilot/blob/master/docs/development/deployment.md#producing-a-static-build\">running a build script</a> and <a href=\"https://github.com/mozilla/testpilot/blob/master/circle.yml#L71\">uploading the result</a> to a web server. We get revision control &amp; collaboration along with the rest of the project. And as a security bonus, we stop shipping the tools to change the site along with the deployed site itself.</p>\n<p>None of this is revolutionary. Aaron Swartz&#39;s &quot;<a href=\"http://www.aaronsw.com/weblog/000404\">Bake, Don&#39;t Fry</a>&quot; is over 14 years old: Why fry up a new web page for every visit when you can pre-bake the whole site ahead of time? I used <a href=\"http://blosxom.sourceforge.net/\">Bloxsom</a> back in the day and <a href=\"https://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">Gulp bakes this blog now</a>. Static site generators <a href=\"https://www.staticgen.com/\">are numerous &amp; popular</a> - GitHub itself offers <a href=\"https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/\">GitHub Pages</a> powered by <a href=\"https://github.com/jekyll/jekyll\">Jekyll</a>.</p>\n<p>It sounds obvious in retrospect, but it took awhile to realize our site could be stripped down to so little. We assumed we needed all those moving parts - or would need them someday. But, it appears that we can get away with being nearly serverless. And if someday a feature requires more, we can stand up some loosely-coupled microservices - or better yet, find that another team at Mozilla has already solved the problem.</p>\n<h2 id=\"the-show-must-go-on\">The show must go on</h2>\n<p>But, having realized all of this, we couldn&#39;t just burn down the site and start over. Because we&#39;re working on a vehicle in motion, we&#39;ve been doing this in increments over the summer: </p>\n<ul>\n<li><p>A couple of months ago, <a href=\"https://github.com/mozilla/testpilot/issues/1035\">we removed the Firefox Accounts requirement</a> and then <a href=\"https://github.com/mozilla/testpilot/issues/1034\">deleted the user data</a> once we were sure we weren&#39;t going back.</p>\n</li>\n<li><p>We switched data sources for displaying the number of folks participating in experiments from our own Django API to <a href=\"https://github.com/mozilla/testpilot/issues/1039\">a Telemetry-based resource</a>.</p>\n</li>\n<li><p>I wrote a task to <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L22\">import content from the current Django API</a>. Then, I wrote <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L16\">a task to generate JSON</a> from those imported files - a direct static replacement for the Django API.</p>\n</li>\n<li><p>Next, I implemented <a href=\"https://github.com/mozilla/testpilot/blob/master/testpilot/experiments/views.py#L50\">a feature flag in Django</a> to substitute static JSON for content from the database. Thus, we can start managing content in YAML now, maintaining our current infrastructure until we work out a new stripped-down deployment process.</p>\n</li>\n<li><p>Soon, we&#39;ll be able to update the site by pushing to the appropriate branch on GitHub. We&#39;ve got <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\">tasks to generate stub pages</a> for all the front end app routes. We&#39;re also looking into enforcing a requirement to <a href=\"http://micropipes.com/blog//2016/08/31/signing-your-commits-on-github-with-a-gpg-key/\">sign our commits and tags</a> on the way to release.</p>\n</li>\n<li><p>After that, <a href=\"https://github.com/mozilla/testpilot/issues/1306\">we plan to go even further with static site generation</a>. Test Pilot is currently a single page app that pulls content from JSON. But, we can do better by pre-rendering those HTML pages in our build process ahead of time.</p>\n</li>\n</ul>\n<h2 id=\"whats-next\">What&#39;s next?</h2>\n<p>There&#39;s a funny thing about all of this: If we&#39;re successful, no one visiting the site should notice anything different. We&#39;re developing some new features &amp; experiments - but all this work to rid our infrastructure of Django &amp; PostgreSQL should ideally be a non-event for anyone visiting the site. This is the least glamorous sort of work one occasionally has to do on a software project - change everything, but don&#39;t break anything.</p>\n<p>The real benefit will be that we&#39;re able to do a lot of things faster and more easily. For instance, there are now fewer places that need changes to display a new piece of information on a page. We don&#39;t have to monitor as many third-party dependencies - <a href=\"https://github.com/mozilla/testpilot/issues/1116\">which we weren&#39;t doing very well to begin with</a>.</p>\n<p>Our development stack shrinks from Docker containers with Django &amp; PostgreSQL &amp; Node.js - down to just Node.js v6.2.0. <a href=\"https://github.com/mozilla/testpilot/blob/master/docs/development/quickstart.md\">The whole system has gotten simpler and more direct</a>.</p>\n<p>But, wait, there&#39;s more: Along with totally changing our server-side infrastructure, <a href=\"https://github.com/mozilla/testpilot/issues/1307\">we&#39;ve also rewritten the front end of the site to switch from Ampersand to React &amp; Redux</a>. It should make static site generation easier. It&#39;s also eased development on a handful of new features in the past week or so.</p>\n<p>It&#39;s a big deal - and another thing that, in retrospect, seems more obvious now than it did a year ago. But, I&#39;m going to save writing about that for my next post.</p>\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "body": "**TL;DR**: Firefox Test Pilot is becoming a statically-generated site from content in flat files. We're moving away from Django and PostgreSQL, and it's been a bit of a journey.\n\n<!--more-->\n\n<img class=\"fullwidth\" src=\"/uploads/2016/tp-header.png\" />\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nI've been working on [Firefox Test Pilot][testpilot] for over a year, but I haven't written about it here before now. Mostly because I've been busy and lazy and [busily shaving yaks](/2016/08/31/yak-shaving-habits/).\n\nBut, there have been big things afoot lately, and I figured they were worth writing about - if only because they're invisible, behind-the-scenes things that nonetheless took a lot of work to accomplish.\n\n## Be prepared - but for what?\n\nWhen we started building Test Pilot last summer, we based the server-side on Django & PostgreSQL. We had assumptions about the future: \n\n* We'd need to collect measurements from experiments. \n\n* We thought experiments would need some active server-side resources provided by the mothership.\n\n* We'd need to manage user profiles & preferences, so we required sign-in with a Firefox Account. \n\nA year later, these assumptions didn't quite pan out: \n\n* Rather than reinvent the wheel by collecting & analyzing measurements ourselves, we took advantage of Google Analytics and the efforts of [the Firefox Telemetry team][telemetry].\n\n* We found it's best to stay out of the way of teams building Test Pilot experiments - let them manage their own services as necessary, rather than be tied to the delivery cadence of the core project.\n\n* The sign-in requirement turned away many potential users. But, we didn't need accounts to facilitate experiment participation anyway. Our metrics are anonymous and a Firefox add-on manages opt-in.\n  \n  Accounts ended up being private data we had to keep secure, but only used for email notifications. We have better ways to manage email subscriptions across Mozilla - so one less wheel to reinvent!\n\n## Didn't need that server anyway\n\nThere was just one last reason to use Django & PostgreSQL on Test Pilot: A web-based content management system to update the site without heavyweight server deployments & database migrations. \n\nBut, wait a minute: If the other reasons for a server dropped away - why do we need complex deployments?\n\nFurthermore, why maintain content [in a database][database] at all?\n\nThe whole Test Pilot team knows their way around text editors and GitHub - so let's make that our CMS. We can [bake the whole site][sitebake] from [flat files][]. Deployment is [running a build script][buildscript] and [uploading the result][uploadweb] to a web server. We get revision control & collaboration along with the rest of the project. And as a security bonus, we stop shipping the tools to change the site along with the deployed site itself.\n\nNone of this is revolutionary. Aaron Swartz's \"[Bake, Don't Fry][baked]\" is over 14 years old: Why fry up a new web page for every visit when you can pre-bake the whole site ahead of time? I used [Bloxsom][] back in the day and [Gulp bakes this blog now][gulp]. Static site generators [are numerous & popular][staticgen] - GitHub itself offers [GitHub Pages][pages] powered by [Jekyll][].\n\nIt sounds obvious in retrospect, but it took awhile to realize our site could be stripped down to so little. We assumed we needed all those moving parts - or would need them someday. But, it appears that we can get away with being nearly serverless. And if someday a feature requires more, we can stand up some loosely-coupled microservices - or better yet, find that another team at Mozilla has already solved the problem.\n\n## The show must go on\n\nBut, having realized all of this, we couldn't just burn down the site and start over. Because we're working on a vehicle in motion, we've been doing this in increments over the summer: \n\n* A couple of months ago, [we removed the Firefox Accounts requirement][fxareq] and then [deleted the user data][deletedata] once we were sure we weren't going back.\n\n* We switched data sources for displaying the number of folks participating in experiments from our own Django API to [a Telemetry-based resource][counts].\n\n* I wrote a task to [import content from the current Django API][import]. Then, I wrote [a task to generate JSON][generatejson] from those imported files - a direct static replacement for the Django API.\n\n* Next, I implemented [a feature flag in Django][featureflag] to substitute static JSON for content from the database. Thus, we can start managing content in YAML now, maintaining our current infrastructure until we work out a new stripped-down deployment process.\n\n* Soon, we'll be able to update the site by pushing to the appropriate branch on GitHub. We've got [tasks to generate stub pages][stubs] for all the front end app routes. We're also looking into enforcing a requirement to [sign our commits and tags][signreq] on the way to release.\n\n* After that, [we plan to go even further with static site generation][staticsite]. Test Pilot is currently a single page app that pulls content from JSON. But, we can do better by pre-rendering those HTML pages in our build process ahead of time.\n\n## What's next?\n\nThere's a funny thing about all of this: If we're successful, no one visiting the site should notice anything different. We're developing some new features & experiments - but all this work to rid our infrastructure of Django & PostgreSQL should ideally be a non-event for anyone visiting the site. This is the least glamorous sort of work one occasionally has to do on a software project - change everything, but don't break anything.\n\nThe real benefit will be that we're able to do a lot of things faster and more easily. For instance, there are now fewer places that need changes to display a new piece of information on a page. We don't have to monitor as many third-party dependencies - [which we weren't doing very well to begin with][dependencies].\n\nOur development stack shrinks from Docker containers with Django & PostgreSQL & Node.js - down to just Node.js v6.2.0. [The whole system has gotten simpler and more direct][quickstart].\n\nBut, wait, there's more: Along with totally changing our server-side infrastructure, [we've also rewritten the front end of the site to switch from Ampersand to React & Redux][reactrewrite]. It should make static site generation easier. It's also eased development on a handful of new features in the past week or so.\n\nIt's a big deal - and another thing that, in retrospect, seems more obvious now than it did a year ago. But, I'm going to save writing about that for my next post.\n\n[dependencies]: https://github.com/mozilla/testpilot/issues/1116\n[quickstart]: https://github.com/mozilla/testpilot/blob/master/docs/development/quickstart.md\n[testpilot]: https://testpilot.firefox.com/\n[buildscript]: https://github.com/mozilla/testpilot/blob/master/docs/development/deployment.md#producing-a-static-build\n[uploadweb]: https://github.com/mozilla/testpilot/blob/master/circle.yml#L71\n[sitebake]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\n[stubs]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\n[signreq]: http://micropipes.com/blog//2016/08/31/signing-your-commits-on-github-with-a-gpg-key/\n[reactrewrite]: https://github.com/mozilla/testpilot/issues/1307\n[staticsite]: https://github.com/mozilla/testpilot/issues/1306\n[featureflag]: https://github.com/mozilla/testpilot/blob/master/testpilot/experiments/views.py#L50\n[generatejson]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L16\n[import]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L22\n[counts]: https://github.com/mozilla/testpilot/issues/1039\n[deletedata]: https://github.com/mozilla/testpilot/issues/1034\n[fxareq]: https://github.com/mozilla/testpilot/issues/1035\n[flat files]: https://github.com/mozilla/testpilot/tree/master/content-src/experiments\n[telemetry]: https://wiki.mozilla.org/Telemetry\n[gulp]: https://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\n[bloxsom]: http://blosxom.sourceforge.net/\n[jekyll]: https://github.com/jekyll/jekyll\n[pages]: https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/\n[baked]: http://www.aaronsw.com/weblog/000404\n[database]: https://indieweb.org/database-antipattern\n[staticgen]: https://www.staticgen.com/\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/09/26/testpilot-static",
    "summary": "<p><strong>TL;DR</strong>: Firefox Test Pilot is becoming a statically-generated site from content in flat files. We&apos;re moving away from Django and PostgreSQL, and it&apos;s been a bit of a journey.</p>\n"
  },
  {
    "title": "Continual Blogployment",
    "tags": [
      "metablogging",
      "webdev",
      "js",
      "gulp",
      "github",
      "travis",
      "s3",
      "amazon",
      "devops"
    ],
    "year": "2015",
    "month": "10",
    "day": "22",
    "isDir": false,
    "slug": "blogging-via-travis",
    "date": "2015-10-22T12:00:00.000Z",
    "postName": "2015-10-22-blogging-via-travis",
    "html": "<p>Ever since <a href=\"http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">I switched this blog over to a Gulp-based toolchain</a> - <em>holy crap, 2 years ago</em> - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. </p>\n<!--more-->\n\n<p>Just to test the cloud machinery I&#39;m (ab)using here, I&#39;m writing this post as a new commit on GitHub in a browser. When I get done and commit this, Travis CI will fire up, install my node-based blog code and build all the content. Assuming that goes well, my code on Travis will then publish any changes in the content to Amazon S3. And, voila, I will have blogged via the magic of cheap cloud infrastructure.</p>\n<p>Up until now, I&#39;ve been doing this all from my laptop: Write a post in Vim, commit to git, build &amp; deploy from my local machine. I&#39;d push to GitHub to work in the open and have a handy backup. But from here on, the push to GitHub will actually make the magic happen!</p>\n<p>If you&#39;re curious about the plumbing, <a href=\"https://github.com/lmorchard/blog.lmorchard.com/compare/5992311ade7acc0e9dbeb0352ac4097c687be1a5...10149c0e520f7e75536535ff563dfe42aa30b960\">the changes in my recent commits</a> can tell the exact story. But, what I did in a nutshell is this:</p>\n<ul>\n<li><a href=\"https://github.com/lmorchard/blog.lmorchard.com/commit/4c029ab9a6d3f5869cee02b7265e0ad41908a8c4\">Switched to using environment vars to configure AWS credentials for S3 publishing</a>.</li>\n<li>Used <a href=\"http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables\"><code>travis secure</code></a> to supply credentials in encrypted environment vars.</li>\n<li>Started <a href=\"https://github.com/lmorchard/blog.lmorchard.com/commit/4b525710760ad70c0d83d910585e7bd9ddd80583\">maintaining a copy of file hashes on the site</a> so that <a href=\"https://www.npmjs.com/package/gulp-awspublish\">gulp-awspublish</a> will only publish changes.</li>\n<li>Composed a <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/.travis.yml\">.travis.yml</a> to build &amp; deploy everything.</li>\n</ul>\n<p>And, if you&#39;re reading this post, then that means everything worked when I hit the &quot;Commit new file&quot; button! (And, if you&#39;re reading <em>this</em> sentence, then I was able to update this post, too!)</p>\n",
    "body": "Ever since [I switched this blog over to a Gulp-based toolchain][gulp-blog] - *holy crap, 2 years ago* - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. \n\n<!--more-->\n\nJust to test the cloud machinery I'm (ab)using here, I'm writing this post as a new commit on GitHub in a browser. When I get done and commit this, Travis CI will fire up, install my node-based blog code and build all the content. Assuming that goes well, my code on Travis will then publish any changes in the content to Amazon S3. And, voila, I will have blogged via the magic of cheap cloud infrastructure.\n\nUp until now, I've been doing this all from my laptop: Write a post in Vim, commit to git, build & deploy from my local machine. I'd push to GitHub to work in the open and have a handy backup. But from here on, the push to GitHub will actually make the magic happen!\n\nIf you're curious about the plumbing, [the changes in my recent commits][recent-commits] can tell the exact story. But, what I did in a nutshell is this:\n\n* [Switched to using environment vars to configure AWS credentials for S3 publishing][env-config].\n* Used [`travis secure`][travis-secure] to supply credentials in encrypted environment vars.\n* Started [maintaining a copy of file hashes on the site][hash-stash] so that [gulp-awspublish][] will only publish changes.\n* Composed a [.travis.yml][travis-yml] to build & deploy everything.\n\nAnd, if you're reading this post, then that means everything worked when I hit the \"Commit new file\" button! (And, if you're reading *this* sentence, then I was able to update this post, too!)\n\n[env-config]: https://github.com/lmorchard/blog.lmorchard.com/commit/4c029ab9a6d3f5869cee02b7265e0ad41908a8c4\n[gulp-awspublish]: https://www.npmjs.com/package/gulp-awspublish\n[hash-stash]: https://github.com/lmorchard/blog.lmorchard.com/commit/4b525710760ad70c0d83d910585e7bd9ddd80583\n[travis-yml]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/.travis.yml\n[travis-secure]: http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables\n[recent-commits]: https://github.com/lmorchard/blog.lmorchard.com/compare/5992311ade7acc0e9dbeb0352ac4097c687be1a5...10149c0e520f7e75536535ff563dfe42aa30b960\n[gulp-blog]: http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/10/22/blogging-via-travis",
    "summary": "<p>Ever since <a href=\"http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">I switched this blog over to a Gulp-based toolchain</a> - <em>holy crap, 2 years ago</em> - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. </p>\n"
  },
  {
    "title": "Adding Android to a multi-platform React app",
    "tags": [
      "webdev",
      "native",
      "react",
      "reactnative",
      "android",
      "ios",
      "mobile",
      "mozilla"
    ],
    "year": "2015",
    "month": "09",
    "day": "21",
    "isDir": false,
    "slug": "react-native-android",
    "date": "2015-09-21T12:00:00.000Z",
    "postName": "2015-09-21-react-native-android",
    "html": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: A couple of months back, <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/\">I wrote about a TODO app built using React\nfor web and React Native for iOS</a>. </p>\n<p>Last week, the team at Facebook \n<a href=\"https://code.facebook.com/posts/1189117404435352/\">released React Native for Android</a>. So, I circled back to add\nAndroid support and revisit how code sharing looks now.</p>\n<h2 id=\"getting-up-to-speed\">Getting up to speed</h2>\n<p>With this <a href=\"https://code.facebook.com/posts/1189117404435352/\">new release of React Native</a>, I was able to add support\nfor Android to <a href=\"https://github.com/lmorchard/react-multiplatform\">my little TODO app</a>.</p>\n<p>The first task was to <a href=\"https://github.com/lmorchard/react-multiplatform/commit/38fb7afe67f8c339b8d51c69a1f515a5a91e97c7\">shuffle directories &amp; files around and add the base\nAndroid support</a>. In general, the project layout is now cleaner.\nAssets for each platform now live in separate sub-directories.</p>\n<p>Next, to start iterating &amp; experimenting, I copied the code from the iOS app\ninto Android-specific directories. I <a href=\"https://github.com/lmorchard/react-multiplatform/commit/fd80e9859400744ac5fcffc8f7d75d6703a3856d\">only needed to make some small\ntweaks</a> to account for differences in native component sets. That got my\nbase app functionality working.</p>\n<p>Then, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/dd8b6b307c31b67fde23c6b090e7b1f1d8b0f579\">I squashed the iOS &amp; Android models together</a> when I realized that\ncode was identical between the React Native platforms. That could change in\nthe future, but there&#39;s no need for a difference right now.</p>\n<p>After sleeping on it, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/ea7abb421b7e0486b2d3de42001724343f832901\">I refactored some common mixins</a> to take advantage of\nadditional sharing opportunities I found between iOS &amp; Android views. That\nhelped to further shrink the lines of duplicated code.</p>\n<p>This added what amounts to a new category of code sharing in my project. So,\n<a href=\"https://github.com/lmorchard/react-multiplatform/commit/cdbbff72cb941fac75f68c1c91279fa780997b26\">I separated that code into its own module</a> to make the distinction easier\nto see &amp; measure.  Now, I have code shared between web and native in general,\nand code shared between the iOS and Android native platforms.</p>\n<p>Finally, in an attempt to start automating my code metrics, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/d5149768e116571d0a1a059d1ff16e1cfc45fcfd\">I added\n<code>loc-metrics.sh</code></a>.</p>\n<h2 id=\"visualizing-the-code-metrics\">Visualizing the code metrics</h2>\n<p>So, I tried drawing some Venn diagrams in my notebook. But, I&#39;m terrible at\ndrawing. That&#39;s when I remembered that SVG is a thing where I can draw by\nwriting code. So, <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial\">I spent an afternoon teaching myself some SVG</a>\nand <a href=\"https://github.com/lmorchard/react-multiplatform/commit/0014232c9858e082414e094be021170fda19aab0\">reworked my metrics shell script</a>.</p>\n<p>I&#39;m not going to bother trying to make the areas actually proportional to the\nlines of code. But, here&#39;s a rough picture of code sharing:</p>\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-overall.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-models.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-views.svg\">\n\n<p>If you can&#39;t see those images, then you&#39;ll need to find a browser that understands\nSVG until I can be bothered to convert to PNG. (Pull requests welcome!)</p>\n<h2 id=\"conclusions-revisited\">Conclusions revisited</h2>\n<p>As before, most of the models code is shared between web and both native\nplatforms. What&#39;s unique is mostly boilerplate wrapping <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/#forking-sharing-model-code-for-persistence\">the localStorage /\nasyncStorage split between web and native</a>.</p>\n<p>On the view side, however, things are a bit more spread out. In a nutshell,\nReact patterns in general allow a decent chunk of code to be shared between\nweb and native. And even more code can be shared between the iOS and Android\nplatforms.</p>\n<p>But, unique concerns in each platform - web, iOS, and Android - call for\nunique code for each case. This is not actually a failing, though: Varying the\nUX between web &amp; iOS &amp; Android is a flexibility you&#39;ll probably appreciate. </p>\n<p>In other words, use components &amp; conventions unique to each\nplatform without your app suffering from the lowest-common-denominator UX\nproblem historically found in a lot of multi-platform apps. In the case of this\nTODO app, that just boils down to trivialities like checkboxes &amp; switches &amp;\nsegmented controls. In a larger app, I&#39;d expect this concern to grow.</p>\n<p>I&#39;m being lazy and not coding up the math in percentages. This approach shared\nabout half the code from the web app, and even more than that for each of the\nnative apps. I think that&#39;s a significant advantage over writing separate\napps.</p>\n<p>Of course, <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/#conclusion\">all my caveats from the first go\naround</a> still apply: This is a very simple app. The code devoted to\ndoing interesting things versus React boilerplate is probably not at a good\nratio. Also, as more view components arise, further overlap might be found.\nAnd, hopefully, common logic would remain the primary area of growth on the\nmodel site.</p>\n<p>I think this approach toward building apps remains interesting &amp; promising. </p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nTL;DR: A couple of months back, [I wrote about a TODO app built using React\nfor web and React Native for iOS][rnpart1]. \n\nLast week, the team at Facebook \n[released React Native for Android][rnandroid]. So, I circled back to add\nAndroid support and revisit how code sharing looks now.\n\n[rnandroid]: https://code.facebook.com/posts/1189117404435352/\n[rnpart1]: http://blog.lmorchard.com/2015/07/22/react-multiplatform/\n[reactmultiplatform]: https://github.com/lmorchard/react-multiplatform\n\n## Getting up to speed\n\nWith this [new release of React Native][rnandroid], I was able to add support\nfor Android to [my little TODO app][reactmultiplatform].\n  \nThe first task was to [shuffle directories & files around and add the base\nAndroid support][c1]. In general, the project layout is now cleaner.\nAssets for each platform now live in separate sub-directories.\n\n[c1]: https://github.com/lmorchard/react-multiplatform/commit/38fb7afe67f8c339b8d51c69a1f515a5a91e97c7\n\nNext, to start iterating & experimenting, I copied the code from the iOS app\ninto Android-specific directories. I [only needed to make some small\ntweaks][c2] to account for differences in native component sets. That got my\nbase app functionality working.\n\n[c2]: https://github.com/lmorchard/react-multiplatform/commit/fd80e9859400744ac5fcffc8f7d75d6703a3856d\n\nThen, [I squashed the iOS & Android models together][c3] when I realized that\ncode was identical between the React Native platforms. That could change in\nthe future, but there's no need for a difference right now.\n\n[c3]: https://github.com/lmorchard/react-multiplatform/commit/dd8b6b307c31b67fde23c6b090e7b1f1d8b0f579\n\nAfter sleeping on it, [I refactored some common mixins][c4] to take advantage of\nadditional sharing opportunities I found between iOS & Android views. That\nhelped to further shrink the lines of duplicated code.\n\n[c4]: https://github.com/lmorchard/react-multiplatform/commit/ea7abb421b7e0486b2d3de42001724343f832901\n\nThis added what amounts to a new category of code sharing in my project. So,\n[I separated that code into its own module][c5] to make the distinction easier\nto see & measure.  Now, I have code shared between web and native in general,\nand code shared between the iOS and Android native platforms.\n\n[c5]: https://github.com/lmorchard/react-multiplatform/commit/cdbbff72cb941fac75f68c1c91279fa780997b26\n\nFinally, in an attempt to start automating my code metrics, [I added\n`loc-metrics.sh`][c6].\n\n[c6]: https://github.com/lmorchard/react-multiplatform/commit/d5149768e116571d0a1a059d1ff16e1cfc45fcfd\n\n## Visualizing the code metrics\n\nSo, I tried drawing some Venn diagrams in my notebook. But, I'm terrible at\ndrawing. That's when I remembered that SVG is a thing where I can draw by\nwriting code. So, [I spent an afternoon teaching myself some SVG][svgtutorial]\nand [reworked my metrics shell script][c7].\n\n[c7]: https://github.com/lmorchard/react-multiplatform/commit/0014232c9858e082414e094be021170fda19aab0\n[svgtutorial]: https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial\n\nI'm not going to bother trying to make the areas actually proportional to the\nlines of code. But, here's a rough picture of code sharing:\n\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-overall.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-models.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-views.svg\">\n\nIf you can't see those images, then you'll need to find a browser that understands\nSVG until I can be bothered to convert to PNG. (Pull requests welcome!)\n\n## Conclusions revisited\n\nAs before, most of the models code is shared between web and both native\nplatforms. What's unique is mostly boilerplate wrapping [the localStorage /\nasyncStorage split between web and native][storagesplit].\n\n[storagesplit]: http://blog.lmorchard.com/2015/07/22/react-multiplatform/#forking-sharing-model-code-for-persistence\n\nOn the view side, however, things are a bit more spread out. In a nutshell,\nReact patterns in general allow a decent chunk of code to be shared between\nweb and native. And even more code can be shared between the iOS and Android\nplatforms.\n\nBut, unique concerns in each platform - web, iOS, and Android - call for\nunique code for each case. This is not actually a failing, though: Varying the\nUX between web & iOS & Android is a flexibility you'll probably appreciate. \n\nIn other words, use components & conventions unique to each\nplatform without your app suffering from the lowest-common-denominator UX\nproblem historically found in a lot of multi-platform apps. In the case of this\nTODO app, that just boils down to trivialities like checkboxes & switches &\nsegmented controls. In a larger app, I'd expect this concern to grow.\n\nI'm being lazy and not coding up the math in percentages. This approach shared\nabout half the code from the web app, and even more than that for each of the\nnative apps. I think that's a significant advantage over writing separate\napps.\n\nOf course, [all my caveats from the first go\naround][caveats] still apply: This is a very simple app. The code devoted to\ndoing interesting things versus React boilerplate is probably not at a good\nratio. Also, as more view components arise, further overlap might be found.\nAnd, hopefully, common logic would remain the primary area of growth on the\nmodel site.\n\n[caveats]: http://blog.lmorchard.com/2015/07/22/react-multiplatform/#conclusion\n\nI think this approach toward building apps remains interesting & promising. \n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/09/21/react-native-android",
    "thumbnail": "/uploads/2015/react-native-android/shared-overall.svg"
  },
  {
    "title": "The web is awesome",
    "tags": [
      "webdev",
      "web",
      "adtech",
      "advertising",
      "internet",
      "privacy",
      "tracking"
    ],
    "year": "2015",
    "month": "08",
    "day": "07",
    "isDir": false,
    "slug": "web-awesome",
    "date": "2015-08-07T12:00:00.000Z",
    "postName": "2015-08-07-web-awesome",
    "html": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: The open web is a beautiful thing that empowers makers while offering users leverage. There&#39;s nothing else like it. It&#39;s constantly improving. It&#39;s up to you what you do with it.</p>\n<!--more-->\n\n<h2 id=\"the-beauty-of-the-open-web\">The beauty of the open web</h2>\n<p>So, here I am again, channelling my easily excited self from 1993: Man, I love the web.</p>\n<p>It&#39;s easy to take this thing for granted, but take a step back and consider it: You&#39;ve got this thing called a <a href=\"https://en.wikipedia.org/wiki/Web_browser\">browser</a>. It acts as an <a href=\"https://en.wikipedia.org/wiki/User_agent\">Agent</a> on your behalf, reaching out to computers on the Internet and requesting resources identified via <a href=\"https://en.wikipedia.org/wiki/Uniform_resource_locator\">Universal Resource Locators</a>. Looking among these resources, you&#39;d find <a href=\"https://en.wikipedia.org/wiki/Hypertext\">hypertext</a>, <a href=\"https://en.wikipedia.org/wiki/Style_sheet_(web_development)\">style sheets</a>, and <a href=\"https://en.wikipedia.org/wiki/Multimedia\">multimedia</a>.</p>\n<div class=\"pullquote\">\nSo, here I am again, channelling my easily excited self from 1993: **Man, I love the web.**\n</div>\n\n<p>Your browser comes with code that knows what to do with common types of content. But, browsers can&#39;t anticipate every invention. So, one of the supported resource content types is <a href=\"https://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>. This is a <em>meta content type</em>. That is, it offers the ability to augment existing content types and support completely new ones.</p>\n<p>Chew on <em>that</em> awhile: Not satisfied to be just a networked document viewer with a frozen set of features, browsers ship with a <a href=\"https://en.wikipedia.org/wiki/Toolchain\">toolchain</a> for running code on demand. Kind of scary, but it works way better than any reasonable person should expect.</p>\n<p>And again, thanks to the Internet, these resources can each come literally from anywhere<!-- ([even Sweden][cern]!) -->, hosted by any person or company or organization. Your browser chases URL references and collects all these disparate resources automatically. It assembles them into what is basically a zero-installation software application that&#39;s temporarily resident on your computer.</p>\n<p>We call these insane things &quot;web pages&quot;. Their negotiated &amp; ephemeral hold on our computers is why we say we only &quot;visit&quot; them. In fact, it might be more accurate to say web pages are guests we host on our computers for a short time.</p>\n<!--\nSo, yeah, I'm crazy about the web. Crazy enough to work for Mozilla and turn down every other job offer over the years because the mission aligns so well with so many of my favorite things.\n-->\n\n<h2 id=\"makers-have-power\">Makers have power</h2>\n<p>There is no other successful system like this on the planet. No other system for delivering content and software that is this open and free of gatekeepers deciding what we can publish. There&#39;s no app store, no review process, no adult supervision. You can make the most amazing or terrible things. Short of legal action or government intervention, no one can really stop you as long as you&#39;re paying the hosting bill.</p>\n<h3 id=\"build-your-own-whatever\">Build your own whatever</h3>\n<p>In fact, even though I wrote that browsers are agents acting on their users&#39; behalf - they&#39;re historically weak advocates by default. In other words, browsers do what web pages ask, with a few exceptions for safety and security. Today&#39;s open web offers the balance of control largely to publishers.</p>\n<div class=\"image-group\">\n[<img class=\"lazyload inset left\" data-src=\"/uploads/2015/the-verge-web-sucks/im-surrounded.png\">][theverge]\n[<img class=\"lazyload inset right\" data-src=\"/uploads/2015/web-awesome/oregon-trail.png\">][jsmess]\n</div>\n\n<p>No one will stop you from <a href=\"http://blog.lmorchard.com/2015/07/22/the-verge-web-sucks/\">building a magazine site loaded with spyware and ads</a>.</p>\n<p>Of course, you can also <a href=\"https://archive.org/details/softwarelibrary\">emulate old computers to make running classic software linkable and embeddable</a>.</p>\n<div class=\"image-group\">\n[<img class=\"inset left\" id=\"thumbnail\" src=\"/uploads/2015/web-awesome/troxel.png\">][troxel]\n[<img class=\"lazyload inset right\" data-src=\"/uploads/2015/web-awesome/blogger.jpeg\">][iranjail]\n</div>\n\n<p>Or you can <a href=\"https://www.reddit.com/r/TroveCreations/\">create new hats and weapons for an MMO</a>, sharing your work <a href=\"https://chrmoritz.github.io/Troxel/#m=EBAzAP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0CxQADxy7//gkAA8cu//4lAggDxy7//QIIA8cu//4lAAPHLv/+CQADxy7///0DZQIYA8cu//4hAhgDxy7//iECGAPHLv///QNlAAPHLv/+CQADxy7//iUCGAPHLv/+JQADxy7//gkAA8cu///9A7EAA8cu///9Au0CCAGAoKP8AVyQk/4IAYCgo/4dAgQBgKCj/ggCUDQ3/ALIAAP8AlA0N/4EAYCgo/4ZAAGAoKP8AlA0N/wCyAAD/gQCUDQ3/ALIAAP+BAJQNDf8AYCgo/4ZAAGAoKP+GAJQNDf8AYCgo/4ZAAFckJP+GAJQNDf8AYCgo/4ZAAGAoKP+GAJQNDf8AYCgo/4ZAAGAoKP8AlA0N/wCyAAD/AJQNDf8AsgAA/4IAlA0N/wBgKCj/hkCBAGAoKP+DAJQNDf8AsgAA/4EAYCgo/4dAAGAoKP8AVyQk/4QAYCgo//hAgQBgKCj/gQBXJCT/ggBgKCj/h0CIAGAoKP+GQIgAYCgo/4ZAiABgKCj/hkAAVyQk/4IAYCgo/wDxy7//gwBgKCj/hkAAVyQk/4cAYCgo/4ZAiABgKCj/hkCIAGAoKP+HQIEAYCgo/4EAVyQk/4IAYCgo//hAgQBgKCj/AFckJP+DAGAoKP+HQIgAYCgo/4ZAiABgKCj/hkCIAGAoKP+GQIMAYCgo/wDxy7//gwBgKCj/hkAAVyQk/4cAYCgo/4ZAAFckJP+HAGAoKP+GQIgAYCgo/4dAggBgKCj/ggBXJCT/AGAoKP/4QABgKCj/AFckJP+EAGAoKP+HQIgAYCgo/4ZAiABgKCj/hkCIAGAoKP+GQIMAYCgo/wDxy7//gwBgKCj/hkCIAGAoKP+GQABXJCT/hwBgKCj/hkAAYCgo/wBXJCT/hABgKCj/gQBXJCT/h0CEAGAoKP+BAFckJP/4QABgKCj/AFckJP+EAGAoKP+HQABgKCj/AFckJP+GAGAoKP+GQIgAYCgo/4ZAiABgKCj/hkCDAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/hkCHAGAoKP8AVyQk/4ZAAGAoKP8AVyQk/4QAYCgo/4EAVyQk/4dAhgBgKCj/+ECGAGAoKP+HQABgKCj/AFckJP+GAGAoKP+GQIgAYCgo/4ZAiABgKCj/hkCDAGAoKP8A8cu//4MAYCgo/4ZAhwBgKCj/AFckJP+GQIcAYCgo/wBXJCT/hkAAYCgo/wBXJCT/hgBgKCj/h0AAYCgo/wBXJCT/hABgKCj/+UCEAGAoKP+JQABXJCT/hQBgKCj/h0AAVyQk/4cAYCgo/4ZAhwBgKCj/AFckJP+GQIMAYCgo/wDxy7//ggBgKCj/AFckJP+GQIcAYCgo/wBXJCT/hkCIAGAoKP+HQIYAYCgo/4lAAFckJP+DAGAoKP/6QIQAYCgo/4lAhgBgKCj/h0AAVyQk/4YAYCgo/wBXJCT/hkAAVyQk/4YAYCgo/wBXJCT/hkCDAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/hkCIAGAoKP+HQIYAYCgo/4lAAGAoKP8AVyQk/4IAYCgo//pAgwBgKCj/AFckJP+JQIUAYCgo/wBXJCT/h0CHAGAoKP8AVyQk/4ZAiABgKCj/hkAAVyQk/4IAYCgo/wDxy7//gwBgKCj/hkAAVyQk/4cAYCgo/4ZAiABgKCj/h0CGAGAoKP+JQABgKCj/gQBXJCT/gQBgKCj/+kCCAGAoKP8AVyQk/wBgKCj/iUCGAGAoKP+HQIgAYCgo/4ZAiABgKCj/hkCDAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/hkAAVyQk/4cAYCgo/4dAhgBgKCj/iUCBAGAoKP+BAFckJP8AYCgo//pAgQBgKCj/gQBXJCT/AGAoKP+JQIYAYCgo/4dAiABgKCj/hkCIAGAoKP+GQIMAYCgo/wDxy7//gwBgKCj/hkCIAGAoKP+GQIgAYCgo/4dAAFckJP+FAGAoKP+JQIMAYCgo/wBXJCT/+kAAYCgo/4EAVyQk/4EAYCgo/4lAhgBgKCj/h0CIAGAoKP+GQIgAYCgo/4ZAgwBgKCj/APHLv/+DAGAoKP+GQIgAYCgo/4ZAiABgKCj/h0AAVyQk/4QAYCgo/wBXJCT/iUAAVyQk/4MAYCgo//pAgQBXJCT/ggBgKCj/iUCGAGAoKP+HQIgAYCgo/4ZAiABgKCj/hkCDAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/hkCHAGAoKP8AVyQk/4dAhgBgKCj/iUCBAFckJP+CAGAoKP/6QABXJCT/gwBgKCj/iUAAVyQk/4UAYCgo/4dAAFckJP+HAGAoKP+GQIgAYCgo/4ZAgwBgKCj/APHLv/+DAGAoKP+GQIcAYCgo/wBXJCT/hkCHAGAoKP8AVyQk/4dAhgBgKCj/iUAAYCgo/4EAVyQk/4EAYCgo//pAhABgKCj/iUCGAGAoKP+HQABXJCT/hwBgKCj/hkCHAGAoKP8AVyQk/4ZAgwBgKCj/APHLv/+CAGAoKP8AVyQk/4ZAhwBgKCj/AFckJP+GQIgAYCgo/4dAhgBgKCj/iUCBAGAoKP+BAFckJP8AYCgo//tAggBgKCj/ikCGAGAoKP+IQIYAYCgo/4dAAFckJP+GAGAoKP8AVyQk/4ZAAFckJP+CAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/h0CGAGAoKP+IQIQAYCgo/wBXJCT/AGAoKP+KQIEAYCgo/wBXJCT//ECCAGAoKP+KQIQAYCgo/4EAVyQk/4hAhQBgKCj/AFckJP+HQIgAYCgo/4ZAgwBgKCj/APHLv/+DAGAoKP+GQABXJCT/hwBgKCj/h0CGAGAoKP+IQIQAYCgo/4EAVyQk/4pAggBgKCj//0CLQIIAYCgo/4EAVyQk/4lAhgBgKCj/iECGAGAoKP+IQIIAYCgo/wDxy7//ggBgKCj/iECGAGAoKP+IQABXJCT/hABgKCj/AFckJP+JQIQAYCgo//9AmkAAYCgo/4EAVyQk/4EAYCgo/4lAAGAoKP+EAJQNDf8AYCgo/4hAAGAoKP8AsgAA/4IAlA0N/wCyAAD/AGAoKP+IQABgKCj/ALIAAP+DAJQNDf8AYCgo/4hAAGAoKP+EAJQNDf8AVyQk/4hAAFckJP+CAJQNDf8AsgAA/wCUDQ3/AFckJP+JQABXJCT/gwBgKCj//0CaQABgKCj/AFckJP+CAGAoKP+KQABgKCj/gkAAYCgo/4lAAGAoKP+BQADxy7//gUAAYCgo/4hAAGAoKP9AggDxy7//QABXJCT/iEAAYCgo/4FAAPHLv/+BQABXJCT/iUAAYCgo/4JAAGAoKP+KQABXJCT/gwBgKCj//0CbQABXJCT/gQBgKCj/i0AAVyQk/wBgKCj/QABgKCj/AFckJP+JQIEAYCgo/0AA8cu//0AAYCgo/wBXJCT/iEAAYCgo/0CCAPHLv/9AAGAoKP+IQIEAYCgo/0AA8cu//0CBAGAoKP+JQIEAYCgo/0CBAGAoKP+LQABXJCT/gQBgKCj//0CdQABgKCj/jUAAYCgo/0AAVyQk/4tAAFckJP9AAPHLv/9AAGAoKP+JQABgKCj/QIIA8cu//wBgKCj/ikAAYCgo/0AA8cu//wBgKCj/AFckJP+LQIEAYCgo/wBXJCT/jUAAVyQk//9ArkAAVyQk/41AAGAoKP8A8cu//wBgKCj/i0AAVyQk/4IA8cu//wBXJCT/i0AAYCgo/wDxy7//AFckJP+NQABgKCj//0DeQADxy7///0D+QD//AP/6/0D+QADxy7///0D+QADxy7///0D+QADxy7///0DsQADxy7//gkAA8cu//4lAhgDxy7//iUAA8cu//4JAAPHLv///QNlAggDxy7//QIIA8cu//4hAhgDxy7//iECCAPHLv/9AggDxy7///0DZQADxy7//gkAA8cu//4lAggDxy7//QIIA8cu//4lAAPHLv/+CQADxy7///0CoQA==\">as a link to a live 3D modeling tool</a>.</p>\n<p>Or you can write <a href=\"https://medium.com/matter/the-web-we-have-to-save-2eb1fe15a426\">a blog that lands you in an Iranian jail</a> for political speech.</p>\n<p>Or you can craft <a href=\"http://cabbi.bo/enough/\">a gorgeous existential narrative about luminous beings</a>.</p>\n<p><a href=\"http://cabbi.bo/enough/\"><img src=\"/uploads/2015/web-awesome/enough.png\" style=\"display: block; margin: auto; width: 66%; clear: both\"></a></p>\n<h3 style=\"clear: both\">DIY for cheap</h3>\n\n<p>And, it&#39;s never been cheaper to put something on the web. For example, <a href=\"http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">this blog lives mostly on Amazon S3</a>. My <a href=\"http://blog.lmorchard.com/2015/07/22/the-verge-web-sucks/\">last post</a> got around 55,000 unique views so far - the most attention I&#39;ve gotten in years. It looks like that&#39;s going to cost me about $6 by the end of the month. I could have probably cut that in half if I&#39;d been smarter about things.</p>\n<p>To put this in my old-person perspective: Someone once told me it was $1 or $5 to photocopy &amp; mail a single issue of a <a href=\"https://en.wikipedia.org/wiki/Zine\">zine</a>. Bump that up to $5-10 for a CD-ROM or DVD in a nice padded envelope. Holy crap. I couldn&#39;t even imagine funding a passion project centered around media like that and reaching 55,000 people across the planet.</p>\n<h2 id=\"users-have-leverage\">Users have leverage</h2>\n<p>I know I just wrote that the balance of control on the web leans mainly toward the publishers. But, users on the web <em>do</em> have leverage when they care to assert themselves.</p>\n<div class=\"pullquote right\">\nWith this choice in personalized user agents, **the relationship between reader and publisher must be negotiated**.\n</div>\n\n<h3 id=\"browser-choice\">Browser choice</h3>\n<p>First off, you have a choice in browsers. The browser market is pretty healthy right now. Once upon a time, <a href=\"https://en.wikipedia.org/wiki/Browser_wars#First_browser_war\">Microsoft Internet Explorer held 96% of the market</a>. Today, we&#39;ve got <a href=\"https://en.wikipedia.org/wiki/Browser_wars#Second_browser_war\">at least half-a-dozen browsers</a> with almost as many rendering engines under their hoods.</p>\n<p>This diversity in browsers is important, and switching cost is low on a web with shared standards. You can vote with your feet and try another browser at any time. This also hinders any single company from injecting their own proprietary features into the web and setting up tollbooths.</p>\n<h3 id=\"add-ons-and-extensions\">Add-ons and extensions</h3>\n<p>Your choice in browsers includes some that can be customized with <a href=\"https://addons.mozilla.org/en-US/firefox/\">add-ons</a> and <a href=\"https://chrome.google.com/webstore/category/extensions\">extensions</a>. This is where a browser can really shine as a personalized <a href=\"https://en.wikipedia.org/wiki/User_agent\">User Agent</a>.</p>\n<p><a href=\"https://adblockplus.org/en/about\"><img class=\"lazyload inset left wide\" data-src=\"/uploads/2015/web-awesome/adblock.png\"></a></p>\n<p>Install <a href=\"https://adblockplus.org/\">Adblock Plus</a>, and you can deflect most attempts to track you &amp; display ads.</p>\n<p>Install <a href=\"https://www.readability.com/\">Readability</a>, and you can get a cleaner view of articles you&#39;d like to read.</p>\n<p>Install <a href=\"https://www.libraryextension.com/\">Library Extension</a> and your browser will automatically tell you when a book is available at your local library while you&#39;re shopping on Amazon.</p>\n<p>You can even craft your own tweaks, if you&#39;re so inclined. In a spirit similar to the web itself, the tech to build these things is generally available to anyone.</p>\n<p>Publishers on the web sometimes deride these tweaks. It&#39;s understandable: The most popular ones have long been centered around refusing to accept many of the annoyances that also happen to fund the web.</p>\n<h3 id=\"the-web-is-a-negotiation\">The web is a negotiation</h3>\n<p>With this choice in personalized user agents, the relationship between reader and publisher must be <em>negotiated</em>. Mostly, it&#39;s a quiet negotiation by defaults: Publishers can do as much as readers accept. But, when readers introduce resistance in the form of using ad-blockers, they can impose a cost to publishers who get carried away.</p>\n<p>As I wrote before, web pages are <em>guests</em> on our computers. Most users have been very tolerant of these guests&#39; behavior. Tolerant to the point where a publisher could take for granted or even feel entitled to the bandwidth and hardware we pay for. But, it&#39;s entirely possible for this negotiation to turn sour, <a href=\"http://fredrikdeboer.com/2015/04/27/the-supervillains-guide-to-saving-the-internet/\">forcing the industry to come up with a new deal</a>.</p>\n<h2 id=\"if-its-not-the-web-its-not-the-web\">If it&#39;s not the web, it&#39;s not the web</h2>\n<p>There&#39;s a new iPhone ad out there - &quot;<a href=\"https://www.apple.com/iphone/why-theres-iphone/\">If it&#39;s not an iPhone, it&#39;s not an iPhone</a>&quot;.</p>\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/wl3PlrPq8sw\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n<p>This is one of the things the narrator says:</p>\n<blockquote>\n<p>The hardware part makes the most of the software part, and the software part makes the most of the hardware part. When you design the whole phone, all the parts work together as one amazing part.</p>\n</blockquote>\n<p>This is obviously true, and the iPhone is a great product. You can curate a smooth and &quot;magical&quot; experience, when you own a platform from bottom to top. But, the cost is that makers have less power and users have less leverage.</p>\n<h3 id=\"theres-only-one-app-store\">There&#39;s only one App Store</h3>\n<p><a href=\"http://www.comicvine.com/connor-macleod/4005-47561/\"><img class=\"lazyload inset right\" data-src=\"/uploads/2015/web-awesome/connor-macleod.jpg\"></a></p>\n<p>As gatekeepers running the one and only App Store, Apple can demand a cut of all money that flows to makers. <a href=\"https://developer.apple.com/app-store/review/guidelines/\">Apple also lists a lot of requirements</a>. Some are great ideas for users, while some serve to reinforce Apple&#39;s control over its platform.</p>\n<!-- more to say about makers? -->\n\n<p>As a user, you can somewhat customize your iPhone by the apps you install. As of iOS 8, there are also <a href=\"http://arstechnica.com/apple/2014/06/explaining-ios-8s-extensions-opening-the-platform-while-keeping-it-secure/\">App Extensions</a> that allow you to add selected bits of new functionality to existing apps.</p>\n<p>But, there are limits: For instance, did you know that despite there being many apps that let you browse the web, <a href=\"http://www.howtogeek.com/184283/why-third-party-browsers-will-always-be-inferior-to-safari-on-iphone-and-ipad/\">there&#39;s really only one web engine</a> on iOS? (&quot;<a href=\"https://developer.apple.com/app-store/review/guidelines/\">2.17 Apps that browse the web must use the iOS WebKit framework and WebKit Javascript</a>&quot;)</p>\n<h3 id=\"leverage-constrained\">Leverage constrained</h3>\n<p>Luckily, users of iOS 9 will soon benefit from <a href=\"http://appleinsider.com/articles/15/06/15/inside-app-extensions-webkit-content-blockers-extend-user-privacy-in-ios-9-safari-9\">Content Blocker App Extensions</a> in Safari. These an improvement on filter lists for <a href=\"https://adblockplus.org/\">AdBlock Plus</a>: The extensions consist of JSON files containing patterns &amp; rules used to block requests and selectively remove content from pages.</p>\n<p>Outside of Safari and the constrained world of App Extensions, though, users don&#39;t have much leverage over what apps makers do. If you don&#39;t like it, don&#39;t install it. There&#39;s no view source or built-in developer tools, so even power users mainly rely on Apple to monitor apps.</p>\n<h3 id=\"black-boxes-all-the-way-down\">Black boxes all the way down</h3>\n<p>There&#39;s also the matter of apps being their own mini-silos. They don&#39;t have the spontaneous linkability of the web. Sure, <a href=\"http://applinks.org/\">some efforts have been made</a> with regard to that, but it&#39;s kind of an awkward bolt-on rather than something inherent to the fabric of it all.</p>\n<p>On top of linkability, the web also offers <em>composability</em>. That is, you can embed resources and scripts from other sites. For example, there was a YouTube video just a few paragraphs ago and there&#39;s a Disqus-driven comment section at the end of this post.</p>\n<p>Or, check out this tweet:</p>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Current cat status: Cheddars and Catsby Cheddarsson <a href=\"http://t.co/9y9Q2uDwxb\">pic.twitter.com/9y9Q2uDwxb</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/628683951629029376\">August 4, 2015</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>Or, hey, want to try a game of Oregon Trail?</p>\n<iframe class=\"lazyload\" data-src=\"https://archive.org/embed/msdos_Oregon_Trail_Deluxe_The_1992\" width=\"560\" height=\"384\" frameborder=\"0\" webkitallowfullscreen=\"true\" mozallowfullscreen=\"true\" allowfullscreen></iframe>\n\n<p>In an app, it&#39;s hard to mix content from totally different sites together like this. At least, not without a lot of preparation at the top or just punting off to an embedded web browser. Me, I didn&#39;t write any of the code to make a tweet or an MS-DOS emulator work on this page.</p>\n<h3 id=\"you-cant-take-it-with-you\">You can&#39;t take it with you</h3>\n<p>As something that affects a normal busy person, this is the strongest argument I have against apps in Apple&#39;s ecosystem: If you don&#39;t like any part of it, your only move is not to play.</p>\n<p>Like the ad says, the hardware part and the software part are inseparable. But, if you ever decide to leave once you&#39;ve been inside, you leave behind what you bought while you were there. This is why I&#39;ve owned iPods, but never an iPhone.</p>\n<h2 id=\"the-web-is-learning-from-apps\">The web is learning from apps</h2>\n<p>Even after writing that last section, though, I&#39;m hard pressed to make a case against apps. Apps solve a lot of problems we&#39;ve had on the web. Installation versus a temporary visit can make things work better. User interfaces tend to be simpler &amp; more focused - something which Apple in particular is inclined to enforce &amp; curate. Monetization is better - there aren&#39;t as many trackers &amp; ads.</p>\n<p>Most of the problems apps solve <em>can</em> be solved on the web. Some of them are technological, but some of them are more a matter of perspective and assumptions.</p>\n<div class=\"pullquote right\">\nMost of the problems apps solve **can be solved on the web**.\n</div>\n\n<h3 id=\"permanence--integration\">Permanence &amp; Integration</h3>\n<p>If this page was an app, you might install it. But, that&#39;s an explicit up front commitment. And you have to remember to uninstall it later. What if web pages could do that implicitly and <a href=\"https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/\">maybe even ask nicely - <em>after a few visits</em> - if you&#39;d like to make the relationship more explicit by pinning it to your home screen</a>?</p>\n<p>We have technologies on the horizon like <a href=\"http://www.html5rocks.com/en/tutorials/service-worker/introduction/\">Service Workers</a> and <a href=\"https://brendaneich.com/2015/06/from-asm-js-to-webassembly/\">WebAssembly</a> that can make web pages more persistent and efficient by downloading optimized content &amp; code and making it available offline. Web pages can ask for expanded access to your device through <a href=\"https://developer.mozilla.org/en-US/docs/WebAPI\">WebAPIs</a>. This includes things like <a href=\"https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android?hl=en\">an icon on your home screen</a>, running in the background, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API\">displaying notifications</a>.</p>\n<p>In other words, we&#39;re very close to a state where web pages can have benefits of installed native apps while retaining the maker power and user leverage of the open web.</p>\n<h3 id=\"the-web-deserves-a-cleaner-slate\">The web deserves a cleaner slate</h3>\n<p>Lots of developers are after a <a href=\"http://jankfree.org/\">jank free</a>, <a href=\"http://engineering.flipboard.com/2015/02/mobile-web/\">60 frames-per-second</a> experience. That&#39;s where many native apps can shine and it&#39;s great. I think the mobile web is entirely capable of it. We&#39;ve got <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions\">hardware-accelerated CSS transitions</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\">flexbox</a> to help with fast, flexible user interfaces. We&#39;ve got <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">Web Workers</a> to shove work off onto separate threads to help keep things smooth.</p>\n<div class=\"pullquote\">\nWhen you're making an app, most of the time you're forced to **start fresh and work within app constraints**.\n</div>\n\n<p>I think a helpful thing is start with a <a href=\"https://codemyviews.com/blog/mobilefirst\">clean mobile-first slate</a>. Maybe more important than the <em>mobile</em> is the <strong>clean slate</strong>:</p>\n<p>It&#39;s easy to start with a years&#39; old web site and just slap a few extra styles &amp; scripts on. When you&#39;re making an app, most of the time you&#39;re <em>forced</em> to start fresh and work within app constraints. I think that&#39;s a huge advantage for the experience that I haven&#39;t seen a lot of folks talk about.</p>\n<p>Hell, <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript\">make a fresh effort to see what&#39;s out there</a>. Skip the crowd of JS frameworks for a bit. Take a look at <a href=\"http://vanilla-js.com/\">Vanilla JS</a>. You might be surprised at how much you can get done these days without even jQuery onboard.</p>\n<p>Accept cutting off or (ideally) shipping a reduced experience to older browsers, and you might be surprised what you can make happen on modern browsers. Even better, get your <a href=\"http://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement\">progressive enhancement</a> game on.</p>\n<h3 id=\"monetization-is-hard-without-a-gatekeeper\">Monetization is hard without a gatekeeper</h3>\n<p>As for monetization, well, that&#39;s a can of worms. More persistent web pages <em>will</em> help solve <a href=\"http://blog.lmorchard.com/2015/07/22/the-verge-web-sucks/\">the problem of the continually re-downloaded 7MB of JavaScript tracking you and showing ads</a>. But, if that stuff causes less of a drag, will we really care quite as much?</p>\n<p><a href=\"http://amzn.to/1MTayLa\"><img class=\"lazyload inset right\" data-src=\"/uploads/2015/web-awesome/who-owns-the-future.jpg\"></a></p>\n<p>Maybe not. If performance &amp; surveillance concerns are decoupled, we might not notice a problem. I mean, native apps <a href=\"http://www.google.com/analytics/mobile/\">track</a> <a href=\"https://developer.apple.com/app-store/app-analytics/\">us</a> <a href=\"https://developers.facebook.com/products/analytics/\">too</a>, and we don&#39;t seem to care. Though, I suppose the siloed nature of apps might make it a little harder to follow you everywhere you go. (I wouldn&#39;t count on that, though.)</p>\n<p>I don&#39;t really have great ideas, here. I pay for some stuff, I don&#39;t pay for some other stuff. I&#39;m honestly not 100% against ads, though I think we could use fewer of them.</p>\n<p>Without an App Store as a gateway, though, the same old revenue problems persist. And still, <a href=\"https://en.wikipedia.org/wiki/There_ain&#39;t_no_such_thing_as_a_free_lunch\">there ain&#39;t no such thing as a free lunch</a>. In fact, folks like <a href=\"http://transcopyright.org/hcoinRemarks-D28.html\">Ted Nelson</a> and <a href=\"http://www.niemanlab.org/2013/05/jaron-lanier-wants-to-build-a-new-middle-class-on-micropayments/\">Jaron Lanier</a> have been saying for years (and decades) that the free-of-charge web is failing itself and all of us. Maybe we need a web with more robust two-way links that track provenance and distribute wealth.</p>\n<p>(For what it&#39;s worth, <a href=\"http://decafbad.com/blog/2002/11/11/ooocba/\">I made fun of Ted Nelson &amp; Xanadu</a> once upon a time. But, since then I&#39;ve read more about his work and realize how off base I was.)</p>\n<h2 id=\"wrapping-up\">Wrapping up</h2>\n<p>Mostly, what I meant to do here was to write a love letter to the web. To try to capture what about it has captured me for the bulk of my career so far. Oh, and maybe to say a few things about now and future challenges. I&#39;ve got a few ideas, but certainly not all the answers.</p>\n<p>I think things look bright, despite <a href=\"http://www.wired.com/2010/08/ff_webrip/\">many</a> <a href=\"http://www.wired.com/insights/2014/02/web-dead/\">exaggerated</a> <a href=\"http://www.wsj.com/articles/the-web-is-dying-apps-are-killing-it-1416169934\">attempts</a> <a href=\"http://www.businessinsider.com/the-mobile-web-is-dead-its-all-about-apps-2014-4\">to declare</a> <a href=\"http://christianheilmann.com/2014/05/10/tedx-thessaloniki-the-web-is-dead/\">the web&#39;s demise</a>. Most of the issues with the web stem from what we do with it, not necessarily from what it can (or can&#39;t) do. The creative constraints and curation of app ecosystems have forced us to build better mobile experiences, and we&#39;ve expanded the capabilities of the web in response.</p>\n<p>My hope is that we can take fresh looks at the web and revisit its unique capabilities. There&#39;s a ton of value in the <a href=\"https://paul.kinlan.me/slice-the-web/\">secure, linkable, indexable, composable, and ephemeral</a> facets of the open web that closed app silos just can&#39;t match.</p>\n",
    "body": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nTL;DR: The open web is a beautiful thing that empowers makers while offering users leverage. There's nothing else like it. It's constantly improving. It's up to you what you do with it.\n\n<!--more-->\n\n## The beauty of the open web\n\nSo, here I am again, channelling my easily excited self from 1993: Man, I love the web.\n\nIt's easy to take this thing for granted, but take a step back and consider it: You've got this thing called a [browser][]. It acts as an [Agent][] on your behalf, reaching out to computers on the Internet and requesting resources identified via [Universal Resource Locators][url]. Looking among these resources, you'd find [hypertext][], [style sheets][], and [multimedia][].\n\n[url]: https://en.wikipedia.org/wiki/Uniform_resource_locator\n[browser]: https://en.wikipedia.org/wiki/Web_browser\n[agent]: https://en.wikipedia.org/wiki/User_agent\n[hypertext]: https://en.wikipedia.org/wiki/Hypertext\n[style sheets]: https://en.wikipedia.org/wiki/Style_sheet_(web_development)\n[multimedia]: https://en.wikipedia.org/wiki/Multimedia\n\n<div class=\"pullquote\">\nSo, here I am again, channelling my easily excited self from 1993: **Man, I love the web.**\n</div>\n\nYour browser comes with code that knows what to do with common types of content. But, browsers can't anticipate every invention. So, one of the supported resource content types is [JavaScript][]. This is a *meta content type*. That is, it offers the ability to augment existing content types and support completely new ones.\n\n[javascript]: https://en.wikipedia.org/wiki/JavaScript\n\nChew on *that* awhile: Not satisfied to be just a networked document viewer with a frozen set of features, browsers ship with a [toolchain][] for running code on demand. Kind of scary, but it works way better than any reasonable person should expect.\n\n[toolchain]: https://en.wikipedia.org/wiki/Toolchain\n\nAnd again, thanks to the Internet, these resources can each come literally from anywhere<!-- ([even Sweden][cern]!) -->, hosted by any person or company or organization. Your browser chases URL references and collects all these disparate resources automatically. It assembles them into what is basically a zero-installation software application that's temporarily resident on your computer.\n\n[cern]: http://home.web.cern.ch/\n\nWe call these insane things \"web pages\". Their negotiated & ephemeral hold on our computers is why we say we only \"visit\" them. In fact, it might be more accurate to say web pages are guests we host on our computers for a short time.\n\n<!--\nSo, yeah, I'm crazy about the web. Crazy enough to work for Mozilla and turn down every other job offer over the years because the mission aligns so well with so many of my favorite things.\n-->\n\n[gopher]: https://en.wikipedia.org/wiki/Gopher_(protocol)\n[zen]: https://www.cs.indiana.edu/docproject/zen/zen-1.0_toc.html\n\n[newlydigital]: http://blog.lmorchard.com/2003/06/13/newly-digital/\n\n## Makers have power\n\nThere is no other successful system like this on the planet. No other system for delivering content and software that is this open and free of gatekeepers deciding what we can publish. There's no app store, no review process, no adult supervision. You can make the most amazing or terrible things. Short of legal action or government intervention, no one can really stop you as long as you're paying the hosting bill.\n\n### Build your own whatever\n\nIn fact, even though I wrote that browsers are agents acting on their users' behalf - they're historically weak advocates by default. In other words, browsers do what web pages ask, with a few exceptions for safety and security. Today's open web offers the balance of control largely to publishers.\n\n<div class=\"image-group\">\n[<img class=\"lazyload inset left\" data-src=\"/uploads/2015/the-verge-web-sucks/im-surrounded.png\">][theverge]\n[<img class=\"lazyload inset right\" data-src=\"/uploads/2015/web-awesome/oregon-trail.png\">][jsmess]\n</div>\n\nNo one will stop you from [building a magazine site loaded with spyware and ads][theverge].\n\nOf course, you can also [emulate old computers to make running classic software linkable and embeddable][jsmess].\n\n<div class=\"image-group\">\n[<img class=\"inset left\" id=\"thumbnail\" src=\"/uploads/2015/web-awesome/troxel.png\">][troxel]\n[<img class=\"lazyload inset right\" data-src=\"/uploads/2015/web-awesome/blogger.jpeg\">][iranjail]\n</div>\n\nOr you can [create new hats and weapons for an MMO][trovecreations], sharing your work [as a link to a live 3D modeling tool][troxel].\n\nOr you can write [a blog that lands you in an Iranian jail][iranjail] for political speech.\n\nOr you can craft [a gorgeous existential narrative about luminous beings][enough].\n\n[<img src=\"/uploads/2015/web-awesome/enough.png\" style=\"display: block; margin: auto; width: 66%; clear: both\">][enough]\n\n[troxel]: https://chrmoritz.github.io/Troxel/#m=EBAzAP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0D/QP9A/0CxQADxy7//gkAA8cu//4lAggDxy7//QIIA8cu//4lAAPHLv/+CQADxy7///0DZQIYA8cu//4hAhgDxy7//iECGAPHLv///QNlAAPHLv/+CQADxy7//iUCGAPHLv/+JQADxy7//gkAA8cu///9A7EAA8cu///9Au0CCAGAoKP8AVyQk/4IAYCgo/4dAgQBgKCj/ggCUDQ3/ALIAAP8AlA0N/4EAYCgo/4ZAAGAoKP8AlA0N/wCyAAD/gQCUDQ3/ALIAAP+BAJQNDf8AYCgo/4ZAAGAoKP+GAJQNDf8AYCgo/4ZAAFckJP+GAJQNDf8AYCgo/4ZAAGAoKP+GAJQNDf8AYCgo/4ZAAGAoKP8AlA0N/wCyAAD/AJQNDf8AsgAA/4IAlA0N/wBgKCj/hkCBAGAoKP+DAJQNDf8AsgAA/4EAYCgo/4dAAGAoKP8AVyQk/4QAYCgo//hAgQBgKCj/gQBXJCT/ggBgKCj/h0CIAGAoKP+GQIgAYCgo/4ZAiABgKCj/hkAAVyQk/4IAYCgo/wDxy7//gwBgKCj/hkAAVyQk/4cAYCgo/4ZAiABgKCj/hkCIAGAoKP+HQIEAYCgo/4EAVyQk/4IAYCgo//hAgQBgKCj/AFckJP+DAGAoKP+HQIgAYCgo/4ZAiABgKCj/hkCIAGAoKP+GQIMAYCgo/wDxy7//gwBgKCj/hkAAVyQk/4cAYCgo/4ZAAFckJP+HAGAoKP+GQIgAYCgo/4dAggBgKCj/ggBXJCT/AGAoKP/4QABgKCj/AFckJP+EAGAoKP+HQIgAYCgo/4ZAiABgKCj/hkCIAGAoKP+GQIMAYCgo/wDxy7//gwBgKCj/hkCIAGAoKP+GQABXJCT/hwBgKCj/hkAAYCgo/wBXJCT/hABgKCj/gQBXJCT/h0CEAGAoKP+BAFckJP/4QABgKCj/AFckJP+EAGAoKP+HQABgKCj/AFckJP+GAGAoKP+GQIgAYCgo/4ZAiABgKCj/hkCDAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/hkCHAGAoKP8AVyQk/4ZAAGAoKP8AVyQk/4QAYCgo/4EAVyQk/4dAhgBgKCj/+ECGAGAoKP+HQABgKCj/AFckJP+GAGAoKP+GQIgAYCgo/4ZAiABgKCj/hkCDAGAoKP8A8cu//4MAYCgo/4ZAhwBgKCj/AFckJP+GQIcAYCgo/wBXJCT/hkAAYCgo/wBXJCT/hgBgKCj/h0AAYCgo/wBXJCT/hABgKCj/+UCEAGAoKP+JQABXJCT/hQBgKCj/h0AAVyQk/4cAYCgo/4ZAhwBgKCj/AFckJP+GQIMAYCgo/wDxy7//ggBgKCj/AFckJP+GQIcAYCgo/wBXJCT/hkCIAGAoKP+HQIYAYCgo/4lAAFckJP+DAGAoKP/6QIQAYCgo/4lAhgBgKCj/h0AAVyQk/4YAYCgo/wBXJCT/hkAAVyQk/4YAYCgo/wBXJCT/hkCDAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/hkCIAGAoKP+HQIYAYCgo/4lAAGAoKP8AVyQk/4IAYCgo//pAgwBgKCj/AFckJP+JQIUAYCgo/wBXJCT/h0CHAGAoKP8AVyQk/4ZAiABgKCj/hkAAVyQk/4IAYCgo/wDxy7//gwBgKCj/hkAAVyQk/4cAYCgo/4ZAiABgKCj/h0CGAGAoKP+JQABgKCj/gQBXJCT/gQBgKCj/+kCCAGAoKP8AVyQk/wBgKCj/iUCGAGAoKP+HQIgAYCgo/4ZAiABgKCj/hkCDAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/hkAAVyQk/4cAYCgo/4dAhgBgKCj/iUCBAGAoKP+BAFckJP8AYCgo//pAgQBgKCj/gQBXJCT/AGAoKP+JQIYAYCgo/4dAiABgKCj/hkCIAGAoKP+GQIMAYCgo/wDxy7//gwBgKCj/hkCIAGAoKP+GQIgAYCgo/4dAAFckJP+FAGAoKP+JQIMAYCgo/wBXJCT/+kAAYCgo/4EAVyQk/4EAYCgo/4lAhgBgKCj/h0CIAGAoKP+GQIgAYCgo/4ZAgwBgKCj/APHLv/+DAGAoKP+GQIgAYCgo/4ZAiABgKCj/h0AAVyQk/4QAYCgo/wBXJCT/iUAAVyQk/4MAYCgo//pAgQBXJCT/ggBgKCj/iUCGAGAoKP+HQIgAYCgo/4ZAiABgKCj/hkCDAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/hkCHAGAoKP8AVyQk/4dAhgBgKCj/iUCBAFckJP+CAGAoKP/6QABXJCT/gwBgKCj/iUAAVyQk/4UAYCgo/4dAAFckJP+HAGAoKP+GQIgAYCgo/4ZAgwBgKCj/APHLv/+DAGAoKP+GQIcAYCgo/wBXJCT/hkCHAGAoKP8AVyQk/4dAhgBgKCj/iUAAYCgo/4EAVyQk/4EAYCgo//pAhABgKCj/iUCGAGAoKP+HQABXJCT/hwBgKCj/hkCHAGAoKP8AVyQk/4ZAgwBgKCj/APHLv/+CAGAoKP8AVyQk/4ZAhwBgKCj/AFckJP+GQIgAYCgo/4dAhgBgKCj/iUCBAGAoKP+BAFckJP8AYCgo//tAggBgKCj/ikCGAGAoKP+IQIYAYCgo/4dAAFckJP+GAGAoKP8AVyQk/4ZAAFckJP+CAGAoKP8A8cu//4MAYCgo/4ZAiABgKCj/h0CGAGAoKP+IQIQAYCgo/wBXJCT/AGAoKP+KQIEAYCgo/wBXJCT//ECCAGAoKP+KQIQAYCgo/4EAVyQk/4hAhQBgKCj/AFckJP+HQIgAYCgo/4ZAgwBgKCj/APHLv/+DAGAoKP+GQABXJCT/hwBgKCj/h0CGAGAoKP+IQIQAYCgo/4EAVyQk/4pAggBgKCj//0CLQIIAYCgo/4EAVyQk/4lAhgBgKCj/iECGAGAoKP+IQIIAYCgo/wDxy7//ggBgKCj/iECGAGAoKP+IQABXJCT/hABgKCj/AFckJP+JQIQAYCgo//9AmkAAYCgo/4EAVyQk/4EAYCgo/4lAAGAoKP+EAJQNDf8AYCgo/4hAAGAoKP8AsgAA/4IAlA0N/wCyAAD/AGAoKP+IQABgKCj/ALIAAP+DAJQNDf8AYCgo/4hAAGAoKP+EAJQNDf8AVyQk/4hAAFckJP+CAJQNDf8AsgAA/wCUDQ3/AFckJP+JQABXJCT/gwBgKCj//0CaQABgKCj/AFckJP+CAGAoKP+KQABgKCj/gkAAYCgo/4lAAGAoKP+BQADxy7//gUAAYCgo/4hAAGAoKP9AggDxy7//QABXJCT/iEAAYCgo/4FAAPHLv/+BQABXJCT/iUAAYCgo/4JAAGAoKP+KQABXJCT/gwBgKCj//0CbQABXJCT/gQBgKCj/i0AAVyQk/wBgKCj/QABgKCj/AFckJP+JQIEAYCgo/0AA8cu//0AAYCgo/wBXJCT/iEAAYCgo/0CCAPHLv/9AAGAoKP+IQIEAYCgo/0AA8cu//0CBAGAoKP+JQIEAYCgo/0CBAGAoKP+LQABXJCT/gQBgKCj//0CdQABgKCj/jUAAYCgo/0AAVyQk/4tAAFckJP9AAPHLv/9AAGAoKP+JQABgKCj/QIIA8cu//wBgKCj/ikAAYCgo/0AA8cu//wBgKCj/AFckJP+LQIEAYCgo/wBXJCT/jUAAVyQk//9ArkAAVyQk/41AAGAoKP8A8cu//wBgKCj/i0AAVyQk/4IA8cu//wBXJCT/i0AAYCgo/wDxy7//AFckJP+NQABgKCj//0DeQADxy7///0D+QD//AP/6/0D+QADxy7///0D+QADxy7///0D+QADxy7///0DsQADxy7//gkAA8cu//4lAhgDxy7//iUAA8cu//4JAAPHLv///QNlAggDxy7//QIIA8cu//4hAhgDxy7//iECCAPHLv/9AggDxy7///0DZQADxy7//gkAA8cu//4lAggDxy7//QIIA8cu//4lAAPHLv/+CQADxy7///0CoQA==\n[trovecreations]: https://www.reddit.com/r/TroveCreations/\n[iranjail]: https://medium.com/matter/the-web-we-have-to-save-2eb1fe15a426\n[jsmess]: https://archive.org/details/softwarelibrary\n[sharkcat]: https://www.youtube.com/watch?v=tLt5rBfNucc\n[enough]: http://cabbi.bo/enough/\n[theverge]: http://blog.lmorchard.com/2015/07/22/the-verge-web-sucks/\n[ue4]: https://blog.mozilla.org/blog/2014/03/12/mozilla-and-epic-preview-unreal-engine-4-running-in-firefox/\n\n<h3 style=\"clear: both\">DIY for cheap</h3>\n\nAnd, it's never been cheaper to put something on the web. For example, [this blog lives mostly on Amazon S3][s3blog]. My [last post][theverge] got around 55,000 unique views so far - the most attention I've gotten in years. It looks like that's going to cost me about $6 by the end of the month. I could have probably cut that in half if I'd been smarter about things.\n\n[s3blog]: http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\n\nTo put this in my old-person perspective: Someone once told me it was $1 or $5 to photocopy & mail a single issue of a [zine][]. Bump that up to $5-10 for a CD-ROM or DVD in a nice padded envelope. Holy crap. I couldn't even imagine funding a passion project centered around media like that and reaching 55,000 people across the planet.\n\n[zine]: https://en.wikipedia.org/wiki/Zine\n\n## Users have leverage\n\nI know I just wrote that the balance of control on the web leans mainly toward the publishers. But, users on the web *do* have leverage when they care to assert themselves.\n\n<div class=\"pullquote right\">\nWith this choice in personalized user agents, **the relationship between reader and publisher must be negotiated**.\n</div>\n\n### Browser choice\n\nFirst off, you have a choice in browsers. The browser market is pretty healthy right now. Once upon a time, [Microsoft Internet Explorer held 96% of the market][msie96]. Today, we've got [at least half-a-dozen browsers][browserstoday] with almost as many rendering engines under their hoods.\n\nThis diversity in browsers is important, and switching cost is low on a web with shared standards. You can vote with your feet and try another browser at any time. This also hinders any single company from injecting their own proprietary features into the web and setting up tollbooths.\n\n[msie96]: https://en.wikipedia.org/wiki/Browser_wars#First_browser_war\n[browserstoday]: https://en.wikipedia.org/wiki/Browser_wars#Second_browser_war\n\n### Add-ons and extensions\n\nYour choice in browsers includes some that can be customized with [add-ons][] and [extensions][]. This is where a browser can really shine as a personalized [User Agent][].\n\n[<img class=\"lazyload inset left wide\" data-src=\"/uploads/2015/web-awesome/adblock.png\">][about-adblock]\n\n[about-adblock]: https://adblockplus.org/en/about\n\nInstall [Adblock Plus][], and you can deflect most attempts to track you & display ads.\n\nInstall [Readability][], and you can get a cleaner view of articles you'd like to read.\n\nInstall [Library Extension][] and your browser will automatically tell you when a book is available at your local library while you're shopping on Amazon.\n\nYou can even craft your own tweaks, if you're so inclined. In a spirit similar to the web itself, the tech to build these things is generally available to anyone.\n\nPublishers on the web sometimes deride these tweaks. It's understandable: The most popular ones have long been centered around refusing to accept many of the annoyances that also happen to fund the web.\n\n### The web is a negotiation\n\nWith this choice in personalized user agents, the relationship between reader and publisher must be *negotiated*. Mostly, it's a quiet negotiation by defaults: Publishers can do as much as readers accept. But, when readers introduce resistance in the form of using ad-blockers, they can impose a cost to publishers who get carried away.\n\nAs I wrote before, web pages are *guests* on our computers. Most users have been very tolerant of these guests' behavior. Tolerant to the point where a publisher could take for granted or even feel entitled to the bandwidth and hardware we pay for. But, it's entirely possible for this negotiation to turn sour, [forcing the industry to come up with a new deal][savingtheinternet].\n\n[savingtheinternet]: http://fredrikdeboer.com/2015/04/27/the-supervillains-guide-to-saving-the-internet/\n[library extension]: https://www.libraryextension.com/\n[extensions]: https://chrome.google.com/webstore/category/extensions\n[add-ons]: https://addons.mozilla.org/en-US/firefox/\n[readability]: https://www.readability.com/\n[adblock plus]: https://adblockplus.org/\n[User Agent]: https://en.wikipedia.org/wiki/User_agent\n\n## If it's not the web, it's not the web\n\nThere's a new iPhone ad out there - \"[If it's not an iPhone, it's not an iPhone][iphonead]\".\n\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/wl3PlrPq8sw\" frameborder=\"0\" allowfullscreen></iframe></div>\n\nThis is one of the things the narrator says:\n\n> The hardware part makes the most of the software part, and the software part makes the most of the hardware part. When you design the whole phone, all the parts work together as one amazing part.\n\nThis is obviously true, and the iPhone is a great product. You can curate a smooth and \"magical\" experience, when you own a platform from bottom to top. But, the cost is that makers have less power and users have less leverage.\n\n### There's only one App Store\n\n[<img class=\"lazyload inset right\" data-src=\"/uploads/2015/web-awesome/connor-macleod.jpg\">][connor-macleod]\n\n[connor-macleod]: http://www.comicvine.com/connor-macleod/4005-47561/\n\nAs gatekeepers running the one and only App Store, Apple can demand a cut of all money that flows to makers. [Apple also lists a lot of requirements][appguidelines]. Some are great ideas for users, while some serve to reinforce Apple's control over its platform.\n\n<!-- more to say about makers? -->\n\nAs a user, you can somewhat customize your iPhone by the apps you install. As of iOS 8, there are also [App Extensions][appextensions] that allow you to add selected bits of new functionality to existing apps.\n\nBut, there are limits: For instance, did you know that despite there being many apps that let you browse the web, [there's really only one web engine][onebrowser] on iOS? (\"[2.17 Apps that browse the web must use the iOS WebKit framework and WebKit Javascript][appguidelines]\")\n\n### Leverage constrained\n\nLuckily, users of iOS 9 will soon benefit from [Content Blocker App Extensions][contentblocksafari] in Safari. These an improvement on filter lists for [AdBlock Plus][]: The extensions consist of JSON files containing patterns & rules used to block requests and selectively remove content from pages.\n\nOutside of Safari and the constrained world of App Extensions, though, users don't have much leverage over what apps makers do. If you don't like it, don't install it. There's no view source or built-in developer tools, so even power users mainly rely on Apple to monitor apps.\n\n[appextensions]: http://arstechnica.com/apple/2014/06/explaining-ios-8s-extensions-opening-the-platform-while-keeping-it-secure/\n\n[contentblocksafari]: http://appleinsider.com/articles/15/06/15/inside-app-extensions-webkit-content-blockers-extend-user-privacy-in-ios-9-safari-9\n[onebrowser]: http://www.howtogeek.com/184283/why-third-party-browsers-will-always-be-inferior-to-safari-on-iphone-and-ipad/\n[appguidelines]: https://developer.apple.com/app-store/review/guidelines/\n[iphonead]: https://www.apple.com/iphone/why-theres-iphone/\n\n### Black boxes all the way down\n\nThere's also the matter of apps being their own mini-silos. They don't have the spontaneous linkability of the web. Sure, [some efforts have been made][applinks] with regard to that, but it's kind of an awkward bolt-on rather than something inherent to the fabric of it all.\n\nOn top of linkability, the web also offers *composability*. That is, you can embed resources and scripts from other sites. For example, there was a YouTube video just a few paragraphs ago and there's a Disqus-driven comment section at the end of this post.\n\nOr, check out this tweet:\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Current cat status: Cheddars and Catsby Cheddarsson <a href=\"http://t.co/9y9Q2uDwxb\">pic.twitter.com/9y9Q2uDwxb</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/628683951629029376\">August 4, 2015</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nOr, hey, want to try a game of Oregon Trail?\n\n<iframe class=\"lazyload\" data-src=\"https://archive.org/embed/msdos_Oregon_Trail_Deluxe_The_1992\" width=\"560\" height=\"384\" frameborder=\"0\" webkitallowfullscreen=\"true\" mozallowfullscreen=\"true\" allowfullscreen></iframe>\n\nIn an app, it's hard to mix content from totally different sites together like this. At least, not without a lot of preparation at the top or just punting off to an embedded web browser. Me, I didn't write any of the code to make a tweet or an MS-DOS emulator work on this page.\n\n### You can't take it with you\n\nAs something that affects a normal busy person, this is the strongest argument I have against apps in Apple's ecosystem: If you don't like any part of it, your only move is not to play.\n\nLike the ad says, the hardware part and the software part are inseparable. But, if you ever decide to leave once you've been inside, you leave behind what you bought while you were there. This is why I've owned iPods, but never an iPhone.\n\n[applinks]: http://applinks.org/\n\n## The web is learning from apps\n\nEven after writing that last section, though, I'm hard pressed to make a case against apps. Apps solve a lot of problems we've had on the web. Installation versus a temporary visit can make things work better. User interfaces tend to be simpler & more focused - something which Apple in particular is inclined to enforce & curate. Monetization is better - there aren't as many trackers & ads.\n\nMost of the problems apps solve *can* be solved on the web. Some of them are technological, but some of them are more a matter of perspective and assumptions.\n\n<div class=\"pullquote right\">\nMost of the problems apps solve **can be solved on the web**.\n</div>\n\n### Permanence & Integration\n\nIf this page was an app, you might install it. But, that's an explicit up front commitment. And you have to remember to uninstall it later. What if web pages could do that implicitly and [maybe even ask nicely - *after a few visits* - if you'd like to make the relationship more explicit by pinning it to your home screen][progressiveapps]?\n\nWe have technologies on the horizon like [Service Workers][] and [WebAssembly][] that can make web pages more persistent and efficient by downloading optimized content & code and making it available offline. Web pages can ask for expanded access to your device through [WebAPIs][]. This includes things like [an icon on your home screen][installbanners], running in the background, and [displaying notifications][notifications].\n\nIn other words, we're very close to a state where web pages can have benefits of installed native apps while retaining the maker power and user leverage of the open web.\n\n[notifications]: https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API\n[installbanners]: https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android?hl=en\n[webapis]: https://developer.mozilla.org/en-US/docs/WebAPI\n[webassembly]: https://brendaneich.com/2015/06/from-asm-js-to-webassembly/\n[service workers]: http://www.html5rocks.com/en/tutorials/service-worker/introduction/\n[progressiveapps]: https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/\n\n### The web deserves a cleaner slate\n\nLots of developers are after a [jank free][], [60 frames-per-second][60fps] experience. That's where many native apps can shine and it's great. I think the mobile web is entirely capable of it. We've got [hardware-accelerated CSS transitions][csstransitions] and [flexbox][] to help with fast, flexible user interfaces. We've got [Web Workers][] to shove work off onto separate threads to help keep things smooth.\n\n[Web Workers]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\n[flexbox]: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes\n[csstransitions]: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_transitions\n\n<div class=\"pullquote\">\nWhen you're making an app, most of the time you're forced to **start fresh and work within app constraints**.\n</div>\n\nI think a helpful thing is start with a [clean mobile-first slate][mobilefirst]. Maybe more important than the *mobile* is the **clean slate**:\n\nIt's easy to start with a years' old web site and just slap a few extra styles & scripts on. When you're making an app, most of the time you're *forced* to start fresh and work within app constraints. I think that's a huge advantage for the experience that I haven't seen a lot of folks talk about.\n\n[mobilefirst]: https://codemyviews.com/blog/mobilefirst\n[jank free]: http://jankfree.org/\n[60fps]: http://engineering.flipboard.com/2015/02/mobile-web/\n\nHell, [make a fresh effort to see what's out there][mdnjs]. Skip the crowd of JS frameworks for a bit. Take a look at [Vanilla JS][vanilla]. You might be surprised at how much you can get done these days without even jQuery onboard.\n\nAccept cutting off or (ideally) shipping a reduced experience to older browsers, and you might be surprised what you can make happen on modern browsers. Even better, get your [progressive enhancement][] game on.\n\n[progressive enhancement]: http://www.w3.org/wiki/Graceful_degradation_versus_progressive_enhancement\n[mdnjs]: https://developer.mozilla.org/en-US/docs/JavaScript\n[vanilla]: http://vanilla-js.com/\n\n### Monetization is hard without a gatekeeper\n\nAs for monetization, well, that's a can of worms. More persistent web pages *will* help solve [the problem of the continually re-downloaded 7MB of JavaScript tracking you and showing ads][theverge]. But, if that stuff causes less of a drag, will we really care quite as much?\n\n[<img class=\"lazyload inset right\" data-src=\"/uploads/2015/web-awesome/who-owns-the-future.jpg\">][who-owns-the-future]\n\n[who-owns-the-future]: http://amzn.to/1MTayLa\n\nMaybe not. If performance & surveillance concerns are decoupled, we might not notice a problem. I mean, native apps [track][track1] [us][track2] [too][track3], and we don't seem to care. Though, I suppose the siloed nature of apps might make it a little harder to follow you everywhere you go. (I wouldn't count on that, though.)\n\nI don't really have great ideas, here. I pay for some stuff, I don't pay for some other stuff. I'm honestly not 100% against ads, though I think we could use fewer of them.\n\n[track1]: http://www.google.com/analytics/mobile/\n[track2]: https://developer.apple.com/app-store/app-analytics/\n[track3]: https://developers.facebook.com/products/analytics/\n\nWithout an App Store as a gateway, though, the same old revenue problems persist. And still, [there ain't no such thing as a free lunch][tanstaafl]. In fact, folks like [Ted Nelson][micro-liberation] and [Jaron Lanier][free-info] have been saying for years (and decades) that the free-of-charge web is failing itself and all of us. Maybe we need a web with more robust two-way links that track provenance and distribute wealth.\n\n(For what it's worth, [I made fun of Ted Nelson & Xanadu][xanadu-fun] once upon a time. But, since then I've read more about his work and realize how off base I was.)\n\n[tanstaafl]: https://en.wikipedia.org/wiki/There_ain't_no_such_thing_as_a_free_lunch\n[xanadu-fun]: http://decafbad.com/blog/2002/11/11/ooocba/\n[micro-liberation]: http://transcopyright.org/hcoinRemarks-D28.html\n[free-info]: http://www.niemanlab.org/2013/05/jaron-lanier-wants-to-build-a-new-middle-class-on-micropayments/\n\n## Wrapping up\n\nMostly, what I meant to do here was to write a love letter to the web. To try to capture what about it has captured me for the bulk of my career so far. Oh, and maybe to say a few things about now and future challenges. I've got a few ideas, but certainly not all the answers.\n\nI think things look bright, despite [many](http://www.wired.com/2010/08/ff_webrip/) [exaggerated](http://www.wired.com/insights/2014/02/web-dead/) [attempts](http://www.wsj.com/articles/the-web-is-dying-apps-are-killing-it-1416169934) [to declare](http://www.businessinsider.com/the-mobile-web-is-dead-its-all-about-apps-2014-4) [the web's demise](http://christianheilmann.com/2014/05/10/tedx-thessaloniki-the-web-is-dead/). Most of the issues with the web stem from what we do with it, not necessarily from what it can (or can't) do. The creative constraints and curation of app ecosystems have forced us to build better mobile experiences, and we've expanded the capabilities of the web in response.\n\nMy hope is that we can take fresh looks at the web and revisit its unique capabilities. There's a ton of value in the [secure, linkable, indexable, composable, and ephemeral][slice] facets of the open web that closed app silos just can't match.\n\n[slice]: https://paul.kinlan.me/slice-the-web/\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/08/07/web-awesome",
    "thumbnail": "/uploads/2015/web-awesome/troxel.png",
    "summary": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: The open web is a beautiful thing that empowers makers while offering users leverage. There&apos;s nothing else like it. It&apos;s constantly improving. It&apos;s up to you what you do with it.</p>\n"
  },
  {
    "title": "Experimenting with a multi-platform app using React",
    "tags": [
      "webdev",
      "native",
      "react",
      "reactnative",
      "ios",
      "mobile",
      "mozilla"
    ],
    "year": "2015",
    "month": "07",
    "day": "22",
    "isDir": false,
    "slug": "react-multiplatform",
    "date": "2015-07-22T12:00:00.000Z",
    "postName": "2015-07-22-react-multiplatform",
    "html": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: I built <a href=\"https://github.com/lmorchard/react-multiplatform/\">a toy app using React for web and native</a> to get a feel for whether this hybrid approach is worth using. I think the answer is &quot;yes&quot; - but mainly for apps whose business logic &amp; data models are more complex than their views.</p>\n<!--more-->\n\n<h2 id=\"write-slightly-more-than-once-run-manywhere\">Write slightly more than once, run manywhere</h2>\n<p>At Mozilla, one of the things we try to champion is the efficiency of writing one web app versus building many separate native apps. In practice, your mileage varies based on goals, priorities, platform capabilities, and a dozen other factors.</p>\n<p><a href=\"https://facebook.github.io/react/\">React</a> and <a href=\"https://facebook.github.io/react-native/\">React Native</a> seem to offer a middle ground: Given the shared conventions and patterns and language, it should be possible to share a lot of code between platforms while still taking advantage of native capabilities.</p>\n<p>So, I figured I&#39;d give it a shot and try measuring the common lines of code as a rough success metric.</p>\n<h2 id=\"great-another-todo-app\">Great, another Todo app</h2>\n<p>I decided to build a Todo app, with lots of inspiration and a little code borrowed from <a href=\"http://todomvc.com/\">TodoMVC</a>.</p>\n<p>A basic Todo app demands just enough user interface and data management to get an initial feel for most app frameworks. Commit to something bigger and you may end up wasting your time. Build something smaller and you won&#39;t have explored deep enough into the framework&#39;s solution space.</p>\n<p>I think I&#39;ve erred on the shallow side, but that just gives me room to improve.</p>\n<h2 id=\"what-about-flux-vs-mvc\">What about Flux vs MVC?</h2>\n<p>It&#39;s said that React provides just the V in MVC (Model-View-Controller). But, there&#39;s also <a href=\"https://facebook.github.io/flux/docs/overview.html\">this Flux notion</a>. It&#39;s billed as an alternative to MVC, and React is intended to be a part of it. That said, I haven&#39;t quite yet wrapped my head around Flux. Luckily, React is focused and useful in isolation. So, I can defer buying into the rest of the conceptual package as I learn.</p>\n<p>In fact, I didn&#39;t even really end up building a proper MVC app. The Controller role got distributed between Views &amp; Models: UI event handlers in Views modify Models directly. Views subscribe to change events from Models to update their own state.</p>\n<p>I expect that when I grok Flux better, it&#39;s this reciprocal Model/View relationship that will get broken up &amp; mediated by a Dispatcher. But, in the spirit of iterative hacking, I forged ahead with my terrible code &amp; design.</p>\n<h2 id=\"building-shared-models\">Building shared Models</h2>\n<p>For the Model layer, I took a look at <a href=\"http://ampersandjs.com/\">Ampersand.js</a>. Based originally on <a href=\"http://backbonejs.org/\">Backbone.js</a> - a library of which I&#39;m a big fan - <a href=\"http://ampersandjs.com/\">Ampersand.js</a> breaks things up into a collection of small modules that work well together. But, like <a href=\"https://facebook.github.io/react/\">React</a>, most of the modules are handy in isolation or alongside substitutions from outside of the <a href=\"http://ampersandjs.com/\">Ampersand.js</a> family.</p>\n<p>For managing a single todo item, I liked the looks of <a href=\"https://github.com/AmpersandJS/ampersand-state\">ampersand-state</a>. With it, you can build JavaScript objects with properties that can be watched for changes. This is what <a href=\"https://github.com/lmorchard/react-multiplatform/blob/master/lib/models/Todo.js\">my todo item model</a> looks like, using <a href=\"https://github.com/tastejs/todomvc/blob/master/examples/ampersand/js/models/todo.js\">TodoMVC code</a> as a starting point:</p>\n<pre><code class=\"language-javascript\">var State = require(&#39;ampersand-state&#39;);\nmodule.exports = State.extend({\n  // Properties this model will store\n  props: {\n    title: { type: &#39;string&#39;, default: &#39;&#39; },\n    completed: { type: &#39;boolean&#39;, default: false }\n  },\n  // session properties are not included when serializing.\n  session: {\n    editing: { type: &#39;boolean&#39;, default: false }\n  },\n  destroy: function () {\n    if (this.collection) {\n      this.collection.remove(this);\n    }\n  }\n});</code></pre>\n<h2 id=\"forking-the-views-by-platform\">Forking the Views by platform</h2>\n<p>This Model code works on both the web and native sides of my app. So far, so good - and pretty straightforward.</p>\n<p>However, getting down to actually rendering this data across platforms reveals where things start to vary. For example, <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/web/TodoItem.js#L34\">the JSX in the <code>render()</code> method of my web view</a> looks like this:</p>\n<pre><code class=\"language-javascript\">return (\n  &lt;li style={itemStyles.container}&gt;\n    &lt;input type=&quot;checkbox&quot;\n      style={itemStyles.completed}\n      onChange={(event) =&gt; this.handleCompletedChange(event.target.checked)}\n      checked={this.state.item.completed} /&gt;\n    {title}\n  &lt;/li&gt;\n);</code></pre>\n<p>Meanwhile, <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/ios/TodoItem.js#L42\">the JSX in the <code>render()</code> method of my iOS view</a> looks like this:</p>\n<pre><code class=\"language-javascript\">return (\n  &lt;View style={styles.todoItem}&gt;\n    &lt;SwitchIOS\n      style={styles.todoCompleted}\n      onValueChange={this.handleCompletedChange}\n      value={this.state.item.completed} /&gt;\n    {title}\n  &lt;/View&gt;\n);</code></pre>\n<p>And, if you take a longer peek at those views, you&#39;ll see some slightly more complex JSX devoted to the <code>{title}</code> placeholders where rendering changes based on whether the item is being edited.</p>\n<p>It&#39;s not radically different; it&#39;s just enough to make things interesting.</p>\n<h2 id=\"code-sharing-with-react-mixins\">Code sharing with React mixins</h2>\n<p>What you might notice about these two divergent views, though, is they both start like this:</p>\n<pre><code class=\"language-javascript\">var TodoItem = module.exports = React.createClass({\n  mixins: [Views.TodoItemCommonMixin],\n  // ...</code></pre>\n<p>It turns out that, thanks to <a href=\"https://facebook.github.io/react/docs/reusable-components.html#mixins\">React mixins</a>, I can write <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/index.js#L35\">the bulk of the View logic</a> in a shared module. Since both sides use Models based on <a href=\"https://github.com/AmpersandJS/ampersand-state\">ampersand-state</a>, this includes subscribing to Model changes:</p>\n<pre><code class=\"language-javascript\">getInitialState() {\n  return { editing: false, item: this.props.item };\n},\ncomponentDidMount() {\n  this.state.item.on(&#39;change&#39;, () =&gt; this.forceUpdate(), this);\n},\ncomponentWillUnmount() {\n  this.state.item.off(null, null, this);\n},\ncomponentWillReceiveProps(props) {\n  this.setState({ item: props.item });\n},\ncomponentDidUpdate(prevProps, prevState) {\n  if (prevState.item !== this.state.item) {\n    prevState.item.off(null, null, this);\n    this.state.item.on(&#39;change&#39;, () =&gt; this.forceUpdate(), this);\n  }\n}</code></pre>\n<p>And, since both sides use Views based on <a href=\"https://facebook.github.io/react/\">React</a>, many UI event handlers can also be shared despite the difference in platform specific JSX and view elements.</p>\n<p>(Of course, I recently learned that <a href=\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\">React mixins are dead</a>, so I&#39;m already behind the times. But, this code works for now. I&#39;ll get around to burning that bridge when I learn more about Flux.)</p>\n<h2 id=\"forking--sharing-model-code-for-persistence\">Forking &amp; sharing Model code for persistence</h2>\n<p>For multiple todo items, <a href=\"https://github.com/AmpersandJS/ampersand-collection\">ampersand-collection</a> is handy. It manages arrays of <a href=\"https://github.com/AmpersandJS/ampersand-state\">ampersand-state</a> objects and emits events when the set changes. This is useful for keeping <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/web/TodoList.js\">list</a> <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/ios/TodoList.js\">views</a> updated.</p>\n<p><a href=\"https://github.com/AmpersandJS/ampersand-collection\">ampersand-collection</a> also offers methods for serializing &amp; deserializing the models it contains. That&#39;s just what I need, because I&#39;d like to make my todo list items persistent between sessions with the app.</p>\n<p>Apropos of that, we have some storage capabilities on each platform: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\">localStorage</a> for modern browsers, and <a href=\"https://facebook.github.io/react-native/docs/asyncstorage.html\">AsyncStorage</a> for React Native. Both allow you to store small amounts of persistent data on a device. For the purposes of this toy app, these data stores are just about right.</p>\n<p>But, these storage APIs differ. <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/web/TodoCollection.js#L14\">Using localStorage</a> looks like this:</p>\n<pre><code class=\"language-javascript\">readFromStorage: function () {\n  var existingData = localStorage[STORAGE_KEY];\n  if (existingData) {\n    this.set(JSON.parse(existingData));\n  }\n},\nwriteToStorage: function () {\n  localStorage[STORAGE_KEY] = JSON.stringify(this);\n}</code></pre>\n<p>Meanwhile, <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/ios/TodoCollection.js#L9\">using AsyncStorage</a> looks like this:</p>\n<pre><code class=\"language-javascript\">readFromStorage() {\n  AsyncStorage.getItem(STORAGE_KEY).then((existingData) =&gt; {\n    this.set(JSON.parse(existingData));\n  });\n},\nwriteToStorage() {\n  AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(this));\n}</code></pre>\n<p>If you peek at those last two links, though, you might notice they both define classes that start like this:</p>\n<pre><code class=\"language-javascript\">var TodoCollection = module.exports = BaseCollection.extend({</code></pre>\n<p>Since <a href=\"https://github.com/AmpersandJS/ampersand-collection\">ampersand-collection</a> supports class inheritance, the bulk of the logic for these collections can be housed in <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/TodoCollection.js#L8\">a shared superclass</a>. The subclasses just need to implement the platform-specific storage methods. A different mechanism than <a href=\"https://facebook.github.io/react/docs/reusable-components.html#mixins\">React mixins</a>, but for basically the same purpose.</p>\n<h2 id=\"sharing-by-the-numbers\">Sharing by the numbers</h2>\n<p>The main goal of this experiment is to get a feel as to whether a hybrid React approach is worth considering versus building totally separate apps for native and web platforms. The metric I decided to use for this is counting lines of code (LoC), and this is what I found:</p>\n<ul>\n<li><p>Overall, ~30% shared LoC (226 / 748).</p>\n</li>\n<li><p>For Models, ~74% shared LoC (159 / 215).</p>\n</li>\n<li><p>For Views, ~12% shared LoC (67 / 533).</p>\n</li>\n</ul>\n<p>Because I like showing my work, here&#39;s how I came up with those numbers:</p>\n<pre><code class=\"language-bash\"># Total LoC for models = 215\n$ cat lib/models/**/*.js | wc -l\n     215\n\n# ~74% common model code\n$ cat lib/models/*js | wc -l\n     159\n\n# ~12% iOS specific model code\n$ cat lib/models/ios/*js | wc -l\n      25\n\n# ~14% web specific model code\n$ cat lib/models/web/*js | wc -l\n      31\n\n# Total LoC for views = 533\n$ cat lib/views/**/*.js | wc -l\n     533\n\n# ~12% common view code\n$ cat lib/views/*js | wc -l\n      67\n\n# ~44% iOS specific view code\n$ cat lib/views/ios/*js | wc -l\n     235\n\n# ~43% web specific view code\n$ cat lib/views/web/*js | wc -l\n     231</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Using React for both web &amp; native looks promising. However, the toy app I&#39;ve built is too simple to present an overwhemingly compelling case.</p>\n<p>What I tried to do here was get a quick feel for the shape of things and where the code multipliers can be found. Your mileage will vary on app features and code refactoring ability.</p>\n<p>In particular, this toy app&#39;s models are very simple. So, even though there&#39;s a lot of sharing, it doesn&#39;t make a big impact on the bottom line. In an app with more complex business logic, that could change favorably.</p>\n<p>On the other hand, Views between platforms will have a greater impact as they get more complex in dealing with divergent UI elements. You could paper over many platform differences with reusable components that normalize APIs &amp; usage patterns - hopefully while not squashing unique advantages of each platform. So far, this app is too simple to really expose those opportunities.</p>\n<p>And, of course, all bets are off once you&#39;ve left React for straight native development. My hunch is that there are qualitative &amp; quantitative benefits to reducing context switching. You can focus development &amp; testing efforts on JavaScript &amp; React as opposed to multiple native &amp; web toolkits (e.g. Objective-C &amp; Swift &amp; Java - oh my!). But, measuring that hunch is beyond the scope of what I tried doing here.</p>\n<p>Hopefully, I&#39;ve raised some interesting features of the terrain. But, I know this is a very shallow look at things and I&#39;m learning as I go along. Feel free to poke holes in this stuff and throw some suggestions at me!</p>\n",
    "body": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nTL;DR: I built [a toy app using React for web and native][react-multiplatform] to get a feel for whether this hybrid approach is worth using. I think the answer is \"yes\" - but mainly for apps whose business logic & data models are more complex than their views.\n\n<!--more-->\n\n## Write slightly more than once, run manywhere\n\nAt Mozilla, one of the things we try to champion is the efficiency of writing one web app versus building many separate native apps. In practice, your mileage varies based on goals, priorities, platform capabilities, and a dozen other factors.\n\n[React][] and [React Native][] seem to offer a middle ground: Given the shared conventions and patterns and language, it should be possible to share a lot of code between platforms while still taking advantage of native capabilities.\n\nSo, I figured I'd give it a shot and try measuring the common lines of code as a rough success metric.\n\n## Great, another Todo app\n\nI decided to build a Todo app, with lots of inspiration and a little code borrowed from [TodoMVC][].\n\nA basic Todo app demands just enough user interface and data management to get an initial feel for most app frameworks. Commit to something bigger and you may end up wasting your time. Build something smaller and you won't have explored deep enough into the framework's solution space.\n\nI think I've erred on the shallow side, but that just gives me room to improve.\n\n## What about Flux vs MVC?\n\nIt's said that React provides just the V in MVC (Model-View-Controller). But, there's also [this Flux notion][flux]. It's billed as an alternative to MVC, and React is intended to be a part of it. That said, I haven't quite yet wrapped my head around Flux. Luckily, React is focused and useful in isolation. So, I can defer buying into the rest of the conceptual package as I learn.\n\nIn fact, I didn't even really end up building a proper MVC app. The Controller role got distributed between Views & Models: UI event handlers in Views modify Models directly. Views subscribe to change events from Models to update their own state.\n\nI expect that when I grok Flux better, it's this reciprocal Model/View relationship that will get broken up & mediated by a Dispatcher. But, in the spirit of iterative hacking, I forged ahead with my terrible code & design.\n\n## Building shared Models\n\nFor the Model layer, I took a look at [Ampersand.js][]. Based originally on [Backbone.js][] - a library of which I'm a big fan - [Ampersand.js][] breaks things up into a collection of small modules that work well together. But, like [React][], most of the modules are handy in isolation or alongside substitutions from outside of the [Ampersand.js][] family.\n\nFor managing a single todo item, I liked the looks of [ampersand-state][]. With it, you can build JavaScript objects with properties that can be watched for changes. This is what [my todo item model][todo-model] looks like, using [TodoMVC code][todo-model-ampersand] as a starting point:\n\n```javascript\nvar State = require('ampersand-state');\nmodule.exports = State.extend({\n  // Properties this model will store\n  props: {\n    title: { type: 'string', default: '' },\n    completed: { type: 'boolean', default: false }\n  },\n  // session properties are not included when serializing.\n  session: {\n    editing: { type: 'boolean', default: false }\n  },\n  destroy: function () {\n    if (this.collection) {\n      this.collection.remove(this);\n    }\n  }\n});\n```\n\n## Forking the Views by platform\n\nThis Model code works on both the web and native sides of my app. So far, so good - and pretty straightforward.\n\nHowever, getting down to actually rendering this data across platforms reveals where things start to vary. For example, [the JSX in the `render()` method of my web view][item-web-render] looks like this:\n\n```javascript\nreturn (\n  <li style={itemStyles.container}>\n    <input type=\"checkbox\"\n      style={itemStyles.completed}\n      onChange={(event) => this.handleCompletedChange(event.target.checked)}\n      checked={this.state.item.completed} />\n    {title}\n  </li>\n);\n```\n\nMeanwhile, [the JSX in the `render()` method of my iOS view][item-ios-render] looks like this:\n\n```javascript\nreturn (\n  <View style={styles.todoItem}>\n    <SwitchIOS\n      style={styles.todoCompleted}\n      onValueChange={this.handleCompletedChange}\n      value={this.state.item.completed} />\n    {title}\n  </View>\n);\n```\n\n[item-web-render]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/web/TodoItem.js#L34\n[item-ios-render]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/ios/TodoItem.js#L42\n\nAnd, if you take a longer peek at those views, you'll see some slightly more complex JSX devoted to the `{title}` placeholders where rendering changes based on whether the item is being edited.\n\nIt's not radically different; it's just enough to make things interesting.\n\n## Code sharing with React mixins\n\nWhat you might notice about these two divergent views, though, is they both start like this:\n\n```javascript\nvar TodoItem = module.exports = React.createClass({\n  mixins: [Views.TodoItemCommonMixin],\n  // ...\n```\n\nIt turns out that, thanks to [React mixins][], I can write [the bulk of the View logic][item-shared-view] in a shared module. Since both sides use Models based on [ampersand-state][], this includes subscribing to Model changes:\n\n[React mixins]: https://facebook.github.io/react/docs/reusable-components.html#mixins\n\n```javascript\ngetInitialState() {\n  return { editing: false, item: this.props.item };\n},\ncomponentDidMount() {\n  this.state.item.on('change', () => this.forceUpdate(), this);\n},\ncomponentWillUnmount() {\n  this.state.item.off(null, null, this);\n},\ncomponentWillReceiveProps(props) {\n  this.setState({ item: props.item });\n},\ncomponentDidUpdate(prevProps, prevState) {\n  if (prevState.item !== this.state.item) {\n    prevState.item.off(null, null, this);\n    this.state.item.on('change', () => this.forceUpdate(), this);\n  }\n}\n```\n\n[item-shared-view]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/index.js#L35\n\nAnd, since both sides use Views based on [React][], many UI event handlers can also be shared despite the difference in platform specific JSX and view elements.\n\n(Of course, I recently learned that [React mixins are dead][dead-mixins], so I'm already behind the times. But, this code works for now. I'll get around to burning that bridge when I learn more about Flux.)\n\n[dead-mixins]: https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\n\n## Forking & sharing Model code for persistence\n\nFor multiple todo items, [ampersand-collection][] is handy. It manages arrays of [ampersand-state][] objects and emits events when the set changes. This is useful for keeping [list][list-web-view] [views][list-ios-view] updated.\n\n[list-web-view]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/web/TodoList.js\n[list-ios-view]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/ios/TodoList.js\n\n[ampersand-collection][] also offers methods for serializing & deserializing the models it contains. That's just what I need, because I'd like to make my todo list items persistent between sessions with the app.\n\n[todo-model]: https://github.com/lmorchard/react-multiplatform/blob/master/lib/models/Todo.js\n[todo-model-ampersand]: https://github.com/tastejs/todomvc/blob/master/examples/ampersand/js/models/todo.js\n\nApropos of that, we have some storage capabilities on each platform: [localStorage][] for modern browsers, and [AsyncStorage][] for React Native. Both allow you to store small amounts of persistent data on a device. For the purposes of this toy app, these data stores are just about right.\n\nBut, these storage APIs differ. [Using localStorage][using-localstorage] looks like this:\n\n```javascript\nreadFromStorage: function () {\n  var existingData = localStorage[STORAGE_KEY];\n  if (existingData) {\n    this.set(JSON.parse(existingData));\n  }\n},\nwriteToStorage: function () {\n  localStorage[STORAGE_KEY] = JSON.stringify(this);\n}\n```\n\nMeanwhile, [using AsyncStorage][using-asyncstorage] looks like this:\n\n```javascript\nreadFromStorage() {\n  AsyncStorage.getItem(STORAGE_KEY).then((existingData) => {\n    this.set(JSON.parse(existingData));\n  });\n},\nwriteToStorage() {\n  AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(this));\n}\n```\n\nIf you peek at those last two links, though, you might notice they both define classes that start like this:\n\n```javascript\nvar TodoCollection = module.exports = BaseCollection.extend({\n```\n\nSince [ampersand-collection][] supports class inheritance, the bulk of the logic for these collections can be housed in [a shared superclass][basecollection]. The subclasses just need to implement the platform-specific storage methods. A different mechanism than [React mixins][], but for basically the same purpose.\n\n[using-localstorage]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/web/TodoCollection.js#L14\n[using-asyncstorage]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/ios/TodoCollection.js#L9\n[basecollection]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/TodoCollection.js#L8\n\n[AsyncStorage]: https://facebook.github.io/react-native/docs/asyncstorage.html\n[localstorage]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\n\n## Sharing by the numbers\n\nThe main goal of this experiment is to get a feel as to whether a hybrid React approach is worth considering versus building totally separate apps for native and web platforms. The metric I decided to use for this is counting lines of code (LoC), and this is what I found:\n\n* Overall, ~30% shared LoC (226 / 748).\n\n* For Models, ~74% shared LoC (159 / 215).\n\n* For Views, ~12% shared LoC (67 / 533).\n\nBecause I like showing my work, here's how I came up with those numbers:\n\n```bash\n# Total LoC for models = 215\n$ cat lib/models/**/*.js | wc -l\n     215\n\n# ~74% common model code\n$ cat lib/models/*js | wc -l\n     159\n\n# ~12% iOS specific model code\n$ cat lib/models/ios/*js | wc -l\n      25\n\n# ~14% web specific model code\n$ cat lib/models/web/*js | wc -l\n      31\n\n# Total LoC for views = 533\n$ cat lib/views/**/*.js | wc -l\n     533\n\n# ~12% common view code\n$ cat lib/views/*js | wc -l\n      67\n\n# ~44% iOS specific view code\n$ cat lib/views/ios/*js | wc -l\n     235\n\n# ~43% web specific view code\n$ cat lib/views/web/*js | wc -l\n     231\n```\n\n## Conclusion\n\nUsing React for both web & native looks promising. However, the toy app I've built is too simple to present an overwhemingly compelling case.\n\nWhat I tried to do here was get a quick feel for the shape of things and where the code multipliers can be found. Your mileage will vary on app features and code refactoring ability.\n\nIn particular, this toy app's models are very simple. So, even though there's a lot of sharing, it doesn't make a big impact on the bottom line. In an app with more complex business logic, that could change favorably.\n\nOn the other hand, Views between platforms will have a greater impact as they get more complex in dealing with divergent UI elements. You could paper over many platform differences with reusable components that normalize APIs & usage patterns - hopefully while not squashing unique advantages of each platform. So far, this app is too simple to really expose those opportunities.\n\nAnd, of course, all bets are off once you've left React for straight native development. My hunch is that there are qualitative & quantitative benefits to reducing context switching. You can focus development & testing efforts on JavaScript & React as opposed to multiple native & web toolkits (e.g. Objective-C & Swift & Java - oh my!). But, measuring that hunch is beyond the scope of what I tried doing here.\n\nHopefully, I've raised some interesting features of the terrain. But, I know this is a very shallow look at things and I'm learning as I go along. Feel free to poke holes in this stuff and throw some suggestions at me!\n\n[ampersand-subcollection]: https://github.com/AmpersandJS/ampersand-subcollection\n[ampersand-collection]: https://github.com/AmpersandJS/ampersand-collection\n[ampersand-state]: https://github.com/AmpersandJS/ampersand-state\n[ampersand-view]: https://github.com/AmpersandJS/ampersand-view\n[Backbone.js]: http://backbonejs.org/\n[ampersand.js]: http://ampersandjs.com/\n[flux]: https://facebook.github.io/flux/docs/overview.html\n[TodoMVC]: http://todomvc.com/\n[react-multiplatform]: https://github.com/lmorchard/react-multiplatform/\n[react]: https://facebook.github.io/react/\n[feels-like-web]: https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/\n[rn-devtools]: https://facebook.github.io/react-native/docs/debugging.html#content\n[react-api]: https://facebook.github.io/react/docs/top-level-api.html\n[React Native]: https://facebook.github.io/react-native/\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/07/22/react-multiplatform",
    "summary": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: I built <a href=\"https://github.com/lmorchard/react-multiplatform/\">a toy app using React for web and native</a> to get a feel for whether this hybrid approach is worth using. I think the answer is &quot;yes&quot; - but mainly for apps whose business logic &amp; data models are more complex than their views.</p>\n"
  },
  {
    "title": "The Verge's web sucks",
    "tags": [
      "webdev",
      "adtech",
      "advertising",
      "internet",
      "privacy",
      "tracking"
    ],
    "year": "2015",
    "month": "07",
    "day": "22",
    "isDir": false,
    "slug": "the-verge-web-sucks",
    "date": "2015-07-22T12:00:00.000Z",
    "postName": "2015-07-22-the-verge-web-sucks",
    "html": "<p>TL;DR: Did you know that The Verge delivers you to around 20 companies for advertising &amp; tracking purposes? I didn&#39;t. That might foul up your web experience a little bit. Maybe we should try something different.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<h2 id=\"i-love-the-verge-but-man\">I love The Verge, but man...</h2>\n<p>So, I&#39;ve been a big fan of The Verge, <a href=\"https://twitter.com/lmorchard/statuses/142396733316534272\">almost since day one</a>. It&#39;s a gorgeous site and the content is great.</p>\n<p>They&#39;ve done some amazing things with longform articles like &quot;<a href=\"http://www.theverge.com/2015/6/24/8809723/jerry-seinfeld-tv-show-international-translation\">What&#39;s the deal with translating Seinfeld</a>&quot; and &quot;<a href=\"http://www.theverge.com/2015/4/2/8285139/max-headroom-oral-history-80s-cyberpunk-interview\">Max Headroom: the definitive history of the 1980s digital icon</a>&quot;, and the daily news output is high quality.</p>\n<p>But, I have to say, reading <a href=\"https://twitter.com/reckless/\">Nilay Patel</a>&#39;s &quot;<a href=\"http://www.theverge.com/2015/7/20/9002721/the-mobile-web-sucks\">The Mobile Web Sucks</a>&quot; felt like getting pelted by rocks thrown <a href=\"http://product.voxmedia.com/2015/5/6/8561867/declaring-performance-bankruptcy\">from a bright, shiny glass house</a>.</p>\n<p>Calling out browser makers for the performance of sites like his? That&#39;s a bit much.</p>\n<p>Here&#39;s my thing: I&#39;ve never had an iPhone. I&#39;ve had Palm webOS phones, a parade of Android devices, and now <a href=\"http://www.cnet.com/news/mozilla-overhauls-firefox-smartphone-plan-to-focus-on-quality-not-cost/\">an experimental Boot2Gecko phone on really nice hardware</a>. Some sites have long been a delight on whatever gadget I fetch from my pocket. Others, I&#39;ve watched decay over the years as their mobile web experiences are neglected in favor of those frantically promoted apps.</p>\n<p>The Verge isn&#39;t quite either of those. And, for me as a fan, it&#39;s frustrating.</p>\n<h2 id=\"time-to-open-the-dev-tools\">Time to open the Dev Tools</h2>\n<p>A page view on The Verge is a heavy load. I&#39;ve known this for awhile, but it wasn&#39;t until now that I decided to take a peek at what might be wriggling under this log.</p>\n<p>So, I opened up the Dev Tools in Firefox and gave the page a reload on a cleared cache.</p>\n<p><img src=\"/uploads/2015/the-verge-web-sucks/the-verge-html-size.png\" class=\"fullwidth\"\n  alt=\"HTML size on the article\"/></p>\n<p>That&#39;s fine - 75kb of HTML for the article. But, I also expect there&#39;ll be a font or two and a raft of images.</p>\n<p><img src=\"/uploads/2015/the-verge-web-sucks/more-resources.png\" class=\"fullwidth\"\n  alt=\"Loading more resources...\" /></p>\n<p>We&#39;re up to 20 requests and 1.4MB over ~7 seconds. That&#39;s on the upper end of what I&#39;d advise, but it&#39;s not terrible. I said that The Verge is a gorgeous site - that takes some resources. Hell, this very blog post is going to be bigger than I&#39;d like thanks to the Twitters &amp; Googles &amp; Disqus, and it&#39;s no visual delight either.</p>\n<p>Oh, but wait, it&#39;s not done loading yet. I&#39;m starting to read &amp; scroll, but my browser&#39;s still spinning. I wonder what the final stats will be?</p>\n<h2 id=\"ow-my-data-plan\">Ow, my data plan!</h2>\n<p><img src=\"/uploads/2015/the-verge-web-sucks/the-verge-final-load-stats.png\"\n  class=\"fullwidth\" alt=\"It finally stopped loading\" /></p>\n<p>Holy crap. It took over 30 seconds. In the end, it fetched over 9.5MB across 263 HTTP requests. That&#39;s almost an order of magnitude more data &amp; time than needed for the article itself.</p>\n<p>What the hell is all this stuff?</p>\n<p><img src=\"/uploads/2015/the-verge-web-sucks/resource-breakdown.png\"\n  class=\"fullwidth\" alt=\"It finally stopped loading\" /></p>\n<p>Wow. Devtools performed a second reload of the page to get an overall performance analysis. This time it downloaded 12MB - a little over 7MB in that is JavaScript!</p>\n<p>Just to put this in some rough perspective: Assuming I had a 1GB / month data plan, I could visit sites like The Verge about 3 times per day before I hit my cap. If I&#39;m lucky, some or most of this will get cached between requests so it won&#39;t be <em>quite</em> that bad. In fact, another report tells me that a primed cache yields 8MB transferred - so maybe 4 visits per day.</p>\n<p>That&#39;s assuming caches on mobile are comparable to my laptop, <a href=\"http://www.webperformancetoday.com/2012/07/12/early-findings-mobile-browser-cache-persistence-and-behaviour/\">which is not a safe assumption</a>.</p>\n<p>Still, this isn&#39;t one of the cool longform articles on The Verge with interactive features and whatnot. This is just a straightforward 1600 word rant with a few quotes &amp; images. Oh, and one video. Not entirely different than this blog post.</p>\n<p>What in the world is all this code <em>doing</em>?</p>\n<h2 id=\"shining-a-lightbeam-under-the-log\">Shining a Lightbeam under the log</h2>\n<p>Hmm, I think I <a href=\"https://twitter.com/reckless/status/623234268152598528\">Nilay Patel tweeted a hint</a>:</p>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/satefan\">@satefan</a> <a href=\"https://twitter.com/verge\">@verge</a> part of the content we deliver is advertising! :)</p>&mdash; nilay patel (@reckless) <a href=\"https://twitter.com/reckless/status/623234268152598528\">July 20, 2015</a></blockquote>\n\n<p>Man, I&#39;d hazard a guess that <em>most</em> of what you just delivered was advertising. That, and spyware.</p>\n<p>In one of the <a href=\"https://wiki.mozilla.org/WeeklyUpdates\">public Monday update calls at Mozilla</a> I heard about this project called <a href=\"https://www.mozilla.org/en-US/lightbeam/\">Lightbeam</a>:</p>\n<blockquote>Lightbeam is a Firefox add-on that uses interactive visualizations to show you the first and third party sites you interact with on the Web.</blockquote>\n\n<p>So, I figured I&#39;d let it take a look at The Verge. This is what it showed:</p>\n<p><img src=\"/uploads/2015/the-verge-web-sucks/im-surrounded.png\"\n  class=\"fullwidth\" id=\"thumbnail\" alt=\"I'm surrounded\" /></p>\n<p>Imagine this is an iceberg as viewed from above. The Verge is the tip above water, the big circle in the middle. The triangles dancing around it are third-party sites lurking under the surface. Lightbeam has a list view, so I switched to get a closer look:</p>\n<p><img src=\"/uploads/2015/the-verge-web-sucks/lightbeam-listview.png\"\n  class=\"fullwidth\" alt=\"Lightbeam list view\" /></p>\n<p>Sweet Jeebus. &quot;You have visited <strong>1 SITE</strong>. You have connected with <strong>47 THIRD PARTY SITES.</strong>&quot;</p>\n<h2 id=\"22-flavors-of-spyware\">22 flavors of spyware</h2>\n<p>Now, to be fair, scrolling through the report I could see that some of these distinct &quot;sites&quot; are clearly alternate domains owned by the same organization. That said, I still found <em>over 20 different companies</em> before I got tired of digging:</p>\n<!-- mosaic here? -->\n\n<ul> <!-- class=\"columns clearfix\"> -->\n<li><a href=\"http://googleadservices.com\">Google</a></li>\n<li><a href=\"http://advertising.amazon.com/\">Amazon</a> - \"Reach millions of customers who find, discover, and buy at Amazon\"</li>\n<li><a href=\"http://skimresources.com\">skimresources.com</a> - \"When links in publishers’ content lead their users to click through and buy from an online retailer, we make sure they’re rewarded!\"</li>\n<li><a href=\"http://sonobi.com\">sonobi.com</a> - \"Sonobi’s suite of buy and sell-side tools allow our customers to identify, deliver, and manage advertising opportunities through performance filters once absent from programmatic channels\"</li>\n<li><a href=\"http://umbel.com\">umbel.com</a> - \"Umbel helps you securely collect first-party customer data and combine all of your existing data from multiple sources to give you a complete view of your customers.\"</li>\n<li><a href=\"http://www.krux.com/\">krux.com</a> - \"Krux helps businesses drive revenue by delivering smarter content, commerce and marketing experiences to people.\"</li>\n<li><a href=\"http://mathtag.com\">mediamath.com</a> - \"MediaMath’s TerminalOne™ platform activates data, automates execution, and optimizes advertising interactions across addressable media—delivering greater performance, transparency, and control to marketers and a better experience to consumers.\"</li>\n<li><a href=\"http://adnxs.com\">adnxs.com</a> - \"Adnxs™ is a portal for Publishers to the AppNexus® online auction exchange used to sell advertising space.\"</li>\n<li><a href=\"http://bidswitch.net\">bidswitch.net</a> - \"BidSwitch provides immediate and seamless real-time access for Supply and Demand Partners across all media types (display, mobile, video, native, etc.).\"</li>\n<li><a href=\"http://scorecardresearch.com\">scorecardresearch.com</a> - \"ScorecardResearch, a service of Full Circle Studies, Inc., is part of the comScore, Inc. market research community, a leading global market research effort that studies and reports on Internet trends and behavior.\"</li>\n<li><a href=\"http://kargo.com\">kargo.com</a> - \"Kargo weaves our content and ad technology into our premium publishers’ mobile and tablet properties, offering advertisers the best brand experiences.\"</li>\n<li><a href=\"http://quantserve.com\">quantcast.com</a> - \"Understand your audience. Find your next customer.\"</li>\n<li><a href=\"http://moatads.com\">moatads.com</a> - \"Moat's proprietary ad search engine has become a ubiquitous tool for the display ad industry. Moat makes it easy to find what and where ads are running for the top brands and sites.\"</li>\n<li><a href=\"http://flashtalking.com\">flashtalking.com</a> - \"Flashtalking is an independent ad serving, measuring and technology company, providing best-in-class digital advertising products, service and support for online advertisers, key media buying and creative agencies.\"</li>\n<li><a href=\"http://www.lotame.com/\">lotame.com</a> - \"Lotame is a data management platform (DMP) that lets marketers, agencies and publishers harness audience data to make smarter marketing, product and business decisions.\"</li>\n<li><a href=\"http://ixicorp.com\">ixicorp.com</a> - \"IXI Services enables its clients to differentiate and target consumer households and target markets based on proprietary measures of wealth, income, spending capacity, credit, share-of-wallet, and share-of-market.\"</li>\n<li><a href=\"http://chartbeat.com\">chartbeat.com</a> - \"We partner with editorial teams to identify their highest quality content -- the pieces that pique and keep reader attention. We partner with advertising teams to plan campaigns around this high-quality content so these ads are seen more often and for longer.\"</li>\n<li><a href=\"http://bombora.com\">bombora.com</a> - \"We are the largest aggregator of B2B intent driven data.\"</li>\n<li><a href=\"http://taboola.com\">taboola.com</a> - \"Taboola recommends editorial and sponsored content across many of the world’s most highly-trafficked sites.\"</li>\n<li><a href=\"http://bluekai.com\">bluekai.com</a> - \"BlueKai is the industry's leading cloud-based big data platform that enables companies to personalize online, offline and mobile marketing campaigns with richer and more actionable information about targeted audiences.\"</li>\n<li><a href=\"http://marketo.com\">marketo.com</a> - \"Marketo has developed the industry’s leading engagement marketing platform, the broadest ecosystem of partners, and the deepest expertise to make this all possible.\"</li>\n<li><a href=\"http://retargeter.com\">retargeter.com</a> - \"ReTargeter optimizes your ad spend with highly targeted, real time digital advertising solutions and the best account management in the industry.\"</li>\n</ul>\n\n<h2 id=\"make-time-to-visit-the-vendor-hall\">Make time to visit the vendor hall!</h2>\n<p>I feel like someone just set up the entire vendor hall from an awful tech conference in my living room. Seriously, could you folks just not pick one or two or ten? Did you hit every booth and say &quot;Yeah, cool, sign us up!&quot; I feel thoroughly spindled &amp; folded &amp; researched, here.</p>\n<p>As a webdev at Mozilla, I&#39;ve been in hour-long meetings where we&#39;ve agonized over whether it&#39;s copacetic to include <em>just one little Google Analytics snippet</em> without notifying users and updating the privacy policy. But, I know we&#39;re crazy in our own very special ways.</p>\n<p>In former lives, I&#39;ve worked at ad agencies and digital marketing companies. I&#39;m no stranger to conversations that revolve around partners &amp; bizdev &amp; analytics &amp; media buys. I can only imagine things have intensified &amp; evolved since I&#39;ve been out of those trenches.</p>\n<p>Still - and maybe this is the Mozilla brain-damage talking - I can&#39;t imagine a sane conversation that resulted in The Verge extending an invitation to over 20 companies to set up shop on my computer with every page visit. I can only imagine this as a steady drip-drop of bizdev decisions and emails to internal webdevs:</p>\n<p>*&quot;Hey, can you add this tracking pixel? These guys do realtime attention heatmapping and it&#39;s brilliant!&quot;*</p>\n<p>*&quot;Paste this snippet into the global template, please? This fourth programmatic ad platform is really going to fill in the gaps for the other three.&quot;*</p>\n<p>*&quot;One more script thing here. We need to capture the affiliate credit for all these links going out to e-commerce sites.*&quot;</p>\n<p>*&quot;Oh hey, we&#39;re going to need this new script to manage the dozen ad platforms we use now.&quot;*</p>\n<p>I&#39;m guessing no one along the way had the power or motivation to say no. I mean, really, what&#39;s the cost in tossing one more straw onto that camel&#39;s back? I know I never looked or complained until now, and I doubt the majority of readers will ever bother.</p>\n<p>We all just kind of get this growing sense of malaise about &quot;the web&quot; as a gestalt of our favorite sites as they get suckier.</p>\n<h2 id=\"how-to-make-the-web-suck\">How to make the web suck</h2>\n<p>So, I haven&#39;t taken the time to dig into the source code of those companies&#39; specific contributions to the article. There are only so many hours in the day, and I have a ranty blog post to finish.</p>\n<p>But, if you want to talk about browser performance - mobile or desktop - don&#39;t you think that maybe, <em>just maybe</em>, some of that <strong>7 megabytes</strong> of JavaScript code might have an impact?</p>\n<p>First, even assuming this code comes from a local cache, <a href=\"http://timkadlec.com/2014/09/js-parse-and-execution-time/\">parsing it into something executable has a cost</a>. Of course, someday, we&#39;ll have <a href=\"https://brendaneich.com/2015/06/from-asm-js-to-webassembly/\">WebAssembly</a> to shift this first stage upstream into webdev build tools. But we don&#39;t have that, yet.</p>\n<p>Then, there&#39;s what that code&#39;s actually doing once it runs. There&#39;s the usual reporting on every scrap of browser fingerprint data. There&#39;s deciding whether and what ads to fetch &amp; inject. I&#39;ve seen scripts that record every pixel of mouse movement and phone home every few seconds.</p>\n<p>Some spawn lots of hidden iframes, each doing something fun. Others run code 10 times per second that trigger little invisible page re-renderings that chew up CPU and make scrolling &amp; orientation changes chug. Some scripts get run multiple times and perform duplicate work. Attack ships on fire off the shoulder of Orion. I watched C-beams glitter in the dark near the Tannhauser gate.</p>\n<p>Wait, where was I?</p>\n<h2 id=\"everybodys-not-doing-it\">Everybody&#39;s (not) doing it!</h2>\n<p>I&#39;ve seen the argument that this is how the web gets funded. Everybody&#39;s doing it. This is the current state of the art. Browsers just need to suck it up &amp; make it happen.</p>\n<p>Some sites are (much) better than others, though, and it doesn&#39;t seem to be directly related to the content. Here&#39;s what I saw when I did a quick check of some daily reads:</p>\n<style type=\"text/css\">\n  img.inline { vertical-align: middle; }\n</style>\n\n<ul>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/forbes.png\"> - <a href=\"http://www.forbes.com/sites/ryanmac/2015/07/20/as-paypal-goes-public-again-ceo-hints-at-working-with-amazon-and-sets-sights-on-acquisitions/\">Forbes</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/huffpo.png\"> - <a href=\"http://www.huffingtonpost.com/entry/first-half-of-2015-was-hottest-january-june-ever-recorded_55ad7b8ce4b0caf721b3a968\">The Huffington Post</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/cnn.png\"> - <a href=\"http://www.cnn.com/2015/07/23/politics/donald-trump-border-visit-texas/index.html\">CNN</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/readwrite.png\"> - <a href=\"http://readwrite.com/2015/07/15/bittorrent-sync-new-api\">Readwrite</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/bbc.png\"> - <a href=\"http://www.bbc.com/news/world-africa-33642158\">BBC</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/ars-technica.png\"> - <a href=\"http://arstechnica.com/gadgets/2015/07/rare-breed-linux-mint-17-2-offers-desktop-familiarity-and-responds-to-user-wants/\">Ars Technica</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/qz.png\"> - <a href=\"http://qz.com/458826/behold-nasas-first-image-in-decades-of-the-whole-earth/\">Quartz</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/npr.png\"> - <a href=\"http://www.npr.org/sections/alltechconsidered/2015/07/20/424630545/with-ad-blocking-use-on-the-rise-what-happens-to-online-publishers\">NPR</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/io9.png\"> - <a href=\"http://io9.com/molybdenum-the-most-important-element-youve-never-hear-1718443869\">io9</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/the-guardian.png\"> - <a href=\"http://www.theguardian.com/commentisfree/2015/jul/20/bernie-sanders-structural-racism-economic-justice\">The Guardian</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/mozilla.png\"> - <a href=\"https://www.mozilla.org/en-US/\">Mozilla</a></li>\n<li><img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/mdn.png\"> - <a href=\"https://developer.mozilla.org/en-US/\">Mozilla Developer Network</a></li>\n</ul>\n<p>If you&#39;ve bought into my thesis that this stuff should take a lot of the blame for poor mobile performance - it&#39;s no surprise that I&#39;ll claim these sites are progressively better experiences as I step down the list.</p>\n<p>I also didn&#39;t dig deeply into each of these. But, it&#39;s pretty clear The Verge blows other sites out of the water in terms of what it demands from a browser. Forbes is a very close second, though, and it sometimes seems to do annoying things like phone home every second or so while I&#39;m on the page.</p>\n<p>Oh, and admittedly I don&#39;t visit the Mozilla home page as a &quot;daily read&quot;, though I do use MDN regularly. I&#39;ve also worked on both, so I have some notion of what they&#39;re (not) doing - and how much we beat ourselves up internally about reaching sub-second page loads. (Man, do we look good now, or what?)</p>\n<h2 id=\"what-are-browsers-for-anyway\">What are browsers for, anyway?</h2>\n<p>Nilay Patel says &quot;what we really need is a more powerful, more robust web.&quot; Personally, I think the web we have right now can be pretty damn powerful &amp; robust. <a href=\"http://tinyrevolution.us/2014/05/09/choosing-a-tow-vehicle-for-your-tiny-house/\">Stop trying to make a sedan tow a house.</a></p>\n<p>But, is it ultimately a good idea to optimize for these icebergs that consist of the tiny bit we came for, perched atop a great big submerged intelligence gathering apparatus assembled on-demand from a consortium of marketing &amp; analytics firms?</p>\n<p>Just what are we building these browsers for? Is this what we want as users? Because, browsers are <em>user agents*. I know the web needs to get funded, somehow. But should the agents operating on our behalf just blindly accept whatever publishers want to send gurgling down the pipes? Maybe our agents *should be asserting themselves</em> to get us a better deal &amp; better performance. This is dangerous talk, I know, and it implies some slippery slopes.</p>\n<p>Apropos of that, it could be worse: Consider things like <a href=\"https://flipboard.com/\">Flipboard</a>, <a href=\"http://instantarticles.fb.com/\">Facebook&#39;s Instant Articles</a>, and <a href=\"https://www.apple.com/news/\">Apple&#39;s News app</a>. These are highly assertive agents that offer great reading experiences.</p>\n<p>In a nutshell, they do it by making publishers less free to crap it all up and users less free to encounter crap. That is, &quot;curation&quot;. As gatekeepers, they force publishers to strip it all down and make their deals with just one middle man. Win-win - except it&#39;s a solution for a self-made problem that introduces new gatekeepers and leaves us with far less choice &amp; control over our agents.</p>\n<h2 id=\"maybe-paying-for-the-web-can-be-better\">Maybe paying for the web can be better?</h2>\n<p>Browsers have typically tried to stay neutral, because <a href=\"http://www.iab.net/mozilla_rothenberg\">asserting an opinion can start some nasty fights</a>. But, if the choice is to watch the web head off into the sunset, what do we have to lose? Maybe browsers should impose a few of the constraints these news apps introduce. We keep things like <a href=\"https://adblockplus.org/\">Adblock Plus</a> at arm&#39;s length for plausible deniability - but everyone I know uses it.</p>\n<p>Meanwhile, there are people pondering how to improve funding for the web. Believe it or not, the <a href=\"https://wiki.mozilla.org/Content_services\">Content Services team</a> at Mozilla is thinking about way more than just &quot;<a href=\"http://www.computerworld.com/article/2847727/mozilla-plunks-ads-into-firefox.html\">plunking ads into Firefox</a>&quot;. Like, what if we actually accepted the fact that ads are a way of funding the web at large, and browsers themselves offered <a href=\"https://ffp4g1ylyit3jdyti1hqcvtb-wpengine.netdna-ssl.com/advancingcontent/files/2015/05/How-data-is-protected-Infographic1.pdf\">built-in mechanisms to support advertising that respect privacy &amp; performance</a>? Yeah, that&#39;s a bit of a change from browsers&#39; traditional neutrality. But, it could be a better deal for publishers <em>and</em> users together.</p>\n<p>Here&#39;s another idea: Almost a year ago, <a href=\"https://air.mozilla.org/subscribe2web/\">I heard the notion of &quot;Subscribe 2 Web&quot; at Mozilla</a>. The gist is that you&#39;re worth about $6.20 per month across publishers via advertising revenues. What if you paid that much into an account yourself every month and used a mechanism built into your browser to distribute that money? Yeah, it&#39;s micropayments, but I find it interesting that these folks came up with a specific dollar amount that doesn&#39;t sound terrible.</p>\n<p>But, if you don&#39;t like that, we have other options. I&#39;m a listener of Tom Merritt&#39;s <a href=\"http://www.dailytechnewsshow.com/\">Daily Tech News Show</a> - and <a href=\"https://www.patreon.com/acedtect\">I support him via Patreon</a>. We&#39;ve also got things like <a href=\"https://flattr.com/\">Flattr</a>. We&#39;ve got a pile of other ideas out there - but, none of them are as convenient as web spyware when users don&#39;t complain or impose a cost. If browsers started getting tough on web spyware, necessity might force some of these options to grow.</p>\n<h2 id=\"wrapping-up\">Wrapping up</h2>\n<p>So, I&#39;m out of steam. Sorry (<a href=\"http://blog.lmorchard.com/2013/02/25/too-long-read-anyway/\">not sorry</a>) for the wall of text, and the complete lack of pictures toward the end.</p>\n<p>Anyway, yeah, there are many things that can make the mobile web suck. Bad CSS layout, heavy UI frameworks, you name it. And, yeah, browsers can get better. They <em>are</em> getting better. There are interesting capabilities on the horizon.</p>\n<p>But, I can&#39;t help thinking if everyone shrank those tracking &amp; advertising icebergs down to some sane magnitude relative to the actual content, that this web might be a better place overall.</p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n",
    "body": "TL;DR: Did you know that The Verge delivers you to around 20 companies for advertising & tracking purposes? I didn't. That might foul up your web experience a little bit. Maybe we should try something different.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n## I love The Verge, but man...\n\nSo, I've been a big fan of The Verge, [almost since day one][verge-fan]. It's a gorgeous site and the content is great.\n\nThey've done some amazing things with longform articles like \"[What's the deal with translating Seinfeld][translating-seinfeld]\" and \"[Max Headroom: the definitive history of the 1980s digital icon][max-headroom]\", and the daily news output is high quality.\n\nBut, I have to say, reading [Nilay Patel][]'s \"[The Mobile Web Sucks][mobile-web-sucks]\" felt like getting pelted by rocks thrown [from a bright, shiny glass house][performance-bankruptcy].\n\n[nilay patel]: https://twitter.com/reckless/\n\nCalling out browser makers for the performance of sites like his? That's a bit much.\n\nHere's my thing: I've never had an iPhone. I've had Palm webOS phones, a parade of Android devices, and now [an experimental Boot2Gecko phone on really nice hardware][mozilla-ignite]. Some sites have long been a delight on whatever gadget I fetch from my pocket. Others, I've watched decay over the years as their mobile web experiences are neglected in favor of those frantically promoted apps.\n\n[mozilla-ignite]: http://www.cnet.com/news/mozilla-overhauls-firefox-smartphone-plan-to-focus-on-quality-not-cost/\n\nThe Verge isn't quite either of those. And, for me as a fan, it's frustrating.\n\n## Time to open the Dev Tools\n\nA page view on The Verge is a heavy load. I've known this for awhile, but it wasn't until now that I decided to take a peek at what might be wriggling under this log.\n\nSo, I opened up the Dev Tools in Firefox and gave the page a reload on a cleared cache.\n\n<img src=\"/uploads/2015/the-verge-web-sucks/the-verge-html-size.png\" class=\"fullwidth\"\n  alt=\"HTML size on the article\"/>\n\nThat's fine - 75kb of HTML for the article. But, I also expect there'll be a font or two and a raft of images.\n\n<img src=\"/uploads/2015/the-verge-web-sucks/more-resources.png\" class=\"fullwidth\"\n  alt=\"Loading more resources...\" />\n\nWe're up to 20 requests and 1.4MB over ~7 seconds. That's on the upper end of what I'd advise, but it's not terrible. I said that The Verge is a gorgeous site - that takes some resources. Hell, this very blog post is going to be bigger than I'd like thanks to the Twitters & Googles & Disqus, and it's no visual delight either.\n\nOh, but wait, it's not done loading yet. I'm starting to read & scroll, but my browser's still spinning. I wonder what the final stats will be?\n\n## Ow, my data plan!\n\n<img src=\"/uploads/2015/the-verge-web-sucks/the-verge-final-load-stats.png\"\n  class=\"fullwidth\" alt=\"It finally stopped loading\" />\n\nHoly crap. It took over 30 seconds. In the end, it fetched over 9.5MB across 263 HTTP requests. That's almost an order of magnitude more data & time than needed for the article itself.\n\nWhat the hell is all this stuff?\n\n<img src=\"/uploads/2015/the-verge-web-sucks/resource-breakdown.png\"\n  class=\"fullwidth\" alt=\"It finally stopped loading\" />\n\nWow. Devtools performed a second reload of the page to get an overall performance analysis. This time it downloaded 12MB - a little over 7MB in that is JavaScript!\n\nJust to put this in some rough perspective: Assuming I had a 1GB / month data plan, I could visit sites like The Verge about 3 times per day before I hit my cap. If I'm lucky, some or most of this will get cached between requests so it won't be *quite* that bad. In fact, another report tells me that a primed cache yields 8MB transferred - so maybe 4 visits per day.\n\nThat's assuming caches on mobile are comparable to my laptop, [which is not a safe assumption][mobile-caching].\n\n[mobile-caching]: http://www.webperformancetoday.com/2012/07/12/early-findings-mobile-browser-cache-persistence-and-behaviour/\n\nStill, this isn't one of the cool longform articles on The Verge with interactive features and whatnot. This is just a straightforward 1600 word rant with a few quotes & images. Oh, and one video. Not entirely different than this blog post.\n\nWhat in the world is all this code *doing*?\n\n## Shining a Lightbeam under the log\n\nHmm, I think I [Nilay Patel tweeted a hint](https://twitter.com/reckless/status/623234268152598528):\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/satefan\">@satefan</a> <a href=\"https://twitter.com/verge\">@verge</a> part of the content we deliver is advertising! :)</p>&mdash; nilay patel (@reckless) <a href=\"https://twitter.com/reckless/status/623234268152598528\">July 20, 2015</a></blockquote>\n\nMan, I'd hazard a guess that *most* of what you just delivered was advertising. That, and spyware.\n\nIn one of the [public Monday update calls at Mozilla][weeklyupdates] I heard about this project called [Lightbeam][lightbeam]:\n\n[weeklyupdates]: https://wiki.mozilla.org/WeeklyUpdates\n\n<blockquote>Lightbeam is a Firefox add-on that uses interactive visualizations to show you the first and third party sites you interact with on the Web.</blockquote>\n\nSo, I figured I'd let it take a look at The Verge. This is what it showed:\n\n<img src=\"/uploads/2015/the-verge-web-sucks/im-surrounded.png\"\n  class=\"fullwidth\" id=\"thumbnail\" alt=\"I'm surrounded\" />\n\nImagine this is an iceberg as viewed from above. The Verge is the tip above water, the big circle in the middle. The triangles dancing around it are third-party sites lurking under the surface. Lightbeam has a list view, so I switched to get a closer look:\n\n<img src=\"/uploads/2015/the-verge-web-sucks/lightbeam-listview.png\"\n  class=\"fullwidth\" alt=\"Lightbeam list view\" />\n\nSweet Jeebus. \"You have visited **1 SITE**. You have connected with **47 THIRD PARTY SITES.**\"\n\n## 22 flavors of spyware\n\nNow, to be fair, scrolling through the report I could see that some of these distinct \"sites\" are clearly alternate domains owned by the same organization. That said, I still found *over 20 different companies* before I got tired of digging:\n\n<!-- mosaic here? -->\n\n<ul> <!-- class=\"columns clearfix\"> -->\n<li><a href=\"http://googleadservices.com\">Google</a></li>\n<li><a href=\"http://advertising.amazon.com/\">Amazon</a> - \"Reach millions of customers who find, discover, and buy at Amazon\"</li>\n<li><a href=\"http://skimresources.com\">skimresources.com</a> - \"When links in publishers’ content lead their users to click through and buy from an online retailer, we make sure they’re rewarded!\"</li>\n<li><a href=\"http://sonobi.com\">sonobi.com</a> - \"Sonobi’s suite of buy and sell-side tools allow our customers to identify, deliver, and manage advertising opportunities through performance filters once absent from programmatic channels\"</li>\n<li><a href=\"http://umbel.com\">umbel.com</a> - \"Umbel helps you securely collect first-party customer data and combine all of your existing data from multiple sources to give you a complete view of your customers.\"</li>\n<li><a href=\"http://www.krux.com/\">krux.com</a> - \"Krux helps businesses drive revenue by delivering smarter content, commerce and marketing experiences to people.\"</li>\n<li><a href=\"http://mathtag.com\">mediamath.com</a> - \"MediaMath’s TerminalOne™ platform activates data, automates execution, and optimizes advertising interactions across addressable media—delivering greater performance, transparency, and control to marketers and a better experience to consumers.\"</li>\n<li><a href=\"http://adnxs.com\">adnxs.com</a> - \"Adnxs™ is a portal for Publishers to the AppNexus® online auction exchange used to sell advertising space.\"</li>\n<li><a href=\"http://bidswitch.net\">bidswitch.net</a> - \"BidSwitch provides immediate and seamless real-time access for Supply and Demand Partners across all media types (display, mobile, video, native, etc.).\"</li>\n<li><a href=\"http://scorecardresearch.com\">scorecardresearch.com</a> - \"ScorecardResearch, a service of Full Circle Studies, Inc., is part of the comScore, Inc. market research community, a leading global market research effort that studies and reports on Internet trends and behavior.\"</li>\n<li><a href=\"http://kargo.com\">kargo.com</a> - \"Kargo weaves our content and ad technology into our premium publishers’ mobile and tablet properties, offering advertisers the best brand experiences.\"</li>\n<li><a href=\"http://quantserve.com\">quantcast.com</a> - \"Understand your audience. Find your next customer.\"</li>\n<li><a href=\"http://moatads.com\">moatads.com</a> - \"Moat's proprietary ad search engine has become a ubiquitous tool for the display ad industry. Moat makes it easy to find what and where ads are running for the top brands and sites.\"</li>\n<li><a href=\"http://flashtalking.com\">flashtalking.com</a> - \"Flashtalking is an independent ad serving, measuring and technology company, providing best-in-class digital advertising products, service and support for online advertisers, key media buying and creative agencies.\"</li>\n<li><a href=\"http://www.lotame.com/\">lotame.com</a> - \"Lotame is a data management platform (DMP) that lets marketers, agencies and publishers harness audience data to make smarter marketing, product and business decisions.\"</li>\n<li><a href=\"http://ixicorp.com\">ixicorp.com</a> - \"IXI Services enables its clients to differentiate and target consumer households and target markets based on proprietary measures of wealth, income, spending capacity, credit, share-of-wallet, and share-of-market.\"</li>\n<li><a href=\"http://chartbeat.com\">chartbeat.com</a> - \"We partner with editorial teams to identify their highest quality content -- the pieces that pique and keep reader attention. We partner with advertising teams to plan campaigns around this high-quality content so these ads are seen more often and for longer.\"</li>\n<li><a href=\"http://bombora.com\">bombora.com</a> - \"We are the largest aggregator of B2B intent driven data.\"</li>\n<li><a href=\"http://taboola.com\">taboola.com</a> - \"Taboola recommends editorial and sponsored content across many of the world’s most highly-trafficked sites.\"</li>\n<li><a href=\"http://bluekai.com\">bluekai.com</a> - \"BlueKai is the industry's leading cloud-based big data platform that enables companies to personalize online, offline and mobile marketing campaigns with richer and more actionable information about targeted audiences.\"</li>\n<li><a href=\"http://marketo.com\">marketo.com</a> - \"Marketo has developed the industry’s leading engagement marketing platform, the broadest ecosystem of partners, and the deepest expertise to make this all possible.\"</li>\n<li><a href=\"http://retargeter.com\">retargeter.com</a> - \"ReTargeter optimizes your ad spend with highly targeted, real time digital advertising solutions and the best account management in the industry.\"</li>\n</ul>\n\n## Make time to visit the vendor hall!\n\nI feel like someone just set up the entire vendor hall from an awful tech conference in my living room. Seriously, could you folks just not pick one or two or ten? Did you hit every booth and say \"Yeah, cool, sign us up!\" I feel thoroughly spindled & folded & researched, here.\n\nAs a webdev at Mozilla, I've been in hour-long meetings where we've agonized over whether it's copacetic to include *just one little Google Analytics snippet* without notifying users and updating the privacy policy. But, I know we're crazy in our own very special ways.\n\nIn former lives, I've worked at ad agencies and digital marketing companies. I'm no stranger to conversations that revolve around partners & bizdev & analytics & media buys. I can only imagine things have intensified & evolved since I've been out of those trenches.\n\nStill - and maybe this is the Mozilla brain-damage talking - I can't imagine a sane conversation that resulted in The Verge extending an invitation to over 20 companies to set up shop on my computer with every page visit. I can only imagine this as a steady drip-drop of bizdev decisions and emails to internal webdevs:\n\n*\"Hey, can you add this tracking pixel? These guys do realtime attention heatmapping and it's brilliant!\"*\n\n*\"Paste this snippet into the global template, please? This fourth programmatic ad platform is really going to fill in the gaps for the other three.\"*\n\n*\"One more script thing here. We need to capture the affiliate credit for all these links going out to e-commerce sites.*\"\n\n*\"Oh hey, we're going to need this new script to manage the dozen ad platforms we use now.\"*\n\nI'm guessing no one along the way had the power or motivation to say no. I mean, really, what's the cost in tossing one more straw onto that camel's back? I know I never looked or complained until now, and I doubt the majority of readers will ever bother.\n\nWe all just kind of get this growing sense of malaise about \"the web\" as a gestalt of our favorite sites as they get suckier.\n\n## How to make the web suck\n\nSo, I haven't taken the time to dig into the source code of those companies' specific contributions to the article. There are only so many hours in the day, and I have a ranty blog post to finish.\n\nBut, if you want to talk about browser performance - mobile or desktop - don't you think that maybe, *just maybe*, some of that **7 megabytes** of JavaScript code might have an impact?\n\nFirst, even assuming this code comes from a local cache, [parsing it into something executable has a cost][js-parsing]. Of course, someday, we'll have [WebAssembly][] to shift this first stage upstream into webdev build tools. But we don't have that, yet.\n\n[js-parsing]: http://timkadlec.com/2014/09/js-parse-and-execution-time/\n[WebAssembly]: https://brendaneich.com/2015/06/from-asm-js-to-webassembly/\n\nThen, there's what that code's actually doing once it runs. There's the usual reporting on every scrap of browser fingerprint data. There's deciding whether and what ads to fetch & inject. I've seen scripts that record every pixel of mouse movement and phone home every few seconds.\n\nSome spawn lots of hidden iframes, each doing something fun. Others run code 10 times per second that trigger little invisible page re-renderings that chew up CPU and make scrolling & orientation changes chug. Some scripts get run multiple times and perform duplicate work. Attack ships on fire off the shoulder of Orion. I watched C-beams glitter in the dark near the Tannhauser gate.\n\nWait, where was I?\n\n## Everybody's (not) doing it!\n\nI've seen the argument that this is how the web gets funded. Everybody's doing it. This is the current state of the art. Browsers just need to suck it up & make it happen.\n\nSome sites are (much) better than others, though, and it doesn't seem to be directly related to the content. Here's what I saw when I did a quick check of some daily reads:\n\n<style type=\"text/css\">\n  img.inline { vertical-align: middle; }\n</style>\n\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/forbes.png\"> - [Forbes](http://www.forbes.com/sites/ryanmac/2015/07/20/as-paypal-goes-public-again-ceo-hints-at-working-with-amazon-and-sets-sights-on-acquisitions/)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/huffpo.png\"> - [The Huffington Post](http://www.huffingtonpost.com/entry/first-half-of-2015-was-hottest-january-june-ever-recorded_55ad7b8ce4b0caf721b3a968)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/cnn.png\"> - [CNN](http://www.cnn.com/2015/07/23/politics/donald-trump-border-visit-texas/index.html)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/readwrite.png\"> - [Readwrite](http://readwrite.com/2015/07/15/bittorrent-sync-new-api)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/bbc.png\"> - [BBC](http://www.bbc.com/news/world-africa-33642158)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/ars-technica.png\"> - [Ars Technica](http://arstechnica.com/gadgets/2015/07/rare-breed-linux-mint-17-2-offers-desktop-familiarity-and-responds-to-user-wants/)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/qz.png\"> - [Quartz](http://qz.com/458826/behold-nasas-first-image-in-decades-of-the-whole-earth/)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/npr.png\"> - [NPR](http://www.npr.org/sections/alltechconsidered/2015/07/20/424630545/with-ad-blocking-use-on-the-rise-what-happens-to-online-publishers)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/io9.png\"> - [io9](http://io9.com/molybdenum-the-most-important-element-youve-never-hear-1718443869)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/the-guardian.png\"> - [The Guardian](http://www.theguardian.com/commentisfree/2015/jul/20/bernie-sanders-structural-racism-economic-justice)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/mozilla.png\"> - [Mozilla](https://www.mozilla.org/en-US/)\n* <img class=\"inline\" src=\"/uploads/2015/the-verge-web-sucks/mdn.png\"> - [Mozilla Developer Network](https://developer.mozilla.org/en-US/)\n\nIf you've bought into my thesis that this stuff should take a lot of the blame for poor mobile performance - it's no surprise that I'll claim these sites are progressively better experiences as I step down the list.\n\nI also didn't dig deeply into each of these. But, it's pretty clear The Verge blows other sites out of the water in terms of what it demands from a browser. Forbes is a very close second, though, and it sometimes seems to do annoying things like phone home every second or so while I'm on the page.\n\nOh, and admittedly I don't visit the Mozilla home page as a \"daily read\", though I do use MDN regularly. I've also worked on both, so I have some notion of what they're (not) doing - and how much we beat ourselves up internally about reaching sub-second page loads. (Man, do we look good now, or what?)\n\n## What are browsers for, anyway?\n\nNilay Patel says \"what we really need is a more powerful, more robust web.\" Personally, I think the web we have right now can be pretty damn powerful & robust. [Stop trying to make a sedan tow a house.][tiny-house-tow]\n\n[tiny-house-tow]: http://tinyrevolution.us/2014/05/09/choosing-a-tow-vehicle-for-your-tiny-house/\n\nBut, is it ultimately a good idea to optimize for these icebergs that consist of the tiny bit we came for, perched atop a great big submerged intelligence gathering apparatus assembled on-demand from a consortium of marketing & analytics firms?\n\nJust what are we building these browsers for? Is this what we want as users? Because, browsers are *user agents*. I know the web needs to get funded, somehow. But should the agents operating on our behalf just blindly accept whatever publishers want to send gurgling down the pipes? Maybe our agents *should be asserting themselves* to get us a better deal & better performance. This is dangerous talk, I know, and it implies some slippery slopes.\n\nApropos of that, it could be worse: Consider things like [Flipboard][], [Facebook's Instant Articles][], and [Apple's News app][]. These are highly assertive agents that offer great reading experiences.\n\nIn a nutshell, they do it by making publishers less free to crap it all up and users less free to encounter crap. That is, \"curation\". As gatekeepers, they force publishers to strip it all down and make their deals with just one middle man. Win-win - except it's a solution for a self-made problem that introduces new gatekeepers and leaves us with far less choice & control over our agents.\n\n## Maybe paying for the web can be better?\n\nBrowsers have typically tried to stay neutral, because [asserting an opinion can start some nasty fights][party-cookies]. But, if the choice is to watch the web head off into the sunset, what do we have to lose? Maybe browsers should impose a few of the constraints these news apps introduce. We keep things like [Adblock Plus][] at arm's length for plausible deniability - but everyone I know uses it.\n\nMeanwhile, there are people pondering how to improve funding for the web. Believe it or not, the [Content Services team][content-services] at Mozilla is thinking about way more than just \"[plunking ads into Firefox][plunk-ads]\". Like, what if we actually accepted the fact that ads are a way of funding the web at large, and browsers themselves offered [built-in mechanisms to support advertising that respect privacy & performance][tiles-flow]? Yeah, that's a bit of a change from browsers' traditional neutrality. But, it could be a better deal for publishers *and* users together.\n\nHere's another idea: Almost a year ago, [I heard the notion of \"Subscribe 2 Web\" at Mozilla][s2w]. The gist is that you're worth about $6.20 per month across publishers via advertising revenues. What if you paid that much into an account yourself every month and used a mechanism built into your browser to distribute that money? Yeah, it's micropayments, but I find it interesting that these folks came up with a specific dollar amount that doesn't sound terrible.\n\nBut, if you don't like that, we have other options. I'm a listener of Tom Merritt's [Daily Tech News Show][dtns] - and [I support him via Patreon][dtns-patreon]. We've also got things like [Flattr][]. We've got a pile of other ideas out there - but, none of them are as convenient as web spyware when users don't complain or impose a cost. If browsers started getting tough on web spyware, necessity might force some of these options to grow.\n\n## Wrapping up\n\nSo, I'm out of steam. Sorry ([not sorry](http://blog.lmorchard.com/2013/02/25/too-long-read-anyway/)) for the wall of text, and the complete lack of pictures toward the end.\n\nAnyway, yeah, there are many things that can make the mobile web suck. Bad CSS layout, heavy UI frameworks, you name it. And, yeah, browsers can get better. They *are* getting better. There are interesting capabilities on the horizon.\n\nBut, I can't help thinking if everyone shrank those tracking & advertising icebergs down to some sane magnitude relative to the actual content, that this web might be a better place overall.\n\n[plunk-ads]: http://www.computerworld.com/article/2847727/mozilla-plunks-ads-into-firefox.html\n[flipboard]: https://flipboard.com/\n[s2w]: https://air.mozilla.org/subscribe2web/\n[flattr]: https://flattr.com/\n[dtns]: http://www.dailytechnewsshow.com/\n[dtns-patreon]: https://www.patreon.com/acedtect\n[tiles-flow]: https://ffp4g1ylyit3jdyti1hqcvtb-wpengine.netdna-ssl.com/advancingcontent/files/2015/05/How-data-is-protected-Infographic1.pdf\n[content-services]: https://wiki.mozilla.org/Content_services\n[tiles]: https://blog.mozilla.org/advancingcontent/2015/05/21/providing-a-valuable-platform-for-advertisers-content-publishers-and-users/\n[Adblock Plus]: https://adblockplus.org/\n[party-cookies]: http://www.iab.net/mozilla_rothenberg\n[Facebook's Instant Articles]: http://instantarticles.fb.com/\n[Apple's News app]: https://www.apple.com/news/\n[lightbeam]: https://www.mozilla.org/en-US/lightbeam/\n[performance-bankruptcy]: http://product.voxmedia.com/2015/5/6/8561867/declaring-performance-bankruptcy\n[mobile-web-sucks]: http://www.theverge.com/2015/7/20/9002721/the-mobile-web-sucks\n[translating-seinfeld]: http://www.theverge.com/2015/6/24/8809723/jerry-seinfeld-tv-show-international-translation\n[max-headroom]: http://www.theverge.com/2015/4/2/8285139/max-headroom-oral-history-80s-cyberpunk-interview\n[verge-fan]: https://twitter.com/lmorchard/statuses/142396733316534272\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/07/22/the-verge-web-sucks",
    "thumbnail": "/uploads/2015/the-verge-web-sucks/im-surrounded.png",
    "summary": "<p>TL;DR: Did you know that The Verge delivers you to around 20 companies for advertising &amp; tracking purposes? I didn&apos;t. That might foul up your web experience a little bit. Maybe we should try something different.</p>\n"
  },
  {
    "title": "Parsec Patrol Diaries: Construction Time Again",
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2015",
    "month": "02",
    "day": "09",
    "isDir": false,
    "slug": "parsec-patrol-resumes",
    "date": "2015-02-09T12:00:00.000Z",
    "postName": "2015-02-09-parsec-patrol-resumes",
    "html": "<p>Holy crap. Has it really been a year or so since I last hacked in earnest on\n<a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec Patrol</a>? I&#39;ve been meaning to get back to it, and it&#39;s always felt like\njust last week when I was poking at it.</p>\n<p>Well, a week or so ago, I read <a href=\"https://twitter.com/blakewilliams__\">Blake Williams&#39;</a> &quot;<a href=\"http://robots.thoughtbot.com/replace-%5Bcoffeescript%5D%5B%5D-with-es6\">Replace <a href=\"http://coffeescript.org/\">CoffeeScript</a>\nwith ES6</a>&quot; and thought, &quot;Hmm, on what project did I last use\n<a href=\"http://coffeescript.org/\">CoffeeScript</a>? Oh yeah: <a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec patrol</a>!&quot; So, I decided to take a swing through\nthe code and see what I was last up to. </p>\n<p>After a good look, I started an empty <a href=\"https://github.com/lmorchard/parsec-patrol/commits/newbranch\">new branch</a> in <a href=\"https://github.com/lmorchard/parsec-patrol\">my\nrepo</a> and started from scratch.</p>\n<p>See, I started <a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec Patrol</a> as an excuse to force myself to learn a bunch of\nnew things I&#39;d been putting off for awhile. Near the top of the list were\n<a href=\"http://yeoman.io/\">Yeoman</a>, <a href=\"http://gruntjs.com/\">Grunt</a>, <a href=\"http://bower.io/\">Bower</a>, <a href=\"http://requirejs.org/\">RequireJS</a>, and <a href=\"http://coffeescript.org/\">CoffeeScript</a>. Those\nwere all cool things, so I figured I&#39;d just stir them all up in a big mess and\nsee what happened.</p>\n<p>The process was fun - these were things that slotted into empty spots in my\nwebdev process, both expected and unexpected. Of course, <a href=\"http://requirejs.org/\">RequireJS</a> was a\nlittle awkward in comparison to modules in <a href=\"http://nodejs.org/\">Node.js</a>.  But hey, modules in\nthe browser! And, I never really quite grokked what was going on in those\ntangly <a href=\"http://gruntjs.com/\">Grunt</a> configuration files and just kind of copypasta&#39;d what others\nwere doing. But hey, build automation for all my weird webdev needs!</p>\n<p>Then, after a nice &amp; relaxing holiday vacation to wrap up 2013, I read &quot;<a href=\"http://www.100percentjs.com/just-like-%5Bgrunt%5D%5B%5D-%5Bgulp%5D%5B%5D-%5Bbrowserify%5D%5B%5D-now/\">And\njust like that Grunt and RequireJS are out, it’s all about Gulp and Browserify\nnow</a>&quot;. </p>\n<p>Well that, along with things that followed, just drained my enthusiasm for\n<a href=\"http://gruntjs.com/\">Grunt</a>, <a href=\"http://bower.io/\">Bower</a>, and <a href=\"http://requirejs.org/\">RequireJS</a> in an hurry. But, it didn&#39;t leave me\nwanting to dive into the next big thing right away. So, I took a step back and\nplayed with other things for a few seasons. <a href=\"https://github.com/lmorchard/brick-select\">Web components</a> and <a href=\"https://github.com/lmorchard/node-firefox\">developer\ntools</a> are kind of fun to hack on. <a href=\"https://www.polymer-project.org/\">Polymer</a> was kind of a crazy rabbit\nhole.</p>\n<p>But, over the past year, <a href=\"http://gulpjs.com/\">Gulp</a> and <a href=\"http://browserify.org/\">Browserify</a> started sneaking into my\nwork despite my fatigue - and they were helping me get things done. <a href=\"http://gulpjs.com/\">Gulp</a>\nmade sense to me: writing glue code to process file streams fit into my head a\nwhole lot better than trying to figure out how to shoehorn my intentions into\ndeclarative-ish config files. And <a href=\"http://browserify.org/\">Browserify</a> gave me some <a href=\"http://nodejs.org/\">Node.js</a>-style\nhappiness on the client-side, pushing most of the awkwardness into the build\nsystem.</p>\n<p>So, now I&#39;ve got <a href=\"http://gulpjs.com/\">Gulp</a>, <a href=\"https://www.npmjs.com/\">NPM</a>, <a href=\"http://browserify.org/\">Browserify</a>, and <a href=\"https://6to5.org/\">6to5</a> as a new pile\nof fun that seems like it might have a little bit of staying power. Of course,\n<a href=\"https://www.youtube.com/watch?v=1IOukA10QeQ\">all this io.js business</a> could throw some monkeywrenches around. But,\nit feels like the patterns I&#39;ve got in play here are more stable than the\nprevious regime. </p>\n<p>Maybe I&#39;ll even recover enough enthusiasm for chasing webdev mayflies by this\nspring to take a deeper dive at things like <a href=\"http://facebook.github.io/react/\">React</a> and <a href=\"https://angularjs.org/\">Angular</a> and\n<a href=\"http://emberjs.com/\">Ember</a>. Then again, maybe I&#39;ll bang together a framework of my own just to\nbe cool.</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "body": "Holy crap. Has it really been a year or so since I last hacked in earnest on\n[Parsec Patrol][]? I've been meaning to get back to it, and it's always felt like\njust last week when I was poking at it.\n\nWell, a week or so ago, I read [Blake Williams'][blake] \"[Replace [CoffeeScript][]\nwith ES6][replace]\" and thought, \"Hmm, on what project did I last use\n[CoffeeScript][]? Oh yeah: [Parsec patrol][]!\" So, I decided to take a swing through\nthe code and see what I was last up to. \n\nAfter a good look, I started an empty [new branch][newbranch] in [my\nrepo][repo] and started from scratch.\n\nSee, I started [Parsec Patrol][] as an excuse to force myself to learn a bunch of\nnew things I'd been putting off for awhile. Near the top of the list were\n[Yeoman][], [Grunt][], [Bower][], [RequireJS][], and [CoffeeScript][]. Those\nwere all cool things, so I figured I'd just stir them all up in a big mess and\nsee what happened.\n\nThe process was fun - these were things that slotted into empty spots in my\nwebdev process, both expected and unexpected. Of course, [RequireJS][] was a\nlittle awkward in comparison to modules in [Node.js][].  But hey, modules in\nthe browser! And, I never really quite grokked what was going on in those\ntangly [Grunt][] configuration files and just kind of copypasta'd what others\nwere doing. But hey, build automation for all my weird webdev needs!\n\nThen, after a nice & relaxing holiday vacation to wrap up 2013, I read \"[And\njust like that Grunt and RequireJS are out, it’s all about Gulp and Browserify\nnow][justlikethat]\". \n\nWell that, along with things that followed, just drained my enthusiasm for\n[Grunt][], [Bower][], and [RequireJS][] in an hurry. But, it didn't leave me\nwanting to dive into the next big thing right away. So, I took a step back and\nplayed with other things for a few seasons. [Web components][] and [developer\ntools][] are kind of fun to hack on. [Polymer][] was kind of a crazy rabbit\nhole.\n\nBut, over the past year, [Gulp][] and [Browserify][] started sneaking into my\nwork despite my fatigue - and they were helping me get things done. [Gulp][]\nmade sense to me: writing glue code to process file streams fit into my head a\nwhole lot better than trying to figure out how to shoehorn my intentions into\ndeclarative-ish config files. And [Browserify][] gave me some [Node.js][]-style\nhappiness on the client-side, pushing most of the awkwardness into the build\nsystem.\n\nSo, now I've got [Gulp][], [NPM][], [Browserify][], and [6to5][] as a new pile\nof fun that seems like it might have a little bit of staying power. Of course,\n[all this io.js business][iojs] could throw some monkeywrenches around. But,\nit feels like the patterns I've got in play here are more stable than the\nprevious regime. \n\nMaybe I'll even recover enough enthusiasm for chasing webdev mayflies by this\nspring to take a deeper dive at things like [React][] and [Angular][] and\n[Ember][]. Then again, maybe I'll bang together a framework of my own just to\nbe cool.\n\n[polymer]: https://www.polymer-project.org/\n[react]: http://facebook.github.io/react/\n[angular]: https://angularjs.org/\n[ember]: http://emberjs.com/ \n[web components]: https://github.com/lmorchard/brick-select\n[developer tools]: https://github.com/lmorchard/node-firefox \n[node.js]: http://nodejs.org/\n[npm]: https://www.npmjs.com/\n[parsec Patrol]: https://github.com/lmorchard/parsec-patrol\n[Browserify]: http://browserify.org/\n[yeoman]: http://yeoman.io/\n[6to5]: https://6to5.org/\n[grunt]: http://gruntjs.com/\n[gulp]: http://gulpjs.com/\n[RequireJS]: http://requirejs.org/\n[bower]: http://bower.io/\n[CoffeeScript]: http://coffeescript.org/\n[iojs]: https://www.youtube.com/watch?v=1IOukA10QeQ\n[repo]: https://github.com/lmorchard/parsec-patrol\n[justlikethat]: http://www.100percentjs.com/just-like-[grunt][]-[gulp][]-[browserify][]-now/\n[newbranch]: https://github.com/lmorchard/parsec-patrol/commits/newbranch\n[blake]: https://twitter.com/blakewilliams__\n[replace]: http://robots.thoughtbot.com/replace-[coffeescript][]-with-es6\n\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/02/09/parsec-patrol-resumes"
  },
  {
    "title": "Random thoughts for 2014 Oct 27",
    "tags": [
      "daybook",
      "thoughts",
      "webdev",
      "mobile",
      "social"
    ],
    "year": "2014",
    "month": "10",
    "day": "27",
    "isDir": false,
    "slug": "thoughts",
    "date": "2014-10-27T12:00:00.000Z",
    "postName": "2014-10-27-thoughts",
    "html": "<p>TL;DR: More <a href=\"http://blog.lmorchard.com/2014/10/23/wtfomgbullets\">random stuff</a> collected and updated throughout the day.</p>\n<!--more-->\n\n<ul>\n<li><p>Hello world!</p>\n</li>\n<li><p>&quot;<a href=\"http://www.extremetech.com/extreme/134672-harvard-cracks-dna-storage-crams-700-terabytes-of-data-into-a-single-gram\">Harvard cracks DNA storage, crams 700 terabytes of data into a single\ngram</a>&quot;</p>\n<ul>\n<li><p>Can you imagine what it would be like to have a personal device that\ncould store all the data you would ever need?</p>\n</li>\n<li><p>And stored on media that&#39;s made for copying?</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Dave asks, &quot;<a href=\"http://scripting.com/2014/10/27/whatsTheBestDesktopNodejsShell.html\">What&#39;s the best desktop node.js shell?</a>&quot;</p>\n<ul>\n<li><p>Could be an odd question in the age of CPUs in pockets\n&amp; clouds and the desktop in decline.</p>\n</li>\n<li><p>But, <a href=\"http://scripting.com/davenet/1997/09/14/FractionalHorsepowerHTTPSe.html\">fractional horsepower HTTP servers</a> and <a href=\"http://scripting.com/davenet/2001/01/04/desktopWebsites.html\">desktop\nwebsites</a> are powerful notions.</p>\n<ul>\n<li><p>Back in the day, <a href=\"http://radio.userland.com/\">Radio UserLand</a> and <a href=\"http://www.disobey.com/amphetadesk/\">AmphetaDesk</a> were\nmarvels.</p>\n</li>\n<li><p>First time I realized that a web server in my\nhouse <em>just for me</em> was a good idea.</p>\n</li>\n</ul>\n</li>\n<li><p>I&#39;ve also tried to say a few things about <a href=\"http://blog.lmorchard.com/2012/07/25/aerostats-base-stations-and-the-cloud/\">aerostats and base\nstations</a>.</p>\n</li>\n<li><p><a href=\"https://github.com/rogerwang/node-webkit\">node-webkit</a> seems like something I should check out.</p>\n<ul>\n<li>It&#39;s like <a href=\"http://www.indigostar.com/perl2exe.php\">Perl2EXE</a> all over again!</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>It seems like the sizes of mobile computers are trying to find some\n<a href=\"http://en.wikipedia.org/wiki/Lagrangian_point\">Lagrange points</a> where the influences of human hand size and demand for\nscreen real estate balance.</p>\n<ul>\n<li>Yes, I&#39;m trying to talk myself into <a href=\"http://newsroom.t-mobile.com/news/t-mobile-to-bring-nexus-6-to-its-data-strong-network-this-november.htm\">buying a Nexus 6</a>.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Do we really all <em>want</em> to live in the same big room on the internet?</p>\n<ul>\n<li><p>I&#39;ve <a href=\"http://decafbad.com/recaffeinated/archives/2007/11/20/WoWEVEandDelicious.html\">long thought</a> some separation between groups can help things scale\nsocially and tech-wise.</p>\n</li>\n<li><p>Reddit gets a lot right with subreddits. Kind of a\nsilo, yet avoids a most of the problems.</p>\n</li>\n</ul>\n</li>\n</ul>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "body": "TL;DR: More [random stuff][why] collected and updated throughout the day.\r\n\r\n[why]: http://blog.lmorchard.com/2014/10/23/wtfomgbullets\r\n\r\n<!--more-->\r\n\r\n* Hello world!\r\n\r\n* \"[Harvard cracks DNA storage, crams 700 terabytes of data into a single\r\n  gram][dnadata]\"\r\n\r\n  * Can you imagine what it would be like to have a personal device that\r\n    could store all the data you would ever need?\r\n\r\n  * And stored on media that's made for copying?\r\n\r\n[dnadata]: http://www.extremetech.com/extreme/134672-harvard-cracks-dna-storage-crams-700-terabytes-of-data-into-a-single-gram\r\n\r\n* Dave asks, \"[What's the best desktop node.js shell?][nodeshell]\"\r\n\r\n  * Could be an odd question in the age of CPUs in pockets\r\n    & clouds and the desktop in decline.\r\n\r\n  * But, [fractional horsepower HTTP servers][frac] and [desktop\r\n    websites][deskweb] are powerful notions.\r\n\r\n    * Back in the day, [Radio UserLand][ruser] and [AmphetaDesk][] were\r\n      marvels.\r\n      \r\n    * First time I realized that a web server in my\r\n      house *just for me* was a good idea.\r\n\r\n  * I've also tried to say a few things about [aerostats and base\r\n    stations][aerostats].\r\n\r\n  * [node-webkit][] seems like something I should check out.\r\n\r\n    * It's like [Perl2EXE][] all over again!\r\n\r\n[perl2exe]: http://www.indigostar.com/perl2exe.php\r\n[ruser]: http://radio.userland.com/ \r\n[AmphetaDesk]: http://www.disobey.com/amphetadesk/\r\n[node-webkit]: https://github.com/rogerwang/node-webkit\r\n[aerostats]: http://blog.lmorchard.com/2012/07/25/aerostats-base-stations-and-the-cloud/  \r\n[deskweb]: http://scripting.com/davenet/2001/01/04/desktopWebsites.html\r\n[frac]: http://scripting.com/davenet/1997/09/14/FractionalHorsepowerHTTPSe.html\r\n[nodeshell]: http://scripting.com/2014/10/27/whatsTheBestDesktopNodejsShell.html\r\n\r\n* It seems like the sizes of mobile computers are trying to find some\r\n  [Lagrange points][] where the influences of human hand size and demand for\r\n  screen real estate balance.\r\n\r\n  * Yes, I'm trying to talk myself into [buying a Nexus 6][n6].\r\n\r\n[n6]: http://newsroom.t-mobile.com/news/t-mobile-to-bring-nexus-6-to-its-data-strong-network-this-november.htm\r\n\r\n* Do we really all *want* to live in the same big room on the internet?\r\n\r\n  * I've [long thought][] some separation between groups can help things scale\r\n   socially and tech-wise.\r\n\r\n  * Reddit gets a lot right with subreddits. Kind of a\r\n    silo, yet avoids a most of the problems.\r\n\r\n[long thought]: http://decafbad.com/recaffeinated/archives/2007/11/20/WoWEVEandDelicious.html\r\n[Lagrange points]: http://en.wikipedia.org/wiki/Lagrangian_point\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/10/27/thoughts",
    "summary": "<p>TL;DR: More <a href=\"http://blog.lmorchard.com/2014/10/23/wtfomgbullets\">random stuff</a> collected and updated throughout the day.</p>\n"
  },
  {
    "title": "Playing with a node.js app project layout",
    "tags": [
      "nodejs",
      "webdev",
      "javascript",
      "gulp",
      "heroku"
    ],
    "year": "2014",
    "month": "10",
    "day": "23",
    "isDir": false,
    "slug": "node-project-layout",
    "date": "2014-10-23T12:00:00.000Z",
    "postName": "2014-10-23-node-project-layout",
    "html": "<p>I&#39;m pleased with <a href=\"https://github.com/lmorchard/toothub/tree/913c4d326ea5a424087899a103301323d46d8086\">this project layout</a> for a node.js-based web client /\nserver app.</p>\n<!--more-->\n\n<pre><code class=\"language-bash\">➜  toothub git:(master) ✗ tree\n├── Procfile\n├── README.md\n├── app.json\n├── bin\n│   └── toothub\n├── config.json-dist\n├── htdocs\n│   ├── css\n│   │   └── main.styl\n│   └── index.html\n├── lib\n│   ├── cli\n│   │   ├── index.js\n│   │   └── server.js\n│   ├── client\n│   │   └── index.js\n│   ├── models\n│   │   ├── Item.js\n│   │   └── index.js\n│   └── server\n│       ├── index.js\n│       └── static.js\n├── package.json\n└── test\n    └── test-index.js</code></pre>\n<p><a href=\"http://browserify.org/\">Browserify</a> lets me share a lot of code between client &amp; server, using the same\nconventions.  Though, I have to be careful not to pile too much into the\nclient-side JS bundle. It&#39;s really easy to inflate that.</p>\n<p>The <a href=\"https://www.npmjs.org/package/require-dir\">require-dir</a> module lets me do <a href=\"https://github.com/lmorchard/feeder2/tree/9d02e216e4d4e47351a69eece8bece67d2fed550/lib/cli\">some lazy things</a> to break up my\ncode into more submodules - at least on the server side. It&#39;s a little thing,\nbut I really like it. I first saw it over in <a href=\"http://viget.com/extend/gulp-browserify-starter-faq\">this Gulp + Browserify starter\nkit</a>.</p>\n<p>Thanks to the <a href=\"https://blog.heroku.com/archives/2014/8/7/heroku-button\">Heroku Button</a>, this thing is cake to get running\nsomewhere <em>out there</em>. Free Heroku is like the Raspberry PI of the cloud. I&#39;m\nstarting to think that anyone who&#39;s into indiewebish self-hosting concepts\nshould really be taking a look at this.</p>\n<p>I&#39;ve also been really into <a href=\"http://gulpjs.com/\">Gulp</a> recently, but so far I don&#39;t need it here.\nI&#39;m gratuitously wasting memory and cycles by processing resources on the fly\nthrough the app server rather than generating as static assets. Maybe I&#39;ll\nchange my mind on that after I&#39;ve tinkered for awhile.</p>\n<p>Anyway, now I guess I should actually start making this thing do stuff.</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "body": "I'm pleased with [this project layout][layout] for a node.js-based web client /\r\nserver app.\r\n\r\n<!--more-->\r\n\r\n```bash\r\n➜  toothub git:(master) ✗ tree\r\n├── Procfile\r\n├── README.md\r\n├── app.json\r\n├── bin\r\n│   └── toothub\r\n├── config.json-dist\r\n├── htdocs\r\n│   ├── css\r\n│   │   └── main.styl\r\n│   └── index.html\r\n├── lib\r\n│   ├── cli\r\n│   │   ├── index.js\r\n│   │   └── server.js\r\n│   ├── client\r\n│   │   └── index.js\r\n│   ├── models\r\n│   │   ├── Item.js\r\n│   │   └── index.js\r\n│   └── server\r\n│       ├── index.js\r\n│       └── static.js\r\n├── package.json\r\n└── test\r\n    └── test-index.js\r\n```\r\n\r\n[Browserify][] lets me share a lot of code between client & server, using the same\r\nconventions.  Though, I have to be careful not to pile too much into the\r\nclient-side JS bundle. It's really easy to inflate that.\r\n\r\n[Browserify]: http://browserify.org/\r\n\r\nThe [require-dir][] module lets me do [some lazy things][lazy] to break up my\r\ncode into more submodules - at least on the server side. It's a little thing,\r\nbut I really like it. I first saw it over in [this Gulp + Browserify starter\r\nkit][starterkit].\r\n\r\n[starterkit]: http://viget.com/extend/gulp-browserify-starter-faq\r\n[require-dir]: https://www.npmjs.org/package/require-dir\r\n[lazy]: https://github.com/lmorchard/feeder2/tree/9d02e216e4d4e47351a69eece8bece67d2fed550/lib/cli\r\n\r\nThanks to the [Heroku Button][], this thing is cake to get running\r\nsomewhere *out there*. Free Heroku is like the Raspberry PI of the cloud. I'm\r\nstarting to think that anyone who's into indiewebish self-hosting concepts\r\nshould really be taking a look at this.\r\n\r\n[Heroku Button]: https://blog.heroku.com/archives/2014/8/7/heroku-button\r\n\r\nI've also been really into [Gulp][] recently, but so far I don't need it here.\r\nI'm gratuitously wasting memory and cycles by processing resources on the fly\r\nthrough the app server rather than generating as static assets. Maybe I'll\r\nchange my mind on that after I've tinkered for awhile.\r\n\r\n[gulp]: http://gulpjs.com/\r\n[layout]: https://github.com/lmorchard/toothub/tree/913c4d326ea5a424087899a103301323d46d8086\r\n\r\nAnyway, now I guess I should actually start making this thing do stuff.\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/10/23/node-project-layout",
    "summary": "<p>I&apos;m pleased with <a href=\"https://github.com/lmorchard/toothub/tree/913c4d326ea5a424087899a103301323d46d8086\">this project layout</a> for a node.js-based web client /\nserver app.</p>\n"
  },
  {
    "title": "Static blog generation with Gulp and S3",
    "tags": [
      "metablogging",
      "webdev",
      "js",
      "gulp",
      "jekyll",
      "wordpress"
    ],
    "year": "2014",
    "month": "10",
    "day": "20",
    "isDir": false,
    "slug": "static-blog-generation-with-gulp",
    "date": "2014-10-20T12:00:00.000Z",
    "postName": "2014-10-20-static-blog-generation-with-gulp",
    "html": "<p>I&#39;ve long agreed that many sites, like blogs, are better <a href=\"http://www.aaronsw.com/weblog/000404\">baked than\nfried</a>. It makes for web hosting that&#39;s cheaper to run and simpler to\nmaintain. I&#39;ve also often thought that <a href=\"https://indiewebcamp.com/database-antipattern\">using a database can be an\nanti-pattern</a> for managing content. But, what I&#39;ve also found is\nthat baked sites often yield a poor writing environment. That said, I think\nI&#39;m going to give it another try, because I think I might have found a new\napproach that works for me.</p>\n<!--more-->\n\n<h2 id=\"from-wordpress-to-jekyll-to-wordpress\">From WordPress to Jekyll to WordPress</h2>\n<p><a href=\"http://decafbad.com/blog/2011/06/08/moved-to-jekyll/\">As I&#39;ve mentioned before</a>, I&#39;ve flirted with a variety of\nplatforms for putting stuff from my brain on the web. But, the last time I\nswitched away from WordPress to Jekyll, I ended up switching right back again.</p>\n<p>Jekyll <a href=\"http://blog.lmorchard.com/2012/06/16/blogging-like-a-blogger/\">took <em>way</em> too long</a> to generate my site and its 1150 posts, and I\ncouldn&#39;t figure out how to speed that up for previewing drafts without moving\nfiles around.  I tried a few different external tools like\n<a href=\"http://25.io/mou/\">Mou</a> and <a href=\"http://marked2app.com/\">Marked</a>, but the process\nnever clicked. I&#39;ve also never quite gotten along with Ruby, so I didn&#39;t go\nfar with scratching my own itches on Jekyll.</p>\n<p>On the other hand, WordPress has a nicer writing experience. But, it&#39;s clunky\nin other ways. I&#39;m always worried about all that PHP code sitting around\nfrying up page views, hoping no one figures out how to get at the publishing\nmachinery. I&#39;m also less interested in hacking on PHP for fun, these days.</p>\n<h2 id=\"gulp-is-great\">Gulp is great</h2>\n<p>The place where I&#39;ve been having a lot of hacking fun over the past few years\nis in node.js. So, when I was thinking about trying static hosting for\nmy blog again, I started looking into node.js-based Jekyll clones.</p>\n<p>But then, it occurred to me that <a href=\"http://gulpjs.com/\">Gulp</a> would be a fine tool for the job. In\na nutshell, like unix tools pipe character streams between tools, Gulp pipes\nstreams of files between small utility functions. All I had to do was build up\na small collection of file processing functions and glue them together. </p>\n<h2 id=\"copying-riokis-homework\">Copying Rioki&#39;s homework</h2>\n<p>As it happens, <a href=\"http://www.rioki.org/2014/06/09/jekyll-to-gulp.html\">someone else had already started that work for me</a>! The\ncore of it, handling the posts, looks something <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L34\">like this</a>:</p>\n<pre><code class=\"language-javascript\">function posts (path) {\n  return gulp.src(path)\n    .pipe(frontMatter({property: &#39;page&#39;, remove: true}))\n    .pipe(taskUtils.filename2date())\n    .pipe(marked())\n    .pipe(taskUtils.summarize(&#39;&lt;!--more--&gt;&#39;))\n    .pipe(rename(taskUtils.postNameToDatePath))\n    .pipe(taskUtils.applyTemplate(&#39;design/layouts/post.html&#39;))\n    .pipe(gulp.dest(&#39;build&#39;));\n}</code></pre>\n<p>Pretty clean &amp; straightforward, at least to my eyes.</p>\n<p>Starting from <a href=\"https://github.com/rioki/www.rioki.org/blob/master/gulpfile.js\">Rioki&#39;s gulpfile.js</a>, I hacked and iterated until I had\na <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js\">gulpfile.js</a> of my own, split into <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L34\">a directory of small task\nmodules</a>.  At this point, I&#39;ve got a bunch of in-memory post indexes,\ndate &amp; tag based archive pages, RSS feeds, and a handful of other templated\npages. I can push all the content to an Amazon S3 bucket <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js#L32\">with one\ncommand</a>. </p>\n<p>Oh, and building the whole site only takes around 30 seconds. Still, that&#39;s\nnot fast enough for running previews while writing. So, I&#39;ve broken things up so \n<a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L13\">new &amp; draft posts lead to quick rebuilds when their files change</a> - and I even <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L29\">trigger a LiveReload\nservice</a>\nthat keeps a browser tab updated as I make changes in Vim.</p>\n<p>And, best of all, I understand how the whole thing works. This stuff feels\nnicely maintainable and fun to expand in the future as a\n<a href=\"https://www.stephencovey.com/7habits/7habits-habit7.php\">saw-sharpening</a> / yak-shaving opportunity. I might even take a shot\nat spinning off all the code from the content and release it as a standalone\nmodule installable from <a href=\"http://npmjs.org\">NPM</a> in case anyone else wants to\ntry it out.</p>\n<h2 id=\"from-wordpress-and-jekyll-to-gulp\">From WordPress and Jekyll to Gulp</h2>\n<p>I found <a href=\"https://github.com/benbalter/wordpress-to-jekyll-exporter\">a WordPress-to-Jekyll exporter plugin</a>. It\ngenerates a nice zip file download right from the site admin. That let me\ndump the 50 posts I&#39;ve accumulated since the last switch.</p>\n<p>And, a great thing about the YAML-and-markdown file format used by Jekyll is\nthat I was able to merge my posts from both decafbad.com and\nblog.lmorchard.com just by copying them into the same directory. So, I&#39;m\nthinking that I&#39;ll revive my old blog by squashing it right on into the\nnew, and set up a handful of redirects to unify the whole mess.</p>\n<h2 id=\"amazon-s3-deployment\">Amazon S3 deployment</h2>\n<p><a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\">Hosting a static website on Amazon S3</a> is cheap and fast and low\nmaintenance. And, a module called <a href=\"https://github.com/pgherveou/gulp-awspublish\">gulp-awspublish</a> can handle pushing this\nwhole site to S3 <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js#L32\">really easily</a>.</p>\n<p>Turns out I generate around 4750 files, between all the posts and tags and dates. \nIt takes about 30 minutes to upload the first time. But, <a href=\"https://github.com/pgherveou/gulp-awspublish\">gulp-awspublish</a>\nkeeps track of MD5 hashes. So, next time I generate and upload, it skips all the\npages that haven&#39;t changed. That&#39;s just a handful of files, if\nall I&#39;m doing is publishing one new post.</p>\n<p>It also seems like this module uploads one file at a time. I wonder if I might\nhack it to queue up a few dozen or so in parallel to speed things up? I doubt\nthat uploading thousands of files was the original use case, so it might do\nwith some tweaking.</p>\n<h2 id=\"page-sections-loaded-via-ajax\">Page sections loaded via AJAX</h2>\n<p>I&#39;ve got a simple template for this new blog, and I hope to keep it that way.\nBut, there&#39;s a lot of stuff in that sidebar. Well, I decided to tweak a few\nthings and suddenly I had 4750 files to upload to S3.</p>\n<p>Just because the site is statically published doesn&#39;t mean some parts\ncan&#39;t be dynamic with the help of the client. Rather than put up wth\nregenerating &amp; uploading all the things in the future, I yanked the sidebar\nout of almost every page and generated it as <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/design/sidebar.html\">a separate resource</a>.</p>\n<p>Then, with <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/design/js/main.js\">a tiny bit of jQuery magic</a>, I load that sidebar into\nthe page via AJAX. That shrank the size of the site overall, and it&#39;s so fast\nand cacheable that I never see any difference.</p>\n<p>I think this will be one of the little keys to maintaining the site: Try to\nextract any common element used throughout the site, and push it into a\ndynamically loaded asset. Not everything can be done that way, but I think\nplenty can.</p>\n<h2 id=\"disqus-and-comment-archival\">Disqus and comment archival</h2>\n<p>I&#39;m also back to using Disqus for comments. They&#39;ve got a great service, and\nthey&#39;re not a roach motel. They have a great API, and I even wrote a Python\nscript for decafbad.com that <a href=\"https://github.com/lmorchard/blog.decafbad.com/blob/master/_bin/archive_disqus_comments.py\">archives comments from closed\nthreads</a> right into the blog post itself.</p>\n<p>At some point, I need to get that working again and maybe transliterate it\nover to node.js. </p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>I&#39;ve got some more I&#39;d like to do with this stuff, but the main next steps are\nthese:</p>\n<ul>\n<li>Write more often</li>\n<li>Write more consistently</li>\n</ul>\n<p>Of course, having skimmed through my posts over the years on this blog, I&#39;d\nestimate about 25% of the whole thing is me grousing out loud about the long\nstretches I spend neglecting this place. </p>\n<p>So, who knows? Maybe you&#39;ll see my\nnext post show up sometime next June!</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "body": "I've long agreed that many sites, like blogs, are better [baked than\r\nfried][bake]. It makes for web hosting that's cheaper to run and simpler to\r\nmaintain. I've also often thought that [using a database can be an\r\nanti-pattern][antidatabase] for managing content. But, what I've also found is\r\nthat baked sites often yield a poor writing environment. That said, I think\r\nI'm going to give it another try, because I think I might have found a new\r\napproach that works for me.\r\n\r\n<!--more-->\r\n\r\n## From WordPress to Jekyll to WordPress\r\n\r\n[As I've mentioned before][platforms], I've flirted with a variety of\r\nplatforms for putting stuff from my brain on the web. But, the last time I\r\nswitched away from WordPress to Jekyll, I ended up switching right back again.\r\n\r\nJekyll [took *way* too long][jekyllslow] to generate my site and its 1150 posts, and I\r\ncouldn't figure out how to speed that up for previewing drafts without moving\r\nfiles around.  I tried a few different external tools like\r\n[Mou](http://25.io/mou/) and [Marked](http://marked2app.com/), but the process\r\nnever clicked. I've also never quite gotten along with Ruby, so I didn't go\r\nfar with scratching my own itches on Jekyll.\r\n\r\n[jekyllslow]: http://blog.lmorchard.com/2012/06/16/blogging-like-a-blogger/\r\n\r\nOn the other hand, WordPress has a nicer writing experience. But, it's clunky\r\nin other ways. I'm always worried about all that PHP code sitting around\r\nfrying up page views, hoping no one figures out how to get at the publishing\r\nmachinery. I'm also less interested in hacking on PHP for fun, these days.\r\n\r\n## Gulp is great\r\n\r\nThe place where I've been having a lot of hacking fun over the past few years\r\nis in node.js. So, when I was thinking about trying static hosting for\r\nmy blog again, I started looking into node.js-based Jekyll clones.\r\n\r\nBut then, it occurred to me that [Gulp][] would be a fine tool for the job. In\r\na nutshell, like unix tools pipe character streams between tools, Gulp pipes\r\nstreams of files between small utility functions. All I had to do was build up\r\na small collection of file processing functions and glue them together. \r\n\r\n## Copying Rioki's homework\r\n\r\nAs it happens, [someone else had already started that work for me][rioki]! The\r\ncore of it, handling the posts, looks something [like this][tasks]:\r\n\r\n```javascript\r\nfunction posts (path) {\r\n  return gulp.src(path)\r\n    .pipe(frontMatter({property: 'page', remove: true}))\r\n    .pipe(taskUtils.filename2date())\r\n    .pipe(marked())\r\n    .pipe(taskUtils.summarize('<!--more-->'))\r\n    .pipe(rename(taskUtils.postNameToDatePath))\r\n    .pipe(taskUtils.applyTemplate('design/layouts/post.html'))\r\n    .pipe(gulp.dest('build'));\r\n}\r\n```\r\n\r\nPretty clean & straightforward, at least to my eyes.\r\n\r\nStarting from [Rioki's gulpfile.js][rioki2], I hacked and iterated until I had\r\na [gulpfile.js][] of my own, split into [a directory of small task\r\nmodules][tasks].  At this point, I've got a bunch of in-memory post indexes,\r\ndate & tag based archive pages, RSS feeds, and a handful of other templated\r\npages. I can push all the content to an Amazon S3 bucket [with one\r\ncommand][deploy]. \r\n\r\n[deploy]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js#L32\r\n[tasks]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L34\r\n[gulpfile.js]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js\r\n\r\nOh, and building the whole site only takes around 30 seconds. Still, that's\r\nnot fast enough for running previews while writing. So, I've broken things up so \r\n[new & draft posts lead to quick rebuilds when their files change](https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L13) - and I even [trigger a LiveReload\r\nservice](https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L29)\r\nthat keeps a browser tab updated as I make changes in Vim.\r\n\r\nAnd, best of all, I understand how the whole thing works. This stuff feels\r\nnicely maintainable and fun to expand in the future as a\r\n[saw-sharpening][sharpen] / yak-shaving opportunity. I might even take a shot\r\nat spinning off all the code from the content and release it as a standalone\r\nmodule installable from [NPM](http://npmjs.org) in case anyone else wants to\r\ntry it out.\r\n\r\n## From WordPress and Jekyll to Gulp\r\n\r\nI found [a WordPress-to-Jekyll exporter plugin][exporter]. It\r\ngenerates a nice zip file download right from the site admin. That let me\r\ndump the 50 posts I've accumulated since the last switch.\r\n\r\nAnd, a great thing about the YAML-and-markdown file format used by Jekyll is\r\nthat I was able to merge my posts from both decafbad.com and\r\nblog.lmorchard.com just by copying them into the same directory. So, I'm\r\nthinking that I'll revive my old blog by squashing it right on into the\r\nnew, and set up a handful of redirects to unify the whole mess.\r\n\r\n## Amazon S3 deployment\r\n\r\n[Hosting a static website on Amazon S3][static] is cheap and fast and low\r\nmaintenance. And, a module called [gulp-awspublish][] can handle pushing this\r\nwhole site to S3 [really easily][deploy].\r\n\r\n[static]: http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\r\n\r\nTurns out I generate around 4750 files, between all the posts and tags and dates. \r\nIt takes about 30 minutes to upload the first time. But, [gulp-awspublish][]\r\nkeeps track of MD5 hashes. So, next time I generate and upload, it skips all the\r\npages that haven't changed. That's just a handful of files, if\r\nall I'm doing is publishing one new post.\r\n\r\nIt also seems like this module uploads one file at a time. I wonder if I might\r\nhack it to queue up a few dozen or so in parallel to speed things up? I doubt\r\nthat uploading thousands of files was the original use case, so it might do\r\nwith some tweaking.\r\n\r\n[gulp-awspublish]: https://github.com/pgherveou/gulp-awspublish\r\n\r\n## Page sections loaded via AJAX\r\n\r\nI've got a simple template for this new blog, and I hope to keep it that way.\r\nBut, there's a lot of stuff in that sidebar. Well, I decided to tweak a few\r\nthings and suddenly I had 4750 files to upload to S3.\r\n\r\nJust because the site is statically published doesn't mean some parts\r\ncan't be dynamic with the help of the client. Rather than put up wth\r\nregenerating & uploading all the things in the future, I yanked the sidebar\r\nout of almost every page and generated it as [a separate resource][sidebar].\r\n\r\nThen, with [a tiny bit of jQuery magic][sidebarajax], I load that sidebar into\r\nthe page via AJAX. That shrank the size of the site overall, and it's so fast\r\nand cacheable that I never see any difference.\r\n\r\nI think this will be one of the little keys to maintaining the site: Try to\r\nextract any common element used throughout the site, and push it into a\r\ndynamically loaded asset. Not everything can be done that way, but I think\r\nplenty can.\r\n\r\n[sidebar]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/design/sidebar.html\r\n[sidebarajax]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/design/js/main.js\r\n\r\n## Disqus and comment archival\r\n\r\nI'm also back to using Disqus for comments. They've got a great service, and\r\nthey're not a roach motel. They have a great API, and I even wrote a Python\r\nscript for decafbad.com that [archives comments from closed\r\nthreads][commentarchiver] right into the blog post itself.\r\n\r\n[commentarchiver]: https://github.com/lmorchard/blog.decafbad.com/blob/master/_bin/archive_disqus_comments.py\r\n\r\nAt some point, I need to get that working again and maybe transliterate it\r\nover to node.js. \r\n\r\n## Next steps\r\n\r\nI've got some more I'd like to do with this stuff, but the main next steps are\r\nthese:\r\n\r\n* Write more often\r\n* Write more consistently\r\n\r\nOf course, having skimmed through my posts over the years on this blog, I'd\r\nestimate about 25% of the whole thing is me grousing out loud about the long\r\nstretches I spend neglecting this place. \r\n\r\nSo, who knows? Maybe you'll see my\r\nnext post show up sometime next June!\r\n\r\n[bake]: http://www.aaronsw.com/weblog/000404\r\n[rioki]: http://www.rioki.org/2014/06/09/jekyll-to-gulp.html\r\n[antidatabase]: https://indiewebcamp.com/database-antipattern\r\n[exporter]: https://github.com/benbalter/wordpress-to-jekyll-exporter\r\n[platforms]: http://decafbad.com/blog/2011/06/08/moved-to-jekyll/\r\n\r\n[gulp]: http://gulpjs.com/\r\n[enthusiasm]: http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\r\n[sharpen]: https://www.stephencovey.com/7habits/7habits-habit7.php\r\n[rioki2]: https://github.com/rioki/www.rioki.org/blob/master/gulpfile.js\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/10/20/static-blog-generation-with-gulp",
    "summary": "<p>I&apos;ve long agreed that many sites, like blogs, are better <a href=\"http://www.aaronsw.com/weblog/000404\">baked than\nfried</a>. It makes for web hosting that&apos;s cheaper to run and simpler to\nmaintain. I&apos;ve also often thought that <a href=\"https://indiewebcamp.com/database-antipattern\">using a database can be an\nanti-pattern</a> for managing content. But, what I&apos;ve also found is\nthat baked sites often yield a poor writing environment. That said, I think\nI&apos;m going to give it another try, because I think I might have found a new\napproach that works for me.</p>\n"
  },
  {
    "title": "tootr: microblogging app, hosting not included",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2014/10/11/tootr-1",
    "response_url": [
      null
    ],
    "response_title": [
      null
    ],
    "response_quote": [
      null
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "amazon",
      "metablogging",
      "s3",
      "social",
      "tootr",
      "webdev"
    ],
    "year": "2014",
    "month": "10",
    "day": "11",
    "isDir": false,
    "slug": "tootr-1",
    "date": "2014-10-11T12:00:00.000Z",
    "postName": "2014-10-11-tootr-1",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#S3_is_not_simple_enough\"><span class=\"toc_number toc_depth_1\">1</span> S3 is not simple enough</a>\n    </li>\n    <li>\n      <a href=\"#Login_with_Amazon\"><span class=\"toc_number toc_depth_1\">2</span> Login with Amazon</a>\n    </li>\n    <li>\n      <a href=\"#IAM_and_Roles\"><span class=\"toc_number toc_depth_1\">3</span> IAM and Roles</a>\n    </li>\n    <li>\n      <a href=\"#STS_and_Temporary_Credentials\"><span class=\"toc_number toc_depth_1\">4</span> STS and Temporary Credentials</a>\n    </li>\n    <li>\n      <a href=\"#Demo_time_and_next_steps\"><span class=\"toc_number toc_depth_1\">5</span> Demo time and next steps</a>\n    </li>\n  </ul>\n</div>\n\n<p>In my last two posts, I wrote about how I&#8217;ve been <a href=\"http://blog.lmorchard.com/2014/10/08/microblogging-like-its-2002\">thinking about building yet another microblogging tool</a> and how I think it might be interesting to <a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\">separate web publishing apps from web hosting</a>. Well, I started tinkering, and I&#8217;ve got a rough prototype working.</p>\n<!--more-->\n\n<h2 style=\"text-align: left;\">\n  <span id=\"S3_is_not_simple_enough\">S3 is not simple enough</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  When I think about dead simple web hosting, the first thing that comes to mind is <a href=\"http://aws.amazon.com/s3/\">Amazon S3</a>. I&#8217;ve been a fan of S3 for long enough that <a href=\"https://twitter.com/lmorchard/status/518228792780005376\">digging up my old code freaked me out</a>.\n</p>\n\n<p style=\"text-align: left;\">\n  There&#8217;s not much to the API: GET, PUT, & DELETE web content in URLspace under a &#8220;bucket&#8221; that you pay for by the byte. Overall S3 fits my criteria of &#8220;<a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web#p[IadIcc]\">dead simple hosting service</a>&#8221; rather nicely.\n</p>\n\n<p style=\"text-align: left;\">\n  Amazon S3 is <a href=\"http://aws.amazon.com/s3/pricing/\">super cheap</a>. I&#8217;ve never paid much more than US$0.50 in a month, and that&#8217;s even when I was experimenting with <a href=\"https://github.com/lmorchard/S3Ajax/blob/master/js/wiki.js\">a public-access wiki built atop the service</a> that folks from Amazon itself were playing with. I&#8217;ll probably move my blog there, someday, once I get the notion to revisit static site generators again.\n</p>\n\n<p style=\"text-align: left;\">\n  Amazon S3 is, however, <a href=\"http://www.team.net/mjb/hawg.html\">a professional&#8217;s tool</a>. It expects documentation to be read and training to be had. For a busy person with non-developer things do to, it&#8217;s <a href=\"http://en.wikipedia.org/wiki/Colossal_Cave_Adventure\">a twisty maze of passages, all alike</a>. That makes it a poor consumer product.\n</p>\n\n<p>So, I wondered: How hard would it be to smooth over some of the rough parts and make the experience almost as easy as a normal social media site?</p>\n<h2 style=\"text-align: left;\">\n  <span id=\"Login_with_Amazon\">Login with Amazon</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  First, the on-ramp has to be easy. Filling out a form with username, password, nickname, and email address would be an okay start. (Billing info would be nice, too, but let&#8217;s not go there quite yet.)\n</p>\n\n<p style=\"text-align: left;\">\n  What would be even better, though, is to click one button and reuse data already filled out elsewhere! Filling out forms with personal data is part of the problem web wonks call &#8220;identity&#8221;. Apropos of that, did you know that <a href=\"http://login.amazon.com/website\">Amazon has an identity service</a>? I didn&#8217;t, at least not until last weekend. (<a href=\"http://mobile.awsblog.com/post/Tx3UKF4SV4V0LV3/Announcing-Web-Identity-Federation\">Man, am I behind</a>!)\n</p>\n\n<p style=\"text-align: left;\">\n  I can put a &#8220;<a href=\"http://login.amazon.com/\">Login with Amazon</a>&#8221; button on my web app. You login with your Amazon username & password, but my app doesn&#8217;t see them. Instead, Amazon offers my app some simple profile details &#8211; user ID, email, & full name.\n</p>\n\n<p style=\"text-align: left;\">\n  But, having access to your Amazon identity offers even more power:\n</p>\n\n<li style=\"text-align: left;\">\n  Clicking &#8220;<a href=\"http://login.amazon.com/\">Login with Amazon</a>&#8221; gives your Amazon identity to my app.\n</li>\n<li style=\"text-align: left;\">\n  My app can use your Amazon identity to assume a temporary role.\n</li>\n<li style=\"text-align: left;\">\n  This temporary role enables use of a portion of an S3 bucket.\n</li>\n\n<p style=\"text-align: left;\">\n  This is hewing pretty close to <a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\">the publishing app / hosting service notions I laid out in my last post</a>. So, how does it work?\n</p>\n\n<p style=\"text-align: left;\">\n  Well, one of the things my app receives when you click the &#8220;Login&#8221; button is an <a href=\"http://login.amazon.com/glossary#access_token\"><code>access_token</code></a>. Chasing that <code>access_token</code> down the rabbit hole, I rediscovered Amazon IAM and STS &#8211; <a href=\"http://aws.amazon.com/iam/\">Identity & Access Management</a> and <a href=\"http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html\">Secure Token Service</a>.\n</p>\n\n<h2 style=\"text-align: left;\">\n  <span id=\"IAM_and_Roles\">IAM and Roles</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  Among other things, Amazon IAM lets you define roles and associate them with apps. Roles contain policies that grant access to resources controlled by your account &#8211; e.g. an S3 bucket.\n</p>\n\n<p style=\"text-align: left;\">\n  For example, here&#8217;s a policy snippet for a role I created on IAM:\n</p>\n\n<pre class=\"language-javascript\" style=\"text-align: left;\">{\n \"Effect\": \"Allow\",\n \"Action\": [\n   \"s3:PutObject\",\n   \"s3:PutObjectAcl\",\n   \"s3:DeleteObject\",\n   \"s3:GetObject\",\n   \"s3:GetObjectAcl\"\n ],\n \"Resource\": [\n   \"arn:aws:s3:::tootr/users/amazon/${www.amazon.com:user_id}\",\n   \"arn:aws:s3:::tootr/users/amazon/${www.amazon.com:user_id}/*\"\n ]\n}</pre>\n\n<p style=\"text-align: left;\">\n  This role grants access to GET, PUT, & DELETE web resources in my S3 bucket named &#8220;tootr&#8221; &#8211; but only as long as the resources are under the &#8220;<code>users/amazon/{USER_ID}</code>&#8221; URLspace, where <code>{USER_ID}</code> is a uniquely generated identifier supplied by an Amazon profile.\n</p>\n\n<h2 style=\"text-align: left;\">\n  <span id=\"STS_and_Temporary_Credentials\">STS and Temporary Credentials</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  So, how can someone assume such a role? That&#8217;s <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L103\">where Amazon STS comes in</a>:\n</p>\n\n<pre style=\"text-align: left;\"><code class=\"language-javascript\">$.ajax('https://sts.amazonaws.com/?' + $.param({\n\n  'Action': 'AssumeRoleWithWebIdentity',\n  'Version': '2011-06-15',\n  'RoleArn': 'arn:aws:iam::8675309:role/tootr-amazon-user-buckets',\n  'RoleSessionName': 'web-identity-federation',\n  'ProviderId': 'www.amazon.com',\n  'DurationSeconds': '900',\n  'WebIdentityToken': access_token\n\n})).then(function (dataXML, status, xhr) {\n\n  var data = <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/misc.js#L11\">misc.xmlToObj</a>(dataXML);\n  var credentials = data\n    .AssumeRoleWithWebIdentityResponse\n    .AssumeRoleWithWebIdentityResult\n    .Credentials;\n\n});</code></pre>\n\n<p style=\"text-align: left;\">\n  The <code>RoleArn</code> parameter identifies the IAM role created earlier. The <code>access_token</code> is what my app got when you logged in. The <a href=\"http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html\"><code>AssumeRoleWithWebIdentity</code> API on Amazon STS</a> lets me <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L103\">connect the two and generate temporary credentials</a>.\n</p>\n\n<p style=\"text-align: left;\">\n  Those credentials look something like this:\n</p>\n\n<pre class=\"language-javascript\" style=\"text-align: left;\">{\n  \"SessionToken\":\"NIweiunfiunIUWNLFIsd87\",\n  \"Expiration\":\"2014-10-11T19:15:58Z\",\n  \"AccessKeyId\":\"ASIAQWERTYUIOP\",\n  \"SecretAccessKey\":\"SKLN9869KJnisdhfli\"\n}</pre>\n\n<p style=\"text-align: left;\">\n  As it turns out, <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L148\">these credentials work with Amazon S3</a>. So, after accepting a login and doing the <code>AssumeRoleWithWebIdentity</code> dance, my app can manage web hosting at Amazon S3 on your behalf.\n</p>\n\n<p style=\"text-align: left;\">\n  For further reading, check out &#8220;<a href=\"docs.aws.amazon.com/STS/latest/UsingSTS/CreatingWIF.html\">Creating Temporary Security Credentials for Mobile Apps Using Identity Providers</a>&#8221; in Amazon&#8217;s documentation. That&#8217;s from where I stole most of this stuff.\n</p>\n\n<h2 style=\"text-align: left;\">\n  <span id=\"Demo_time_and_next_steps\">Demo time and next steps</span>\n</h2>\n\n<p style=\"text-align: left;\">\n  I&#8217;ve rolled all of this into <a href=\"https://github.com/lmorchard/tootr\">a microblogging app called &#8220;tootr&#8221;</a>. Here&#8217;s a demo:\n</p>\n\n<li style=\"text-align: left;\">\n  <a href=\"https://lmorchard.github.io/tootr/\">https://lmorchard.github.io/tootr/</a>\n</li>\n\n<p>You can visit the app, click &#8220;Login with Amazon&#8221;, and you&#8217;ll soon be tooting up a storm. But, you should notice some serious drawbacks:</p>\n<ul>\n<li>The app is terrible and missing almost every interesting feature.</li>\n<li>Your username is something like <a href=\"https://tootr.s3.amazonaws.com/users/amazon/amzn1.account.AF5OSES2YSFJEKYBANBHRFB25RXQ/index.html\">AF5OSES2YSFJEKYBANBHRFB25RXQ</a> and that&#8217;s also terrible.</li>\n<li>You&#8217;re tooting into my Amazon S3 bucket. You&#8217;re not paying me or Amazon. I <em>will</em> vandalize &amp; delete your stuff and not feel bad about it.</li>\n</ul>\n<p>As a proof-of-concept, though, I think it works: The &#8220;tootr&#8221; app at <a href=\"https://lmorchard.github.io/tootr/\">lmorchard.github.io</a> publishes to a hosting API at <a href=\"http://s3.amazonaws.com\">s3.amazonaws.com</a>. The on-ramp is a single button click and an Amazon sign-in dialog.</p>\n<p>But, I think all the above issues can be addressed. Also, Amazon is an interesting core for this stuff: Many people have an Amazon account, and Amazon is a place where people generally pay for things. So, it&#8217;s different territory than most social media sites.</p>\n<p>The challenge will be keeping the on-ramp simple while improving the app and switching to a user-owned web hosting space. Still, I think this is promising stuff. At any rate, it&#8217;s tinkering I&#8217;ve been procrastinating for years now, so I&#8217;ve got plenty of ideas to chase down.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#S3_is_not_simple_enough\"><span class=\"toc_number toc_depth_1\">1</span> S3 is not simple enough</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Login_with_Amazon\"><span class=\"toc_number toc_depth_1\">2</span> Login with Amazon</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#IAM_and_Roles\"><span class=\"toc_number toc_depth_1\">3</span> IAM and Roles</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#STS_and_Temporary_Credentials\"><span class=\"toc_number toc_depth_1\">4</span> STS and Temporary Credentials</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Demo_time_and_next_steps\"><span class=\"toc_number toc_depth_1\">5</span> Demo time and next steps</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nIn my last two posts, I wrote about how I&#8217;ve been [thinking about building yet another microblogging tool][1] and how I think it might be interesting to [separate web publishing apps from web hosting][2]. Well, I started tinkering, and I&#8217;ve got a rough prototype working.\r\n\r\n<!--more-->\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"S3_is_not_simple_enough\">S3 is not simple enough</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  When I think about dead simple web hosting, the first thing that comes to mind is <a href=\"http://aws.amazon.com/s3/\">Amazon S3</a>. I&#8217;ve been a fan of S3 for long enough that <a href=\"https://twitter.com/lmorchard/status/518228792780005376\">digging up my old code freaked me out</a>.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  There&#8217;s not much to the API: GET, PUT, & DELETE web content in URLspace under a &#8220;bucket&#8221; that you pay for by the byte. Overall S3 fits my criteria of &#8220;<a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web#p[IadIcc]\">dead simple hosting service</a>&#8221; rather nicely.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  Amazon S3 is <a href=\"http://aws.amazon.com/s3/pricing/\">super cheap</a>. I&#8217;ve never paid much more than US$0.50 in a month, and that&#8217;s even when I was experimenting with <a href=\"https://github.com/lmorchard/S3Ajax/blob/master/js/wiki.js\">a public-access wiki built atop the service</a> that folks from Amazon itself were playing with. I&#8217;ll probably move my blog there, someday, once I get the notion to revisit static site generators again.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  Amazon S3 is, however, <a href=\"http://www.team.net/mjb/hawg.html\">a professional&#8217;s tool</a>. It expects documentation to be read and training to be had. For a busy person with non-developer things do to, it&#8217;s <a href=\"http://en.wikipedia.org/wiki/Colossal_Cave_Adventure\">a twisty maze of passages, all alike</a>. That makes it a poor consumer product.\r\n</p>\r\n\r\nSo, I wondered: How hard would it be to smooth over some of the rough parts and make the experience almost as easy as a normal social media site?\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"Login_with_Amazon\">Login with Amazon</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  First, the on-ramp has to be easy. Filling out a form with username, password, nickname, and email address would be an okay start. (Billing info would be nice, too, but let&#8217;s not go there quite yet.)\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  What would be even better, though, is to click one button and reuse data already filled out elsewhere! Filling out forms with personal data is part of the problem web wonks call &#8220;identity&#8221;. Apropos of that, did you know that <a href=\"http://login.amazon.com/website\">Amazon has an identity service</a>? I didn&#8217;t, at least not until last weekend. (<a href=\"http://mobile.awsblog.com/post/Tx3UKF4SV4V0LV3/Announcing-Web-Identity-Federation\">Man, am I behind</a>!)\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  I can put a &#8220;<a href=\"http://login.amazon.com/\">Login with Amazon</a>&#8221; button on my web app. You login with your Amazon username & password, but my app doesn&#8217;t see them. Instead, Amazon offers my app some simple profile details &#8211; user ID, email, & full name.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  But, having access to your Amazon identity offers even more power:\r\n</p>\r\n\r\n<li style=\"text-align: left;\">\r\n  Clicking &#8220;<a href=\"http://login.amazon.com/\">Login with Amazon</a>&#8221; gives your Amazon identity to my app.\r\n</li>\r\n<li style=\"text-align: left;\">\r\n  My app can use your Amazon identity to assume a temporary role.\r\n</li>\r\n<li style=\"text-align: left;\">\r\n  This temporary role enables use of a portion of an S3 bucket.\r\n</li>\r\n\r\n<p style=\"text-align: left;\">\r\n  This is hewing pretty close to <a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\">the publishing app / hosting service notions I laid out in my last post</a>. So, how does it work?\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  Well, one of the things my app receives when you click the &#8220;Login&#8221; button is an <a href=\"http://login.amazon.com/glossary#access_token\"><code>access_token</code></a>. Chasing that <code>access_token</code> down the rabbit hole, I rediscovered Amazon IAM and STS &#8211; <a href=\"http://aws.amazon.com/iam/\">Identity & Access Management</a> and <a href=\"http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html\">Secure Token Service</a>.\r\n</p>\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"IAM_and_Roles\">IAM and Roles</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  Among other things, Amazon IAM lets you define roles and associate them with apps. Roles contain policies that grant access to resources controlled by your account &#8211; e.g. an S3 bucket.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  For example, here&#8217;s a policy snippet for a role I created on IAM:\r\n</p>\r\n\r\n<pre class=\"language-javascript\" style=\"text-align: left;\">{\r\n \"Effect\": \"Allow\",\r\n \"Action\": [\r\n   \"s3:PutObject\",\r\n   \"s3:PutObjectAcl\",\r\n   \"s3:DeleteObject\",\r\n   \"s3:GetObject\",\r\n   \"s3:GetObjectAcl\"\r\n ],\r\n \"Resource\": [\r\n   \"arn:aws:s3:::tootr/users/amazon/${www.amazon.com:user_id}\",\r\n   \"arn:aws:s3:::tootr/users/amazon/${www.amazon.com:user_id}/*\"\r\n ]\r\n}</pre>\r\n\r\n<p style=\"text-align: left;\">\r\n  This role grants access to GET, PUT, & DELETE web resources in my S3 bucket named &#8220;tootr&#8221; &#8211; but only as long as the resources are under the &#8220;<code>users/amazon/{USER_ID}</code>&#8221; URLspace, where <code>{USER_ID}</code> is a uniquely generated identifier supplied by an Amazon profile.\r\n</p>\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"STS_and_Temporary_Credentials\">STS and Temporary Credentials</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  So, how can someone assume such a role? That&#8217;s <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L103\">where Amazon STS comes in</a>:\r\n</p>\r\n\r\n<pre style=\"text-align: left;\"><code class=\"language-javascript\">$.ajax('https://sts.amazonaws.com/?' + $.param({\r\n\r\n  'Action': 'AssumeRoleWithWebIdentity',\r\n  'Version': '2011-06-15',\r\n  'RoleArn': 'arn:aws:iam::8675309:role/tootr-amazon-user-buckets',\r\n  'RoleSessionName': 'web-identity-federation',\r\n  'ProviderId': 'www.amazon.com',\r\n  'DurationSeconds': '900',\r\n  'WebIdentityToken': access_token\r\n\r\n})).then(function (dataXML, status, xhr) {\r\n\r\n  var data = <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/misc.js#L11\">misc.xmlToObj</a>(dataXML);\r\n  var credentials = data\r\n    .AssumeRoleWithWebIdentityResponse\r\n    .AssumeRoleWithWebIdentityResult\r\n    .Credentials;\r\n\r\n});</code></pre>\r\n\r\n<p style=\"text-align: left;\">\r\n  The <code>RoleArn</code> parameter identifies the IAM role created earlier. The <code>access_token</code> is what my app got when you logged in. The <a href=\"http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html\"><code>AssumeRoleWithWebIdentity</code> API on Amazon STS</a> lets me <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L103\">connect the two and generate temporary credentials</a>.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  Those credentials look something like this:\r\n</p>\r\n\r\n<pre class=\"language-javascript\" style=\"text-align: left;\">{\r\n  \"SessionToken\":\"NIweiunfiunIUWNLFIsd87\",\r\n  \"Expiration\":\"2014-10-11T19:15:58Z\",\r\n  \"AccessKeyId\":\"ASIAQWERTYUIOP\",\r\n  \"SecretAccessKey\":\"SKLN9869KJnisdhfli\"\r\n}</pre>\r\n\r\n<p style=\"text-align: left;\">\r\n  As it turns out, <a href=\"https://github.com/lmorchard/tootr/blob/master/src/javascript/publishers/AmazonS3.js#L148\">these credentials work with Amazon S3</a>. So, after accepting a login and doing the <code>AssumeRoleWithWebIdentity</code> dance, my app can manage web hosting at Amazon S3 on your behalf.\r\n</p>\r\n\r\n<p style=\"text-align: left;\">\r\n  For further reading, check out &#8220;<a href=\"docs.aws.amazon.com/STS/latest/UsingSTS/CreatingWIF.html\">Creating Temporary Security Credentials for Mobile Apps Using Identity Providers</a>&#8221; in Amazon&#8217;s documentation. That&#8217;s from where I stole most of this stuff.\r\n</p>\r\n\r\n<h2 style=\"text-align: left;\">\r\n  <span id=\"Demo_time_and_next_steps\">Demo time and next steps</span>\r\n</h2>\r\n\r\n<p style=\"text-align: left;\">\r\n  I&#8217;ve rolled all of this into <a href=\"https://github.com/lmorchard/tootr\">a microblogging app called &#8220;tootr&#8221;</a>. Here&#8217;s a demo:\r\n</p>\r\n\r\n<li style=\"text-align: left;\">\r\n  <a href=\"https://lmorchard.github.io/tootr/\">https://lmorchard.github.io/tootr/</a>\r\n</li>\r\n\r\nYou can visit the app, click &#8220;Login with Amazon&#8221;, and you&#8217;ll soon be tooting up a storm. But, you should notice some serious drawbacks:\r\n\r\n*   The app is terrible and missing almost every interesting feature.\r\n*   Your username is something like [AF5OSES2YSFJEKYBANBHRFB25RXQ][3] and that&#8217;s also terrible.\r\n*   You&#8217;re tooting into my Amazon S3 bucket. You&#8217;re not paying me or Amazon. I *will* vandalize & delete your stuff and not feel bad about it.\r\n\r\nAs a proof-of-concept, though, I think it works: The &#8220;tootr&#8221; app at [lmorchard.github.io][4] publishes to a hosting API at [s3.amazonaws.com][5]. The on-ramp is a single button click and an Amazon sign-in dialog.\r\n\r\nBut, I think all the above issues can be addressed. Also, Amazon is an interesting core for this stuff: Many people have an Amazon account, and Amazon is a place where people generally pay for things. So, it&#8217;s different territory than most social media sites.\r\n\r\nThe challenge will be keeping the on-ramp simple while improving the app and switching to a user-owned web hosting space. Still, I think this is promising stuff. At any rate, it&#8217;s tinkering I&#8217;ve been procrastinating for years now, so I&#8217;ve got plenty of ideas to chase down.\r\n\r\n [1]: http://blog.lmorchard.com/2014/10/08/microblogging-like-its-2002\r\n [2]: http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\r\n [3]: https://tootr.s3.amazonaws.com/users/amazon/amzn1.account.AF5OSES2YSFJEKYBANBHRFB25RXQ/index.html\r\n [4]: https://lmorchard.github.io/tootr/\r\n [5]: http://s3.amazonaws.com\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/10/11/tootr-1",
    "summary": "\n\n<p>In my last two posts, I wrote about how I&#x2019;ve been <a href=\"http://blog.lmorchard.com/2014/10/08/microblogging-like-its-2002\">thinking about building yet another microblogging tool</a> and how I think it might be interesting to <a href=\"http://blog.lmorchard.com/2014/10/09/separating-publishing-from-hosting-on-the-web\">separate web publishing apps from web hosting</a>. Well, I started tinkering, and I&#x2019;ve got a rough prototype working.</p>\n"
  },
  {
    "title": "Separating publishing from hosting on the web",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2014/10/09/separating-publishing-from-hosting-on-the-web",
    "response_url": [
      null
    ],
    "response_title": [
      null
    ],
    "response_quote": [
      null
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "facebook",
      "metablogging",
      "social",
      "tootr",
      "twitter",
      "webdev"
    ],
    "year": "2014",
    "month": "10",
    "day": "09",
    "isDir": false,
    "slug": "separating-publishing-from-hosting-on-the-web",
    "date": "2014-10-09T12:00:00.000Z",
    "postName": "2014-10-09-separating-publishing-from-hosting-on-the-web",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Hosting_made_stupid_simple\"><span class=\"toc_number toc_depth_1\">1</span> Hosting made stupid simple</a>\n    </li>\n    <li>\n      <a href=\"#There8217s_an_app_for_publishing_that\"><span class=\"toc_number toc_depth_1\">2</span> There&#8217;s an app for publishing that</a>\n    </li>\n    <li>\n      <a href=\"#It8217s_complicated_but_worth_it\"><span class=\"toc_number toc_depth_1\">3</span> It&#8217;s complicated, but worth it</a>\n    </li>\n    <li>\n      <a href=\"#Challenges\"><span class=\"toc_number toc_depth_1\">4</span> Challenges</a>\n    </li>\n  </ul>\n</div>\n\n<p>Social media like Twitter and Facebook combine web publishing and hosting. You can&#8217;t run different software, and you can&#8217;t move your stuff. So, if you&#8217;re unhappy, your choices are a) deal with it or b) abandon your stuff and your friends. Those are pretty rough options.</p>\n<p>But, what if you <em>could</em> move your stuff? And what if you <em>could</em> switch apps?</p>\n<!--more-->\n\n<h2 id=\"hosting-made-stupid-simple\"><span id=\"Hosting_made_stupid_simple\">Hosting made stupid simple</span></h2>\n<p>Imagine a dead simple hosting service that puts stuff on the web for you. The main thing they do is support an API for apps. It&#8217;s not free-as-in-beer, but it&#8217;s cheap. Say $10 / year or maybe even $25 / year if you get serious and rent your own domain name. It could charge per usage, which might mean pennies-per-month if you&#8217;re a not yet a superstar celebrity.</p>\n<p>They also make it easy to get backups and move to a competitor. If they annoy you or go down often or get hacked, you can just pack up and leave. And since your web stuff is made up of static <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a> / <a target=\"_blank\" title=\"JS\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JS</a> / <a target=\"_blank\" title=\"CSS\" href=\"https://developer.mozilla.org/docs/Web/CSS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">CSS</a> / image resources, moving is simple. All your URLs will change, unless you splurged on that domain name. But, I think we can smooth over that problem, like in the olden days when your phone number changed.</p>\n<h2 id=\"theres-an-app-for-publishing-that\"><span id=\"There8217s_an_app_for_publishing_that\">There&#8217;s an app for publishing that</span></h2>\n<p>Now, imagine a publishing app. This could run on a device you own &#8211; like your phone or tablet or laptop. It could also run on someone&#8217;s server in the cloud. When you start using a publishing app, it asks where you keep your stuff. Then, it does a permission dance with you and your hosting service &#8211; &#8220;so-and-so wants to do such-and-such, is this okay?&#8221;</p>\n<p>Having gotten permission, the publishing app can manage some or all of your stuff at the hosting service. A Twitter-alike could maintain some <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a> pages for your random thoughts, help you upload a header image &amp; a picture of yourself. If the authors of the Twitter app disappoint you, you can switch to the Ello-ish app. You don&#8217;t abandon anything or anyone.</p>\n<p>Ideally, these competing apps support the same formats. Or, they offer a way to convert between the two. They&#8217;d have incentive to make transitions easy, because they want you to switch. And that&#8217;s because you can pay for these apps &#8211; say $1 or $5 or $10. They could even offer in-app purchases for themes or analytics or scheduled posts or whatever.</p>\n<h2 id=\"its-complicated-but-worth-it\"><span id=\"It8217s_complicated_but_worth_it\">It&#8217;s complicated, but worth it</span></h2>\n<p>There&#8217;s complexity introduced, here. But, it&#8217;s not that bad, relatively speaking: You don&#8217;t need to deal with configuring web servers, uploading PHP scripts, or logging in with SSH. The hosting service, again, is stupid simple and commoditized.</p>\n<p>Apps can be as complex as their authors like, but that can be hidden from you with great UX &amp; UI. The main thing is that you manage the permissions between your hosting service and your apps &#8211; not nothing, but it&#8217;s not much.</p>\n<p>And, remember, the reason you might choose to accept this extra complexity is because it gives you choice. Both the hosting services and the publishing apps have incentive to serve you &#8211; because you&#8217;re a paying customer and because you can leave.</p>\n<h2 id=\"challenges\"><span id=\"Challenges\">Challenges</span></h2>\n<p>What&#8217;s the incentive for bootstrapping this? I&#8217;m not really sure, beyond thinking it&#8217;s a neat idea. Is there a profit potential, even if just in the range of a lifestyle business?</p>\n<p>It&#8217;s a chicken-and-egg problem: There aren&#8217;t really many (any?) super simple web hosts with great UX, and there aren&#8217;t apps that use them. Which comes first? Probably a little of both, most likely from a web host who also offers their own apps.</p>\n<p>Also, a central challenge in building this kind of ecosystem is to make sure the signup process for a hosting service and the permission dances with apps are easy. This is an opportunity to provide a great user experience, so that the only extra burden is the novelty of considering hosting &amp; publishing as separate concerns.</p>\n<p>I&#8217;m not sure if all the above is a solution. It&#8217;s not a new idea, either. But, I think it deserves revisiting. It might make for some fun tinkering, at least.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#Hosting_made_stupid_simple\"><span class=\"toc_number toc_depth_1\">1</span> Hosting made stupid simple</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#There8217s_an_app_for_publishing_that\"><span class=\"toc_number toc_depth_1\">2</span> There&#8217;s an app for publishing that</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#It8217s_complicated_but_worth_it\"><span class=\"toc_number toc_depth_1\">3</span> It&#8217;s complicated, but worth it</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Challenges\"><span class=\"toc_number toc_depth_1\">4</span> Challenges</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nSocial media like Twitter and Facebook combine web publishing and hosting. You can&#8217;t run different software, and you can&#8217;t move your stuff. So, if you&#8217;re unhappy, your choices are a) deal with it or b) abandon your stuff and your friends. Those are pretty rough options.\r\n\r\nBut, what if you *could* move your stuff? And what if you *could* switch apps?\r\n\r\n<!--more-->\r\n\r\n## <span id=\"Hosting_made_stupid_simple\">Hosting made stupid simple</span>\r\n\r\nImagine a dead simple hosting service that puts stuff on the web for you. The main thing they do is support an API for apps. It&#8217;s not free-as-in-beer, but it&#8217;s cheap. Say $10 / year or maybe even $25 / year if you get serious and rent your own domain name. It could charge per usage, which might mean pennies-per-month if you&#8217;re a not yet a superstar celebrity.\r\n\r\nThey also make it easy to get backups and move to a competitor. If they annoy you or go down often or get hacked, you can just pack up and leave. And since your web stuff is made up of static <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a> / <a target=\"_blank\" title=\"JS\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JS</a> / <a target=\"_blank\" title=\"CSS\" href=\"https://developer.mozilla.org/docs/Web/CSS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">CSS</a> / image resources, moving is simple. All your URLs will change, unless you splurged on that domain name. But, I think we can smooth over that problem, like in the olden days when your phone number changed.\r\n\r\n## <span id=\"There8217s_an_app_for_publishing_that\">There&#8217;s an app for publishing that</span>\r\n\r\nNow, imagine a publishing app. This could run on a device you own &#8211; like your phone or tablet or laptop. It could also run on someone&#8217;s server in the cloud. When you start using a publishing app, it asks where you keep your stuff. Then, it does a permission dance with you and your hosting service &#8211; &#8220;so-and-so wants to do such-and-such, is this okay?&#8221;\r\n\r\nHaving gotten permission, the publishing app can manage some or all of your stuff at the hosting service. A Twitter-alike could maintain some <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a> pages for your random thoughts, help you upload a header image & a picture of yourself. If the authors of the Twitter app disappoint you, you can switch to the Ello-ish app. You don&#8217;t abandon anything or anyone.\r\n\r\nIdeally, these competing apps support the same formats. Or, they offer a way to convert between the two. They&#8217;d have incentive to make transitions easy, because they want you to switch. And that&#8217;s because you can pay for these apps &#8211; say $1 or $5 or $10. They could even offer in-app purchases for themes or analytics or scheduled posts or whatever.\r\n\r\n## <span id=\"It8217s_complicated_but_worth_it\">It&#8217;s complicated, but worth it</span>\r\n\r\nThere&#8217;s complexity introduced, here. But, it&#8217;s not that bad, relatively speaking: You don&#8217;t need to deal with configuring web servers, uploading PHP scripts, or logging in with SSH. The hosting service, again, is stupid simple and commoditized.\r\n\r\nApps can be as complex as their authors like, but that can be hidden from you with great UX & UI. The main thing is that you manage the permissions between your hosting service and your apps &#8211; not nothing, but it&#8217;s not much.\r\n\r\nAnd, remember, the reason you might choose to accept this extra complexity is because it gives you choice. Both the hosting services and the publishing apps have incentive to serve you &#8211; because you&#8217;re a paying customer and because you can leave.\r\n\r\n## <span id=\"Challenges\">Challenges</span>\r\n\r\nWhat&#8217;s the incentive for bootstrapping this? I&#8217;m not really sure, beyond thinking it&#8217;s a neat idea. Is there a profit potential, even if just in the range of a lifestyle business?\r\n\r\nIt&#8217;s a chicken-and-egg problem: There aren&#8217;t really many (any?) super simple web hosts with great UX, and there aren&#8217;t apps that use them. Which comes first? Probably a little of both, most likely from a web host who also offers their own apps.\r\n\r\nAlso, a central challenge in building this kind of ecosystem is to make sure the signup process for a hosting service and the permission dances with apps are easy. This is an opportunity to provide a great user experience, so that the only extra burden is the novelty of considering hosting & publishing as separate concerns.\r\n\r\nI&#8217;m not sure if all the above is a solution. It&#8217;s not a new idea, either. But, I think it deserves revisiting. It might make for some fun tinkering, at least.",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/10/09/separating-publishing-from-hosting-on-the-web",
    "summary": "\n\n<p>Social media like Twitter and Facebook combine web publishing and hosting. You can&#x2019;t run different software, and you can&#x2019;t move your stuff. So, if you&#x2019;re unhappy, your choices are a) deal with it or b) abandon your stuff and your friends. Those are pretty rough options.</p>\n<p>But, what if you <em>could</em> move your stuff? And what if you <em>could</em> switch apps?</p>\n"
  },
  {
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2014/09/29/1288",
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "asides",
      "indieweb",
      "webdev"
    ],
    "format": "status",
    "year": "2014",
    "month": "09",
    "day": "29",
    "isDir": false,
    "slug": "1288",
    "date": "2014-09-29T12:00:00.000Z",
    "postName": "2014-09-29-1288",
    "html": "<p>My <a href=\"http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast/\">serial enthusiasm</a> is straying back toward things Indie Web. So, maybe I&#8217;ll start lighting this thing up again with little bits and bobs of mad web science. This status post, in particular, is really just an excuse to see if <a href=\"http://indiewebcamp.com/webmention\">WebMentions</a> work.</p>\n",
    "body": "My [serial enthusiasm][1] is straying back toward things Indie Web. So, maybe I&#8217;ll start lighting this thing up again with little bits and bobs of mad web science. This status post, in particular, is really just an excuse to see if [WebMentions][2] work.\r\n\r\n [1]: http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast/\r\n [2]: http://indiewebcamp.com/webmention\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/09/29/1288"
  },
  {
    "title": "Parsec Patrol Diaries: How To Avoid Smashing Into Things",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2014/01/18/ppd-avoidance",
    "dsq_thread_id": [
      2140934375
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2014",
    "month": "01",
    "day": "18",
    "isDir": false,
    "slug": "ppd-avoidance",
    "date": "2014-01-18T12:00:00.000Z",
    "postName": "2014-01-18-ppd-avoidance",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Where_to_start\"><span class=\"toc_number toc_depth_1\">1</span> Where to start?</a>\n    </li>\n    <li>\n      <a href=\"#Waypoint_Graphs_Navigation_Meshes\"><span class=\"toc_number toc_depth_1\">2</span> Waypoint Graphs & Navigation Meshes</a>\n    </li>\n    <li>\n      <a href=\"#A_Search\"><span class=\"toc_number toc_depth_1\">3</span> A* Search</a>\n    </li>\n    <li>\n      <a href=\"#Trigonometry_Refresher\"><span class=\"toc_number toc_depth_1\">4</span> Trigonometry Refresher</a>\n    </li>\n    <li>\n      <a href=\"#Spaceships_with_Whiskers\"><span class=\"toc_number toc_depth_1\">5</span> Spaceships with Whiskers</a>\n    </li>\n    <li>\n      <a href=\"#Functions_with_Potential\"><span class=\"toc_number toc_depth_1\">6</span> Functions with Potential</a>\n    </li>\n    <li>\n      <a href=\"#Further_research\"><span class=\"toc_number toc_depth_1\">7</span> Further research</a>\n    </li>\n  </ul>\n</div>\n\n<p>I made a hero ship with beam weapons. I even built drifting asteroids that handle smashing into things. What gave me trouble was finding a way to teach enemy ships how to <em>avoid</em> smashing into things. You know, not perfectly, but just well enough to seem vaguely cunning and worth pretending to outsmart in a video game.</p>\n<!--more-->\n\n<p>In developing Parsec Patrol, I&#8217;ve never had plans or specifications so much as doodles &amp; daydreams. One day I imagined this scene where I&#8217;m piloting the hero ship through a shifting maze of asteroids, a dozen enemy scout ships in fast pursuit. I dodge &amp; weave through the rocks, just barely negotiating the gaps. One by one, the baddies vanish in bursts of light &amp; debris: Some succumb to my beam weapons, while others smash into rocks or bungle into each other. Classic space dogfight material, here.</p>\n<h3 id=\"where-to-start\"><span id=\"Where_to_start\">Where to start?</span></h3>\n<p>From years of playing &amp; tinkering with shooters like Unreal &amp; Quake, I had a vague notion of bots needing &#8220;pathfinding&#8221; algorithms to find their way around levels. So, I started hitting Google, looking to see what I could find and understand just well enough to eliminate from consideration or flag for a deeper dive.</p>\n<h3 id=\"waypoint-graphs--navigation-meshes\"><span id=\"Waypoint_Graphs_Navigation_Meshes\">Waypoint Graphs &amp; Navigation Meshes</span></h3>\n<p>Some of the first pathfinding tools I started reading about were <em>waypoint graphs *and *navigation meshes</em>. It turns out that some bots rely on cheat sheets: map-specific and manually placed points or polygons, traversed to get from point A to point B. Generally it&#8217;s a cheap way to make bots seem like they know where they&#8217;re going, because a human being does most of the work up front.</p>\n<div style=\"width: 322px\" class=\"wp-caption alignleft\">\n  <a href=\"http://www.ai-blog.net/archives/000152.html\"><img class=\"    \" alt=\"\" src=\"http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_waypoints2_AB.jpg\" width=\"312\" height=\"250\" /></a><p class=\"wp-caption-text\">\n    Waypoint graph\n  </p>\n</div>\n\n<div style=\"width: 322px\" class=\"wp-caption alignleft\">\n  <a href=\"www.ai-blog.net/archives/000152.html\"><img class=\"    \" alt=\"\" src=\"http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_navmesh2_AB.jpg\" width=\"312\" height=\"250\" /></a><p class=\"wp-caption-text\">\n    Navigation mesh\n  </p>\n</div>\n\n<p>Unfortunately, an asteroid field is not like a Quake map. In Parsec Patrol, the clusters of rocks are randomly generated and only get more chaotic as the rocks drift and collide. There&#8217;s just no way to handcraft a map for robots in this scenario.</p>\n<h3 id=\"a-search\"><span id=\"A_Search\">A* Search</span></h3>\n<div style=\"width: 220px\" class=\"wp-caption alignright\">\n  <a href=\"http://en.wikipedia.org/wiki/A*_search_algorithm\"><img class=\"   \" alt=\"\" src=\"http://upload.wikimedia.org/wikipedia/commons/5/5d/Astar_progress_animation.gif\" width=\"210\" height=\"210\" /></a><p class=\"wp-caption-text\">\n    A* Search animation from Wikipedia\n  </p>\n</div>\n\n<p>Another approach I found was the <a href=\"http://en.wikipedia.org/wiki/A*_search_algorithm\">A* Search algorithm</a>. There are some <a href=\"http://buildnewgames.com/astar/\">great write-ups on this algorithm</a> out there, so I won&#8217;t try making a hash of it here. You can also <a href=\"http://easystar.nodejitsu.com/demo.html\">try out some implementations in JavaScript</a>.</p>\n<p>This algorithm seems best suited for navigating graphs with few connections between nodes &#8211; a 2D grid, for example, with 8 exits per cell. If I ever wrote a roguelike dungeon crawler, this would be my jam.</p>\n<p>Unfortunately, the world of Parsec Patrol uses a continuous coordinate system, rather than a map of discrete grid cells. And, it seems like a waste to try to find a complete path from point A to point B for this game &#8211; because that path is likely to be made obsolete from moment to moment. So, how about trying to work out the best move for just the next moment?</p>\n<h3 id=\"trigonometry-refresher\"><span id=\"Trigonometry_Refresher\">Trigonometry Refresher</span></h3>\n<div style=\"width: 203px\" class=\"wp-caption alignright\">\n  <a href=\"http://www.hyperionedge.com/2010/04/tron-13-lightcycle-game-grid.html\"><img class=\"     \" alt=\"\" src=\"http://2.bp.blogspot.com/_p21BV9S5a0k/S7n0ztF4bBI/AAAAAAAACKw/u9cPiF-dSXE/s1600/TronCards14.jpg\" width=\"193\" height=\"136\" /></a><p class=\"wp-caption-text\">\n    Right angles only, for Light Cycles\n  </p>\n</div>\n\n<p>I took a short break from research and decided to see what I could come up with on my own. What does it mean to avoid an obstacle?</p>\n<p>One way to avoid a collision is to make a full right angle turn, into a perpendicular course. That works on the Light Cycle Grid, but it&#8217;s a bit extreme. So, I need an angle between 0 and 90 degrees with respect to the ship&#8217;s vector and the obstacle.</p>\n<p>So, I decided to give myself a refresher course in trigonometry:</p>\n<div id=\"attachment_1206\" style=\"width: 510px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/trig2.png\"><img class=\"size-full wp-image-1206 \" alt=\"I am not good at math\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/trig2.png\" width=\"500\" height=\"558\" /></a><p class=\"wp-caption-text\">\n    I am not good at math\n  </p>\n</div>\n\n<p>These scribblings are not meant to impress. Rather, this shows how much I forgot about high school trigonometry. Nonetheless, I worked out how to <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1034\">calculate an appropriate target angle that would miss the obstacle by a defined distance</a>. Having that angle meant that I could turn less drastically while steering for avoidance.</p>\n<p>It was a small victory &#8211; and now I remember <a href=\"http://www.mathwords.com/s/sohcahtoa.htm\">SOHCAHTOA</a> again.</p>\n<h3 id=\"spaceships-with-whiskers\"><span id=\"Spaceships_with_Whiskers\">Spaceships with Whiskers</span></h3>\n<p>Now that I had a way to calculate a steering angle that avoided smashing into something, I needed a way to know when I was headed for a collision.</p>\n<p>If I were trying to build a physical robot, I might add some whiskers to detect the nearest obstacle and trigger a turn. But, how to do that in the virtual game world? A little bit of research brought me to the notion of using <a href=\"https://www.google.com/search?q=collision+detection+ray+casting\">raycasting combined with collision detection</a>, something like this:</p>\n<div id=\"attachment_1191\" style=\"width: 394px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/2014-01-16-21.18.36.jpg\"><img class=\"wp-image-1191 \" alt=\"\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/2014-01-16-21.18.36-1024x768.jpg\" width=\"384\" height=\"288\" /></a><p class=\"wp-caption-text\">\n    Spaceships with whiskers!\n  </p>\n</div>\n\n<p><a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L987\">The algorithm I came up with</a> constructs a vector on each side of the ship. <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1008\">I project circles along the vectors</a>, with a radius based on the margin by which I hoped to avoid obstacles. In order from nearest to farthest, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1015\">I run collision detection for each of the circles</a>. The search stops with the first hit, using the nearest obstacle found.</p>\n<p>So, when my ship finds an obstacle with the whiskers, calculate the avoidance angle, and set that as the steering target for the current game tick. This ends up much more lightweight than finding a complete optimal path, and it can react from moment to moment to the changing game environment.</p>\n<div id=\"attachment_1203\" style=\"width: 510px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/whiskers-twitch-3.gif.gif\"><img class=\"size-full wp-image-1203 \" alt=\"Whiskers are twitchy\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/whiskers-twitch-3.gif.gif\" width=\"500\" height=\"380\" /></a><p class=\"wp-caption-text\">\n    My whiskers are wiggly\n  </p>\n</div>\n\n<p>Unfortunately, this scheme looks funny in action: Since <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1085\">I revert back to target seeking after resolving obstacle avoidance</a>, the enemy ships wiggle as they oscillate between the two strategies. Tracking straight toward the target often brings the ship into collision course &#8211; so once an avoidance course is achieved, target tracking turns right back into the obstacle.</p>\n<h3 id=\"functions-with-potential\"><span id=\"Functions_with_Potential\">Functions with Potential</span></h3>\n<p>What I really wanted was some way for these ships to take many nearby obstacles into account along with seeking toward the target, and come up with a smoothly changing steering angle that seemed not entirely stupid or goofy looking.</p>\n<p>After some further research, I started reading <a href=\"http://www.amazon.com/gp/product/0596005555/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596005555&amp;linkCode=as2&amp;tag=0xdecafbad01-20\">AI for Game Developers</a><img class=\"tvatbijdbdexywujcjjd svuitzfraxzoondqiznf pybiawadmcxjgjpdvhto\" style=\"border: none !important; margin: 0px !important;\" alt=\"\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=0xdecafbad01-20&l=as2&o=1&a=0596005555\" width=\"1\" height=\"1\" border=\"0\" /> by David M. Bourg and Glenn Seemann. In Chapter 5, I found code using <a href=\"http://en.wikipedia.org/wiki/Lennard-Jones_potential\">the Lennard-Jones potential function</a> to drive avoidance of multiple obstacles and target seeking all in one algorithm.</p>\n<div style=\"width: 442px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://chemwiki.ucdavis.edu/Physical_Chemistry/Quantum_Mechanics/Atomic_Theory/Intermolecular_Forces/Lennard-Jones_Potential\"><img alt=\"\" src=\"http://chemwiki.ucdavis.edu/@api/deki/files/8914/Figure_B.jpg\" width=\"432\" height=\"324\" /></a><p class=\"wp-caption-text\">\n    Serious business, this potential function\n  </p>\n</div>\n\n<p>A thumbnail sketch of this function with respect to the game goes something like this: Entities can repel &amp; attract each other. Repulsion &amp; attraction change over distance. For example, swarming entities can attract at long distance and repel when too close.</p>\n<p>Here&#8217;s what <a href=\"http://en.wikipedia.org/wiki/Lennard-Jones_potential#AB_form\">the simplified AB form of this function</a> looks like in my code:</p>\n<p><code>U = (-A/Math.pow(d,n)) + (B/Math.pow(d,m))</code></p>\n<p>There are 4 constants in this function:</p>\n<ul>\n<li><code>A</code> &#8211; magnitude of attraction</li>\n<li><code>n</code> &#8211; attenuation of attraction over distance</li>\n<li><code>B</code> &#8211; magnitude of repulsion</li>\n<li><code>m</code> &#8211; attenuation of repulsion over distance</li>\n</ul>\n<p>Pick values for these constants, and you&#8217;ve got a function that yields a positive (repulsion) or negative (attraction) value for any given distance (<code>d</code>). So far, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/sketches/steering.coffee#L85\">I&#8217;ve just used trial &amp; error to find values for these constants</a>.</p>\n<p>To apply this function, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L904\">I search for obstacles within a certain radius of the ship</a>. That limits the number of calculations, because far-flung obstacles have no significant influence. For each nearby obstacle, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L868\">I calculate distance and apply the potential function</a>. I then <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L877\">calculate a unit vector from each obstacle to the ship and multiply by the result of the potential function</a>.</p>\n<p>Repeat all the above for targets, regardless of range, and with function constants that yield attraction rather than repulsion.</p>\n<p>That leaves me with a collection of vectors, each with a direction and a magnitude representing the weighted urgency of heading in that direction right now. I sum all these vectors, <a href=\"https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L932\">leaving a single vector with an angle useful as a steering goal</a>. I ignore the magnitude, because it was only useful during addition for influencing the angle.</p>\n<p><span class='embed-youtube' style='text-align:center; display: block;'></span></p>\n<p>Now, perhaps I&#8217;ve come off sounding smart after having written the above. But, I&#8217;ve already established that I&#8217;m not good at math. It&#8217;s quite possible I&#8217;ve abused &amp; misused this function entirely. That said, <a href=\"http://lmorchard.github.io/parsec-patrol/sketches/steering.html\">I think it&#8217;s produced a satisfying result</a>.</p>\n<div id=\"attachment_1238\" style=\"width: 485px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/potential5.gif\"><img class=\"size-full wp-image-1238 \" alt=\"Smoother steering\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/potential5.gif\" width=\"475\" height=\"375\" /></a><p class=\"wp-caption-text\">\n    Smoother steering with math!\n  </p>\n</div>\n\n<p>The <a href=\"http://lmorchard.github.io/parsec-patrol/sketches/steering.html\">demo sketch</a> has a debug mode full of confusing circles and lines, but it might help illustrate how the function works on they fly. In a nutshell, this means that closer obstacles have a greater influence on causing the ship to steer away. Meanwhile, there&#8217;s a constant influence pulling the ship back toward the target, whenever the mass of obstacles nearby do not dominate steering.</p>\n<p>I want to tinker some more, maybe see if I can make the ships swarm with each other while also avoiding obstacles and heading toward the target. I&#8217;d also like to find a way to stop guessing and calculate the function constants based on the speed &amp; steering characteristics of a given ship. That is, fast &amp; nimble ships should be able to navigate tighter spaces, while big &amp; clumsy ships should start working to avoid collisions from farther away.</p>\n<h3 id=\"further-research\"><span id=\"Further_research\">Further research</span></h3>\n<p>I&#8217;ve been thinking I need to look into <a href=\"http://gamedevelopment.tutsplus.com/tutorials/goal-based-vector-field-pathfinding--gamedev-9007\">vector fields</a> and <a href=\"http://www.red3d.com/cwr/boids/\">flocking behaviors</a> next. I&#8217;m still looking for more options to make this work, too. If you&#8217;ve made it this far reading this post, feel free to toss some suggestions &amp; critique my way. I have basically no idea what I&#8217;m doing, nor even what terms to use in searching for this stuff.</p>\n<p>Still, these are some pretty fun results stumbling along from daydreams to code.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#Where_to_start\"><span class=\"toc_number toc_depth_1\">1</span> Where to start?</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Waypoint_Graphs_Navigation_Meshes\"><span class=\"toc_number toc_depth_1\">2</span> Waypoint Graphs & Navigation Meshes</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#A_Search\"><span class=\"toc_number toc_depth_1\">3</span> A* Search</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Trigonometry_Refresher\"><span class=\"toc_number toc_depth_1\">4</span> Trigonometry Refresher</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Spaceships_with_Whiskers\"><span class=\"toc_number toc_depth_1\">5</span> Spaceships with Whiskers</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Functions_with_Potential\"><span class=\"toc_number toc_depth_1\">6</span> Functions with Potential</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Further_research\"><span class=\"toc_number toc_depth_1\">7</span> Further research</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nI made a hero ship with beam weapons. I even built drifting asteroids that handle smashing into things. What gave me trouble was finding a way to teach enemy ships how to *avoid* smashing into things. You know, not perfectly, but just well enough to seem vaguely cunning and worth pretending to outsmart in a video game.\r\n\r\n<!--more-->\r\n\r\nIn developing Parsec Patrol, I&#8217;ve never had plans or specifications so much as doodles & daydreams. One day I imagined this scene where I&#8217;m piloting the hero ship through a shifting maze of asteroids, a dozen enemy scout ships in fast pursuit. I dodge & weave through the rocks, just barely negotiating the gaps. One by one, the baddies vanish in bursts of light & debris: Some succumb to my beam weapons, while others smash into rocks or bungle into each other. Classic space dogfight material, here.\r\n\r\n### <span id=\"Where_to_start\">Where to start?</span>\r\n\r\nFrom years of playing & tinkering with shooters like Unreal & Quake, I had a vague notion of bots needing &#8220;pathfinding&#8221; algorithms to find their way around levels. So, I started hitting Google, looking to see what I could find and understand just well enough to eliminate from consideration or flag for a deeper dive.\r\n\r\n### <span id=\"Waypoint_Graphs_Navigation_Meshes\">Waypoint Graphs & Navigation Meshes</span>\r\n\r\nSome of the first pathfinding tools I started reading about were *waypoint graphs *and *navigation meshes*. It turns out that some bots rely on cheat sheets: map-specific and manually placed points or polygons, traversed to get from point A to point B. Generally it&#8217;s a cheap way to make bots seem like they know where they&#8217;re going, because a human being does most of the work up front.\r\n\r\n<div style=\"width: 322px\" class=\"wp-caption alignleft\">\r\n  <a href=\"http://www.ai-blog.net/archives/000152.html\"><img class=\"    \" alt=\"\" src=\"http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_waypoints2_AB.jpg\" width=\"312\" height=\"250\" /></a><p class=\"wp-caption-text\">\r\n    Waypoint graph\r\n  </p>\r\n</div>\r\n\r\n<div style=\"width: 322px\" class=\"wp-caption alignleft\">\r\n  <a href=\"www.ai-blog.net/archives/000152.html\"><img class=\"    \" alt=\"\" src=\"http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_navmesh2_AB.jpg\" width=\"312\" height=\"250\" /></a><p class=\"wp-caption-text\">\r\n    Navigation mesh\r\n  </p>\r\n</div>\r\n\r\nUnfortunately, an asteroid field is not like a Quake map. In Parsec Patrol, the clusters of rocks are randomly generated and only get more chaotic as the rocks drift and collide. There&#8217;s just no way to handcraft a map for robots in this scenario.\r\n\r\n### <span id=\"A_Search\">A* Search</span>\r\n\r\n<div style=\"width: 220px\" class=\"wp-caption alignright\">\r\n  <a href=\"http://en.wikipedia.org/wiki/A*_search_algorithm\"><img class=\"   \" alt=\"\" src=\"http://upload.wikimedia.org/wikipedia/commons/5/5d/Astar_progress_animation.gif\" width=\"210\" height=\"210\" /></a><p class=\"wp-caption-text\">\r\n    A* Search animation from Wikipedia\r\n  </p>\r\n</div>\r\n\r\nAnother approach I found was the [A* Search algorithm][1]. There are some [great write-ups on this algorithm][2] out there, so I won&#8217;t try making a hash of it here. You can also [try out some implementations in JavaScript][3].\r\n\r\nThis algorithm seems best suited for navigating graphs with few connections between nodes &#8211; a 2D grid, for example, with 8 exits per cell. If I ever wrote a roguelike dungeon crawler, this would be my jam.\r\n\r\nUnfortunately, the world of Parsec Patrol uses a continuous coordinate system, rather than a map of discrete grid cells. And, it seems like a waste to try to find a complete path from point A to point B for this game &#8211; because that path is likely to be made obsolete from moment to moment. So, how about trying to work out the best move for just the next moment?\r\n\r\n### <span id=\"Trigonometry_Refresher\">Trigonometry Refresher</span>\r\n\r\n<div style=\"width: 203px\" class=\"wp-caption alignright\">\r\n  <a href=\"http://www.hyperionedge.com/2010/04/tron-13-lightcycle-game-grid.html\"><img class=\"     \" alt=\"\" src=\"http://2.bp.blogspot.com/_p21BV9S5a0k/S7n0ztF4bBI/AAAAAAAACKw/u9cPiF-dSXE/s1600/TronCards14.jpg\" width=\"193\" height=\"136\" /></a><p class=\"wp-caption-text\">\r\n    Right angles only, for Light Cycles\r\n  </p>\r\n</div>\r\n\r\nI took a short break from research and decided to see what I could come up with on my own. What does it mean to avoid an obstacle?\r\n\r\nOne way to avoid a collision is to make a full right angle turn, into a perpendicular course. That works on the Light Cycle Grid, but it&#8217;s a bit extreme. So, I need an angle between 0 and 90 degrees with respect to the ship&#8217;s vector and the obstacle.\r\n\r\nSo, I decided to give myself a refresher course in trigonometry:\r\n\r\n<div id=\"attachment_1206\" style=\"width: 510px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/trig2.png\"><img class=\"size-full wp-image-1206 \" alt=\"I am not good at math\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/trig2.png\" width=\"500\" height=\"558\" /></a><p class=\"wp-caption-text\">\r\n    I am not good at math\r\n  </p>\r\n</div>\r\n\r\nThese scribblings are not meant to impress. Rather, this shows how much I forgot about high school trigonometry. Nonetheless, I worked out how to [calculate an appropriate target angle that would miss the obstacle by a defined distance][4]. Having that angle meant that I could turn less drastically while steering for avoidance.\r\n\r\nIt was a small victory &#8211; and now I remember [SOHCAHTOA][5] again.\r\n\r\n### <span id=\"Spaceships_with_Whiskers\">Spaceships with Whiskers</span>\r\n\r\nNow that I had a way to calculate a steering angle that avoided smashing into something, I needed a way to know when I was headed for a collision.\r\n\r\nIf I were trying to build a physical robot, I might add some whiskers to detect the nearest obstacle and trigger a turn. But, how to do that in the virtual game world? A little bit of research brought me to the notion of using [raycasting combined with collision detection][6], something like this:\r\n\r\n<div id=\"attachment_1191\" style=\"width: 394px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/2014-01-16-21.18.36.jpg\"><img class=\"wp-image-1191 \" alt=\"\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/2014-01-16-21.18.36-1024x768.jpg\" width=\"384\" height=\"288\" /></a><p class=\"wp-caption-text\">\r\n    Spaceships with whiskers!\r\n  </p>\r\n</div>\r\n\r\n[The algorithm I came up with][7] constructs a vector on each side of the ship. [I project circles along the vectors][8], with a radius based on the margin by which I hoped to avoid obstacles. In order from nearest to farthest, [I run collision detection for each of the circles][9]. The search stops with the first hit, using the nearest obstacle found.\r\n\r\nSo, when my ship finds an obstacle with the whiskers, calculate the avoidance angle, and set that as the steering target for the current game tick. This ends up much more lightweight than finding a complete optimal path, and it can react from moment to moment to the changing game environment.\r\n\r\n<div id=\"attachment_1203\" style=\"width: 510px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/whiskers-twitch-3.gif.gif\"><img class=\"size-full wp-image-1203 \" alt=\"Whiskers are twitchy\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/whiskers-twitch-3.gif.gif\" width=\"500\" height=\"380\" /></a><p class=\"wp-caption-text\">\r\n    My whiskers are wiggly\r\n  </p>\r\n</div>\r\n\r\nUnfortunately, this scheme looks funny in action: Since [I revert back to target seeking after resolving obstacle avoidance][10], the enemy ships wiggle as they oscillate between the two strategies. Tracking straight toward the target often brings the ship into collision course &#8211; so once an avoidance course is achieved, target tracking turns right back into the obstacle.\r\n\r\n### <span id=\"Functions_with_Potential\">Functions with Potential</span>\r\n\r\nWhat I really wanted was some way for these ships to take many nearby obstacles into account along with seeking toward the target, and come up with a smoothly changing steering angle that seemed not entirely stupid or goofy looking.\r\n\r\nAfter some further research, I started reading [AI for Game Developers][11]<img class=\"tvatbijdbdexywujcjjd svuitzfraxzoondqiznf pybiawadmcxjgjpdvhto\" style=\"border: none !important; margin: 0px !important;\" alt=\"\" src=\"http://ir-na.amazon-adsystem.com/e/ir?t=0xdecafbad01-20&l=as2&o=1&a=0596005555\" width=\"1\" height=\"1\" border=\"0\" /> by David M. Bourg and Glenn Seemann. In Chapter 5, I found code using [the Lennard-Jones potential function][12] to drive avoidance of multiple obstacles and target seeking all in one algorithm.\r\n\r\n<div style=\"width: 442px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://chemwiki.ucdavis.edu/Physical_Chemistry/Quantum_Mechanics/Atomic_Theory/Intermolecular_Forces/Lennard-Jones_Potential\"><img alt=\"\" src=\"http://chemwiki.ucdavis.edu/@api/deki/files/8914/Figure_B.jpg\" width=\"432\" height=\"324\" /></a><p class=\"wp-caption-text\">\r\n    Serious business, this potential function\r\n  </p>\r\n</div>\r\n\r\nA thumbnail sketch of this function with respect to the game goes something like this: Entities can repel & attract each other. Repulsion & attraction change over distance. For example, swarming entities can attract at long distance and repel when too close.\r\n\r\nHere&#8217;s what [the simplified AB form of this function][13] looks like in my code:\r\n\r\n`U = (-A/Math.pow(d,n)) + (B/Math.pow(d,m))`\r\n\r\nThere are 4 constants in this function:\r\n\r\n*   `A` &#8211; magnitude of attraction\r\n*   `n` &#8211; attenuation of attraction over distance\r\n*   `B` &#8211; magnitude of repulsion\r\n*   `m` &#8211; attenuation of repulsion over distance\r\n\r\nPick values for these constants, and you&#8217;ve got a function that yields a positive (repulsion) or negative (attraction) value for any given distance (`d`). So far, [I&#8217;ve just used trial & error to find values for these constants][14].\r\n\r\nTo apply this function, [I search for obstacles within a certain radius of the ship][15]. That limits the number of calculations, because far-flung obstacles have no significant influence. For each nearby obstacle, [I calculate distance and apply the potential function][16]. I then [calculate a unit vector from each obstacle to the ship and multiply by the result of the potential function][17].\r\n\r\nRepeat all the above for targets, regardless of range, and with function constants that yield attraction rather than repulsion.\r\n\r\nThat leaves me with a collection of vectors, each with a direction and a magnitude representing the weighted urgency of heading in that direction right now. I sum all these vectors, [leaving a single vector with an angle useful as a steering goal][18]. I ignore the magnitude, because it was only useful during addition for influencing the angle.\r\n\r\n<span class='embed-youtube' style='text-align:center; display: block;'></span>\r\n\r\nNow, perhaps I&#8217;ve come off sounding smart after having written the above. But, I&#8217;ve already established that I&#8217;m not good at math. It&#8217;s quite possible I&#8217;ve abused & misused this function entirely. That said, [I think it&#8217;s produced a satisfying result][19].\r\n\r\n<div id=\"attachment_1238\" style=\"width: 485px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/potential5.gif\"><img class=\"size-full wp-image-1238 \" alt=\"Smoother steering\" src=\"http://blog.lmorchard.com/wp-content/uploads/2014/01/potential5.gif\" width=\"475\" height=\"375\" /></a><p class=\"wp-caption-text\">\r\n    Smoother steering with math!\r\n  </p>\r\n</div>\r\n\r\nThe [demo sketch][19] has a debug mode full of confusing circles and lines, but it might help illustrate how the function works on they fly. In a nutshell, this means that closer obstacles have a greater influence on causing the ship to steer away. Meanwhile, there&#8217;s a constant influence pulling the ship back toward the target, whenever the mass of obstacles nearby do not dominate steering.\r\n\r\nI want to tinker some more, maybe see if I can make the ships swarm with each other while also avoiding obstacles and heading toward the target. I&#8217;d also like to find a way to stop guessing and calculate the function constants based on the speed & steering characteristics of a given ship. That is, fast & nimble ships should be able to navigate tighter spaces, while big & clumsy ships should start working to avoid collisions from farther away.\r\n\r\n### <span id=\"Further_research\">Further research</span>\r\n\r\nI&#8217;ve been thinking I need to look into [vector fields][20] and [flocking behaviors][21] next. I&#8217;m still looking for more options to make this work, too. If you&#8217;ve made it this far reading this post, feel free to toss some suggestions & critique my way. I have basically no idea what I&#8217;m doing, nor even what terms to use in searching for this stuff.\r\n\r\nStill, these are some pretty fun results stumbling along from daydreams to code.\r\n\r\n [1]: http://en.wikipedia.org/wiki/A*_search_algorithm\r\n [2]: http://buildnewgames.com/astar/\r\n [3]: http://easystar.nodejitsu.com/demo.html\r\n [4]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1034\r\n [5]: http://www.mathwords.com/s/sohcahtoa.htm\r\n [6]: https://www.google.com/search?q=collision+detection+ray+casting\r\n [7]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L987\r\n [8]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1008\r\n [9]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1015\r\n [10]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L1085\r\n [11]: http://www.amazon.com/gp/product/0596005555/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0596005555&linkCode=as2&tag=0xdecafbad01-20\r\n [12]: http://en.wikipedia.org/wiki/Lennard-Jones_potential\r\n [13]: http://en.wikipedia.org/wiki/Lennard-Jones_potential#AB_form\r\n [14]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/sketches/steering.coffee#L85\r\n [15]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L904\r\n [16]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L868\r\n [17]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L877\r\n [18]: https://github.com/lmorchard/parsec-patrol/blob/2e3f9afa2404fee54b09152e3d5746c4c4a2b4ca/app/scripts/systems.coffee#L932\r\n [19]: http://lmorchard.github.io/parsec-patrol/sketches/steering.html\r\n [20]: http://gamedevelopment.tutsplus.com/tutorials/goal-based-vector-field-pathfinding--gamedev-9007\r\n [21]: http://www.red3d.com/cwr/boids/",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/01/18/ppd-avoidance",
    "thumbnail": "http://i252.photobucket.com/albums/hh9/PaulTozour/Halaa_waypoints2_AB.jpg",
    "summary": "\n\n<p>I made a hero ship with beam weapons. I even built drifting asteroids that handle smashing into things. What gave me trouble was finding a way to teach enemy ships how to <em>avoid</em> smashing into things. You know, not perfectly, but just well enough to seem vaguely cunning and worth pretending to outsmart in a video game.</p>\n"
  },
  {
    "title": "Parsec Patrol Diaries: Entity Component Systems",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/11/27/entity-component-system",
    "dsq_thread_id": [
      2003369569
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2013",
    "month": "11",
    "day": "27",
    "isDir": false,
    "slug": "entity-component-system",
    "date": "2013-11-27T12:00:00.000Z",
    "postName": "2013-11-27-entity-component-system",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Background\"><span class=\"toc_number toc_depth_1\">1</span> Background</a>\n    </li>\n    <li>\n      <a href=\"#Entities\"><span class=\"toc_number toc_depth_1\">2</span> Entities</a>\n    </li>\n    <li>\n      <a href=\"#Components\"><span class=\"toc_number toc_depth_1\">3</span> Components</a>\n    </li>\n    <li>\n      <a href=\"#Systems\"><span class=\"toc_number toc_depth_1\">4</span> Systems</a>\n    </li>\n    <li>\n      <a href=\"#Putting_it_together\"><span class=\"toc_number toc_depth_1\">5</span> Putting it together</a>\n    </li>\n    <li>\n      <a href=\"#Having_fun_with_it\"><span class=\"toc_number toc_depth_1\">6</span> Having fun with it</a>\n    </li>\n  </ul>\n</div>\n\n<p>The <strong>Entity</strong>, <strong>Component</strong>, &amp; <strong>System</strong> design pattern is old hat for many game developers. But, keep in mind that I&#8217;m a web developer, and mostly on the server side of things for the past decade or so. One of my last big revelations was discovering the Model, View, &amp; Controller way of doing things. Apropos of that, this ECS thing seems to be a Big Deal of similar proportions.</p>\n<!--more-->\n\n<p>When I first started working on <a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec Patrol</a>, I started sketching out a plain vanilla class hierarchy. You know, the kind I saw when I first started learning about Object Oriented Programming.</p>\n<p>I started with an <code>Entity</code>, which begat a <code>RenderableEntity</code>, which begat things like a <code>SpaceShipWithThrustersRenderableEntity</code>. I built a game loop that iterated through all the objects in the universe, calling a <code>tick()</code> method on each in turn. Simple, just like things I&#8217;d seen in textbooks.</p>\n<p>As I started trying to pile things in, though, I flirted with <a href=\"http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem\">multiple inheritance</a> and primitive <a href=\"http://en.wikipedia.org/wiki/Composite_pattern\">composite patterns</a> and everything just got messy and slow. Performance sucked, and <a href=\"http://blog.artillery.com/2012/10/browser-garbage-collection-and-framerate.html\">garbage collection</a> went wild. So, I figured I must be Doing It Wrong, and started on a Google quest into game engine design to maybe absorb some modern thinking on these matters. Eventually, I stubbed my brain on the notion of an &#8220;entity/component system&#8221;.</p>\n<h2 id=\"background\"><span id=\"Background\">Background</span></h2>\n<p>Plenty of other blog posts &amp; articles out there have done a great job of describing how an ECS design works:</p>\n<ul>\n<li><a href=\"http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/\">Entity Systems are the future of MMOG development</a> (Sep 2007)</li>\n<li><a href=\"http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/\">Evolve Your Hierarchy</a> (Jan 2007)</li>\n<li><a href=\"http://www.richardlord.net/blog/why-use-an-entity-framework\">Why use an entity system framework for game development?</a> (Feb 2012)</li>\n<li><a href=\"http://www.chris-granger.com/2012/12/11/anatomy-of-a-knockout/\">Anatomy of a Knockout</a> (Dec 2012)</li>\n<li><a href=\"http://www.gamedev.net/page/resources/_/technical/game-programming/understanding-component-entity-systems-r3013\">Understanding Component-Entity-Systems</a> (April 2013)</li>\n<li><a href=\"http://gamadu.com/artemis/tutorial.html\">Artemis Entity System Framework</a></li>\n<li><a href=\"http://www.ashframework.org/\">Ash entity framework</a></li>\n</ul>\n<p>I don&#8217;t want to totally reinvent the wheel here. But, let&#8217;s see if I can&#8217;t break it down a little, if only to convey my excitement with discovering this design pattern and the fun I&#8217;ve had with it.</p>\n<h2 id=\"entities\"><span id=\"Entities\">Entities</span></h2>\n<p>First, you&#8217;ve got the <strong>Entity</strong>: Everything in the game universe is an <strong>Entity</strong> &#8211; ships, rocks, missiles, the works. In my naive OOP world, Entities were instances of classes from my tangly, thorny hierarchy.</p>\n<p>But, in this ECS world, an <strong>Entity</strong> is a database ID &#8211; just a string, really.</p>\n<div id=\"attachment_1143\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities.jpg\"><img class=\"size-large wp-image-1143\" alt=\"Entities\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Entities: OOP & ECS\n  </p>\n</div>\n\n<p>Wait, what? Yeah, that was the first thing that bruised my lobes. This design pattern turns everything inside out. An ECS framework is better understood as a data-oriented system than an object-oriented system. In fact, <a href=\"http://t-machine.org/index.php/2009/10/26/entity-systems-are-the-future-of-mmos-part-5/\">a blog post describing an ECS system in relational database terms</a> really drove it home for me.</p>\n<h2 id=\"components\"><span id=\"Components\">Components</span></h2>\n<p>So, given that an <strong>Entity</strong> is an ID in a system that looks like a SQL database from a certain angle, what&#8217;s in the database?</p>\n<p><strong>Components</strong> are in the database. Specifically, <strong>Component</strong> types correspond to tables and <strong>Component</strong> instances correspond to rows. Structurally, a <strong>Component</strong> is a collection of properties &#8211; not unlike the columns in a row in a table in a database.</p>\n<div id=\"attachment_1145\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.14.50.jpg\"><img class=\"size-large wp-image-1145\" alt=\"Parsec Patrol Components\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.14.50-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Components: OOP & ECS\n  </p>\n</div>\n\n<p>In case it doesn&#8217;t quite make sense yet, here are some sample <strong>Components</strong>:</p>\n<ul>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L86\"><strong>Sprite</strong></a> &#8211; <em>width, height, shape</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L26\"><strong>Position</strong></a> &#8211; <em>x, y, rotation</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L33\"><strong>Motion</strong></a> &#8211; <em>dx, dy, drotation</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L40\"><strong>Thruster</strong></a> &#8211; <em>accel_per_second, max_speed</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L110\"><strong>Seeker</strong></a> &#8211; <em>target_entity_id, rotation_per_second</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L201\"><strong>Health</strong></a> &#8211; <em>max_health, current_health</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L201\"><strong>BeamWeapon</strong></a> &#8211; <em>max_power, current_power, recharge_per_second</em></li>\n<li><a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L137\"><strong>MissileWeapon</strong></a> &#8211; <em>number_turrets, reload_delay</em></li>\n</ul>\n<p>Imagine each of those as schema for database tables, each with the <strong>Entity</strong> ID as primary key. Given an <strong>Entity</strong> ID, you can query across all the tables and assemble a set of <strong>Components</strong> that completely describe an <strong>Entity</strong> in the game universe.</p>\n<p>Note that any given <strong>Entity</strong> can be composed of any combination of these <strong>Components</strong>: A spaceship might be described by <strong>Shape</strong>, <strong>Position</strong>, <strong>Motion</strong>, <strong>Thruster</strong>, <strong>Health</strong>, and <strong>BeamWeapon</strong>. Meanwhile, an asteroid drifting in space might only offer <strong>Shape</strong>, <strong>Position</strong>, and <strong>Motion</strong>.</p>\n<p>(Also, just to be pedantic: This doesn&#8217;t <em>really</em> have to live in a SQL database. In fact, I currently just use an ad-hoc in-memory key-value store &#8211; i.e. <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/entities.coffee#L9\">a set of heavily-abused JavaScript objects</a>.)</p>\n<h2 id=\"systems\"><span id=\"Systems\">Systems</span></h2>\n<p>So, where&#8217;s the stuff that makes things go? In an OOP design, this would live in the methods of the objects, bundled by classes to go alongside the data. In the ECS design, <strong>Entities</strong> are <em>just</em> IDs and <strong>Components</strong> are <em>just</em> data &#8211; neither methods nor code implementing game logic live in either of those artifacts.</p>\n<p>This is where <strong>Systems</strong> come in: <strong>Systems</strong> are modular mini-game loops. The <a href=\"https://github.com/lmorchard/parsec-patrol/blob/master/app/scripts/worlds.coffee#L62\">&#8220;master&#8221; game loop</a> holds a list of available systems and runs a <code>tick()</code> method on each of those in turn. Each <strong>System</strong> performs a query against the <strong>Component</strong> database &#8211; usually for all instances of a particular type &#8211; and crunches through updating the properties for each.</p>\n<div id=\"attachment_1146\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.47.11.jpg\"><img class=\"size-large wp-image-1146\" alt=\"Systems: Most confusing diagram ever?\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.47.11-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Systems: Most confusing diagram ever?\n  </p>\n</div>\n\n<p>Consider a <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L793\"><strong>MotionSystem</strong></a>:</p>\n<ul>\n<li>Fetch all the <strong>Motion</strong> components from the database</li>\n<li>For each <strong>Motion</strong>, look up a <strong>Position</strong> for the same <strong>Entity</strong>.</li>\n<li>Update the <code>x</code>, <code>y</code>, and <code>rotation</code> properties of the <strong>Position</strong> using the <strong>Motion</strong> properties.</li>\n</ul>\n<p>Consider a <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1136\"><strong>SeekerSystem</strong></a>:</p>\n<ul>\n<li>Fetch all the <strong>Seeker</strong> components.</li>\n<li>For each, find the <strong>Motion</strong> and <strong>Position</strong> components for the corresponding <strong>Entity</strong>.</li>\n<li>Also find <strong>Motion</strong> &amp; <strong>Position</strong> for the <strong>Entity</strong> identified as the <code>target_entity_id</code>.</li>\n<li>Calculate the angle between seeker &amp; target, update <strong>Motion</strong> to steer toward the target.</li>\n</ul>\n<p>Notice that each system deals only with data directly relevant to the job at hand. Rather than loading up a full representation of an <strong>Entity</strong>, each <strong>System</strong> only touches the specific <strong>Components</strong> needed. For instance, <strong>MotionSystem</strong> and <strong>SeekerSystem</strong> touch <strong>Motion</strong> and <strong>Position</strong> - but never <strong>Shape Components</strong>.</p>\n<p>This adds some efficiencies for data stored entirely in memory. But, I expect this will have <em>huge</em> implications for data that might someday come from a database or over a network. I&#8217;m also thinking that this pattern lends well to shuffling certain systems off onto background threads or Web Workers &#8211; the need for data coordination is limited to just the relevant <strong>Components</strong> when needed.</p>\n<h2 id=\"putting-it-together\"><span id=\"Putting_it_together\">Putting it together</span></h2>\n<div id=\"attachment_1149\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://lmorchard.github.io/parsec-patrol/sketches/sprites.html\"><img class=\"size-large wp-image-1149 \" alt=\"Parsec Patrol Dancing Sprites\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/Screenshot-2013-11-27-11.16.42-1024x714.png\" width=\"640\" height=\"446\" /></a><p class=\"wp-caption-text\">\n    Parade! Of! Sprites!\n  </p>\n</div>\n\n<p>These <strong>Systems</strong> feel a lot like <a href=\"html5hub.com/build-a-javascript-particle-system/\">particle systems</a>: Tight, focused code working close to the metal with data, skipping a lot of overhead and object juggling. <strong>Components</strong> get modified in place and are rarely discarded &#8211; that seems to save me from a lot of <a href=\"http://buildnewgames.com/garbage-collector-friendly-code/\">garbage collection issues</a>. And, if a particular <strong>Component</strong> is not actually used by any existing <strong>Entity</strong>, the <strong>System</strong> looking for it just won&#8217;t perform any work.</p>\n<p>For the most part, <strong>Systems</strong> act independently &amp; are very loosely coupled. They can cooperate through shared <strong>Component</strong> data &#8211; consider how the <strong>SeekerSystem</strong> modifies the <strong>Motion</strong> <strong>Component</strong>, and the <strong>MotionSystem</strong> uses that data to move the <strong>Position</strong> <strong>Component</strong>. I&#8217;m also playing with <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/worlds.coffee#L38\">a crude pub/sub messaging system</a> for things like <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1583\">transmitting damage</a> from one <strong>Entity</strong> to another, but I suspect that might be the wrong approach.</p>\n<p>And, once I was freed from my tangled class hierarchy, things started to get fun. The mental cost for adding a new layer to the system dropped fast: Add a new <strong>Component</strong> or two, add a new <strong>System</strong> &#8211; and suddenly <strong>Entities</strong> can do new things!</p>\n<h2 id=\"having-fun-with-it\"><span id=\"Having_fun_with_it\">Having fun with it</span></h2>\n<p>And, the most fun part? I get to describe things in the game world like a five-year-old and not give a crap about serious programming stuff:</p>\n<div id=\"attachment_1148\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-11.06.12.jpg\"><img class=\"size-large wp-image-1148\" alt=\"Spaceship doodles\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-11.06.12-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Spaceship doodles\n  </p>\n</div>\n\n<p>I&#8217;ve got <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/radar.coffee#L103\">a bad guy space ship</a>! And it&#8217;s <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L660\">shaped like an arrow</a>! And it&#8217;s got <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1193\">rocket thrusters</a>! And it <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1193\">chases the good guy</a>! And it has <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1271\">missile launchers</a>! And <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1574\">it blows up when the hero shoots it a lot</a>!</p>\n<p>Oh, and I&#8217;ve got <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/radar.coffee#L47\">a good guy ship</a>! And it&#8217;s <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L646\">shaped like a cool thing different than an arrow</a>! And it&#8217;s also got <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1193\">rocket thrusters</a>! And <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1245\">it goes where you click</a>! And <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1435\">it has lots of laser beam guns</a>!</p>\n<p>Oh, and <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/fields.coffee#L95\">there are rocks</a>! They kind of spin a bit and drift around! They <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L803\">bounce when they run into things</a>! Sometimes <a href=\"https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1608\">they blow up</a>!</p>\n<p>That&#8217;s almost exactly the running dialog in my head when I write the code. It&#8217;s pretty cool.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n  \n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Background\"><span class=\"toc_number toc_depth_1\">1</span> Background</a>\n    </li>\n    <li>\n      <a href=\"#Entities\"><span class=\"toc_number toc_depth_1\">2</span> Entities</a>\n    </li>\n    <li>\n      <a href=\"#Components\"><span class=\"toc_number toc_depth_1\">3</span> Components</a>\n    </li>\n    <li>\n      <a href=\"#Systems\"><span class=\"toc_number toc_depth_1\">4</span> Systems</a>\n    </li>\n    <li>\n      <a href=\"#Putting_it_together\"><span class=\"toc_number toc_depth_1\">5</span> Putting it together</a>\n    </li>\n    <li>\n      <a href=\"#Having_fun_with_it\"><span class=\"toc_number toc_depth_1\">6</span> Having fun with it</a>\n    </li>\n  </ul>\n</div>\n\nThe **Entity**, **Component**, & **System** design pattern is old hat for many game developers. But, keep in mind that I&#8217;m a web developer, and mostly on the server side of things for the past decade or so. One of my last big revelations was discovering the Model, View, & Controller way of doing things. Apropos of that, this ECS thing seems to be a Big Deal of similar proportions.\n\n<!--more-->\n\nWhen I first started working on [Parsec Patrol][1], I started sketching out a plain vanilla class hierarchy. You know, the kind I saw when I first started learning about Object Oriented Programming.\n\nI started with an `Entity`, which begat a `RenderableEntity`, which begat things like a `SpaceShipWithThrustersRenderableEntity`. I built a game loop that iterated through all the objects in the universe, calling a `tick()` method on each in turn. Simple, just like things I&#8217;d seen in textbooks.\n\nAs I started trying to pile things in, though, I flirted with [multiple inheritance][2] and primitive [composite patterns][3] and everything just got messy and slow. Performance sucked, and [garbage collection][4] went wild. So, I figured I must be Doing It Wrong, and started on a Google quest into game engine design to maybe absorb some modern thinking on these matters. Eventually, I stubbed my brain on the notion of an &#8220;entity/component system&#8221;.\n\n## <span id=\"Background\">Background</span>\n\nPlenty of other blog posts & articles out there have done a great job of describing how an ECS design works:\n\n*   [Entity Systems are the future of MMOG development][5] (Sep 2007)\n*   [Evolve Your Hierarchy][6] (Jan 2007)\n*   [Why use an entity system framework for game development?][7] (Feb 2012)\n*   [Anatomy of a Knockout][8] (Dec 2012)\n*   [Understanding Component-Entity-Systems][9] (April 2013)\n*   [Artemis Entity System Framework][10]\n*   [Ash entity framework][11]\n\nI don&#8217;t want to totally reinvent the wheel here. But, let&#8217;s see if I can&#8217;t break it down a little, if only to convey my excitement with discovering this design pattern and the fun I&#8217;ve had with it.\n\n## <span id=\"Entities\">Entities</span>\n\nFirst, you&#8217;ve got the **Entity**: Everything in the game universe is an **Entity** &#8211; ships, rocks, missiles, the works. In my naive OOP world, Entities were instances of classes from my tangly, thorny hierarchy.\n\nBut, in this ECS world, an **Entity** is a database ID &#8211; just a string, really.\n\n<div id=\"attachment_1143\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities.jpg\"><img class=\"size-large wp-image-1143\" alt=\"Entities\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Entities: OOP & ECS\n  </p>\n</div>\n\nWait, what? Yeah, that was the first thing that bruised my lobes. This design pattern turns everything inside out. An ECS framework is better understood as a data-oriented system than an object-oriented system. In fact, [a blog post describing an ECS system in relational database terms][12] really drove it home for me.\n\n## <span id=\"Components\">Components</span>\n\nSo, given that an **Entity** is an ID in a system that looks like a SQL database from a certain angle, what&#8217;s in the database?\n\n**Components** are in the database. Specifically, **Component** types correspond to tables and **Component** instances correspond to rows. Structurally, a **Component** is a collection of properties &#8211; not unlike the columns in a row in a table in a database.\n\n<div id=\"attachment_1145\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.14.50.jpg\"><img class=\"size-large wp-image-1145\" alt=\"Parsec Patrol Components\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.14.50-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Components: OOP & ECS\n  </p>\n</div>\n\nIn case it doesn&#8217;t quite make sense yet, here are some sample **Components**:\n\n*   [**Sprite**][13] &#8211; *width, height, shape*\n*   [**Position**][14] &#8211; *x, y, rotation*\n*   [**Motion**][15] &#8211; *dx, dy, drotation*\n*   [**Thruster**][16] &#8211; *accel\\_per\\_second, max_speed*\n*   [**Seeker**][17] &#8211; *target\\_entity\\_id, rotation\\_per\\_second*\n*   [**Health**][18] &#8211; *max\\_health, current\\_health*\n*   [**BeamWeapon**][18] &#8211; *max\\_power, current\\_power, recharge\\_per\\_second*\n*   [**MissileWeapon**][19] &#8211; *number\\_turrets, reload\\_delay*\n\nImagine each of those as schema for database tables, each with the **Entity** ID as primary key. Given an **Entity** ID, you can query across all the tables and assemble a set of **Components** that completely describe an **Entity** in the game universe.\n\nNote that any given **Entity** can be composed of any combination of these **Components**: A spaceship might be described by **Shape**, **Position**, **Motion**, **Thruster**, **Health**, and **BeamWeapon**. Meanwhile, an asteroid drifting in space might only offer **Shape**, **Position**, and **Motion**.\n\n(Also, just to be pedantic: This doesn&#8217;t *really* have to live in a SQL database. In fact, I currently just use an ad-hoc in-memory key-value store &#8211; i.e. [a set of heavily-abused JavaScript objects][20].)\n\n## <span id=\"Systems\">Systems</span>\n\nSo, where&#8217;s the stuff that makes things go? In an OOP design, this would live in the methods of the objects, bundled by classes to go alongside the data. In the ECS design, **Entities** are *just* IDs and **Components** are *just* data &#8211; neither methods nor code implementing game logic live in either of those artifacts.\n\nThis is where **Systems** come in: **Systems** are modular mini-game loops. The [&#8220;master&#8221; game loop][21] holds a list of available systems and runs a `tick()` method on each of those in turn. Each **System** performs a query against the **Component** database &#8211; usually for all instances of a particular type &#8211; and crunches through updating the properties for each.\n\n<div id=\"attachment_1146\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.47.11.jpg\"><img class=\"size-large wp-image-1146\" alt=\"Systems: Most confusing diagram ever?\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-10.47.11-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Systems: Most confusing diagram ever?\n  </p>\n</div>\n\nConsider a [**MotionSystem**][22]:\n\n*   Fetch all the **Motion** components from the database\n*   For each **Motion**, look up a **Position** for the same **Entity**.\n*   Update the `x`, `y`, and `rotation` properties of the **Position** using the **Motion** properties.\n\nConsider a [**SeekerSystem**][23]:\n\n*   Fetch all the **Seeker** components.\n*   For each, find the **Motion** and **Position** components for the corresponding **Entity**.\n*   Also find **Motion** & **Position** for the **Entity** identified as the `target_entity_id`.\n*   Calculate the angle between seeker & target, update **Motion** to steer toward the target.\n\nNotice that each system deals only with data directly relevant to the job at hand. Rather than loading up a full representation of an **Entity**, each **System** only touches the specific **Components** needed. For instance, **MotionSystem** and **SeekerSystem** touch **Motion** and **Position** - but never **Shape Components**.\n\nThis adds some efficiencies for data stored entirely in memory. But, I expect this will have *huge* implications for data that might someday come from a database or over a network. I&#8217;m also thinking that this pattern lends well to shuffling certain systems off onto background threads or Web Workers &#8211; the need for data coordination is limited to just the relevant **Components** when needed.\n\n## <span id=\"Putting_it_together\">Putting it together</span>\n\n<div id=\"attachment_1149\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://lmorchard.github.io/parsec-patrol/sketches/sprites.html\"><img class=\"size-large wp-image-1149 \" alt=\"Parsec Patrol Dancing Sprites\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/Screenshot-2013-11-27-11.16.42-1024x714.png\" width=\"640\" height=\"446\" /></a><p class=\"wp-caption-text\">\n    Parade! Of! Sprites!\n  </p>\n</div>\n\nThese **Systems** feel a lot like [particle systems][24]: Tight, focused code working close to the metal with data, skipping a lot of overhead and object juggling. **Components** get modified in place and are rarely discarded &#8211; that seems to save me from a lot of [garbage collection issues][25]. And, if a particular **Component** is not actually used by any existing **Entity**, the **System** looking for it just won&#8217;t perform any work.\n\nFor the most part, **Systems** act independently & are very loosely coupled. They can cooperate through shared **Component** data &#8211; consider how the **SeekerSystem** modifies the **Motion** **Component**, and the **MotionSystem** uses that data to move the **Position** **Component**. I&#8217;m also playing with [a crude pub/sub messaging system][26] for things like [transmitting damage][27] from one **Entity** to another, but I suspect that might be the wrong approach.\n\nAnd, once I was freed from my tangled class hierarchy, things started to get fun. The mental cost for adding a new layer to the system dropped fast: Add a new **Component** or two, add a new **System** &#8211; and suddenly **Entities** can do new things!\n\n## <span id=\"Having_fun_with_it\">Having fun with it</span>\n\nAnd, the most fun part? I get to describe things in the game world like a five-year-old and not give a crap about serious programming stuff:\n\n<div id=\"attachment_1148\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-11.06.12.jpg\"><img class=\"size-large wp-image-1148\" alt=\"Spaceship doodles\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/11/2013-11-27-11.06.12-1024x577.jpg\" width=\"640\" height=\"360\" /></a><p class=\"wp-caption-text\">\n    Spaceship doodles\n  </p>\n</div>\n\nI&#8217;ve got [a bad guy space ship][28]! And it&#8217;s [shaped like an arrow][29]! And it&#8217;s got [rocket thrusters][30]! And it [chases the good guy][30]! And it has [missile launchers][31]! And [it blows up when the hero shoots it a lot][32]!\n\nOh, and I&#8217;ve got [a good guy ship][33]! And it&#8217;s [shaped like a cool thing different than an arrow][34]! And it&#8217;s also got [rocket thrusters][30]! And [it goes where you click][35]! And [it has lots of laser beam guns][36]!\n\nOh, and [there are rocks][37]! They kind of spin a bit and drift around! They [bounce when they run into things][38]! Sometimes [they blow up][39]!\n\nThat&#8217;s almost exactly the running dialog in my head when I write the code. It&#8217;s pretty cool.\n\n [1]: https://github.com/lmorchard/parsec-patrol\n [2]: http://en.wikipedia.org/wiki/Multiple_inheritance#The_diamond_problem\n [3]: http://en.wikipedia.org/wiki/Composite_pattern\n [4]: http://blog.artillery.com/2012/10/browser-garbage-collection-and-framerate.html\n [5]: http://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/\n [6]: http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/\n [7]: http://www.richardlord.net/blog/why-use-an-entity-framework\n [8]: http://www.chris-granger.com/2012/12/11/anatomy-of-a-knockout/\n [9]: http://www.gamedev.net/page/resources/_/technical/game-programming/understanding-component-entity-systems-r3013\n [10]: http://gamadu.com/artemis/tutorial.html\n [11]: http://www.ashframework.org/\n [12]: http://t-machine.org/index.php/2009/10/26/entity-systems-are-the-future-of-mmos-part-5/\n [13]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L86\n [14]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L26\n [15]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L33\n [16]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L40\n [17]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L110\n [18]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L201\n [19]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/components.coffee#L137\n [20]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/entities.coffee#L9\n [21]: https://github.com/lmorchard/parsec-patrol/blob/master/app/scripts/worlds.coffee#L62\n [22]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L793\n [23]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1136\n [24]: html5hub.com/build-a-javascript-particle-system/\n [25]: http://buildnewgames.com/garbage-collector-friendly-code/\n [26]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/worlds.coffee#L38\n [27]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1583\n [28]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/radar.coffee#L103\n [29]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L660\n [30]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1193\n [31]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1271\n [32]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1574\n [33]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/radar.coffee#L47\n [34]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L646\n [35]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1245\n [36]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1435\n [37]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/sketches/fields.coffee#L95\n [38]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L803\n [39]: https://github.com/lmorchard/parsec-patrol/blob/7d2f01eae28d8c687fb4e97a556e0c4a05a87ef4/app/scripts/systems.coffee#L1608\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/11/27/entity-component-system",
    "thumbnail": "http://blog.lmorchard.com/wp-content/uploads/2013/11/pp-entities-1024x577.jpg",
    "summary": "\n\n<p>The <strong>Entity</strong>, <strong>Component</strong>, &amp; <strong>System</strong> design pattern is old hat for many game developers. But, keep in mind that I&#x2019;m a web developer, and mostly on the server side of things for the past decade or so. One of my last big revelations was discovering the Model, View, &amp; Controller way of doing things. Apropos of that, this ECS thing seems to be a Big Deal of similar proportions.</p>\n"
  },
  {
    "title": "Parsec Patrol Diaries: Hello World",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/11/19/parsec-patrol-diaries-hello-world",
    "dsq_thread_id": [
      1979808552
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2013",
    "month": "11",
    "day": "19",
    "isDir": false,
    "slug": "parsec-patrol-diaries-hello-world",
    "date": "2013-11-19T12:00:00.000Z",
    "postName": "2013-11-19-parsec-patrol-diaries-hello-world",
    "html": "<p>So, I&#8217;ve been working on <a href=\"http://lmorchard.github.io/parsec-patrol/\">a retro space game for the web</a>. I planned it as a fun project to &#8220;<a href=\"https://www.stephencovey.com/7habits/7habits-habit7.php\">sharpen the saw</a>&#8221; and get myself more current on some newer technologies. I also planned to use it as blog fodder, writing little diary entries about what I&#8217;ve been doing &amp; discovering along the way. But, <a href=\"https://github.com/lmorchard/parsec-patrol/graphs/commit-activity\">147 commits and almost 4 months later</a>, I&#8217;ve had fun doing the coding and have totally neglected the writing.</p>\n<!--more-->\n\n<p><a href=\"https://gist.github.com/lmorchard/7548511\">I just brainstormed a topic list</a>, so maybe I could back-fill with posts about things I did a few months ago. Last month&#8217;s stuff is boring to write about, though. Meanwhile, today&#8217;s stuff is fresh and exciting. But, since I&#8217;ve told myself that I should write about all the things, I feel obligated to go back and do the chores first. So, nothing gets written.</p>\n<div style=\"width: 510px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://www.memecenter.com/search/procrastination\"><img alt=\"\" src=\"http://global3.memecdn.com/_o_102096.jpg\" width=\"500\" height=\"407\" /></a><p class=\"wp-caption-text\">\n    Bah.\n  </p>\n</div>\n\n<p>But, wait! It just occurred to me that I can do whatever I want! <a href=\"http://www.youtube.com/watch?v=n5diMImYIIA\">I can totally have pudding before I have any meat.</a> So, I can go all non-linear and just start writing about whatever seems fun, in whatever order strikes my fancy.</p>\n<p>Take that, <a href=\"https://www.google.com/search?q=internal+critic\">internal editor / critic</a>. Prepare for random access crap!</p>\n",
    "body": "So, I&#8217;ve been working on [a retro space game for the web][1]. I planned it as a fun project to &#8220;[sharpen the saw][2]&#8221; and get myself more current on some newer technologies. I also planned to use it as blog fodder, writing little diary entries about what I&#8217;ve been doing & discovering along the way. But, [147 commits and almost 4 months later][3], I&#8217;ve had fun doing the coding and have totally neglected the writing.\r\n\r\n<!--more-->\r\n\r\n[I just brainstormed a topic list][4], so maybe I could back-fill with posts about things I did a few months ago. Last month&#8217;s stuff is boring to write about, though. Meanwhile, today&#8217;s stuff is fresh and exciting. But, since I&#8217;ve told myself that I should write about all the things, I feel obligated to go back and do the chores first. So, nothing gets written.\r\n\r\n<div style=\"width: 510px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://www.memecenter.com/search/procrastination\"><img alt=\"\" src=\"http://global3.memecdn.com/_o_102096.jpg\" width=\"500\" height=\"407\" /></a><p class=\"wp-caption-text\">\r\n    Bah.\r\n  </p>\r\n</div>\r\n\r\nBut, wait! It just occurred to me that I can do whatever I want! [I can totally have pudding before I have any meat.][5] So, I can go all non-linear and just start writing about whatever seems fun, in whatever order strikes my fancy.\r\n\r\nTake that, [internal editor / critic][6]. Prepare for random access crap!\r\n\r\n [1]: http://lmorchard.github.io/parsec-patrol/\r\n [2]: https://www.stephencovey.com/7habits/7habits-habit7.php\r\n [3]: https://github.com/lmorchard/parsec-patrol/graphs/commit-activity\r\n [4]: https://gist.github.com/lmorchard/7548511\r\n [5]: http://www.youtube.com/watch?v=n5diMImYIIA\r\n [6]: https://www.google.com/search?q=internal+critic",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/11/19/parsec-patrol-diaries-hello-world",
    "thumbnail": "http://global3.memecdn.com/_o_102096.jpg",
    "summary": "<p>So, I&#x2019;ve been working on <a href=\"http://lmorchard.github.io/parsec-patrol/\">a retro space game for the web</a>. I planned it as a fun project to &#x201C;<a href=\"https://www.stephencovey.com/7habits/7habits-habit7.php\">sharpen the saw</a>&#x201D; and get myself more current on some newer technologies. I also planned to use it as blog fodder, writing little diary entries about what I&#x2019;ve been doing &amp; discovering along the way. But, <a href=\"https://github.com/lmorchard/parsec-patrol/graphs/commit-activity\">147 commits and almost 4 months later</a>, I&#x2019;ve had fun doing the coding and have totally neglected the writing.</p>\n"
  },
  {
    "title": "Parsec Patrol Diaries: Why a Game?",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/11/19/parsec-patrol-diaries-why-a-game",
    "dsq_thread_id": [
      1980027870
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "html5",
      "parsecpatrol",
      "webdev"
    ],
    "year": "2013",
    "month": "11",
    "day": "19",
    "isDir": false,
    "slug": "parsec-patrol-diaries-why-a-game",
    "date": "2013-11-19T12:00:00.000Z",
    "postName": "2013-11-19-parsec-patrol-diaries-why-a-game",
    "html": "<p>I decided to start writing <a href=\"https://github.com/lmorchard/parsec-patrol\">a retro space game for the web</a>, because I thought it might be a good way to exercise a lot of interesting technologies and have fun to boot. You know, like how <a href=\"http://spinoff.nasa.gov/\">sending rockets into space yields astronaut ice cream &amp; anti-shock trousers back down on Earth</a>. But, I&#8217;ve also wanted to make games all the way back to my Atari 2600, Commodore 64, and Apple ][ days &#8211; because <a href=\"http://en.wikipedia.org/wiki/Warren_Robinett\">Warren Robinett</a> is my hero.</p>\n<!--more-->\n\n<div style=\"width: 310px\" class=\"wp-caption alignright\">\n  <a href=\"http://www.flickr.com/photos/35034355597@N01/8445963080\"><img class=\" \" alt=\"\" src=\"http://farm9.staticflickr.com/8504/8445963080_f7a3ff2dd1_d.jpg\" width=\"300\" height=\"400\" /></a><p class=\"wp-caption-text\">\n    My nerd shrine, featuring a Commodore 64 & Atari 800\n  </p>\n</div>\n\n<p>Warren Robinett is the very model of the programmer-hero: He single-handedly created <a href=\"http://en.wikipedia.org/wiki/Adventure_%28Atari_2600%29\">Adventure</a>, then signed his work with <a href=\"http://en.wikipedia.org/wiki/Adventure_%28Atari_2600%29#Easter_egg\">the gaming world&#8217;s first easter egg</a> when they wouldn&#8217;t give him credit.</p>\n<p>If that weren&#8217;t enough, this guy also <a href=\"http://en.wikipedia.org/wiki/The_Learning_Company\">started his own company</a> after Atari and made <a href=\"http://en.wikipedia.org/wiki/Rocky%27s_Boots\">Rocky&#8217;s Boots</a>.</p>\n<p>It was only very recently that <a href=\"https://twitter.com/lmorchard/status/393572056266051584\">I pieced things together and realized</a> that <a href=\"https://archive.org/stream/Rockys_Boots_1982_Learning_Company/Rockys_Boots_1982_Learning_Company.do?module=apple2c&amp;scale=2\">Rocky&#8217;s Boots</a> is basically Adventure 2, except the bats and dragons and skeletons were drafted into warping wee brains like mine to understand binary logic and digital circuitry. I spent hours in that game, wrapping my 7-year-old head around things that wouldn&#8217;t be on exams until about 12 years later in my college compsci courses.</p>\n<p>That&#8217;s not to say Mr. Robinett is the only game-programming hero from my youth. Back then, you didn&#8217;t need a full-on studio to produce something impressive, at least speaking relative to the state of the art at the time. I couldn&#8217;t name all my 8-bit heroes &#8211; but consider folks like <a href=\"http://paulemozplaysagameaday.blogspot.com/2011/05/andrew-braybrook-c64-history.html\">Andrew Braybrook</a>, <a href=\"http://en.wikipedia.org/wiki/Jeff_Minter\">Jeff Minter</a>, <a href=\"http://en.wikipedia.org/wiki/Elite_%28video_game%29\">David Braben &amp; Ian Bell</a>. Along with old-school music makers like <a href=\"http://www.youtube.com/watch?v=D9CwsOOjNAo\">Rob Hubbard</a> and <a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=Ymajs4GdeFI#t=252\">Martin Galway</a>, these were the rockstars of my pre-WWW youth.</p>\n<p>Today, you&#8217;d call these folks <em>indie game developers</em>. Sometimes you still see the solo heros, sometimes teams of under a dozen. Still, it looks more like rock &amp; roll than an orchestral production. The games are often somewhat constrained in tech, relying more on clever gameplay and the kind of character that never survives design-by-committee.</p>\n<p>Of course, a lot of that rock &amp; roll stands on giant shoulders these days, thanks to abstractions like <a href=\"en.wikipedia.org/wiki/Microsoft_XNA\">Microsoft XNA</a> (R.I.P.) and the <a href=\"http://www.unrealengine.com/\">Unreal Engine</a>. There are also a bazillion other little game engines, web-based and native. But, there&#8217;s still a sweet spot for these indie rockstars to carve out a game using mere human-sized brains.</p>\n<p>For my part, I feel like the web is my new Commodore 64. So, <a href=\"https://github.com/lmorchard/parsec-patrol\">Parsec Patrol</a> is my little project to play at being a game building rockstar. Hopefully, I&#8217;ll land somewhere on the scale between actual rockstar and playing Rock Band on Novice mode.</p>\n",
    "body": "I decided to start writing [a retro space game for the web][1], because I thought it might be a good way to exercise a lot of interesting technologies and have fun to boot. You know, like how [sending rockets into space yields astronaut ice cream & anti-shock trousers back down on Earth][2]. But, I&#8217;ve also wanted to make games all the way back to my Atari 2600, Commodore 64, and Apple ][ days &#8211; because [Warren Robinett][3] is my hero.\r\n\r\n<!--more-->\r\n\r\n<div style=\"width: 310px\" class=\"wp-caption alignright\">\r\n  <a href=\"http://www.flickr.com/photos/35034355597@N01/8445963080\"><img class=\" \" alt=\"\" src=\"http://farm9.staticflickr.com/8504/8445963080_f7a3ff2dd1_d.jpg\" width=\"300\" height=\"400\" /></a><p class=\"wp-caption-text\">\r\n    My nerd shrine, featuring a Commodore 64 & Atari 800\r\n  </p>\r\n</div>\r\n\r\nWarren Robinett is the very model of the programmer-hero: He single-handedly created [Adventure][4], then signed his work with [the gaming world&#8217;s first easter egg][5] when they wouldn&#8217;t give him credit.\r\n\r\nIf that weren&#8217;t enough, this guy also [started his own company][6] after Atari and made [Rocky&#8217;s Boots][7].\r\n\r\nIt was only very recently that [I pieced things together and realized][8] that [Rocky&#8217;s Boots][9] is basically Adventure 2, except the bats and dragons and skeletons were drafted into warping wee brains like mine to understand binary logic and digital circuitry. I spent hours in that game, wrapping my 7-year-old head around things that wouldn&#8217;t be on exams until about 12 years later in my college compsci courses.\r\n\r\nThat&#8217;s not to say Mr. Robinett is the only game-programming hero from my youth. Back then, you didn&#8217;t need a full-on studio to produce something impressive, at least speaking relative to the state of the art at the time. I couldn&#8217;t name all my 8-bit heroes &#8211; but consider folks like [Andrew Braybrook][10], [Jeff Minter][11], [David Braben & Ian Bell][12]. Along with old-school music makers like [Rob Hubbard][13] and [Martin Galway][14], these were the rockstars of my pre-WWW youth.\r\n\r\nToday, you&#8217;d call these folks *indie game developers*. Sometimes you still see the solo heros, sometimes teams of under a dozen. Still, it looks more like rock & roll than an orchestral production. The games are often somewhat constrained in tech, relying more on clever gameplay and the kind of character that never survives design-by-committee.\r\n\r\nOf course, a lot of that rock & roll stands on giant shoulders these days, thanks to abstractions like [Microsoft XNA][15] (R.I.P.) and the [Unreal Engine][16]. There are also a bazillion other little game engines, web-based and native. But, there&#8217;s still a sweet spot for these indie rockstars to carve out a game using mere human-sized brains.\r\n\r\nFor my part, I feel like the web is my new Commodore 64. So, [Parsec Patrol][1] is my little project to play at being a game building rockstar. Hopefully, I&#8217;ll land somewhere on the scale between actual rockstar and playing Rock Band on Novice mode.\r\n\r\n [1]: https://github.com/lmorchard/parsec-patrol\r\n [2]: http://spinoff.nasa.gov/\r\n [3]: http://en.wikipedia.org/wiki/Warren_Robinett\r\n [4]: http://en.wikipedia.org/wiki/Adventure_%28Atari_2600%29\r\n [5]: http://en.wikipedia.org/wiki/Adventure_%28Atari_2600%29#Easter_egg\r\n [6]: http://en.wikipedia.org/wiki/The_Learning_Company\r\n [7]: http://en.wikipedia.org/wiki/Rocky%27s_Boots\r\n [8]: https://twitter.com/lmorchard/status/393572056266051584\r\n [9]: https://archive.org/stream/Rockys_Boots_1982_Learning_Company/Rockys_Boots_1982_Learning_Company.do?module=apple2c&scale=2\r\n [10]: http://paulemozplaysagameaday.blogspot.com/2011/05/andrew-braybrook-c64-history.html\r\n [11]: http://en.wikipedia.org/wiki/Jeff_Minter\r\n [12]: http://en.wikipedia.org/wiki/Elite_%28video_game%29\r\n [13]: http://www.youtube.com/watch?v=D9CwsOOjNAo\r\n [14]: http://www.youtube.com/watch?feature=player_detailpage&v=Ymajs4GdeFI#t=252\r\n [15]: en.wikipedia.org/wiki/Microsoft_XNA\r\n [16]: http://www.unrealengine.com/",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/11/19/parsec-patrol-diaries-why-a-game",
    "thumbnail": "http://farm9.staticflickr.com/8504/8445963080_f7a3ff2dd1_d.jpg",
    "summary": "<p>I decided to start writing <a href=\"https://github.com/lmorchard/parsec-patrol\">a retro space game for the web</a>, because I thought it might be a good way to exercise a lot of interesting technologies and have fun to boot. You know, like how <a href=\"http://spinoff.nasa.gov/\">sending rockets into space yields astronaut ice cream &amp; anti-shock trousers back down on Earth</a>. But, I&#x2019;ve also wanted to make games all the way back to my Atari 2600, Commodore 64, and Apple ][ days &#x2013; because <a href=\"http://en.wikipedia.org/wiki/Warren_Robinett\">Warren Robinett</a> is my hero.</p>\n"
  },
  {
    "title": "Looking for a Django app to manage Roles within Groups",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/02/23/looking-for-a-django-app-to-manage-roles-within-groups",
    "dsq_thread_id": [
      1106435515
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "badger",
      "badges",
      "django",
      "mozilla",
      "webdev"
    ],
    "year": "2013",
    "month": "02",
    "day": "23",
    "isDir": false,
    "slug": "looking-for-a-django-app-to-manage-roles-within-groups",
    "date": "2013-02-23T12:00:00.000Z",
    "postName": "2013-02-23-looking-for-a-django-app-to-manage-roles-within-groups",
    "html": "<p>I want to add some team-based features to <a href=\"https://github.com/lmorchard/django-badger\">django-badger</a>. I was hoping that someone had already built a reusable app to do most of the work for me. This happens quite a lot when I&#8217;m working with Django. Unfortunately, I haven&#8217;t <em>quite</em> found what I&#8217;m looking for yet. Consider this blog post either the product of my thinking out loud toward a rough spec, or a long-winded lazyweb search query.</p>\n<!--more-->\n\n<p>First, what do I mean by a &#8220;team&#8221;? Well, a familiar example is <a href=\"http://www.wowwiki.com/Guild_list_%28interface%29\">a guild in World of Warcraft</a>: A group of people with access to shared resources, that access controlled by permissions bundled into ranks assigned to each member of the group.</p>\n<div style=\"width: 460px\" class=\"wp-caption aligncenter\">\n  <a href=\"http://www.wowwiki.com/Guild_list_%28interface%29\"><img alt=\"Guild management in WoW\" src=\"http://images2.wikia.nocookie.net/__cb20091106224144/wowwiki/images/thumb/3/3e/Guild_list_%28interface%29.png/450px-Guild_list_%28interface%29.png\" width=\"450\" height=\"324\" /></a><p class=\"wp-caption-text\">\n    Guild management in WoW\n  </p>\n</div>\n\n<p>While Django does come with Users, Groups, &amp; Permissions, the concept of Roles within Groups to which Permissions can be attached seems missing.</p>\n<p>If I try to extend the Django building blocks, maybe I could represent a &#8220;Team&#8221; as a bundle of Groups and treat those Groups as Roles? Or, maybe Groups should just become hierarchical &#8211; make it <a href=\"http://en.wikipedia.org/wiki/Turtles_all_the_way_down\">turtles all the way down</a>. (I really like that expression, in case you can&#8217;t tell.)</p>\n<p>With respect to that last point, I found <a href=\"https://github.com/rasca/django-hierarchical-auth\">django-hierarchical-auth</a>. That seems like a good lead. But, I&#8217;m having trouble finding other projects using it. There&#8217;s <a href=\"http://www.feincms.org/\">feinCMS</a> &#8211; I&#8217;ve never heard of that before, but that&#8217;s more my lack than theirs.</p>\n<p>In the case of <a href=\"https://github.com/lmorchard/django-badger\">django-badger</a>, I&#8217;d like to enable users to start teams, create badges that belong to the team, and allow other team members varying levels of control over those badges (e.g. creating, editing, awarding, approving nominations, etc).</p>\n<p>So, there&#8217;s the matter of user interface &#8211; I&#8217;d like any user (not just site-wide admins) to be able to:</p>\n<ul>\n<li>create a team;</li>\n<li>manage team profile information;</li>\n<li>manage &amp; grant roles based on a canned selection of permissions;</li>\n<li>invite other users as members, remove members;</li>\n<li>accept team invitations, request to join a team, remove oneself from a team.</li>\n</ul>\n<p>The <a href=\"https://github.com/rasca/django-hierarchical-auth\">django-hierarchical-auth</a> app comes with no views; it&#8217;s just a backend utility. So, if I grab that app, I&#8217;ll still have to build the UI and supporting models myself (i.e. for team profiles and permission sets).</p>\n<p>So, that leaves me wondering if there&#8217;s some value in me building a reusable app atop <a href=\"https://github.com/rasca/django-hierarchical-auth\">django-hierarchical-auth</a> that basically implements what that WoW guild management interface offers? Ultimately, that&#8217;s what I&#8217;m really hoping someone else has built for me.</p>\n",
    "body": "I want to add some team-based features to [django-badger][1]. I was hoping that someone had already built a reusable app to do most of the work for me. This happens quite a lot when I&#8217;m working with Django. Unfortunately, I haven&#8217;t *quite* found what I&#8217;m looking for yet. Consider this blog post either the product of my thinking out loud toward a rough spec, or a long-winded lazyweb search query.\r\n\r\n<!--more-->\r\n\r\nFirst, what do I mean by a &#8220;team&#8221;? Well, a familiar example is [a guild in World of Warcraft][2]: A group of people with access to shared resources, that access controlled by permissions bundled into ranks assigned to each member of the group.\r\n\r\n<div style=\"width: 460px\" class=\"wp-caption aligncenter\">\r\n  <a href=\"http://www.wowwiki.com/Guild_list_%28interface%29\"><img alt=\"Guild management in WoW\" src=\"http://images2.wikia.nocookie.net/__cb20091106224144/wowwiki/images/thumb/3/3e/Guild_list_%28interface%29.png/450px-Guild_list_%28interface%29.png\" width=\"450\" height=\"324\" /></a><p class=\"wp-caption-text\">\r\n    Guild management in WoW\r\n  </p>\r\n</div>\r\n\r\nWhile Django does come with Users, Groups, & Permissions, the concept of Roles within Groups to which Permissions can be attached seems missing.\r\n\r\nIf I try to extend the Django building blocks, maybe I could represent a &#8220;Team&#8221; as a bundle of Groups and treat those Groups as Roles? Or, maybe Groups should just become hierarchical &#8211; make it [turtles all the way down][3]. (I really like that expression, in case you can&#8217;t tell.)\r\n\r\nWith respect to that last point, I found [django-hierarchical-auth][4]. That seems like a good lead. But, I&#8217;m having trouble finding other projects using it. There&#8217;s [feinCMS][5] &#8211; I&#8217;ve never heard of that before, but that&#8217;s more my lack than theirs.\r\n\r\nIn the case of [django-badger][1], I&#8217;d like to enable users to start teams, create badges that belong to the team, and allow other team members varying levels of control over those badges (e.g. creating, editing, awarding, approving nominations, etc).\r\n\r\nSo, there&#8217;s the matter of user interface &#8211; I&#8217;d like any user (not just site-wide admins) to be able to:\r\n\r\n*   create a team;\r\n*   manage team profile information;\r\n*   manage & grant roles based on a canned selection of permissions;\r\n*   invite other users as members, remove members;\r\n*   accept team invitations, request to join a team, remove oneself from a team.\r\n\r\nThe [django-hierarchical-auth][4] app comes with no views; it&#8217;s just a backend utility. So, if I grab that app, I&#8217;ll still have to build the UI and supporting models myself (i.e. for team profiles and permission sets).\r\n\r\nSo, that leaves me wondering if there&#8217;s some value in me building a reusable app atop [django-hierarchical-auth][4] that basically implements what that WoW guild management interface offers? Ultimately, that&#8217;s what I&#8217;m really hoping someone else has built for me.\r\n\r\n [1]: https://github.com/lmorchard/django-badger\r\n [2]: http://www.wowwiki.com/Guild_list_%28interface%29\r\n [3]: http://en.wikipedia.org/wiki/Turtles_all_the_way_down\r\n [4]: https://github.com/rasca/django-hierarchical-auth\r\n [5]: http://www.feincms.org/",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/02/23/looking-for-a-django-app-to-manage-roles-within-groups",
    "thumbnail": "http://images2.wikia.nocookie.net/__cb20091106224144/wowwiki/images/thumb/3/3e/Guild_list_%28interface%29.png/450px-Guild_list_%28interface%29.png",
    "summary": "<p>I want to add some team-based features to <a href=\"https://github.com/lmorchard/django-badger\">django-badger</a>. I was hoping that someone had already built a reusable app to do most of the work for me. This happens quite a lot when I&#x2019;m working with Django. Unfortunately, I haven&#x2019;t <em>quite</em> found what I&#x2019;m looking for yet. Consider this blog post either the product of my thinking out loud toward a rough spec, or a long-winded lazyweb search query.</p>\n"
  },
  {
    "title": "Naming Things: CamelCase vs snake_case",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/01/23/naming-conventions",
    "dsq_thread_id": [
      1107007531
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "CamelCase",
      "dev",
      "javascript",
      "python",
      "snake_case",
      "webdev"
    ],
    "year": "2013",
    "month": "01",
    "day": "23",
    "isDir": false,
    "slug": "naming-conventions",
    "date": "2013-01-23T12:00:00.000Z",
    "postName": "2013-01-23-naming-conventions",
    "html": "<p>I&#8217;ve contributed code to a number of projects, often as a drive-by bug fix in a GitHub pull request. And, usually, I&#8217;ll try to do as the Romans do and follow the local naming and coding conventions. But, sometimes, I&#8217;ll fall back to my personal conventions and get dinged in the code review.</p>\n<!--more-->\n\n<p>For what it&#8217;s worth, those personal conventions look something like this:</p>\n<p><code>variable_names_in_snake_case</code>\n:   Variable, a mutable thing. All lower case, words separated by underscores.</p>\n<p><code>CONSTANTS_IN_ALL_CAPS</code>\n:   Constant, an immutable thing. All upper case, words separated by underscores.</p>\n<p><code>functionAndMethodNames</code>\n:   Functions and methods, immutable and callable things. Mixed camel case, first letter always lower case.</p>\n<p><code>StructAndClassNames</code>\n:   Structs and classes, immutable and instantiatable things. Mixed camel case, first letter always upper case.</p>\n<p>Of course, given the features of any particular language, these rules yield subtleties. For instance, in <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> a variable can be assigned a callable thing, a declared function can be replaced by assignment, and classes &amp; methods are themselves mainly just suggestions. These conventions are more about my intentions than anything literally baked into syntax.</p>\n<p>I&#8217;ve been using some variant of the above rules for close to 20 years, across probably a dozen languages. On <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> projects, I end up with <a href=\"http://en.wikipedia.org/wiki/Snake_case\">snake_case</a> in undesirable places. On Python projects, I&#8217;ll use <a href=\"http://en.wikipedia.org/wiki/CamelCase\">CamelCase</a> where it&#8217;s not wanted.</p>\n<p>On the Python side, I know there&#8217;s <a href=\"http://www.python.org/dev/peps/pep-0008/\">PEP 8</a>. That&#8217;s something to point at and claim uniformity, and <a href=\"http://pypi.python.org/pypi/pep8\">it has tooling support</a>. On the <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> side, I seem to be missing some recent consensus amongst the current wave of browser and nodejs enthusiasts. That, or I&#8217;m just contributing to more projects than my own these days (thanks to GitHub) and only running into this now.</p>\n<p>But, here&#8217;s what always leaves me mildly rankled: Why just one or the other? Why discard the semantic shading available through mixing <a href=\"http://en.wikipedia.org/wiki/Snake_case\">snake_case</a> and <a href=\"http://en.wikipedia.org/wiki/CamelCase\">CamelCase</a>, at least by way of consistent rules? I know there&#8217;s a such thing as syntax highlighting, but combining that with these conventions has often helped me with highlighting is unavailable. <a href=\"http://en.wiktionary.org/wiki/belt_and_suspenders\">Belt and suspenders</a>, and all that.</p>\n<p>Of course, I prefer my rules, because they&#8217;re a deeply ingrained habit. I know this is my peeve. But, what I&#8217;ve never quite been able to get is a satisfying answer as to why one style is preferred to the exclusion of another. Usually I get responses like &#8220;That&#8217;s just the way it&#8217;s done&#8221;, or &#8220;The other way is ugly&#8221;. So, it&#8217;s down to personal whim, project momentum, or <a href=\"http://en.wikipedia.org/wiki/Cargo_cult\">cargo cult</a>.</p>\n<p>I guess it bothers me to see a perfectly good semantic tool thrown out for no good reason as far as I can tell. Feel free to drop me a comment here, if I&#8217;m missing any good reasons. Some additional bits and pieces accumulate below:</p>\n<ul>\n<li><p>Here are some arguments against CamelCase for <a href=\"http://stackoverflow.com/questions/1740116/for-what-reason-do-we-have-the-lower-case-with-underscores-naming-convention/1740152#1740152\">accessibility reasons</a> and for <a href=\"http://stackoverflow.com/questions/1740116/for-what-reason-do-we-have-the-lower-case-with-underscores-naming-convention/1740131#1740131\">non-english speakers</a>.</p>\n</li>\n<li><p><a href=\"http://glyph.twistedmatrix.com/2012/10/a-tired-hobgoblin.html\">The Twisted project uses <em>both</em> CamelCase <em>and</em> snake_case in the same variable names.</a> The bit before the underscore signifies the type of a method, and the bit after is the name &#8211; eg. <code>remote_loginAnonymous</code> or <code>test_addDSAIdentityNoComment</code>.</p>\n</li>\n</ul>\n<p>Anyway, this has been bugging me for long enough that here I am finally blogging about it, so that I have an URL to throw into conversations when it comes up.</p>\n",
    "body": "I&#8217;ve contributed code to a number of projects, often as a drive-by bug fix in a GitHub pull request. And, usually, I&#8217;ll try to do as the Romans do and follow the local naming and coding conventions. But, sometimes, I&#8217;ll fall back to my personal conventions and get dinged in the code review.\r\n\r\n<!--more-->\r\n\r\nFor what it&#8217;s worth, those personal conventions look something like this:\r\n\r\n`variable_names_in_snake_case`\r\n:   Variable, a mutable thing. All lower case, words separated by underscores.\r\n\r\n`CONSTANTS_IN_ALL_CAPS`\r\n:   Constant, an immutable thing. All upper case, words separated by underscores.\r\n\r\n`functionAndMethodNames`\r\n:   Functions and methods, immutable and callable things. Mixed camel case, first letter always lower case.\r\n\r\n`StructAndClassNames`\r\n:   Structs and classes, immutable and instantiatable things. Mixed camel case, first letter always upper case.\r\n\r\nOf course, given the features of any particular language, these rules yield subtleties. For instance, in <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> a variable can be assigned a callable thing, a declared function can be replaced by assignment, and classes & methods are themselves mainly just suggestions. These conventions are more about my intentions than anything literally baked into syntax.\r\n\r\nI&#8217;ve been using some variant of the above rules for close to 20 years, across probably a dozen languages. On <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> projects, I end up with [snake_case][1] in undesirable places. On Python projects, I&#8217;ll use [CamelCase][2] where it&#8217;s not wanted.\r\n\r\nOn the Python side, I know there&#8217;s [PEP 8][3]. That&#8217;s something to point at and claim uniformity, and [it has tooling support][4]. On the <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a> side, I seem to be missing some recent consensus amongst the current wave of browser and nodejs enthusiasts. That, or I&#8217;m just contributing to more projects than my own these days (thanks to GitHub) and only running into this now.\r\n\r\nBut, here&#8217;s what always leaves me mildly rankled: Why just one or the other? Why discard the semantic shading available through mixing [snake_case][1] and [CamelCase][2], at least by way of consistent rules? I know there&#8217;s a such thing as syntax highlighting, but combining that with these conventions has often helped me with highlighting is unavailable. [Belt and suspenders][5], and all that.\r\n\r\nOf course, I prefer my rules, because they&#8217;re a deeply ingrained habit. I know this is my peeve. But, what I&#8217;ve never quite been able to get is a satisfying answer as to why one style is preferred to the exclusion of another. Usually I get responses like &#8220;That&#8217;s just the way it&#8217;s done&#8221;, or &#8220;The other way is ugly&#8221;. So, it&#8217;s down to personal whim, project momentum, or [cargo cult][6].\r\n\r\nI guess it bothers me to see a perfectly good semantic tool thrown out for no good reason as far as I can tell. Feel free to drop me a comment here, if I&#8217;m missing any good reasons. Some additional bits and pieces accumulate below:\r\n\r\n*   Here are some arguments against CamelCase for [accessibility reasons][7] and for [non-english speakers][8].\r\n\r\n*   [The Twisted project uses *both* CamelCase *and* snake_case in the same variable names.][9] The bit before the underscore signifies the type of a method, and the bit after is the name &#8211; eg. `remote_loginAnonymous` or `test_addDSAIdentityNoComment`.\r\n\r\nAnyway, this has been bugging me for long enough that here I am finally blogging about it, so that I have an URL to throw into conversations when it comes up.\r\n\r\n [1]: http://en.wikipedia.org/wiki/Snake_case\r\n [2]: http://en.wikipedia.org/wiki/CamelCase\r\n [3]: http://www.python.org/dev/peps/pep-0008/\r\n [4]: http://pypi.python.org/pypi/pep8\r\n [5]: http://en.wiktionary.org/wiki/belt_and_suspenders\r\n [6]: http://en.wikipedia.org/wiki/Cargo_cult\r\n [7]: http://stackoverflow.com/questions/1740116/for-what-reason-do-we-have-the-lower-case-with-underscores-naming-convention/1740152#1740152\r\n [8]: http://stackoverflow.com/questions/1740116/for-what-reason-do-we-have-the-lower-case-with-underscores-naming-convention/1740131#1740131\r\n [9]: http://glyph.twistedmatrix.com/2012/10/a-tired-hobgoblin.html",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/01/23/naming-conventions",
    "summary": "<p>I&#x2019;ve contributed code to a number of projects, often as a drive-by bug fix in a GitHub pull request. And, usually, I&#x2019;ll try to do as the Romans do and follow the local naming and coding conventions. But, sometimes, I&#x2019;ll fall back to my personal conventions and get dinged in the code review.</p>\n"
  },
  {
    "title": "My experience in becoming a FirefoxOS contributor",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2012/11/15/my-experience-in-becoming-a-firefoxos-contributor",
    "dsq_thread_id": [
      1107338580
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "firefoxos",
      "mobile",
      "mozilla",
      "webdev"
    ],
    "year": "2012",
    "month": "11",
    "day": "15",
    "isDir": false,
    "slug": "my-experience-in-becoming-a-firefoxos-contributor",
    "date": "2012-11-15T12:00:00.000Z",
    "postName": "2012-11-15-my-experience-in-becoming-a-firefoxos-contributor",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Finding_the_docs\"><span class=\"toc_number toc_depth_1\">1</span> Finding the docs</a>\n    </li>\n    <li>\n      <a href=\"#Getting_the_source\"><span class=\"toc_number toc_depth_1\">2</span> Getting the source</a>\n    </li>\n    <li>\n      <a href=\"#Running_the_project\"><span class=\"toc_number toc_depth_1\">3</span> Running the project</a>\n    </li>\n    <li>\n      <a href=\"#Breaking_things\"><span class=\"toc_number toc_depth_1\">4</span> Breaking things</a>\n    </li>\n    <li>\n      <a href=\"#Fixing_things\"><span class=\"toc_number toc_depth_1\">5</span> Fixing things</a>\n    </li>\n    <li>\n      <a href=\"#Room_for_improvement\"><span class=\"toc_number toc_depth_1\">6</span> Room for improvement</a>\n    </li>\n    <li>\n      <a href=\"#Still_digging\"><span class=\"toc_number toc_depth_1\">7</span> Still digging</a>\n    </li>\n  </ul>\n</div>\n\n<p>Back in September, <a href=\"http://blog.lmorchard.com/2012/09/17/on-the-other-end-of-a-self-imposed-death-march-project#p%5BBInCtb%5D\">I wrote that I wasn&#8217;t leaving MDN</a>. And, I&#8217;m not, really. But, it turns out that <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> needs some help to reach its first release milestones. So, some of us <a href=\"http://blog.mozilla.com/webdev/\">webdevs from around Mozilla</a> are temporarily switching our daily efforts over to slay bugs on <a href=\"https://github.com/mozilla-b2g/gaia\">Gaia</a>. That&#8217;s the layer of <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> which provides the overall system UI and core apps.</p>\n<!--more-->\n\n<p>I&#8217;m planning to return to primarily <a href=\"https://developer.mozilla.org/\">MDN</a> work in a few months &#8211; but, right now, <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> is kind of a big deal.</p>\n<p>Thus, like <a href=\"http://blog.margaretleibovic.com/post/32836884540/challenges-getting-started-with-gaia\">some of</a> my <a href=\"http://bluesock.org/~willg/blog/gaia/gaia_onboarding.html\">other</a> <a href=\"http://schalk-neethling.com/2012/10/debugging-b2g-desktop-blank-screen-on-launch-gaia/\">colleagues</a> in the past month, I&#8217;ve gone from being a fully-operational battle coder on a project with which I have years of experience, to being a total noob with no idea how to find my way to &#8220;Hello world&#8221;. It&#8217;s been awhile since I last parachuted into the middle of an open source combat zone, so I fell back to my training to get my bearings:</p>\n<ol>\n<li>Find the docs</li>\n<li>Get the source</li>\n<li>Run the project</li>\n<li>Break something, see what happens, fix it</li>\n<li>Fix a known bug, submit a patch</li>\n<li>Try to improve the process of fixing things</li>\n</ol>\n<h2 id=\"finding-the-docs\"><span id=\"Finding_the_docs\">Finding the docs</span></h2>\n<p>Oddly enough, <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS\">MDN was a good place to start for docs</a>. Though, there are FirefoxOS docs spread between <a target=\"_blank\" title=\"MDN\" href=\"https://developer.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">MDN</a>, GitHub, and <a href=\"https://wiki.mozilla.org/Gaia/Hacking\">wiki.mozilla.org</a>. And, of course, they are each in various states of freshness and truthiness. Keep your wits about you; here be dragons.</p>\n<h2 id=\"getting-the-source\"><span id=\"Getting_the_source\">Getting the source</span></h2>\n<p>Getting the source for FirefoxOS is a bit of a trick question &#8211; it depends on what you want to do, and how you want to contribute:</p>\n<ul>\n<li><a href=\"https://github.com/mozilla-b2g/B2G\">mozilla-b2g/B2G</a> is the mother of all repos. Only start there if you&#8217;re brave &amp; interested in the whole shebang. Fair warning, though: When the smoke cleared hours later, and the README was done with me, I had acquired 17G of new stuff in my dev directory. But, you&#8217;ll have ALL the things, and you can flash FirefoxOS to compatible hardware. </li>\n<li><a href=\"https://github.com/mozilla-b2g/gaia\">mozilla-b2g/gaia</a> will be the most interesting if you&#8217;re like me and hoping to contribute as a webdev. That&#8217;s chock full of <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a>, <a target=\"_blank\" title=\"CSS\" href=\"https://developer.mozilla.org/docs/Web/CSS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">CSS</a>, and <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a>. It&#8217;s also pretty much free of pesky kernel code or device drivers that hurt my brain, because I&#8217;m not prepared to work at that low a level at this point in the morning. </li>\n</ul>\n<p>There are other repos, for the <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Gonk\">Gonk</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Gecko\">Gecko</a> layers of FirefoxOS. But, for the sake of my sanity, I&#8217;m trying to avert my eyes for now.</p>\n<h2 id=\"running-the-project\"><span id=\"Running_the_project\">Running the project</span></h2>\n<p>If you don&#8217;t have a compatible mobile device (and few do), you need a <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop build. While it&#8217;s true that many apps <em>will</em> run in Firefox Nightly, and there is an emulator you can build from the <a target=\"_blank\" title=\"b2g\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">b2g</a> repo, most apps are presently problematic in Firefox Nightly, and I&#8217;ve never gotten the emulator to build successfully.</p>\n<p>You can either <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Building_the_desktop_client\">build your own B2G Desktop</a>, or <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Download_a_nightly_build\">download a nightly build</a>. I&#8217;ve done both, and generally I recommend sticking with the nightly Aurora builds.</p>\n<p>On OS X, I was able to download a nightly build and launch it with a double-click. That got things running &#8211; hooray! But, it didn&#8217;t get me productive straight away: The nightly build comes equipped with its own embedded build of Gaia, which makes it handy for trying out your own 3rd party apps but not-so-handy for hacking on Gaia itself.</p>\n<p>To improve this situation, you need to do two things:</p>\n<ol>\n<li><a href=\"https://wiki.mozilla.org/Gaia/Hacking#Nightly_Builds\">Build your own Gaia profile</a> from your own clone of <a href=\"https://github.com/mozilla-b2g/gaia\">mozilla-b2g/gaia</a>. This is pretty much just running <code>make</code> or <code>DEBUG=1 make</code> from your git clone. </li>\n<li>Run <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from a terminal <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Running_the_desktop_client\">with command line options</a> that tell it to use your new Gaia profile, rather than the built-in. </li>\n</ol>\n<p>So, at this point, I have the Gaia source and a means by which to run it on my laptop.</p>\n<h2 id=\"breaking-things\"><span id=\"Breaking_things\">Breaking things</span></h2>\n<p>After getting the project running as intended, I break something. And by that, I mean that I change a button title somewhere to &#8220;LOL BUTTS&#8221; or intentionally introduce an exception or syntax error somewhere. Then, I fix it. This is practice that exposes me to the guts of the thing; gets me into the edit/build/run cycle; shows me what it does when something goes wrong; and pushes me toward finding the tests.</p>\n<p>But, I think I picked the wrong week to step into the arena, because everything came pre-broken. There were semi-known bugs preventing nightly builds of <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from running my fresh clone of Gaia. It took me most of my first week to track down those bugs in bugzilla, find workarounds, and finally get something going. And then, it all broke again. And I found workarounds again.</p>\n<p>Eventually, I was at a point where I built my own <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from source with a particular patch from a particular bug applied, and <em>that</em> got me to the point where I could <a href=\"https://github.com/mozilla-b2g/gaia/commit/9f0129c7a5f04d58bbbe140de2b9562e3172d23c\">submit my first pull request</a> to fix a broken test.</p>\n<p>Happily, things seem to have stabilized since I started: <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop nightlies have been cooperating with bleeding-edge Gaia lately, so I&#8217;ve been able to stop building my own. So, now, when I find a combination of <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop and phone and Gaia checkout that works, I cling to that for dear life until it&#8217;s absolutely necessary for me to update one of the parts.</p>\n<p>In short, FirefoxOS is very much in flux, right now. Bring a hard hat and expect delays.</p>\n<h2 id=\"fixing-things\"><span id=\"Fixing_things\">Fixing things</span></h2>\n<p>Once I&#8217;ve broken something and then fixed it, I usually have a sense for how to get real work done. Since then, I&#8217;ve been slowly wrapping my head around <a href=\"https://github.com/mozilla-b2g/gaia/tree/master/apps/calendar\">the core Calendar app</a>, and <a href=\"https://github.com/mozilla-b2g/gaia/commits?author=lmorchard\">my bug fixes have finally started trickling in</a>.</p>\n<p>Cobbling together a reliable Gaia-hacking workflow is complicated, though:</p>\n<ul>\n<li>Some Gaia apps work in Firefox Nightly, at least partially. This is great, because Firefox has all the great tools like the <a target=\"_blank\" title=\"DOM\" href=\"https://developer.mozilla.org/docs/DOM?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">DOM</a> inspector and web console. And, for the most part, you can just save-and-refresh to see changes. </li>\n<li>All Gaia apps work in <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, usually, though sometimes there are&#8230; quirks. This is good for seeing how changes work in a closer-to-real environment. But, <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop has none of the web developer tools offered by Firefox. And, to see changes, I generally have to save, relaunch <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, then relaunch the app within the simulator. That&#8217;s pretty inconvenient.</li>\n<li>All Gaia apps work on the <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a>-supplied dev phone &#8211; which almost no one has. Well, they work more often than they do on <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop and Firefox, anyway. But, including a phone in the dev iteration loop is downright painful: As opposed to the usual webdev experience of save-and-refresh, the phone demands a save-build-flash-restart-relaunch cycle. </li>\n<li>There is one awesome thing, at least for <a href=\"https://github.com/mozilla-b2g/gaia/tree/master/apps/calendar\">the Calendar app</a>: <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Gaia_Unit_Tests\">There are unit tests which run in B2G Desktop, but are driven by a node.js controller in my shell</a>. That lets me beat up on my code &amp; logic in a &#8220;headless&#8221; context before jumping into Firefox, <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, or the phone for a fuller integration test and a manual run-through. In fact, the unit testing framework even watches for file changes and will re-run tests right after a save, complete with a Growl notification of pass/fail.</li>\n</ul>\n<h2 id=\"room-for-improvement\"><span id=\"Room_for_improvement\">Room for improvement</span></h2>\n<p>Slowly but surely, I&#8217;ve gotten my minigun barrel spun up to start firing <a href=\"http://techcrunch.com/2011/10/25/lead-bullets/\">piles of lead bullets</a> at Gaia bugs. But, it has been and continues to be a challenge. I&#8217;m hard-pressed to recommend it as a fun-time leisure project to anyone without a <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a> paycheck, or even as an off-hours interest for those who live-and-breathe Firefox. This is to be expected, since it&#8217;s not even a v1.0 project yet &#8211; but, I really, really hope things improve in the not-so-distant future.</p>\n<ul>\n<li>We need to make sure that new contributors can get quickly from cloning the source to running the code. And it should <em>always</em> work &#8211; as in big, noisy automated tests fail when it breaks. I don&#8217;t care if it works fine on the phone if I can&#8217;t hack on it, at least from a contributor perspective. </li>\n<li>We need a consistent and convenient development environment for Gaia. All day, I bounce between things that are partly broken in Firefox, partly broken in <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, and mostly working on the phone. This kills productivity and enthusiasm, all day. And, many times, no one else in the <a href=\"irc://irc.mozilla.org/gaia\">#gaia channel on IRC</a> knows what I&#8217;m on about when I say something&#8217;s broken &#8211; because everyone&#8217;s dev environment is a unique little snowflake. </li>\n<li>My ideal workflow would never leave Firefox and my editor: Consider it a variant of the Responsive Design View, and ensure all the various APIs expected on a real phone are either working properly, polyfilled, or usefully stubbed out. Then, when it&#8217;s perfect in my most comfy environment, I can try it on a phone or standalone simulator as an afterthought. The <a href=\"http://www.blueskyonmars.com/2012/11/08/r2d2b2g-is-becoming-the-firefox-os-simulator/\">upcoming built-in Firefox OS Simulator</a> (née <a href=\"https://hacks.mozilla.org/2012/10/r2d2b2g-an-experimental-prototype-firefox-os-test-environment/\">r2d2b2g</a>) looks promising, but it needs to be seamless. </li>\n</ul>\n<h2 id=\"still-digging\"><span id=\"Still_digging\">Still digging</span></h2>\n<p>Even with the challenges, and even if my contributions are small, I&#8217;m happy to have the opportunity to work on FirefoxOS. It&#8217;s a big deal; it&#8217;s the next Firefox. So, I plan to keep ramming my head against this stuff to help make it better, and I hope we can start taking time to make making it better better, too!</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#Finding_the_docs\"><span class=\"toc_number toc_depth_1\">1</span> Finding the docs</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Getting_the_source\"><span class=\"toc_number toc_depth_1\">2</span> Getting the source</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Running_the_project\"><span class=\"toc_number toc_depth_1\">3</span> Running the project</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Breaking_things\"><span class=\"toc_number toc_depth_1\">4</span> Breaking things</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Fixing_things\"><span class=\"toc_number toc_depth_1\">5</span> Fixing things</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Room_for_improvement\"><span class=\"toc_number toc_depth_1\">6</span> Room for improvement</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Still_digging\"><span class=\"toc_number toc_depth_1\">7</span> Still digging</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nBack in September, [I wrote that I wasn&#8217;t leaving MDN][1]. And, I&#8217;m not, really. But, it turns out that [FirefoxOS][2] needs some help to reach its first release milestones. So, some of us [webdevs from around Mozilla][3] are temporarily switching our daily efforts over to slay bugs on [Gaia][4]. That&#8217;s the layer of [FirefoxOS][2] which provides the overall system UI and core apps.\r\n\r\n<!--more-->\r\n\r\nI&#8217;m planning to return to primarily [MDN][5] work in a few months &#8211; but, right now, [FirefoxOS][2] is kind of a big deal.\r\n\r\nThus, like [some of][6] my [other][7] [colleagues][8] in the past month, I&#8217;ve gone from being a fully-operational battle coder on a project with which I have years of experience, to being a total noob with no idea how to find my way to &#8220;Hello world&#8221;. It&#8217;s been awhile since I last parachuted into the middle of an open source combat zone, so I fell back to my training to get my bearings:\r\n\r\n1.  Find the docs\r\n2.  Get the source\r\n3.  Run the project\r\n4.  Break something, see what happens, fix it\r\n5.  Fix a known bug, submit a patch\r\n6.  Try to improve the process of fixing things\r\n\r\n## <span id=\"Finding_the_docs\">Finding the docs</span>\r\n\r\nOddly enough, [MDN was a good place to start for docs][9]. Though, there are FirefoxOS docs spread between <a target=\"_blank\" title=\"MDN\" href=\"https://developer.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">MDN</a>, GitHub, and [wiki.mozilla.org][10]. And, of course, they are each in various states of freshness and truthiness. Keep your wits about you; here be dragons.\r\n\r\n## <span id=\"Getting_the_source\">Getting the source</span>\r\n\r\nGetting the source for FirefoxOS is a bit of a trick question &#8211; it depends on what you want to do, and how you want to contribute:\r\n\r\n*   [mozilla-b2g/B2G][11] is the mother of all repos. Only start there if you&#8217;re brave & interested in the whole shebang. Fair warning, though: When the smoke cleared hours later, and the README was done with me, I had acquired 17G of new stuff in my dev directory. But, you&#8217;ll have ALL the things, and you can flash FirefoxOS to compatible hardware. \r\n*   [mozilla-b2g/gaia][4] will be the most interesting if you&#8217;re like me and hoping to contribute as a webdev. That&#8217;s chock full of <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a>, <a target=\"_blank\" title=\"CSS\" href=\"https://developer.mozilla.org/docs/Web/CSS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">CSS</a>, and <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a>. It&#8217;s also pretty much free of pesky kernel code or device drivers that hurt my brain, because I&#8217;m not prepared to work at that low a level at this point in the morning. \r\n\r\nThere are other repos, for the [Gonk][12] and [Gecko][13] layers of FirefoxOS. But, for the sake of my sanity, I&#8217;m trying to avert my eyes for now.\r\n\r\n## <span id=\"Running_the_project\">Running the project</span>\r\n\r\nIf you don&#8217;t have a compatible mobile device (and few do), you need a <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop build. While it&#8217;s true that many apps *will* run in Firefox Nightly, and there is an emulator you can build from the <a target=\"_blank\" title=\"b2g\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">b2g</a> repo, most apps are presently problematic in Firefox Nightly, and I&#8217;ve never gotten the emulator to build successfully.\r\n\r\nYou can either [build your own B2G Desktop][14], or [download a nightly build][15]. I&#8217;ve done both, and generally I recommend sticking with the nightly Aurora builds.\r\n\r\nOn OS X, I was able to download a nightly build and launch it with a double-click. That got things running &#8211; hooray! But, it didn&#8217;t get me productive straight away: The nightly build comes equipped with its own embedded build of Gaia, which makes it handy for trying out your own 3rd party apps but not-so-handy for hacking on Gaia itself.\r\n\r\nTo improve this situation, you need to do two things:\r\n\r\n1.  [Build your own Gaia profile][16] from your own clone of [mozilla-b2g/gaia][4]. This is pretty much just running `make` or `DEBUG=1 make` from your git clone. \r\n2.  Run <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from a terminal [with command line options][17] that tell it to use your new Gaia profile, rather than the built-in. \r\n\r\nSo, at this point, I have the Gaia source and a means by which to run it on my laptop.\r\n\r\n## <span id=\"Breaking_things\">Breaking things</span>\r\n\r\nAfter getting the project running as intended, I break something. And by that, I mean that I change a button title somewhere to &#8220;LOL BUTTS&#8221; or intentionally introduce an exception or syntax error somewhere. Then, I fix it. This is practice that exposes me to the guts of the thing; gets me into the edit/build/run cycle; shows me what it does when something goes wrong; and pushes me toward finding the tests.\r\n\r\nBut, I think I picked the wrong week to step into the arena, because everything came pre-broken. There were semi-known bugs preventing nightly builds of <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from running my fresh clone of Gaia. It took me most of my first week to track down those bugs in bugzilla, find workarounds, and finally get something going. And then, it all broke again. And I found workarounds again.\r\n\r\nEventually, I was at a point where I built my own <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from source with a particular patch from a particular bug applied, and *that* got me to the point where I could [submit my first pull request][18] to fix a broken test.\r\n\r\nHappily, things seem to have stabilized since I started: <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop nightlies have been cooperating with bleeding-edge Gaia lately, so I&#8217;ve been able to stop building my own. So, now, when I find a combination of <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop and phone and Gaia checkout that works, I cling to that for dear life until it&#8217;s absolutely necessary for me to update one of the parts.\r\n\r\nIn short, FirefoxOS is very much in flux, right now. Bring a hard hat and expect delays.\r\n\r\n## <span id=\"Fixing_things\">Fixing things</span>\r\n\r\nOnce I&#8217;ve broken something and then fixed it, I usually have a sense for how to get real work done. Since then, I&#8217;ve been slowly wrapping my head around [the core Calendar app][19], and [my bug fixes have finally started trickling in][20].\r\n\r\nCobbling together a reliable Gaia-hacking workflow is complicated, though:\r\n\r\n*   Some Gaia apps work in Firefox Nightly, at least partially. This is great, because Firefox has all the great tools like the <a target=\"_blank\" title=\"DOM\" href=\"https://developer.mozilla.org/docs/DOM?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">DOM</a> inspector and web console. And, for the most part, you can just save-and-refresh to see changes. \r\n*   All Gaia apps work in <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, usually, though sometimes there are&#8230; quirks. This is good for seeing how changes work in a closer-to-real environment. But, <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop has none of the web developer tools offered by Firefox. And, to see changes, I generally have to save, relaunch <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, then relaunch the app within the simulator. That&#8217;s pretty inconvenient.\r\n*   All Gaia apps work on the <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a>-supplied dev phone &#8211; which almost no one has. Well, they work more often than they do on <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop and Firefox, anyway. But, including a phone in the dev iteration loop is downright painful: As opposed to the usual webdev experience of save-and-refresh, the phone demands a save-build-flash-restart-relaunch cycle. \r\n*   There is one awesome thing, at least for [the Calendar app][19]: [There are unit tests which run in B2G Desktop, but are driven by a node.js controller in my shell][21]. That lets me beat up on my code & logic in a &#8220;headless&#8221; context before jumping into Firefox, <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, or the phone for a fuller integration test and a manual run-through. In fact, the unit testing framework even watches for file changes and will re-run tests right after a save, complete with a Growl notification of pass/fail.\r\n\r\n## <span id=\"Room_for_improvement\">Room for improvement</span>\r\n\r\nSlowly but surely, I&#8217;ve gotten my minigun barrel spun up to start firing [piles of lead bullets][22] at Gaia bugs. But, it has been and continues to be a challenge. I&#8217;m hard-pressed to recommend it as a fun-time leisure project to anyone without a <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a> paycheck, or even as an off-hours interest for those who live-and-breathe Firefox. This is to be expected, since it&#8217;s not even a v1.0 project yet &#8211; but, I really, really hope things improve in the not-so-distant future.\r\n\r\n*   We need to make sure that new contributors can get quickly from cloning the source to running the code. And it should *always* work &#8211; as in big, noisy automated tests fail when it breaks. I don&#8217;t care if it works fine on the phone if I can&#8217;t hack on it, at least from a contributor perspective. \r\n*   We need a consistent and convenient development environment for Gaia. All day, I bounce between things that are partly broken in Firefox, partly broken in <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, and mostly working on the phone. This kills productivity and enthusiasm, all day. And, many times, no one else in the [#gaia channel on IRC][23] knows what I&#8217;m on about when I say something&#8217;s broken &#8211; because everyone&#8217;s dev environment is a unique little snowflake. \r\n*   My ideal workflow would never leave Firefox and my editor: Consider it a variant of the Responsive Design View, and ensure all the various APIs expected on a real phone are either working properly, polyfilled, or usefully stubbed out. Then, when it&#8217;s perfect in my most comfy environment, I can try it on a phone or standalone simulator as an afterthought. The [upcoming built-in Firefox OS Simulator][24] (née [r2d2b2g][25]) looks promising, but it needs to be seamless. \r\n\r\n## <span id=\"Still_digging\">Still digging</span>\r\n\r\nEven with the challenges, and even if my contributions are small, I&#8217;m happy to have the opportunity to work on FirefoxOS. It&#8217;s a big deal; it&#8217;s the next Firefox. So, I plan to keep ramming my head against this stuff to help make it better, and I hope we can start taking time to make making it better better, too!\r\n\r\n [1]: http://blog.lmorchard.com/2012/09/17/on-the-other-end-of-a-self-imposed-death-march-project#p[BInCtb]\r\n [2]: http://www.mozilla.org/firefoxos/\r\n [3]: http://blog.mozilla.com/webdev/\r\n [4]: https://github.com/mozilla-b2g/gaia\r\n [5]: https://developer.mozilla.org/\r\n [6]: http://blog.margaretleibovic.com/post/32836884540/challenges-getting-started-with-gaia\r\n [7]: http://bluesock.org/~willg/blog/gaia/gaia_onboarding.html\r\n [8]: http://schalk-neethling.com/2012/10/debugging-b2g-desktop-blank-screen-on-launch-gaia/\r\n [9]: https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS\r\n [10]: https://wiki.mozilla.org/Gaia/Hacking\r\n [11]: https://github.com/mozilla-b2g/B2G\r\n [12]: https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Gonk\r\n [13]: https://developer.mozilla.org/en-US/docs/Gecko\r\n [14]: https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Building_the_desktop_client\r\n [15]: https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Download_a_nightly_build\r\n [16]: https://wiki.mozilla.org/Gaia/Hacking#Nightly_Builds\r\n [17]: https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Running_the_desktop_client\r\n [18]: https://github.com/mozilla-b2g/gaia/commit/9f0129c7a5f04d58bbbe140de2b9562e3172d23c\r\n [19]: https://github.com/mozilla-b2g/gaia/tree/master/apps/calendar\r\n [20]: https://github.com/mozilla-b2g/gaia/commits?author=lmorchard\r\n [21]: https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Gaia_Unit_Tests\r\n [22]: http://techcrunch.com/2011/10/25/lead-bullets/\r\n [23]: irc://irc.mozilla.org/gaia\r\n [24]: http://www.blueskyonmars.com/2012/11/08/r2d2b2g-is-becoming-the-firefox-os-simulator/\r\n [25]: https://hacks.mozilla.org/2012/10/r2d2b2g-an-experimental-prototype-firefox-os-test-environment/",
    "parentPath": "../blog.lmorchard.com/posts/archives/2012",
    "path": "2012/11/15/my-experience-in-becoming-a-firefoxos-contributor",
    "summary": "\n\n<p>Back in September, <a href=\"http://blog.lmorchard.com/2012/09/17/on-the-other-end-of-a-self-imposed-death-march-project#p%5BBInCtb%5D\">I wrote that I wasn&#x2019;t leaving MDN</a>. And, I&#x2019;m not, really. But, it turns out that <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> needs some help to reach its first release milestones. So, some of us <a href=\"http://blog.mozilla.com/webdev/\">webdevs from around Mozilla</a> are temporarily switching our daily efforts over to slay bugs on <a href=\"https://github.com/mozilla-b2g/gaia\">Gaia</a>. That&#x2019;s the layer of <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> which provides the overall system UI and core apps.</p>\n"
  },
  {
    "title": "Developing Open Web Apps: First, get it onto the web",
    "author": "lmorchard",
    "excerpt": "These days, the first thing I think about when starting a web app is: How do I get it onto the web?",
    "layout": "post",
    "permalink": "/2012/09/18/first-get-it-onto-the-web",
    "dsq_thread_id": [
      1107338593
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "apps",
      "mozilla",
      "openwebapps",
      "webdev"
    ],
    "year": "2012",
    "month": "09",
    "day": "18",
    "isDir": false,
    "slug": "first-get-it-onto-the-web",
    "date": "2012-09-18T12:00:00.000Z",
    "postName": "2012-09-18-first-get-it-onto-the-web",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Start_on_the_web\"><span class=\"toc_number toc_depth_1\">1</span> Start on the web</a>\n    </li>\n    <li>\n      <a href=\"#How_I_abuse_Github_Pages\"><span class=\"toc_number toc_depth_1\">2</span> How I (ab)use Github Pages</a>\n    </li>\n    <li>\n      <a href=\"#How_I_abuse_Dropbox\"><span class=\"toc_number toc_depth_1\">3</span> How I (ab)use Dropbox</a>\n    </li>\n    <li>\n      <a href=\"#How_I_use_Amazon_S3\"><span class=\"toc_number toc_depth_1\">4</span> How I use Amazon S3</a><ul>\n        <li>\n          <a href=\"#How_I_make_Amazon_S3_work_like_Dropbox\"><span class=\"toc_number toc_depth_2\">4.1</span> How I make Amazon S3 work like Dropbox</a>\n        </li>\n      </ul>\n    </li>\n\n<pre><code>&lt;li&gt;\n  &lt;a href=&quot;#In_conclusion&quot;&gt;&lt;span class=&quot;toc_number toc_depth_1&quot;&gt;5&lt;/span&gt; In conclusion&lt;/a&gt;\n&lt;/li&gt;</code></pre>\n  </ul>\n</div>\n\n<p>I&#8217;ve been interested in developing <a href=\"https://developer.mozilla.org/en-US/apps\">open web apps</a> (aka the <a href=\"http://en.wikipedia.org/wiki/Single-page_application\">single-page app</a>) for years. But, it feels like the space is really on fire now, since the advent of <a target=\"_blank\" title=\"HTML5\" href=\"https://developer.mozilla.org/html5?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML5</a> tech and the recent moves by <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a> and Google toward truly &#8220;appifying&#8221; these things to compete with offerings from iOS and Android. Lots of pieces have come into alignment, and <a href=\"https://wiki.mozilla.org/Kilimanjaro\">great things are coming together</a>—<a href=\"http://groovecoder.com/2012/09/12/facebook-never-bet-on-html5/\">never mind what the folks at Facebook say</a>.</p>\n<p>So, I think I&#8217;m going to build a simple app and blog about it. And, these days, the first thing I think about when starting a web app is: How do I get it onto the web?</p>\n<!--more-->\n\n<h2 id=\"start-on-the-web\"><span id=\"Start_on_the_web\">Start on the web</span></h2>\n<p>Okay, so getting on the web is not the <em>first</em> thing. The <em>very</em> first thing is to create a new <a href=\"http://github.com/lmorchard\">github.com</a> repo (complete with <code>README.md</code> and <code>.gitignore</code>) and then:</p>\n<pre><code>cd ~/Dropbox/Public/\ngit clone git@github.com:lmorchard/my-project.git\ncd my-project</code></pre>\n<p>And <em>then</em>, I start thinking about getting it onto the web.</p>\n<p>That might sound backward: If all I have is a <code>README</code>, aren&#8217;t I jumping the gun? Well, no—I like to iterate, especially when experimenting with something new. Start simple, try one little thing, repeat. And, because this is a new pan-device world we&#8217;re living in, I&#8217;m often sitting on my couch hacking with a laptop in front, tablet to the left, and phone to the right.</p>\n<p>So, before I even write the first line of &#8220;Hello world&#8221; in <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a>, I want to have a way to get at it from all the gadgets. If it were just my laptop, I could open a <code>file://</code> URL and be done with it. Oh, but not really: Many of the new <a target=\"_blank\" title=\"HTML5\" href=\"https://developer.mozilla.org/html5?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML5</a>-and-friends technologies depend on things like domain origins and real HTTP connections.</p>\n<p>I could <a href=\"http://www.linuxjournal.com/content/tech-tip-really-simple-http-server-python\">start up a disposable HTTP server in the project directory</a> on my laptop and point the other gadgets at that. That works, to some extent. But, that&#8217;s limited to my LAN, I can&#8217;t share it with others for quick alpha testing, and I can&#8217;t check it out when I&#8217;m away from home and the laptop is closed.</p>\n<p>That leaves me with my own web server. But, you know, that&#8217;s a pain in the butt and I&#8217;m getting tired of being sysadmin to my own server. Let&#8217;s take it to the cloud!</p>\n<h2 id=\"how-i-abuse-github-pages\"><span id=\"How_I_abuse_Github_Pages\">How I (ab)use Github Pages</span></h2>\n<p>Since I started with GitHub, <em>my project is already on the web</em>. Or, mostly it is, but just not exactly how I&#8217;d like it. To get the project published at a URL, this is what I do:</p>\n<pre><code>git co -b gh-pages\ngit push origin gh-pages\ngit co master</code></pre>\n<p>Give it a few, and you&#8217;ll receive an email from <a href=\"http://pages.github.com/\">Github Pages</a> (re: <code>[my-project] Page build successful</code>). Give it a few more, since this is the first time for the project. Shortly, the <code>README</code> shows up at an URL like the following:</p>\n<pre><code>http://lmorchard.github.com/my-project/README.md</code></pre>\n<p>After that, whenever I want to publish updates to the app, this is what I do:</p>\n<pre><code>git co gh-pages\ngit rebase master\ngit push origin gh-pages\ngit co master</code></pre>\n<p>And, within seconds (usually), my app is updated on the web. With free hosting, because the folks at GitHub are really nice.</p>\n<p>But, though this works nicely for an app demo or beta, try not to abuse their hospitality by using your <a href=\"http://pages.github.com/\">GitHub Pages</a> URL as the official distribution point for your app.</p>\n<h2 id=\"how-i-abuse-dropbox\"><span id=\"How_I_abuse_Dropbox\">How I (ab)use Dropbox</span></h2>\n<p>You know, all that committing and pushing and rebasing can really get tiresome. And, it craps up my commit history while I&#8217;m just kind of twiddling some bits back and forth to see what happens. We&#8217;re living in the future, damn it, I don&#8217;t have to put up with this!</p>\n<p>And, so, I don&#8217;t. Maybe you noticed that I ran <code>git clone</code> from inside my <a href=\"https://www.dropbox.com/help/16/en\">Dropbox Public folder</a>. Anything in that folder <em>is already on the web</em>: Each file has a public URL, and I can acquire it with a right-click in Finder (ie. Dropbox &gt; Copy Public Link). The result is something like this:</p>\n<pre><code>https://dl.dropbox.com/u/279855/my-project/README.md</code></pre>\n<p>It&#8217;s a crufty URL, but an URL nonetheless. Dropbox public links also mirror the folder structure, so that an <code>index.html</code> can load all the <a target=\"_blank\" title=\"CSS\" href=\"https://developer.mozilla.org/docs/Web/CSS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">CSS</a> and <a target=\"_blank\" title=\"JS\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JS</a> it wants from relative URLs just like a normal web host.</p>\n<p>With Dropbox, then, my hacking cycle with Dropbox looks like this:</p>\n<ol>\n<li>Save in MacVim</li>\n<li>Switch to Firefox</li>\n<li>Refresh</li>\n<li>Repeat</li>\n</ol>\n<p>More often than not, my app has gotten updated on the Dropbox servers somewhere between steps #1 and #3. That&#8217;s a much tighter iteration loop than doing the GitHub dance. In fact, it&#8217;s pretty much indistinguishable from just working on my laptop with <code>file://</code> URLs or a disposable HTTP server on my LAN.</p>\n<p>There&#8217;s some bad news, though. I&#8217;ve just read that <a href=\"https://www.dropbox.com/help/16/en\">new accounts created after 7/31/2012 no longer get a Public folder</a>. So, it would seem that the days of carefree hosting-by-Public-folder are on the way out. But fret not: the folks at Dropbox have <a href=\"https://tech.dropbox.com/?p=345\">provided an alternative for hosting static web apps under development</a>. They&#8217;ve also opened up their API for use by open <a target=\"_blank\" title=\"web apps\" href=\"https://developer.mozilla.org/docs/Apps?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">web apps</a> with <a href=\"https://github.com/dropbox/dropbox-js\">dropbox-js</a>. In fact, this API will play a part in the app about which I plan to blog.</p>\n<h2 id=\"how-i-use-amazon-s3\"><span id=\"How_I_use_Amazon_S3\">How I use Amazon S3</span></h2>\n<p>So, (ab)using GitHub and Dropbox for hosting your app under development is fine and dandy. But, you definitely don&#8217;t want to rely on them for publishing your app for wider distribution. <a href=\"http://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch\">There ain&#8217;t no such thing as a free lunch</a> (TANSTAAFL), and someone&#8217;s bound to shut you down or send you a bill—best to get that out of the way up front.</p>\n<p>As it turns out, <a href=\"http://aws.amazon.com/\">Amazon Web Services</a> will happily accept <a href=\"http://aws.amazon.com/s3/pricing/\">the change from your penny jar</a> to serve up small collections of web content. Well, they will after you&#8217;ve turned the physical pennies into numbers in a bank account, but my point is that Amazon S3 is *<a href=\"http://aws.amazon.com/s3/pricing/\">super cheap</a>*. And, since I&#8217;m talking about a single-page web app here, <a href=\"http://aws.amazon.com/about-aws/whats-new/2011/02/17/Amazon-S3-Website-Features/\">plain old static web hosting</a> is all you need for now.</p>\n<p>In fact, if you own a domain name, you can control the URL from which S3 serves up your content. Basically, you just:</p>\n<ol>\n<li>create a DNS record with a CNAME to S3 (eg. <code>my-project.lmorchard.com</code> -&gt; <code>s3-website-us-east-1.amazonaws.com</code>);</li>\n<li><a href=\"https://console.aws.amazon.com/s3/home\">create a bucket named for your domain</a> (eg. <code>my-project.lmorchard.com</code>);</li>\n<li><a href=\"http://aws.typepad.com/aws/2011/02/host-your-static-website-on-amazon-s3.html\">check a box in the properties panel to enable static hosting</a>.</li>\n</ol>\n<p>The above is vaguely more advanced than either GitHub or Dropbox, but this is playing with power. And, with great power comes great responsibility to read the fine manual. Still, it&#8217;s not that hard and it&#8217;s not that spendy.</p>\n<h3 id=\"how-i-make-amazon-s3-work-like-dropbox\"><span id=\"How_I_make_Amazon_S3_work_like_Dropbox\">How I make Amazon S3 work like Dropbox</span></h3>\n<p>So, great: You&#8217;ve got Amazon S3 serving content at a URL of your choice. And, you can upload content using the <a href=\"https://console.aws.amazon.com/s3/home\">control panel</a> or one of the many fine desktop clients available. But, that sounds a bit like the GitHub deployment dance, just GUI-er. Not bad for Official Releases of your app—but what a pain for development!</p>\n<p>Apropos of that, I have a small trick on OS X that makes Amazon S3 as convenient as Dropbox:</p>\n<ul>\n<li><p>Install <a href=\"https://rubygems.org/gems/kicker\">kicker</a>;</p>\n</li>\n<li><p>Install <a href=\"http://s3tools.org/s3cmd\">s3cmd</a> and configure it with your S3 credentials;</p>\n</li>\n<li><p>Run <a href=\"https://github.com/lmorchard/notational-vapor/blob/master/s3-sync.sh\">this</a> from your project directory in a terminal: \nkicker -c -e &#8216;s3cmd -vfrP &#8211;exclude=&#8221;<em>swp&#8221; &#8211;exclude=&#8221;.git</em>&#8221; sync . s3://my-project.lmorchard.com/&#8217;</li> </ul> \nWhat this does is start <code>kicker</code> to monitor your files. Whenever anything changes, <code>s3cmd</code> uploads the changes to Amazon S3. After the first run, my content shows up at an URL like:</p>\n<pre><code>http://my-project.lmorchard.com/README.md</code></pre>\n</li>\n</ul>\n<p>So, again, my hacking cycle with Amazon S3 looks like this:</p>\n<ol>\n<li>Save changes</li>\n<li>Switch to browser</li>\n<li>Refresh</li>\n<li>Repeat</li>\n</ol>\n<p>Again, this turns out to be nearly indistinguishable from working on <code>localhost</code> or with <code>file://</code> URLs, because the kicker-s3cmd team has generally already shipped off my changes before I can get to the browser. I&#8217;m sure something similar to the above can be cobbled together on Linux or Windows, but I don&#8217;t work there so I&#8217;ve not bothered to figure it out.</p>\n<h2 id=\"in-conclusion\"><span id=\"In_conclusion\">In conclusion</span></h2>\n<p>Developing open <a target=\"_blank\" title=\"web apps\" href=\"https://developer.mozilla.org/docs/Apps?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">web apps</a> on the open web can be fun, fast, cheap, and convenient. I&#8217;ve got more posts forthcoming, at least in my head, but hopefully this one gives some starting points.</p>\n<p>I may also revise and further develop this post, since I left quite a bit of reading to the reader with links to follow. There are also even more cheap and easy web hosts, so maybe I&#8217;ll explore those as well. In the meantime, feel free to leave some comments!</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#Start_on_the_web\"><span class=\"toc_number toc_depth_1\">1</span> Start on the web</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#How_I_abuse_Github_Pages\"><span class=\"toc_number toc_depth_1\">2</span> How I (ab)use Github Pages</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#How_I_abuse_Dropbox\"><span class=\"toc_number toc_depth_1\">3</span> How I (ab)use Dropbox</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#How_I_use_Amazon_S3\"><span class=\"toc_number toc_depth_1\">4</span> How I use Amazon S3</a><ul>\r\n        <li>\r\n          <a href=\"#How_I_make_Amazon_S3_work_like_Dropbox\"><span class=\"toc_number toc_depth_2\">4.1</span> How I make Amazon S3 work like Dropbox</a>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n    \r\n    <li>\r\n      <a href=\"#In_conclusion\"><span class=\"toc_number toc_depth_1\">5</span> In conclusion</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nI&#8217;ve been interested in developing [open web apps][1] (aka the [single-page app][2]) for years. But, it feels like the space is really on fire now, since the advent of <a target=\"_blank\" title=\"HTML5\" href=\"https://developer.mozilla.org/html5?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML5</a> tech and the recent moves by <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a> and Google toward truly &#8220;appifying&#8221; these things to compete with offerings from iOS and Android. Lots of pieces have come into alignment, and [great things are coming together][3]—[never mind what the folks at Facebook say][4].\r\n\r\nSo, I think I&#8217;m going to build a simple app and blog about it. And, these days, the first thing I think about when starting a web app is: How do I get it onto the web?\r\n\r\n<!--more-->\r\n\r\n## <span id=\"Start_on_the_web\">Start on the web</span>\r\n\r\nOkay, so getting on the web is not the *first* thing. The *very* first thing is to create a new [github.com][5] repo (complete with `README.md` and `.gitignore`) and then:\r\n\r\n    cd ~/Dropbox/Public/\r\n    git clone git@github.com:lmorchard/my-project.git\r\n    cd my-project\r\n    \r\n\r\nAnd *then*, I start thinking about getting it onto the web.\r\n\r\nThat might sound backward: If all I have is a `README`, aren&#8217;t I jumping the gun? Well, no—I like to iterate, especially when experimenting with something new. Start simple, try one little thing, repeat. And, because this is a new pan-device world we&#8217;re living in, I&#8217;m often sitting on my couch hacking with a laptop in front, tablet to the left, and phone to the right.\r\n\r\nSo, before I even write the first line of &#8220;Hello world&#8221; in <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a>, I want to have a way to get at it from all the gadgets. If it were just my laptop, I could open a `file://` URL and be done with it. Oh, but not really: Many of the new <a target=\"_blank\" title=\"HTML5\" href=\"https://developer.mozilla.org/html5?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML5</a>-and-friends technologies depend on things like domain origins and real HTTP connections.\r\n\r\nI could [start up a disposable HTTP server in the project directory][6] on my laptop and point the other gadgets at that. That works, to some extent. But, that&#8217;s limited to my LAN, I can&#8217;t share it with others for quick alpha testing, and I can&#8217;t check it out when I&#8217;m away from home and the laptop is closed.\r\n\r\nThat leaves me with my own web server. But, you know, that&#8217;s a pain in the butt and I&#8217;m getting tired of being sysadmin to my own server. Let&#8217;s take it to the cloud!\r\n\r\n## <span id=\"How_I_abuse_Github_Pages\">How I (ab)use Github Pages</span>\r\n\r\nSince I started with GitHub, *my project is already on the web*. Or, mostly it is, but just not exactly how I&#8217;d like it. To get the project published at a URL, this is what I do:\r\n\r\n    git co -b gh-pages\r\n    git push origin gh-pages\r\n    git co master\r\n    \r\n\r\nGive it a few, and you&#8217;ll receive an email from [Github Pages][7] (re: `[my-project] Page build successful`). Give it a few more, since this is the first time for the project. Shortly, the `README` shows up at an URL like the following:\r\n\r\n    http://lmorchard.github.com/my-project/README.md\r\n    \r\n\r\nAfter that, whenever I want to publish updates to the app, this is what I do:\r\n\r\n    git co gh-pages\r\n    git rebase master\r\n    git push origin gh-pages\r\n    git co master\r\n    \r\n\r\nAnd, within seconds (usually), my app is updated on the web. With free hosting, because the folks at GitHub are really nice.\r\n\r\nBut, though this works nicely for an app demo or beta, try not to abuse their hospitality by using your [GitHub Pages][7] URL as the official distribution point for your app.\r\n\r\n## <span id=\"How_I_abuse_Dropbox\">How I (ab)use Dropbox</span>\r\n\r\nYou know, all that committing and pushing and rebasing can really get tiresome. And, it craps up my commit history while I&#8217;m just kind of twiddling some bits back and forth to see what happens. We&#8217;re living in the future, damn it, I don&#8217;t have to put up with this!\r\n\r\nAnd, so, I don&#8217;t. Maybe you noticed that I ran `git clone` from inside my [Dropbox Public folder][8]. Anything in that folder *is already on the web*: Each file has a public URL, and I can acquire it with a right-click in Finder (ie. Dropbox > Copy Public Link). The result is something like this:\r\n\r\n    https://dl.dropbox.com/u/279855/my-project/README.md\r\n    \r\n\r\nIt&#8217;s a crufty URL, but an URL nonetheless. Dropbox public links also mirror the folder structure, so that an `index.html` can load all the <a target=\"_blank\" title=\"CSS\" href=\"https://developer.mozilla.org/docs/Web/CSS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">CSS</a> and <a target=\"_blank\" title=\"JS\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JS</a> it wants from relative URLs just like a normal web host.\r\n\r\nWith Dropbox, then, my hacking cycle with Dropbox looks like this:\r\n\r\n1.  Save in MacVim\r\n2.  Switch to Firefox\r\n3.  Refresh\r\n4.  Repeat\r\n\r\nMore often than not, my app has gotten updated on the Dropbox servers somewhere between steps #1 and #3. That&#8217;s a much tighter iteration loop than doing the GitHub dance. In fact, it&#8217;s pretty much indistinguishable from just working on my laptop with `file://` URLs or a disposable HTTP server on my LAN.\r\n\r\nThere&#8217;s some bad news, though. I&#8217;ve just read that [new accounts created after 7/31/2012 no longer get a Public folder][8]. So, it would seem that the days of carefree hosting-by-Public-folder are on the way out. But fret not: the folks at Dropbox have [provided an alternative for hosting static web apps under development][9]. They&#8217;ve also opened up their API for use by open <a target=\"_blank\" title=\"web apps\" href=\"https://developer.mozilla.org/docs/Apps?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">web apps</a> with [dropbox-js][10]. In fact, this API will play a part in the app about which I plan to blog.\r\n\r\n## <span id=\"How_I_use_Amazon_S3\">How I use Amazon S3</span>\r\n\r\nSo, (ab)using GitHub and Dropbox for hosting your app under development is fine and dandy. But, you definitely don&#8217;t want to rely on them for publishing your app for wider distribution. [There ain&#8217;t no such thing as a free lunch][11] (TANSTAAFL), and someone&#8217;s bound to shut you down or send you a bill—best to get that out of the way up front.\r\n\r\nAs it turns out, [Amazon Web Services][12] will happily accept [the change from your penny jar][13] to serve up small collections of web content. Well, they will after you&#8217;ve turned the physical pennies into numbers in a bank account, but my point is that Amazon S3 is *[super cheap][13]*. And, since I&#8217;m talking about a single-page web app here, [plain old static web hosting][14] is all you need for now.\r\n\r\nIn fact, if you own a domain name, you can control the URL from which S3 serves up your content. Basically, you just:\r\n\r\n1.  create a DNS record with a CNAME to S3 (eg. `my-project.lmorchard.com` -> `s3-website-us-east-1.amazonaws.com`);\r\n2.  [create a bucket named for your domain][15] (eg. `my-project.lmorchard.com`);\r\n3.  [check a box in the properties panel to enable static hosting][16].\r\n\r\nThe above is vaguely more advanced than either GitHub or Dropbox, but this is playing with power. And, with great power comes great responsibility to read the fine manual. Still, it&#8217;s not that hard and it&#8217;s not that spendy.\r\n\r\n### <span id=\"How_I_make_Amazon_S3_work_like_Dropbox\">How I make Amazon S3 work like Dropbox</span>\r\n\r\nSo, great: You&#8217;ve got Amazon S3 serving content at a URL of your choice. And, you can upload content using the [control panel][15] or one of the many fine desktop clients available. But, that sounds a bit like the GitHub deployment dance, just GUI-er. Not bad for Official Releases of your app—but what a pain for development!\r\n\r\nApropos of that, I have a small trick on OS X that makes Amazon S3 as convenient as Dropbox:\r\n\r\n*   Install [kicker][17];\r\n*   Install [s3cmd][18] and configure it with your S3 credentials;\r\n*   Run [this][19] from your project directory in a terminal: \r\n    kicker -c -e &#8216;s3cmd -vfrP &#8211;exclude=&#8221;*swp&#8221; &#8211;exclude=&#8221;.git*&#8221; sync . s3://my-project.lmorchard.com/&#8217;</li> </ul> \r\n    What this does is start `kicker` to monitor your files. Whenever anything changes, `s3cmd` uploads the changes to Amazon S3. After the first run, my content shows up at an URL like:\r\n    \r\n        http://my-project.lmorchard.com/README.md\r\n\r\nSo, again, my hacking cycle with Amazon S3 looks like this:\r\n\r\n1.  Save changes\r\n2.  Switch to browser\r\n3.  Refresh\r\n4.  Repeat\r\n\r\nAgain, this turns out to be nearly indistinguishable from working on `localhost` or with `file://` URLs, because the kicker-s3cmd team has generally already shipped off my changes before I can get to the browser. I&#8217;m sure something similar to the above can be cobbled together on Linux or Windows, but I don&#8217;t work there so I&#8217;ve not bothered to figure it out.\r\n\r\n## <span id=\"In_conclusion\">In conclusion</span>\r\n\r\nDeveloping open <a target=\"_blank\" title=\"web apps\" href=\"https://developer.mozilla.org/docs/Apps?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">web apps</a> on the open web can be fun, fast, cheap, and convenient. I&#8217;ve got more posts forthcoming, at least in my head, but hopefully this one gives some starting points.\r\n\r\nI may also revise and further develop this post, since I left quite a bit of reading to the reader with links to follow. There are also even more cheap and easy web hosts, so maybe I&#8217;ll explore those as well. In the meantime, feel free to leave some comments!\r\n\r\n [1]: https://developer.mozilla.org/en-US/apps\r\n [2]: http://en.wikipedia.org/wiki/Single-page_application\r\n [3]: https://wiki.mozilla.org/Kilimanjaro\r\n [4]: http://groovecoder.com/2012/09/12/facebook-never-bet-on-html5/\r\n [5]: http://github.com/lmorchard\r\n [6]: http://www.linuxjournal.com/content/tech-tip-really-simple-http-server-python\r\n [7]: http://pages.github.com/\r\n [8]: https://www.dropbox.com/help/16/en\r\n [9]: https://tech.dropbox.com/?p=345\r\n [10]: https://github.com/dropbox/dropbox-js\r\n [11]: http://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch\r\n [12]: http://aws.amazon.com/\r\n [13]: http://aws.amazon.com/s3/pricing/\r\n [14]: http://aws.amazon.com/about-aws/whats-new/2011/02/17/Amazon-S3-Website-Features/\r\n [15]: https://console.aws.amazon.com/s3/home\r\n [16]: http://aws.typepad.com/aws/2011/02/host-your-static-website-on-amazon-s3.html\r\n [17]: https://rubygems.org/gems/kicker\r\n [18]: http://s3tools.org/s3cmd\r\n [19]: https://github.com/lmorchard/notational-vapor/blob/master/s3-sync.sh\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2012",
    "path": "2012/09/18/first-get-it-onto-the-web",
    "summary": "\n\n<p>I&#x2019;ve been interested in developing <a href=\"https://developer.mozilla.org/en-US/apps\">open web apps</a> (aka the <a href=\"http://en.wikipedia.org/wiki/Single-page_application\">single-page app</a>) for years. But, it feels like the space is really on fire now, since the advent of <a target=\"_blank\" title=\"HTML5\" href=\"https://developer.mozilla.org/html5?utm_source=wordpress%20blog&amp;utm_medium=content%20link&amp;utm_campaign=promote%20mdn\">HTML5</a> tech and the recent moves by <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&amp;utm_medium=content%20link&amp;utm_campaign=promote%20mdn\">Mozilla</a> and Google toward truly &#x201C;appifying&#x201D; these things to compete with offerings from iOS and Android. Lots of pieces have come into alignment, and <a href=\"https://wiki.mozilla.org/Kilimanjaro\">great things are coming together</a>&#x2014;<a href=\"http://groovecoder.com/2012/09/12/facebook-never-bet-on-html5/\">never mind what the folks at Facebook say</a>.</p>\n<p>So, I think I&#x2019;m going to build a simple app and blog about it. And, these days, the first thing I think about when starting a web app is: How do I get it onto the web?</p>\n"
  },
  {
    "title": "Aerostats, Base Stations, and the Cloud",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2012/07/25/aerostats-base-stations-and-the-cloud",
    "dsq_thread_id": [
      1273315372
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "aerostats",
      "basestations",
      "cloud",
      "social",
      "webdev"
    ],
    "year": "2012",
    "month": "07",
    "day": "25",
    "isDir": false,
    "slug": "aerostats-base-stations-and-the-cloud",
    "date": "2012-07-25T12:00:00.000Z",
    "postName": "2012-07-25-aerostats-base-stations-and-the-cloud",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Aerostats\"><span class=\"toc_number toc_depth_1\">1</span> Aerostats</a>\n    </li>\n    <li>\n      <a href=\"#Base_Stations\"><span class=\"toc_number toc_depth_1\">2</span> Base Stations</a>\n    </li>\n    <li>\n      <a href=\"#The_Cloud\"><span class=\"toc_number toc_depth_1\">3</span> The Cloud</a>\n    </li>\n    <li>\n      <a href=\"#Nerds-only_for_now\"><span class=\"toc_number toc_depth_1\">4</span> Nerds-only, for now</a>\n    </li>\n  </ul>\n</div>\n\n<p>In my thinking about things <a href=\"http://indiewebcamp.com/\">IndieWeb</a> and user-supported cloud infrastructure, I&#8217;ve had a couple of notions bouncing around in my head that might help clarify some &#8220;products&#8221; I&#8217;d like to build if and when I have time. I guess this would be good to blog about, so maybe someone else can steal my ideas (if they&#8217;re any good). Because, after all, much of this is sourced from material I&#8217;ve stolen from guys like <a href=\"http://scripting.com/\">Dave Winer</a>. <!--more--></p>\n<h2 id=\"aerostats\"><span id=\"Aerostats\">Aerostats</span></h2>\n<p><a style=\"display: block; float: right; width: 200px; margin: 0 0 1em 1em\" href=\"http://www.flickr.com/photos/allstar/168630854/\" title=\"Aerostat Closeup by Alistair Howard, on Flickr\"><img src=\"http://farm1.staticflickr.com/57/168630854_595cb67b37.jpg\" width=\"200\" alt=\"Aerostat Closeup\" /></a></p>\n<p>The first notion is &#8220;<strong>areostats on the web</strong>&#8221; &#8211; and by that I mean little servers that you own &amp; run out in the cloud, like communication satellites. They&#8217;re positioned on the high ground, in view of lots of clients behind firewalls that can&#8217;t see each other.</p>\n<p>An <strong>aerostat</strong> provides rendezvous, repeaters, store-and-forward inboxes, and general all-around persistent resources accessible by mobile and sometimes-online devices.</p>\n<p><strong>Aerostats</strong> can talk to each other and pass messages around. They include things like <a href=\"https://code.google.com/p/pubsubhubbub/\">PubSubHubbub</a> &amp; <a href=\"http://rsscloud.org/\">rssCloud</a>; <a href=\"http://www.jabber.org/\">Jabber</a> / <a href=\"http://xmpp.org/\">XMPP</a>; <a href=\"http://arstechnica.com/business/2012/02/mozilla-developing-web-push-notification-system-for-firefox/\">web-based push notifications</a>.</p>\n<p><strong>Aerostats</strong> don&#8217;t necessarily include web servers intended for general content publishing: Many of these coordination and communication services involve a web server, but in my mind an <strong>aerostat</strong> isn&#8217;t where you stick your blog. It might be the thing that fires off update pings when you post to your blog, though. The blog itself could be hosted on Amazon S3 &#8211; because they do paid scalable content hosting very well. (And, just visualize how easy it would be for a mob to pull down an aerostat.)</p>\n<p>I don&#8217;t really have any <strong>aerostats</strong> built, yet. I want to, though. I&#8217;ve got ideas for many pieces, but have yet to assemble them in a meaningful way.</p>\n<h2 id=\"base-stations\"><span id=\"Base_Stations\">Base Stations</span></h2>\n<p><a style=\"display: block; float: right; width: 200px; margin: 0 0 1em 1em\" href=\"http://www.flickr.com/photos/mikelehen/4271004880/\" title=\"2 cordless phones by mikelehen, on Flickr\"><img src=\"http://farm3.staticflickr.com/2698/4271004880_bd42bc9d94.jpg\" width=\"200\" alt=\"2 cordless phones\" /></a></p>\n<p>The second notion is &#8220;<strong>base stations on the web</strong>&#8221; &#8211; and by that I mean little servers that you own &amp; run at home, like the base station for old-school cordless phones.</p>\n<p>A <strong>base station</strong> could be your NAS or Time Machine, and it&#8217;s where your constellation of laptops and mobile devices can sync up when you&#8217;re on the couch. If you&#8217;re lucky, you have a stable IP on the public net from your ISP and can open a port in your router&#8217;s firewall &#8211; that way, your devices can get to the base station while you&#8217;re out and about.</p>\n<p><strong>Base stations</strong> include things such as backup services; a <a href=\"http://docs.services.mozilla.com/howtos/run-sync.html\">Firefox Sync server</a>; a <a href=\"http://www.w3.org/community/unhosted/wiki/RemoteStorage\">storage API</a> for mobile apps. In my mind, a <strong>base station</strong> is largely private, maybe shared with a single household or immediate family. A <strong>base station</strong> isn&#8217;t where you host your blog, but it could be the thing that fetches updates from <em>others&#8217;</em> blogs and hosts a news reader.</p>\n<p>I have a <strong>base station</strong> at home, right now. It&#8217;s a <a href=\"http://www.amazon.com/gp/product/B005YW7OLM/ref=as_li_ss_tl?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B005YW7OLM\" title=\"The model number changes every year; mine is 2 years old.\">Synology DS210j NAS</a>, and it comes with much of the above out of the box. I&#8217;ve added a <a href=\"http://docs.services.mozilla.com/howtos/run-sync.html\">Firefox Sync</a> server, though that needs some work on my end. I&#8217;m also able to open a port on my router. That&#8217;s allowed me to enjoy my own music collection from a 1TB hard drive in my basement, <a href=\"https://play.google.com/store/apps/details?id=com.synology.DSaudio&amp;feature=search_result#?t=W251bGwsMSwxLDEsImNvbS5zeW5vbG9neS5EU2F1ZGlvIl0.\">using my smartphone on wifi</a> while at 10,000 feet over Utah. Who needs to upload tracks to Google or Amazon?</p>\n<p>(Well, you might, if you don&#8217;t want to bother with maintaining a music collection at home &#8211; but I like it.)</p>\n<h2 id=\"the-cloud\"><span id=\"The_Cloud\">The Cloud</span></h2>\n<p><a style=\"display: block; float: right; width: 200px; margin: 0 0 1em 1em\" href=\"http://www.flickr.com/photos/katysilbs/7537493628/\" title=\"Unusual Cloud over Portage Lake Channel by Katy Silberger, on Flickr\"><img src=\"http://farm8.staticflickr.com/7127/7537493628_6d85b4fab7.jpg\" width=\"200\" alt=\"Unusual Cloud over Portage Lake Channel\" /></a></p>\n<p>Now, there&#8217;s nothing keeping <strong>aerostats</strong> or <strong>base stations</strong> from being things provided entirely in the cloud. In fact, most of these things are available out there right now. But, it&#8217;s fairly hard to host these things yourself if you wanted to, and common APIs are lacking.</p>\n<p>Some of the cloud services are for-pay and some are for free, but the stability of many are questionable. So, self-hostability and common APIs would at least make it easier (or at least possible) for you to jump off a burning platform if or when the company goes under or <a href=\"http://techland.time.com/2012/07/20/why-google-or-facebook-buying-your-favorite-startup-means-its-probably-toast/\">a giant like Facebook or Google buys them and the dev team gets retasked</a>.</p>\n<p>Really, the point here is that you should be able to pay a vendor to run these services, or you should be able to buy your own hardware and run them yourself. Or, I guess you can subject yourself to ads and behavioral analysis to get a free ride &#8211; <a href=\"http://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch\">but, you get what you pay for</a>.</p>\n<h2 id=\"nerds-only-for-now\"><span id=\"Nerds-only_for_now\">Nerds-only, for now</span></h2>\n<p>Another thing to note is that, at least in my mind, the terms <strong>aerostat</strong> and <strong>base station</strong> invoke thoughts of amateur radio. That&#8217;s on purpose: Like usual, I think the next phase of this stuff <a href=\"http://scripting.com/stories/2012/07/21/usersWillTakeControl.html\">is and will be lovable only by the nerds</a> &#8211; just like the blogosphere in the last decade. So, I might as well embrace that at first and visualize ham operators on the web.</p>\n<p>Maybe this stuff can eventually be productized in a more generally usable way &#8211; yet preserves qualities of freedom, privacy, usability, and reliability.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#Aerostats\"><span class=\"toc_number toc_depth_1\">1</span> Aerostats</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Base_Stations\"><span class=\"toc_number toc_depth_1\">2</span> Base Stations</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#The_Cloud\"><span class=\"toc_number toc_depth_1\">3</span> The Cloud</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Nerds-only_for_now\"><span class=\"toc_number toc_depth_1\">4</span> Nerds-only, for now</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nIn my thinking about things [IndieWeb][1] and user-supported cloud infrastructure, I&#8217;ve had a couple of notions bouncing around in my head that might help clarify some &#8220;products&#8221; I&#8217;d like to build if and when I have time. I guess this would be good to blog about, so maybe someone else can steal my ideas (if they&#8217;re any good). Because, after all, much of this is sourced from material I&#8217;ve stolen from guys like [Dave Winer][2]. <!--more-->\r\n\r\n## <span id=\"Aerostats\">Aerostats</span>\r\n\r\n<a style=\"display: block; float: right; width: 200px; margin: 0 0 1em 1em\" href=\"http://www.flickr.com/photos/allstar/168630854/\" title=\"Aerostat Closeup by Alistair Howard, on Flickr\"><img src=\"http://farm1.staticflickr.com/57/168630854_595cb67b37.jpg\" width=\"200\" alt=\"Aerostat Closeup\" /></a>\r\n\r\nThe first notion is &#8220;**areostats on the web**&#8221; &#8211; and by that I mean little servers that you own & run out in the cloud, like communication satellites. They&#8217;re positioned on the high ground, in view of lots of clients behind firewalls that can&#8217;t see each other.\r\n\r\nAn **aerostat** provides rendezvous, repeaters, store-and-forward inboxes, and general all-around persistent resources accessible by mobile and sometimes-online devices.\r\n\r\n**Aerostats** can talk to each other and pass messages around. They include things like [PubSubHubbub][3] & [rssCloud][4]; [Jabber][5] / [XMPP][6]; [web-based push notifications][7].\r\n\r\n**Aerostats** don&#8217;t necessarily include web servers intended for general content publishing: Many of these coordination and communication services involve a web server, but in my mind an **aerostat** isn&#8217;t where you stick your blog. It might be the thing that fires off update pings when you post to your blog, though. The blog itself could be hosted on Amazon S3 &#8211; because they do paid scalable content hosting very well. (And, just visualize how easy it would be for a mob to pull down an aerostat.)\r\n\r\nI don&#8217;t really have any **aerostats** built, yet. I want to, though. I&#8217;ve got ideas for many pieces, but have yet to assemble them in a meaningful way.\r\n\r\n## <span id=\"Base_Stations\">Base Stations</span>\r\n\r\n<a style=\"display: block; float: right; width: 200px; margin: 0 0 1em 1em\" href=\"http://www.flickr.com/photos/mikelehen/4271004880/\" title=\"2 cordless phones by mikelehen, on Flickr\"><img src=\"http://farm3.staticflickr.com/2698/4271004880_bd42bc9d94.jpg\" width=\"200\" alt=\"2 cordless phones\" /></a>\r\n\r\nThe second notion is &#8220;**base stations on the web**&#8221; &#8211; and by that I mean little servers that you own & run at home, like the base station for old-school cordless phones.\r\n\r\nA **base station** could be your NAS or Time Machine, and it&#8217;s where your constellation of laptops and mobile devices can sync up when you&#8217;re on the couch. If you&#8217;re lucky, you have a stable IP on the public net from your ISP and can open a port in your router&#8217;s firewall &#8211; that way, your devices can get to the base station while you&#8217;re out and about.\r\n\r\n**Base stations** include things such as backup services; a [Firefox Sync server][8]; a [storage API][9] for mobile apps. In my mind, a **base station** is largely private, maybe shared with a single household or immediate family. A **base station** isn&#8217;t where you host your blog, but it could be the thing that fetches updates from *others&#8217;* blogs and hosts a news reader.\r\n\r\nI have a **base station** at home, right now. It&#8217;s a [Synology DS210j NAS][10], and it comes with much of the above out of the box. I&#8217;ve added a [Firefox Sync][8] server, though that needs some work on my end. I&#8217;m also able to open a port on my router. That&#8217;s allowed me to enjoy my own music collection from a 1TB hard drive in my basement, [using my smartphone on wifi][11] while at 10,000 feet over Utah. Who needs to upload tracks to Google or Amazon?\r\n\r\n(Well, you might, if you don&#8217;t want to bother with maintaining a music collection at home &#8211; but I like it.)\r\n\r\n## <span id=\"The_Cloud\">The Cloud</span>\r\n\r\n<a style=\"display: block; float: right; width: 200px; margin: 0 0 1em 1em\" href=\"http://www.flickr.com/photos/katysilbs/7537493628/\" title=\"Unusual Cloud over Portage Lake Channel by Katy Silberger, on Flickr\"><img src=\"http://farm8.staticflickr.com/7127/7537493628_6d85b4fab7.jpg\" width=\"200\" alt=\"Unusual Cloud over Portage Lake Channel\" /></a>\r\n\r\nNow, there&#8217;s nothing keeping **aerostats** or **base stations** from being things provided entirely in the cloud. In fact, most of these things are available out there right now. But, it&#8217;s fairly hard to host these things yourself if you wanted to, and common APIs are lacking.\r\n\r\nSome of the cloud services are for-pay and some are for free, but the stability of many are questionable. So, self-hostability and common APIs would at least make it easier (or at least possible) for you to jump off a burning platform if or when the company goes under or [a giant like Facebook or Google buys them and the dev team gets retasked][12].\r\n\r\nReally, the point here is that you should be able to pay a vendor to run these services, or you should be able to buy your own hardware and run them yourself. Or, I guess you can subject yourself to ads and behavioral analysis to get a free ride &#8211; [but, you get what you pay for][13].\r\n\r\n## <span id=\"Nerds-only_for_now\">Nerds-only, for now</span>\r\n\r\nAnother thing to note is that, at least in my mind, the terms **aerostat** and **base station** invoke thoughts of amateur radio. That&#8217;s on purpose: Like usual, I think the next phase of this stuff [is and will be lovable only by the nerds][14] &#8211; just like the blogosphere in the last decade. So, I might as well embrace that at first and visualize ham operators on the web.\r\n\r\nMaybe this stuff can eventually be productized in a more generally usable way &#8211; yet preserves qualities of freedom, privacy, usability, and reliability.\r\n\r\n [1]: http://indiewebcamp.com/\r\n [2]: http://scripting.com/\r\n [3]: https://code.google.com/p/pubsubhubbub/\r\n [4]: http://rsscloud.org/\r\n [5]: http://www.jabber.org/\r\n [6]: http://xmpp.org/\r\n [7]: http://arstechnica.com/business/2012/02/mozilla-developing-web-push-notification-system-for-firefox/\r\n [8]: http://docs.services.mozilla.com/howtos/run-sync.html\r\n [9]: http://www.w3.org/community/unhosted/wiki/RemoteStorage\r\n [10]: http://www.amazon.com/gp/product/B005YW7OLM/ref=as_li_ss_tl?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=B005YW7OLM \"The model number changes every year; mine is 2 years old.\"\r\n [11]: https://play.google.com/store/apps/details?id=com.synology.DSaudio&feature=search_result#?t=W251bGwsMSwxLDEsImNvbS5zeW5vbG9neS5EU2F1ZGlvIl0.\r\n [12]: http://techland.time.com/2012/07/20/why-google-or-facebook-buying-your-favorite-startup-means-its-probably-toast/\r\n [13]: http://en.wikipedia.org/wiki/There_ain%27t_no_such_thing_as_a_free_lunch\r\n [14]: http://scripting.com/stories/2012/07/21/usersWillTakeControl.html",
    "parentPath": "../blog.lmorchard.com/posts/archives/2012",
    "path": "2012/07/25/aerostats-base-stations-and-the-cloud",
    "thumbnail": "http://farm1.staticflickr.com/57/168630854_595cb67b37.jpg",
    "summary": "\n\n<p>In my thinking about things <a href=\"http://indiewebcamp.com/\">IndieWeb</a> and user-supported cloud infrastructure, I&#x2019;ve had a couple of notions bouncing around in my head that might help clarify some &#x201C;products&#x201D; I&#x2019;d like to build if and when I have time. I guess this would be good to blog about, so maybe someone else can steal my ideas (if they&#x2019;re any good). Because, after all, much of this is sourced from material I&#x2019;ve stolen from guys like <a href=\"http://scripting.com/\">Dave Winer</a>. </p>"
  },
  {
    "title": "Half-formed thoughts about Twitter, social silos, web APIs, and mashups",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2012/07/12/half-formed-thoughts-about-twitter",
    "dsq_thread_id": [
      1107338712
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "facebook",
      "indieweb",
      "social",
      "twitter",
      "webdev"
    ],
    "year": "2012",
    "month": "07",
    "day": "12",
    "isDir": false,
    "slug": "half-formed-thoughts-about-twitter",
    "date": "2012-07-12T12:00:00.000Z",
    "postName": "2012-07-12-half-formed-thoughts-about-twitter",
    "html": "<p><strong>TL;DR:</strong> Turns out, the way to derive value from web APIs is to let your community run off and do free research and development. Harvest the results, and profit. We were never promised participation, but it felt like it was a 2-way street. Silly us. Where do we go from here?</p>\n<!--more-->\n\n<p>You know, there wasn&#8217;t much to Twitter <a href=\"http://twitter.com/lmorchard/status/42834/\">when I first signed up</a>. Sure, there&#8217;s lots now, and tons of work behind it. But, a lot of that was <a href=\"https://www.google.com/search?q=paving+cow+paths\">paving the cow paths</a> and ensuring those paths could endure stampedes. Many, many of Twitter&#8217;s current features were first brainstormed and pioneered by its users and 3rd-party developers &#8211; <a href=\"http://anarchogeek.com/2012/07/09/origin-of-the-reply-digging-through-twitters-history/\">like the @-reply</a>, <a href=\"http://gigaom.com/2010/04/30/the-short-and-illustrious-history-of-twitter-hashtags/\">the #hashtag</a>, or <a href=\"http://en.wikipedia.org/wiki/Reblogging#Twitter\">the retweet</a>. I&#8217;m sure I could assemble a list of UI innovations cobbled up by 3rd-party Twitter clients that are now folded back into Twitter itself.</p>\n<p>I&#8217;m not saying the Twitter crew have nothing to be proud of, but a quite a lot of it started with users and developers outside the company. But now, the company <a href=\"https://dev.twitter.com/blog/delivering-consistent-twitter-experience\">is talking about more thoroughly enforcing certain guidelines for a &#8220;consistent Twitter experience&#8221;</a>.</p>\n<p>To me as a user and sometimes developer, that sounds like: &#8220;Thanks, we&#8217;ll take it from here. Enjoy the show!&#8221; Which, having somehow fooled myself into thinking this was a 2-way street, comes as a bit of cold water to the face. <a href=\"http://scripting.com/stories/2010/04/26/theToxicCoralReef.html#p10\">I can&#8217;t say I wasn&#8217;t warned early and often, though.</a> It&#8217;s not like Twitter is suddenly going rogue &amp; evil, or even going away soon. They&#8217;re just more firmly grabbing the reins on the product that was never ever really ours to begin with. That&#8217;s their prerogative, and they&#8217;ll enjoy success.</p>\n<p>But, still, it kind of sucks. In the 2000&#8217;s, I was gonzo about web services and APIs. One of the things I&#8217;d looked most forward to when I joined del.icio.us and Yahoo! back in 2006 was to build up their web APIs. Of course, no one really knew how these things would get monetized &#8211; <strong>but damn, weren&#8217;t mashups cool</strong>?</p>\n<p><a href=\"http://scripting.com/stories/2012/07/07/twitterIsACorporateApi.html\">They&#8217;ve figured out how to derive value by now, though</a>: Not everything yields a charge-per-request billing concern. It turns out that you can harvest free research and development from your community and fold the good stuff back into the main product. We even did this at del.icio.us &#8211; see also, the old <code>for:{username}</code> tag convention and the inbox that followed later. (Do they even have that any more?) But, it seems like Twitter is reaching a point where they&#8217;ve harvested enough, and want to polish things up.</p>\n<p>What&#8217;s left behind are things that aren&#8217;t owned by a single entity. RSS, rssCloud, Atom, AtomPub, PubSubHubbub, <a target=\"_blank\" title=\"JSON\" href=\"https://developer.mozilla.org/docs/JSON?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JSON</a> Activity Streams, Salmon, WebFinger, OStatus, etc and so forth. <a href=\"http://inessential.com/2012/06/29/matthew_on_twitter_restrictions\">We could talk to each other with these things, and make beautiful mashups</a>.</p>\n<p>But, a lot of us have been distracted by shiny corporate APIs, building value for others and sometimes making a little for ourselves. Why bother writing a web spider chasing microformatted relationships to build a social graph, when we could make a single HTTP GET and have a <a target=\"_blank\" title=\"JSON\" href=\"https://developer.mozilla.org/docs/JSON?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JSON</a>-formatted friends list tossed back &#8211; and thus, get on with the real thing we wanted to do with that list?</p>\n<p>And honestly a lot of us fail at things like basic usability and design, making it so much easier for someone to just sign up for a social silo than muck around with trying to get some PHP witchery working on some strange webhost. WordPress may be a relative dream to set up, these days, but not in comparison to a sign-up form.</p>\n<p>Sure, back in circa-2000&#8217;s era blogosphere, we were figuring out things like feeds and aggregators and autodiscovery and trackbacks and blogrolls and mashups. But, along the way, startups wrapped the best of those things up in packages friendly to broader swaths of humanity. You know, kind of like how Apple is now making glued-together laptops.</p>\n<p>That&#8217;s where I think the social silos like Twitter and Facebook have won: They&#8217;ve made things practical for users that we blogosphereans never did. And on the other end, they gave us nerds free access to APIs that let us build things that were rewarded by real use. Because, for many of us, that&#8217;s the real payoff beyond a literal paycheck: seeing our stuff get used and praised as clever.</p>\n<p>Now, the social silos don&#8217;t need us nerds as much. If they do, they hire us. But, out on the open web, things are a bit stale. The users don&#8217;t care to use our complex crap, and don&#8217;t even know what it is or why to bother. And we don&#8217;t spend much time on it, because how rewarding is it without users?</p>\n<p>So now what? Seems like a hard catch-22 to break, and I haven&#8217;t had much time lately to do my part in breaking it. Maybe I will soon, so I&#8217;m thinking about what to hack on next.</p>\n",
    "body": "**TL;DR:** Turns out, the way to derive value from web APIs is to let your community run off and do free research and development. Harvest the results, and profit. We were never promised participation, but it felt like it was a 2-way street. Silly us. Where do we go from here?\r\n\r\n<!--more-->\r\n\r\nYou know, there wasn&#8217;t much to Twitter [when I first signed up][1]. Sure, there&#8217;s lots now, and tons of work behind it. But, a lot of that was [paving the cow paths][2] and ensuring those paths could endure stampedes. Many, many of Twitter&#8217;s current features were first brainstormed and pioneered by its users and 3rd-party developers &#8211; [like the @-reply][3], [the #hashtag][4], or [the retweet][5]. I&#8217;m sure I could assemble a list of UI innovations cobbled up by 3rd-party Twitter clients that are now folded back into Twitter itself.\r\n\r\nI&#8217;m not saying the Twitter crew have nothing to be proud of, but a quite a lot of it started with users and developers outside the company. But now, the company [is talking about more thoroughly enforcing certain guidelines for a &#8220;consistent Twitter experience&#8221;][6].\r\n\r\nTo me as a user and sometimes developer, that sounds like: &#8220;Thanks, we&#8217;ll take it from here. Enjoy the show!&#8221; Which, having somehow fooled myself into thinking this was a 2-way street, comes as a bit of cold water to the face. [I can&#8217;t say I wasn&#8217;t warned early and often, though.][7] It&#8217;s not like Twitter is suddenly going rogue & evil, or even going away soon. They&#8217;re just more firmly grabbing the reins on the product that was never ever really ours to begin with. That&#8217;s their prerogative, and they&#8217;ll enjoy success.\r\n\r\nBut, still, it kind of sucks. In the 2000&#8217;s, I was gonzo about web services and APIs. One of the things I&#8217;d looked most forward to when I joined del.icio.us and Yahoo! back in 2006 was to build up their web APIs. Of course, no one really knew how these things would get monetized &#8211; **but damn, weren&#8217;t mashups cool**?\r\n\r\n[They&#8217;ve figured out how to derive value by now, though][8]: Not everything yields a charge-per-request billing concern. It turns out that you can harvest free research and development from your community and fold the good stuff back into the main product. We even did this at del.icio.us &#8211; see also, the old `for:{username}` tag convention and the inbox that followed later. (Do they even have that any more?) But, it seems like Twitter is reaching a point where they&#8217;ve harvested enough, and want to polish things up.\r\n\r\nWhat&#8217;s left behind are things that aren&#8217;t owned by a single entity. RSS, rssCloud, Atom, AtomPub, PubSubHubbub, <a target=\"_blank\" title=\"JSON\" href=\"https://developer.mozilla.org/docs/JSON?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JSON</a> Activity Streams, Salmon, WebFinger, OStatus, etc and so forth. [We could talk to each other with these things, and make beautiful mashups][9].\r\n\r\nBut, a lot of us have been distracted by shiny corporate APIs, building value for others and sometimes making a little for ourselves. Why bother writing a web spider chasing microformatted relationships to build a social graph, when we could make a single HTTP GET and have a <a target=\"_blank\" title=\"JSON\" href=\"https://developer.mozilla.org/docs/JSON?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JSON</a>-formatted friends list tossed back &#8211; and thus, get on with the real thing we wanted to do with that list?\r\n\r\nAnd honestly a lot of us fail at things like basic usability and design, making it so much easier for someone to just sign up for a social silo than muck around with trying to get some PHP witchery working on some strange webhost. WordPress may be a relative dream to set up, these days, but not in comparison to a sign-up form.\r\n\r\nSure, back in circa-2000&#8217;s era blogosphere, we were figuring out things like feeds and aggregators and autodiscovery and trackbacks and blogrolls and mashups. But, along the way, startups wrapped the best of those things up in packages friendly to broader swaths of humanity. You know, kind of like how Apple is now making glued-together laptops.\r\n\r\nThat&#8217;s where I think the social silos like Twitter and Facebook have won: They&#8217;ve made things practical for users that we blogosphereans never did. And on the other end, they gave us nerds free access to APIs that let us build things that were rewarded by real use. Because, for many of us, that&#8217;s the real payoff beyond a literal paycheck: seeing our stuff get used and praised as clever.\r\n\r\nNow, the social silos don&#8217;t need us nerds as much. If they do, they hire us. But, out on the open web, things are a bit stale. The users don&#8217;t care to use our complex crap, and don&#8217;t even know what it is or why to bother. And we don&#8217;t spend much time on it, because how rewarding is it without users?\r\n\r\nSo now what? Seems like a hard catch-22 to break, and I haven&#8217;t had much time lately to do my part in breaking it. Maybe I will soon, so I&#8217;m thinking about what to hack on next.\r\n\r\n [1]: http://twitter.com/lmorchard/status/42834/\r\n [2]: https://www.google.com/search?q=paving+cow+paths\r\n [3]: http://anarchogeek.com/2012/07/09/origin-of-the-reply-digging-through-twitters-history/\r\n [4]: http://gigaom.com/2010/04/30/the-short-and-illustrious-history-of-twitter-hashtags/\r\n [5]: http://en.wikipedia.org/wiki/Reblogging#Twitter\r\n [6]: https://dev.twitter.com/blog/delivering-consistent-twitter-experience\r\n [7]: http://scripting.com/stories/2010/04/26/theToxicCoralReef.html#p10\r\n [8]: http://scripting.com/stories/2012/07/07/twitterIsACorporateApi.html\r\n [9]: http://inessential.com/2012/06/29/matthew_on_twitter_restrictions",
    "parentPath": "../blog.lmorchard.com/posts/archives/2012",
    "path": "2012/07/12/half-formed-thoughts-about-twitter",
    "summary": "<p><strong>TL;DR:</strong> Turns out, the way to derive value from web APIs is to let your community run off and do free research and development. Harvest the results, and profit. We were never promised participation, but it felt like it was a 2-way street. Silly us. Where do we go from here?</p>\n"
  },
  {
    "title": "How webdev is like space exploration",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2012/07/10/webdev-in-spac",
    "dsq_thread_id": [
      1136633645
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "mozilla",
      "space",
      "webdev"
    ],
    "year": "2012",
    "month": "07",
    "day": "10",
    "isDir": false,
    "slug": "webdev-in-spac",
    "date": "2012-07-10T12:00:00.000Z",
    "postName": "2012-07-10-webdev-in-spac",
    "html": "<p>This isn&#8217;t so much a complaint as a set of observations: Sometimes, as a webdev, diagnosing and fixing issues on a live site in production gives me sympathy for NASA scientists dealing with remote space probes. And, that&#8217;s because I generally don&#8217;t have direct access to the servers. Instead, my access is mediated through sysadmins whose primary communication channel is trouble tickets. (Occasionally, I&#8217;ll be lucky enough to have someone I can pester more directly, but that&#8217;s a privilege that I try really hard not to abuse.)</p>\n<p><a href=\"http://marsrovers.jpl.nasa.gov/home/index.html\"><img src=\"http://marsrovers.jpl.nasa.gov/overview/rover_low_angle_200.jpg\" style=\"float:right; margin: 1em 0em 1em 1em\" /></a> So, I build my own replicas of production sites, as best as I can. I deploy exploratory rovers into those environments, and try to account for what could happen based on everything I know up to this point. Once I&#8217;ve done all I can to prepare, I fire up the comms dish and beam out a request to the distant probe. This takes time because I have to wait until the receiver is in alignment, and there&#8217;s a transmission &amp; reply delay due to distance. (<em>In other words, I file a bug and wait for someone to pick it up. That takes awhile, because we&#8217;re all busy people, and I&#8217;m a telecommuter who can&#8217;t just go tap someone on the shoulder.</em>)</p>\n<p>I cross my fingers and hope I&#8217;ve built up a good-enough model of the remote environment, and maybe I&#8217;ll find that my hypothesis will be validated. If not, well, then I at least hope I haven&#8217;t broken anything, and hope that there&#8217;s new information in the reply that I can assimilate into my replica environment here back at home for an improved next attempt.</p>\n<p>But, I&#8217;m not entirely sure how to improve this situation. If I had direct access to production servers, I&#8217;d be able to do more. However, if I had that access, I&#8217;d be <em>expected</em> to do more. You know, like wear a pager and wake up at 4am to fix an alarm condition. I&#8217;ve done that job in the past, and I don&#8217;t envy anyone who has it now.</p>\n<p>There are also, I imagine, trust and confidentiality issues: even though I write the code, I&#8217;m not necessarily qualified to be in contact with certain kinds of sensitive data on a daily basis. (And by not qualified, I mean not bound by a certain class of contractual or legal obligations and not subject to certain kinds of training. I&#8217;ll say you can trust me, but trust is sometimes a formalized thing.)</p>\n<p>Still, some days I like to imagine that what I&#8217;m doing is trying to debug the behavior of a robot in orbit around Mars. It keeps me from putting too many dents into my desk with my forehead.</p>\n",
    "body": "This isn&#8217;t so much a complaint as a set of observations: Sometimes, as a webdev, diagnosing and fixing issues on a live site in production gives me sympathy for NASA scientists dealing with remote space probes. And, that&#8217;s because I generally don&#8217;t have direct access to the servers. Instead, my access is mediated through sysadmins whose primary communication channel is trouble tickets. (Occasionally, I&#8217;ll be lucky enough to have someone I can pester more directly, but that&#8217;s a privilege that I try really hard not to abuse.)\r\n\r\n[<img src=\"http://marsrovers.jpl.nasa.gov/overview/rover_low_angle_200.jpg\" style=\"float:right; margin: 1em 0em 1em 1em\" />][1] So, I build my own replicas of production sites, as best as I can. I deploy exploratory rovers into those environments, and try to account for what could happen based on everything I know up to this point. Once I&#8217;ve done all I can to prepare, I fire up the comms dish and beam out a request to the distant probe. This takes time because I have to wait until the receiver is in alignment, and there&#8217;s a transmission & reply delay due to distance. (*In other words, I file a bug and wait for someone to pick it up. That takes awhile, because we&#8217;re all busy people, and I&#8217;m a telecommuter who can&#8217;t just go tap someone on the shoulder.*)\r\n\r\nI cross my fingers and hope I&#8217;ve built up a good-enough model of the remote environment, and maybe I&#8217;ll find that my hypothesis will be validated. If not, well, then I at least hope I haven&#8217;t broken anything, and hope that there&#8217;s new information in the reply that I can assimilate into my replica environment here back at home for an improved next attempt.\r\n\r\nBut, I&#8217;m not entirely sure how to improve this situation. If I had direct access to production servers, I&#8217;d be able to do more. However, if I had that access, I&#8217;d be *expected* to do more. You know, like wear a pager and wake up at 4am to fix an alarm condition. I&#8217;ve done that job in the past, and I don&#8217;t envy anyone who has it now.\r\n\r\nThere are also, I imagine, trust and confidentiality issues: even though I write the code, I&#8217;m not necessarily qualified to be in contact with certain kinds of sensitive data on a daily basis. (And by not qualified, I mean not bound by a certain class of contractual or legal obligations and not subject to certain kinds of training. I&#8217;ll say you can trust me, but trust is sometimes a formalized thing.)\r\n\r\nStill, some days I like to imagine that what I&#8217;m doing is trying to debug the behavior of a robot in orbit around Mars. It keeps me from putting too many dents into my desk with my forehead.\r\n\r\n [1]: http://marsrovers.jpl.nasa.gov/home/index.html",
    "parentPath": "../blog.lmorchard.com/posts/archives/2012",
    "path": "2012/07/10/webdev-in-spac",
    "thumbnail": "http://marsrovers.jpl.nasa.gov/overview/rover_low_angle_200.jpg"
  },
  {
    "title": "How webdev has been getting better",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2012/07/10/webdev-more-better",
    "dsq_thread_id": [
      1107338707
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "devops",
      "mozilla",
      "webdev"
    ],
    "year": "2012",
    "month": "07",
    "day": "10",
    "isDir": false,
    "slug": "webdev-more-better",
    "date": "2012-07-10T12:00:00.000Z",
    "postName": "2012-07-10-webdev-more-better",
    "html": "<p>So, in the last thing I posted, I wrote about how fixing problems on live web sites <a href=\"http://blog.lmorchard.com/2012/07/10/webdev-in-spac\">feels like fixing space robots</a>. At <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a>, though, things have been getting steadily better and more interesting:</p>\n<p><a href=\"http://www.amazon.com/gp/product/B004D18MCK/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B004D18MCK&amp;linkCode=as2&amp;tag=0xdecafbad01-20\"><img src=\"http://ecx.images-amazon.com/images/I/41AvY4p2haL._SL160_.jpg\" style=\"float:left; margin: 1em 1em 1em 0\" /></a></p>\n<p>There&#8217;s still the <em>sysadmin-as-remote-pair-of-hands-driven-by-trouble-tickets</em> thing going on, but less so every day. More and more, we&#8217;re getting into <a href=\"http://www.slideshare.net/MattBrandt/mozilla-continuous-deploment-on-sumo\">continuous deployment</a>. Our sysadmins are really smart cookies: They&#8217;re steadily replacing themselves with scripts of varying sizes. That way, they can get on to more interesting things. In fact, just recently, they gave us a great Big Red Button that deploys code from a git repository to the live site on demand. And, for some reason, I&#8217;m one of the people who got a key to it.</p>\n<p>Okay, maybe not <a href=\"http://www.amazon.com/gp/product/B004D18MCK/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B004D18MCK&amp;linkCode=as2&amp;tag=0xdecafbad01-20\"><em>that</em> exact button</a>, but ours is very keen. Of course, when it broke once, I felt like the Pakled on the right (and not Geordi):</p>\n<p><span class='embed-youtube' style='text-align:center; display: block;'></span></p>\n<p>But, the Big Red Button hasn&#8217;t broken very often. So, I&#8217;d rather be a Pakled some of the time than pretend to be a rocket scientist all of the time.</p>\n<p><a href=\"http://octodex.github.com/\"><img src=\"http://octodex.github.com/images/twenty-percent-cooler-octocat.png\" style=\"width: 150px; float: right; margin: 1em 0 1em 1em\" /></a> Oh yeah, and <a href=\"https://github.com/mozilla/\">we&#8217;re using GitHub a lot these days</a>. It&#8217;s crazypants awesome for collaboration, and it fits right in with our style because we want to do everything in the open anyway. We&#8217;ve even somehow lured people who don&#8217;t normally code into <a href=\"https://github.com/mozilla/kuma/commit/1a8038215a2c4bb7fba5ff098875d034704d79bd\">submitting Pull Requests</a>. And, it&#8217;s amazingly powerful to refer to specific lines of code and commits by URL in IRC or email.</p>\n<p><a href=\"http://vagrantup.com/\"><img src=\"http://vagrantup.com/static/images/hippie.png\" style=\"width: 150px; float: left; margin: 1em 1em 1em 0\" /></a> I&#8217;ve also been getting a lot better at building development environments, <a href=\"http://opensourcebridge.org/wiki/2011/Inviting_Contributors_to_Open_Source_Webdev_through_Virtualization\">using Puppet and Vagrant</a> and Amazon EC2. I haven&#8217;t quite gotten to the point where I can borrow IT&#8217;s Puppet manifests directly &#8211; ie. those scripts with which sysadmins are replacing themselves.</p>\n<p>But, we are maintaining the recipes for spinning up dev servers right alongside the code. Our READMEs are shrinking, rather than growing &#8211; and yet we&#8217;re still adding more services and dependencies. I no longer really fear totally jack-knifing my dev rig, because I can just toss it and conjure up another in the time it takes me to run to lunch.</p>\n<p>Let&#8217;s see, what else? I&#8217;m sure I&#8217;ll think of something. Until then, SHIP IT. (The post, I mean.)</p>\n",
    "body": "So, in the last thing I posted, I wrote about how fixing problems on live web sites [feels like fixing space robots][1]. At <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a>, though, things have been getting steadily better and more interesting:\r\n\r\n[<img src=\"http://ecx.images-amazon.com/images/I/41AvY4p2haL._SL160_.jpg\" style=\"float:left; margin: 1em 1em 1em 0\" />][2]\r\n\r\nThere&#8217;s still the *sysadmin-as-remote-pair-of-hands-driven-by-trouble-tickets* thing going on, but less so every day. More and more, we&#8217;re getting into [continuous deployment][3]. Our sysadmins are really smart cookies: They&#8217;re steadily replacing themselves with scripts of varying sizes. That way, they can get on to more interesting things. In fact, just recently, they gave us a great Big Red Button that deploys code from a git repository to the live site on demand. And, for some reason, I&#8217;m one of the people who got a key to it.\r\n\r\nOkay, maybe not [*that* exact button][2], but ours is very keen. Of course, when it broke once, I felt like the Pakled on the right (and not Geordi):\r\n\r\n<span class='embed-youtube' style='text-align:center; display: block;'></span>\r\n\r\nBut, the Big Red Button hasn&#8217;t broken very often. So, I&#8217;d rather be a Pakled some of the time than pretend to be a rocket scientist all of the time.\r\n\r\n[<img src=\"http://octodex.github.com/images/twenty-percent-cooler-octocat.png\" style=\"width: 150px; float: right; margin: 1em 0 1em 1em\" />][4] Oh yeah, and [we&#8217;re using GitHub a lot these days][5]. It&#8217;s crazypants awesome for collaboration, and it fits right in with our style because we want to do everything in the open anyway. We&#8217;ve even somehow lured people who don&#8217;t normally code into [submitting Pull Requests][6]. And, it&#8217;s amazingly powerful to refer to specific lines of code and commits by URL in IRC or email.\r\n\r\n[<img src=\"http://vagrantup.com/static/images/hippie.png\" style=\"width: 150px; float: left; margin: 1em 1em 1em 0\" />][7] I&#8217;ve also been getting a lot better at building development environments, [using Puppet and Vagrant][8] and Amazon EC2. I haven&#8217;t quite gotten to the point where I can borrow IT&#8217;s Puppet manifests directly &#8211; ie. those scripts with which sysadmins are replacing themselves.\r\n\r\nBut, we are maintaining the recipes for spinning up dev servers right alongside the code. Our READMEs are shrinking, rather than growing &#8211; and yet we&#8217;re still adding more services and dependencies. I no longer really fear totally jack-knifing my dev rig, because I can just toss it and conjure up another in the time it takes me to run to lunch.\r\n\r\nLet&#8217;s see, what else? I&#8217;m sure I&#8217;ll think of something. Until then, SHIP IT. (The post, I mean.)\r\n\r\n [1]: http://blog.lmorchard.com/2012/07/10/webdev-in-spac\r\n [2]: http://www.amazon.com/gp/product/B004D18MCK/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=B004D18MCK&linkCode=as2&tag=0xdecafbad01-20\r\n [3]: http://www.slideshare.net/MattBrandt/mozilla-continuous-deploment-on-sumo\r\n [4]: http://octodex.github.com/\r\n [5]: https://github.com/mozilla/\r\n [6]: https://github.com/mozilla/kuma/commit/1a8038215a2c4bb7fba5ff098875d034704d79bd\r\n [7]: http://vagrantup.com/\r\n [8]: http://opensourcebridge.org/wiki/2011/Inviting_Contributors_to_Open_Source_Webdev_through_Virtualization",
    "parentPath": "../blog.lmorchard.com/posts/archives/2012",
    "path": "2012/07/10/webdev-more-better",
    "thumbnail": "http://ecx.images-amazon.com/images/I/41AvY4p2haL._SL160_.jpg"
  },
  {
    "layout": "post",
    "title": "Please Do Learn To Code",
    "tags": [
      "coding",
      "learning",
      "work",
      "webdev",
      "mozilla"
    ],
    "published": true,
    "date": "2012-05-16T13:00:00.000Z",
    "year": "2012",
    "month": "05",
    "day": "16",
    "isDir": false,
    "slug": "please-learn-to-code",
    "postName": "2012-05-16-please-learn-to-code",
    "html": "<p><strong>TL;DR</strong>: <em>I think coding is an essential skill for modern humans\nsurrounded by code and machines that run it. Please learn to code.</em></p>\n<p><a href=\"http://www.flickr.com/photos/mita/2508770940/?ref=nf\" style=\"display: block; float: right; text-decoration: none; border: none; margin: 0 0 1em 1em; width: 310px;\"><img src=\"http://farm3.static.flickr.com/2001/2508770940_b88b955aaa.jpg\" style=\"width: 275px; border: 2px solid #ddd; padding: 1em; background: #fff;\" /></a></p>\n<p>I disagree with Jeff Atwood on <a href=\"http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html\">&quot;Please don&#39;t learn to code&quot;</a>:</p>\n<blockquote>\n<p>The &quot;everyone should learn to code&quot; movement isn&#39;t just wrong\nbecause it falsely equates coding with essential life skills like\nreading, writing, and math. I wish. It is wrong in so many other\nways. </p>\n</blockquote>\n<p>In fact, I <em>do</em> regard coding as an essential modern skill. Yes,\n<a href=\"http://dmlcentral.net/blog/cathy-davidson/why-we-need-4th-r-reading-writing-arithmetic-algorithms\" title=\"Why We Need a 4th R: Reading, wRiting, aRithmetic, algoRithms\">right alongside reading, writing, and &#39;rithmatic</a>. At least\nthis part of <a href=\"http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html\">the post</a> had me nodding:</p>\n<blockquote>\n<p>I suppose I can support learning a tiny bit about programming just\nso you can recognize what code is, and when code might be an\nappropriate way to approach a problem you have. But I can also\nrecognize plumbing problems when I see them without any particular\ntraining in the area.</p>\n</blockquote>\n<h2 id=\"visible-pipes\">Visible pipes</h2>\n<p>Luckily, pipes are not as occult as code. If you go into a basement or\nopen the door under a sink, you can see them and follow where they go.\nThat&#39;s <em>some</em> training, albeit informal or self-directed. </p>\n<p>I&#39;m not sure how you&#39;d get exposed to code in the same way: View\nSource in a browser <em>used</em> to be a decent start on the web, <a href=\"http://saveviewsource.org/\">but\nthat&#39;s less helpful lately</a>. Code elsewhere has\ntypically been hard to get at, Open Source notwithstanding.</p>\n<p>Still, I&#39;d bet there are people in the world for whom running water\ncomes from <em>magic</em> and drains into <em>magic*.  Where *magic</em> means: &quot;I\nnever thought about it, never needed to, and am sometimes vaguely\nafraid of it.&quot;</p>\n<p>For that class of homeowner, <a href=\"http://www.gkdating.com/mad-men-lessons-three-men-and-a-sink/\" title=\"Mad Men Lessons: Three Men and a Sink\">the kitchen floods when the sink springs\na leak, until an expert arrives</a>. It&#39;s not the end of\nthe world, and plenty of people get by just fine like that. But, I\ncertainly wouldn&#39;t agree that &quot;<strong>Please don&#39;t learn about pipes</strong>&quot; is\ngood advice in general.</p>\n<h2 id=\"learning-by-doing\">Learning by doing</h2>\n<p>Admittedly, &quot;<strong>learn to plumb</strong>&quot; isn&#39;t the same as &quot;<strong>learn about\npipes</strong>&quot;. But, is there a difference between &quot;<strong>learn <em>to</em> code</strong>&quot; and\n&quot;<strong>learn <em>about</em> code</strong>&quot;? I don&#39;t think so. Like writing, code doesn&#39;t\nseem like a thing that&#39;s easy to learn <em>about</em> without <em>doing</em> it.</p>\n<p>When I write &quot;coder&quot;, I generally mean this: Someone who is capable of\nencoding his or her intent and decision process into a form that can\ndrive a CPU to perform tasks on his or her behalf.</p>\n<p>That&#39;s a very broad definition, but it implies a lot. First, you have\nto realize that <em>you</em> can make a CPU can do things on your\nbehalf--it&#39;s okay, you won&#39;t break it. It&#39;s a tool made by\nhumans and you as a human can understand it. Then, you need a notion\nof <a href=\"http://rwxweb.wordpress.com/2012/01/31/teaching-algorithmic-thinking/\">algorithmic thinking</a>, in order to formulate your\nintent and reasoning in a form that a CPU can execute. These are not\nnatural or intuitive things.</p>\n<p>I agree with that it&#39;s good to &quot;<a href=\"http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html\">recognize what code is, and when code\nmight be an appropriate way to approach a problem</a>&quot;.  But,\nif you&#39;ve never made a CPU do your bidding, it&#39;s easy to see it as a\nmysterious black box with a will of its own--possibly malicious or\nat least capricious.</p>\n<p>And, if you&#39;ve never worked to force your thoughts into to the\nconfoundingly literal and common senseless constraints of computer\nprogramming, it&#39;s hard to even imagine how code works. If you can&#39;t\nimagine how it works, how do you work it into your mental toolkit for\ngetting things done?</p>\n<p>Learn to code, and a lot of other things get dragged into your head\nalong the way.</p>\n<h2 id=\"who-needs-all-these-coders\">Who needs all these coders?</h2>\n<p>And then, there were these bits from &quot;<a href=\"http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html\">Please Don&#39;t Learn to\nCode</a>&quot;:</p>\n<blockquote>\n<p>It assumes that adding naive, novice,\nnot-even-sure-they-like-this-whole-programming-thing coders to the\nworkforce is a net positive for the world.</p>\n</blockquote>\n<blockquote>\n<p>It implies that there&#39;s a thin, easily permeable membrane between\nlearning to program and getting paid to program professionally.</p>\n</blockquote>\n<p>This is looking at work from the wrong angle. It isn&#39;t about <em>getting\npaid to program</em>, so much as <em>coding to <a href=\"http://www.codinghorror.com/blog/2004/08/be-good-at-your-job.html\">be good at your\njob</a></em>.</p>\n<p>I&#39;m not talking about Java-heads who live all day in Eclipse.  I&#39;m\ntalking about the Excel-head who used to rock <a href=\"http://en.wikipedia.org/wiki/Visual_Basic_for_Applications\">VBA macros</a>, who\nmaybe just started playing with <a href=\"https://developers.google.com/apps-script/\">Google Apps Script</a>. I have no\nidea how popular Google Apps Script might or might not be, but I&#39;ve\nseen some crazy amazing things done in VBA by sales and account reps\nwho&#39;d punch you in the nose if you called them geeks.</p>\n<p>As far as I can tell, the future of work is heading toward more work\nwith greater volumes of information and data. Should <strong>professional\nprogramers</strong> be the only people in an organization who know how to\napply computational power to solve problems? Maybe the vendors will\nsweep in, clean up all <a href=\"http://en.wikipedia.org/wiki/Computer_Lib_/_Dream_Machines\">the cybercrud</a>, and get the real work\ndone for us.</p>\n<h2 id=\"programming-should-not-be-a-priesthood\">Programming should not be a priesthood</h2>\n<p>Consider writing: there&#39;s a lot to learn and it used to be a thing\ndone only by a few scribes. But, people today get a lot of mileage out\nof just sticky notes and email. Sure, improving your grammar and\nlearning how to structure an essay can help in many, many ways. But,\nyou don&#39;t need to be a <strong>professional writer</strong> to be a <strong>professional\nwho uses written language</strong>.</p>\n<p>The same can apply for coding. The problem, though, is that the\nsticky-notes-and-email level of competence barely exists or is near\nimpossible to access. So, not only do I think we need more coders--we\nalso need more tools that support coding and make coding more\naccessible. I think we should support <strong>professionals who use code</strong>.</p>\n<p>More than that, I think we should encourage and support <strong>humans who\ncode</strong>. I really do consider coding next to reading, writing, and\nmath. I don&#39;t think we can all rely on someone else to write the\nperfect app for the work we&#39;ll need to do in the future. I expect the\nsuccessful people will be those who can apply <a href=\"http://teddziuba.com/2010/10/taco-bell-programming.html\">Taco Bell\nprogramming</a> to reams of data and find answers. We&#39;ll need\nto ride <a href=\"http://www.dougengelbart.org/history/pix.html#6\">bicycles, not tricycles</a>.</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=70: -->\n",
    "body": "**TL;DR**: <em>I think coding is an essential skill for modern humans\r\nsurrounded by code and machines that run it. Please learn to code.</em>\r\n\r\n<a href=\"http://www.flickr.com/photos/mita/2508770940/?ref=nf\" style=\"display: block; float: right; text-decoration: none; border: none; margin: 0 0 1em 1em; width: 310px;\"><img src=\"http://farm3.static.flickr.com/2001/2508770940_b88b955aaa.jpg\" style=\"width: 275px; border: 2px solid #ddd; padding: 1em; background: #fff;\" /></a>\r\n\r\nI disagree with Jeff Atwood on [\"Please don't learn to code\"][dontcode]:\r\n\r\n> The \"everyone should learn to code\" movement isn't just wrong\r\n> because it falsely equates coding with essential life skills like\r\n> reading, writing, and math. I wish. It is wrong in so many other\r\n> ways. \r\n\r\n[dontcode]: http://www.codinghorror.com/blog/2012/05/please-dont-learn-to-code.html\r\n\r\nIn fact, I *do* regard coding as an essential modern skill. Yes,\r\n[right alongside reading, writing, and 'rithmatic][rithms]. At least\r\nthis part of [the post][dontcode] had me nodding:\r\n\r\n[rithms]: http://dmlcentral.net/blog/cathy-davidson/why-we-need-4th-r-reading-writing-arithmetic-algorithms \"Why We Need a 4th R: Reading, wRiting, aRithmetic, algoRithms\"\r\n\r\n> I suppose I can support learning a tiny bit about programming just\r\n> so you can recognize what code is, and when code might be an\r\n> appropriate way to approach a problem you have. But I can also\r\n> recognize plumbing problems when I see them without any particular\r\n> training in the area.\r\n\r\n## Visible pipes\r\n\r\nLuckily, pipes are not as occult as code. If you go into a basement or\r\nopen the door under a sink, you can see them and follow where they go.\r\nThat's *some* training, albeit informal or self-directed. \r\n\r\nI'm not sure how you'd get exposed to code in the same way: View\r\nSource in a browser *used* to be a decent start on the web, [but\r\nthat's less helpful lately][saveviewsource]. Code elsewhere has\r\ntypically been hard to get at, Open Source notwithstanding.\r\n\r\n[saveviewsource]: http://saveviewsource.org/\r\n\r\nStill, I'd bet there are people in the world for whom running water\r\ncomes from *magic* and drains into *magic*.  Where *magic* means: \"I\r\nnever thought about it, never needed to, and am sometimes vaguely\r\nafraid of it.\"\r\n\r\nFor that class of homeowner, [the kitchen floods when the sink springs\r\na leak, until an expert arrives][madmen]. It's not the end of\r\nthe world, and plenty of people get by just fine like that. But, I\r\ncertainly wouldn't agree that \"**Please don't learn about pipes**\" is\r\ngood advice in general.\r\n\r\n[madmen]: http://www.gkdating.com/mad-men-lessons-three-men-and-a-sink/ \"Mad Men Lessons: Three Men and a Sink\"\r\n\r\n## Learning by doing\r\n\r\nAdmittedly, \"**learn to plumb**\" isn't the same as \"**learn about\r\npipes**\". But, is there a difference between \"**learn *to* code**\" and\r\n\"**learn *about* code**\"? I don't think so. Like writing, code doesn't\r\nseem like a thing that's easy to learn *about* without *doing* it.\r\n\r\nWhen I write \"coder\", I generally mean this: Someone who is capable of\r\nencoding his or her intent and decision process into a form that can\r\ndrive a CPU to perform tasks on his or her behalf.\r\n\r\nThat's a very broad definition, but it implies a lot. First, you have\r\nto realize that *you* can make a CPU can do things on your\r\nbehalf--it's okay, you won't break it. It's a tool made by\r\nhumans and you as a human can understand it. Then, you need a notion\r\nof [algorithmic thinking][algothink], in order to formulate your\r\nintent and reasoning in a form that a CPU can execute. These are not\r\nnatural or intuitive things.\r\n\r\n[algothink]: http://rwxweb.wordpress.com/2012/01/31/teaching-algorithmic-thinking/\r\n\r\nI agree with that it's good to \"[recognize what code is, and when code\r\nmight be an appropriate way to approach a problem][dontcode]\".  But,\r\nif you've never made a CPU do your bidding, it's easy to see it as a\r\nmysterious black box with a will of its own--possibly malicious or\r\nat least capricious.\r\n\r\nAnd, if you've never worked to force your thoughts into to the\r\nconfoundingly literal and common senseless constraints of computer\r\nprogramming, it's hard to even imagine how code works. If you can't\r\nimagine how it works, how do you work it into your mental toolkit for\r\ngetting things done?\r\n\r\nLearn to code, and a lot of other things get dragged into your head\r\nalong the way.\r\n\r\n## Who needs all these coders?\r\n\r\nAnd then, there were these bits from \"[Please Don't Learn to\r\nCode][dontcode]\":\r\n\r\n> It assumes that adding naive, novice,\r\n> not-even-sure-they-like-this-whole-programming-thing coders to the\r\n> workforce is a net positive for the world.\r\n\r\n> It implies that there's a thin, easily permeable membrane between\r\n> learning to program and getting paid to program professionally.\r\n\r\nThis is looking at work from the wrong angle. It isn't about *getting\r\npaid to program*, so much as *coding to [be good at your\r\njob][goodjob]*.\r\n\r\n[goodjob]: http://www.codinghorror.com/blog/2004/08/be-good-at-your-job.html\r\n\r\nI'm not talking about Java-heads who live all day in Eclipse.  I'm\r\ntalking about the Excel-head who used to rock [VBA macros][vba], who\r\nmaybe just started playing with [Google Apps Script][gas]. I have no\r\nidea how popular Google Apps Script might or might not be, but I've\r\nseen some crazy amazing things done in VBA by sales and account reps\r\nwho'd punch you in the nose if you called them geeks.\r\n\r\n[vba]: http://en.wikipedia.org/wiki/Visual_Basic_for_Applications\r\n[gas]: https://developers.google.com/apps-script/\r\n\r\nAs far as I can tell, the future of work is heading toward more work\r\nwith greater volumes of information and data. Should **professional\r\nprogramers** be the only people in an organization who know how to\r\napply computational power to solve problems? Maybe the vendors will\r\nsweep in, clean up all [the cybercrud][complib], and get the real work\r\ndone for us.\r\n\r\n[complib]: http://en.wikipedia.org/wiki/Computer_Lib_/_Dream_Machines\r\n\r\n## Programming should not be a priesthood\r\n\r\nConsider writing: there's a lot to learn and it used to be a thing\r\ndone only by a few scribes. But, people today get a lot of mileage out\r\nof just sticky notes and email. Sure, improving your grammar and\r\nlearning how to structure an essay can help in many, many ways. But,\r\nyou don't need to be a **professional writer** to be a **professional\r\nwho uses written language**.\r\n\r\nThe same can apply for coding. The problem, though, is that the\r\nsticky-notes-and-email level of competence barely exists or is near\r\nimpossible to access. So, not only do I think we need more coders--we\r\nalso need more tools that support coding and make coding more\r\naccessible. I think we should support **professionals who use code**.\r\n\r\nMore than that, I think we should encourage and support **humans who\r\ncode**. I really do consider coding next to reading, writing, and\r\nmath. I don't think we can all rely on someone else to write the\r\nperfect app for the work we'll need to do in the future. I expect the\r\nsuccessful people will be those who can apply [Taco Bell\r\nprogramming][tacobell] to reams of data and find answers. We'll need\r\nto ride [bicycles, not tricycles][dephotos].\r\n\r\n[dephotos]: http://www.dougengelbart.org/history/pix.html#6\r\n[tacobell]: http://teddziuba.com/2010/10/taco-bell-programming.html\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=70: -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2012",
    "path": "2012/05/16/please-learn-to-code",
    "thumbnail": "http://farm3.static.flickr.com/2001/2508770940_b88b955aaa.jpg"
  },
  {
    "layout": "post",
    "title": "Putting clouds in boxes for webdevs at Mozilla",
    "tags": [
      "mozilla",
      "contributors",
      "volunteers",
      "vagrant",
      "puppet",
      "virtualization",
      "webdev"
    ],
    "published": true,
    "date": "2011-10-02T22:45:37.146Z",
    "year": "2011",
    "month": "10",
    "day": "04",
    "isDir": false,
    "slug": "putting-clouds-in-boxes",
    "postName": "2011-10-04-putting-clouds-in-boxes",
    "html": "<p><strong>TL;DR</strong>: <em>At Mozilla, we&#39;re redoubling efforts to attract contributors. And, in the Webdev team, we&#39;re <a href=\"http://blog.mozilla.com/webdev/2011/10/04/developing-with-vagrant-puppet-and-playdoh/\">using virtual machines</a> to make it even easier to get started hacking. It makes no sense to demand that a JavaScript ninja or a CSS artisan also be a Python-wielding sysadmin, so we&#39;re trying to build <a href=\"https://wiki.mozilla.org/Webdev:DevBoxVMImages\">ready-baked VMs for our projects</a>.</em></p>\n<p><a href=\"http://www.flickr.com/photos/erix/3998080471/\" style=\"display: block; float: right; text-decoration: none; border: none; margin: 0 0 1em 1em\"><img src=\"{{ site.baseurl }}/images/cloud-box.jpg\" style=\"width: 300px\" /><br /><small>Lieferung 3 by erix on Flickr</small></a></p>\n<p>Firefox is more than just a desktop browser, and Mozilla is more than just Firefox. An ever-growing mass of our code is going toward building web sites and services that <a href=\"https://wiki.mozilla.org/ReleaseEngineering\">build</a>, <a href=\"http://www.mozilla.org/en-US/firefox/fx/\">ship</a>, <a href=\"https://wiki.mozilla.org/AUS\">update</a>, <a href=\"http://support.mozilla.com/\">support</a>, <a href=\"https://wiki.mozilla.org/Engagement\">promote</a>, <a href=\"https://addons.mozilla.org/\">augment</a>, <a href=\"https://developer.mozilla.org/\">document</a>, <a href=\"http://www.mozilla.org/en-US/mobile/sync/\">sync</a>, <a href=\"https://wiki.mozilla.org/Labs/F1\">share</a>, <a href=\"http://identity.mozilla.com/\">identify</a>, and <a href=\"https://wiki.mozilla.org/Socorro\">report</a>. (And I&#39;m sure I&#39;m missing a further cast of hundreds, here.) </p>\n<h3 id=\"sighting-storm-clouds-on-the-horizon\">Sighting storm clouds on the horizon</h3>\n<p>In other words, more and more of Mozilla is in the <em>cloud</em>. Unfortunately, many of these projects are really hard to get into as a contributor. It&#39;s often hard to find what needs doing in Bugzilla, and it&#39;s often hard to get the code up and running in a meaningful way without being both a bit of a sysadmin and a Mozilla insider.</p>\n<p>This is a huge problem. Although Mozilla has a core group of employees, we&#39;re not nearly enough to build all of these projects and pursue <a href=\"http://www.mozilla.org/about/mission.html\">the mission</a> on our own. We&#39;ve gotten to where we are thanks to the volunteer efforts of thousands of contributors—and the only way we&#39;ll get where we want to go is through the efforts of thousands (or *<a href=\"http://commonspace.wordpress.com/2011/02/22/nmm-redux/\">millions</a>*) more. The good news is that is feels like we&#39;re <a href=\"https://wiki.mozilla.org/Mozilla.org/Contribute\">waking up to this problem</a> and starting to get <a href=\"https://wiki.mozilla.org/ReMo\">really serious about it</a>. </p>\n<h3 id=\"sharing-recipes-for-fluffy-clouds\">Sharing recipes for fluffy clouds</h3>\n<p>For my part, I&#39;ve spent idle time over the past few years trying to work out how to make webdev projects more accessible to new contributors. We&#39;ve come a long way from the days of just uploading WordPress to an FTP server; these things come with a lot of moving parts nowadays, and the <code>INSTALL.txt</code> files run long and consume weekends. And so, they filter out all but the most dedicated (or masochistic) volunteers.</p>\n<p>For months, I spun my wheels playing with virtual machines and exporting appliances, doing a lot of things by hand. But then, earlier this year, I discovered both <a href=\"http://vagrantup.com/\">Vagrant</a> and <a href=\"http://www.puppetlabs.com/\">Puppet</a> and had my mind blown. With those tools, I could share recipes for VMs right alongside my code. </p>\n<p>I would never have to set up a webdev environment for myself by hand again—all the fiddly bits of installation and configuration could be codified, checked into github, and flushed from my brain.  But, the real magic is that I could <em>share</em> this stuff. So, future coworkers and collaborators could benefit from the same reproducible dev enviroments—<em>never having wasted brainpower and weekends on an INSTALL.txt to begin with</em>. </p>\n<p>This is a really big deal. I <a href=\"http://lanyrd.com/2011/osbridge/sdxby/\">presented on it this past June at Open Source Bridge</a> in Portland (<a href=\"http://decafbad.com/2011/06/os-webdev-vm/slides.html\">slides</a>). I&#39;ve been talking myself blue about this stuff for months, in opposition to my usual serially enthuastic habits. But, it looks like I&#39;ve infected my coworkers at Mozilla, because now we&#39;re talking about <a href=\"http://blog.mozilla.com/webdev/2011/10/04/developing-with-vagrant-puppet-and-playdoh/\">developing with Vagrant, Puppet, and Playdoh</a>.</p>\n<h3 id=\"no-assembly-required\">No assembly required</h3>\n<p>So, with <a href=\"http://vagrantup.com/\">Vagrant</a>, <a href=\"http://www.puppetlabs.com/\">Puppet</a>, and <a href=\"http://blog.mozilla.com/webdev/2011/10/04/developing-with-vagrant-puppet-and-playdoh/\">Playdoh</a>, we&#39;ll have projects that you can fire up with just a <code>git clone</code> and a <code>vagrant up</code> in a command line shell. Forget about <a href=\"http://macports.org/\">MacPorts</a> or <a href=\"https://github.com/mxcl/homebrew/\">Homebrew</a> on Mac OS X, or whatever it is that people using Windows have to install. Take a bike ride or go to lunch, and you&#39;ll have a fully configured server running and source code ready for hacking.</p>\n<p>I think we can do better, though. For one, spinning up a fairly complex virtual machine from scratch with <a href=\"http://vagrantup.com/\">Vagrant</a> and <a href=\"http://www.puppetlabs.com/\">Puppet</a> takes a long time and a lot of bandwidth. This can be sped up by <a href=\"http://vagrantup.com/docs/boxes.html\">packaging pre-built boxes</a>. So, one improvement we can pursue is to spin up VMs with Vagrant as a part of our continual integration and deployment processes and package boxes for public download. These are also handy on a thumb drive for sharing at hack events and meetups.</p>\n<p>This still requires <a href=\"http://vagrantup.com/\">Vagrant</a> and working with the command-line, though. Not everyone who has something valuable to contribute is a command-line jockey. And, a few of us webdevs have run into issues with <a href=\"http://vagrantup.com/\">Vagrant</a>—it&#39;s still early days for that project, after all. Additionally, not everyone who could be a Mozilla contributor owns the kind of hardware necessary to support running a substantial virtual machine.</p>\n<p>So, I&#39;ve also started playing with <a href=\"http://www.puppetlabs.com/\">Puppet</a> by itself, to build plain-vanilla VM appliances and to spin up cloud servers on <a href=\"http://aws.amazon.com/ec2/\">Amazon EC2</a> and <a href=\"http://www.rackspace.com/cloud/\">Rackspace Cloud Servers</a>. It&#39;s going pretty well, and it&#39;s conceivable we could do without <a href=\"http://vagrantup.com/\">Vagrant</a> to script the build of <a href=\"http://en.wikipedia.org/wiki/Open_Virtualization_Format\">downloadable VM appliances</a> and to spin up disposable cloud servers.</p>\n<h3 id=\"so-now-what\">So, now what?</h3>\n<p>There are still some issues to be worked out, so <a href=\"https://wiki.mozilla.org/Webdev:DevBoxVMImages\">I&#39;ve started a wiki page</a>. And, we need to spread the word that we&#39;re doing this to see what people think—and more importantly, see if this helps attract more help. From my years at Mozilla so far and bouncing between projects, VM appliances are things I wish I&#39;d had when faced with a new project. So, having been there—albeit with insider advantages—I&#39;m pretty optimistic that this is a good step forward.</p>\n<p>Of course, it&#39;s not the only step: The other thing I mentioned—and have conveniently avoided addressing again throughout the rest of this post—is the issue of finding things to do in Bugzilla. Well, we&#39;re working on that too. It&#39;s a bit beyond the scope of this blog post, but we have a Mozilla-wide effort to start classifying <a href=\"https://bugzil.la/sw:%5Bgood%20first%20bug%5D\">good first bugs</a> for new contributors and <a href=\"http://blog.paulbiggar.com/archive/helping-new-contributors-part-2-mentoring/\">identifying mentors</a> to contact for help.</p>\n<p>So... what do you think?</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=70: -->\n",
    "body": "**TL;DR**: <em>At Mozilla, we're redoubling efforts to attract contributors. And, in the Webdev team, we're [using virtual machines][playdoh] to make it even easier to get started hacking. It makes no sense to demand that a JavaScript ninja or a CSS artisan also be a Python-wielding sysadmin, so we're trying to build [ready-baked VMs for our projects][devimages].</em>\r\n\r\n<a href=\"http://www.flickr.com/photos/erix/3998080471/\" style=\"display: block; float: right; text-decoration: none; border: none; margin: 0 0 1em 1em\"><img src=\"{{ site.baseurl }}/images/cloud-box.jpg\" style=\"width: 300px\" /><br /><small>Lieferung 3 by erix on Flickr</small></a>\r\n\r\nFirefox is more than just a desktop browser, and Mozilla is more than just Firefox. An ever-growing mass of our code is going toward building web sites and services that [build][releng], [ship][downloads], [update][aus], [support][sumo], [promote][promote], [augment][amo], [document][mdn], [sync][sync], [share][share], [identify][identity], and [report][socorro]. (And I'm sure I'm missing a further cast of hundreds, here.) \r\n\r\n### Sighting storm clouds on the horizon\r\n\r\nIn other words, more and more of Mozilla is in the *cloud*. Unfortunately, many of these projects are really hard to get into as a contributor. It's often hard to find what needs doing in Bugzilla, and it's often hard to get the code up and running in a meaningful way without being both a bit of a sysadmin and a Mozilla insider.\r\n\r\nThis is a huge problem. Although Mozilla has a core group of employees, we're not nearly enough to build all of these projects and pursue [the mission][mission] on our own. We've gotten to where we are thanks to the volunteer efforts of thousands of contributors—and the only way we'll get where we want to go is through the efforts of thousands (or *[millions][]*) more. The good news is that is feels like we're [waking up to this problem][contribute] and starting to get [really serious about it][remo]. \r\n\r\n### Sharing recipes for fluffy clouds\r\n\r\nFor my part, I've spent idle time over the past few years trying to work out how to make webdev projects more accessible to new contributors. We've come a long way from the days of just uploading WordPress to an FTP server; these things come with a lot of moving parts nowadays, and the `INSTALL.txt` files run long and consume weekends. And so, they filter out all but the most dedicated (or masochistic) volunteers.\r\n\r\nFor months, I spun my wheels playing with virtual machines and exporting appliances, doing a lot of things by hand. But then, earlier this year, I discovered both [Vagrant][] and [Puppet][] and had my mind blown. With those tools, I could share recipes for VMs right alongside my code. \r\n\r\nI would never have to set up a webdev environment for myself by hand again—all the fiddly bits of installation and configuration could be codified, checked into github, and flushed from my brain.  But, the real magic is that I could *share* this stuff. So, future coworkers and collaborators could benefit from the same reproducible dev enviroments—*never having wasted brainpower and weekends on an INSTALL.txt to begin with*. \r\n\r\nThis is a really big deal. I [presented on it this past June at Open Source Bridge][osbridge] in Portland ([slides][]). I've been talking myself blue about this stuff for months, in opposition to my usual serially enthuastic habits. But, it looks like I've infected my coworkers at Mozilla, because now we're talking about [developing with Vagrant, Puppet, and Playdoh][playdoh].\r\n\r\n### No assembly required\r\n\r\nSo, with [Vagrant][], [Puppet][], and [Playdoh][], we'll have projects that you can fire up with just a `git clone` and a `vagrant up` in a command line shell. Forget about [MacPorts][] or [Homebrew][] on Mac OS X, or whatever it is that people using Windows have to install. Take a bike ride or go to lunch, and you'll have a fully configured server running and source code ready for hacking.\r\n\r\nI think we can do better, though. For one, spinning up a fairly complex virtual machine from scratch with [Vagrant][] and [Puppet][] takes a long time and a lot of bandwidth. This can be sped up by [packaging pre-built boxes][boxes]. So, one improvement we can pursue is to spin up VMs with Vagrant as a part of our continual integration and deployment processes and package boxes for public download. These are also handy on a thumb drive for sharing at hack events and meetups.\r\n\r\nThis still requires [Vagrant][] and working with the command-line, though. Not everyone who has something valuable to contribute is a command-line jockey. And, a few of us webdevs have run into issues with [Vagrant][]—it's still early days for that project, after all. Additionally, not everyone who could be a Mozilla contributor owns the kind of hardware necessary to support running a substantial virtual machine.\r\n\r\nSo, I've also started playing with [Puppet][] by itself, to build plain-vanilla VM appliances and to spin up cloud servers on [Amazon EC2][ec2] and [Rackspace Cloud Servers][rackspace]. It's going pretty well, and it's conceivable we could do without [Vagrant][] to script the build of [downloadable VM appliances][ovf] and to spin up disposable cloud servers.\r\n\r\n### So, now what?\r\n\r\nThere are still some issues to be worked out, so [I've started a wiki page][devimages]. And, we need to spread the word that we're doing this to see what people think—and more importantly, see if this helps attract more help. From my years at Mozilla so far and bouncing between projects, VM appliances are things I wish I'd had when faced with a new project. So, having been there—albeit with insider advantages—I'm pretty optimistic that this is a good step forward.\r\n\r\nOf course, it's not the only step: The other thing I mentioned—and have conveniently avoided addressing again throughout the rest of this post—is the issue of finding things to do in Bugzilla. Well, we're working on that too. It's a bit beyond the scope of this blog post, but we have a Mozilla-wide effort to start classifying [good first bugs][gfb] for new contributors and [identifying mentors][mentors] to contact for help.\r\n\r\nSo... what do you think?\r\n\r\n[gfb]: https://bugzil.la/sw:%5Bgood%20first%20bug%5D\r\n[mentors]: http://blog.paulbiggar.com/archive/helping-new-contributors-part-2-mentoring/\r\n[macports]: http://macports.org/\r\n[homebrew]: https://github.com/mxcl/homebrew/\r\n[rackspace]: http://www.rackspace.com/cloud/\r\n[ec2]: http://aws.amazon.com/ec2/\r\n[ovf]: http://en.wikipedia.org/wiki/Open_Virtualization_Format\r\n[boxes]: http://vagrantup.com/docs/boxes.html\r\n[devimages]: https://wiki.mozilla.org/Webdev:DevBoxVMImages\r\n[slides]: http://decafbad.com/2011/06/os-webdev-vm/slides.html\r\n[playdoh]: http://blog.mozilla.com/webdev/2011/10/04/developing-with-vagrant-puppet-and-playdoh/\r\n[devops]: http://en.wikipedia.org/wiki/DevOps\r\n[osbridge]: http://lanyrd.com/2011/osbridge/sdxby/\r\n[vagrant]: http://vagrantup.com/\r\n[puppet]: http://www.puppetlabs.com/\r\n[remo]: https://wiki.mozilla.org/ReMo\r\n[contribute]: https://wiki.mozilla.org/Mozilla.org/Contribute\r\n[millions]: http://commonspace.wordpress.com/2011/02/22/nmm-redux/\r\n[promote]: https://wiki.mozilla.org/Engagement\r\n[socorro]: https://wiki.mozilla.org/Socorro\r\n[releng]: https://wiki.mozilla.org/ReleaseEngineering\r\n[aus]: https://wiki.mozilla.org/AUS\r\n[credits]: http://www.mozilla.org/credits/\r\n[downloads]: http://www.mozilla.org/en-US/firefox/fx/\r\n[amo]: https://addons.mozilla.org/\r\n[sumo]: http://support.mozilla.com/\r\n[mdn]: https://developer.mozilla.org/\r\n[flux]: https://wiki.mozilla.org/Webdev/Flux\r\n[fennec]: http://www.mozilla.org/en-US/mobile/\r\n[sync]: http://www.mozilla.org/en-US/mobile/sync/\r\n[identity]: http://identity.mozilla.com/\r\n[share]: https://wiki.mozilla.org/Labs/F1\r\n[mission]: http://www.mozilla.org/about/mission.html\r\n[involved]: http://www.mozilla.org/contribute/\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=70: -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2011",
    "path": "2011/10/02/putting-clouds-in-boxes",
    "thumbnail": "/blog.lmorchard.com/2011/10/02/putting-clouds-in-boxes/%7B%7B%20site.baseurl%20%7D%7D/images/cloud-box.jpg"
  },
  {
    "comments_archived": true,
    "layout": "post",
    "tags": [
      "metablogging",
      "jekyll",
      "disqus",
      "webdev",
      "hosting"
    ],
    "time": "5:15 PM",
    "title": "Moved to Jekyll and Disqus",
    "year": "2011",
    "month": "06",
    "day": "08",
    "isDir": false,
    "slug": "moved-to-jekyll",
    "date": "2011-06-08T12:00:00.000Z",
    "postName": "2011-06-08-moved-to-jekyll",
    "html": "<p><strong>TL;DR</strong>: <em>My blog is now produced by <a href=\"https://github.com/mojombo/jekyll\">Jekyll</a>, with comments hosted by <a href=\"http://disqus.com/\">Disqus</a>.</em></p>\n<p>This blog has transitioned between a handful of publishing platforms -\nincluding Movable Type, blosxom, and Wordpress. Well, apparently, it&#39;s that\ntime again.  I&#39;ve been toying with making a change again for a few years,\nand finally just got all the pieces together over the past week. This blog\nis now just a pile of static files produced by <a href=\"https://github.com/mojombo/jekyll\">Jekyll</a>, and the comments\nare now hosted by <a href=\"http://disqus.com/\">Disqus</a>.</p>\n<p>This has a lot of interesting implications:</p>\n<ul>\n<li><p>I can neglect my server for long periods of time without worrying that my\nlong-outdated copy of Wordpress has been exploited. Really, there&#39;s no\nreason for me to have a full-featured CMS running here.</p>\n</li>\n<li><p>I could host my entire blog on Amazon S3 or something similar, and be\nmore neglectful by reducing active code even further. The only crappy\nthing is that I don&#39;t think I can send <code>decafbad.com</code> directly to S3, and\nwould need to redirect to a CNAME on a subdomain on <code>blog.decafbad.com</code>.</p>\n</li>\n<li><p>I can edit my blog directly on GitHub and, assuming I get the webhooks\nset up, have my server rebuild the HTML automatically on a <code>git push</code>. I\ncould probably use <a href=\"http://pages.github.com/\">GitHub Pages</a> and the Jekyll support there,\nbut I suspect I&#39;ll be doing some Weird Things that they won&#39;t handle.\n(And probably for good reason.) </p>\n</li>\n<li><p>Since Disqus has all my comments now, I can stop worrying about running\nthat code on my server too. I&#39;m a little antsy about putting that in the\ncloud, but the escape routes are well lit and I should be able to replace\nit easily if I need to. Self-hosted, JS-include-based comments is a\nproject in my TODO list.</p>\n</li>\n<li><p>My writing here is now all stored in individual text files, formatted with\nMarkdown, annotated with YAML metadata, and subject to revision control\nunder git. This combination feels like it has a lot of longevity and\npotential for survival even beyond this current experiment with <a href=\"https://github.com/mojombo/jekyll\">Jekyll</a></p>\n</li>\n<li><p>Writing, editing, and publishing entries here can now more closely match\nmy daily reality of living in MacVim and git. It sounds lame, but the\nnotion of swapping over to a Wordpress admin page and working in a\nbrowser textarea has often kept me from even starting a post.</p>\n</li>\n</ul>\n<p>But, some things are broken, now:</p>\n<ul>\n<li><p><a href=\"https://github.com/lmorchard/blog.decafbad.com/commit/a79678828ab612c2edb8a8ac3f796199cb922a2e\">Fixed</a> <strike>No more tag pages. I don&#39;t think very many humans visit these pages, but\na lot of search engines do.</strike></p>\n</li>\n<li><p><a href=\"https://github.com/lmorchard/blog.decafbad.com/commit/a79678828ab612c2edb8a8ac3f796199cb922a2e\">Fixed</a> <strike>No more tag feeds. I expect to hear about this soon, since this blog gets\nsyndicated to Planet Mozilla via my &quot;mozilla&quot; tag feed.</strike></p>\n</li>\n<li><p>No more year / month archive pages or sidebar widget. Not sure how many\npeople actually stroll down memory lane here on my blog, but I do have a\n<a href=\"http://decafbad.com/blog/archives\">gigantor huge list of all my posts evar</a>, now.</p>\n</li>\n<li><p>A general lack of contextual links to related posts and such. Turns out\nthat running the LSI option on Jekyll is completely horrible.</p>\n</li>\n<li><p>Regeneration seems less-than-happy in general, and I wish it did\nconditional regneration. That is, only produce the HTML for things that\nneed it because dependencies have changed. No need to rebake the whole\nworld just because I changed one file.</p>\n</li>\n</ul>\n<p>The bright side is that there are solutions to all the broken things, and\nnow I have something to tinker with again on my blog.  So, let me know if\nanything else looks broken, and hopefully this will get me spewing some\nmore words out onto this thing soon.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221397880\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-221397880\" class=\"permalink\"><time datetime=\"2011-06-08T17:45:54\">2011-06-08T17:45:54</time></a>\n</div>\n<div class=\"content\">Testing a comment here on my new post.</div>\n</li>\n<li class=\"comment\" id=\"comment-221404263\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/bkclements.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">bkclements</a>\n</div>\n<a href=\"#comment-221404263\" class=\"permalink\"><time datetime=\"2011-06-08T17:59:01\">2011-06-08T17:59:01</time></a>\n</div>\n<div class=\"content\">Hi, did you happen to look at blogofile for similar functionality?\nI'm still trying to decide which way to  go. I prefer ReST markup..</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221408933\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-221408933\" class=\"permalink\"><time datetime=\"2011-06-08T18:08:26\">2011-06-08T18:08:26</time></a>\n</div>\n<div class=\"content\">I've had my eye on Jekyll for awhile now and have a few friends also using it, so I haven't really checked out any other packages. Might be nice to poke around at something based in Python since my Ruby-fu is not strong, but then getting stronger in Ruby is not a bad thing for me.\nAnd, for myself, I'm pretty stubbornly rooted in Markdown for all my writing online</div>\n</li>\n</ul>\n</li>\n<li class=\"comment\" id=\"comment-221530821\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/BillSeitz.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">BillSeitz</a>\n</div>\n<a href=\"#comment-221530821\" class=\"permalink\"><time datetime=\"2011-06-08T22:01:56\">2011-06-08T22:01:56</time></a>\n</div>\n<div class=\"content\">What kind of metadata are you storing in YAML?</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221547147\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-221547147\" class=\"permalink\"><time datetime=\"2011-06-08T22:30:10\">2011-06-08T22:30:10</time></a>\n</div>\n<div class=\"content\">Pretty simple stuff: Title, tags, etc. \nYou can see the source for this post here on github, for example:\nhttps://raw.github.com/lmorchard/blog.decafbad.com/master/_posts/2011-06-08-moved-to-jekyll.markdown\nI had once-upon-a-time thought about storing posts as RFC 822 messages, with the metadata in headers like email messages. But, this \"YAML front matter\" approach of Jekyll is a bit more flexible</div>\n</li>\n</ul>\n</li>\n<li class=\"comment\" id=\"comment-221561143\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.facebook.com/davedash\"><img src=\"http://disqus.com/api/users/avatars/facebook-530160304.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.facebook.com/davedash\">Dave Dash</a>\n</div>\n<a href=\"#comment-221561143\" class=\"permalink\"><time datetime=\"2011-06-08T23:02:15\">2011-06-08T23:02:15</time></a>\n</div>\n<div class=\"content\">Les,\nCheck out what I did - I actually host my site on github thanks to TofuMatt's suggestion.  It works well and I have archives and whatnot.  In fact, most of my links didn't break.  This also means that I don't have to regenerate and sync, since github knows jekyll:\nhttps://github.com/davedash/davedash.github.com</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221596149\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-221596149\" class=\"permalink\"><time datetime=\"2011-06-08T23:56:45\">2011-06-08T23:56:45</time></a>\n</div>\n<div class=\"content\">Hmm... I might have to try that, but on a subdomain like blog.decafbad.com. I have some non-blog stuff here on decafbad.com and don't want to turn the whole thing over to github</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221599902\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.facebook.com/davedash\"><img src=\"http://disqus.com/api/users/avatars/facebook-530160304.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.facebook.com/davedash\">Dave Dash</a>\n</div>\n<a href=\"#comment-221599902\" class=\"permalink\"><time datetime=\"2011-06-08T23:59:33\">2011-06-08T23:59:33</time></a>\n</div>\n<div class=\"content\">It caused a few things to happen - speed up my deploy time and force me to check things into git.  Also my codez build tags and stuff... </div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"comment\" id=\"comment-222164526\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/tiernano.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">tiernano</a>\n</div>\n<a href=\"#comment-222164526\" class=\"permalink\"><time datetime=\"2011-06-09T07:19:54\">2011-06-09T07:19:54</time></a>\n</div>\n<div class=\"content\">So, how did you move directly from Wordpress to Jekyll?  was it simple enough to migrate, or is it a pain?</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-222361710\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.facebook.com/davedash\"><img src=\"http://disqus.com/api/users/avatars/facebook-530160304.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.facebook.com/davedash\">Dave Dash</a>\n</div>\n<a href=\"#comment-222361710\" class=\"permalink\"><time datetime=\"2011-06-09T13:51:27\">2011-06-09T13:51:27</time></a>\n</div>\n<div class=\"content\">There is a migration script for posts.  I may have had to adjust some\nminor things.   Risqué has a migration for comments.  it wasn't too\nbad.</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-222372008\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/tiernano.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">tiernano</a>\n</div>\n<a href=\"#comment-222372008\" class=\"permalink\"><time datetime=\"2011-06-09T14:14:31\">2011-06-09T14:14:31</time></a>\n</div>\n<div class=\"content\">Already using Disqus for comments on my wordpress install... It's the blog data itself that's the problem... Will have a look and play with the migrators...</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-222376509\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-222376509\" class=\"permalink\"><time datetime=\"2011-06-09T14:24:16\">2011-06-09T14:24:16</time></a>\n</div>\n<div class=\"content\">FWIW, the script I tweaked and used for exporting from my Wordpress database is here in github:\nhttps://github.com/lmorchard/blog.decafbad.com/blob/master/_import/wordpress-decafbad.rb\nThe only real pain was getting the SQL query to pick up tags the way I wanted. Otherwise, it's just getting things into text files.</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-222397559\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/tiernano.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">tiernano</a>\n</div>\n<a href=\"#comment-222397559\" class=\"permalink\"><time datetime=\"2011-06-09T15:07:03\">2011-06-09T15:07:03</time></a>\n</div>\n<div class=\"content\">Cool beans man. Will try that out when I get a few min...</div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"comment\" id=\"comment-222453543\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://twitter.com/lroberson\"><img src=\"http://disqus.com/api/users/avatars/twitter-14760653.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://twitter.com/lroberson\">Lee Roberson</a>\n</div>\n<a href=\"#comment-222453543\" class=\"permalink\"><time datetime=\"2011-06-09T16:45:18\">2011-06-09T16:45:18</time></a>\n</div>\n<div class=\"content\">Google Reader keeps getting tricked into thinking several of your posts are new, might be some kind of issue with your pubDate field in RSS, not sure.</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-222455188\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-222455188\" class=\"permalink\"><time datetime=\"2011-06-09T16:48:38\">2011-06-09T16:48:38</time></a>\n</div>\n<div class=\"content\">Yeah, that's my fault. :/ I had initially exported all my posts missing the actual time part of the pubDate, and then just a little while ago re-exported with the proper datestamps\n</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-222460871\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.facebook.com/davedash\"><img src=\"http://disqus.com/api/users/avatars/facebook-530160304.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.facebook.com/davedash\">Dave Dash</a>\n</div>\n<a href=\"#comment-222460871\" class=\"permalink\"><time datetime=\"2011-06-09T16:59:50\">2011-06-09T16:59:50</time></a>\n</div>\n<div class=\"content\">You are worse than Delicious!</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-222463870\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-222463870\" class=\"permalink\"><time datetime=\"2011-06-09T17:05:52\">2011-06-09T17:05:52</time></a>\n</div>\n<div class=\"content\">That's probably my fault, too.</div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"comment\" id=\"comment-222453814\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://twitter.com/lroberson\"><img src=\"http://disqus.com/api/users/avatars/twitter-14760653.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://twitter.com/lroberson\">Lee Roberson</a>\n</div>\n<a href=\"#comment-222453814\" class=\"permalink\"><time datetime=\"2011-06-09T16:45:53\">2011-06-09T16:45:53</time></a>\n</div>\n<div class=\"content\">Whups.</div>\n</li>\n<li class=\"comment\" id=\"comment-222489874\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://trickyco.de\"><img src=\"http://disqus.com/api/users/avatars/lloydhilaiel.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://trickyco.de\">Lloyd Hilaiel</a>\n</div>\n<a href=\"#comment-222489874\" class=\"permalink\"><time datetime=\"2011-06-09T17:45:00\">2011-06-09T17:45:00</time></a>\n</div>\n<div class=\"content\">Have you had much success in customizing the features and display of the injected DISQUS UI?  \nThile there are several knobs in their UI, but the only form of customization that's worked for me is fiddling with external javscript and CSS...  Specifically things like disabling media upload and changing default sort, and threading seem to be no-ops.</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-222505665\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-222505665\" class=\"permalink\"><time datetime=\"2011-06-09T18:12:39\">2011-06-09T18:12:39</time></a>\n</div>\n<div class=\"content\">Hmm... I haven't even bothered to try customizing yet. I just dropped it in and it vaguely matched the rest of my page style, so I left it alone so far</div>\n</li>\n</ul>\n</li>\n<li class=\"comment\" id=\"comment-223875231\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/google-ec18b68fb719cdef24375dc3a0ffb29f.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Craig Maloney</a>\n</div>\n<a href=\"#comment-223875231\" class=\"permalink\"><time datetime=\"2011-06-11T16:00:04\">2011-06-11T16:00:04</time></a>\n</div>\n<div class=\"content\">Oh c'mon, there's nothing in the world more fun than updating Wordpress blog every time someone manages to sneeze wrong and cause an exploit. Sheesh, where's your sense of discipline.</div>\n</li>\n<li class=\"comment\" id=\"comment-231386541\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://marlinspikenestor8435.wordpress.com/\"><img src=\"http://disqus.com/api/users/avatars/jolyonwagg1.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://marlinspikenestor8435.wordpress.com/\">jolyonwagg1</a>\n</div>\n<a href=\"#comment-231386541\" class=\"permalink\"><time datetime=\"2011-06-21T23:52:22\">2011-06-21T23:52:22</time></a>\n</div>\n<div class=\"content\">Love to use disqus, and would like to integrate it onto my Wordpress blog for comments, as it is so user friendly, but I am not to hot though on all the HTML stuff, any advice would be greatly appreciated, cheers from across the pond.</div>\n</li>\n<li class=\"comment\" id=\"comment-286782681\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/ecmanaut.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Johan Sundström</a>\n</div>\n<a href=\"#comment-286782681\" class=\"permalink\"><time datetime=\"2011-08-15T04:23:30\">2011-08-15T04:23:30</time></a>\n</div>\n<div class=\"content\">Your sidebar archive widget was rather cool, layout wise; I bookmarked it as design inspiration, back when it existed.</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-288157091\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com/\">Les Orchard</a>\n</div>\n<a href=\"#comment-288157091\" class=\"permalink\"><time datetime=\"2011-08-16T15:58:00\">2011-08-16T15:58:00</time></a>\n</div>\n<div class=\"content\">Hmm, I should see if I can find a way to revive that thing as a JS widget or something</div>\n</li>\n</ul>\n</li>\n<li class=\"comment\" id=\"comment-300334845\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.hopelesscom.de\"><img src=\"http://disqus.com/api/users/avatars/fallenhitokiri.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.hopelesscom.de\">Timo Zimmermann</a>\n</div>\n<a href=\"#comment-300334845\" class=\"permalink\"><time datetime=\"2011-09-01T12:48:10\">2011-09-01T12:48:10</time></a>\n</div>\n<div class=\"content\">how do you feel about using Disqus for your comments?\nAny problems or the urge to write your own JS based commenting system? I just feel a bit uncomfortable with a 3rd party provider for something important like comments...</div>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-300337460\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/tiernano.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">tiernano</a>\n</div>\n<a href=\"#comment-300337460\" class=\"permalink\"><time datetime=\"2011-09-01T12:54:22\">2011-09-01T12:54:22</time></a>\n</div>\n<div class=\"content\">Personally speaking, i have been using Disqus comments on my WordPress \nblogs for a while now (couple of years) and its working grand! don't have\nto worry too much about Spam, they manage backups, etc. you can even reply to, or delete comments (if spam does get though) by email, so you can manage them on your phone. </div>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n",
    "body": "**TL;DR**: <em>My blog is now produced by [Jekyll][], with comments hosted by [Disqus][].</em>\n\n[jekyll]: https://github.com/mojombo/jekyll\n[disqus]: http://disqus.com/\n\nThis blog has transitioned between a handful of publishing platforms -\nincluding Movable Type, blosxom, and Wordpress. Well, apparently, it's that\ntime again.  I've been toying with making a change again for a few years,\nand finally just got all the pieces together over the past week. This blog\nis now just a pile of static files produced by [Jekyll][], and the comments\nare now hosted by [Disqus][].\n\n[pages]: http://pages.github.com/\n\nThis has a lot of interesting implications:\n\n* I can neglect my server for long periods of time without worrying that my\n  long-outdated copy of Wordpress has been exploited. Really, there's no\n  reason for me to have a full-featured CMS running here.\n\n* I could host my entire blog on Amazon S3 or something similar, and be\n  more neglectful by reducing active code even further. The only crappy\n  thing is that I don't think I can send `decafbad.com` directly to S3, and\n  would need to redirect to a CNAME on a subdomain on `blog.decafbad.com`.\n\n* I can edit my blog directly on GitHub and, assuming I get the webhooks\n  set up, have my server rebuild the HTML automatically on a `git push`. I\n  could probably use [GitHub Pages][pages] and the Jekyll support there,\n  but I suspect I'll be doing some Weird Things that they won't handle.\n  (And probably for good reason.) \n\n* Since Disqus has all my comments now, I can stop worrying about running\n  that code on my server too. I'm a little antsy about putting that in the\n  cloud, but the escape routes are well lit and I should be able to replace\n  it easily if I need to. Self-hosted, JS-include-based comments is a\n  project in my TODO list.\n\n* My writing here is now all stored in individual text files, formatted with\n  Markdown, annotated with YAML metadata, and subject to revision control\n  under git. This combination feels like it has a lot of longevity and\n  potential for survival even beyond this current experiment with [Jekyll][]\n\n* Writing, editing, and publishing entries here can now more closely match\n  my daily reality of living in MacVim and git. It sounds lame, but the\n  notion of swapping over to a Wordpress admin page and working in a\n  browser textarea has often kept me from even starting a post.\n\nBut, some things are broken, now:\n\n* [Fixed][tags] <strike>No more tag pages. I don't think very many humans visit these pages, but\n  a lot of search engines do.</strike>\n\n* [Fixed][tags] <strike>No more tag feeds. I expect to hear about this soon, since this blog gets\n  syndicated to Planet Mozilla via my \"mozilla\" tag feed.</strike>\n\n* No more year / month archive pages or sidebar widget. Not sure how many\n  people actually stroll down memory lane here on my blog, but I do have a\n  [gigantor huge list of all my posts evar][archives], now.\n\n* A general lack of contextual links to related posts and such. Turns out\n  that running the LSI option on Jekyll is completely horrible.\n\n* Regeneration seems less-than-happy in general, and I wish it did\n  conditional regneration. That is, only produce the HTML for things that\n  need it because dependencies have changed. No need to rebake the whole\n  world just because I changed one file.\n\n[tags]: https://github.com/lmorchard/blog.decafbad.com/commit/a79678828ab612c2edb8a8ac3f796199cb922a2e\n\nThe bright side is that there are solutions to all the broken things, and\nnow I have something to tinker with again on my blog.  So, let me know if\nanything else looks broken, and hopefully this will get me spewing some\nmore words out onto this thing soon.\n\n[archives]: http://decafbad.com/blog/archives\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221397880\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\">Les Orchard</a>\n                </div>\n                <a href=\"#comment-221397880\" class=\"permalink\"><time datetime=\"2011-06-08T17:45:54\">2011-06-08T17:45:54</time></a>\n            </div>\n            <div class=\"content\">Testing a comment here on my new post.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221404263\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/bkclements.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">bkclements</a>\n                </div>\n                <a href=\"#comment-221404263\" class=\"permalink\"><time datetime=\"2011-06-08T17:59:01\">2011-06-08T17:59:01</time></a>\n            </div>\n            <div class=\"content\">Hi, did you happen to look at blogofile for similar functionality?\n\nI'm still trying to decide which way to  go. I prefer ReST markup..</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221408933\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\">Les Orchard</a>\n                </div>\n                <a href=\"#comment-221408933\" class=\"permalink\"><time datetime=\"2011-06-08T18:08:26\">2011-06-08T18:08:26</time></a>\n            </div>\n            <div class=\"content\">I've had my eye on Jekyll for awhile now and have a few friends also using it, so I haven't really checked out any other packages. Might be nice to poke around at something based in Python since my Ruby-fu is not strong, but then getting stronger in Ruby is not a bad thing for me.\n\nAnd, for myself, I'm pretty stubbornly rooted in Markdown for all my writing online</div>\n            \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221530821\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/BillSeitz.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">BillSeitz</a>\n                </div>\n                <a href=\"#comment-221530821\" class=\"permalink\"><time datetime=\"2011-06-08T22:01:56\">2011-06-08T22:01:56</time></a>\n            </div>\n            <div class=\"content\">What kind of metadata are you storing in YAML?</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221547147\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\">Les Orchard</a>\n                </div>\n                <a href=\"#comment-221547147\" class=\"permalink\"><time datetime=\"2011-06-08T22:30:10\">2011-06-08T22:30:10</time></a>\n            </div>\n            <div class=\"content\">Pretty simple stuff: Title, tags, etc. \n\nYou can see the source for this post here on github, for example:\n\nhttps://raw.github.com/lmorchard/blog.decafbad.com/master/_posts/2011-06-08-moved-to-jekyll.markdown\n\nI had once-upon-a-time thought about storing posts as RFC 822 messages, with the metadata in headers like email messages. But, this \"YAML front matter\" approach of Jekyll is a bit more flexible</div>\n            \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221561143\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.facebook.com/davedash\"><img src=\"http://disqus.com/api/users/avatars/facebook-530160304.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.facebook.com/davedash\">Dave Dash</a>\n                </div>\n                <a href=\"#comment-221561143\" class=\"permalink\"><time datetime=\"2011-06-08T23:02:15\">2011-06-08T23:02:15</time></a>\n            </div>\n            <div class=\"content\">Les,\n\nCheck out what I did - I actually host my site on github thanks to TofuMatt's suggestion.  It works well and I have archives and whatnot.  In fact, most of my links didn't break.  This also means that I don't have to regenerate and sync, since github knows jekyll:\n\nhttps://github.com/davedash/davedash.github.com</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221596149\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\">Les Orchard</a>\n                </div>\n                <a href=\"#comment-221596149\" class=\"permalink\"><time datetime=\"2011-06-08T23:56:45\">2011-06-08T23:56:45</time></a>\n            </div>\n            <div class=\"content\">Hmm... I might have to try that, but on a subdomain like blog.decafbad.com. I have some non-blog stuff here on decafbad.com and don't want to turn the whole thing over to github</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221599902\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.facebook.com/davedash\"><img src=\"http://disqus.com/api/users/avatars/facebook-530160304.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.facebook.com/davedash\">Dave Dash</a>\n                </div>\n                <a href=\"#comment-221599902\" class=\"permalink\"><time datetime=\"2011-06-08T23:59:33\">2011-06-08T23:59:33</time></a>\n            </div>\n            <div class=\"content\">It caused a few things to happen - speed up my deploy time and force me to check things into git.  Also my codez build tags and stuff... </div>\n            \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        <li class=\"comment\" id=\"comment-222164526\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/tiernano.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">tiernano</a>\n                </div>\n                <a href=\"#comment-222164526\" class=\"permalink\"><time datetime=\"2011-06-09T07:19:54\">2011-06-09T07:19:54</time></a>\n            </div>\n            <div class=\"content\">So, how did you move directly from Wordpress to Jekyll?  was it simple enough to migrate, or is it a pain?</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-222361710\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.facebook.com/davedash\"><img src=\"http://disqus.com/api/users/avatars/facebook-530160304.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.facebook.com/davedash\">Dave Dash</a>\n                </div>\n                <a href=\"#comment-222361710\" class=\"permalink\"><time datetime=\"2011-06-09T13:51:27\">2011-06-09T13:51:27</time></a>\n            </div>\n            <div class=\"content\">There is a migration script for posts.  I may have had to adjust some\r\nminor things.   Risqué has a migration for comments.  it wasn't too\r\nbad.</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-222372008\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/tiernano.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">tiernano</a>\n                </div>\n                <a href=\"#comment-222372008\" class=\"permalink\"><time datetime=\"2011-06-09T14:14:31\">2011-06-09T14:14:31</time></a>\n            </div>\n            <div class=\"content\">Already using Disqus for comments on my wordpress install... It's the blog data itself that's the problem... Will have a look and play with the migrators...</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-222376509\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\">Les Orchard</a>\n                </div>\n                <a href=\"#comment-222376509\" class=\"permalink\"><time datetime=\"2011-06-09T14:24:16\">2011-06-09T14:24:16</time></a>\n            </div>\n            <div class=\"content\">FWIW, the script I tweaked and used for exporting from my Wordpress database is here in github:\n\nhttps://github.com/lmorchard/blog.decafbad.com/blob/master/_import/wordpress-decafbad.rb\n\nThe only real pain was getting the SQL query to pick up tags the way I wanted. Otherwise, it's just getting things into text files.</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-222397559\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/tiernano.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">tiernano</a>\n                </div>\n                <a href=\"#comment-222397559\" class=\"permalink\"><time datetime=\"2011-06-09T15:07:03\">2011-06-09T15:07:03</time></a>\n            </div>\n            <div class=\"content\">Cool beans man. Will try that out when I get a few min...</div>\n            \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        <li class=\"comment\" id=\"comment-222453543\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://twitter.com/lroberson\"><img src=\"http://disqus.com/api/users/avatars/twitter-14760653.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://twitter.com/lroberson\">Lee Roberson</a>\n                </div>\n                <a href=\"#comment-222453543\" class=\"permalink\"><time datetime=\"2011-06-09T16:45:18\">2011-06-09T16:45:18</time></a>\n            </div>\n            <div class=\"content\">Google Reader keeps getting tricked into thinking several of your posts are new, might be some kind of issue with your pubDate field in RSS, not sure.</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-222455188\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\">Les Orchard</a>\n                </div>\n                <a href=\"#comment-222455188\" class=\"permalink\"><time datetime=\"2011-06-09T16:48:38\">2011-06-09T16:48:38</time></a>\n            </div>\n            <div class=\"content\">Yeah, that's my fault. :/ I had initially exported all my posts missing the actual time part of the pubDate, and then just a little while ago re-exported with the proper datestamps\n\n</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-222460871\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.facebook.com/davedash\"><img src=\"http://disqus.com/api/users/avatars/facebook-530160304.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.facebook.com/davedash\">Dave Dash</a>\n                </div>\n                <a href=\"#comment-222460871\" class=\"permalink\"><time datetime=\"2011-06-09T16:59:50\">2011-06-09T16:59:50</time></a>\n            </div>\n            <div class=\"content\">You are worse than Delicious!</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-222463870\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\">Les Orchard</a>\n                </div>\n                <a href=\"#comment-222463870\" class=\"permalink\"><time datetime=\"2011-06-09T17:05:52\">2011-06-09T17:05:52</time></a>\n            </div>\n            <div class=\"content\">That's probably my fault, too.</div>\n            \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        <li class=\"comment\" id=\"comment-222453814\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://twitter.com/lroberson\"><img src=\"http://disqus.com/api/users/avatars/twitter-14760653.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://twitter.com/lroberson\">Lee Roberson</a>\n                </div>\n                <a href=\"#comment-222453814\" class=\"permalink\"><time datetime=\"2011-06-09T16:45:53\">2011-06-09T16:45:53</time></a>\n            </div>\n            <div class=\"content\">Whups.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-222489874\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://trickyco.de\"><img src=\"http://disqus.com/api/users/avatars/lloydhilaiel.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://trickyco.de\">Lloyd Hilaiel</a>\n                </div>\n                <a href=\"#comment-222489874\" class=\"permalink\"><time datetime=\"2011-06-09T17:45:00\">2011-06-09T17:45:00</time></a>\n            </div>\n            <div class=\"content\">Have you had much success in customizing the features and display of the injected DISQUS UI?  \n\nThile there are several knobs in their UI, but the only form of customization that's worked for me is fiddling with external javscript and CSS...  Specifically things like disabling media upload and changing default sort, and threading seem to be no-ops.</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-222505665\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\">Les Orchard</a>\n                </div>\n                <a href=\"#comment-222505665\" class=\"permalink\"><time datetime=\"2011-06-09T18:12:39\">2011-06-09T18:12:39</time></a>\n            </div>\n            <div class=\"content\">Hmm... I haven't even bothered to try customizing yet. I just dropped it in and it vaguely matched the rest of my page style, so I left it alone so far</div>\n            \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        <li class=\"comment\" id=\"comment-223875231\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/google-ec18b68fb719cdef24375dc3a0ffb29f.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Craig Maloney</a>\n                </div>\n                <a href=\"#comment-223875231\" class=\"permalink\"><time datetime=\"2011-06-11T16:00:04\">2011-06-11T16:00:04</time></a>\n            </div>\n            <div class=\"content\">Oh c'mon, there's nothing in the world more fun than updating Wordpress blog every time someone manages to sneeze wrong and cause an exploit. Sheesh, where's your sense of discipline.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-231386541\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://marlinspikenestor8435.wordpress.com/\"><img src=\"http://disqus.com/api/users/avatars/jolyonwagg1.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://marlinspikenestor8435.wordpress.com/\">jolyonwagg1</a>\n                </div>\n                <a href=\"#comment-231386541\" class=\"permalink\"><time datetime=\"2011-06-21T23:52:22\">2011-06-21T23:52:22</time></a>\n            </div>\n            <div class=\"content\">Love to use disqus, and would like to integrate it onto my Wordpress blog for comments, as it is so user friendly, but I am not to hot though on all the HTML stuff, any advice would be greatly appreciated, cheers from across the pond.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-286782681\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/ecmanaut.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Johan Sundström</a>\n                </div>\n                <a href=\"#comment-286782681\" class=\"permalink\"><time datetime=\"2011-08-15T04:23:30\">2011-08-15T04:23:30</time></a>\n            </div>\n            <div class=\"content\">Your sidebar archive widget was rather cool, layout wise; I bookmarked it as design inspiration, back when it existed.</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-288157091\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\"><img src=\"http://disqus.com/api/users/avatars/lmorchard.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com/\">Les Orchard</a>\n                </div>\n                <a href=\"#comment-288157091\" class=\"permalink\"><time datetime=\"2011-08-16T15:58:00\">2011-08-16T15:58:00</time></a>\n            </div>\n            <div class=\"content\">Hmm, I should see if I can find a way to revive that thing as a JS widget or something</div>\n            \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        <li class=\"comment\" id=\"comment-300334845\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.hopelesscom.de\"><img src=\"http://disqus.com/api/users/avatars/fallenhitokiri.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.hopelesscom.de\">Timo Zimmermann</a>\n                </div>\n                <a href=\"#comment-300334845\" class=\"permalink\"><time datetime=\"2011-09-01T12:48:10\">2011-09-01T12:48:10</time></a>\n            </div>\n            <div class=\"content\">how do you feel about using Disqus for your comments?\nAny problems or the urge to write your own JS based commenting system? I just feel a bit uncomfortable with a 3rd party provider for something important like comments...</div>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-300337460\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/tiernano.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">tiernano</a>\n                </div>\n                <a href=\"#comment-300337460\" class=\"permalink\"><time datetime=\"2011-09-01T12:54:22\">2011-09-01T12:54:22</time></a>\n            </div>\n            <div class=\"content\">Personally speaking, i have been using Disqus comments on my WordPress \nblogs for a while now (couple of years) and its working grand! don't have\n to worry too much about Spam, they manage backups, etc. you can even reply to, or delete comments (if spam does get though) by email, so you can manage them on your phone. </div>\n            \n        </li>\n    \n        </ul>\n    \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2011",
    "path": "2011/06/08/moved-to-jekyll"
  },
  {
    "comments_archived": true,
    "date": "2010-07-05T23:00:56.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "firefox",
      "google",
      "python",
      "entries",
      "mozilla",
      "sync",
      "appengine"
    ],
    "title": "Firefox Sync server on Google App Engine",
    "wordpress_id": 1937,
    "wordpress_slug": "firefox-sync-server-on-google-app-engine",
    "wordpress_url": "http://decafbad.com/blog/?p=1937",
    "year": "2010",
    "month": "07",
    "day": "05",
    "isDir": false,
    "slug": "firefox-sync-server-on-google-app-engine",
    "postName": "2010-07-05-firefox-sync-server-on-google-app-engine",
    "html": "<p><em><strong>TL;DR:</strong> <a href=\"http://github.com/lmorchard/firefox-sync-appengine\">I built an implementation</a> of the <a href=\"https://wiki.mozilla.org/Labs/Weave/Sync/1.0/API\">Firefox Sync server API</a> for <a href=\"http://appengine.google.com/\">Google App Engine</a>.</em></p>\n<p><a href=\"http://www.mozilla.com/en-US/firefox/sync/\" style=\"float: right; padding: 0 0 0em 0em; display: block; text-decoration: none; border: none\"><img src=\"http://mozcom-cdn.mozilla.net/img/firefox/sync/sync-background.png\" style=\"border: none\" /></a></p>\n<p>To celebrate <a href=\"http://en.wikipedia.org/wiki/Independence_Day_%28United_States%29\">Independence Day</a>, I figured I might take a shot at liberating <a href=\"http://www.mozilla.com/en-US/firefox/sync/\">Firefox Sync</a> from the tyranny of <a href=\"https://services.mozilla.com/\">Mozilla&#39;s servers</a>. </p>\n<p>Thus, over the past few days, I&#39;ve <a href=\"http://github.com/lmorchard/firefox-sync-appengine\">built a sync server</a> using the <a href=\"https://wiki.mozilla.org/Labs/Weave/Sync/1.0/API\">1.0 Sync API</a>, hosted on <a href=\"http://appengine.google.com/\">Google App Engine</a>.</p>\n<p>I lied about the <em>tyranny</em> thing, though—I just wanted to say something clever about the holiday. In reality, with respect to <a href=\"http://www.mozilla.com/en-US/firefox/sync/\">Firefox Sync</a>, Mozilla has done all of the following:</p>\n<ol>\n<li>Published <a href=\"https://wiki.mozilla.org/Labs/Weave/Sync/1.0/API\">the Sync API spec</a>;</li>\n<li>Released <a href=\"http://hg.mozilla.org/services/sync-server/\">the source code for the server used in-house</a>;</li>\n<li>Explicitly included the option to use a custom server when setting up sync in the browser.</li>\n</ol>\n<p>This means that, although Mozilla offers servers to go along with <a href=\"http://www.mozilla.com/en-US/firefox/sync/\">Firefox Sync</a>, you&#39;re totally free to take your data elsewhere. Since your sync data is encrypted and practically opaque to the server, there&#39;s no direct profit for Mozilla in offering free sync hosting—not even through any clandestine data mining for devious purposes. It&#39;s just that sync makes Firefox a better browser, and <em>somebody</em> has to run some servers to make it work.</p>\n<p>So, there&#39;s every incentive to make it easy for you to switch sync providers and <em>stop freeloading</em> on Mozilla&#39;s servers. Building a server on <a href=\"http://appengine.google.com/\">Google App Engine</a> means I can freeload on <em>Google&#39;s</em> servers!</p>\n<p>I kid, of course. No one&#39;s really complaining about freeloaders, and App Engine has quotas in place to head off any serious mooching—which is why I&#39;m not telling you where to find <em>my</em> sync server deployed on Google App Engine, by the way. </p>\n<p>No, I did this because:</p>\n<ul>\n<li>Firefox Sync and Google App Engine are interesting and important technologies;</li>\n<li>I&#39;ve already done a bit of work on the PHP-based Firefox Sync server at Mozilla;</li>\n<li>I really wanted to take a break from PHP and spend some time with my old friend Python.</li>\n</ul>\n<p>There are, of course, a number of bugs in this server. But, it seems to be working between a number of machines and browser profiles I have at home. Things are really in need of optimization, it suffers from my inexperience with App Engine, and I keep running into those aforementioned App Engine resource limits—especially when updating or deleting large numbers of items (ie. 1000&#39;s to 10000&#39;s of items).</p>\n<p><a href=\"http://github.com/lmorchard/firefox-sync-appengine\"><em>Pull requests and issue reports on GitHub are welcome!</em></a></p>\n<p>A next step I&#39;d like to take with this thing is to revisit another old friend, the <a href=\"http://www.decafbad.com/twiki/bin/view/Main/DesktopWebAppServer\">desktop web app server</a>. (Also known as the <a href=\"http://www.scripting.com/davenet/2001/01/04/desktopWebsites.html#4\">desktop website</a>.) It seems to me that it would be interesting to scale this server down to a household appliance—say, just for use by my wife and I.</p>\n<p>I&#39;d be especially happy if the work I&#39;m doing for a Google-hosted app could be self-hosted at home. Seeing as the development environment for App Engine runs on my laptop, I&#39;m willing to bet I can hack the whole shebang into a simple, special-purpose app to download and double-click on a home desktop PC for use as your sync hub.</p>\n<p>Anyway, <a href=\"http://github.com/lmorchard/firefox-sync-appengine\">check it out</a> and let me know what you think.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221088097\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://coffeeonthekeyboard.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8371744716a9335eb3dcae228fd9d996&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://coffeeonthekeyboard.com/\">James Socol</a>\n</div>\n<a href=\"#comment-221088097\" class=\"permalink\"><time datetime=\"2010-07-06T01:28:02\">2010-07-06T01:28:02</time></a>\n</div>\n<div class=\"content\"><p>Assuming you already had a network and a Mac Mini or something at home, it would be pretty interesting to run your own small Sync server just to keep your home computers together. Maybe even use localtunnel for when you're away.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088102\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://morgamic.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=65b020128dafcdb4ef1e5e53c00ed37a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://morgamic.com/\">Mike</a>\n</div>\n<a href=\"#comment-221088102\" class=\"permalink\"><time datetime=\"2010-07-06T01:36:37\">2010-07-06T01:36:37</time></a>\n</div>\n<div class=\"content\"><p>You are a real-life hero!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088105\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088105\" class=\"permalink\"><time datetime=\"2010-07-06T01:52:00\">2010-07-06T01:52:00</time></a>\n</div>\n<div class=\"content\"><p>@James: Yup, exactly that. Maybe even roll in some SSL and UPnP port forwarding for easier setup behind a home router. And, if there were a Windows version, it could run on that cruddy desktop back in the spare room.</p>\n<p>@Mike: Naw... this guy is the real hero, <a href=\"http://twitter.com/johnolilly/status/17765272082\" rel=\"nofollow\">even John Lilly agrees</a>!</p>\n<p><a href=\"http://blogs.denverpost.com/celebritybull/2008/09/09/greatest-american-hero-coming-to-the-big-screen/\" rel=\"nofollow\"><img src=\"http://blogs.denverpost.com/celebritybull/files/2008/09/gah.jpg\" alt=\"Greatest American Hero\" title=\"\" /></a></p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088106\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d18681d9fa9b5d50b209a2a926dfe7d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Crash</a>\n</div>\n<a href=\"#comment-221088106\" class=\"permalink\"><time datetime=\"2010-07-06T09:20:54\">2010-07-06T09:20:54</time></a>\n</div>\n<div class=\"content\"><p>Is there already a App Id for this tool?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088107\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088107\" class=\"permalink\"><time datetime=\"2010-07-06T10:18:57\">2010-07-06T10:18:57</time></a>\n</div>\n<div class=\"content\"><p>@Crash: Sure, there's an app ID for <em>my</em> instance of this sync server. But, as I said in the blog post, I'm not sharing it. At least, not until or unless I get the quota usage down to a point that I wouldn't exhaust the free hosting limits.</p>\n<p>It's pretty easy to deploy your own sync server on AppEngine with the source, though.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088108\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=85283c3d40ca2b1a70a0f877a570107c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Peter Petrov</a>\n</div>\n<a href=\"#comment-221088108\" class=\"permalink\"><time datetime=\"2010-07-06T13:18:11\">2010-07-06T13:18:11</time></a>\n</div>\n<div class=\"content\"><p>@Leslie: The app ID of your instance is visible in app.yaml, so you've shared it anyway :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088113\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088113\" class=\"permalink\"><time datetime=\"2010-07-06T17:18:47\">2010-07-06T17:18:47</time></a>\n</div>\n<div class=\"content\"><p>@Peter hah! Right you are! But, at least you had to look at the source of the app first to figure that out :) That is mostly the point of this blog entry after all. Anyone who does that and then uses my installation anyway will probably be sad when I regularly blow away data and eventually make it invite only</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088115\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4fd1acfa0c7bd0767a90a30fbba73bfb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tobias</a>\n</div>\n<a href=\"#comment-221088115\" class=\"permalink\"><time datetime=\"2010-07-07T00:24:41\">2010-07-07T00:24:41</time></a>\n</div>\n<div class=\"content\"><p>Neat! TyphoonAE http://typhoonae.googlecode.com might help you to build your household appliance.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088117\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3e7e975f0fa432f4ae6604f72c132309&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Kumar McMillan</a>\n</div>\n<a href=\"#comment-221088117\" class=\"permalink\"><time datetime=\"2010-07-07T20:59:25\">2010-07-07T20:59:25</time></a>\n</div>\n<div class=\"content\"><p>Hey Les, this is super cool!  Google App Engine's Datastore API is still very shaky though.  In fact, it's been so bad lately that I've been considering porting one of my heavily used apps over to something else.  Thankfully, this post suggests that fixing the Datastore is their top priority: http://googleappengine.blogspot.com/2010/06/datastore-performance-growing-pains.html</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088119\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://home.kairo.at/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=59d914ad47e5c3fcd4c89668adcd43a2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://home.kairo.at/blog/\">Robert Kaiser</a>\n</div>\n<a href=\"#comment-221088119\" class=\"permalink\"><time datetime=\"2010-07-07T21:21:51\">2010-07-07T21:21:51</time></a>\n</div>\n<div class=\"content\"><p>Well, I actually feel more comfortable with my data being on Mozilla servers than on Google servers - even with the decreased trust I have in the Mozilla organization, I'd trust it more than Google any day! ;-)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088120\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://blog.chrisarndt.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02653ae22d36044e6870c17cf3d5a005&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://blog.chrisarndt.de\">Chris Arndt</a>\n</div>\n<a href=\"#comment-221088120\" class=\"permalink\"><time datetime=\"2010-09-28T11:06:55\">2010-09-28T11:06:55</time></a>\n</div>\n<div class=\"content\"><p>Instead of porting GAE to your desktop, why don't you just port your app to plain Django? Django should run off your desktop with no problems.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<em><strong>TL;DR:</strong> [I built an implementation][impl] of the [Firefox Sync server API][api10] for [Google App Engine][appengine].</em>\r\n\r\n[impl]: http://github.com/lmorchard/firefox-sync-appengine\r\n[api10]: https://wiki.mozilla.org/Labs/Weave/Sync/1.0/API\r\n[appengine]: http://appengine.google.com/\r\n\r\n<a href=\"http://www.mozilla.com/en-US/firefox/sync/\" style=\"float: right; padding: 0 0 0em 0em; display: block; text-decoration: none; border: none\"><img src=\"http://mozcom-cdn.mozilla.net/img/firefox/sync/sync-background.png\" style=\"border: none\" /></a>\r\n\r\nTo celebrate [Independence Day][july4], I figured I might take a shot at liberating [Firefox Sync][sync] from the tyranny of [Mozilla's servers][servers]. \r\n\r\nThus, over the past few days, I've [built a sync server][impl] using the [1.0 Sync API][api10], hosted on [Google App Engine][appengine].\r\n\r\nI lied about the *tyranny* thing, though—I just wanted to say something clever about the holiday. In reality, with respect to [Firefox Sync][sync], Mozilla has done all of the following:\r\n\r\n1. Published [the Sync API spec][api10];\r\n2. Released [the source code for the server used in-house][sync-server];\r\n3. Explicitly included the option to use a custom server when setting up sync in the browser.\r\n\r\nThis means that, although Mozilla offers servers to go along with [Firefox Sync][sync], you're totally free to take your data elsewhere. Since your sync data is encrypted and practically opaque to the server, there's no direct profit for Mozilla in offering free sync hosting—not even through any clandestine data mining for devious purposes. It's just that sync makes Firefox a better browser, and *somebody* has to run some servers to make it work.\r\n\r\nSo, there's every incentive to make it easy for you to switch sync providers and *stop freeloading* on Mozilla's servers. Building a server on [Google App Engine][appengine] means I can freeload on *Google's* servers!\r\n\r\nI kid, of course. No one's really complaining about freeloaders, and App Engine has quotas in place to head off any serious mooching—which is why I'm not telling you where to find *my* sync server deployed on Google App Engine, by the way. \r\n\r\nNo, I did this because:\r\n\r\n* Firefox Sync and Google App Engine are interesting and important technologies;\r\n* I've already done a bit of work on the PHP-based Firefox Sync server at Mozilla;\r\n* I really wanted to take a break from PHP and spend some time with my old friend Python.\r\n\r\nThere are, of course, a number of bugs in this server. But, it seems to be working between a number of machines and browser profiles I have at home. Things are really in need of optimization, it suffers from my inexperience with App Engine, and I keep running into those aforementioned App Engine resource limits—especially when updating or deleting large numbers of items (ie. 1000's to 10000's of items).\r\n\r\n[*Pull requests and issue reports on GitHub are welcome!*][impl]\r\n\r\nA next step I'd like to take with this thing is to revisit another old friend, the [desktop web app server][desktopserver]. (Also known as the [desktop website][dw].) It seems to me that it would be interesting to scale this server down to a household appliance—say, just for use by my wife and I.\r\n\r\nI'd be especially happy if the work I'm doing for a Google-hosted app could be self-hosted at home. Seeing as the development environment for App Engine runs on my laptop, I'm willing to bet I can hack the whole shebang into a simple, special-purpose app to download and double-click on a home desktop PC for use as your sync hub.\r\n\r\nAnyway, [check it out][impl] and let me know what you think.\r\n\r\n[dw]: http://www.scripting.com/davenet/2001/01/04/desktopWebsites.html#4\r\n[dave]: http://www.scripting.com/davenet/1997/09/14/FractionalHorsepowerHTTPSe.html\r\n[desktopserver]: http://www.decafbad.com/twiki/bin/view/Main/DesktopWebAppServer\r\n[sync-server]: http://hg.mozilla.org/services/sync-server/\r\n[july4]: http://en.wikipedia.org/wiki/Independence_Day_%28United_States%29\r\n[sync]: http://www.mozilla.com/en-US/firefox/sync/\r\n[servers]: https://services.mozilla.com/\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221088097\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://coffeeonthekeyboard.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8371744716a9335eb3dcae228fd9d996&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://coffeeonthekeyboard.com/\">James Socol</a>\r\n                </div>\r\n                <a href=\"#comment-221088097\" class=\"permalink\"><time datetime=\"2010-07-06T01:28:02\">2010-07-06T01:28:02</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Assuming you already had a network and a Mac Mini or something at home, it would be pretty interesting to run your own small Sync server just to keep your home computers together. Maybe even use localtunnel for when you're away.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088102\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://morgamic.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=65b020128dafcdb4ef1e5e53c00ed37a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://morgamic.com/\">Mike</a>\r\n                </div>\r\n                <a href=\"#comment-221088102\" class=\"permalink\"><time datetime=\"2010-07-06T01:36:37\">2010-07-06T01:36:37</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>You are a real-life hero!</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088105\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221088105\" class=\"permalink\"><time datetime=\"2010-07-06T01:52:00\">2010-07-06T01:52:00</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>@James: Yup, exactly that. Maybe even roll in some SSL and UPnP port forwarding for easier setup behind a home router. And, if there were a Windows version, it could run on that cruddy desktop back in the spare room.</p>\r\n\r\n<p>@Mike: Naw... this guy is the real hero, <a href=\"http://twitter.com/johnolilly/status/17765272082\" rel=\"nofollow\">even John Lilly agrees</a>!</p>\r\n\r\n<p><a href=\"http://blogs.denverpost.com/celebritybull/2008/09/09/greatest-american-hero-coming-to-the-big-screen/\" rel=\"nofollow\"><img src=\"http://blogs.denverpost.com/celebritybull/files/2008/09/gah.jpg\" alt=\"Greatest American Hero\" title=\"\" /></a></p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088106\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d18681d9fa9b5d50b209a2a926dfe7d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Crash</a>\r\n                </div>\r\n                <a href=\"#comment-221088106\" class=\"permalink\"><time datetime=\"2010-07-06T09:20:54\">2010-07-06T09:20:54</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Is there already a App Id for this tool?</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088107\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221088107\" class=\"permalink\"><time datetime=\"2010-07-06T10:18:57\">2010-07-06T10:18:57</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>@Crash: Sure, there's an app ID for <em>my</em> instance of this sync server. But, as I said in the blog post, I'm not sharing it. At least, not until or unless I get the quota usage down to a point that I wouldn't exhaust the free hosting limits.</p>\r\n\r\n<p>It's pretty easy to deploy your own sync server on AppEngine with the source, though.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088108\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=85283c3d40ca2b1a70a0f877a570107c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Peter Petrov</a>\r\n                </div>\r\n                <a href=\"#comment-221088108\" class=\"permalink\"><time datetime=\"2010-07-06T13:18:11\">2010-07-06T13:18:11</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>@Leslie: The app ID of your instance is visible in app.yaml, so you've shared it anyway :)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088113\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221088113\" class=\"permalink\"><time datetime=\"2010-07-06T17:18:47\">2010-07-06T17:18:47</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>@Peter hah! Right you are! But, at least you had to look at the source of the app first to figure that out :) That is mostly the point of this blog entry after all. Anyone who does that and then uses my installation anyway will probably be sad when I regularly blow away data and eventually make it invite only</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088115\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4fd1acfa0c7bd0767a90a30fbba73bfb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Tobias</a>\r\n                </div>\r\n                <a href=\"#comment-221088115\" class=\"permalink\"><time datetime=\"2010-07-07T00:24:41\">2010-07-07T00:24:41</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Neat! TyphoonAE http://typhoonae.googlecode.com might help you to build your household appliance.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088117\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3e7e975f0fa432f4ae6604f72c132309&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Kumar McMillan</a>\r\n                </div>\r\n                <a href=\"#comment-221088117\" class=\"permalink\"><time datetime=\"2010-07-07T20:59:25\">2010-07-07T20:59:25</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Hey Les, this is super cool!  Google App Engine's Datastore API is still very shaky though.  In fact, it's been so bad lately that I've been considering porting one of my heavily used apps over to something else.  Thankfully, this post suggests that fixing the Datastore is their top priority: http://googleappengine.blogspot.com/2010/06/datastore-performance-growing-pains.html</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088119\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://home.kairo.at/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=59d914ad47e5c3fcd4c89668adcd43a2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://home.kairo.at/blog/\">Robert Kaiser</a>\r\n                </div>\r\n                <a href=\"#comment-221088119\" class=\"permalink\"><time datetime=\"2010-07-07T21:21:51\">2010-07-07T21:21:51</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Well, I actually feel more comfortable with my data being on Mozilla servers than on Google servers - even with the decreased trust I have in the Mozilla organization, I'd trust it more than Google any day! ;-)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221088120\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://blog.chrisarndt.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02653ae22d36044e6870c17cf3d5a005&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://blog.chrisarndt.de\">Chris Arndt</a>\r\n                </div>\r\n                <a href=\"#comment-221088120\" class=\"permalink\"><time datetime=\"2010-09-28T11:06:55\">2010-09-28T11:06:55</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Instead of porting GAE to your desktop, why don't you just port your app to plain Django? Django should run off your desktop with no problems.</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2010",
    "path": "2010/07/05/firefox-sync-server-on-google-app-engine",
    "thumbnail": "http://mozcom-cdn.mozilla.net/img/firefox/sync/sync-background.png"
  },
  {
    "comments_archived": true,
    "date": "2010-06-22T22:16:24.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "js",
      "entries",
      "mozilla",
      "byob"
    ],
    "title": "Case Study: Building a Bookmark Management UI for Mozilla's BYOB",
    "wordpress_id": 1935,
    "wordpress_slug": "case-study-building-a-bookmark-management-ui-for-mozillas-byob",
    "wordpress_url": "http://decafbad.com/blog/?p=1935",
    "year": "2010",
    "month": "06",
    "day": "22",
    "isDir": false,
    "slug": "case-study-building-a-bookmark-management-ui-for-mozillas-byob",
    "postName": "2010-06-22-case-study-building-a-bookmark-management-ui-for-mozillas-byob",
    "html": "<p><em><strong>TL;DR:</strong> I just wrote <a href=\"http://decafbad.com/2010/06/byob-bookmarks-ui/\">a <strong>long</strong> case-study about my process in building a bookmark management feature</a> for Mozilla&#39;s <a href=\"http://byob.mozilla.com/\">Build Your Own Browser</a> web application.</em></p>\n<p><a href=\"http://decafbad.com/2010/06/byob-bookmarks-ui/\"><img src=\"http://decafbad.com/2010/06/byob-bookmarks-ui/img/bookmarks.png\" width=\"600\" /></a></p>\n<p>So, remember that <a href=\"http://decafbad.com/blog/2010/06/07/tinderbox-article-tutorial\">tutorial I wrote about writing an article in Tinderbox</a>? I&#39;d mentioned that it was a digression from another, different article. </p>\n<p>Well, I just finished a first draft of that article: </p>\n<p><a href=\"http://decafbad.com/2010/06/byob-bookmarks-ui/\">It&#39;s a case study about building a bookmark management feature for Mozilla&#39;s BYOB</a>.</p>\n<p>Light on code but heavy on narration, it&#39;s about what I did and what I was thinking while I did it. There are links to the end product for reference, but it isn&#39;t a demonstration of some new trick. Rather, it&#39;s a look at my process as a whole.</p>\n<p>I wrote this, in part, for myself: The writing has helped me review things. But, I&#39;m hoping someone else reads it, and then picks up something new or can offer some interesting critique in return.</p>\n<p>And, because I&#39;m curious and like looking behind the scenes, I&#39;d love to see this kind of write-up from more webdevs. There don&#39;t seem to be a lot of detailed case studies versus quick one-shot tutorials on isolated techniques. It&#39;s probably because the writing is time-consuming, as is the reading. It&#39;s not in the genre of bite-sized attractions optimized for promoting blog traffic, but I&#39;d like to see more of them all the same.</p>\n",
    "body": "<em><strong>TL;DR:</strong> I just wrote [a **long** case-study about my process in building a bookmark management feature][article] for Mozilla's [Build Your Own Browser][byob] web application.</em>\r\n\r\n[<img src=\"http://decafbad.com/2010/06/byob-bookmarks-ui/img/bookmarks.png\" width=\"600\" />][article]\r\n\r\nSo, remember that [tutorial I wrote about writing an article in Tinderbox][tinderbox]? I'd mentioned that it was a digression from another, different article. \r\n\r\nWell, I just finished a first draft of that article: \r\n\r\n[It's a case study about building a bookmark management feature for Mozilla's BYOB][article].\r\n\r\nLight on code but heavy on narration, it's about what I did and what I was thinking while I did it. There are links to the end product for reference, but it isn't a demonstration of some new trick. Rather, it's a look at my process as a whole.\r\n\r\nI wrote this, in part, for myself: The writing has helped me review things. But, I'm hoping someone else reads it, and then picks up something new or can offer some interesting critique in return.\r\n\r\nAnd, because I'm curious and like looking behind the scenes, I'd love to see this kind of write-up from more webdevs. There don't seem to be a lot of detailed case studies versus quick one-shot tutorials on isolated techniques. It's probably because the writing is time-consuming, as is the reading. It's not in the genre of bite-sized attractions optimized for promoting blog traffic, but I'd like to see more of them all the same.\r\n\r\n[tinderbox]: http://decafbad.com/blog/2010/06/07/tinderbox-article-tutorial\r\n[byob]: http://byob.mozilla.com/\r\n[article]: http://decafbad.com/2010/06/byob-bookmarks-ui/\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2010",
    "path": "2010/06/22/case-study-building-a-bookmark-management-ui-for-mozillas-byob",
    "thumbnail": "http://decafbad.com/2010/06/byob-bookmarks-ui/img/bookmarks.png"
  },
  {
    "comments_archived": true,
    "date": "2010-06-07T04:41:03.000Z",
    "layout": "post",
    "tags": [
      "metablogging",
      "webdev",
      "writing",
      "tinderbox",
      "entries",
      "html"
    ],
    "title": "Using Tinderbox to write articles for the web",
    "wordpress_id": 1925,
    "wordpress_slug": "tinderbox-article-tutorial",
    "wordpress_url": "http://decafbad.com/blog/?p=1925",
    "year": "2010",
    "month": "06",
    "day": "07",
    "isDir": false,
    "slug": "tinderbox-article-tutorial",
    "postName": "2010-06-07-tinderbox-article-tutorial",
    "html": "<p><em><strong>TL;DR:</strong> I just put together <a href=\"http://decafbad.com/2010/06/tinderbox-article-tutorial/article.html\">a tutorial about writing an article in HTML</a> using <a href=\"http://www.eastgate.com/Tinderbox/\">Tinderbox</a> from <a href=\"http://www.eastgate.com/\">Eastgate Systems, Inc</a>.</em></p>\n<p><em><strong>Update:</strong></em> There&#39;s a <a href=\"http://pc.de/pages/tinderbox-tutorial-be\">Belorussian</a> translation of this post provided by <a href=\"http://pc.de/\">PC</a> - very cool!</p>\n<p><img src=\"http://farm4.static.flickr.com/3105/2476581071_7a55c565dd.jpg\" alt=\"tinderboxicon\"></p>\n<p><em>Tinderbox Icon by Bryan Bell, via <a href=\"http://www.flickr.com/photos/factoryjoe/2476581071/\">flickr.com/photos/factoryjoe</a></em></p>\n<p>I&#39;ve been toying with a set of writing topics to get my blog going again, apropos of <a href=\"http://decafbad.com/blog/2010/03/10/pondering-the-cobwebs\">my notion of writing for myself</a>. But, I like to write at length and have finally decided that life&#39;s too short to write in browser <code>&lt;textarea&gt;</code>&#39;s, no matter how cleverly augmented.</p>\n<p>I did buy <a href=\"http://www.red-sweater.com/marsedit/\">MarsEdit 3</a>, which is a fine app for dashing off short entries. But, for longer things, I found myself doing the actual writing elsewhere and pasting the text into MarsEdit for posting later. I even wrote and posted <a href=\"http://decafbad.com/skein/2010/03/11/alpha-vs-delta/\">a whole fanfic novella</a> this way, and it was a silly way to do things.</p>\n<p>Well, one of the places where writing actually happens for me over the past few years is within <a href=\"http://www.eastgate.com/Tinderbox/\">Tinderbox</a> documents. And, as it turns out, <a href=\"http://www.eastgate.com/Tinderbox/\">Tinderbox</a> has some powerful HTML export facilities that I&#39;ve left underused until some things finally clicked for me.</p>\n<p>So, I thought I&#39;d try turning that experience back upon itself to produce something worth writing. Without further ado, here&#39;s the <a href=\"http://github.com/lmorchard/tinderbox-article-tutorial\">source in GitHub</a>, and the <a href=\"http://decafbad.com/2010/06/tinderbox-article-tutorial/article.html\">article exported to HTML for easy reading</a>.</p>\n<p>The funny thing is, I started working on this tutorial in the middle of writing another article. So, this post is a particularly advanced form of <a href=\"http://catb.org/jargon/html/Y/yak-shaving.html\">Yak Shaving</a>. I hope it ends up handy for someone, and I hope it leads to the <em>real</em> articles I&#39;m hoping to produce.</p>\n",
    "body": "<em><strong>TL;DR:</strong> I just put together [a tutorial about writing an article in HTML][article] using [Tinderbox][] from [Eastgate Systems, Inc][eastgate].</em>\r\n\r\n<em><strong>Update:</strong></em> There's a <a href=\"http://pc.de/pages/tinderbox-tutorial-be\">Belorussian</a> translation of this post provided by <a href=\"http://pc.de/\">PC</a> - very cool!\r\n\r\n![tinderboxicon][]\r\n\r\n<em>Tinderbox Icon by Bryan Bell, via [flickr.com/photos/factoryjoe](http://www.flickr.com/photos/factoryjoe/2476581071/)</em>\r\n\r\n[tinderboxicon]: http://farm4.static.flickr.com/3105/2476581071_7a55c565dd.jpg \r\n\r\n[article]: http://decafbad.com/2010/06/tinderbox-article-tutorial/article.html\r\n\r\nI've been toying with a set of writing topics to get my blog going again, apropos of [my notion of writing for myself][cobwebs]. But, I like to write at length and have finally decided that life's too short to write in browser `<textarea>`'s, no matter how cleverly augmented.\r\n\r\nI did buy [MarsEdit 3][marsedit], which is a fine app for dashing off short entries. But, for longer things, I found myself doing the actual writing elsewhere and pasting the text into MarsEdit for posting later. I even wrote and posted [a whole fanfic novella][avd] this way, and it was a silly way to do things.\r\n\r\n[marsedit]: http://www.red-sweater.com/marsedit/\r\n[avd]: http://decafbad.com/skein/2010/03/11/alpha-vs-delta/\r\n\r\nWell, one of the places where writing actually happens for me over the past few years is within [Tinderbox][] documents. And, as it turns out, [Tinderbox][] has some powerful HTML export facilities that I've left underused until some things finally clicked for me.\r\n\r\nSo, I thought I'd try turning that experience back upon itself to produce something worth writing. Without further ado, here's the [source in GitHub][github], and the [article exported to HTML for easy reading][article].\r\n\r\nThe funny thing is, I started working on this tutorial in the middle of writing another article. So, this post is a particularly advanced form of [Yak Shaving][]. I hope it ends up handy for someone, and I hope it leads to the *real* articles I'm hoping to produce.\r\n\r\n[yak shaving]: http://catb.org/jargon/html/Y/yak-shaving.html\r\n[github]: http://github.com/lmorchard/tinderbox-article-tutorial\r\n[tinderbox]: http://www.eastgate.com/Tinderbox/\r\n[eastgate]: http://www.eastgate.com/\r\n[construction]: http://bit.ly/cBJBpX\r\n[tinderbox]: http://www.eastgate.com/Tinderbox/\r\n[eastgate]: http://www.eastgate.com/\r\n[couchdb]: http://couchdb.apache.org/\r\n[Sigmoid function]: http://en.wikipedia.org/wiki/Sigmoid_function\r\n[cobwebs]: http://decafbad.com/blog/2010/03/10/pondering-the-cobwebs\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2010",
    "path": "2010/06/06/tinderbox-article-tutorial",
    "thumbnail": "http://farm4.static.flickr.com/3105/2476581071_7a55c565dd.jpg"
  },
  {
    "comments_archived": true,
    "date": "2009-07-15T15:26:40.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "firefox",
      "js",
      "outliners",
      "outlining",
      "javascript",
      "dhtml",
      "eventdelegation",
      "entries",
      "mozilla",
      "draganddrop"
    ],
    "title": "HTML5 drag and drop in Firefox 3.5",
    "wordpress_id": 1793,
    "wordpress_slug": "html5-drag-and-drop",
    "wordpress_url": "http://decafbad.com/blog/?p=1793",
    "year": "2009",
    "month": "07",
    "day": "15",
    "isDir": false,
    "slug": "html5-drag-and-drop",
    "postName": "2009-07-15-html5-drag-and-drop",
    "html": "<p><i>\nOh hey, look! It's another blog post—and this one\n<a href=\"http://hacks.mozilla.org/2009/07/html5-drag-and-drop/\">is cross-posted on hacks.mozilla.com</a>.\nI won't say this is the start of a renewed blogging habit, but let's see what happens.\n</i></p>\n\n<style type=\"text/css\">\ndl { margin-left: 2em; }\ndd { margin-left: 2em; margin-bottom: 0.25em; }\n</style>\n<div id=\"introduction\">\n    <p>\n        Drag and drop is one of the most fundamental interactions\n        afforded by graphical user interfaces.  In one gesture, it\n        allows users to pair the selection of an object with the\n        execution of an action, often including a second object in the\n        operation.  It's a simple yet powerful UI concept used to\n        support copying, list reordering, deletion (ala the Trash / Recycle Bin),\n        and even the creation of link relationships.\n    </p><p>\n        Since it's so fundamental, offering drag and drop in web\n        applications has been a no-brainer ever since browsers first\n        offered mouse events in DHTML.  But, although\n        <code>mousedown</code>, <code>mousemove</code>, and\n        <code>mouseup</code> made it possible, the implementation has been\n        limited to the bounds of the browser window.  Additionally,\n        since these events refer only to the object being dragged,\n        there's a challenge to find the subject of the drop when\n        the interaction is completed.\n    </p><p>\n\n<pre><code>    Of course, that doesn&#39;t prevent most modern JavaScript\n    frameworks from abstracting away most of the problems and\n    throwing in some flourishes while they&#39;re at it.  But, wouldn&#39;t\n    it be nice if browsers offered first-class support for drag and\n    drop, and maybe even extended it beyond the window sandbox?\n&lt;/p&gt;&lt;p&gt;\n    As it turns out, this very wish is answered by the HTML 5 specification \n    &lt;a target=&quot;_new&quot; href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#dnd&quot;&gt;section on new drag-and-drop events&lt;/a&gt;, and \n    &lt;a target=&quot;_new&quot; href=&quot;https://developer.mozilla.org/En/DragDrop/Drag_and_Drop&quot;&gt;Firefox 3.5 includes an implementation&lt;/a&gt; of those events.\n&lt;/p&gt;&lt;p&gt;\n    If you want to jump straight to the code, I&#39;ve put together \n    &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html&quot;&gt;some simple demos&lt;/a&gt; \n    of the new events.  \n&lt;/p&gt;&lt;p&gt;\n\n    I&#39;ve even scratched an itch of my own and\n    built &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/outline.html&quot;&gt;the beginnings of an outline editor&lt;/a&gt;,\n    where every draggable element is also a drop target—of which\n    there could be dozens to hundreds in a complex document, something\n    that gave me some minor hair-tearing moments in the past\n    while trying to make do with plain old mouse events.\n&lt;/p&gt;&lt;p&gt;\n    And, all the above can be downloaded or cloned from \n    &lt;a href=&quot;http://github.com/lmorchard/fx35-drag-and-drop&quot;&gt;a GitHub repository&lt;/a&gt;\n    I&#39;ve created especially for this article—which continues after the jump.\n&lt;/p&gt;</code></pre>\n</div>\n\n<!--more-->\n\n<div id=\"events\">\n\n<pre><code>&lt;h2&gt;The New Drag and Drop Events&lt;/h2&gt;\n&lt;p&gt;\n    So, with no further ado, here are the new drag and drop events,\n    in roughly the order you might expect to see them fired:\n&lt;/p&gt;\n&lt;dl&gt;\n    &lt;dt&gt;&lt;code&gt;dragstart&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        A drag has been initiated, with the dragged element as the\n        event target.\n    &lt;/dd&gt;\n\n    &lt;dt&gt;&lt;code&gt;drag&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        The mouse has moved, with the dragged element as the event target.\n    &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;dragenter&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        The dragged element has been moved into a drop listener,\n        with the drop listener element as the event target.\n    &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;dragover&lt;/code&gt;&lt;/dt&gt;\n\n    &lt;dd&gt;\n        The dragged element has been moved over a drop listener,\n        with the drop listener element as the event target.  Since\n        the default behavior is to cancel drops, returning\n        &lt;code&gt;false&lt;/code&gt; or calling &lt;code&gt;preventDefault()&lt;/code&gt; in\n        the event handler indicates that a drop is allowed here.\n    &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;dragleave&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        The dragged element has been moved out of a drop listener,\n        with the drop listener element as the event target.\n    &lt;/dd&gt;\n\n    &lt;dt&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        The dragged element has been successfully dropped on a drop\n        listener, with the drop listener element as the event\n        target.\n    &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;dragend&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        A drag has been ended, successfully or not, with the\n        dragged element as the event target.\n    &lt;/dd&gt;\n&lt;/dl&gt;\n\n&lt;p&gt;\n    Like the mouse events of yore, listeners can be attached to\n    elements using &lt;code&gt;addEventListener()&lt;/code&gt; \n    directly or by way of your favorite JS library.  \n&lt;/p&gt;&lt;p&gt;\n    Consider the following example using jQuery, \n    &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#newschool&quot;&gt;also available as a live demo&lt;/a&gt;:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<div id=\"newschool\">\n    <div class=\"dragme\">Drag me!</div>\n    <div class=\"drophere\">Drop here!</div>\n</div>\n\n<script type=\"text/javascript\">\n    $(document).ready(function() {\n        $('#newschool .dragme')\n            .attr('draggable', 'true')\n            .bind('dragstart', function(ev) {\n                var dt = ev.originalEvent.dataTransfer;\n                dt.setData(\"Text\", \"Dropped in zone!\");\n                return true;\n            })\n            .bind('dragend', function(ev) {\n                return false;\n            });\n        $('#newschool .drophere')\n            .bind('dragenter', function(ev) {\n                $(ev.target).addClass('dragover');\n                return false;\n            })\n            .bind('dragleave', function(ev) {\n                $(ev.target).removeClass('dragover');\n                return false;\n            })\n            .bind('dragover', function(ev) {\n                return false;\n            })\n            .bind('drop', function(ev) {\n                var dt = ev.originalEvent.dataTransfer;\n                alert(dt.getData('Text'));\n                return false;\n            });\n    });\n</script>\n<pre><code>&lt;/pre&gt;\n&lt;p&gt;\n    Thanks to the new events and jQuery, this example is both short\n    and simple—but it packs in a lot of functionality, as the rest\n    of this article will explain.  \n&lt;/p&gt;&lt;p&gt;\n    Before moving on, there are at least three things about the above\n    code that are worth mentioning:\n&lt;/p&gt;\n&lt;ul&gt;\n    &lt;li&gt;\n\n        &lt;p&gt;\n            Drop targets are enabled by virtue of having\n            listeners for drop events.  But, \n            &lt;a target=&quot;_new&quot; href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#drag-and-drop-processing-model&quot;&gt;per the HTML 5 spec&lt;/a&gt;,\n            draggable elements need an\n            attribute of &lt;code&gt;draggable=&quot;true&quot;&lt;/code&gt;, set either in\n            markup or in JavaScript.  \n        &lt;/p&gt;\n        &lt;p&gt;\n            Thus, &lt;code&gt;$(&#39;#newschool&amp;nbsp;.dragme&#39;).attr(&#39;draggable&#39;, &#39;true&#39;)&lt;/code&gt;.\n        &lt;/p&gt;\n\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;p&gt;\n            The original DOM event (as opposed to jQuery&#39;s event\n            wrapper) offers a property called &lt;code&gt;dataTransfer&lt;/code&gt;.\n            Beyond just manipulating elements, the new drag and drop\n            events accomodate the transmission of user-definable data\n            during the course of the interaction.  \n        &lt;/p&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;p&gt;\n\n            Since these are first-class events, you can apply \n            &lt;a target=&quot;_new&quot; href=&quot;http://icant.co.uk/sandbox/eventdelegation/&quot;&gt;the technique of Event Delegation&lt;/a&gt;.\n        &lt;/p&gt;&lt;p&gt;\n            What&#39;s that?  Well, imagine you have a list of 1000\n            list items—as part of a deeply-nested outline document,\n            for instance.  Rather than needing to attach listeners\n            or otherwise fiddle with all 1000 items, simply attach\n            a listener to the parent node (eg. the\n            &lt;code&gt;&lt;ul&gt;&lt;/code&gt; element) and all events from\n            the children will propagate up to the single parent listener.\n            As a bonus, all new child elements added after page\n            load will enjoy the same benefits.\n        &lt;/p&gt;&lt;p&gt;\n            &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#delegated&quot;&gt;Check out this demo&lt;/a&gt;, \n            and \n            &lt;a target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/js/drag-delegated.js&quot;&gt;the associated JS code&lt;/a&gt; \n            to see more about these events and Event Delegation.\n        &lt;/p&gt;\n\n    &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n</div>\n\n<div id=\"datatransfer\">\n    <h2>Using dataTransfer</h2>\n    <p>\n        As mentioned in the last section, the new drag and drop events\n        let you send data along with a dragged element.  But, it's even\n        better than that:  Your drop targets can receive data\n        transferred by content objects dragged into the window from \n        other browser windows, and even <i>other applications</i>.\n    </p><p>\n\n<pre><code>    Since the example is a bit longer,  \n    &lt;a target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#data_transfer&quot;&gt;check out the live demo&lt;/a&gt;\n    and \n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/js/drag-datatransfer.js&quot;&gt;associated code&lt;/a&gt;\n    to get an idea of what&#39;s possible with &lt;code&gt;dataTransfer&lt;/code&gt;.\n&lt;/p&gt;&lt;p&gt;\n    In a nutshell, the stars of this show are the\n    &lt;code&gt;setData()&lt;/code&gt; and &lt;code&gt;getData()&lt;/code&gt; methods of\n    the &lt;code&gt;dataTransfer&lt;/code&gt; property exposed by the Event object.\n&lt;/p&gt;\n\n&lt;p&gt;\n    The &lt;code&gt;setData()&lt;/code&gt; method is typically called in the \n    &lt;code&gt;dragstart&lt;/code&gt; listener, loading &lt;code&gt;dataTransfer&lt;/code&gt;\n    up with one or more strings of content with associated\n    &lt;a href=&quot;https://developer.mozilla.org/En/DragDrop/Recommended_Drag_Types#link&quot;&gt;recommended content types&lt;/a&gt;.\n&lt;/p&gt;\n\n&lt;p&gt;\n    For illustration, here&#39;s a quick snippet from the example code:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;<br>dt.setData(&#39;text/plain&#39;, $(&#39;#logo&#39;).parent().text());\ndt.setData(&#39;text/html&#39;, $(&#39;#logo&#39;).parent().html());\ndt.setData(&#39;text/uri-list&#39;, $(&#39;#logo&#39;)[0].src);\n    </pre>\n    </p><p>\n        On the other end, <code>getData()</code> allows you to query\n        for content by type (eg. <code>text/html</code> followed by\n        <code>text/plain</code>).  This, in turn, allows you to decide\n        on acceptable content types at the time of the\n        <code>drop</code> event or even during <code>dragover</code></p>\n<pre><code>    to offer feedback for unacceptable types during the drag.\n&lt;/p&gt;&lt;p&gt;\n    Here&#39;s another example from the receiving end of the example code:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;<br>$(&#39;.content_url .content&#39;).text(dt.getData(&#39;text/uri-list&#39;));\n$(&#39;.content_text .content&#39;).text(dt.getData(&#39;text/plain&#39;));\n$(&#39;.content_html .content&#39;).html(dt.getData(&#39;text/html&#39;));\n    </pre>\n    <p>\n        Where <code>dataTransfer</code> really shines, though, is that\n        it allows your drop targets to receive content from \n        sources outside your defined draggable elements and even from\n        outside the browser altogether.  Firefox accepts such drags, \n        and attempts to populate <code>dataTransfer</code> with\n        appropriate content types extracted from the external object.\n    </p><p></p>\n<pre><code>    Thus, you could select some text in a word processor window and\n    drop it into one of your elements, and at least expect to find\n    it available as &lt;code&gt;text/plain&lt;/code&gt; content.  \n&lt;/p&gt;&lt;p&gt;\n    You can also select content in \n    another browser window, and expect to see &lt;code&gt;text/html&lt;/code&gt;\n    appear in your events.  Check out the \n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/outline.html&quot;&gt;outline editing demo&lt;/a&gt;\n    and see what happens when you try dragging various elements \n    (eg. images, tables, and lists) and highlighted content from\n    other windows onto the items there.\n&lt;/p&gt;</code></pre>\n</div>\n\n<div id=\"dragfeedback\">\n    <h2>Using Drag Feedback Images</h2>\n    <p>\n       An important aspect of the drag and drop interaction is a\n       representation of the thing being dragged.  By default in\n       Firefox, this is a \"ghost\" image of the dragged element itself.  But,\n       the <code>dataTransfer</code> property of the original Event\n       object exposes the method <code>setDragImage()</code> for use\n       in customizing this representation.\n    </p><p>\n\n<pre><code>    There&#39;s\n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#feedback_image&quot;&gt;a live demo&lt;/a&gt; of this feature, as well as\n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/js/drag-feedback-images.js&quot;&gt;associated JS code&lt;/a&gt; \n    available.  The gist, however, is sketched out in these code snippets:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;    </p>\n<p>dt.setDragImage( $(&#39;#feedback_image h2&#39;)[0], 0, 0);</p>\n<p>dt.setDragImage( $(&#39;#logo&#39;)[0], 32, 32); </p>\n<p>var canvas = document.createElement(&quot;canvas&quot;);\ncanvas.width = canvas.height = 50;</p>\n<p>var ctx = canvas.getContext(&quot;2d&quot;);\nctx.lineWidth = 8;\nctx.moveTo(25,0);\nctx.lineTo(50, 50);\nctx.lineTo(0, 50);\nctx.lineTo(25, 0);\nctx.stroke();</p>\n<p>dt.setDragImage(canvas, 25, 25);\n    </pre>\n    <p>\n        You can supply a DOM node as the first parameter to \n        <code>setDragImage()</code>, which includes everything from\n        text to images to <code>canvas</code> elements.  The\n        second two parameters indicate at what left and top offset\n        the mouse should appear in the image while dragging.\n    </p><p></p>\n<pre><code>    For example, since the &lt;code&gt;#logo&lt;/code&gt; image is 64x64,\n    the parameters in the second &lt;code&gt;setDragImage()&lt;/code&gt;\n    method places the mouse right in the center of the image.\n    On the other hand, the first call positions the feedback\n    image such that the mouse rests in the upper left corner.\n&lt;/p&gt;&lt;p&gt;\n&lt;/p&gt;</code></pre>\n</div>\n\n<div id=\"dragfeedback\">\n\n<pre><code>&lt;h2&gt;Using Drop Effects&lt;/h2&gt;\n&lt;p&gt;\n    As mentioned at the start of this article, the drag and drop\n    interaction has been used to support actions such as copying,\n    moving, and linking.  Accordingly, the HTML 5 specification \n    accomodates these operations in the form of the \n    &lt;code&gt;effectAllowed&lt;/code&gt; and &lt;code&gt;dropEffect&lt;/code&gt;\n    properties exposed by the Event object.\n&lt;/p&gt;\n&lt;p&gt;\n\n    For a quick fix, check out the\n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#drag_effects&quot;&gt;a live demo&lt;/a&gt; \n    of this feature, as well as the\n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/js/drag-effects.js&quot;&gt;associated JS code&lt;/a&gt;.\n&lt;/p&gt;&lt;p&gt;\n    The basic idea is that the &lt;code&gt;dragstart&lt;/code&gt; event\n    listener can set a value for &lt;code&gt;effectAllowed&lt;/code&gt; like so:\n&lt;/p&gt;\n\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;\nswitch (ev.target.id) {\n    case &#39;effectdrag0&#39;: dt.effectAllowed = &#39;copy&#39;; break;\n    case &#39;effectdrag1&#39;: dt.effectAllowed = &#39;move&#39;; break;\n    case &#39;effectdrag2&#39;: dt.effectAllowed = &#39;link&#39;; break;\n    case &#39;effectdrag3&#39;: dt.effectAllowed = &#39;all&#39;; break;\n    case &#39;effectdrag4&#39;: dt.effectAllowed = &#39;none&#39;; break;\n}\n    </pre>\n    <p>The choices available for this property include the following:</p>\n    <dl> \n        <dt><code>none</code></dt><dd>no operation is permitted </dd>\n        <dt><code>copy</code></dt><dd>copy only </dd></p>\n<pre><code>    &lt;dt&gt;&lt;code&gt;move&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;move only &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;link&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;link only &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;copyMove&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;copy or move only &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;copyLink&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;copy or link only &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;linkMove&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;link or move only &lt;/dd&gt;\n\n    &lt;dt&gt;&lt;code&gt;all&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;copy, move, or link &lt;/dd&gt;\n&lt;/dl&gt;\n&lt;p&gt;\n    On the other end, the &lt;code&gt;dragover&lt;/code&gt; event listener \n    can set the value of the\n    &lt;code&gt;dropEffect&lt;/code&gt; property to indicate the expected effect\n    invoked on a successful drop.  If the value does\n    not match up with &lt;code&gt;effectAllowed&lt;/code&gt;, the drop will\n    be considered cancelled on completion.\n&lt;/p&gt;&lt;p&gt;\n\n    In the \n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#drag_effects&quot;&gt;a live demo&lt;/a&gt;,\n    you should be able to see that only elements with matching\n    effects can be dropped into the appropriate drop zones.  This\n    is accomplished with code like the following:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;\nswitch (ev.target.id) {\n    case &#39;effectdrop0&#39;: dt.dropEffect = &#39;copy&#39;; break;\n    case &#39;effectdrop1&#39;: dt.dropEffect = &#39;move&#39;; break;\n    case &#39;effectdrop2&#39;: dt.dropEffect = &#39;link&#39;; break;\n    case &#39;effectdrop3&#39;: dt.dropEffect = &#39;all&#39;; break;\n    case &#39;effectdrop4&#39;: dt.dropEffect = &#39;none&#39;; break;\n}\n    </pre>\n    <p>\n        Although the OS itself can provide some feedback, you \n        can also use these properties to update your own visible \n        feedback, both on the dragged element and on the drop zone\n        itself.\n    </p></p>\n</div>\n\n<div id=\"conclusion\">\n    <h2>Conclusion</h2>\n    <p>\n        The new first-class drag and drop events in HTML5 and Firefox\n        make supporting this form of UI interaction simple, concise,\n        and powerful in the browser.  But beyond the new simplicity of\n        these events, the ability to transfer content between\n        applications opens brand new avenues for web-based applications\n        and collaboration with desktop software in general.\n    </p><p>\n    </p><p>\n    </p>\n</div>\n\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090962\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://lmframework.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=03dc722b1852367f02b0b21f02b10675&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://lmframework.com\">David Semeria</a>\n</div>\n<a href=\"#comment-221090962\" class=\"permalink\"><time datetime=\"2009-07-16T17:56:52\">2009-07-16T17:56:52</time></a>\n</div>\n<div class=\"content\"><p>Wow - thanks for a great introduction to D+D in HTML 5, I'm really looking forward to giving it a thorough road test. </p>\n<p>The key part of the implementation are the target listeners, because, as I'm sure you're aware, onmouseover would historically never fire over the target element because the dragged item would always 'cover it up'. BTW, my proposed solution was to add an 'event transparency' property, which would have made the dragged item invisible from the point of view of selected events, eg onmouseover.</p>\n<p>This implementation is going to take a lot of pain away. You have no idea how many hoops I had to jump through to get a fully generic D+D implementation working without these new calls.</p>\n<p>If you're interested, you can see it working here: http://lmframework.com/page.php?id=vd_twig_short_2</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090964\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cee7ac3f63d7e8c1367e170bec302c14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Alex</a>\n</div>\n<a href=\"#comment-221090964\" class=\"permalink\"><time datetime=\"2009-07-17T00:13:23\">2009-07-17T00:13:23</time></a>\n</div>\n<div class=\"content\"><p>Hey,</p>\n<p>Looks great and useful article.  For dragging from external applications (such as the Desktop) is a normal webpage able to get the data from the drop?  I was just playing with it and seem to always get what seems to be a security error with getData or mozGetDataAt.  However, the documentation seems to state that on drop that data should be made available to the page.  Likewise, in the same way an image can be dragged off the page onto the desktop, can an arbitrary element be dragged onto the desktop with whatever file content to be saved?  Thanks for the help.</p>\n<p>Alex</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090966\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://paulisageek.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b3bb70a4bace7f9bd49f48b149ab95f9&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://paulisageek.com/\">Paul Tarjan</a>\n</div>\n<a href=\"#comment-221090966\" class=\"permalink\"><time datetime=\"2009-07-17T04:52:54\">2009-07-17T04:52:54</time></a>\n</div>\n<div class=\"content\"><p>Very nice, I didn't know that FF 3.5 actually had this implemented. Time to start playing :)</p>\n<p>Also, how did you do your code posts? Was it just pasting in HTML or do you have a better setup?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090967\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=066d1e75c9b938053ee6b3d48b1c0f6a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Animal</a>\n</div>\n<a href=\"#comment-221090967\" class=\"permalink\"><time datetime=\"2009-07-17T14:35:21\">2009-07-17T14:35:21</time></a>\n</div>\n<div class=\"content\"><p>Seems pretty pointless pressing ahead with this when you just can't write a web app to use it. There's no support. All a bunch of whizzy fun I'm sure, but sod-all use.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090969\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221090969\" class=\"permalink\"><time datetime=\"2009-07-17T16:23:10\">2009-07-17T16:23:10</time></a>\n</div>\n<div class=\"content\"><p>@Animal: Why can't you write a web app to use it?  It's in the HTML5 spec, works in Fx3.5 and Safari 4 / WebKit.  It doesn't have universal support yet, or course, but new standards never do.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090970\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.crearedesign.co.uk\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=87bf21798e390d9043dda7240c1b60f7&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.crearedesign.co.uk\">paul</a>\n</div>\n<a href=\"#comment-221090970\" class=\"permalink\"><time datetime=\"2009-07-21T08:08:26\">2009-07-21T08:08:26</time></a>\n</div>\n<div class=\"content\"><p>very nice indeed! i like this, it has definitely opened up new avenues for interaction without using flash. but it will take time before people upgrade to the new browser. a lot of people who browse the web wont realise what the technology will bring and will use their current browser because it does the job!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090971\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=04de859cfd6ef0b75e4ea3cbea143190&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Joel</a>\n</div>\n<a href=\"#comment-221090971\" class=\"permalink\"><time datetime=\"2009-07-21T14:36:04\">2009-07-21T14:36:04</time></a>\n</div>\n<div class=\"content\"><p>Excellent demos of the new features.</p>\n<p>When using a feedback image on a zoomed in page, should the image not also be scaled up automatically?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090973\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"https://bugzilla.mozilla.org/show_bug.cgi?id=41708\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6d3bf986abdbb431991c3b02eb6e2335&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"https://bugzilla.mozilla.org/show_bug.cgi?id=41708\">RenegadeX</a>\n</div>\n<a href=\"#comment-221090973\" class=\"permalink\"><time datetime=\"2009-07-22T04:13:46\">2009-07-22T04:13:46</time></a>\n</div>\n<div class=\"content\"><p>Dragging &amp; dropping <em>is</em> as you say, a \"one of the most fundamental interations\" that users of computer graphical interfaces have come to know, and expect.</p>\n<p>It therefore completes dumbfounds me how it is that we <em>still</em> can not natively drag &amp; scroll (&amp; then drop) in Firefox. We can only drag &amp; drop an item within the currently visible portion of a Firefox webpage or tab, no further up, no further down.</p>\n<p>That is should be limited makes absolutely no sense. Microsoft built the function into their Windows 3.x (file) Explorer, and then when visual browsers came along, naturally carried it through into Internet Explorer. </p>\n<p>Firefox Bug 41708, \"Should be able to scroll in the viewport while dragging\" was opened in June, 2000 (yes, 9 years ago!) and remains open, and is disregarded by Firefox developers as little more than a trivial little annoyance, and therefore is and should be treated as a low-importance 'enhancement' rather than as the 'standard feature' it should really be.</p>\n<p>If it weren't for the extension 'DragToScroll', which has been around for 3-1/2 years now (not updated in a long time but still works if you override version compatibility), I would have dumped Firefox and switched to a different browser (Maxthon 3, most likely).</p>\n<p>So, I'm wondering (and hoping) -- does the new HTML5 drag and drop specification include anything that if implemented properly would make it possible to scroll &amp; drag?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090974\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221090974\" class=\"permalink\"><time datetime=\"2009-07-22T13:57:42\">2009-07-22T13:57:42</time></a>\n</div>\n<div class=\"content\"><p>@RenegadeX: Ugh.  I don't work on the browser itself, but I noticed that unexpected behavior on drag &amp; drop.  The window really should scroll when you get toward the top or bottom while dragging - and, in fact, most pre-HTML5 JS frameworks do that in their own drag &amp; drop abstractions.  </p>\n<p>Until / unless Firefox gets this fixed, the same sort of auto-scrolling could be hacked in to HTML5 drag and drop.  Not perfect, but it's doable.  That is, in the drag event, you can check if the mouse is near the upper or lower edge of the viewport - and if so, start scrolling appropriately. That's pretty much how the JS frameworks do it with old-school D&D</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090975\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.copperbot.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=df48b2c2a3a2be51b1e15f10c5fb05da&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.copperbot.net\">CopperBot</a>\n</div>\n<a href=\"#comment-221090975\" class=\"permalink\"><time datetime=\"2009-07-23T21:41:07\">2009-07-23T21:41:07</time></a>\n</div>\n<div class=\"content\"><p>Very cool article! Thanks for sharing. HTML5 really is going to change everything about how we use and develop for the web. Pretty awesome!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090976\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.AmnesiaGames.cl\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=14ad888c23e28c85c222a73b6c633570&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.AmnesiaGames.cl\">Alexos</a>\n</div>\n<a href=\"#comment-221090976\" class=\"permalink\"><time datetime=\"2009-07-26T05:05:44\">2009-07-26T05:05:44</time></a>\n</div>\n<div class=\"content\"><p>Hi, would DD work for uploading files? How can I display a progress bar?\nThanks! \nI've been looking for that several days, and found only applets which I can't use in my proyect :-)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090977\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.sjlwebdesign.co.uk\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=185cd965e0e8ccd15df2f90977cbeaf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.sjlwebdesign.co.uk\">Sam</a>\n</div>\n<a href=\"#comment-221090977\" class=\"permalink\"><time datetime=\"2009-07-28T13:54:26\">2009-07-28T13:54:26</time></a>\n</div>\n<div class=\"content\"><p>Looks fantastic, going to try it out now (once I have upgraded my FF)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090978\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.dankantor.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=60fc8331f617fc905fd682bc4f41ce8d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.dankantor.com\">Dan Kantor</a>\n</div>\n<a href=\"#comment-221090978\" class=\"permalink\"><time datetime=\"2009-07-30T03:10:25\">2009-07-30T03:10:25</time></a>\n</div>\n<div class=\"content\"><p>Looks like effectAllowed and dropEffect are not working for FF 3.5 on the Mac. I see effects on Windows and Safari 4 on Mac. I've been playing around with adding borders to the drop target, but the + icon for copy really helps a lot. Hopefully Mozilla will fix this next update.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090979\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.thecssninja.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8677c9f7c0f6d947bf318c1430d00bfd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.thecssninja.com/\">Ryan</a>\n</div>\n<a href=\"#comment-221090979\" class=\"permalink\"><time datetime=\"2009-09-01T02:33:06\">2009-09-01T02:33:06</time></a>\n</div>\n<div class=\"content\"><p>Great article it's good to see developments in this area. I wrote an article on the further extensions Firefox 3.6 has done with the dataTransfer method by adding the file attribute so you can access local files and upload them without the need for file inputs. http://www.thecssninja.com/javascript/drag-and-drop-upload</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090982\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1ed4bbef573bfc014d32356d53103ca2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">phil swenson</a>\n</div>\n<a href=\"#comment-221090982\" class=\"permalink\"><time datetime=\"2009-09-03T22:58:36\">2009-09-03T22:58:36</time></a>\n</div>\n<div class=\"content\"><p>Why not a first class WYSIWYG rich text editor with copy from clipboard image support?  </p>\n<p><em>NO ONE</em> has built a decent text editor in JavaScript - At least not that I've seen.  And browsers don't allow image paste for reasons I don't understand.  </p>\n<p>And by decent I mean just like you'd get in textmate or another editor.  Have the standard text editor features everyone expects:  tab, select indent/select unindent, resize image, home, end, duplicate line, delete line, styling, etc.</p>\n<p>would push the browser to the next level in killing the desktop.  non-techies hate wikis.  They want a real editor.  I do too actually.... would be great for forums, bug tracking system (imagine pasting screen shots in line with your bug desc), email, etc.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090983\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=deed51cddc830e162557b8f01383a057&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Jean-Denis</a>\n</div>\n<a href=\"#comment-221090983\" class=\"permalink\"><time datetime=\"2009-09-04T00:23:39\">2009-09-04T00:23:39</time></a>\n</div>\n<div class=\"content\"><p>Francisco Tomalski wrote up a nice piece on HTML 5 drag'n drop at http://www.alertdebugging.com/2009/08/16/on-html-5-drag-and-drop/</p>\n<p>where he uncovers that the proposed standard is partially broken. Any comment on his piece?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090984\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://html5tutorial.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3876e030a3fc69a8b59a8c55829fb510&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://html5tutorial.net/\">Lisa</a>\n</div>\n<a href=\"#comment-221090984\" class=\"permalink\"><time datetime=\"2009-09-09T07:33:08\">2009-09-09T07:33:08</time></a>\n</div>\n<div class=\"content\"><p>This is a great move forward no more relying on 3rd party apps and extensions to play video or audio, i have been reading up on HTML 5 at the <a href=\"http://html5tutorial.net/\" title=\"HTML tutorials\" rel=\"nofollow\">HTML 5 Tutorials</a> website, i am now playing around with one of the free templates and was wondering how to embed audio, so thanks a lot, great information, lets hope more people lean towards HTML 5 and SOON!!!</p>\n<p>The drag and drop feature i did not notice was already working in FF 3.5, i was told to get Safari to see HTML 5 in action. Thanks for a great post</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090985\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.useragentman.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=9a579fa051b35266678735c8a3751771&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.useragentman.com\">Zoltan Hawryluk</a>\n</div>\n<a href=\"#comment-221090985\" class=\"permalink\"><time datetime=\"2010-01-11T15:14:48\">2010-01-11T15:14:48</time></a>\n</div>\n<div class=\"content\"><p>A million thank yous!  This article was great introduction to HTML5 D+D.  With it, I was able to extend it to other browsers.  It was a little painful at first because the browser implementations diverge in significant, but manageable ways.</p>\n<p>If you are interested, check out my article at http://www.useragentman.com/blog/2010/01/10/cross-browser-html5-drag-and-drop/ if you are interested in my results.</p>\n<p>I noticed you haven't blogged in a while - I hope you haven't stopped totally and continue to share with the webdev community.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090986\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.lingua-franka.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e65f416e42c12571ba1c86ae2dadd99f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.lingua-franka.com\">Raul</a>\n</div>\n<a href=\"#comment-221090986\" class=\"permalink\"><time datetime=\"2011-04-26T23:56:02\">2011-04-26T23:56:02</time></a>\n</div>\n<div class=\"content\"><p>Hi, Leslie. I've just come across a problem that's driving me nuts. I'm not fully comfortable with D&amp;D, but managed to move a crosshairs image over a map to very precisely controlled positions. It worked great on FF 3.6 and FF 4. After a couple of days of successful testing, the image suddenly refused to de dropped after being dragged (it rather flew back to its previous position). Do you know if there is a bug in FF that might cause this? </p>\n<p>BTW, during the programming process I updated Firebug, which also is getting a little cranky.</p>\n<p>Thanks for your prompt answer, Raul</p></div>\n</li>\n<li class=\"comment\" id=\"comment-324410737\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/google-4014af7ac4ea5d00df95bef4503b78dd.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Alexander Plutov</a>\n</div>\n<a href=\"#comment-324410737\" class=\"permalink\"><time datetime=\"2011-10-01T11:51:12\">2011-10-01T11:51:12</time></a>\n</div>\n<div class=\"content\">Good post about Drag & Drop http://plutov.by/post/html5_drag_and_drop</div>\n</li>\n</ul>\n</div>\n",
    "body": "<p><i>\r\nOh hey, look! It's another blog post—and this one\r\n<a href=\"http://hacks.mozilla.org/2009/07/html5-drag-and-drop/\">is cross-posted on hacks.mozilla.com</a>.\r\nI won't say this is the start of a renewed blogging habit, but let's see what happens.\r\n</i></p>\r\n\r\n<style type=\"text/css\">\r\ndl { margin-left: 2em; }\r\ndd { margin-left: 2em; margin-bottom: 0.25em; }\r\n</style>\r\n<div id=\"introduction\">\r\n    <p>\r\n        Drag and drop is one of the most fundamental interactions\r\n        afforded by graphical user interfaces.  In one gesture, it\r\n        allows users to pair the selection of an object with the\r\n        execution of an action, often including a second object in the\r\n        operation.  It's a simple yet powerful UI concept used to\r\n        support copying, list reordering, deletion (ala the Trash / Recycle Bin),\r\n        and even the creation of link relationships.\r\n    </p><p>\r\n        Since it's so fundamental, offering drag and drop in web\r\n        applications has been a no-brainer ever since browsers first\r\n        offered mouse events in DHTML.  But, although\r\n        <code>mousedown</code>, <code>mousemove</code>, and\r\n        <code>mouseup</code> made it possible, the implementation has been\r\n        limited to the bounds of the browser window.  Additionally,\r\n        since these events refer only to the object being dragged,\r\n        there's a challenge to find the subject of the drop when\r\n        the interaction is completed.\r\n    </p><p>\r\n\r\n        Of course, that doesn't prevent most modern JavaScript\r\n        frameworks from abstracting away most of the problems and\r\n        throwing in some flourishes while they're at it.  But, wouldn't\r\n        it be nice if browsers offered first-class support for drag and\r\n        drop, and maybe even extended it beyond the window sandbox?\r\n    </p><p>\r\n        As it turns out, this very wish is answered by the HTML 5 specification \r\n        <a target=\"_new\" href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#dnd\">section on new drag-and-drop events</a>, and \r\n        <a target=\"_new\" href=\"https://developer.mozilla.org/En/DragDrop/Drag_and_Drop\">Firefox 3.5 includes an implementation</a> of those events.\r\n    </p><p>\r\n        If you want to jump straight to the code, I've put together \r\n        <a target=\"_new\" target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html\">some simple demos</a> \r\n        of the new events.  \r\n    </p><p>\r\n\r\n        I've even scratched an itch of my own and\r\n        built <a target=\"_new\" target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/outline.html\">the beginnings of an outline editor</a>,\r\n        where every draggable element is also a drop target—of which\r\n        there could be dozens to hundreds in a complex document, something\r\n        that gave me some minor hair-tearing moments in the past\r\n        while trying to make do with plain old mouse events.\r\n    </p><p>\r\n        And, all the above can be downloaded or cloned from \r\n        <a href=\"http://github.com/lmorchard/fx35-drag-and-drop\">a GitHub repository</a>\r\n        I've created especially for this article—which continues after the jump.\r\n    </p>\r\n</div>\r\n\r\n<!--more-->\r\n\r\n<div id=\"events\">\r\n\r\n    <h2>The New Drag and Drop Events</h2>\r\n    <p>\r\n        So, with no further ado, here are the new drag and drop events,\r\n        in roughly the order you might expect to see them fired:\r\n    </p>\r\n    <dl>\r\n        <dt><code>dragstart</code></dt>\r\n        <dd>\r\n            A drag has been initiated, with the dragged element as the\r\n            event target.\r\n        </dd>\r\n\r\n        <dt><code>drag</code></dt>\r\n        <dd>\r\n            The mouse has moved, with the dragged element as the event target.\r\n        </dd>\r\n        <dt><code>dragenter</code></dt>\r\n        <dd>\r\n            The dragged element has been moved into a drop listener,\r\n            with the drop listener element as the event target.\r\n        </dd>\r\n        <dt><code>dragover</code></dt>\r\n\r\n        <dd>\r\n            The dragged element has been moved over a drop listener,\r\n            with the drop listener element as the event target.  Since\r\n            the default behavior is to cancel drops, returning\r\n            <code>false</code> or calling <code>preventDefault()</code> in\r\n            the event handler indicates that a drop is allowed here.\r\n        </dd>\r\n        <dt><code>dragleave</code></dt>\r\n        <dd>\r\n            The dragged element has been moved out of a drop listener,\r\n            with the drop listener element as the event target.\r\n        </dd>\r\n\r\n        <dt><code>drop</code></dt>\r\n        <dd>\r\n            The dragged element has been successfully dropped on a drop\r\n            listener, with the drop listener element as the event\r\n            target.\r\n        </dd>\r\n        <dt><code>dragend</code></dt>\r\n        <dd>\r\n            A drag has been ended, successfully or not, with the\r\n            dragged element as the event target.\r\n        </dd>\r\n    </dl>\r\n\r\n    <p>\r\n        Like the mouse events of yore, listeners can be attached to\r\n        elements using <code>addEventListener()</code> \r\n        directly or by way of your favorite JS library.  \r\n    </p><p>\r\n        Consider the following example using jQuery, \r\n        <a target=\"_new\" target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#newschool\">also available as a live demo</a>:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\n<div id=\"newschool\">\r\n    <div class=\"dragme\">Drag me!</div>\r\n    <div class=\"drophere\">Drop here!</div>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n    $(document).ready(function() {\r\n        $('#newschool .dragme')\r\n            .attr('draggable', 'true')\r\n            .bind('dragstart', function(ev) {\r\n                var dt = ev.originalEvent.dataTransfer;\r\n                dt.setData(\"Text\", \"Dropped in zone!\");\r\n                return true;\r\n            })\r\n            .bind('dragend', function(ev) {\r\n                return false;\r\n            });\r\n        $('#newschool .drophere')\r\n            .bind('dragenter', function(ev) {\r\n                $(ev.target).addClass('dragover');\r\n                return false;\r\n            })\r\n            .bind('dragleave', function(ev) {\r\n                $(ev.target).removeClass('dragover');\r\n                return false;\r\n            })\r\n            .bind('dragover', function(ev) {\r\n                return false;\r\n            })\r\n            .bind('drop', function(ev) {\r\n                var dt = ev.originalEvent.dataTransfer;\r\n                alert(dt.getData('Text'));\r\n                return false;\r\n            });\r\n    });\r\n</script>\r\n    </pre>\r\n    <p>\r\n        Thanks to the new events and jQuery, this example is both short\r\n        and simple—but it packs in a lot of functionality, as the rest\r\n        of this article will explain.  \r\n    </p><p>\r\n        Before moving on, there are at least three things about the above\r\n        code that are worth mentioning:\r\n    </p>\r\n    <ul>\r\n        <li>\r\n\r\n            <p>\r\n                Drop targets are enabled by virtue of having\r\n                listeners for drop events.  But, \r\n                <a target=\"_new\" href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#drag-and-drop-processing-model\">per the HTML 5 spec</a>,\r\n                draggable elements need an\r\n                attribute of <code>draggable=\"true\"</code>, set either in\r\n                markup or in JavaScript.  \r\n            </p>\r\n            <p>\r\n                Thus, <code>$('#newschool&nbsp;.dragme').attr('draggable', 'true')</code>.\r\n            </p>\r\n\r\n        </li>\r\n        <li>\r\n            <p>\r\n                The original DOM event (as opposed to jQuery's event\r\n                wrapper) offers a property called <code>dataTransfer</code>.\r\n                Beyond just manipulating elements, the new drag and drop\r\n                events accomodate the transmission of user-definable data\r\n                during the course of the interaction.  \r\n            </p>\r\n        </li>\r\n        <li>\r\n            <p>\r\n\r\n                Since these are first-class events, you can apply \r\n                <a target=\"_new\" href=\"http://icant.co.uk/sandbox/eventdelegation/\">the technique of Event Delegation</a>.\r\n            </p><p>\r\n                What's that?  Well, imagine you have a list of 1000\r\n                list items—as part of a deeply-nested outline document,\r\n                for instance.  Rather than needing to attach listeners\r\n                or otherwise fiddle with all 1000 items, simply attach\r\n                a listener to the parent node (eg. the\r\n                <code><ul></code> element) and all events from\r\n                the children will propagate up to the single parent listener.\r\n                As a bonus, all new child elements added after page\r\n                load will enjoy the same benefits.\r\n            </p><p>\r\n                <a target=\"_new\" target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#delegated\">Check out this demo</a>, \r\n                and \r\n                <a target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/js/drag-delegated.js\">the associated JS code</a> \r\n                to see more about these events and Event Delegation.\r\n            </p>\r\n\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n<div id=\"datatransfer\">\r\n    <h2>Using dataTransfer</h2>\r\n    <p>\r\n        As mentioned in the last section, the new drag and drop events\r\n        let you send data along with a dragged element.  But, it's even\r\n        better than that:  Your drop targets can receive data\r\n        transferred by content objects dragged into the window from \r\n        other browser windows, and even <i>other applications</i>.\r\n    </p><p>\r\n\r\n        Since the example is a bit longer,  \r\n        <a target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#data_transfer\">check out the live demo</a>\r\n        and \r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/js/drag-datatransfer.js\">associated code</a>\r\n        to get an idea of what's possible with <code>dataTransfer</code>.\r\n    </p><p>\r\n        In a nutshell, the stars of this show are the\r\n        <code>setData()</code> and <code>getData()</code> methods of\r\n        the <code>dataTransfer</code> property exposed by the Event object.\r\n    </p>\r\n\r\n    <p>\r\n        The <code>setData()</code> method is typically called in the \r\n        <code>dragstart</code> listener, loading <code>dataTransfer</code>\r\n        up with one or more strings of content with associated\r\n        <a href=\"https://developer.mozilla.org/En/DragDrop/Recommended_Drag_Types#link\">recommended content types</a>.\r\n    </p>\r\n\r\n    <p>\r\n        For illustration, here's a quick snippet from the example code:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;    \r\ndt.setData('text/plain', $('#logo').parent().text());\r\ndt.setData('text/html', $('#logo').parent().html());\r\ndt.setData('text/uri-list', $('#logo')[0].src);\r\n    </pre>\r\n    </p><p>\r\n        On the other end, <code>getData()</code> allows you to query\r\n        for content by type (eg. <code>text/html</code> followed by\r\n        <code>text/plain</code>).  This, in turn, allows you to decide\r\n        on acceptable content types at the time of the\r\n        <code>drop</code> event or even during <code>dragover</code>\r\n\r\n        to offer feedback for unacceptable types during the drag.\r\n    </p><p>\r\n        Here's another example from the receiving end of the example code:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;    \r\n$('.content_url .content').text(dt.getData('text/uri-list'));\r\n$('.content_text .content').text(dt.getData('text/plain'));\r\n$('.content_html .content').html(dt.getData('text/html'));\r\n    </pre>\r\n    <p>\r\n        Where <code>dataTransfer</code> really shines, though, is that\r\n        it allows your drop targets to receive content from \r\n        sources outside your defined draggable elements and even from\r\n        outside the browser altogether.  Firefox accepts such drags, \r\n        and attempts to populate <code>dataTransfer</code> with\r\n        appropriate content types extracted from the external object.\r\n    </p><p>\r\n\r\n        Thus, you could select some text in a word processor window and\r\n        drop it into one of your elements, and at least expect to find\r\n        it available as <code>text/plain</code> content.  \r\n    </p><p>\r\n        You can also select content in \r\n        another browser window, and expect to see <code>text/html</code>\r\n        appear in your events.  Check out the \r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/outline.html\">outline editing demo</a>\r\n        and see what happens when you try dragging various elements \r\n        (eg. images, tables, and lists) and highlighted content from\r\n        other windows onto the items there.\r\n    </p>\r\n\r\n</div>\r\n\r\n<div id=\"dragfeedback\">\r\n    <h2>Using Drag Feedback Images</h2>\r\n    <p>\r\n       An important aspect of the drag and drop interaction is a\r\n       representation of the thing being dragged.  By default in\r\n       Firefox, this is a \"ghost\" image of the dragged element itself.  But,\r\n       the <code>dataTransfer</code> property of the original Event\r\n       object exposes the method <code>setDragImage()</code> for use\r\n       in customizing this representation.\r\n    </p><p>\r\n\r\n        There's\r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#feedback_image\">a live demo</a> of this feature, as well as\r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/js/drag-feedback-images.js\">associated JS code</a> \r\n        available.  The gist, however, is sketched out in these code snippets:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;    \r\n\r\ndt.setDragImage( $('#feedback_image h2')[0], 0, 0);\r\n\r\ndt.setDragImage( $('#logo')[0], 32, 32); \r\n\r\nvar canvas = document.createElement(\"canvas\");\r\ncanvas.width = canvas.height = 50;\r\n\r\nvar ctx = canvas.getContext(\"2d\");\r\nctx.lineWidth = 8;\r\nctx.moveTo(25,0);\r\nctx.lineTo(50, 50);\r\nctx.lineTo(0, 50);\r\nctx.lineTo(25, 0);\r\nctx.stroke();\r\n\r\ndt.setDragImage(canvas, 25, 25);\r\n    </pre>\r\n    <p>\r\n        You can supply a DOM node as the first parameter to \r\n        <code>setDragImage()</code>, which includes everything from\r\n        text to images to <code>canvas</code> elements.  The\r\n        second two parameters indicate at what left and top offset\r\n        the mouse should appear in the image while dragging.\r\n    </p><p>\r\n\r\n        For example, since the <code>#logo</code> image is 64x64,\r\n        the parameters in the second <code>setDragImage()</code>\r\n        method places the mouse right in the center of the image.\r\n        On the other hand, the first call positions the feedback\r\n        image such that the mouse rests in the upper left corner.\r\n    </p><p>\r\n    </p>\r\n</div>\r\n\r\n<div id=\"dragfeedback\">\r\n\r\n    <h2>Using Drop Effects</h2>\r\n    <p>\r\n        As mentioned at the start of this article, the drag and drop\r\n        interaction has been used to support actions such as copying,\r\n        moving, and linking.  Accordingly, the HTML 5 specification \r\n        accomodates these operations in the form of the \r\n        <code>effectAllowed</code> and <code>dropEffect</code>\r\n        properties exposed by the Event object.\r\n    </p>\r\n    <p>\r\n\r\n        For a quick fix, check out the\r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#drag_effects\">a live demo</a> \r\n        of this feature, as well as the\r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/js/drag-effects.js\">associated JS code</a>.\r\n    </p><p>\r\n        The basic idea is that the <code>dragstart</code> event\r\n        listener can set a value for <code>effectAllowed</code> like so:\r\n    </p>\r\n\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;\r\nswitch (ev.target.id) {\r\n    case 'effectdrag0': dt.effectAllowed = 'copy'; break;\r\n    case 'effectdrag1': dt.effectAllowed = 'move'; break;\r\n    case 'effectdrag2': dt.effectAllowed = 'link'; break;\r\n    case 'effectdrag3': dt.effectAllowed = 'all'; break;\r\n    case 'effectdrag4': dt.effectAllowed = 'none'; break;\r\n}\r\n    </pre>\r\n    <p>The choices available for this property include the following:</p>\r\n    <dl> \r\n        <dt><code>none</code></dt><dd>no operation is permitted </dd>\r\n        <dt><code>copy</code></dt><dd>copy only </dd>\r\n\r\n        <dt><code>move</code></dt><dd>move only </dd>\r\n        <dt><code>link</code></dt><dd>link only </dd>\r\n        <dt><code>copyMove</code></dt><dd>copy or move only </dd>\r\n        <dt><code>copyLink</code></dt><dd>copy or link only </dd>\r\n        <dt><code>linkMove</code></dt><dd>link or move only </dd>\r\n\r\n        <dt><code>all</code></dt><dd>copy, move, or link </dd>\r\n    </dl>\r\n    <p>\r\n        On the other end, the <code>dragover</code> event listener \r\n        can set the value of the\r\n        <code>dropEffect</code> property to indicate the expected effect\r\n        invoked on a successful drop.  If the value does\r\n        not match up with <code>effectAllowed</code>, the drop will\r\n        be considered cancelled on completion.\r\n    </p><p>\r\n\r\n        In the \r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#drag_effects\">a live demo</a>,\r\n        you should be able to see that only elements with matching\r\n        effects can be dropped into the appropriate drop zones.  This\r\n        is accomplished with code like the following:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;\r\nswitch (ev.target.id) {\r\n    case 'effectdrop0': dt.dropEffect = 'copy'; break;\r\n    case 'effectdrop1': dt.dropEffect = 'move'; break;\r\n    case 'effectdrop2': dt.dropEffect = 'link'; break;\r\n    case 'effectdrop3': dt.dropEffect = 'all'; break;\r\n    case 'effectdrop4': dt.dropEffect = 'none'; break;\r\n}\r\n    </pre>\r\n    <p>\r\n        Although the OS itself can provide some feedback, you \r\n        can also use these properties to update your own visible \r\n        feedback, both on the dragged element and on the drop zone\r\n        itself.\r\n    </p>\r\n\r\n</div>\r\n\r\n<div id=\"conclusion\">\r\n    <h2>Conclusion</h2>\r\n    <p>\r\n        The new first-class drag and drop events in HTML5 and Firefox\r\n        make supporting this form of UI interaction simple, concise,\r\n        and powerful in the browser.  But beyond the new simplicity of\r\n        these events, the ability to transfer content between\r\n        applications opens brand new avenues for web-based applications\r\n        and collaboration with desktop software in general.\r\n    </p><p>\r\n    </p><p>\r\n    </p>\r\n</div>\r\n\r\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221090962\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://lmframework.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=03dc722b1852367f02b0b21f02b10675&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://lmframework.com\">David Semeria</a>\n                </div>\n                <a href=\"#comment-221090962\" class=\"permalink\"><time datetime=\"2009-07-16T17:56:52\">2009-07-16T17:56:52</time></a>\n            </div>\n            <div class=\"content\"><p>Wow - thanks for a great introduction to D+D in HTML 5, I'm really looking forward to giving it a thorough road test. </p>\n\n<p>The key part of the implementation are the target listeners, because, as I'm sure you're aware, onmouseover would historically never fire over the target element because the dragged item would always 'cover it up'. BTW, my proposed solution was to add an 'event transparency' property, which would have made the dragged item invisible from the point of view of selected events, eg onmouseover.</p>\n\n<p>This implementation is going to take a lot of pain away. You have no idea how many hoops I had to jump through to get a fully generic D+D implementation working without these new calls.</p>\n\n<p>If you're interested, you can see it working here: http://lmframework.com/page.php?id=vd_twig_short_2</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090964\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cee7ac3f63d7e8c1367e170bec302c14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Alex</a>\n                </div>\n                <a href=\"#comment-221090964\" class=\"permalink\"><time datetime=\"2009-07-17T00:13:23\">2009-07-17T00:13:23</time></a>\n            </div>\n            <div class=\"content\"><p>Hey,</p>\n\n<p>Looks great and useful article.  For dragging from external applications (such as the Desktop) is a normal webpage able to get the data from the drop?  I was just playing with it and seem to always get what seems to be a security error with getData or mozGetDataAt.  However, the documentation seems to state that on drop that data should be made available to the page.  Likewise, in the same way an image can be dragged off the page onto the desktop, can an arbitrary element be dragged onto the desktop with whatever file content to be saved?  Thanks for the help.</p>\n\n<p>Alex</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090966\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://paulisageek.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b3bb70a4bace7f9bd49f48b149ab95f9&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://paulisageek.com/\">Paul Tarjan</a>\n                </div>\n                <a href=\"#comment-221090966\" class=\"permalink\"><time datetime=\"2009-07-17T04:52:54\">2009-07-17T04:52:54</time></a>\n            </div>\n            <div class=\"content\"><p>Very nice, I didn't know that FF 3.5 actually had this implemented. Time to start playing :)</p>\n\n<p>Also, how did you do your code posts? Was it just pasting in HTML or do you have a better setup?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090967\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=066d1e75c9b938053ee6b3d48b1c0f6a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Animal</a>\n                </div>\n                <a href=\"#comment-221090967\" class=\"permalink\"><time datetime=\"2009-07-17T14:35:21\">2009-07-17T14:35:21</time></a>\n            </div>\n            <div class=\"content\"><p>Seems pretty pointless pressing ahead with this when you just can't write a web app to use it. There's no support. All a bunch of whizzy fun I'm sure, but sod-all use.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090969\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221090969\" class=\"permalink\"><time datetime=\"2009-07-17T16:23:10\">2009-07-17T16:23:10</time></a>\n            </div>\n            <div class=\"content\"><p>@Animal: Why can't you write a web app to use it?  It's in the HTML5 spec, works in Fx3.5 and Safari 4 / WebKit.  It doesn't have universal support yet, or course, but new standards never do.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090970\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.crearedesign.co.uk\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=87bf21798e390d9043dda7240c1b60f7&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.crearedesign.co.uk\">paul</a>\n                </div>\n                <a href=\"#comment-221090970\" class=\"permalink\"><time datetime=\"2009-07-21T08:08:26\">2009-07-21T08:08:26</time></a>\n            </div>\n            <div class=\"content\"><p>very nice indeed! i like this, it has definitely opened up new avenues for interaction without using flash. but it will take time before people upgrade to the new browser. a lot of people who browse the web wont realise what the technology will bring and will use their current browser because it does the job!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090971\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=04de859cfd6ef0b75e4ea3cbea143190&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Joel</a>\n                </div>\n                <a href=\"#comment-221090971\" class=\"permalink\"><time datetime=\"2009-07-21T14:36:04\">2009-07-21T14:36:04</time></a>\n            </div>\n            <div class=\"content\"><p>Excellent demos of the new features.</p>\n\n<p>When using a feedback image on a zoomed in page, should the image not also be scaled up automatically?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090973\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=41708\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6d3bf986abdbb431991c3b02eb6e2335&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=41708\">RenegadeX</a>\n                </div>\n                <a href=\"#comment-221090973\" class=\"permalink\"><time datetime=\"2009-07-22T04:13:46\">2009-07-22T04:13:46</time></a>\n            </div>\n            <div class=\"content\"><p>Dragging &amp; dropping <em>is</em> as you say, a \"one of the most fundamental interations\" that users of computer graphical interfaces have come to know, and expect.</p>\n\n<p>It therefore completes dumbfounds me how it is that we <em>still</em> can not natively drag &amp; scroll (&amp; then drop) in Firefox. We can only drag &amp; drop an item within the currently visible portion of a Firefox webpage or tab, no further up, no further down.</p>\n\n<p>That is should be limited makes absolutely no sense. Microsoft built the function into their Windows 3.x (file) Explorer, and then when visual browsers came along, naturally carried it through into Internet Explorer. </p>\n\n<p>Firefox Bug 41708, \"Should be able to scroll in the viewport while dragging\" was opened in June, 2000 (yes, 9 years ago!) and remains open, and is disregarded by Firefox developers as little more than a trivial little annoyance, and therefore is and should be treated as a low-importance 'enhancement' rather than as the 'standard feature' it should really be.</p>\n\n<p>If it weren't for the extension 'DragToScroll', which has been around for 3-1/2 years now (not updated in a long time but still works if you override version compatibility), I would have dumped Firefox and switched to a different browser (Maxthon 3, most likely).</p>\n\n<p>So, I'm wondering (and hoping) -- does the new HTML5 drag and drop specification include anything that if implemented properly would make it possible to scroll &amp; drag?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090974\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221090974\" class=\"permalink\"><time datetime=\"2009-07-22T13:57:42\">2009-07-22T13:57:42</time></a>\n            </div>\n            <div class=\"content\"><p>@RenegadeX: Ugh.  I don't work on the browser itself, but I noticed that unexpected behavior on drag &amp; drop.  The window really should scroll when you get toward the top or bottom while dragging - and, in fact, most pre-HTML5 JS frameworks do that in their own drag &amp; drop abstractions.  </p>\n\n<p>Until / unless Firefox gets this fixed, the same sort of auto-scrolling could be hacked in to HTML5 drag and drop.  Not perfect, but it's doable.  That is, in the drag event, you can check if the mouse is near the upper or lower edge of the viewport - and if so, start scrolling appropriately. That's pretty much how the JS frameworks do it with old-school D&D</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090975\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.copperbot.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=df48b2c2a3a2be51b1e15f10c5fb05da&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.copperbot.net\">CopperBot</a>\n                </div>\n                <a href=\"#comment-221090975\" class=\"permalink\"><time datetime=\"2009-07-23T21:41:07\">2009-07-23T21:41:07</time></a>\n            </div>\n            <div class=\"content\"><p>Very cool article! Thanks for sharing. HTML5 really is going to change everything about how we use and develop for the web. Pretty awesome!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090976\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.AmnesiaGames.cl\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=14ad888c23e28c85c222a73b6c633570&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.AmnesiaGames.cl\">Alexos</a>\n                </div>\n                <a href=\"#comment-221090976\" class=\"permalink\"><time datetime=\"2009-07-26T05:05:44\">2009-07-26T05:05:44</time></a>\n            </div>\n            <div class=\"content\"><p>Hi, would DD work for uploading files? How can I display a progress bar?\nThanks! \nI've been looking for that several days, and found only applets which I can't use in my proyect :-)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090977\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.sjlwebdesign.co.uk\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=185cd965e0e8ccd15df2f90977cbeaf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.sjlwebdesign.co.uk\">Sam</a>\n                </div>\n                <a href=\"#comment-221090977\" class=\"permalink\"><time datetime=\"2009-07-28T13:54:26\">2009-07-28T13:54:26</time></a>\n            </div>\n            <div class=\"content\"><p>Looks fantastic, going to try it out now (once I have upgraded my FF)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090978\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.dankantor.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=60fc8331f617fc905fd682bc4f41ce8d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.dankantor.com\">Dan Kantor</a>\n                </div>\n                <a href=\"#comment-221090978\" class=\"permalink\"><time datetime=\"2009-07-30T03:10:25\">2009-07-30T03:10:25</time></a>\n            </div>\n            <div class=\"content\"><p>Looks like effectAllowed and dropEffect are not working for FF 3.5 on the Mac. I see effects on Windows and Safari 4 on Mac. I've been playing around with adding borders to the drop target, but the + icon for copy really helps a lot. Hopefully Mozilla will fix this next update.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090979\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.thecssninja.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8677c9f7c0f6d947bf318c1430d00bfd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.thecssninja.com/\">Ryan</a>\n                </div>\n                <a href=\"#comment-221090979\" class=\"permalink\"><time datetime=\"2009-09-01T02:33:06\">2009-09-01T02:33:06</time></a>\n            </div>\n            <div class=\"content\"><p>Great article it's good to see developments in this area. I wrote an article on the further extensions Firefox 3.6 has done with the dataTransfer method by adding the file attribute so you can access local files and upload them without the need for file inputs. http://www.thecssninja.com/javascript/drag-and-drop-upload</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090982\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1ed4bbef573bfc014d32356d53103ca2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">phil swenson</a>\n                </div>\n                <a href=\"#comment-221090982\" class=\"permalink\"><time datetime=\"2009-09-03T22:58:36\">2009-09-03T22:58:36</time></a>\n            </div>\n            <div class=\"content\"><p>Why not a first class WYSIWYG rich text editor with copy from clipboard image support?  </p>\n\n<p><em>NO ONE</em> has built a decent text editor in JavaScript - At least not that I've seen.  And browsers don't allow image paste for reasons I don't understand.  </p>\n\n<p>And by decent I mean just like you'd get in textmate or another editor.  Have the standard text editor features everyone expects:  tab, select indent/select unindent, resize image, home, end, duplicate line, delete line, styling, etc.</p>\n\n<p>would push the browser to the next level in killing the desktop.  non-techies hate wikis.  They want a real editor.  I do too actually.... would be great for forums, bug tracking system (imagine pasting screen shots in line with your bug desc), email, etc.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090983\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=deed51cddc830e162557b8f01383a057&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Jean-Denis</a>\n                </div>\n                <a href=\"#comment-221090983\" class=\"permalink\"><time datetime=\"2009-09-04T00:23:39\">2009-09-04T00:23:39</time></a>\n            </div>\n            <div class=\"content\"><p>Francisco Tomalski wrote up a nice piece on HTML 5 drag'n drop at http://www.alertdebugging.com/2009/08/16/on-html-5-drag-and-drop/</p>\n\n<p>where he uncovers that the proposed standard is partially broken. Any comment on his piece?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090984\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://html5tutorial.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3876e030a3fc69a8b59a8c55829fb510&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://html5tutorial.net/\">Lisa</a>\n                </div>\n                <a href=\"#comment-221090984\" class=\"permalink\"><time datetime=\"2009-09-09T07:33:08\">2009-09-09T07:33:08</time></a>\n            </div>\n            <div class=\"content\"><p>This is a great move forward no more relying on 3rd party apps and extensions to play video or audio, i have been reading up on HTML 5 at the <a href=\"http://html5tutorial.net/\" title=\"HTML tutorials\" rel=\"nofollow\">HTML 5 Tutorials</a> website, i am now playing around with one of the free templates and was wondering how to embed audio, so thanks a lot, great information, lets hope more people lean towards HTML 5 and SOON!!!</p>\n\n<p>The drag and drop feature i did not notice was already working in FF 3.5, i was told to get Safari to see HTML 5 in action. Thanks for a great post</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090985\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.useragentman.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=9a579fa051b35266678735c8a3751771&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.useragentman.com\">Zoltan Hawryluk</a>\n                </div>\n                <a href=\"#comment-221090985\" class=\"permalink\"><time datetime=\"2010-01-11T15:14:48\">2010-01-11T15:14:48</time></a>\n            </div>\n            <div class=\"content\"><p>A million thank yous!  This article was great introduction to HTML5 D+D.  With it, I was able to extend it to other browsers.  It was a little painful at first because the browser implementations diverge in significant, but manageable ways.</p>\n\n<p>If you are interested, check out my article at http://www.useragentman.com/blog/2010/01/10/cross-browser-html5-drag-and-drop/ if you are interested in my results.</p>\n\n<p>I noticed you haven't blogged in a while - I hope you haven't stopped totally and continue to share with the webdev community.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090986\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.lingua-franka.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e65f416e42c12571ba1c86ae2dadd99f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.lingua-franka.com\">Raul</a>\n                </div>\n                <a href=\"#comment-221090986\" class=\"permalink\"><time datetime=\"2011-04-26T23:56:02\">2011-04-26T23:56:02</time></a>\n            </div>\n            <div class=\"content\"><p>Hi, Leslie. I've just come across a problem that's driving me nuts. I'm not fully comfortable with D&amp;D, but managed to move a crosshairs image over a map to very precisely controlled positions. It worked great on FF 3.6 and FF 4. After a couple of days of successful testing, the image suddenly refused to de dropped after being dragged (it rather flew back to its previous position). Do you know if there is a bug in FF that might cause this? </p>\n\n<p>BTW, during the programming process I updated Firebug, which also is getting a little cranky.</p>\n\n<p>Thanks for your prompt answer, Raul</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-324410737\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/google-4014af7ac4ea5d00df95bef4503b78dd.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Alexander Plutov</a>\n                </div>\n                <a href=\"#comment-324410737\" class=\"permalink\"><time datetime=\"2011-10-01T11:51:12\">2011-10-01T11:51:12</time></a>\n            </div>\n            <div class=\"content\">Good post about Drag & Drop http://plutov.by/post/html5_drag_and_drop</div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2009",
    "path": "2009/07/15/html5-drag-and-drop",
    "summary": "<p><i>\nOh hey, look! It&apos;s another blog post&#x2014;and this one\n<a href=\"http://hacks.mozilla.org/2009/07/html5-drag-and-drop/\">is cross-posted on hacks.mozilla.com</a>.\nI won&apos;t say this is the start of a renewed blogging habit, but let&apos;s see what happens.\n</i></p>\n\n<style type=\"text/css\">\ndl { margin-left: 2em; }\ndd { margin-left: 2em; margin-bottom: 0.25em; }\n</style>\n<div id=\"introduction\">\n    <p>\n        Drag and drop is one of the most fundamental interactions\n        afforded by graphical user interfaces.  In one gesture, it\n        allows users to pair the selection of an object with the\n        execution of an action, often including a second object in the\n        operation.  It&apos;s a simple yet powerful UI concept used to\n        support copying, list reordering, deletion (ala the Trash / Recycle Bin),\n        and even the creation of link relationships.\n    </p><p>\n        Since it&apos;s so fundamental, offering drag and drop in web\n        applications has been a no-brainer ever since browsers first\n        offered mouse events in DHTML.  But, although\n        <code>mousedown</code>, <code>mousemove</code>, and\n        <code>mouseup</code> made it possible, the implementation has been\n        limited to the bounds of the browser window.  Additionally,\n        since these events refer only to the object being dragged,\n        there&apos;s a challenge to find the subject of the drop when\n        the interaction is completed.\n    </p><p>\n\n</p><pre><code>    Of course, that doesn&apos;t prevent most modern JavaScript\n    frameworks from abstracting away most of the problems and\n    throwing in some flourishes while they&apos;re at it.  But, wouldn&apos;t\n    it be nice if browsers offered first-class support for drag and\n    drop, and maybe even extended it beyond the window sandbox?\n&lt;/p&gt;&lt;p&gt;\n    As it turns out, this very wish is answered by the HTML 5 specification \n    &lt;a target=&quot;_new&quot; href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#dnd&quot;&gt;section on new drag-and-drop events&lt;/a&gt;, and \n    &lt;a target=&quot;_new&quot; href=&quot;https://developer.mozilla.org/En/DragDrop/Drag_and_Drop&quot;&gt;Firefox 3.5 includes an implementation&lt;/a&gt; of those events.\n&lt;/p&gt;&lt;p&gt;\n    If you want to jump straight to the code, I&apos;ve put together \n    &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html&quot;&gt;some simple demos&lt;/a&gt; \n    of the new events.  \n&lt;/p&gt;&lt;p&gt;\n\n    I&apos;ve even scratched an itch of my own and\n    built &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/outline.html&quot;&gt;the beginnings of an outline editor&lt;/a&gt;,\n    where every draggable element is also a drop target&#x2014;of which\n    there could be dozens to hundreds in a complex document, something\n    that gave me some minor hair-tearing moments in the past\n    while trying to make do with plain old mouse events.\n&lt;/p&gt;&lt;p&gt;\n    And, all the above can be downloaded or cloned from \n    &lt;a href=&quot;http://github.com/lmorchard/fx35-drag-and-drop&quot;&gt;a GitHub repository&lt;/a&gt;\n    I&apos;ve created especially for this article&#x2014;which continues after the jump.\n&lt;/p&gt;</code></pre>\n</div>\n\n"
  },
  {
    "comments_archived": true,
    "date": "2009-04-13T05:05:50.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "twitter",
      "entries",
      "revcanonical",
      "urls",
      "urlshortening"
    ],
    "title": "I (used to) like rev=\"canonical\"",
    "wordpress_id": 1735,
    "wordpress_slug": "i-like-revcanonical",
    "wordpress_url": "http://decafbad.com/blog/?p=1735",
    "year": "2009",
    "month": "04",
    "day": "13",
    "isDir": false,
    "slug": "i-like-revcanonical",
    "postName": "2009-04-13-i-like-revcanonical",
    "html": "<p><em>Update 4/14</em>: So, I liked <code>rev=&quot;canonical&quot;</code>, but I like the notion of pages offering sets of alternative URLs better.  <a href=\"http://www.mnot.net/blog/2009/04/14/rev_canonical_bad\">There are enough cracks in the case</a> for <code>rev=&quot;canonical&quot;</code> to stop caring about it and instead focus on the notion behind it.  However it&#39;s expressed—is it <a href=\"http://groups.google.com/group/shortlink\"><code>rel=&quot;shortlink&quot;</code></a> now?—the final remaining things I&#39;d like to see are:</p>\n<ul>\n<li><p>An more generalized scope for alternate URL choices asserted by publishers, not just URL shortening.  Other criteria beyond character length include ease of entry on mobile devices (eg. short, but also simple, maybe mostly numeric), ease of verbal mention (eg. billboards, postcards, etc).</p>\n</li>\n<li><p>HTTP headers are great where available—hooray for HEAD—but it still needs to be in the page for publishers who can&#39;t set custom headers.</p>\n</li>\n<li><p>Microformats are great, but I&#39;d rather not parse a whole page to the footer to lift out the desired URLs.</p>\n</li>\n<li><p>Don&#39;t panic. Have fun.</p>\n</li>\n</ul>\n<p>And with that, I&#39;m going to try coming up with other things to write about so this blog doesn&#39;t stay dormant.  The rest of this entry remains unedited below...</p>\n<!--more-->\n<hr />\n\n<p><strike>So, like it says up there: I like <a href=\"http://revcanonical.appspot.com/\">rev=&quot;canonical&quot;</a>.</strike></p>\n<p>Basically, it&#39;s a way of saying—instead of using that 3rd-party service <em>you</em> like for munging <em>my</em> URLs, use one of these pre-munged URLs I&#39;ve provided.  Ideally, the URLs I provide will be shorter for your needs, but my URLs won&#39;t be subject to <a href=\"http://joshua.schachter.org/2009/04/on-url-shorteners.html\">potentially distasteful things I object to with respect to a service you might pick</a>.</p>\n<p>I like keeping control of URL spaces in the hands of their publishers.  This also opens the field for more individual choice in URL shortening services, allowing more people to try their hand at building a better mouse trap—or allowing publishers to opt out of the mess altogether.  </p>\n<p>And, apropos of that, I tend to like <code>rev=&quot;canonical&quot;</code> as the means of expressing this choice.</p>\n<p>There&#39;s a lot more background on this whole shebang, but I&#39;ll just stick to my $0.02 on the discussion so far.</p>\n<h3 id=\"its-too-alpha-geeky-to-get-adoptedalso-nerds\"><a href=\"http://www.25hoursaday.com/weblog/2009/04/11/revcanonicalDiggBarOutrageCausesBadIdeasToComeOutOfTheWoodWork.aspx\">It&#39;s too alpha geeky to get adopted—also: NERDS!</a></h3>\n<p>Alpha geeks write plugins for web publishing systems used by less-alpha geeks, who eventually install web publishing systems for those even further down the geek scale.  It&#39;s not unheard of for something incredibly nerdy to become relatively common, if it proves useful.</p>\n<p>Feed auto-discovery is in blogging software and browsers now—it was once considered a somewhat arcane usage of the <code>rel</code> attribute on <code>&lt;link&gt;</code> tags in HTML <code>&lt;head&gt;</code>.</p>\n<h3 id=\"everyone-needs-to-implement-their-own-url-shortener\"><a href=\"http://www.25hoursaday.com/weblog/2009/04/11/revcanonicalDiggBarOutrageCausesBadIdeasToComeOutOfTheWoodWork.aspx\">Everyone needs to implement their own URL shortener.</a></h3>\n<p>No, but everyone gets to pick a shortener for their own URLs—which could coincidentally be self-hosted or third-party.  Isn&#39;t the web great?</p>\n<h3 id=\"the-rev-attribute-is-too-hard-to-understand-people-will-get-it-wrong\"><a href=\"http://benramsey.com/archives/a-revcanonical-rebuttal/\">The <code>rev</code> attribute is too hard to understand, people will get it wrong</a>.</h3>\n<p>I hadn&#39;t paid much attention to the <code>rev</code> attribute until a week or so ago.  I <a href=\"http://www.w3.org/TR/html401/struct/links.html#adef-rev\">read the HTML spec on links</a> again.  Within 10 minutes of reading the spec, my understanding became this:</p>\n<ul>\n<li><code>rel=&quot;{X}&quot;</code> — &quot;this link means {X} in relation to the current page&quot;.</li>\n<li><code>rev=&quot;{X}&quot;</code> — &quot;this current page means {X} in relation to this link&quot;.</li>\n</ul>\n<p>I may have misunderstood it—if so, explain to me how and I&#39;ll admit it&#39;s harder to understand than I think.  There are harder concepts in the HTML 4 spec.</p>\n<h3 id=\"the-rev-attribute-is-removed-in-html5\">The <code>rev</code> attribute is removed in HTML5</h3>\n<p>That&#39;s too bad for HTML5.  </p>\n<p><a href=\"http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2006-July/006888.html\">The rationale given for the removal</a> seems sensible enough.  But, I&#39;d say the rationale for removal is weakened if someone finds a use for the attribute and uses it correctly.</p>\n<h3 id=\"relshorter--relshort-is-better-and-more-explicit\"><code>rel=&quot;shorter&quot;</code> / <code>rel=&quot;short&quot;</code> is better and more explicit.</h3>\n<p>I like this idea in general, and I don&#39;t <em>really</em> care strongly enough about <code>rev=&quot;canonical&quot;</code> vs <code>rel=&quot;short&quot;</code> to make much noise beyond this blog post.  </p>\n<p>But, I prefer the semantics of <code>rev=&quot;canonical&quot;</code>, I don&#39;t think <code>rel=&quot;short(er)&quot;</code> is better, and actually I think the less explicit assertion is a feature.  I&#39;ve not yet been convinced otherwise—but realistically, if either catches on, I&#39;ll probably use the most popular.</p>\n<h3 id=\"revcanonical-doesnt-mean-shorter-url\"><code>rev=&quot;canonical&quot;</code> doesn&#39;t mean &quot;shorter URL&quot;</h3>\n<p>That&#39;s okay—what if I don&#39;t <em>want</em> you to have shortened versions of my URLs?  Doesn&#39;t fit in your tweet?  Screw you.  I didn&#39;t want you to link to me that badly anyway.  Bah.  </p>\n<p>That, of course, is self-defeating.  Conventional use of the attribute will probably yield shorter URLs out of self-interest.  Furthermore, I could even offer a half-dozen URL variations, and you could use the string length function in the language of your choice to pick one on the basis of shortness.  There&#39;s a lot of choice to go around here.</p>\n<p>Also, feed auto-discovery links don&#39;t always lead to truly alternate versions of the current page—but instead to a useful set of items, many of which may currently appear somewhere on the page.  So, even the &quot;clear&quot; semantics have some play in them as used in the wild.</p>\n<h3 id=\"a-revcanonical-http-header-is-better\"><a href=\"http://shiflett.org/blog/2009/apr/a-rev-canonical-http-header\">A <code>rev=&quot;canonical&quot;</code> HTTP header is better.</a></h3>\n<p>Hmm, maybe.  It would certainly allow for possibly lighter-weight HEAD requests in determining the alternative URL for a given URL.  But, I would expect it to fall apart in collections of static HTML pages baked by an offline script where web server configuration might not make setting custom headers easy.</p>\n<p>Not everyone has the luxury / inclination to have a dynamic language capable of setting headers running in their web server.</p>\n<h3 id=\"revcanonical-should-appear-on-hyperlinks-in-the-body-of-the-page\"><a href=\"http://adactio.com/journal/1568/\"><code>rev=&quot;canonical&quot;</code> should appear on hyperlinks in the body of the page</a></h3>\n<p><a href=\"http://decafbad.com/blog/2005/05/08/whats-old-scraping-is-new-again-microformats\">I like microformats</a>, <a href=\"http://decafbad.com/blog/2005/05/17/magic-microformat-forms\">in general</a>.  But, I don&#39;t really want to potentially parse a whole page to find the shorter URL that might be in the footer.  With <code>rev=&quot;canonical&quot;</code> in the <code>&lt;head&gt;</code>, I only have to parse so far before I find it or give up.</p>\n<p>There&#39;s a lot of prior art on this with relation to feed autodiscovery—we used to mainly look for RSS feed URLs inside the page, too.  It sucked.</p>\n<h3 id=\"claiming-to-be-canonical-for-another-url-is-trouble\"><a href=\"http://benramsey.com/archives/a-revcanonical-rebuttal/#comment-288465\">Claiming to be canonical for another URL is trouble.</a></h3>\n<p>Okay, how about requiring a reciprocal <code>rel=&quot;canonical&quot;</code> on the same page with <code>rev=&quot;canonical&quot;</code>.</p>\n<p>Trust but verify—and only accept <code>rev=&quot;canonical&quot;</code> where <code>rel=&quot;canonical&quot;</code> matches the current URL <em>and</em> <code>rev=&quot;canonical&quot;</code> yields a 301 redirect to the <code>rel=&quot;canonical&quot;</code>.</p>\n<p>I can&#39;t see this verification process being necessarily more burdensome than using a 3rd-party shortener API—and that&#39;s <em>if</em> you&#39;re paranoid and building an index that needs some measure of resistance to gaming.</p>\n<h3 id=\"a-single-character-slip-from-revcanonical-to-relcanonical-could-wreck-your-googlejuice\"><a href=\"http://samj.net/2009/04/revcanonical-considered-harmful.html?showComment=1239617160000#c7231589643969293690\">A single character slip from <code>rev=&quot;canonical&quot;</code> to <code>rel=&quot;canonical&quot;</code> could wreck your Googlejuice!</a></h3>\n<p>So, don&#39;t do that.  </p>\n<p>Maybe Googlejuice should be more resilient.  Maybe it actually is—has anyone actually soured their juice yet with a mistake like this and lived to tell the tale?  </p>\n<p>Either way, characters mean things in computer languages, so make sure you use the right ones in the right order.</p>\n<h3 id=\"you-guys-are-moving-on-this-stuff-too-fast\">You guys are moving on this stuff too fast!</h3>\n<p>Welcome to 2002, when lots of us had more spare time than employment and we deployed new crap like this on our blogs and sites daily.  </p>\n<p>Back in those olden days, we manipulated raw HTML with our bare hands and deployed radioactive code using our teeth—all without benefit of protective change control.  We probably all have cancer of the access logs now, but it was all in the name of Web Science!</p>\n<h3 id=\"too-long-didnt-read\">Too long; didn&#39;t read</h3>\n<p>So, yeah.  I like the idea behind <code>rev=&quot;canonical&quot;</code> and I prefer its expression as <code>rev=&quot;canonical&quot;</code> best—but the idea is the important thing.  Let&#39;s get over the expression part fast and spend more time exploring the nuts and bolts and implications of the concept itself.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221091011\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://pigsonthewing.org.uk/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4e160e713acf1ab8547d1c36233389c3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://pigsonthewing.org.uk/\">http://pigsonthewing.org.uk/</a>\n</div>\n<a href=\"#comment-221091011\" class=\"permalink\"><time datetime=\"2009-04-13T14:00:04\">2009-04-13T14:00:04</time></a>\n</div>\n<div class=\"content\"><p>Forget rel=\"short\" or rel=\"shorter\". Try rel=\"shortcut\".</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091013\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221091013\" class=\"permalink\"><time datetime=\"2009-04-13T14:22:53\">2009-04-13T14:22:53</time></a>\n</div>\n<div class=\"content\"><p>...or I could try rev=\"canonical\" like I said up there.  An actual rationale might be more productive here.  :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091015\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://spindrop.us/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=35b8de09a3685277188d8b8be0e5e3ac&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://spindrop.us/\">Dave Dash</a>\n</div>\n<a href=\"#comment-221091015\" class=\"permalink\"><time datetime=\"2009-04-13T14:37:21\">2009-04-13T14:37:21</time></a>\n</div>\n<div class=\"content\"><p>So yes, you are understanding \"rev\" correctly per the spec.  The problem I have is this:</p>\n<p>rel=canonical was introduced so when people went to various urls that a search engine would know that the url specified in rel=canonical was the real one.  Let's do this to make life easier:</p>\n<p>http://foo.com/A\nand \nhttp://foo.com/B</p>\n<p>both go to the exact same page, and the publisher can't for some reason redirect to the canonicalized page (maybe it's amazon and they have stupid large urls with affiliate codes).</p>\n<p>so if the former is canonical then this is present:</p>\n<p></p>\n<p>whether you go to /A or /B.</p>\n<p>if they use rev=\"canonical\":</p>\n<p></p>\n<p>Should only be shown if they are visitng /A not /B otherwise that rev statement implies that /A or /B are the canonical forms of \"http://f.us/A\".</p>\n<p>I think that's why the rev attribute isn't a very good one.  Honestly I liked the suggestion (you made it maybe) for using rel=\"shortcut alternative\" or something.</p>\n<p>Am I seeing potential ambiguity when there isn't?</p>\n<p>-d</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091016\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221091016\" class=\"permalink\"><time datetime=\"2009-04-13T15:36:42\">2009-04-13T15:36:42</time></a>\n</div>\n<div class=\"content\"><p>@Dave: I think you may have used some markup in your comment that got filtered out - I'm not exactly sure what you mean. :/</p>\n<p>If we have this URL:</p>\n<p>http://example.com/this/url/is/too/long</p>\n<p>With these links in the head:</p>\n<blockquote>\n<p>rel=\"canonical\" href=\"http://example.com/this/url/is/too/long\"\nrev=\"canonical\" href=\"http://ex.pl/ab\"</p>\n</blockquote>\n<p>Then, the URL http://ex.pl/ab will ideally lead to a 301 redirect.  But, if not, it should have the same content as http://example.com/this/url/is/too/long — and therefore list the same reciprocal \"canonical\" relationship that leads back to the original page.</p>\n<p>That seems disambiguated to me—even more so than <code>rel=\"shorter\"</code> or whatnot.  If the URL for a <code>rel=\"shorter\"</code> link didn't yield a redirect, we'd never know what was the original page without a corresponding <code>rel=\"canonical\"</code> anyway.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091017\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n</div>\n<a href=\"#comment-221091017\" class=\"permalink\"><time datetime=\"2009-04-14T01:59:04\">2009-04-14T01:59:04</time></a>\n</div>\n<div class=\"content\"><p>LOL at \"soured their juice.\" Well written and well reasoned as usual, Les.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091018\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://samj.net/\"><img src=\"http://disqus.com/api/users/avatars/samj.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://samj.net/\">samj</a>\n</div>\n<a href=\"#comment-221091018\" class=\"permalink\"><time datetime=\"2009-04-14T02:39:30\">2009-04-14T02:39:30</time></a>\n</div>\n<div class=\"content\"><p>I've comprehensively rebutted your argument <a href=\"http://groups.google.com/group/shortlink/browse_thread/thread/885894c42cbdf8ad/d50be9d1c74bad7a?#d50be9d1c74bad7a\" rel=\"nofollow\">over there</a> so I'm not going to do it again here, except to say that given you concede that rel=short* is just as good as rev=canonical, only it's a&gt; not deprecated and b&gt; cannot possibly make sites drop off the face of the Internet, why do you even care enough to write this blog post?</p>\n<p>Sam</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091020\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://samj.net/\"><img src=\"http://disqus.com/api/users/avatars/samj.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://samj.net/\">samj</a>\n</div>\n<a href=\"#comment-221091020\" class=\"permalink\"><time datetime=\"2009-04-14T02:42:35\">2009-04-14T02:42:35</time></a>\n</div>\n<div class=\"content\"><p>Oh, and let's not forget that you can only use this \"solution\" on the canonical URL itself since it implies that the page it is attached to is itself canonical. That means you're going to have to find another solution for a potentially infinite number of other links to the same content, or risk leaking google juice all over the place.</p>\n<p>Sam</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091023\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221091023\" class=\"permalink\"><time datetime=\"2009-04-14T03:51:48\">2009-04-14T03:51:48</time></a>\n</div>\n<div class=\"content\"><blockquote>\n<p>why do you even care enough to write this blog post?</p>\n</blockquote>\n<p>Because <a href=\"http://xkcd.com/386/\" rel=\"nofollow\">someone is wrong on the Internet</a>!  And I haven't blogged in awhile, so I needed an excuse.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091024\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://spindrop.us/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=35b8de09a3685277188d8b8be0e5e3ac&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://spindrop.us/\">Dave Dash</a>\n</div>\n<a href=\"#comment-221091024\" class=\"permalink\"><time datetime=\"2009-04-14T04:15:57\">2009-04-14T04:15:57</time></a>\n</div>\n<div class=\"content\"><p>Les,</p>\n<p>I not good with words today.  I was trying to say what Sam said:</p>\n<p>\"this “solution” on the canonical URL itself since it implies that the page it is attached to is itself canonical\"</p>\n<p>Hence, I'd stick with a solution that uses rel - so long as we can just pick an attribute \"shorter alternative\" or whatever that we can agree on :)</p>\n<p>-d</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091026\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://erikvold.com/index.cfm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8fa21a16e24905fba4413501e3afb36e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://erikvold.com/index.cfm\">Erik Vold</a>\n</div>\n<a href=\"#comment-221091026\" class=\"permalink\"><time datetime=\"2009-04-21T03:47:01\">2009-04-21T03:47:01</time></a>\n</div>\n<div class=\"content\"><p>Nice rebuttal to all of this rev=canonical opposition, but you gave in man wth?!</p>\n<p>Let me try to back you up a bit, maybe you'll agree with your gut again.</p>\n<p>First I must start with the removal of @rev in html 5. That was an amazingly dumb move, luckily it is a draft still is all I can say. Here is why I believe this:\n1) 1 char diff argument: shut up you nub programmers\n2) misuse: it's night vs day, black vs white, there is no gray area except that which your confused minds have created. The confusion -I think- usually comes in to play when considering a value, which is easy if you truly understand the diff between @rel and @rev.\n3) @rev values can be represented as @rel values: sure I agree but this can not be true without adding more rel values then are necessary with a @rev which is already in the html 4 spec for a reason. If you remove something with use you cause confusion on multiple fronts: first people have to become aware of the change, then they need to understand why the change was made, then they need to make the changes to their code base, and finally when they want to express rev=canonical with a @rel value, debates over what best @rel value represents the equivalent of another @rel value if it were used in @rev occur..</p>\n<p>I submit the debate which the opposition to rev=canonical are having over rel=short* as evidence that @rev is required. A link with rev=canonical that is short is a short url of the canonical url by definition, thus rel=short* is redundant for the use case of discovering a short url for the canonical url of some document. Albeit, I think rel=shorturl (or whatever is finally decided on) could be used by the publisher to indicate a preferred short url(s), if say there were &gt;1 rev=canonical.</p>\n<p>In an algorithm to discover a short url for a document one method could be to scan all links and find the shortest rev=canonical, or if a rel=shorturl is provided then use that and stop scanning immediately. My point is that rev=canonical should be used. Also rel=shorturl adds a marginal benefit to rev=canonical.</p>\n<p>Another point, a rel=shorturl is rev=canonical by definition, thus if you were to use rel=shorturl and @rev were alive and well as it should be, you should automatically add rev=canonical (even though it is implied).</p>\n<p>Another argument the opposition make to using rev=canonical is that the number of rev=canonical's are possibly infinite, so I say only list the rev=canonical's which a user may find of interest for the use cases you can imagine.</p>\n<p>Another case for using rev=canonical is using rev=canonical with rel=mobile perhaps? so that a user can scan rev=canonical's for a rel=mobile url which is short enough to fit in the newest microblog gadget. Where a rel=mobile without rev=canonical could be the mobile site's homepage, even better for this link would be rel=\"mobile home\" without rev=canonical.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091029\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://erikvold.com/index.cfm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8fa21a16e24905fba4413501e3afb36e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://erikvold.com/index.cfm\">Erik Vold</a>\n</div>\n<a href=\"#comment-221091029\" class=\"permalink\"><time datetime=\"2009-04-21T05:17:14\">2009-04-21T05:17:14</time></a>\n</div>\n<div class=\"content\"><p>The reasons why I like rev=canonical: http://erikvold.com/blog/index.cfm/2009/4/21/rev_canonical_good</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091030\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221091030\" class=\"permalink\"><time datetime=\"2009-04-28T05:31:35\">2009-04-28T05:31:35</time></a>\n</div>\n<div class=\"content\"><p>@Erik: Well, I \"gave in\" mainly because I wasn't really looking for a fight and had a vacation to attend to.</p>\n<p>After that, the amount of hyperbolic stop energy being slung around rel=short{foo} has exhausted my care for the subject.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "*Update 4/14*: So, I liked `rev=\"canonical\"`, but I like the notion of pages offering sets of alternative URLs better.  [There are enough cracks in the case](http://www.mnot.net/blog/2009/04/14/rev_canonical_bad) for `rev=\"canonical\"` to stop caring about it and instead focus on the notion behind it.  However it's expressed—is it [`rel=\"shortlink\"`](http://groups.google.com/group/shortlink) now?—the final remaining things I'd like to see are:\r\n\r\n* An more generalized scope for alternate URL choices asserted by publishers, not just URL shortening.  Other criteria beyond character length include ease of entry on mobile devices (eg. short, but also simple, maybe mostly numeric), ease of verbal mention (eg. billboards, postcards, etc).\r\n\r\n* HTTP headers are great where available—hooray for HEAD—but it still needs to be in the page for publishers who can't set custom headers.\r\n\r\n* Microformats are great, but I'd rather not parse a whole page to the footer to lift out the desired URLs.\r\n\r\n* Don't panic. Have fun.\r\n\r\nAnd with that, I'm going to try coming up with other things to write about so this blog doesn't stay dormant.  The rest of this entry remains unedited below...\r\n\r\n<!--more-->\r\n<hr />\r\n\r\n<strike>So, like it says up there: I like [rev=\"canonical\"](http://revcanonical.appspot.com/).</strike>\r\n\r\nBasically, it's a way of saying—instead of using that 3rd-party service *you* like for munging *my* URLs, use one of these pre-munged URLs I've provided.  Ideally, the URLs I provide will be shorter for your needs, but my URLs won't be subject to [potentially distasteful things I object to with respect to a service you might pick](http://joshua.schachter.org/2009/04/on-url-shorteners.html).\r\n\r\nI like keeping control of URL spaces in the hands of their publishers.  This also opens the field for more individual choice in URL shortening services, allowing more people to try their hand at building a better mouse trap—or allowing publishers to opt out of the mess altogether.  \r\n\r\nAnd, apropos of that, I tend to like `rev=\"canonical\"` as the means of expressing this choice.\r\n\r\nThere's a lot more background on this whole shebang, but I'll just stick to my $0.02 on the discussion so far.\r\n\r\n### [It's too alpha geeky to get adopted—also: NERDS!](http://www.25hoursaday.com/weblog/2009/04/11/revcanonicalDiggBarOutrageCausesBadIdeasToComeOutOfTheWoodWork.aspx)\r\n\r\nAlpha geeks write plugins for web publishing systems used by less-alpha geeks, who eventually install web publishing systems for those even further down the geek scale.  It's not unheard of for something incredibly nerdy to become relatively common, if it proves useful.\r\n\r\nFeed auto-discovery is in blogging software and browsers now—it was once considered a somewhat arcane usage of the `rel` attribute on `<link>` tags in HTML `<head>`.\r\n\r\n### [Everyone needs to implement their own URL shortener.](http://www.25hoursaday.com/weblog/2009/04/11/revcanonicalDiggBarOutrageCausesBadIdeasToComeOutOfTheWoodWork.aspx)\r\n\r\nNo, but everyone gets to pick a shortener for their own URLs—which could coincidentally be self-hosted or third-party.  Isn't the web great?\r\n\r\n### [The `rev` attribute is too hard to understand, people will get it wrong](http://benramsey.com/archives/a-revcanonical-rebuttal/).\r\n\r\nI hadn't paid much attention to the `rev` attribute until a week or so ago.  I [read the HTML spec on links](http://www.w3.org/TR/html401/struct/links.html#adef-rev) again.  Within 10 minutes of reading the spec, my understanding became this:\r\n\r\n* `rel=\"{X}\"` — \"this link means {X} in relation to the current page\".\r\n* `rev=\"{X}\"` — \"this current page means {X} in relation to this link\".\r\n\r\nI may have misunderstood it—if so, explain to me how and I'll admit it's harder to understand than I think.  There are harder concepts in the HTML 4 spec.\r\n\r\n### The `rev` attribute is removed in HTML5\r\n\r\nThat's too bad for HTML5.  \r\n\r\n[The rationale given for the removal](http://lists.whatwg.org/pipermail/whatwg-whatwg.org/2006-July/006888.html) seems sensible enough.  But, I'd say the rationale for removal is weakened if someone finds a use for the attribute and uses it correctly.\r\n\r\n### `rel=\"shorter\"` / `rel=\"short\"` is better and more explicit.\r\n\r\nI like this idea in general, and I don't *really* care strongly enough about `rev=\"canonical\"` vs `rel=\"short\"` to make much noise beyond this blog post.  \r\n\r\nBut, I prefer the semantics of `rev=\"canonical\"`, I don't think `rel=\"short(er)\"` is better, and actually I think the less explicit assertion is a feature.  I've not yet been convinced otherwise—but realistically, if either catches on, I'll probably use the most popular.\r\n\r\n### `rev=\"canonical\"` doesn't mean \"shorter URL\"\r\n\r\nThat's okay—what if I don't *want* you to have shortened versions of my URLs?  Doesn't fit in your tweet?  Screw you.  I didn't want you to link to me that badly anyway.  Bah.  \r\n\r\nThat, of course, is self-defeating.  Conventional use of the attribute will probably yield shorter URLs out of self-interest.  Furthermore, I could even offer a half-dozen URL variations, and you could use the string length function in the language of your choice to pick one on the basis of shortness.  There's a lot of choice to go around here.\r\n\r\nAlso, feed auto-discovery links don't always lead to truly alternate versions of the current page—but instead to a useful set of items, many of which may currently appear somewhere on the page.  So, even the \"clear\" semantics have some play in them as used in the wild.\r\n\r\n### [A `rev=\"canonical\"` HTTP header is better.](http://shiflett.org/blog/2009/apr/a-rev-canonical-http-header)\r\n\r\nHmm, maybe.  It would certainly allow for possibly lighter-weight HEAD requests in determining the alternative URL for a given URL.  But, I would expect it to fall apart in collections of static HTML pages baked by an offline script where web server configuration might not make setting custom headers easy.\r\n\r\nNot everyone has the luxury / inclination to have a dynamic language capable of setting headers running in their web server.\r\n\r\n### [`rev=\"canonical\"` should appear on hyperlinks in the body of the page](http://adactio.com/journal/1568/)\r\n\r\n[I like microformats](http://decafbad.com/blog/2005/05/08/whats-old-scraping-is-new-again-microformats), [in general](http://decafbad.com/blog/2005/05/17/magic-microformat-forms).  But, I don't really want to potentially parse a whole page to find the shorter URL that might be in the footer.  With `rev=\"canonical\"` in the `<head>`, I only have to parse so far before I find it or give up.\r\n\r\nThere's a lot of prior art on this with relation to feed autodiscovery—we used to mainly look for RSS feed URLs inside the page, too.  It sucked.\r\n\r\n### [Claiming to be canonical for another URL is trouble.](http://benramsey.com/archives/a-revcanonical-rebuttal/#comment-288465)\r\n\r\nOkay, how about requiring a reciprocal `rel=\"canonical\"` on the same page with `rev=\"canonical\"`.\r\n\r\nTrust but verify—and only accept `rev=\"canonical\"` where `rel=\"canonical\"` matches the current URL *and* `rev=\"canonical\"` yields a 301 redirect to the `rel=\"canonical\"`.\r\n\r\nI can't see this verification process being necessarily more burdensome than using a 3rd-party shortener API—and that's *if* you're paranoid and building an index that needs some measure of resistance to gaming.\r\n\r\n### [A single character slip from `rev=\"canonical\"` to `rel=\"canonical\"` could wreck your Googlejuice!](http://samj.net/2009/04/revcanonical-considered-harmful.html?showComment=1239617160000#c7231589643969293690)\r\n\r\nSo, don't do that.  \r\n\r\nMaybe Googlejuice should be more resilient.  Maybe it actually is—has anyone actually soured their juice yet with a mistake like this and lived to tell the tale?  \r\n\r\nEither way, characters mean things in computer languages, so make sure you use the right ones in the right order.\r\n\r\n### You guys are moving on this stuff too fast!\r\n\r\nWelcome to 2002, when lots of us had more spare time than employment and we deployed new crap like this on our blogs and sites daily.  \r\n\r\nBack in those olden days, we manipulated raw HTML with our bare hands and deployed radioactive code using our teeth—all without benefit of protective change control.  We probably all have cancer of the access logs now, but it was all in the name of Web Science!\r\n\r\n### Too long; didn't read\r\n\r\nSo, yeah.  I like the idea behind `rev=\"canonical\"` and I prefer its expression as `rev=\"canonical\"` best—but the idea is the important thing.  Let's get over the expression part fast and spend more time exploring the nuts and bolts and implications of the concept itself.\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221091011\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://pigsonthewing.org.uk/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4e160e713acf1ab8547d1c36233389c3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://pigsonthewing.org.uk/\">http://pigsonthewing.org.uk/</a>\n                </div>\n                <a href=\"#comment-221091011\" class=\"permalink\"><time datetime=\"2009-04-13T14:00:04\">2009-04-13T14:00:04</time></a>\n            </div>\n            <div class=\"content\"><p>Forget rel=\"short\" or rel=\"shorter\". Try rel=\"shortcut\".</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091013\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221091013\" class=\"permalink\"><time datetime=\"2009-04-13T14:22:53\">2009-04-13T14:22:53</time></a>\n            </div>\n            <div class=\"content\"><p>...or I could try rev=\"canonical\" like I said up there.  An actual rationale might be more productive here.  :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091015\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://spindrop.us/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=35b8de09a3685277188d8b8be0e5e3ac&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://spindrop.us/\">Dave Dash</a>\n                </div>\n                <a href=\"#comment-221091015\" class=\"permalink\"><time datetime=\"2009-04-13T14:37:21\">2009-04-13T14:37:21</time></a>\n            </div>\n            <div class=\"content\"><p>So yes, you are understanding \"rev\" correctly per the spec.  The problem I have is this:</p>\n\n<p>rel=canonical was introduced so when people went to various urls that a search engine would know that the url specified in rel=canonical was the real one.  Let's do this to make life easier:</p>\n\n<p>http://foo.com/A\nand \nhttp://foo.com/B</p>\n\n<p>both go to the exact same page, and the publisher can't for some reason redirect to the canonicalized page (maybe it's amazon and they have stupid large urls with affiliate codes).</p>\n\n<p>so if the former is canonical then this is present:</p>\n\n<p></p>\n\n<p>whether you go to /A or /B.</p>\n\n<p>if they use rev=\"canonical\":</p>\n\n<p></p>\n\n<p>Should only be shown if they are visitng /A not /B otherwise that rev statement implies that /A or /B are the canonical forms of \"http://f.us/A\".</p>\n\n<p>I think that's why the rev attribute isn't a very good one.  Honestly I liked the suggestion (you made it maybe) for using rel=\"shortcut alternative\" or something.</p>\n\n<p>Am I seeing potential ambiguity when there isn't?</p>\n\n<p>-d</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091016\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221091016\" class=\"permalink\"><time datetime=\"2009-04-13T15:36:42\">2009-04-13T15:36:42</time></a>\n            </div>\n            <div class=\"content\"><p>@Dave: I think you may have used some markup in your comment that got filtered out - I'm not exactly sure what you mean. :/</p>\n\n<p>If we have this URL:</p>\n\n<p>http://example.com/this/url/is/too/long</p>\n\n<p>With these links in the head:</p>\n\n<blockquote>\n  <p>rel=\"canonical\" href=\"http://example.com/this/url/is/too/long\"\n  rev=\"canonical\" href=\"http://ex.pl/ab\"</p>\n</blockquote>\n\n<p>Then, the URL http://ex.pl/ab will ideally lead to a 301 redirect.  But, if not, it should have the same content as http://example.com/this/url/is/too/long — and therefore list the same reciprocal \"canonical\" relationship that leads back to the original page.</p>\n\n<p>That seems disambiguated to me—even more so than <code>rel=\"shorter\"</code> or whatnot.  If the URL for a <code>rel=\"shorter\"</code> link didn't yield a redirect, we'd never know what was the original page without a corresponding <code>rel=\"canonical\"</code> anyway.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091017\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n                </div>\n                <a href=\"#comment-221091017\" class=\"permalink\"><time datetime=\"2009-04-14T01:59:04\">2009-04-14T01:59:04</time></a>\n            </div>\n            <div class=\"content\"><p>LOL at \"soured their juice.\" Well written and well reasoned as usual, Les.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091018\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://samj.net/\"><img src=\"http://disqus.com/api/users/avatars/samj.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://samj.net/\">samj</a>\n                </div>\n                <a href=\"#comment-221091018\" class=\"permalink\"><time datetime=\"2009-04-14T02:39:30\">2009-04-14T02:39:30</time></a>\n            </div>\n            <div class=\"content\"><p>I've comprehensively rebutted your argument <a href=\"http://groups.google.com/group/shortlink/browse_thread/thread/885894c42cbdf8ad/d50be9d1c74bad7a?#d50be9d1c74bad7a\" rel=\"nofollow\">over there</a> so I'm not going to do it again here, except to say that given you concede that rel=short* is just as good as rev=canonical, only it's a&gt; not deprecated and b&gt; cannot possibly make sites drop off the face of the Internet, why do you even care enough to write this blog post?</p>\n\n<p>Sam</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091020\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://samj.net/\"><img src=\"http://disqus.com/api/users/avatars/samj.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://samj.net/\">samj</a>\n                </div>\n                <a href=\"#comment-221091020\" class=\"permalink\"><time datetime=\"2009-04-14T02:42:35\">2009-04-14T02:42:35</time></a>\n            </div>\n            <div class=\"content\"><p>Oh, and let's not forget that you can only use this \"solution\" on the canonical URL itself since it implies that the page it is attached to is itself canonical. That means you're going to have to find another solution for a potentially infinite number of other links to the same content, or risk leaking google juice all over the place.</p>\n\n<p>Sam</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091023\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221091023\" class=\"permalink\"><time datetime=\"2009-04-14T03:51:48\">2009-04-14T03:51:48</time></a>\n            </div>\n            <div class=\"content\"><blockquote>\n  <p>why do you even care enough to write this blog post?</p>\n</blockquote>\n\n<p>Because <a href=\"http://xkcd.com/386/\" rel=\"nofollow\">someone is wrong on the Internet</a>!  And I haven't blogged in awhile, so I needed an excuse.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091024\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://spindrop.us/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=35b8de09a3685277188d8b8be0e5e3ac&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://spindrop.us/\">Dave Dash</a>\n                </div>\n                <a href=\"#comment-221091024\" class=\"permalink\"><time datetime=\"2009-04-14T04:15:57\">2009-04-14T04:15:57</time></a>\n            </div>\n            <div class=\"content\"><p>Les,</p>\n\n<p>I not good with words today.  I was trying to say what Sam said:</p>\n\n<p>\"this “solution” on the canonical URL itself since it implies that the page it is attached to is itself canonical\"</p>\n\n<p>Hence, I'd stick with a solution that uses rel - so long as we can just pick an attribute \"shorter alternative\" or whatever that we can agree on :)</p>\n\n<p>-d</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091026\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://erikvold.com/index.cfm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8fa21a16e24905fba4413501e3afb36e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://erikvold.com/index.cfm\">Erik Vold</a>\n                </div>\n                <a href=\"#comment-221091026\" class=\"permalink\"><time datetime=\"2009-04-21T03:47:01\">2009-04-21T03:47:01</time></a>\n            </div>\n            <div class=\"content\"><p>Nice rebuttal to all of this rev=canonical opposition, but you gave in man wth?!</p>\n\n<p>Let me try to back you up a bit, maybe you'll agree with your gut again.</p>\n\n<p>First I must start with the removal of @rev in html 5. That was an amazingly dumb move, luckily it is a draft still is all I can say. Here is why I believe this:\n1) 1 char diff argument: shut up you nub programmers\n2) misuse: it's night vs day, black vs white, there is no gray area except that which your confused minds have created. The confusion -I think- usually comes in to play when considering a value, which is easy if you truly understand the diff between @rel and @rev.\n3) @rev values can be represented as @rel values: sure I agree but this can not be true without adding more rel values then are necessary with a @rev which is already in the html 4 spec for a reason. If you remove something with use you cause confusion on multiple fronts: first people have to become aware of the change, then they need to understand why the change was made, then they need to make the changes to their code base, and finally when they want to express rev=canonical with a @rel value, debates over what best @rel value represents the equivalent of another @rel value if it were used in @rev occur..</p>\n\n<p>I submit the debate which the opposition to rev=canonical are having over rel=short* as evidence that @rev is required. A link with rev=canonical that is short is a short url of the canonical url by definition, thus rel=short* is redundant for the use case of discovering a short url for the canonical url of some document. Albeit, I think rel=shorturl (or whatever is finally decided on) could be used by the publisher to indicate a preferred short url(s), if say there were &gt;1 rev=canonical.</p>\n\n<p>In an algorithm to discover a short url for a document one method could be to scan all links and find the shortest rev=canonical, or if a rel=shorturl is provided then use that and stop scanning immediately. My point is that rev=canonical should be used. Also rel=shorturl adds a marginal benefit to rev=canonical.</p>\n\n<p>Another point, a rel=shorturl is rev=canonical by definition, thus if you were to use rel=shorturl and @rev were alive and well as it should be, you should automatically add rev=canonical (even though it is implied).</p>\n\n<p>Another argument the opposition make to using rev=canonical is that the number of rev=canonical's are possibly infinite, so I say only list the rev=canonical's which a user may find of interest for the use cases you can imagine.</p>\n\n<p>Another case for using rev=canonical is using rev=canonical with rel=mobile perhaps? so that a user can scan rev=canonical's for a rel=mobile url which is short enough to fit in the newest microblog gadget. Where a rel=mobile without rev=canonical could be the mobile site's homepage, even better for this link would be rel=\"mobile home\" without rev=canonical.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091029\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://erikvold.com/index.cfm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8fa21a16e24905fba4413501e3afb36e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://erikvold.com/index.cfm\">Erik Vold</a>\n                </div>\n                <a href=\"#comment-221091029\" class=\"permalink\"><time datetime=\"2009-04-21T05:17:14\">2009-04-21T05:17:14</time></a>\n            </div>\n            <div class=\"content\"><p>The reasons why I like rev=canonical: http://erikvold.com/blog/index.cfm/2009/4/21/rev_canonical_good</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221091030\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221091030\" class=\"permalink\"><time datetime=\"2009-04-28T05:31:35\">2009-04-28T05:31:35</time></a>\n            </div>\n            <div class=\"content\"><p>@Erik: Well, I \"gave in\" mainly because I wasn't really looking for a fight and had a vacation to attend to.</p>\n\n<p>After that, the amount of hyperbolic stop energy being slung around rel=short{foo} has exhausted my care for the subject.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2009",
    "path": "2009/04/12/i-like-revcanonical",
    "summary": "<p><em>Update 4/14</em>: So, I liked <code>rev=&quot;canonical&quot;</code>, but I like the notion of pages offering sets of alternative URLs better.  <a href=\"http://www.mnot.net/blog/2009/04/14/rev_canonical_bad\">There are enough cracks in the case</a> for <code>rev=&quot;canonical&quot;</code> to stop caring about it and instead focus on the notion behind it.  However it&apos;s expressed&#x2014;is it <a href=\"http://groups.google.com/group/shortlink\"><code>rel=&quot;shortlink&quot;</code></a> now?&#x2014;the final remaining things I&apos;d like to see are:</p>\n<ul>\n<li><p>An more generalized scope for alternate URL choices asserted by publishers, not just URL shortening.  Other criteria beyond character length include ease of entry on mobile devices (eg. short, but also simple, maybe mostly numeric), ease of verbal mention (eg. billboards, postcards, etc).</p>\n</li>\n<li><p>HTTP headers are great where available&#x2014;hooray for HEAD&#x2014;but it still needs to be in the page for publishers who can&apos;t set custom headers.</p>\n</li>\n<li><p>Microformats are great, but I&apos;d rather not parse a whole page to the footer to lift out the desired URLs.</p>\n</li>\n<li><p>Don&apos;t panic. Have fun.</p>\n</li>\n</ul>\n<p>And with that, I&apos;m going to try coming up with other things to write about so this blog doesn&apos;t stay dormant.  The rest of this entry remains unedited below...</p>\n"
  },
  {
    "comments_archived": true,
    "date": "2009-01-06T00:01:54.000Z",
    "layout": "post",
    "tags": [
      "json",
      "webdev",
      "rss",
      "atom",
      "entries",
      "mozilla",
      "lizardfeeder",
      "activitystreams"
    ],
    "title": "Enter the LizardFeeder",
    "wordpress_id": 1533,
    "wordpress_slug": "enter-the-lizardfeeder",
    "wordpress_url": "http://decafbad.com/blog/?p=1533",
    "year": "2009",
    "month": "01",
    "day": "05",
    "isDir": false,
    "slug": "enter-the-lizardfeeder",
    "postName": "2009-01-05-enter-the-lizardfeeder",
    "html": "<p>[caption id=&quot;attachment_1582&quot; align=&quot;alignright&quot; width=&quot;247&quot; caption=&quot;The Mozilla Tree&quot;]<a href=\"http://blog.lizardwrangler.com/2008/07/29/the-mozilla-tree/\"><img src=\"http://decafbad.com/blog/wp-content/uploads/2009/01/moz-tree.jpg\" alt=\"The Mozilla Tree\" title=\"moz-tree\" width=\"247\" height=\"191\" class=\"size-full wp-image-1582\" /></a>[/caption]</p>\n<p>Behind Firefox is Mozilla, and behind Mozilla is a community.  And the Mozilla community acts a lot like an ecosystem, which can be visualized <a href=\"http://blog.lizardwrangler.com/2008/07/29/the-mozilla-tree/\">as a kind of living tree</a>—not to confused with the <a href=\"https://developer.mozilla.org/en/mozilla-central\">mozilla-central tree</a>.  Oh yeah, and Mozilla is the name of <a href=\"http://www.mozilla.org/reorganization/\">both a Foundation and a Corporation</a>.</p>\n<p>Confused yet?  If not, then we should talk so you can explain it to me, because it all looks pretty tangly and <a href=\"http://en.wikipedia.org/wiki/Intertwingularity\">intertwingled</a> to me.  Nonetheless, it seems to work, and produces a good chunk of my favorite software and technologies.</p>\n<p>There are many efforts to track what&#39;s going on—including <a href=\"http://planet.mozilla.org/\">planets</a> and <a href=\"http://blog.mozilla.com/about_mozilla/\">newsletters</a> and <a href=\"https://bugzilla.mozilla.org/\">bugzillas</a> and <a href=\"https://wiki.mozilla.org/WeeklyUpdates/2009-01-05\">wikis</a> and <a href=\"http://hg.mozilla.org/\">repositories</a> and <a href=\"http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox\">tinderboxen</a>.  Some of these resources report on, or are driven by, the activity occurring in the others.  Some are automated, and others are carefully stitched together by hand.  None offer a full picture of what&#39;s going on in the <a href=\"http://ascher.ca/blog/2008/06/19/whats-mozillas-scope-what-should-it-be/\">Mozilla galaxy</a> in a way that&#39;s casually comprehensible by a sane human being.</p>\n<p>Of course, that&#39;s not a slight against any of these sites or the people maintaining them—extracting an overview from such an organic phenomenon is neither easy nor straightforward.  But, it might be fun to try.</p>\n<p>As an infovore and avid practitioner of <a href=\"http://decafbad.com/blog/2005/09/23/the-zen-of-firehose-drinking\">continuous partial attention</a>, my first impulse is to reach for a firehose and stick my head into the stream.  Relax, defocus, and try to let my pattern recognizers do their thing—sometimes those pattern recognizers are in my head, and <a href=\"http://decafbad.com/hgwebdir.cgi/hacking_rss_and_atom/file/f7a85b9fd48a/ch15_popular_links.py\">sometimes they&#39;re written in Python</a>.</p>\n<p>[caption id=&quot;attachment_1585&quot; align=&quot;alignright&quot; width=&quot;225&quot; caption=&quot;Firefox Victory!&quot;]<a href=\"http://www.flickr.com/photos/intothefuzz/2571283860/in/set-72157605179678562/\"><img src=\"http://decafbad.com/blog/wp-content/uploads/2009/01/robo-225x300.jpg\" alt=\"Firefox Victory Robot\" title=\"firefox-victory\" width=\"225\" height=\"300\" class=\"size-medium wp-image-1585\" /></a>[/caption]</p>\n<p>But, for Mozilla, I couldn&#39;t find a stream of sufficient volume or completeness to satisfy me or <a href=\"http://www.digitpress.com/dpsoundz/destroyhimrobots.wav\">my robots</a>.  Happily, though, my feeding urge found itself aligned with a project to discover the patterns of contribution in the Mozilla community and to find a way to thank the contributors responsible.</p>\n<p>So, while we&#39;re still working on the thank-you angle, allow me to introduce you to <a href=\"http://feeds.mozilla.com/\">the Lizardfeeder</a>.  The <a href=\"http://feeds.mozilla.com/\">LizardFeeder</a> is a feed aggregator, <a href=\"https://svn.mozilla.org/projects/lizardfeeder/trunk/\">whose source code</a> is built atop <a href=\"http://www.intertwingly.net/code/venus/\">Sam Ruby&#39;s Planet Venus</a>. The <a href=\"http://feeds.mozilla.com/\">LizardFeeder</a> pulls together and archives activity streams from a wide variety of Mozilla community sources.  Beyond the usual human-readable pages produced by a <a href=\"http://planet.mozilla.org/\">blog-gathering Planet</a>, the <a href=\"http://feeds.mozilla.com/\">LizardFeeder</a> accumulates <a href=\"http://feeds.mozilla.com/archives/index.json\">statistical and historical data</a> meant for consumption and analysis by robots.</p>\n<p>At present, the only robot navigating the <a href=\"http://feeds.mozilla.com/\">LizardFeeder</a> archives is an AJAX-ified user interface that animates the firehose as a near real-time or time-lapsed stream of events scrolling by.  </p>\n<p>This is just meant as a conversation starter, though.  I&#39;m hoping to <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=469838\">gather feedback and find more sources</a>, as well as to entice creative community members to come up with more sophisticated visualizations of this data.  </p>\n<p>So, take a look, <a href=\"http://feeds.mozilla.com/\">check it out</a>, and let me know what you think!</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221083355\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=eb4ef8f72f933b04a27b118070ac538e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">dria</a>\n</div>\n<a href=\"#comment-221083355\" class=\"permalink\"><time datetime=\"2009-01-06T01:26:18\">2009-01-06T01:26:18</time></a>\n</div>\n<div class=\"content\"><p>Is there a list of what sources are already being read by the LizardFeeder anywhere?  I scanned through the various links here but didn't see anything obvious :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083356\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221083356\" class=\"permalink\"><time datetime=\"2009-01-06T01:37:15\">2009-01-06T01:37:15</time></a>\n</div>\n<div class=\"content\"><p>Yeah, that part could use some improvement.  There's a monster list here:</p>\n<p>http://feeds.mozilla.com/sources.opml</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083358\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://briks.si\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=315c86c9c01a5ced617aa58ef641902d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://briks.si\">Brian King</a>\n</div>\n<a href=\"#comment-221083358\" class=\"permalink\"><time datetime=\"2009-01-06T10:11:46\">2009-01-06T10:11:46</time></a>\n</div>\n<div class=\"content\"><p>Excellent stuff. I was going to ask about access to the list of sources for each category, but Dria beat me to it.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083359\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221083359\" class=\"permalink\"><time datetime=\"2009-01-06T15:26:50\">2009-01-06T15:26:50</time></a>\n</div>\n<div class=\"content\"><p>Actually, it occurs to me that this config file might work as a more readable version of the list of sources:</p>\n<p>https://svn.mozilla.org/projects/lizardfeeder/trunk/conf/config.ini-dist</p>\n<p>There's also this, which is where most of the previous list came from: </p>\n<p>https://svn.mozilla.org/projects/lizardfeeder/trunk/conf/hg-feeds.opml-dist</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083360\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://ozten.myopenid.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4021c2acfc5b98b6dfe2d0ec26432ce1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://ozten.myopenid.com/\">Austin King</a>\n</div>\n<a href=\"#comment-221083360\" class=\"permalink\"><time datetime=\"2009-01-06T20:55:52\">2009-01-06T20:55:52</time></a>\n</div>\n<div class=\"content\"><p>Thanks for the background surrounding lizard feeder. Great post!</p>\n<p>+1 Dria and Brian</p>\n<p>Maybe make the title of the link to the OPML more descriptive than just \"Feeds\" and/or link to it in the body of the UI too and write something around it to encourage other's visualizations.</p>\n<p>Awesome work Les.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083361\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a1c5374b594738e98be48f7f193443b3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Sanjay Parekh</a>\n</div>\n<a href=\"#comment-221083361\" class=\"permalink\"><time datetime=\"2009-02-04T20:38:04\">2009-02-04T20:38:04</time></a>\n</div>\n<div class=\"content\"><p>Is the AJAX UI available anywhere for download?  I'd like to hack it for another use altogether.  Great visualization and great application.  Good job.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083362\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7881dcee98d7df7e89939afd191c92ce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Deen Seth.</a>\n</div>\n<a href=\"#comment-221083362\" class=\"permalink\"><time datetime=\"2009-09-16T18:21:02\">2009-09-16T18:21:02</time></a>\n</div>\n<div class=\"content\"><p>This is a very good idea.  Can we accomplish the same result using Yahoo Pipe?  Do you plan to add events from Bugzilla, and mailing list to the feed?</p>\n<p>I am more interested in development activities.  There aren't much in code category.</p>\n<p>I am interested in analyzing development related events.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "[caption id=\"attachment_1582\" align=\"alignright\" width=\"247\" caption=\"The Mozilla Tree\"]<a href=\"http://blog.lizardwrangler.com/2008/07/29/the-mozilla-tree/\"><img src=\"http://decafbad.com/blog/wp-content/uploads/2009/01/moz-tree.jpg\" alt=\"The Mozilla Tree\" title=\"moz-tree\" width=\"247\" height=\"191\" class=\"size-full wp-image-1582\" /></a>[/caption]\r\n\r\nBehind Firefox is Mozilla, and behind Mozilla is a community.  And the Mozilla community acts a lot like an ecosystem, which can be visualized [as a kind of living tree][tree]—not to confused with the [mozilla-central tree][mctree].  Oh yeah, and Mozilla is the name of [both a Foundation and a Corporation][mocofo].\r\n\r\nConfused yet?  If not, then we should talk so you can explain it to me, because it all looks pretty tangly and [intertwingled][inter] to me.  Nonetheless, it seems to work, and produces a good chunk of my favorite software and technologies.\r\n\r\nThere are many efforts to track what's going on—including [planets][planet] and [newsletters][about] and [bugzillas][bugzilla] and [wikis][wikis] and [repositories][repos] and [tinderboxen][tinderbox].  Some of these resources report on, or are driven by, the activity occurring in the others.  Some are automated, and others are carefully stitched together by hand.  None offer a full picture of what's going on in the [Mozilla galaxy][galaxy] in a way that's casually comprehensible by a sane human being.\r\n\r\nOf course, that's not a slight against any of these sites or the people maintaining them—extracting an overview from such an organic phenomenon is neither easy nor straightforward.  But, it might be fun to try.\r\n\r\nAs an infovore and avid practitioner of [continuous partial attention][firehose], my first impulse is to reach for a firehose and stick my head into the stream.  Relax, defocus, and try to let my pattern recognizers do their thing—sometimes those pattern recognizers are in my head, and [sometimes they're written in Python][popularlinks].\r\n\r\n[caption id=\"attachment_1585\" align=\"alignright\" width=\"225\" caption=\"Firefox Victory!\"]<a href=\"http://www.flickr.com/photos/intothefuzz/2571283860/in/set-72157605179678562/\"><img src=\"http://decafbad.com/blog/wp-content/uploads/2009/01/robo-225x300.jpg\" alt=\"Firefox Victory Robot\" title=\"firefox-victory\" width=\"225\" height=\"300\" class=\"size-medium wp-image-1585\" /></a>[/caption]\r\n\r\nBut, for Mozilla, I couldn't find a stream of sufficient volume or completeness to satisfy me or [my robots][myrobots].  Happily, though, my feeding urge found itself aligned with a project to discover the patterns of contribution in the Mozilla community and to find a way to thank the contributors responsible.\r\n\r\nSo, while we're still working on the thank-you angle, allow me to introduce you to [the Lizardfeeder][lizardfeeder].  The [LizardFeeder][lizardfeeder] is a feed aggregator, [whose source code][lizardcode] is built atop [Sam Ruby's Planet Venus][venus]. The [LizardFeeder][lizardfeeder] pulls together and archives activity streams from a wide variety of Mozilla community sources.  Beyond the usual human-readable pages produced by a [blog-gathering Planet][planet], the [LizardFeeder][lizardfeeder] accumulates [statistical and historical data][jsondata] meant for consumption and analysis by robots.\r\n\r\nAt present, the only robot navigating the [LizardFeeder][lizardfeeder] archives is an AJAX-ified user interface that animates the firehose as a near real-time or time-lapsed stream of events scrolling by.  \r\n\r\nThis is just meant as a conversation starter, though.  I'm hoping to [gather feedback and find more sources][requests], as well as to entice creative community members to come up with more sophisticated visualizations of this data.  \r\n\r\nSo, take a look, [check it out][lizardfeeder], and let me know what you think!\r\n\r\n[myrobots]: http://www.digitpress.com/dpsoundz/destroyhimrobots.wav\r\n[inter]: http://en.wikipedia.org/wiki/Intertwingularity\r\n[mocofo]: http://www.mozilla.org/reorganization/\r\n[mctree]: https://developer.mozilla.org/en/mozilla-central\r\n[galaxy]: http://ascher.ca/blog/2008/06/19/whats-mozillas-scope-what-should-it-be/\r\n[popularlinks]: http://decafbad.com/hgwebdir.cgi/hacking_rss_and_atom/file/f7a85b9fd48a/ch15_popular_links.py\r\n[jsondata]: http://feeds.mozilla.com/archives/index.json\r\n[lizardcode]: https://svn.mozilla.org/projects/lizardfeeder/trunk/\r\n[venus]: http://www.intertwingly.net/code/venus/\r\n[lizardfeeder]: http://feeds.mozilla.com/\r\n[firehose]: http://decafbad.com/blog/2005/09/23/the-zen-of-firehose-drinking\r\n[tinderbox]: http://tinderbox.mozilla.org/showbuilds.cgi?tree=Firefox\r\n[repos]: http://hg.mozilla.org/\r\n[wikis]: https://wiki.mozilla.org/WeeklyUpdates/2009-01-05\r\n[bugzilla]: https://bugzilla.mozilla.org/\r\n[planet]: http://planet.mozilla.org/\r\n[about]: http://blog.mozilla.com/about_mozilla/\r\n[tree]: http://blog.lizardwrangler.com/2008/07/29/the-mozilla-tree/\r\n[requests]: https://bugzilla.mozilla.org/show_bug.cgi?id=469838\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221083355\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=eb4ef8f72f933b04a27b118070ac538e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">dria</a>\n                </div>\n                <a href=\"#comment-221083355\" class=\"permalink\"><time datetime=\"2009-01-06T01:26:18\">2009-01-06T01:26:18</time></a>\n            </div>\n            <div class=\"content\"><p>Is there a list of what sources are already being read by the LizardFeeder anywhere?  I scanned through the various links here but didn't see anything obvious :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083356\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221083356\" class=\"permalink\"><time datetime=\"2009-01-06T01:37:15\">2009-01-06T01:37:15</time></a>\n            </div>\n            <div class=\"content\"><p>Yeah, that part could use some improvement.  There's a monster list here:</p>\n\n<p>http://feeds.mozilla.com/sources.opml</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083358\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://briks.si\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=315c86c9c01a5ced617aa58ef641902d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://briks.si\">Brian King</a>\n                </div>\n                <a href=\"#comment-221083358\" class=\"permalink\"><time datetime=\"2009-01-06T10:11:46\">2009-01-06T10:11:46</time></a>\n            </div>\n            <div class=\"content\"><p>Excellent stuff. I was going to ask about access to the list of sources for each category, but Dria beat me to it.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083359\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221083359\" class=\"permalink\"><time datetime=\"2009-01-06T15:26:50\">2009-01-06T15:26:50</time></a>\n            </div>\n            <div class=\"content\"><p>Actually, it occurs to me that this config file might work as a more readable version of the list of sources:</p>\n\n<p>https://svn.mozilla.org/projects/lizardfeeder/trunk/conf/config.ini-dist</p>\n\n<p>There's also this, which is where most of the previous list came from: </p>\n\n<p>https://svn.mozilla.org/projects/lizardfeeder/trunk/conf/hg-feeds.opml-dist</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083360\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://ozten.myopenid.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4021c2acfc5b98b6dfe2d0ec26432ce1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://ozten.myopenid.com/\">Austin King</a>\n                </div>\n                <a href=\"#comment-221083360\" class=\"permalink\"><time datetime=\"2009-01-06T20:55:52\">2009-01-06T20:55:52</time></a>\n            </div>\n            <div class=\"content\"><p>Thanks for the background surrounding lizard feeder. Great post!</p>\n\n<p>+1 Dria and Brian</p>\n\n<p>Maybe make the title of the link to the OPML more descriptive than just \"Feeds\" and/or link to it in the body of the UI too and write something around it to encourage other's visualizations.</p>\n\n<p>Awesome work Les.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083361\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a1c5374b594738e98be48f7f193443b3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Sanjay Parekh</a>\n                </div>\n                <a href=\"#comment-221083361\" class=\"permalink\"><time datetime=\"2009-02-04T20:38:04\">2009-02-04T20:38:04</time></a>\n            </div>\n            <div class=\"content\"><p>Is the AJAX UI available anywhere for download?  I'd like to hack it for another use altogether.  Great visualization and great application.  Good job.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083362\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7881dcee98d7df7e89939afd191c92ce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Deen Seth.</a>\n                </div>\n                <a href=\"#comment-221083362\" class=\"permalink\"><time datetime=\"2009-09-16T18:21:02\">2009-09-16T18:21:02</time></a>\n            </div>\n            <div class=\"content\"><p>This is a very good idea.  Can we accomplish the same result using Yahoo Pipe?  Do you plan to add events from Bugzilla, and mailing list to the feed?</p>\n\n<p>I am more interested in development activities.  There aren't much in code category.</p>\n\n<p>I am interested in analyzing development related events.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2009",
    "path": "2009/01/05/enter-the-lizardfeeder",
    "thumbnail": "http://decafbad.com/blog/wp-content/uploads/2009/01/moz-tree.jpg"
  },
  {
    "comments_archived": true,
    "date": "2008-11-01T19:23:23.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "js",
      "javascript",
      "entries",
      "jquery",
      "zope",
      "zpt",
      "tal",
      "templates"
    ],
    "title": "An unnecessary Template Attribute Language",
    "wordpress_id": 1450,
    "wordpress_slug": "an-unnecessary-template-attribute-language",
    "wordpress_url": "http://decafbad.com/blog/?p=1450",
    "year": "2008",
    "month": "11",
    "day": "01",
    "isDir": false,
    "slug": "an-unnecessary-template-attribute-language",
    "postName": "2008-11-01-an-unnecessary-template-attribute-language",
    "html": "<p>A funny thing happened on the way to building <a href=\"http://svn.mozilla.org/projects/lizardfeeder/trunk/\">a delayed real-time feed display</a>:  I got temporarily obsessed with implementing <a href=\"http://github.com/lmorchard/jquery-tal-template/tree/master\">a template language in JavaScript</a> that, as it turned out later, I didn&#39;t need.  About <a href=\"http://svn.mozilla.org/projects/lizardfeeder/trunk/\">the feed project itself</a>, I hope to write more soon—but for now I want to get this extra template language thing out of my system and see if anyone else might have a use for it.</p>\n<p>See, I had a notion it would be keen if I had access to the same template language on the client as on the server.  I needed to render a number of list items statically on the server with feed entries, then update that list with new entries on the client as they became available through JSON feed polling.  It&#39;d be a pain in the butt to maintain two separate list item templates for client and server, so I reached for a shared template language.</p>\n<p>Never mind that I&#39;d just gotten done writing <a href=\"http://www.amazon.com/gp/product/0470452021?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;c%0D%0Areative=9325&amp;creativeASIN=0470452021\">a small book on Dojo</a>, and was already aware of the existence of the <a href=\"http://svn.dojotoolkit.org/src/dojox/trunk/dtl/README\">DojoX Django Template Language</a>.  This might&#39;ve worked, since the server end of things was written in Python (though not with Django).  That the JavaScript side already used <a href=\"http://jquery.com/\">jQuery</a> wasn&#39;t <em>too</em> tall a hurdle.  Also, I&#39;m sure there are a handful of other JavaScript/Python template language match-ups to be found.</p>\n<p>But, let&#39;s be honest here:  I&#39;ve always been a fan of Zope&#39;s <a href=\"http://wiki.zope.org/ZPT/TALSpecification14\">Template Attribute Language</a> for their <a href=\"http://wiki.zope.org/ZPT/FrontPage\">Page Templates</a>, and have long wondered how hard it would be to implement.  The concept seems so much cleaner to me than most string-formatting template languages, and the workflow from mockup-to-template and back again has always been appealing to me when it works.  So, when my first few experimental steps in trying my hand at it actually started working, I couldn&#39;t stop coding.  </p>\n<p>And now, <a href=\"http://github.com/lmorchard/jquery-tal-template/tree/master/jquery.taltemplate.js\">the thing</a> is mostly done.  It has no tests, has features left undone, and probably yields plenty of bugs—but I finished it enough to use it practically, and that was long enough to convince me it wasn&#39;t the right tool for the job.  </p>\n<p>Still, though, I can&#39;t help thinking it might be the right tool for <em>some</em> job.  That could be because I spent a lot of time on it, or that I&#39;m unreasonably fond of <a href=\"http://wiki.zope.org/ZPT/TALSpecification14\">TAL</a>, but it still feels like a decent little plugin to have on hand.  Maybe someone reading this will have a similar conclusion.</p>\n<p>Oh and by the way, plain <a href=\"http://jquery.com/\">jQuery</a> turned out to be a better tool for <a href=\"http://svn.mozilla.org/projects/lizardfeeder/trunk/\">the job in question</a>.  This seems to nicely balance the duplicate effort between server and client, demanding only that I stick with semantically significant CSS class names in the server template—something I should be doing anyway:</p>\n<pre><code>        // Clone and populate a new entry.\n        var new_item = $(&#39;#feed-items .entry:last&#39;)\n            .clone()\n            .attr(&#39;class&#39;, entry_classes.join(&#39; &#39;)) \n            .find(&#39;.group span&#39;)\n                .text(tags[&#39;group&#39;])\n            .end()\n            .find(&#39;.title&#39;)\n                .find(&#39;.favicon&#39;)\n                    .attr(&#39;src&#39;, favicon)\n                .end()\n                .find(&#39;.link&#39;)\n                    .attr(&#39;href&#39;, entry.link)\n                    .text(entry.title)\n                .end()\n            .end()\n            .find(&#39;.updated&#39;)\n                .find(&#39;.timeago&#39;)\n                    .attr(&#39;title&#39;, entry.updated)\n                    .text(entry_updated.strftime(&#39;%+&#39;))\n                    .timeago()\n                .end()\n                .find(&#39;.time&#39;)\n                    .text(entry_updated.strftime(&#39;%I:%M %p&#39;))\n                .end()\n            .end()\n            .find(&#39;.author&#39;)\n                .text(entry.author || &#39;n/a&#39;)\n            .end()\n            .prependTo(&#39;#feed-items&#39;)\n            .hide();</code></pre>\n<p>Of course, <em>plain</em> is a relative term here.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221083366\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3f398029eea744ce9ba9147aab627557&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">brad clements</a>\n</div>\n<a href=\"#comment-221083366\" class=\"permalink\"><time datetime=\"2008-11-03T21:26:42\">2008-11-03T21:26:42</time></a>\n</div>\n<div class=\"content\"><p>Groan,</p>\n<p>Too bad I haven't had a chance to finish documenting (and tweaking) the ATALi project.</p>\n<p>It's a collection of Alternative TAL Implementations.</p>\n<p>It currently has TAL for xslt (server side using libxslt directly or via lxml with metal support)</p>\n<p>and TAL for javascript (no libraries needed, though it does recognize mochikit iterators, no metal)</p>\n<p>https://launchpad.net/atali</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083367\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n</div>\n<a href=\"#comment-221083367\" class=\"permalink\"><time datetime=\"2008-11-24T18:51:17\">2008-11-24T18:51:17</time></a>\n</div>\n<div class=\"content\"><p>Have you seen \"trimpath\"?</p>\n<p>http://code.google.com/p/trimpath/wiki/JavaScriptTemplates</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "A funny thing happened on the way to building [a delayed real-time feed display][lizardfeeder]:  I got temporarily obsessed with implementing [a template language in JavaScript][jqtal] that, as it turned out later, I didn't need.  About [the feed project itself][lizardfeeder], I hope to write more soon—but for now I want to get this extra template language thing out of my system and see if anyone else might have a use for it.\r\n\r\nSee, I had a notion it would be keen if I had access to the same template language on the client as on the server.  I needed to render a number of list items statically on the server with feed entries, then update that list with new entries on the client as they became available through JSON feed polling.  It'd be a pain in the butt to maintain two separate list item templates for client and server, so I reached for a shared template language.\r\n\r\nNever mind that I'd just gotten done writing [a small book on Dojo][book], and was already aware of the existence of the [DojoX Django Template Language][djt].  This might've worked, since the server end of things was written in Python (though not with Django).  That the JavaScript side already used [jQuery][] wasn't *too* tall a hurdle.  Also, I'm sure there are a handful of other JavaScript/Python template language match-ups to be found.\r\n\r\nBut, let's be honest here:  I've always been a fan of Zope's [Template Attribute Language][tal] for their [Page Templates][pt], and have long wondered how hard it would be to implement.  The concept seems so much cleaner to me than most string-formatting template languages, and the workflow from mockup-to-template and back again has always been appealing to me when it works.  So, when my first few experimental steps in trying my hand at it actually started working, I couldn't stop coding.  \r\n\r\nAnd now, [the thing][thing] is mostly done.  It has no tests, has features left undone, and probably yields plenty of bugs—but I finished it enough to use it practically, and that was long enough to convince me it wasn't the right tool for the job.  \r\n\r\nStill, though, I can't help thinking it might be the right tool for *some* job.  That could be because I spent a lot of time on it, or that I'm unreasonably fond of [TAL][tal], but it still feels like a decent little plugin to have on hand.  Maybe someone reading this will have a similar conclusion.\r\n\r\nOh and by the way, plain [jQuery][] turned out to be a better tool for [the job in question][lizardfeeder].  This seems to nicely balance the duplicate effort between server and client, demanding only that I stick with semantically significant CSS class names in the server template—something I should be doing anyway:\r\n\r\n            // Clone and populate a new entry.\r\n            var new_item = $('#feed-items .entry:last')\r\n                .clone()\r\n                .attr('class', entry_classes.join(' ')) \r\n                .find('.group span')\r\n                    .text(tags['group'])\r\n                .end()\r\n                .find('.title')\r\n                    .find('.favicon')\r\n                        .attr('src', favicon)\r\n                    .end()\r\n                    .find('.link')\r\n                        .attr('href', entry.link)\r\n                        .text(entry.title)\r\n                    .end()\r\n                .end()\r\n                .find('.updated')\r\n                    .find('.timeago')\r\n                        .attr('title', entry.updated)\r\n                        .text(entry_updated.strftime('%+'))\r\n                        .timeago()\r\n                    .end()\r\n                    .find('.time')\r\n                        .text(entry_updated.strftime('%I:%M %p'))\r\n                    .end()\r\n                .end()\r\n                .find('.author')\r\n                    .text(entry.author || 'n/a')\r\n                .end()\r\n                .prependTo('#feed-items')\r\n                .hide();\r\n\r\nOf course, *plain* is a relative term here.\r\n\r\n[jquery]: http://jquery.com/\r\n[tal]: http://wiki.zope.org/ZPT/TALSpecification14\r\n[pt]: http://wiki.zope.org/ZPT/FrontPage\r\n[book]: http://www.amazon.com/gp/product/0470452021?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&c%0D%0Areative=9325&creativeASIN=0470452021\r\n[djt]: http://svn.dojotoolkit.org/src/dojox/trunk/dtl/README\r\n[jqtal]: http://github.com/lmorchard/jquery-tal-template/tree/master\r\n[lizardfeeder]: http://svn.mozilla.org/projects/lizardfeeder/trunk/\r\n[thing]: http://github.com/lmorchard/jquery-tal-template/tree/master/jquery.taltemplate.js\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221083366\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3f398029eea744ce9ba9147aab627557&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">brad clements</a>\n                </div>\n                <a href=\"#comment-221083366\" class=\"permalink\"><time datetime=\"2008-11-03T21:26:42\">2008-11-03T21:26:42</time></a>\n            </div>\n            <div class=\"content\"><p>Groan,</p>\n\n<p>Too bad I haven't had a chance to finish documenting (and tweaking) the ATALi project.</p>\n\n<p>It's a collection of Alternative TAL Implementations.</p>\n\n<p>It currently has TAL for xslt (server side using libxslt directly or via lxml with metal support)</p>\n\n<p>and TAL for javascript (no libraries needed, though it does recognize mochikit iterators, no metal)</p>\n\n<p>https://launchpad.net/atali</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083367\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n                </div>\n                <a href=\"#comment-221083367\" class=\"permalink\"><time datetime=\"2008-11-24T18:51:17\">2008-11-24T18:51:17</time></a>\n            </div>\n            <div class=\"content\"><p>Have you seen \"trimpath\"?</p>\n\n<p>http://code.google.com/p/trimpath/wiki/JavaScriptTemplates</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/11/01/an-unnecessary-template-attribute-language"
  },
  {
    "comments_archived": true,
    "date": "2008-10-29T14:42:23.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "writing",
      "books",
      "entries",
      "jellystains",
      "webmasons",
      "webscientists",
      "webscience"
    ],
    "title": "Jelly Stains and Web Masons",
    "wordpress_id": 1424,
    "wordpress_slug": "jelly-stains-and-web-masons",
    "wordpress_url": "http://decafbad.com/blog/?p=1424",
    "year": "2008",
    "month": "10",
    "day": "29",
    "isDir": false,
    "slug": "jelly-stains-and-web-masons",
    "postName": "2008-10-29-jelly-stains-and-web-masons",
    "html": "<p>From Mark Bernstein&#39;s entry on <a href=\"http://www.markbernstein.org/Oct0801/PracticalPrototypeandscrip.html\">Practical Prototype and script.aculo.us</a>:</p>\n<blockquote>\n<p>When chemists consult a volume about professional chemical technique, or when surgeons reach for the latest update on neuroanatomy, they can usually find a book that isn&#39;t couched in terms of silly examples and jokes. So can poets, mathematicians, and geologists. For some reason, though, it has become the accepted practice that language manuals should spend lots of time with silly, self-deprecating jokes, and that their example applications should be breakfast loggers and fantasy football leagues (or, conversely, payroll programs).</p>\n</blockquote>\n<p>As an tech author with just a few books under my belt, Mark&#39;s take on <a href=\"http://www.amazon.com/gp/product/1590599195?ie=UTF8&amp;tag=0xdecafbad-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1590599195\">Practical Prototype and script.aculo.us</a> struck a bit of a sour note for me, because I&#39;d like to work on making my tech writing more entertaining than not.  I think that&#39;s a good thing, but I&#39;m willing to be convinced otherwise.</p>\n<p>I think the issue is that there are different meanings for &quot;professional&quot; when it comes to the web.  There are web scientists and there are web masons.  Web scientists pursue fundamentals and disambiguations, while web masons are busy building the next micro-site for the new product release from the almighty client.  Many web scientists are also computer scientists and many web masons are also web scientists—but most web masons I&#39;ve known come from creative liberal or fine arts backgrounds.</p>\n<p>Though, for what it&#39;s worth, even amongst computer scientists there&#39;s still a tradition of <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1225292376&amp;sr=8-1\">leaving room for jelly stains</a> and other oddities.  This seems to be the sort of thing Mark acknowledges with dismay.  (&quot;It’s not fair to blame Mr. DuPont for the general vice.&quot;)</p>\n<p>Is playfulness in literature just a computer science thing?  I&#39;m not a chemist; maybe chemists just  don&#39;t like being funny in writing, or maybe their jokes are more subtle.</p>\n<p>In any case, I think the &quot;practical&quot; genre of tech books is aimed at people who want to get something done, aren&#39;t interested in or have little time for context or background, yet wouldn&#39;t mind being entertained during the course of weekend tinkering and self-education.</p>\n<blockquote>\n<p>So, a good book. But take out the jokes, trim back the sample code (or dispatch it to the Web site where it makes more sense), and give us to professional perspective, and everyone is going to be much happier.</p>\n</blockquote>\n<p>The guidelines with which I&#39;m familiar for tech books in the &quot;practical&quot; or similar genres include advice such as &quot;show, don&#39;t tell&quot;.  They also suggest that, although sample code should be made available online, the author should compose the book assuming that it&#39;s a standalone product.  Web sites and CDROMs with code often vanish, but a bound book remains stable—which is especially useful on a cross-country flight without net access.  Professional perspective is of course a desirable thing to work into the prose, but job #1 is to illustrate the right way to do things through running code.</p>\n<blockquote>\n<p>How does Prototype+Javascript relate to other languages — C++/STL, say, or SELF? What, precisely, are the semantics of the key methods? I don&#39;t need the inevitable chapter 1 pitch for the wonderfulness of Javascript and the badness of MSIE, but it might be a good place for a quick summary for the pros. Call by reference • no pointers • primitives are objects • everything has a prototype slot • parens() do this, braces {} do that, brackets [] do something else • single and double quotes are different. Kernighan &amp; Ritchie did this so well in C, and it’s not like we’re not familiar with their example.</p>\n</blockquote>\n<p>I&#39;d posit that most in the audience for &quot;practical&quot; tech books are entirely unfamiliar with Kernigan &amp; Ritchie and haven&#39;t touched a line of C source code.  Most of these readers have probably tumbled down the slope from HTML to CSS and finally to JavaScript in order to get something interesting to happen in a browser—and usually while under an unreasonable deadline.</p>\n<p>I&#39;d really be surprised if many readers have heard of <a href=\"http://en.wikipedia.org/wiki/Self_programming_language\">Self</a> or <a href=\"http://en.wikipedia.org/wiki/Standard_Template_Library\">C++/STL</a> or have much of a grounding at all in computer science or programming language fundamentals.  Having these fundamentals would of course help web masons get a deeper understanding of the technologies that make the job possible, but the pragmatic rewards tend not to make up for the effort involved.</p>\n<p>So, to sum up, the purpose for this entry isn&#39;t to beat up on Mark Bernstein.  He&#39;s written a great deal of prose and code that I respect, so his opinion is interesting to me.  Rather, I&#39;ve tried to express my own understanding of this writing market, and hoping I&#39;ve aimed at the right goals.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086683\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.markbernstein.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cdb20bf8e09680028612532944833686&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.markbernstein.org/\">Mark Bernstein</a>\n</div>\n<a href=\"#comment-221086683\" class=\"permalink\"><time datetime=\"2008-10-29T16:51:59\">2008-10-29T16:51:59</time></a>\n</div>\n<div class=\"content\"><p>I'd settle for a better class of joke!</p>\n<p>On tech content, doesn't it annoy <em>you</em> that it's hard (or impossible) to find a book about a Web framework or language or facility that takes advantage of what you already know?  One that doesn't assume you've never seen a language before?  </p>\n<p>I understand that publishers want the book to appeal to everyone.  But it's not that the reader needs to know Kernighan: <em>you</em> know, right?  So you know that it's entirely practical to tell a colleague pretty much everything she needs to know about a (famously tricky) new language in one chapter, starting from Kernighan's example 1 -- the original \"Hello, world\".</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086685\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221086685\" class=\"permalink\"><time datetime=\"2008-10-29T20:28:27\">2008-10-29T20:28:27</time></a>\n</div>\n<div class=\"content\"><p>I think part of the difference is in the subjects themselves. Programming deals with pure thought stuff, yet at the same time attempts to model concepts from the physical reality. In contrast, science textbooks deal with intrinsically tangible stuff, while mathematics textbooks deal with the abstract for abstraction’s sake. The temptation to offset the potential dullness of pure thought stuff by using it to model goofy examples is obviously high.</p>\n<p>Corroborating my theory would be the fact that elementary, low-abstraction maths books tend to bring up oddball examples too – eg. consider the sorts of things used to illustrate the rule of proportion.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086686\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://spindrop.us/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=efe33dc2c55f641837501293866f7dc5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://spindrop.us/\">Dave Dash</a>\n</div>\n<a href=\"#comment-221086686\" class=\"permalink\"><time datetime=\"2008-10-30T00:53:54\">2008-10-30T00:53:54</time></a>\n</div>\n<div class=\"content\"><p>Most books about web technology are meant to have a shelf life of a few years.  They aren't reference guides, and they aren't meant to stand the test of time.</p>\n<p>PHP, Python, Prototype, etc will all change.</p>\n<p>Because of this, they can employ jokes and real-world examples.  Jokes make reading the content enjoyable.  Examples are step by step instructions to creating something useful.</p>\n<p>If those aren't needed there's always reference guides.</p>\n<p>I don't publish books, but I do write tutorials on my blog on occasion.  One pattern I employ in my blog the \"executive summary\" pattern.  I start with the take-away, the code snippet, the answer if you will.  Then I spend the rest of the post (behind the fold, if you will) explaining the answer and interjecting my style.</p>\n<p>I like doing this, because it's what I would want.  I want to know the answer, and then I can read on for some backstory... rather than having to separate the wheat from the chaff.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086688\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://andrewdupont.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=fede7405a0e4cd5722e0b85920a0728c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://andrewdupont.net/\">Andrew Dupont</a>\n</div>\n<a href=\"#comment-221086688\" class=\"permalink\"><time datetime=\"2008-10-31T03:30:21\">2008-10-31T03:30:21</time></a>\n</div>\n<div class=\"content\"><p>I'm quite familiar with the trend Mark's talking about. And I agree that it shouldn't count against me or my book, but perhaps I'm a bit biased there.</p>\n<p>Three things.</p>\n<p>First: my book reads the way it reads because that's how I write. The process of writing the thing was torturous enough that I doubt I'd have finished it if I subjected every word to the scrutiny of a hypothetical skeptical reader. I'm not good enough at the craft for that. I think that each author has to find his best angle on the material and write that way. Because there are many books and many publishers, it <em>tends</em> to balance out.</p>\n<p>Second: my book covers two JavaScript frameworks built to simplify common tasks. Basic familiarity with JavaScript is assumed. Right away that's a step away from the theoretical and toward the practical. I think tech books are best when they stick to one or the other, rather than try to drift between them.</p>\n<p>Third: the book Mark wants has already been written: <cite>JavaScript: The Good Parts</cite>, by Doug Crockford. Doug's style is dry and academic, but also direct and substantive. If I tried to write in that style it'd be only a pale imitation.</p>\n<p>Anyway... the \"quirky\" trend, I agree, can be tiring. As it applies to my book, the sticking point seems to be whether I'm <em>actually funny</em>. Readers of this weblog will simply have to buy the book to find out. It's several hundred pages long and has a fresh, earthy \"new book\" smell.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086691\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221086691\" class=\"permalink\"><time datetime=\"2008-10-31T03:47:37\">2008-10-31T03:47:37</time></a>\n</div>\n<div class=\"content\"><p>@Mark: Yeah, these days my first impulse is not to reach for the latest book on a new technology like a web framework or new language.  I usually head straight for the source code or start soaking in whatever documentation may be lying around on the web.</p>\n<p>I suppose I could be a macho geek and say that's why I'm writing the books now—but to be honest I don't tend to get much out of practical programming books.  They seem to sell, though, so I keep wondering if mine shouldn't be lighter or more fun, should I get the opportunity to produce more of them.</p>\n<p>My first book was about half-and-half prose and code, with barely any screen shots to be found.  I got to about equal parts code, prose, and screen grabs in my second—I thought that might make it easier reading.  </p>\n<p>The latest one doesn't have any jokes, but I tried to get straight to the core framework features and spotlight a few obscure magical bits.  I worry if it might be a bit too dry.</p>\n<p>But yeah, I do wish there were more (though maybe shorter) books that started from the assumption that I've got a CS degree and have tangled with a few languages and libraries so far.  On the other hand, I do like having a sense for the author in a book—but that might be thanks to the fact that I read more blogs than books these days and enjoy the personal touches.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086692\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221086692\" class=\"permalink\"><time datetime=\"2008-10-31T04:05:01\">2008-10-31T04:05:01</time></a>\n</div>\n<div class=\"content\"><p>@Andrew: Hey, thanks for dropping in for a comment!  I can completely sympathize with needing to find a groove to handle how grueling producing one of these books can be—especially if you're more programmer than writer.  (That's me, right now, anyway.)  You need to get the best thing out there in the shortest amount of time, and find a way to get yourself to finish it.</p>\n<p>At any rate, congrats on the new book, and I hope the cross-blog chatter sells a few more copies for you!</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "From Mark Bernstein's entry on [Practical Prototype and script.aculo.us](http://www.markbernstein.org/Oct0801/PracticalPrototypeandscrip.html):\r\n> When chemists consult a volume about professional chemical technique, or when surgeons reach for the latest update on neuroanatomy, they can usually find a book that isn't couched in terms of silly examples and jokes. So can poets, mathematicians, and geologists. For some reason, though, it has become the accepted practice that language manuals should spend lots of time with silly, self-deprecating jokes, and that their example applications should be breakfast loggers and fantasy football leagues (or, conversely, payroll programs).\r\n\r\nAs an tech author with just a few books under my belt, Mark's take on [Practical Prototype and script.aculo.us](http://www.amazon.com/gp/product/1590599195?ie=UTF8&tag=0xdecafbad-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=1590599195) struck a bit of a sour note for me, because I'd like to work on making my tech writing more entertaining than not.  I think that's a good thing, but I'm willing to be convinced otherwise.\r\n\r\nI think the issue is that there are different meanings for \"professional\" when it comes to the web.  There are web scientists and there are web masons.  Web scientists pursue fundamentals and disambiguations, while web masons are busy building the next micro-site for the new product release from the almighty client.  Many web scientists are also computer scientists and many web masons are also web scientists—but most web masons I've known come from creative liberal or fine arts backgrounds.\r\n\r\nThough, for what it's worth, even amongst computer scientists there's still a tradition of [leaving room for jelly stains](http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?ie=UTF8&s=books&qid=1225292376&sr=8-1) and other oddities.  This seems to be the sort of thing Mark acknowledges with dismay.  (\"It’s not fair to blame Mr. DuPont for the general vice.\")\r\n\r\nIs playfulness in literature just a computer science thing?  I'm not a chemist; maybe chemists just  don't like being funny in writing, or maybe their jokes are more subtle.\r\n\r\nIn any case, I think the \"practical\" genre of tech books is aimed at people who want to get something done, aren't interested in or have little time for context or background, yet wouldn't mind being entertained during the course of weekend tinkering and self-education.\r\n\r\n> So, a good book. But take out the jokes, trim back the sample code (or dispatch it to the Web site where it makes more sense), and give us to professional perspective, and everyone is going to be much happier.\r\n\r\nThe guidelines with which I'm familiar for tech books in the \"practical\" or similar genres include advice such as \"show, don't tell\".  They also suggest that, although sample code should be made available online, the author should compose the book assuming that it's a standalone product.  Web sites and CDROMs with code often vanish, but a bound book remains stable—which is especially useful on a cross-country flight without net access.  Professional perspective is of course a desirable thing to work into the prose, but job #1 is to illustrate the right way to do things through running code.\r\n\r\n> How does Prototype+Javascript relate to other languages — C++/STL, say, or SELF? What, precisely, are the semantics of the key methods? I don't need the inevitable chapter 1 pitch for the wonderfulness of Javascript and the badness of MSIE, but it might be a good place for a quick summary for the pros. Call by reference • no pointers • primitives are objects • everything has a prototype slot • parens() do this, braces {} do that, brackets [] do something else • single and double quotes are different. Kernighan & Ritchie did this so well in C, and it’s not like we’re not familiar with their example.\r\n\r\nI'd posit that most in the audience for \"practical\" tech books are entirely unfamiliar with Kernigan & Ritchie and haven't touched a line of C source code.  Most of these readers have probably tumbled down the slope from HTML to CSS and finally to JavaScript in order to get something interesting to happen in a browser—and usually while under an unreasonable deadline.\r\n\r\nI'd really be surprised if many readers have heard of [Self](http://en.wikipedia.org/wiki/Self_programming_language) or [C++/STL](http://en.wikipedia.org/wiki/Standard_Template_Library) or have much of a grounding at all in computer science or programming language fundamentals.  Having these fundamentals would of course help web masons get a deeper understanding of the technologies that make the job possible, but the pragmatic rewards tend not to make up for the effort involved.\r\n\r\nSo, to sum up, the purpose for this entry isn't to beat up on Mark Bernstein.  He's written a great deal of prose and code that I respect, so his opinion is interesting to me.  Rather, I've tried to express my own understanding of this writing market, and hoping I've aimed at the right goals.\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221086683\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.markbernstein.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cdb20bf8e09680028612532944833686&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.markbernstein.org/\">Mark Bernstein</a>\n                </div>\n                <a href=\"#comment-221086683\" class=\"permalink\"><time datetime=\"2008-10-29T16:51:59\">2008-10-29T16:51:59</time></a>\n            </div>\n            <div class=\"content\"><p>I'd settle for a better class of joke!</p>\n\n<p>On tech content, doesn't it annoy <em>you</em> that it's hard (or impossible) to find a book about a Web framework or language or facility that takes advantage of what you already know?  One that doesn't assume you've never seen a language before?  </p>\n\n<p>I understand that publishers want the book to appeal to everyone.  But it's not that the reader needs to know Kernighan: <em>you</em> know, right?  So you know that it's entirely practical to tell a colleague pretty much everything she needs to know about a (famously tricky) new language in one chapter, starting from Kernighan's example 1 -- the original \"Hello, world\".</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086685\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n                </div>\n                <a href=\"#comment-221086685\" class=\"permalink\"><time datetime=\"2008-10-29T20:28:27\">2008-10-29T20:28:27</time></a>\n            </div>\n            <div class=\"content\"><p>I think part of the difference is in the subjects themselves. Programming deals with pure thought stuff, yet at the same time attempts to model concepts from the physical reality. In contrast, science textbooks deal with intrinsically tangible stuff, while mathematics textbooks deal with the abstract for abstraction’s sake. The temptation to offset the potential dullness of pure thought stuff by using it to model goofy examples is obviously high.</p>\n\n<p>Corroborating my theory would be the fact that elementary, low-abstraction maths books tend to bring up oddball examples too – eg. consider the sorts of things used to illustrate the rule of proportion.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086686\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://spindrop.us/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=efe33dc2c55f641837501293866f7dc5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://spindrop.us/\">Dave Dash</a>\n                </div>\n                <a href=\"#comment-221086686\" class=\"permalink\"><time datetime=\"2008-10-30T00:53:54\">2008-10-30T00:53:54</time></a>\n            </div>\n            <div class=\"content\"><p>Most books about web technology are meant to have a shelf life of a few years.  They aren't reference guides, and they aren't meant to stand the test of time.</p>\n\n<p>PHP, Python, Prototype, etc will all change.</p>\n\n<p>Because of this, they can employ jokes and real-world examples.  Jokes make reading the content enjoyable.  Examples are step by step instructions to creating something useful.</p>\n\n<p>If those aren't needed there's always reference guides.</p>\n\n<p>I don't publish books, but I do write tutorials on my blog on occasion.  One pattern I employ in my blog the \"executive summary\" pattern.  I start with the take-away, the code snippet, the answer if you will.  Then I spend the rest of the post (behind the fold, if you will) explaining the answer and interjecting my style.</p>\n\n<p>I like doing this, because it's what I would want.  I want to know the answer, and then I can read on for some backstory... rather than having to separate the wheat from the chaff.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086688\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://andrewdupont.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=fede7405a0e4cd5722e0b85920a0728c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://andrewdupont.net/\">Andrew Dupont</a>\n                </div>\n                <a href=\"#comment-221086688\" class=\"permalink\"><time datetime=\"2008-10-31T03:30:21\">2008-10-31T03:30:21</time></a>\n            </div>\n            <div class=\"content\"><p>I'm quite familiar with the trend Mark's talking about. And I agree that it shouldn't count against me or my book, but perhaps I'm a bit biased there.</p>\n\n<p>Three things.</p>\n\n<p>First: my book reads the way it reads because that's how I write. The process of writing the thing was torturous enough that I doubt I'd have finished it if I subjected every word to the scrutiny of a hypothetical skeptical reader. I'm not good enough at the craft for that. I think that each author has to find his best angle on the material and write that way. Because there are many books and many publishers, it <em>tends</em> to balance out.</p>\n\n<p>Second: my book covers two JavaScript frameworks built to simplify common tasks. Basic familiarity with JavaScript is assumed. Right away that's a step away from the theoretical and toward the practical. I think tech books are best when they stick to one or the other, rather than try to drift between them.</p>\n\n<p>Third: the book Mark wants has already been written: <cite>JavaScript: The Good Parts</cite>, by Doug Crockford. Doug's style is dry and academic, but also direct and substantive. If I tried to write in that style it'd be only a pale imitation.</p>\n\n<p>Anyway... the \"quirky\" trend, I agree, can be tiring. As it applies to my book, the sticking point seems to be whether I'm <em>actually funny</em>. Readers of this weblog will simply have to buy the book to find out. It's several hundred pages long and has a fresh, earthy \"new book\" smell.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086691\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221086691\" class=\"permalink\"><time datetime=\"2008-10-31T03:47:37\">2008-10-31T03:47:37</time></a>\n            </div>\n            <div class=\"content\"><p>@Mark: Yeah, these days my first impulse is not to reach for the latest book on a new technology like a web framework or new language.  I usually head straight for the source code or start soaking in whatever documentation may be lying around on the web.</p>\n\n<p>I suppose I could be a macho geek and say that's why I'm writing the books now—but to be honest I don't tend to get much out of practical programming books.  They seem to sell, though, so I keep wondering if mine shouldn't be lighter or more fun, should I get the opportunity to produce more of them.</p>\n\n<p>My first book was about half-and-half prose and code, with barely any screen shots to be found.  I got to about equal parts code, prose, and screen grabs in my second—I thought that might make it easier reading.  </p>\n\n<p>The latest one doesn't have any jokes, but I tried to get straight to the core framework features and spotlight a few obscure magical bits.  I worry if it might be a bit too dry.</p>\n\n<p>But yeah, I do wish there were more (though maybe shorter) books that started from the assumption that I've got a CS degree and have tangled with a few languages and libraries so far.  On the other hand, I do like having a sense for the author in a book—but that might be thanks to the fact that I read more blogs than books these days and enjoy the personal touches.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086692\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221086692\" class=\"permalink\"><time datetime=\"2008-10-31T04:05:01\">2008-10-31T04:05:01</time></a>\n            </div>\n            <div class=\"content\"><p>@Andrew: Hey, thanks for dropping in for a comment!  I can completely sympathize with needing to find a groove to handle how grueling producing one of these books can be—especially if you're more programmer than writer.  (That's me, right now, anyway.)  You need to get the best thing out there in the shortest amount of time, and find a way to get yourself to finish it.</p>\n\n<p>At any rate, congrats on the new book, and I hope the cross-blog chatter sells a few more copies for you!</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/10/29/jelly-stains-and-web-masons"
  },
  {
    "comments_archived": true,
    "date": "2008-09-01T04:37:03.000Z",
    "layout": "post",
    "tags": [
      "delicious",
      "webdev",
      "javascript",
      "greasemonkey",
      "entries",
      "mozilla",
      "ubiquity"
    ],
    "title": "Writing a Delicious command for Ubiquity",
    "wordpress_id": 1310,
    "wordpress_slug": "writing-a-delicious-command-for-ubiquity",
    "wordpress_url": "http://decafbad.com/blog/?p=1310",
    "year": "2008",
    "month": "09",
    "day": "01",
    "isDir": false,
    "slug": "writing-a-delicious-command-for-ubiquity",
    "postName": "2008-09-01-writing-a-delicious-command-for-ubiquity",
    "html": "<p>In my <a href=\"http://decafbad.com/blog/2008/08/31/ubiquity-cracks-open-personal-mashup-tinkering\" title=\"Ubiquity cracks open personal mashup tinkering\">last post</a>, I got all fluffy about how cool <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> is but didn&#39;t share any code to prove the point.  As it happens, I have come up with at least one useful command that I&#39;m starting to use habitually in posting bookmarks to Delicious.  You can <a href=\"http://decafbad.com/UbiquityCommands/\">subscribe to my command</a> or <a href=\"http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js\">check out the full source</a>—this post will serve as a dissection of the thing.  Since this will be fairly lengthy, follow along after the jump.</p>\n<p>Oh, and it&#39;s been awhile since I posted something this in-depth around here, so feel free to let me know how this first draft works.  And, bug reports and patches are of course welcome.</p>\n<!--more-->\n\n<p>To begin, consider the following code starting off the command source code:</p>\n<pre lang=\"javascript\" line=\"1\">\n/**\n * share-on-delicious - an Ubiquity command for sharing bookmarks on\n * delicious.com\n *\n * l.m.orchard@pobox.com\n * http://decafbad.com/\n * Share and Enjoy!\n */\nvar uext = Application.extensions.get('ubiquity@labs.mozilla.com');\n\nvar cookie_mgr = Components.classes[\"@mozilla.org/cookiemanager;1\"]\n    .getService(Components.interfaces.nsICookieManager);\n</pre>\n\n<p>The first thing to note here is that a short header comment introduces the command.  This isn&#39;t required, but it&#39;s a good idea.  It&#39;s also something you can&#39;t really do with bookmarklets.  On the other hand, Greasemonkey user scripts expect metadata about the script to be provided here, but Ubiquity doesn&#39;t use this convention.</p>\n<p>Second, notice that the code accesses some chrome-level resources.  Again, this is something unavailable to bookmarklets and Greasemonkey user scripts.  Just take a look at the <a href=\"http://developer.mozilla.org/en/FUEL\">FUEL library documentation</a> to get a quick sense of what&#39;s available using that simplified API, not to mention what&#39;s available using the lower-level browser APIs.</p>\n<p>Now, check out this next chunk of code, which begins the construction of an Ubiquity command:</p>\n<pre lang=\"javascript\" line=\"13\">\nCmdUtils.CreateCommand({\n\n    name:        \n        'share-on-delicious',\n    icon:\n        'http://delicious.com/favicon.ico',\n    description: \n        'Share the current page as a bookmark on delicious.com',\n    help:        \n        'Select text on the page to use as notes, or enter your own ' + \n        'text after the command word.  You can also assign tags to the '+ \n        'bookmark with the \"tagged\" modifier, and alter the bookmark ' + \n        'default page title with the \"entitled\" modifier.  Note that ' + \n        'you must also already be logged in at delicious.com to use ' +\n        'this command.',\n\n    homepage:   \n        'http://decafbad.com',\n    author: { \n        name: 'Leslie Michael Orchard', \n        email: 'l.m.orchard@pobox.com' \n    },\n    license:\n        'MPL/GPL/LGPL',\n</pre>\n\n<p>Whereas Greasemonkey scripts support metadata in the header comment, the Ubiquity command script API works a little differently.  </p>\n<p>The <a href=\"http://hg.toolness.com/ubiquity-firefox/file/tip/ubiquity/chrome/content/cmdutils.js\"><code>CmdUtils</code> module</a> provided by Ubiquity offers a <code>CreateCommand</code> function, which expects an object as a parameter.  The object literal whose construction is begun in the code above serves as a self-contained package for the command, bearing metadata describing the command as well as containing all the code necessary to implement it.</p>\n<p>So, in the above code block, you can see the machine-readable description of the command—including a command name, display icon, home page URL, author information, and license.  The command name (<code>share-on-delicious</code>) will be used by the Ubiquity command parser, but the rest of the description will also be used in the list of commands available to the user, invoked by the <code>command-list</code> command, like so:</p>\n<img src=\"/2008/ubiq-share-on-delicious-list.jpg\" style=\"border: 1px solid #333; margin: 0.25em; padding: 0.25em\" />\n\n<p>Moving along, this next chunk of code introduces the first functional bits of the command:</p>\n<pre lang=\"javascript\" line=\"37\">\n    takes: { notes: noun_arb_text },\n    modifiers: { \n        tagged:  noun_arb_text,\n        entitled: noun_arb_text\n    },\n</pre>\n\n<p>Like smart keyword shortcut bookmarks, Ubiquity commands accept user-supplied input.  But, what&#39;s unique to Ubiquity is that it employs a parser whose goal is to support something approximating natural language.  At present, this results in commands that support a single primary argument—declared above with the <code>takes</code> property—and any number of additional keyword modifiers—declared above by the <code>modifiers</code> property.</p>\n<p>For the command under construction here, this establishes a pattern something like the following:</p>\n<pre><code>share-on-delicious {notes} [tagged {tags} entitled {title}]</code></pre>\n<p>Content for the <code>{notes}</code> argument can either be typed directly by hand, or it can be supplied by text highlighted on the page.  To use highlighted text, you can either issue the command alone, or use the word <code>this</code> for the <code>{notes}</code> argument before including further modifiers.</p>\n<p>The modifiers <code>tagged</code> and <code>entitled</code> are optional, and can be used in any order.  Each of these keywords signifies the start of a different argument—which unfortunately can collide with the literal data supplied for notes, which will hopefully be a rare occurrence.</p>\n<p>All of this adds up command invocations including the following:</p>\n<pre><code>share-on-delicious\nshare-on-delicious I really like this page tagged nifty amusing\nshare-on-delicious this entitled This bookmark has no tags\nsh this tagged osx software apple entitled This is good OS X software</code></pre>\n<p>That last example is important—since I have no other commands starting with &quot;<code>sh</code>&quot;, I can abbreviate the full command.  Ubiquity only requires enough of a command name to disambiguate it within your collection of commands.</p>\n<p>Another thing to note is the use of the constant value <code>noun_arb_text</code>, which declares that these arguments should expect any arbitrary text as input.  </p>\n<p>This facility is not exploited for the present command, but Ubiquity defines <a href=\"http://hg.toolness.com/ubiquity-firefox/file/tip/ubiquity/chrome/content/nlparser/en/nountypes.js\">noun types</a>.  These include concepts such as plain text, dates, address book contacts, browser tabs, bookmark tags, and more.  You can define your own noun types, as well as implement suggestion schemes that help guide the user toward constructing useful input values in the command interface.  You can <a href=\"https://wiki.mozilla.org/Labs/Ubiquity/Ubiquity_0.1_Author_Tutorial#Introduction_to_Noun_Types\">read more about this</a> in the official author tutorial.</p>\n<p>Next up is a quick bit of command-specific configuration:</p>\n<pre lang=\"javascript\" line=\"42\">\n    /**\n     * Command configuration settings.\n     */\n    _config: {\n        // Base URL for the delicious v1 API\n        api_base:      'https://api.del.icio.us',\n\n        // Domain and name of the delicious login session cookie.\n        cookie_domain: '.delicious.com',\n        cookie_name:   '_user'\n    },\n</pre>\n\n<p>Since this command will be posting to Delicious via the V1 API, it&#39;s handy to declare the base URL for the API in an easily changed spot.  That way, you could change this value later on to point the command at another implementation of the API.</p>\n<p>Additionally, this command will employ a little-known authentication trick supported by the Delicious API that accepts the user&#39;s login cookie set by the Delicious website—this &quot;cookie god&quot; auth is used by the official Delicious addon for Firefox.  It&#39;s handy for piggybacking on the website login and removing the need to ask the user for their username and password again and possibly storing it in an insecure manner.</p>\n<p>In fact, this next chunk of code defines a utility method to rummage through the cookie jar:</p>\n<pre lang=\"javascript\" line=\"53\">\n    /**\n     * Dig up the Delicious login session cookie.\n     */\n    _getUserCookie: function() {\n        var iter = cookie_mgr.enumerator;\n        while (iter.hasMoreElements()) {\n            var cookie = iter.getNext();\n            if( cookie instanceof Components.interfaces.nsICookie && \n                cookie.host.indexOf(this._config.cookie_domain) != -1 && \n                cookie.name == this._config.cookie_name) {\n                return decodeURIComponent(cookie.value);\n            }\n        }\n    },\n</pre>\n\n<p>The method defined above, <code>._getUserCookie()</code>, uses the browser&#39;s cookie manager and the values defined in the previous configuration section to find the login session cookie set for Delicious.  Take note that this is far beyond the allowed capabilities of bookmarklets and Greasemoney user scripts—this is digging straight into the browser itself, skipping past the usual content-space security restrictions.  </p>\n<p>In other words: In Ubiquity, <em>the gun is loaded</em> and you should be careful.  </p>\n<p>Moving along, consider this next utility method:</p>\n<pre lang=\"javascript\" line=\"67\">\n    /**\n     * Given input data and modifiers, attempt to assemble data necessary to\n     * post a bookmark.\n     */\n    _extractBookmarkData: function(input_obj, mods) {\n        return {\n            _user:\n                this._getUserCookie(),\n            url:\n                context.focusedWindow.location,\n            description:\n                mods.entitled.text || context.focusedWindow.document.title,\n            extended: \n                input_obj.text,\n            tags:\n                mods.tagged.text\n        };\n    },\n</pre>\n\n<p>Named <code>._extractBookmarkData()</code>, this utility method accepts the results of Ubiquity&#39;s parser interpreting the primary argument and modifier arguments supplied by the user.  Using these data structures, it attempts to build a structure representing the fields of a Delicious bookmark.</p>\n<p>The <code>_user</code> field is used for authentication via the site login cookie.  The <code>url</code> is set from the location bar of the current page.  The <code>description</code>, or title, field of the bookmark is taken from either the <code>entitled</code> modifier or the title of the current page.  The <code>tags</code>, if any, come from the <code>tagged</code> modifier.  And, finally, the <code>extended</code> notes for the bookmark are taken from the primary input argument of the command.</p>\n<p>As you&#39;ll see shortly, this utility method will be used in both the preview and the execution of the command.</p>\n<p>Next, there&#39;s one more utility method to cover:</p>\n<pre lang=\"javascript\" line=\"85\">\n    /**\n     * Given an object, build a URL query string\n     */\n    _buildQueryString: function(data) {\n        var qs = [];\n        for (k in data) if (data[k]) \n            qs.push( encodeURIComponent(k) + '=' + \n                encodeURIComponent(data[k]) );\n        return qs.join('&');\n    },\n</pre>\n\n<p>In anticipation of using the Delicious V1 API, the <code>._buildQueryString()</code> method accepts an object and constructs a URL query string from the encoded properties of the object.  This will be paired with the <code>._extractBookmarkData()</code> method to supply data for API calls.</p>\n<p>Moving along, it&#39;s time to start digging into the meat of this Ubiquity command:</p>\n<pre lang=\"javascript\" line=\"95\">\n    /**\n     * Present a preview of the bookmark under construction during the course\n     * of composing the command.\n     */\n    preview: function(pblock, input_obj, mods) {\n\n        var bm          = this._extractBookmarkData(input_obj, mods);\n        var user_cookie = this._getUserCookie();\n        var user_name   = (user_cookie) ? user_cookie.split(' ')[0] : '';\n\n        var ns = { user_name: user_name, bm: bm };\n        var tmpl;\n</pre>\n\n<p>With this code, the implementation of command method <code>.preview()</code> has begun.  This method is used by Ubiquity to generate a live preview of the command.  Called with a DOM node (<code>pblock</code>) and partially completed command input (<code>input_obj</code> and <code>mods</code>), this method is expected to build a representation of the command&#39;s results in the DOM node.  As the user types, this method will be called over and over again, ideally offering feedback as the user composes a command.</p>\n<p>Continuing on, consider this next chunk of code checking the validity of command input:</p>\n<pre lang=\"javascript\" line=\"107\">\n        if (!user_name) {\n\n            // If there's no user name, there's no login, so this command won't work. \n            tmpl = [ \n                '<p style=\"color: #d44\">No active user found - log in at ', \n                '<img src=\"http://delicious.com/favicon.ico\"> ',\n                '<b><a style=\"color: #3774D0\" href=\"http://delicious.com\">delicious.com</a></b> ', \n                'to use this command.</p>'\n            ].join('');\n\n        } else if (!bm.description) {\n\n            // If there's no title, then this is an error too.\n            tmpl = [ \n                '<p style=\"color: #d44\">A title is required for bookmarks on ', \n                '<img src=\"http://delicious.com/favicon.ico\"> ',\n                '<b><a style=\"color: #3774D0\" href=\"http://delicious.com\">delicious.com</a></b> ', \n                '</p>'\n            ].join('');\n</pre>\n\n<p>This chunk of code first checks for a user name, which can be extracted from a valid Delicious login cookie, if one was found.  If not found, the command will fail—so the preview built here will instruct the user to login at Delicious before going further.</p>\n<p>The second precondition for using the command is that the bookmark has been given a title.  By default, this is the title of the current page—but, some pages don&#39;t offer titles.  So, an error needs to be flagged if the user hasn&#39;t manually supplied a title in this case.</p>\n<p>Finally, notice in both of these error cases, a string of HTML is composed in the variable <code>tmpl</code>.  This will be used at the end of the method to populate the DOM node passed in as <code>pblock</code>.</p>\n<p>Now, assuming that all the command&#39;s prerequisites have been met, it&#39;s time to try constructing a proper preview for the results of this command: </p>\n<pre lang=\"javascript\" line=\"126\">\n        } else {\n\n            // Attempt to construct a vaguely delicious-esque preview of a bookmark.\n            tmpl = [ \n                '<style type=\"text/css\">',\n                    '.preview a { color: #3774D0 }',\n                    '.del-bookmark { font: 12px arial; color: #ddd; background: #eee; line-height: 1.25em }',\n                    '.del-bookmark a.title { color: #1259C7 }',\n                    '.del-bookmark .full-url { color: #396C9B; font-size: 12px; display: block; padding: 0.25em 0 }',\n                    '.del-bookmark .notes { color: #4D4D4D }',\n                    '.del-bookmark .tags { color: #787878; padding-top: 0.25em; text-align: right }',\n                '</style>',\n                '<div class=\"preview\">',\n                    '<p>Share a bookmark at <img src=\"http://delicious.com/favicon.ico\"> ',\n                        '<b><a href=\"http://delicious.com/${user_name}\">delicious.com/${user_name}</a></b>:</p>',\n                    '<div class=\"del-bookmark\">',\n                        '<div style=\"padding: 1em;\">',\n                        '<a class=\"title\" href=\"${bm.url}\">${bm.description}</a>',\n                        '<a class=\"full-url\" href=\"${bm.url}\">${bm.url}</a>',\n                        bm.extended ? \n                            '<div class=\"notes\">${bm.extended}</div>' : '',\n                        bm.tags ?\n                            '<div class=\"tags\"><span>tags:</span> ${bm.tags}</div>' : '',\n                    '</div>',\n                '</div>'\n            ].join(\"\\n\");\n\n        }\n\n        pblock.innerHTML = CmdUtils.renderTemplate(tmpl, ns);\n    },\n</pre>\n\n<p>Building on the notion that previews are built in a DOM node, the code above uses both CSS and HTML to assemble a quick-and-dirty facsimile of a Delicious bookmark—which will be rendered like this:</p>\n<img src=\"/2008/ubiq-share-on-delicious-preview.jpg\" style=\"border: 1px solid #333; margin: 0.25em; padding: 0.25em\" />\n\n<p>Also note that Ubiquity provides a template engine for use in generating content—namely the <a href=\"http://code.google.com/p/trimpath/wiki/JavaScriptTemplates\">JavaScript Templates</a> engine from the <a href=\"http://code.google.com/p/trimpath/wiki/TrimPath\">TrimPath</a> project.  This engine may eventually be replaced with another, but the notion is that Ubiquity will provide tools to more easily generate previews and more.</p>\n<p>The conclusion of the <code>.preview()</code> method uses the template engine with a call to <code>CmdUtils.renderTemplate()</code> to inject content into the preview element by way of the <code>.innerHTML</code> property.</p>\n<p>Now that the preview is out of the way, it&#39;s time to get down to implementing the execution of the command:</p>\n<pre lang=\"javascript\" line=\"157\">    \n    /**\n     * Attempt to use the delicious v1 API to post a bookmark using the \n     * command input\n     */\n    execute: function(input_obj, mods) {\n        var bm          = this._extractBookmarkData(input_obj, mods);\n        var user_cookie = this._getUserCookie();\n        var user_name   = (user_cookie) ? user_cookie.split(' ')[0] : '';\n\n        if (!user_name) {\n            // If there's no user name, there's no login, so this command won't work. \n            displayMessage('No active user found - log in at delicious.com ' +\n                'to use this command.');\n            return false;\n        }\n\n        if (!bm.description) {\n            // If there's no title, somehow, then this is an error too.\n            displayMessage(\"A title is required for bookmarks at delicious.com\");\n            return false;\n        }\n</pre>\n\n<p>Mirroring the <code>.preview()</code> method, the <code>.execute()</code> method first checks for validity of the arguments given by the user.  A missing user name or title result in a notification that the command has failed.</p>\n<p>But, if the arguments are all valid, it&#39;s time to actually issue a request to the Delicious V1 API:</p>\n<pre lang=\"javascript\" line=\"178\">\n        var path = '/v1/posts/add';\n        var url  = this._config.api_base + path;\n\n        var req = Components.classes[\"@mozilla.org/xmlextras/xmlhttprequest;1\"].\n            createInstance();\n\n        req.open('POST', url, true);\n\n        req.onload = function(ev) { \n            displayMessage('Bookmark \"' + bm.description + '\" ' + \n                'shared at delicious.com/' + user_name);\n        }\n\n        req.onerror = function(ev) { \n            displayMessage('ERROR: Bookmark \"' + bm.description + '\" ' + \n                ' NOT shared on delicious.com/' + user_name);\n        }\n</pre>\n\n<p>Using the base URL for the Delicious API declared earlier in the configuration section, the <code>.execute()</code> method constructs an API URL for the <code>/v1/posts/add</code> method.  Then, it creates an instance of <code>XMLHttpRequest</code> from the browser to be used in sending the API request.  Event handlers are registered with the object to present notifications to the user indicating whether or not the API request was successful.</p>\n<p>At long last, it&#39;s time to wrap up this method and make the API request:</p>\n<pre lang=\"javascript\" line=\"195\">\n        req.setRequestHeader('Authorization', 'Basic Y29va2llOmNvb2tpZQ=='); // btoa('cookie:cookie')\n\n        var mediator = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\n            getService(Components.interfaces.nsIWindowMediator);\n        var win = mediator.getMostRecentWindow(null);\n        var user_agent = win.navigator.userAgent + \";Ubiquity-share-on-delicious\";\n\n        req.setRequestHeader(\"User-Agent\", user_agent);      \n\n        req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n        req.send(this._buildQueryString(bm));\n    },\n\n    EOF:null // I hate trailing commas\n});\n</pre>\n\n<p>The login cookie authentication supported by the Delicious V1 API is triggered by supplying a user name / password pair of <code>cookie</code>, which is done by setting the <code>Authorization</code> request header.  The login cookie is then expected to be passed in as the POST variable <code>_user</code>, which is done in the <code>._extractBookmarkData()</code> utility method.</p>\n<p>Another bit here that shows more access of browser resources is the construction of a unique User-Agent header for this API call based on the browser&#39;s own User-Agent string, something that&#39;s suggested in the guidelines for using the Delicious API.</p>\n<p>Finally, the <code>.execute()</code> method—and the command itself—is wrapped up with by sending off the bookmark data encoded as POST form variables with the <code>._buildQueryString()</code> utility method.</p>\n<p>And, that&#39;s it—a command-driven Delicious browser extension in a little over 200 lines of code.  There&#39;s still more to be done to really make this thing full-featured, but I think this shows off the basic features of Ubiquity.  I&#39;m hoping to dig in deeper and explore further, taking a look at running Greasemonkey-style code at <a href=\"https://wiki.mozilla.org/Labs/Ubiquity/Ubiquity_0.1_Author_Tutorial#Running_on_page_load_and_startup\">browser startup and page load</a>, as well as playing with some more browser chrome features.  </p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221085986\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://jclark.org/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d0a9ab4b71ce193e98b7284ca257e327&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://jclark.org/weblog/\">Jason Clark</a>\n</div>\n<a href=\"#comment-221085986\" class=\"permalink\"><time datetime=\"2008-09-01T14:47:35\">2008-09-01T14:47:35</time></a>\n</div>\n<div class=\"content\"><p>First off-  fantastic post.  Great to see a lengthy post here again, although I'm one to talk.  This is an excellent introduction to Ubiquity command development, and tres useful to boot.</p>\n<p>I'm wondering why you chose to construct and post the XMLHttpRequest manually instead of using jQuery, which is included with Ubiquity.  I don't know that there's any benefit other than some simplicity, but I took a crack at converting your code to use jQuery, which works nicely.  In the 'execute' function, replace everything after \"var url  = this._config.api_base + path;\" with this (hope code blocks work in comments):</p>\n<p><code>\nvar win = context.focusedWindow;\nvar user_agent = win.navigator.userAgent + \";Ubiquity-share-on-delicious\";</code></p>\n<pre><code>    jQuery.ajax({\ntype: \"POST\",\nurl: url,\ndata: this._buildQueryString(bm),\nusername: \"cookie\",\npassword: \"cookie\",\nbeforeSend: function( req ) {\nreq.setRequestHeader(\"User-Agent\", user_agent); \n},\nerror: function() {\ndisplayMessage('ERROR: Bookmark \"' + bm.description + '\" ' + \n' NOT shared on delicious.com/' + user_name);\n},\nsuccess: function() {\ndisplayMessage('Bookmark \"' + bm.description + '\" ' + \n'shared at delicious.com/' + user_name);\n},\n});\n</code></pre>\n<p></p>\n<p>Also, with both versions of the code, I'm seeing some unexpected behavior around authentication.  Assume I'm logged in to delicious, with \"stay logged in\" checked, and I restart my browser.  Trying to post with the command fails with a 401 unauthorized, even though I can see the cookie was sent (via Live HTTP Headers extension).  Going to delicious.com shows me logged in, and once I've viewed the site, the command works.  Except that now I can't reproduce; but I know it happened because I've got the headers.  At any rate, it is working nicely, but the previous failure is bugging me... feel like I'm overlooking something.  </p>\n<p>Thanks again for an awesome post.  Hope to see more of the same.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085988\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e799a79441c7543be48562403411cd13&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Ryan Scott Scheel</a>\n</div>\n<a href=\"#comment-221085988\" class=\"permalink\"><time datetime=\"2008-09-01T15:07:01\">2008-09-01T15:07:01</time></a>\n</div>\n<div class=\"content\"><p>You should be helping with the documentation, if you aren't already.  Very nice job with this article;</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085991\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://azarask.in\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e4307f205d017ba76647806951e14bb0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://azarask.in\">Aza Raskin</a>\n</div>\n<a href=\"#comment-221085991\" class=\"permalink\"><time datetime=\"2008-09-02T01:44:13\">2008-09-02T01:44:13</time></a>\n</div>\n<div class=\"content\"><p>Hi Leslie,</p>\n<p>This is a beautiful tutorial on writing a Ubiquity command. We'd love your help in making Ubiquity's documentation better (especially dev facing). You should totally link to this from the Ubiquity Wiki -- or even add the content in someway.</p>\n<p>Anyway, just wanted to say thanks.</p>\n<p>-- Aza</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085993\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.slackorama.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15b474c86cd73c2d12c1d77af11c1d8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.slackorama.com\">seth</a>\n</div>\n<a href=\"#comment-221085993\" class=\"permalink\"><time datetime=\"2008-09-08T17:30:16\">2008-09-08T17:30:16</time></a>\n</div>\n<div class=\"content\"><p>Am I doing something wrong?  </p>\n<p>When I enter in \"sh this tagged tag1 tag2 entitled This is a title\" everything after the tagged is added as a tag. It's not seeing the entitled part.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085994\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://spyced.blogspot.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=849810634810c960e5e7c27fa54a0f5b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://spyced.blogspot.com/\">http://spyced.blogspot.com/</a>\n</div>\n<a href=\"#comment-221085994\" class=\"permalink\"><time datetime=\"2008-09-15T19:12:58\">2008-09-15T19:12:58</time></a>\n</div>\n<div class=\"content\"><p>Did something break?  I'm getting a 404 accessing http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085995\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221085995\" class=\"permalink\"><time datetime=\"2008-09-15T23:07:42\">2008-09-15T23:07:42</time></a>\n</div>\n<div class=\"content\"><p>Yeah, looks like I had a small snafu with switching back from Lighttpd to Apache.  Left out a rewrite rule - doh!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085996\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tony</a>\n</div>\n<a href=\"#comment-221085996\" class=\"permalink\"><time datetime=\"2008-10-22T04:56:03\">2008-10-22T04:56:03</time></a>\n</div>\n<div class=\"content\"><p>Great article. This is replacing my delicious bookmarklet. Thanks!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085997\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=31461076fcbce091ff822fc9ac31315d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">dgtlchlk</a>\n</div>\n<a href=\"#comment-221085997\" class=\"permalink\"><time datetime=\"2009-04-14T01:06:57\">2009-04-14T01:06:57</time></a>\n</div>\n<div class=\"content\"><p>Great article and command.\nWish it worked correctly with the latest 0.1.8 release though. No matter what text you put in it adds everything as the notes. The tagged and entitled modifiers don't work.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085999\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.nolanhergert.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=957e24509baf770ba57ad306e20f201c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.nolanhergert.com\">Nolan</a>\n</div>\n<a href=\"#comment-221085999\" class=\"permalink\"><time datetime=\"2009-04-16T03:10:07\">2009-04-16T03:10:07</time></a>\n</div>\n<div class=\"content\"><p>I second that comment. Delicious is actually saying the link given was \"chrome://browser/content/browser.xul\" and marking it as harmful inside delicious!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086002\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3d056a5b07c384647fe0806b0dfc429e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Justin</a>\n</div>\n<a href=\"#comment-221086002\" class=\"permalink\"><time datetime=\"2009-07-06T12:39:39\">2009-07-06T12:39:39</time></a>\n</div>\n<div class=\"content\"><p>Hi Leslie,</p>\n<p>Thanks for the delicious ubiquity command. Unfortunately, as one of the commenters above mentions, the tagged modifier doesn't seem to work. I'm using Ubiquity 0.5 pre and typing the phrase:</p>\n<p>share tagged foo</p>\n<p>Adds the bookmark to Delicious with the note text \"tagged foo\"</p>\n<p>Cheers, Justin</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086004\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://ericscalf.com/stream\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0775f9beff626496b86d7cb602e5f46f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://ericscalf.com/stream\">Eric</a>\n</div>\n<a href=\"#comment-221086004\" class=\"permalink\"><time datetime=\"2009-07-20T22:43:17\">2009-07-20T22:43:17</time></a>\n</div>\n<div class=\"content\"><p>Echoing others.. I'm using the latest ubiquity (err, next to latest.. 0.1.8?), and doing \"share-on-delicious this is a note tagged testing\" saves the link with notes \"this is a note tagged testing\" and no tags. :(  Then again, the other delicious command I've found (by someone else) is having the same issue.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "In my [last post][last], I got all fluffy about how cool [Ubiquity][] is but didn't share any code to prove the point.  As it happens, I have come up with at least one useful command that I'm starting to use habitually in posting bookmarks to Delicious.  You can [subscribe to my command][subs] or [check out the full source][source]—this post will serve as a dissection of the thing.  Since this will be fairly lengthy, follow along after the jump.\r\n\r\nOh, and it's been awhile since I posted something this in-depth around here, so feel free to let me know how this first draft works.  And, bug reports and patches are of course welcome.\r\n\r\n[ubiquity]: http://labs.mozilla.com/2008/08/introducing-ubiquity/\r\n[last]: http://decafbad.com/blog/2008/08/31/ubiquity-cracks-open-personal-mashup-tinkering \"Ubiquity cracks open personal mashup tinkering\"\r\n[subs]: http://decafbad.com/UbiquityCommands/\r\n[source]: http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js\r\n\r\n<!--more-->\r\n\r\nTo begin, consider the following code starting off the command source code:\r\n\r\n<pre lang=\"javascript\" line=\"1\">\r\n/**\r\n * share-on-delicious - an Ubiquity command for sharing bookmarks on\r\n * delicious.com\r\n *\r\n * l.m.orchard@pobox.com\r\n * http://decafbad.com/\r\n * Share and Enjoy!\r\n */\r\nvar uext = Application.extensions.get('ubiquity@labs.mozilla.com');\r\n\r\nvar cookie_mgr = Components.classes[\"@mozilla.org/cookiemanager;1\"]\r\n    .getService(Components.interfaces.nsICookieManager);\r\n</pre>\r\n\r\nThe first thing to note here is that a short header comment introduces the command.  This isn't required, but it's a good idea.  It's also something you can't really do with bookmarklets.  On the other hand, Greasemonkey user scripts expect metadata about the script to be provided here, but Ubiquity doesn't use this convention.\r\n\r\nSecond, notice that the code accesses some chrome-level resources.  Again, this is something unavailable to bookmarklets and Greasemonkey user scripts.  Just take a look at the [FUEL library documentation][fuel] to get a quick sense of what's available using that simplified API, not to mention what's available using the lower-level browser APIs.\r\n\r\n[fuel]: http://developer.mozilla.org/en/FUEL\r\n\r\nNow, check out this next chunk of code, which begins the construction of an Ubiquity command:\r\n\r\n<pre lang=\"javascript\" line=\"13\">\r\nCmdUtils.CreateCommand({\r\n    \r\n    name:        \r\n        'share-on-delicious',\r\n    icon:\r\n        'http://delicious.com/favicon.ico',\r\n    description: \r\n        'Share the current page as a bookmark on delicious.com',\r\n    help:        \r\n        'Select text on the page to use as notes, or enter your own ' + \r\n        'text after the command word.  You can also assign tags to the '+ \r\n        'bookmark with the \"tagged\" modifier, and alter the bookmark ' + \r\n        'default page title with the \"entitled\" modifier.  Note that ' + \r\n        'you must also already be logged in at delicious.com to use ' +\r\n        'this command.',\r\n\r\n    homepage:   \r\n        'http://decafbad.com',\r\n    author: { \r\n        name: 'Leslie Michael Orchard', \r\n        email: 'l.m.orchard@pobox.com' \r\n    },\r\n    license:\r\n        'MPL/GPL/LGPL',\r\n</pre>\r\n\r\nWhereas Greasemonkey scripts support metadata in the header comment, the Ubiquity command script API works a little differently.  \r\n\r\nThe [`CmdUtils` module][cmdutils] provided by Ubiquity offers a `CreateCommand` function, which expects an object as a parameter.  The object literal whose construction is begun in the code above serves as a self-contained package for the command, bearing metadata describing the command as well as containing all the code necessary to implement it.\r\n\r\nSo, in the above code block, you can see the machine-readable description of the command—including a command name, display icon, home page URL, author information, and license.  The command name (`share-on-delicious`) will be used by the Ubiquity command parser, but the rest of the description will also be used in the list of commands available to the user, invoked by the `command-list` command, like so:\r\n\r\n<img src=\"/2008/ubiq-share-on-delicious-list.jpg\" style=\"border: 1px solid #333; margin: 0.25em; padding: 0.25em\" />\r\n\r\n[cmdutils]: http://hg.toolness.com/ubiquity-firefox/file/tip/ubiquity/chrome/content/cmdutils.js\r\n\r\nMoving along, this next chunk of code introduces the first functional bits of the command:\r\n\r\n<pre lang=\"javascript\" line=\"37\">\r\n    takes: { notes: noun_arb_text },\r\n    modifiers: { \r\n        tagged:  noun_arb_text,\r\n        entitled: noun_arb_text\r\n    },\r\n</pre>\r\n\r\nLike smart keyword shortcut bookmarks, Ubiquity commands accept user-supplied input.  But, what's unique to Ubiquity is that it employs a parser whose goal is to support something approximating natural language.  At present, this results in commands that support a single primary argument—declared above with the `takes` property—and any number of additional keyword modifiers—declared above by the `modifiers` property.\r\n\r\nFor the command under construction here, this establishes a pattern something like the following:\r\n\r\n    share-on-delicious {notes} [tagged {tags} entitled {title}]\r\n\r\nContent for the `{notes}` argument can either be typed directly by hand, or it can be supplied by text highlighted on the page.  To use highlighted text, you can either issue the command alone, or use the word `this` for the `{notes}` argument before including further modifiers.\r\n\r\nThe modifiers `tagged` and `entitled` are optional, and can be used in any order.  Each of these keywords signifies the start of a different argument—which unfortunately can collide with the literal data supplied for notes, which will hopefully be a rare occurrence.\r\n\r\nAll of this adds up command invocations including the following:\r\n\r\n    share-on-delicious\r\n    share-on-delicious I really like this page tagged nifty amusing\r\n    share-on-delicious this entitled This bookmark has no tags\r\n    sh this tagged osx software apple entitled This is good OS X software\r\n\r\nThat last example is important—since I have no other commands starting with \"`sh`\", I can abbreviate the full command.  Ubiquity only requires enough of a command name to disambiguate it within your collection of commands.\r\n\r\nAnother thing to note is the use of the constant value `noun_arb_text`, which declares that these arguments should expect any arbitrary text as input.  \r\n\r\nThis facility is not exploited for the present command, but Ubiquity defines [noun types][noun].  These include concepts such as plain text, dates, address book contacts, browser tabs, bookmark tags, and more.  You can define your own noun types, as well as implement suggestion schemes that help guide the user toward constructing useful input values in the command interface.  You can [read more about this][noun_tut] in the official author tutorial.\r\n\r\n[noun]: http://hg.toolness.com/ubiquity-firefox/file/tip/ubiquity/chrome/content/nlparser/en/nountypes.js\r\n[noun_tut]: https://wiki.mozilla.org/Labs/Ubiquity/Ubiquity_0.1_Author_Tutorial#Introduction_to_Noun_Types\r\n\r\nNext up is a quick bit of command-specific configuration:\r\n\r\n<pre lang=\"javascript\" line=\"42\">\r\n    /**\r\n     * Command configuration settings.\r\n     */\r\n    _config: {\r\n        // Base URL for the delicious v1 API\r\n        api_base:      'https://api.del.icio.us',\r\n\r\n        // Domain and name of the delicious login session cookie.\r\n        cookie_domain: '.delicious.com',\r\n        cookie_name:   '_user'\r\n    },\r\n</pre>\r\n\r\nSince this command will be posting to Delicious via the V1 API, it's handy to declare the base URL for the API in an easily changed spot.  That way, you could change this value later on to point the command at another implementation of the API.\r\n\r\nAdditionally, this command will employ a little-known authentication trick supported by the Delicious API that accepts the user's login cookie set by the Delicious website—this \"cookie god\" auth is used by the official Delicious addon for Firefox.  It's handy for piggybacking on the website login and removing the need to ask the user for their username and password again and possibly storing it in an insecure manner.\r\n\r\nIn fact, this next chunk of code defines a utility method to rummage through the cookie jar:\r\n\r\n<pre lang=\"javascript\" line=\"53\">\r\n    /**\r\n     * Dig up the Delicious login session cookie.\r\n     */\r\n    _getUserCookie: function() {\r\n        var iter = cookie_mgr.enumerator;\r\n        while (iter.hasMoreElements()) {\r\n            var cookie = iter.getNext();\r\n            if( cookie instanceof Components.interfaces.nsICookie && \r\n                cookie.host.indexOf(this._config.cookie_domain) != -1 && \r\n                cookie.name == this._config.cookie_name) {\r\n                return decodeURIComponent(cookie.value);\r\n            }\r\n        }\r\n    },\r\n</pre>\r\n\r\nThe method defined above, `._getUserCookie()`, uses the browser's cookie manager and the values defined in the previous configuration section to find the login session cookie set for Delicious.  Take note that this is far beyond the allowed capabilities of bookmarklets and Greasemoney user scripts—this is digging straight into the browser itself, skipping past the usual content-space security restrictions.  \r\n\r\nIn other words: In Ubiquity, *the gun is loaded* and you should be careful.  \r\n\r\nMoving along, consider this next utility method:\r\n\r\n<pre lang=\"javascript\" line=\"67\">\r\n    /**\r\n     * Given input data and modifiers, attempt to assemble data necessary to\r\n     * post a bookmark.\r\n     */\r\n    _extractBookmarkData: function(input_obj, mods) {\r\n        return {\r\n            _user:\r\n                this._getUserCookie(),\r\n            url:\r\n                context.focusedWindow.location,\r\n            description:\r\n                mods.entitled.text || context.focusedWindow.document.title,\r\n            extended: \r\n                input_obj.text,\r\n            tags:\r\n                mods.tagged.text\r\n        };\r\n    },\r\n</pre>\r\n\r\nNamed `._extractBookmarkData()`, this utility method accepts the results of Ubiquity's parser interpreting the primary argument and modifier arguments supplied by the user.  Using these data structures, it attempts to build a structure representing the fields of a Delicious bookmark.\r\n\r\nThe `_user` field is used for authentication via the site login cookie.  The `url` is set from the location bar of the current page.  The `description`, or title, field of the bookmark is taken from either the `entitled` modifier or the title of the current page.  The `tags`, if any, come from the `tagged` modifier.  And, finally, the `extended` notes for the bookmark are taken from the primary input argument of the command.\r\n\r\nAs you'll see shortly, this utility method will be used in both the preview and the execution of the command.\r\n\r\nNext, there's one more utility method to cover:\r\n\r\n<pre lang=\"javascript\" line=\"85\">\r\n    /**\r\n     * Given an object, build a URL query string\r\n     */\r\n    _buildQueryString: function(data) {\r\n        var qs = [];\r\n        for (k in data) if (data[k]) \r\n            qs.push( encodeURIComponent(k) + '=' + \r\n                encodeURIComponent(data[k]) );\r\n        return qs.join('&');\r\n    },\r\n</pre>\r\n\r\nIn anticipation of using the Delicious V1 API, the `._buildQueryString()` method accepts an object and constructs a URL query string from the encoded properties of the object.  This will be paired with the `._extractBookmarkData()` method to supply data for API calls.\r\n\r\nMoving along, it's time to start digging into the meat of this Ubiquity command:\r\n\r\n<pre lang=\"javascript\" line=\"95\">\r\n    /**\r\n     * Present a preview of the bookmark under construction during the course\r\n     * of composing the command.\r\n     */\r\n    preview: function(pblock, input_obj, mods) {\r\n\r\n        var bm          = this._extractBookmarkData(input_obj, mods);\r\n        var user_cookie = this._getUserCookie();\r\n        var user_name   = (user_cookie) ? user_cookie.split(' ')[0] : '';\r\n\r\n        var ns = { user_name: user_name, bm: bm };\r\n        var tmpl;\r\n</pre>\r\n\r\nWith this code, the implementation of command method `.preview()` has begun.  This method is used by Ubiquity to generate a live preview of the command.  Called with a DOM node (`pblock`) and partially completed command input (`input_obj` and `mods`), this method is expected to build a representation of the command's results in the DOM node.  As the user types, this method will be called over and over again, ideally offering feedback as the user composes a command.\r\n\r\nContinuing on, consider this next chunk of code checking the validity of command input:\r\n\r\n<pre lang=\"javascript\" line=\"107\">\r\n        if (!user_name) {\r\n\r\n            // If there's no user name, there's no login, so this command won't work. \r\n            tmpl = [ \r\n                '<p style=\"color: #d44\">No active user found - log in at ', \r\n                '<img src=\"http://delicious.com/favicon.ico\"> ',\r\n                '<b><a style=\"color: #3774D0\" href=\"http://delicious.com\">delicious.com</a></b> ', \r\n                'to use this command.</p>'\r\n            ].join('');\r\n\r\n        } else if (!bm.description) {\r\n\r\n            // If there's no title, then this is an error too.\r\n            tmpl = [ \r\n                '<p style=\"color: #d44\">A title is required for bookmarks on ', \r\n                '<img src=\"http://delicious.com/favicon.ico\"> ',\r\n                '<b><a style=\"color: #3774D0\" href=\"http://delicious.com\">delicious.com</a></b> ', \r\n                '</p>'\r\n            ].join('');\r\n</pre>\r\n\r\nThis chunk of code first checks for a user name, which can be extracted from a valid Delicious login cookie, if one was found.  If not found, the command will fail—so the preview built here will instruct the user to login at Delicious before going further.\r\n\r\nThe second precondition for using the command is that the bookmark has been given a title.  By default, this is the title of the current page—but, some pages don't offer titles.  So, an error needs to be flagged if the user hasn't manually supplied a title in this case.\r\n\r\nFinally, notice in both of these error cases, a string of HTML is composed in the variable `tmpl`.  This will be used at the end of the method to populate the DOM node passed in as `pblock`.\r\n\r\nNow, assuming that all the command's prerequisites have been met, it's time to try constructing a proper preview for the results of this command: \r\n\r\n<pre lang=\"javascript\" line=\"126\">\r\n        } else {\r\n\r\n            // Attempt to construct a vaguely delicious-esque preview of a bookmark.\r\n            tmpl = [ \r\n                '<style type=\"text/css\">',\r\n                    '.preview a { color: #3774D0 }',\r\n                    '.del-bookmark { font: 12px arial; color: #ddd; background: #eee; line-height: 1.25em }',\r\n                    '.del-bookmark a.title { color: #1259C7 }',\r\n                    '.del-bookmark .full-url { color: #396C9B; font-size: 12px; display: block; padding: 0.25em 0 }',\r\n                    '.del-bookmark .notes { color: #4D4D4D }',\r\n                    '.del-bookmark .tags { color: #787878; padding-top: 0.25em; text-align: right }',\r\n                '</style>',\r\n                '<div class=\"preview\">',\r\n                    '<p>Share a bookmark at <img src=\"http://delicious.com/favicon.ico\"> ',\r\n                        '<b><a href=\"http://delicious.com/${user_name}\">delicious.com/${user_name}</a></b>:</p>',\r\n                    '<div class=\"del-bookmark\">',\r\n                        '<div style=\"padding: 1em;\">',\r\n                        '<a class=\"title\" href=\"${bm.url}\">${bm.description}</a>',\r\n                        '<a class=\"full-url\" href=\"${bm.url}\">${bm.url}</a>',\r\n                        bm.extended ? \r\n                            '<div class=\"notes\">${bm.extended}</div>' : '',\r\n                        bm.tags ?\r\n                            '<div class=\"tags\"><span>tags:</span> ${bm.tags}</div>' : '',\r\n                    '</div>',\r\n                '</div>'\r\n            ].join(\"\\n\");\r\n\r\n        }\r\n\r\n        pblock.innerHTML = CmdUtils.renderTemplate(tmpl, ns);\r\n    },\r\n</pre>\r\n\r\nBuilding on the notion that previews are built in a DOM node, the code above uses both CSS and HTML to assemble a quick-and-dirty facsimile of a Delicious bookmark—which will be rendered like this:\r\n\r\n<img src=\"/2008/ubiq-share-on-delicious-preview.jpg\" style=\"border: 1px solid #333; margin: 0.25em; padding: 0.25em\" />\r\n\r\nAlso note that Ubiquity provides a template engine for use in generating content—namely the [JavaScript Templates][jst] engine from the [TrimPath][] project.  This engine may eventually be replaced with another, but the notion is that Ubiquity will provide tools to more easily generate previews and more.\r\n\r\nThe conclusion of the `.preview()` method uses the template engine with a call to `CmdUtils.renderTemplate()` to inject content into the preview element by way of the `.innerHTML` property.\r\n\r\n[jst]: http://code.google.com/p/trimpath/wiki/JavaScriptTemplates\r\n[trimpath]: http://code.google.com/p/trimpath/wiki/TrimPath\r\n\r\nNow that the preview is out of the way, it's time to get down to implementing the execution of the command:\r\n\r\n<pre lang=\"javascript\" line=\"157\">    \r\n    /**\r\n     * Attempt to use the delicious v1 API to post a bookmark using the \r\n     * command input\r\n     */\r\n    execute: function(input_obj, mods) {\r\n        var bm          = this._extractBookmarkData(input_obj, mods);\r\n        var user_cookie = this._getUserCookie();\r\n        var user_name   = (user_cookie) ? user_cookie.split(' ')[0] : '';\r\n\r\n        if (!user_name) {\r\n            // If there's no user name, there's no login, so this command won't work. \r\n            displayMessage('No active user found - log in at delicious.com ' +\r\n                'to use this command.');\r\n            return false;\r\n        }\r\n\r\n        if (!bm.description) {\r\n            // If there's no title, somehow, then this is an error too.\r\n            displayMessage(\"A title is required for bookmarks at delicious.com\");\r\n            return false;\r\n        }\r\n</pre>\r\n\r\nMirroring the `.preview()` method, the `.execute()` method first checks for validity of the arguments given by the user.  A missing user name or title result in a notification that the command has failed.\r\n\r\nBut, if the arguments are all valid, it's time to actually issue a request to the Delicious V1 API:\r\n\r\n<pre lang=\"javascript\" line=\"178\">\r\n        var path = '/v1/posts/add';\r\n        var url  = this._config.api_base + path;\r\n\r\n        var req = Components.classes[\"@mozilla.org/xmlextras/xmlhttprequest;1\"].\r\n            createInstance();\r\n\r\n        req.open('POST', url, true);\r\n\r\n        req.onload = function(ev) { \r\n            displayMessage('Bookmark \"' + bm.description + '\" ' + \r\n                'shared at delicious.com/' + user_name);\r\n        }\r\n\r\n        req.onerror = function(ev) { \r\n            displayMessage('ERROR: Bookmark \"' + bm.description + '\" ' + \r\n                ' NOT shared on delicious.com/' + user_name);\r\n        }\r\n</pre>\r\n\r\nUsing the base URL for the Delicious API declared earlier in the configuration section, the `.execute()` method constructs an API URL for the `/v1/posts/add` method.  Then, it creates an instance of `XMLHttpRequest` from the browser to be used in sending the API request.  Event handlers are registered with the object to present notifications to the user indicating whether or not the API request was successful.\r\n\r\nAt long last, it's time to wrap up this method and make the API request:\r\n\r\n<pre lang=\"javascript\" line=\"195\">\r\n        req.setRequestHeader('Authorization', 'Basic Y29va2llOmNvb2tpZQ=='); // btoa('cookie:cookie')\r\n\r\n        var mediator = Components.classes[\"@mozilla.org/appshell/window-mediator;1\"].\r\n            getService(Components.interfaces.nsIWindowMediator);\r\n        var win = mediator.getMostRecentWindow(null);\r\n        var user_agent = win.navigator.userAgent + \";Ubiquity-share-on-delicious\";\r\n\r\n        req.setRequestHeader(\"User-Agent\", user_agent);      \r\n\r\n        req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n        req.send(this._buildQueryString(bm));\r\n    },\r\n\r\n    EOF:null // I hate trailing commas\r\n});\r\n</pre>\r\n\r\nThe login cookie authentication supported by the Delicious V1 API is triggered by supplying a user name / password pair of `cookie`, which is done by setting the `Authorization` request header.  The login cookie is then expected to be passed in as the POST variable `_user`, which is done in the `._extractBookmarkData()` utility method.\r\n\r\nAnother bit here that shows more access of browser resources is the construction of a unique User-Agent header for this API call based on the browser's own User-Agent string, something that's suggested in the guidelines for using the Delicious API.\r\n\r\nFinally, the `.execute()` method—and the command itself—is wrapped up with by sending off the bookmark data encoded as POST form variables with the `._buildQueryString()` utility method.\r\n\r\nAnd, that's it—a command-driven Delicious browser extension in a little over 200 lines of code.  There's still more to be done to really make this thing full-featured, but I think this shows off the basic features of Ubiquity.  I'm hoping to dig in deeper and explore further, taking a look at running Greasemonkey-style code at [browser startup and page load][load], as well as playing with some more browser chrome features.  \r\n\r\n[load]: https://wiki.mozilla.org/Labs/Ubiquity/Ubiquity_0.1_Author_Tutorial#Running_on_page_load_and_startup\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221085986\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://jclark.org/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d0a9ab4b71ce193e98b7284ca257e327&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://jclark.org/weblog/\">Jason Clark</a>\n                </div>\n                <a href=\"#comment-221085986\" class=\"permalink\"><time datetime=\"2008-09-01T14:47:35\">2008-09-01T14:47:35</time></a>\n            </div>\n            <div class=\"content\"><p>First off-  fantastic post.  Great to see a lengthy post here again, although I'm one to talk.  This is an excellent introduction to Ubiquity command development, and tres useful to boot.</p>\n\n<p>I'm wondering why you chose to construct and post the XMLHttpRequest manually instead of using jQuery, which is included with Ubiquity.  I don't know that there's any benefit other than some simplicity, but I took a crack at converting your code to use jQuery, which works nicely.  In the 'execute' function, replace everything after \"var url  = this._config.api_base + path;\" with this (hope code blocks work in comments):</p>\n\n<p><code>\n        var win = context.focusedWindow;\n        var user_agent = win.navigator.userAgent + \";Ubiquity-share-on-delicious\";</code></p>\n\n<pre><code>    jQuery.ajax({\n      type: \"POST\",\n      url: url,\n      data: this._buildQueryString(bm),\n      username: \"cookie\",\n      password: \"cookie\",\n      beforeSend: function( req ) {\n        req.setRequestHeader(\"User-Agent\", user_agent); \n      },\n      error: function() {\n        displayMessage('ERROR: Bookmark \"' + bm.description + '\" ' + \n            ' NOT shared on delicious.com/' + user_name);\n      },\n      success: function() {\n        displayMessage('Bookmark \"' + bm.description + '\" ' + \n            'shared at delicious.com/' + user_name);\n      },\n    });\n</code></pre>\n\n<p></p>\n\n<p>Also, with both versions of the code, I'm seeing some unexpected behavior around authentication.  Assume I'm logged in to delicious, with \"stay logged in\" checked, and I restart my browser.  Trying to post with the command fails with a 401 unauthorized, even though I can see the cookie was sent (via Live HTTP Headers extension).  Going to delicious.com shows me logged in, and once I've viewed the site, the command works.  Except that now I can't reproduce; but I know it happened because I've got the headers.  At any rate, it is working nicely, but the previous failure is bugging me... feel like I'm overlooking something.  </p>\n\n<p>Thanks again for an awesome post.  Hope to see more of the same.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085988\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e799a79441c7543be48562403411cd13&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Ryan Scott Scheel</a>\n                </div>\n                <a href=\"#comment-221085988\" class=\"permalink\"><time datetime=\"2008-09-01T15:07:01\">2008-09-01T15:07:01</time></a>\n            </div>\n            <div class=\"content\"><p>You should be helping with the documentation, if you aren't already.  Very nice job with this article;</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085991\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://azarask.in\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e4307f205d017ba76647806951e14bb0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://azarask.in\">Aza Raskin</a>\n                </div>\n                <a href=\"#comment-221085991\" class=\"permalink\"><time datetime=\"2008-09-02T01:44:13\">2008-09-02T01:44:13</time></a>\n            </div>\n            <div class=\"content\"><p>Hi Leslie,</p>\n\n<p>This is a beautiful tutorial on writing a Ubiquity command. We'd love your help in making Ubiquity's documentation better (especially dev facing). You should totally link to this from the Ubiquity Wiki -- or even add the content in someway.</p>\n\n<p>Anyway, just wanted to say thanks.</p>\n\n<p>-- Aza</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085993\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.slackorama.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15b474c86cd73c2d12c1d77af11c1d8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.slackorama.com\">seth</a>\n                </div>\n                <a href=\"#comment-221085993\" class=\"permalink\"><time datetime=\"2008-09-08T17:30:16\">2008-09-08T17:30:16</time></a>\n            </div>\n            <div class=\"content\"><p>Am I doing something wrong?  </p>\n\n<p>When I enter in \"sh this tagged tag1 tag2 entitled This is a title\" everything after the tagged is added as a tag. It's not seeing the entitled part.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085994\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://spyced.blogspot.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=849810634810c960e5e7c27fa54a0f5b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://spyced.blogspot.com/\">http://spyced.blogspot.com/</a>\n                </div>\n                <a href=\"#comment-221085994\" class=\"permalink\"><time datetime=\"2008-09-15T19:12:58\">2008-09-15T19:12:58</time></a>\n            </div>\n            <div class=\"content\"><p>Did something break?  I'm getting a 404 accessing http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085995\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221085995\" class=\"permalink\"><time datetime=\"2008-09-15T23:07:42\">2008-09-15T23:07:42</time></a>\n            </div>\n            <div class=\"content\"><p>Yeah, looks like I had a small snafu with switching back from Lighttpd to Apache.  Left out a rewrite rule - doh!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085996\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Tony</a>\n                </div>\n                <a href=\"#comment-221085996\" class=\"permalink\"><time datetime=\"2008-10-22T04:56:03\">2008-10-22T04:56:03</time></a>\n            </div>\n            <div class=\"content\"><p>Great article. This is replacing my delicious bookmarklet. Thanks!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085997\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=31461076fcbce091ff822fc9ac31315d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">dgtlchlk</a>\n                </div>\n                <a href=\"#comment-221085997\" class=\"permalink\"><time datetime=\"2009-04-14T01:06:57\">2009-04-14T01:06:57</time></a>\n            </div>\n            <div class=\"content\"><p>Great article and command.\nWish it worked correctly with the latest 0.1.8 release though. No matter what text you put in it adds everything as the notes. The tagged and entitled modifiers don't work.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085999\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.nolanhergert.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=957e24509baf770ba57ad306e20f201c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.nolanhergert.com\">Nolan</a>\n                </div>\n                <a href=\"#comment-221085999\" class=\"permalink\"><time datetime=\"2009-04-16T03:10:07\">2009-04-16T03:10:07</time></a>\n            </div>\n            <div class=\"content\"><p>I second that comment. Delicious is actually saying the link given was \"chrome://browser/content/browser.xul\" and marking it as harmful inside delicious!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086002\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3d056a5b07c384647fe0806b0dfc429e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Justin</a>\n                </div>\n                <a href=\"#comment-221086002\" class=\"permalink\"><time datetime=\"2009-07-06T12:39:39\">2009-07-06T12:39:39</time></a>\n            </div>\n            <div class=\"content\"><p>Hi Leslie,</p>\n\n<p>Thanks for the delicious ubiquity command. Unfortunately, as one of the commenters above mentions, the tagged modifier doesn't seem to work. I'm using Ubiquity 0.5 pre and typing the phrase:</p>\n\n<p>share tagged foo</p>\n\n<p>Adds the bookmark to Delicious with the note text \"tagged foo\"</p>\n\n<p>Cheers, Justin</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086004\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://ericscalf.com/stream\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0775f9beff626496b86d7cb602e5f46f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://ericscalf.com/stream\">Eric</a>\n                </div>\n                <a href=\"#comment-221086004\" class=\"permalink\"><time datetime=\"2009-07-20T22:43:17\">2009-07-20T22:43:17</time></a>\n            </div>\n            <div class=\"content\"><p>Echoing others.. I'm using the latest ubiquity (err, next to latest.. 0.1.8?), and doing \"share-on-delicious this is a note tagged testing\" saves the link with notes \"this is a note tagged testing\" and no tags. :(  Then again, the other delicious command I've found (by someone else) is having the same issue.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/08/31/writing-a-delicious-command-for-ubiquity",
    "thumbnail": "/2008/ubiq-share-on-delicious-list.jpg",
    "summary": "<p>In my <a href=\"http://decafbad.com/blog/2008/08/31/ubiquity-cracks-open-personal-mashup-tinkering\" title=\"Ubiquity cracks open personal mashup tinkering\">last post</a>, I got all fluffy about how cool <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> is but didn&apos;t share any code to prove the point.  As it happens, I have come up with at least one useful command that I&apos;m starting to use habitually in posting bookmarks to Delicious.  You can <a href=\"http://decafbad.com/UbiquityCommands/\">subscribe to my command</a> or <a href=\"http://decafbad.com/hg/UbiquityCommands/file/tip/delicious.ubiq.js\">check out the full source</a>&#x2014;this post will serve as a dissection of the thing.  Since this will be fairly lengthy, follow along after the jump.</p>\n<p>Oh, and it&apos;s been awhile since I posted something this in-depth around here, so feel free to let me know how this first draft works.  And, bug reports and patches are of course welcome.</p>\n"
  },
  {
    "comments_archived": true,
    "date": "2008-08-31T04:07:22.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "mashups",
      "javascript",
      "entries",
      "mozilla",
      "ubiquity"
    ],
    "title": "Ubiquity cracks open personal mashup tinkering",
    "wordpress_id": 1286,
    "wordpress_slug": "ubiquity-cracks-open-personal-mashup-tinkering",
    "wordpress_url": "http://decafbad.com/blog/?p=1286",
    "year": "2008",
    "month": "08",
    "day": "31",
    "isDir": false,
    "slug": "ubiquity-cracks-open-personal-mashup-tinkering",
    "postName": "2008-08-31-ubiquity-cracks-open-personal-mashup-tinkering",
    "html": "<p>When I was a wee hacker, I lived my digital life though a <a href=\"http://www.virtualsky.net/iadoremyc64/\">Commodore 64</a>.  I played games on it, did homework, talked to people far away—you know, all the stuff they showed in the pictures on the box.  I also took things apart—both the machine itself and software running on it.  I grew up learning that my digital environment was ultimately understandable, <a href=\"http://cbm.csbruce.com/~csbruce/cbm/transactor/\">susceptible to tinkering</a>, and open to being bent to my own purposes.</p>\n<p>From the Commodore 64, I graduated eventually to terminals and text editors, opening portals mostly onto computers elsewhere via powerful UNIX command shells.  And, of course, over the past decade, this has largely given way to life in a browser.  </p>\n<p>Yet, for a little while, particularly in the first few years of browsers, freedom to tinker seemed cramped.  JavaScript had yet to arrive, and was a little messy when it did.  There was no relatively easy addon development.  And, though the portals opened by a browser were richer than those provided by terminals, the paths of navigation defined by links controlled by site owners offered less freedom of movement than UNIX commands.  I could create my own pages, but I couldn&#39;t do much to others&#39; pages.</p>\n<p>But then, javascript: URLs came around, dots were connected, and <a href=\"http://en.wikipedia.org/wiki/Bookmarklet\">bookmarklets</a> were born.  Suddenly, it was possible to customize <em>my</em> browsing environment with arbitrary JavaScript code having access to the current page—no matter <em>whose</em> page it was.  And, through the various tricks of the AJAX trade, bookmarklets have only gotten more capable throughout the years.</p>\n<p><a href=\"http://www.mozilla.org/docs/end-user/keywords.html\">Smart keyword shortcuts</a> came around a little later, allowing quick access to bookmarks via simple keywords typed into the location bar.  The smart part, though, came in the form of bookmarked URLs with placeholders and keywords given arguments to fill the placeholders—allowing not only quick access to bookmarked pages but also search engine forms bookmarked with late-bound fields.</p>\n<p>Bookmarklets inherited the benefits of smart keyword shortcuts.  The same placeholder in http: URLs can be inserted into the code of a javascript: URL, thus parameterizing the JavaScript code and incidentally turning the location bar into a kind of primitive command line.  For example, one of my most heavily used &quot;<a href=\"http://naeblis.cx/weblog/2004/08/09/DeliciousAddresslets\">addresslets</a>&quot; is based on <a href=\"http://ejohn.org/blog/super-fast-delicious-bookmarklet/\">John Resig&#39;s original &quot;Super-Fast Delicious Bookmarklet&quot;</a>.</p>\n<p>Another leap in prying open the browser tinkering space came in the form of <a href=\"http://www.greasespot.net/\">Greasemonkey</a>—an addon-powered environment created explicitly for the purpose of end-user scripting applied to others&#39; pages.  <a href=\"http://www.greasespot.net/\">Greasemonkey</a> user scripts can do more than bookmarklets, and with a much better development environment to boot.  And, though a user script can&#39;t do quite as much as a proper browser addon, they&#39;re much easier to hack on and distribute.</p>\n<p>Now, consider one of <a href=\"http://labs.mozilla.com/\">Mozilla Labs</a>&#39; <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">newest projects</a>, named <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a>.  This rough and experimental addon for Firefox combines and improves upon everything I&#39;ve described so far:</p>\n<ul>\n<li><a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> is a hackable command line environment, better than <a href=\"http://en.wikipedia.org/wiki/Bookmarklet\">bookmarklets</a> and smart <a href=\"http://www.mozilla.org/docs/end-user/keywords.html\">keyword shortcuts</a>;</li>\n<li><a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> enables persistent customization of others&#39; pages, not unlike <a href=\"http://www.greasespot.net/\">Greasemonkey</a>; </li>\n<li><a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> facilitates live in-browser creation and web-based subscription to user commands and scripts;</li>\n<li><a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> gives access to browser chrome resources without a need for frequent restarts;</li>\n</ul>\n<p>So far, most of the <a href=\"https://labs.toolness.com/ubiquity-herd/\">commands</a> I see popping up since the 0.1 release have not accomplished much more than <a href=\"http://www.mozilla.org/docs/end-user/keywords.html\">smart keyword shortcuts</a> in the location bar could.  But, it&#39;s early yet, and <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> is far from limited to these commands.</p>\n<p>Once the basics have been well-explored, I expect to see more people taking a crack at the broader capabilities offered by <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a>.  <a href=\"http://en.wikipedia.org/wiki/Bookmarklet\">Bookmarklets</a> and <a href=\"http://www.greasespot.net/\">Greasemonkey</a> can&#39;t access browser chrome—but <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> can.  <a href=\"http://labs.mozilla.com/2008/08/introducing-ubiquity/\">Ubiquity</a> also offers a user interface that&#39;s so much more promising than keyword shortcuts, including command previews and typed parameters with suggestions.</p>\n<p>Ubiquity promises web-wide mashups directed by a conversational command interface.  All in all, the potential of this makes me feel like my digital environment—browser and web as a whole—is getting even more intimately, personally hackable.  </p>\n<p>It&#39;ll be very interesting to see where this project goes.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221089574\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=22b4e824255828f5aedd0e6e2558dc52&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Raul</a>\n</div>\n<a href=\"#comment-221089574\" class=\"permalink\"><time datetime=\"2008-08-31T10:20:58\">2008-08-31T10:20:58</time></a>\n</div>\n<div class=\"content\"><p>Hi, was using the original delicious command linked from the Ubiquity wiki, just tried yours and its definitely more polished and functional. Great job with the preview and the extra functionality. Only thing is 'share-to-delicious' is too much to type so I unsubscribed the previous command and changed the namespace in yours. This is clearly going to become a problems as the commands proliferate.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089575\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221089575\" class=\"permalink\"><time datetime=\"2008-08-31T14:43:39\">2008-08-31T14:43:39</time></a>\n</div>\n<div class=\"content\"><p>@Raul: \"share-to-delicious\" is long, but keep in mind is that you only need to type enough of the command to disambiguate it.  That is, all I type is \"sh this tagged osx software apple\" because I have no other commands starting with \"sh\".  Watch the list of commands in the preview as you type.  Those tell you what the parser thinks of what you're typing as you type.  It's like automatic tab-completion.</p>\n<p>Also, I think there's work planned to put some usage based sorting into the command parser, preferring the commands you use most in order of disambiguation.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089576\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\">Abi</a>\n</div>\n<a href=\"#comment-221089576\" class=\"permalink\"><time datetime=\"2008-08-31T15:33:24\">2008-08-31T15:33:24</time></a>\n</div>\n<div class=\"content\"><p>Nice post. I share your sentiment with regards to Ubiquity commands. A lot of commands that I see are just plain simple searches. I hope developers will work on more interesting things. For example, even things like auto-form filling for this comment (possibly even on page load without having to type a command) could be done by Ubiquity. There's still a lot more room for experimentation.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089578\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\">Abi</a>\n</div>\n<a href=\"#comment-221089578\" class=\"permalink\"><time datetime=\"2008-08-31T15:45:59\">2008-08-31T15:45:59</time></a>\n</div>\n<div class=\"content\"><p></p>\n<p>But otherwise, I <em>really</em> like your command especially the preivew. We should include it as a builtin command, if you don't mind. :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089580\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\">Abi</a>\n</div>\n<a href=\"#comment-221089580\" class=\"permalink\"><time datetime=\"2008-08-31T15:51:20\">2008-08-31T15:51:20</time></a>\n</div>\n<div class=\"content\"><p>I noticed a bug in your command. If I select some text in the awesomebar, the bookmark url is chrome. You should use something the command utils to get the url, instead.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089582\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221089582\" class=\"permalink\"><time datetime=\"2008-09-01T06:17:37\">2008-09-01T06:17:37</time></a>\n</div>\n<div class=\"content\"><p>@Abi: Making this a built-in command is totally fine by me!  It can use more work, though, for sure.</p>\n<p>Also, I can reproduce that bug.  Ugh.  I can't find any methods in the CmdUtils to get the current page URL, though.  I'll keep poking a bit though.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089584\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://abcdefu.wordpress.com\">Abi</a>\n</div>\n<a href=\"#comment-221089584\" class=\"permalink\"><time datetime=\"2008-09-01T06:50:23\">2008-09-01T06:50:23</time></a>\n</div>\n<div class=\"content\"><p>Your blog seems to be rejecting code (that's why I had so many posts in the first place). You can get the current page url using (with dots):</p>\n<p>CmdUtils  getDocumentInsecure() location href</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221089586\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://theunfocused.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=738af918f39d544f8b0d765850c986f8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://theunfocused.net/\">Blair McBride</a>\n</div>\n<a href=\"#comment-221089586\" class=\"permalink\"><time datetime=\"2008-09-02T02:50:12\">2008-09-02T02:50:12</time></a>\n</div>\n<div class=\"content\"><p>I recommend against using getDocumentInsecure() - its got \"Insecure\" in its name for a reason! Instead, you should use:</p>\n<p>Application.activeWindow.activeTab.uri.spec</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "When I was a wee hacker, I lived my digital life though a [Commodore 64][c64].  I played games on it, did homework, talked to people far away—you know, all the stuff they showed in the pictures on the box.  I also took things apart—both the machine itself and software running on it.  I grew up learning that my digital environment was ultimately understandable, [susceptible to tinkering][transactor], and open to being bent to my own purposes.\r\n\r\nFrom the Commodore 64, I graduated eventually to terminals and text editors, opening portals mostly onto computers elsewhere via powerful UNIX command shells.  And, of course, over the past decade, this has largely given way to life in a browser.  \r\n\r\nYet, for a little while, particularly in the first few years of browsers, freedom to tinker seemed cramped.  JavaScript had yet to arrive, and was a little messy when it did.  There was no relatively easy addon development.  And, though the portals opened by a browser were richer than those provided by terminals, the paths of navigation defined by links controlled by site owners offered less freedom of movement than UNIX commands.  I could create my own pages, but I couldn't do much to others' pages.\r\n\r\nBut then, javascript: URLs came around, dots were connected, and [bookmarklets][] were born.  Suddenly, it was possible to customize *my* browsing environment with arbitrary JavaScript code having access to the current page—no matter *whose* page it was.  And, through the various tricks of the AJAX trade, bookmarklets have only gotten more capable throughout the years.\r\n\r\n[Smart keyword shortcuts][shortcuts] came around a little later, allowing quick access to bookmarks via simple keywords typed into the location bar.  The smart part, though, came in the form of bookmarked URLs with placeholders and keywords given arguments to fill the placeholders—allowing not only quick access to bookmarked pages but also search engine forms bookmarked with late-bound fields.\r\n\r\nBookmarklets inherited the benefits of smart keyword shortcuts.  The same placeholder in http: URLs can be inserted into the code of a javascript: URL, thus parameterizing the JavaScript code and incidentally turning the location bar into a kind of primitive command line.  For example, one of my most heavily used \"[addresslets](http://naeblis.cx/weblog/2004/08/09/DeliciousAddresslets)\" is based on [John Resig's original \"Super-Fast Delicious Bookmarklet\"](http://ejohn.org/blog/super-fast-delicious-bookmarklet/).\r\n\r\nAnother leap in prying open the browser tinkering space came in the form of [Greasemonkey][]—an addon-powered environment created explicitly for the purpose of end-user scripting applied to others' pages.  [Greasemonkey][] user scripts can do more than bookmarklets, and with a much better development environment to boot.  And, though a user script can't do quite as much as a proper browser addon, they're much easier to hack on and distribute.\r\n\r\nNow, consider one of [Mozilla Labs][labs]' [newest projects][ubiquity], named [Ubiquity][].  This rough and experimental addon for Firefox combines and improves upon everything I've described so far:\r\n\r\n* [Ubiquity][] is a hackable command line environment, better than [bookmarklets][] and smart [keyword shortcuts][shortcuts];\r\n* [Ubiquity][] enables persistent customization of others' pages, not unlike [Greasemonkey][]; \r\n* [Ubiquity][] facilitates live in-browser creation and web-based subscription to user commands and scripts;\r\n* [Ubiquity][] gives access to browser chrome resources without a need for frequent restarts;\r\n\r\nSo far, most of the [commands][] I see popping up since the 0.1 release have not accomplished much more than [smart keyword shortcuts][shortcuts] in the location bar could.  But, it's early yet, and [Ubiquity][] is far from limited to these commands.\r\n\r\nOnce the basics have been well-explored, I expect to see more people taking a crack at the broader capabilities offered by [Ubiquity][].  [Bookmarklets][] and [Greasemonkey][] can't access browser chrome—but [Ubiquity][] can.  [Ubiquity][] also offers a user interface that's so much more promising than keyword shortcuts, including command previews and typed parameters with suggestions.\r\n\r\nUbiquity promises web-wide mashups directed by a conversational command interface.  All in all, the potential of this makes me feel like my digital environment—browser and web as a whole—is getting even more intimately, personally hackable.  \r\n\r\nIt'll be very interesting to see where this project goes.\r\n\r\n[labs]: http://labs.mozilla.com/\r\n[transactor]: http://cbm.csbruce.com/~csbruce/cbm/transactor/\r\n[c64]: http://www.virtualsky.net/iadoremyc64/\r\n[shortcuts]: http://www.mozilla.org/docs/end-user/keywords.html\r\n[greasemonkey]: http://www.greasespot.net/\r\n[bookmarklets]: http://en.wikipedia.org/wiki/Bookmarklet\r\n[ubiquity]: http://labs.mozilla.com/2008/08/introducing-ubiquity/\r\n[commands]: https://labs.toolness.com/ubiquity-herd/\r\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221089574\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=22b4e824255828f5aedd0e6e2558dc52&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Raul</a>\n                </div>\n                <a href=\"#comment-221089574\" class=\"permalink\"><time datetime=\"2008-08-31T10:20:58\">2008-08-31T10:20:58</time></a>\n            </div>\n            <div class=\"content\"><p>Hi, was using the original delicious command linked from the Ubiquity wiki, just tried yours and its definitely more polished and functional. Great job with the preview and the extra functionality. Only thing is 'share-to-delicious' is too much to type so I unsubscribed the previous command and changed the namespace in yours. This is clearly going to become a problems as the commands proliferate.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089575\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221089575\" class=\"permalink\"><time datetime=\"2008-08-31T14:43:39\">2008-08-31T14:43:39</time></a>\n            </div>\n            <div class=\"content\"><p>@Raul: \"share-to-delicious\" is long, but keep in mind is that you only need to type enough of the command to disambiguate it.  That is, all I type is \"sh this tagged osx software apple\" because I have no other commands starting with \"sh\".  Watch the list of commands in the preview as you type.  Those tell you what the parser thinks of what you're typing as you type.  It's like automatic tab-completion.</p>\n\n<p>Also, I think there's work planned to put some usage based sorting into the command parser, preferring the commands you use most in order of disambiguation.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089576\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\">Abi</a>\n                </div>\n                <a href=\"#comment-221089576\" class=\"permalink\"><time datetime=\"2008-08-31T15:33:24\">2008-08-31T15:33:24</time></a>\n            </div>\n            <div class=\"content\"><p>Nice post. I share your sentiment with regards to Ubiquity commands. A lot of commands that I see are just plain simple searches. I hope developers will work on more interesting things. For example, even things like auto-form filling for this comment (possibly even on page load without having to type a command) could be done by Ubiquity. There's still a lot more room for experimentation.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089578\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\">Abi</a>\n                </div>\n                <a href=\"#comment-221089578\" class=\"permalink\"><time datetime=\"2008-08-31T15:45:59\">2008-08-31T15:45:59</time></a>\n            </div>\n            <div class=\"content\"><p></p>\n\n<p>But otherwise, I <em>really</em> like your command especially the preivew. We should include it as a builtin command, if you don't mind. :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089580\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\">Abi</a>\n                </div>\n                <a href=\"#comment-221089580\" class=\"permalink\"><time datetime=\"2008-08-31T15:51:20\">2008-08-31T15:51:20</time></a>\n            </div>\n            <div class=\"content\"><p>I noticed a bug in your command. If I select some text in the awesomebar, the bookmark url is chrome. You should use something the command utils to get the url, instead.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089582\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221089582\" class=\"permalink\"><time datetime=\"2008-09-01T06:17:37\">2008-09-01T06:17:37</time></a>\n            </div>\n            <div class=\"content\"><p>@Abi: Making this a built-in command is totally fine by me!  It can use more work, though, for sure.</p>\n\n<p>Also, I can reproduce that bug.  Ugh.  I can't find any methods in the CmdUtils to get the current page URL, though.  I'll keep poking a bit though.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089584\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=af8b180d6d4092fb42fe6b5e0b21536c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://abcdefu.wordpress.com\">Abi</a>\n                </div>\n                <a href=\"#comment-221089584\" class=\"permalink\"><time datetime=\"2008-09-01T06:50:23\">2008-09-01T06:50:23</time></a>\n            </div>\n            <div class=\"content\"><p>Your blog seems to be rejecting code (that's why I had so many posts in the first place). You can get the current page url using (with dots):</p>\n\n<p>CmdUtils  getDocumentInsecure() location href</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221089586\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://theunfocused.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=738af918f39d544f8b0d765850c986f8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://theunfocused.net/\">Blair McBride</a>\n                </div>\n                <a href=\"#comment-221089586\" class=\"permalink\"><time datetime=\"2008-09-02T02:50:12\">2008-09-02T02:50:12</time></a>\n            </div>\n            <div class=\"content\"><p>I recommend against using getDocumentInsecure() - its got \"Insecure\" in its name for a reason! Instead, you should use:</p>\n\n<p>Application.activeWindow.activeTab.uri.spec</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/08/30/ubiquity-cracks-open-personal-mashup-tinkering"
  },
  {
    "comments_archived": true,
    "date": "2008-07-17T18:16:01.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "delicious",
      "webdev",
      "pagination"
    ],
    "title": "date-based pagination",
    "wordpress_id": 1219,
    "wordpress_slug": "date-based-pagination",
    "wordpress_url": "http://decafbad.com/blog/2008/07/17/date-based-pagination",
    "year": "2008",
    "month": "07",
    "day": "17",
    "isDir": false,
    "slug": "date-based-pagination",
    "postName": "2008-07-17-date-based-pagination",
    "html": "<p>Here&#39;s a small idea I&#39;ve not yet had the chance to try out on a large scale:  Time-based pagination in lieu of page-number-based pagination for personal content - ie. blogs, bookmarks, status updates, etc.  (You know, User Generated Content except I dislike the term.)</p>\n<p>Page numbers change over time, while time-based URLs are stable.  Most people don&#39;t generate an unreasonable amount of stuff in a day, so a page-per-day might not be so bad.  But, if there&#39;s too much stuff, degenerate to a page-per-12-hours or whatnot.</p>\n<p>Delicious used to have something like this in the web UI, back in the mists of 2003 or so, but Joshua got rid of it after a few design iterations.  The Delicious API is still somewhat based on it, which causes some confusion—but I tend to like it, thus this post.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221085362\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\">fluffy</a>\n</div>\n<a href=\"#comment-221085362\" class=\"permalink\"><time datetime=\"2008-07-17T20:22:38\">2008-07-17T20:22:38</time></a>\n</div>\n<div class=\"content\"><p>You mean, like the date-based archives that Movable Type has had for ages?</p>\n<p>Yeah, I like those.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085363\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://brevity.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=55d0166df4149bbea204bb997f8447cb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://brevity.org/\">Neil Kandalgaonkar</a>\n</div>\n<a href=\"#comment-221085363\" class=\"permalink\"><time datetime=\"2008-07-18T19:44:42\">2008-07-18T19:44:42</time></a>\n</div>\n<div class=\"content\"><p>I've had the same idea for Upcoming, for obvious reasons... our SRP pagination would then be permalinks.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085364\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.anildash.com/\"><img src=\"http://disqus.com/api/users/avatars/anildash.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.anildash.com/\">Anil Dash</a>\n</div>\n<a href=\"#comment-221085364\" class=\"permalink\"><time datetime=\"2008-07-25T17:11:40\">2008-07-25T17:11:40</time></a>\n</div>\n<div class=\"content\"><p>Actually, yeah, we built the default pagination for archives in MT4 to be category-by-month, for exactly this reason. I regularly see \"?page=2\" in URLs and it just seems like such an obvious, avoidable mistake for so many to have embraced. SEO aside, permalinks that are destined to expire over time seem pretty reader-hostile, too.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Here's a small idea I've not yet had the chance to try out on a large scale:  Time-based pagination in lieu of page-number-based pagination for personal content - ie. blogs, bookmarks, status updates, etc.  (You know, User Generated Content except I dislike the term.)\r\n\r\nPage numbers change over time, while time-based URLs are stable.  Most people don't generate an unreasonable amount of stuff in a day, so a page-per-day might not be so bad.  But, if there's too much stuff, degenerate to a page-per-12-hours or whatnot.\r\n\r\nDelicious used to have something like this in the web UI, back in the mists of 2003 or so, but Joshua got rid of it after a few design iterations.  The Delicious API is still somewhat based on it, which causes some confusion—but I tend to like it, thus this post.\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221085362\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://beesbuzz.biz/\">fluffy</a>\n                </div>\n                <a href=\"#comment-221085362\" class=\"permalink\"><time datetime=\"2008-07-17T20:22:38\">2008-07-17T20:22:38</time></a>\n            </div>\n            <div class=\"content\"><p>You mean, like the date-based archives that Movable Type has had for ages?</p>\n\n<p>Yeah, I like those.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085363\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://brevity.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=55d0166df4149bbea204bb997f8447cb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://brevity.org/\">Neil Kandalgaonkar</a>\n                </div>\n                <a href=\"#comment-221085363\" class=\"permalink\"><time datetime=\"2008-07-18T19:44:42\">2008-07-18T19:44:42</time></a>\n            </div>\n            <div class=\"content\"><p>I've had the same idea for Upcoming, for obvious reasons... our SRP pagination would then be permalinks.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085364\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.anildash.com/\"><img src=\"http://disqus.com/api/users/avatars/anildash.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.anildash.com/\">Anil Dash</a>\n                </div>\n                <a href=\"#comment-221085364\" class=\"permalink\"><time datetime=\"2008-07-25T17:11:40\">2008-07-25T17:11:40</time></a>\n            </div>\n            <div class=\"content\"><p>Actually, yeah, we built the default pagination for archives in MT4 to be category-by-month, for exactly this reason. I regularly see \"?page=2\" in URLs and it just seems like such an obvious, avoidable mistake for so many to have embraced. SEO aside, permalinks that are destined to expire over time seem pretty reader-hostile, too.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/07/17/date-based-pagination"
  },
  {
    "comments_archived": true,
    "date": "2008-07-04T19:17:18.000Z",
    "layout": "post",
    "tags": [
      "delicious",
      "webdev",
      "twitter",
      "entries",
      "laconica",
      "scaling",
      "queues"
    ],
    "title": "Queue everything and delight everyone",
    "wordpress_id": 1194,
    "wordpress_slug": "queue-everything-and-delight-everyone",
    "wordpress_url": "http://decafbad.com/blog/?p=1194",
    "year": "2008",
    "month": "07",
    "day": "04",
    "isDir": false,
    "slug": "queue-everything-and-delight-everyone",
    "postName": "2008-07-04-queue-everything-and-delight-everyone",
    "html": "<p>This is a blog post I&#39;ve had simmering in my brainmeats for well over a year or two.  I&#39;m suddenly inspired to break blog-radio-silence and get it out of my head.</p>\n<p>From <a href=\"http://www.russellbeattie.com/blog/let-the-microblogs-bloom\">Let the microblogs bloom - RussellBeattie.com</a>:</p>\n<blockquote>Once this is widely accepted (and I'm sure there are many that would argue with me), the thing that will separate these types of services won't be whether they stay up (ala Twitter), but how fast your subscription messages are updated. Some services might be smaller or offer more features but not update as quickly whereas others will pride themselves on being as close to real-time as possible. The key is that it's all about messaging, not publishing. (Oh, and this also facilitates federation as well, but that's another topic).</blockquote>\n\n<p>See also: <a href=\"http://randomfoo.net/blog/id/4182\">Rearchitecting Twitter: Brought to You By the 17th Letter of the Alphabet - random($foo)</a></p>\n<p>One of the problems it seems most modern web apps face is the tendency to want to do everything all at once, and all in the same code that responds directly to a user.  Because, while you&#39;re in there building a user interface, it&#39;s <em>easy</em> to implement everything else that needs to happen in that same UI module or library.</p>\n<p>Someone wants to post a bookmark?  Someone wants to post a message?  Well, of course you want the system to cross-reference and deliver that new piece of User Generated Content through every permutation of tag, recipient, keyword, and notification channel supported by your system.  </p>\n<p><strong>But</strong>, do you <em>really</em> have to do everything all at once—while the person who generated that content is tapping his or her foot, waiting for the web interface to respond with feedback?  Are all of these things immediately vital to the person watching the browser spin, <em>right now</em>?  </p>\n<p>No.  Your user wants to get on with things.  He or she wants to see the submitted content get accepted and, as feedback and confirmation, see it reflected in a personal view immediately.  Does it matter—to <em>this person</em>, at <em>this moment</em>—whether it shows up <em>simultaneously</em> in a friend&#39;s inbox, the public timeline, a global tag page, or even an RSS or Atom feed?</p>\n<p>Again, no, simultaneity doesn&#39;t really matter—because no human beings actually appreciate it.  Instead, imagine a ripple effect of concentric social and attention contexts with associated people spreading out from the original submission.  (This probably rates the creation of a diagram someday.)  </p>\n<ul>\n<li><p>To make the person who&#39;s submitting something happy, offer feedback visible in their own personal context in under 50-200 milliseconds.  (That is, less than half-a-second at worst, in people terms.)</p>\n</li>\n<li><p>The next person to delight is someone following the first person&#39;s published content—and humanly speaking, delays of <em>tens of thousands of milliseconds</em> can be acceptable here.  (That is, 1-10 seconds at worst, in people terms.)</p>\n</li>\n<li><p>Finally, you can start worrying about strangers, allowing the content to propagate to tag pages, keyword tracking pages, and other public views—and I&#39;d assert that delays of <em>hundreds of thousands of milliseconds</em> are acceptable here.  (That is, 1-2 minutes at worst, in people terms.)</p>\n</li>\n</ul>\n<p>The idea here is that the social structure can help you scale, while still delighting people.  Even with these delays, the system is still better at getting the word out than the original content creator would be at notifying all the others involved with an out-of-band system like IM or email.  And that&#39;s at worst—on most good days, all the delays should tend to be on the order of seconds or less.</p>\n<p>And how do you do all of this?  Use queues.  Sure, the original submission of content can and should be done all at once—just enough to get the content into the user&#39;s collection.  Then, queue a job for further processing and get out of the way.  In fact, just queue one job from the user interface—the processor of <em>that</em> queue can then queue further jobs for all the other individual processing tasks that are likely susceptible to plenty of parallel processing and horizontal scaling.</p>\n<p>Meanwhile, the original user creating content has been thanked for their submission and life goes on.  In fact, their life may include going on to submit many more pieces of content in rapid succession, thanks to your delightfully responsive web user interface.  </p>\n<p>And, in the end, that&#39;s really the purpose of a web-based content creation interface—accepting something as quickly as possible to make the user happy enough to continue submitting more.  The other part of the user interface, retrieval, serves simply to get the original content distributed as fast as can be reasonably expected.</p>\n<p>Now, preparing for fast retrieval is another story.  The flip side to processing queues are message inboxes—expect content duplicated everywhere and fetched simply, rather than using cleverly expressed SQL joins that bring a system to its knees.  But, that&#39;s another post altogether. :)</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221083313\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://fatalerror.in\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15516fd23722eeca86b8ea91738eea4b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://fatalerror.in\">shyam</a>\n</div>\n<a href=\"#comment-221083313\" class=\"permalink\"><time datetime=\"2008-07-04T21:12:46\">2008-07-04T21:12:46</time></a>\n</div>\n<div class=\"content\"><p>Interesting bits of conversation happening all over the place regarding queues and the irony of it all - the much maligned Java has had workqueues since the early days.</p>\n<p>What everyone will learn, rather painfully in in cases like Twitter, is that all data is not created, consumed or processed equally. If you write your system which treats data equally you'll wind up with many Twitters all over the place.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083314\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221083314\" class=\"permalink\"><time datetime=\"2008-07-04T21:37:30\">2008-07-04T21:37:30</time></a>\n</div>\n<div class=\"content\"><p>Oh, definitely.  Work queues are not a new thing at all.  It's just that I think there're a lot of modern web app builders who skipped Java \"enterprise\" software—skipped, or hoped to run away—and are rediscovering the whole set of problems.  Maybe the solutions will be less over-engineered this time.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083315\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://mikewarot.blogspot.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=04f21a4b6a007063d191b66c34f71710&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://mikewarot.blogspot.com\">Mike Warot</a>\n</div>\n<a href=\"#comment-221083315\" class=\"permalink\"><time datetime=\"2008-07-04T21:40:15\">2008-07-04T21:40:15</time></a>\n</div>\n<div class=\"content\"><p>The thing that drives me nuts about twitter is that the core data rate is only about 30k/second... yet it kept going down. It's easy to spit out a broadcast to a subnet and never even miss a packet if there are only 100 of them per second or so. There's no reason on god's green earth that twitter should be anywhere near overloaded.</p>\n<p>Bad architecture, on the other hand, is the work of Satan. ;-)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083317\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://simonwillison.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ac7005eff7720218df4cf0c72ddf6a3d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://simonwillison.net/\">Simon Willison</a>\n</div>\n<a href=\"#comment-221083317\" class=\"permalink\"><time datetime=\"2008-07-04T21:40:39\">2008-07-04T21:40:39</time></a>\n</div>\n<div class=\"content\"><p>Thank you! I've been trying to put my thumb on why queues are so interesting for months; this expresses it perfectly.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083319\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://blog.wachob.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5c8ad784d2b5d12d57cf707dded1d58c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://blog.wachob.com\">Gabe Wachob</a>\n</div>\n<a href=\"#comment-221083319\" class=\"permalink\"><time datetime=\"2008-07-04T22:54:10\">2008-07-04T22:54:10</time></a>\n</div>\n<div class=\"content\"><p>Usually I would have something serious to say in agreement with you, because I do so much agree with you.</p>\n<p>But I have just one comment: </p>\n<p>DUH!!!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083320\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.docuverse.com/blog/donpark/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=88f2ee32d146425a422f58f8eab5424b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.docuverse.com/blog/donpark/\">Don Park</a>\n</div>\n<a href=\"#comment-221083320\" class=\"permalink\"><time datetime=\"2008-07-06T05:16:32\">2008-07-06T05:16:32</time></a>\n</div>\n<div class=\"content\"><p>Good suggestions. For social services like Twitter, I would also add one more item:</p>\n<p>Prioritize by Relationship</p>\n<p>For example, two-way Twitter relationships (mutual-follow or recent @ or direct message exchange) should be refreshed before one-way. One can go further by placing higher priority on users whom poster sent messages to or received from within past X-hours.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083323\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.rabbitmq.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6f355ae1f33640b777cae294092116ff&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.rabbitmq.com\">alexis</a>\n</div>\n<a href=\"#comment-221083323\" class=\"permalink\"><time datetime=\"2008-07-10T12:35:25\">2008-07-10T12:35:25</time></a>\n</div>\n<div class=\"content\"><p>er... eventually consistent social graphs anyone?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083324\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://cosmicrealms.com\"><img src=\"http://disqus.com/api/users/avatars/Sembiance.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://cosmicrealms.com\">Robert Schultz</a>\n</div>\n<a href=\"#comment-221083324\" class=\"permalink\"><time datetime=\"2008-07-10T13:36:22\">2008-07-10T13:36:22</time></a>\n</div>\n<div class=\"content\"><p>I agree with everything you've said. Especially the last part, duplicating data in the format it will be retrieved in rather than using complicated and CPU intensive SQL queries. This is especially true for any sort of statistics or reporting. I learned this by seeing my website's statistics growing slower and slower to retrieve as more and more traffic caused the database to become larger and larger and all of a sudden those queries that ran nearly instantly, even with good indexing were taking several seconds to return.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083326\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8acae029d9833597f8eb1623f94ef7e6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">citric</a>\n</div>\n<a href=\"#comment-221083326\" class=\"permalink\"><time datetime=\"2008-07-10T21:49:19\">2008-07-10T21:49:19</time></a>\n</div>\n<div class=\"content\"><p>Web apps doing things while the user waits unnecessarily is an old phenomenon. I think it's often a matter of developers not wanting to (and/or being politically unable to) venture into what they consider the sysadmin's domain. Take the way-too-common case of apps that make the client wait while it does housekeeping. Why isn't this in a cron job? One reason is maybe this is KewlOSSBlogWikiPackage and it's simpler to say \"just untar the package under htdocs and you're done\" instead of saying \"also, unpack these scripts in a non-servable area and set them up to run hourly, but not all at the same time; stagger them a little. And run them with the same UID your web server is running as\". But we end up with a lot of apps that (badly) reimplement basic tools their OS ships with in the first place.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083327\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d7a7610cb0f02de44be3c4186f82ac3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n</div>\n<a href=\"#comment-221083327\" class=\"permalink\"><time datetime=\"2008-07-28T21:23:06\">2008-07-28T21:23:06</time></a>\n</div>\n<div class=\"content\"><p>I wonder if you're still setting the bar too high for low-priority connections. I mean, microblogging <em>isn't</em> really messaging, and maybe isn't (shouldn't-be?) conversation. </p>\n<p>So why wouldn't 10-15min be good enough?</p>\n<p>What % of \"messages\" are <em>read</em> instantly after they hit an inbox?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083328\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.yukes.com/2008/11/jimdo-dropr-php-messa\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=151a00c8656ea5c733dff2ac3adb27a3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.yukes.com/2008/11/jimdo-dropr-php-messa\">Jay Yukes</a>\n</div>\n<a href=\"#comment-221083328\" class=\"permalink\"><time datetime=\"2008-11-23T10:35:55\">2008-11-23T10:35:55</time></a>\n</div>\n<div class=\"content\"><p>I had to solve a similar problem.  Needed the fastest possible response, so had to rule out interacting with the Database directly from the web app.  Used PHP message queue Dropr to defer all DB work.  It is very fast, easily over 1000 messages/second</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083329\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=70c1729db01a21a2a9d236f336e3beff&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">jmxz</a>\n</div>\n<a href=\"#comment-221083329\" class=\"permalink\"><time datetime=\"2009-02-13T20:00:13\">2009-02-13T20:00:13</time></a>\n</div>\n<div class=\"content\"><p>Wow those comments make me feel old.  I remember when these java queues everyone's referring to reminded me of how I had a VAX dedicated to queuing and scheduling batch jobs for a Cray.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083331\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://chr.ishenry.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4ab185c23be3076c02c2b7b7f48062d1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://chr.ishenry.com\">Chris Henry</a>\n</div>\n<a href=\"#comment-221083331\" class=\"permalink\"><time datetime=\"2009-06-11T20:09:47\">2009-06-11T20:09:47</time></a>\n</div>\n<div class=\"content\"><p>Handling load is probably one of the biggest problems facing websites today.  Queueing is definitely the way to go, but like you said, sites need the type of architecture where it's easy to deploy services to different machines.  Usually by the time the site is under load, it's too late...</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083333\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://9fans.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5b5f08225c299dd0955eb13d6b5c043c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://9fans.net\">maht</a>\n</div>\n<a href=\"#comment-221083333\" class=\"permalink\"><time datetime=\"2010-05-04T14:50:05\">2010-05-04T14:50:05</time></a>\n</div>\n<div class=\"content\"><p>I use Inotify as my queue messaging system</p>\n<p>http://maht0x0r.blogspot.com/2009/06/serialising-multiple-writers-in-shell_20.html</p>\n<p>Inotify can wait on MOVED_TO or CLOSE_WRITE events so that you can add them to the queue when the upload has finished.</p>\n<p>It should also be noted that this is a mnethod of load balacing too. Instead of 1000 parallel thumbnails being produced all context switching away, you can determine how many processes get spawned, use the OS' resource managing features etc.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "This is a blog post I've had simmering in my brainmeats for well over a year or two.  I'm suddenly inspired to break blog-radio-silence and get it out of my head.\r\n\r\nFrom <a href=\"http://www.russellbeattie.com/blog/let-the-microblogs-bloom\">Let the microblogs bloom - RussellBeattie.com</a>:\r\n\r\n<blockquote>Once this is widely accepted (and I'm sure there are many that would argue with me), the thing that will separate these types of services won't be whether they stay up (ala Twitter), but how fast your subscription messages are updated. Some services might be smaller or offer more features but not update as quickly whereas others will pride themselves on being as close to real-time as possible. The key is that it's all about messaging, not publishing. (Oh, and this also facilitates federation as well, but that's another topic).</blockquote>\r\n\r\nSee also: <a href=\"http://randomfoo.net/blog/id/4182\">Rearchitecting Twitter: Brought to You By the 17th Letter of the Alphabet - random($foo)</a>\r\n\r\nOne of the problems it seems most modern web apps face is the tendency to want to do everything all at once, and all in the same code that responds directly to a user.  Because, while you're in there building a user interface, it's *easy* to implement everything else that needs to happen in that same UI module or library.\r\n\r\nSomeone wants to post a bookmark?  Someone wants to post a message?  Well, of course you want the system to cross-reference and deliver that new piece of User Generated Content through every permutation of tag, recipient, keyword, and notification channel supported by your system.  \r\n\r\n**But**, do you *really* have to do everything all at once—while the person who generated that content is tapping his or her foot, waiting for the web interface to respond with feedback?  Are all of these things immediately vital to the person watching the browser spin, *right now*?  \r\n\r\nNo.  Your user wants to get on with things.  He or she wants to see the submitted content get accepted and, as feedback and confirmation, see it reflected in a personal view immediately.  Does it matter—to *this person*, at *this moment*—whether it shows up *simultaneously* in a friend's inbox, the public timeline, a global tag page, or even an RSS or Atom feed?\r\n\r\nAgain, no, simultaneity doesn't really matter—because no human beings actually appreciate it.  Instead, imagine a ripple effect of concentric social and attention contexts with associated people spreading out from the original submission.  (This probably rates the creation of a diagram someday.)  \r\n\r\n* To make the person who's submitting something happy, offer feedback visible in their own personal context in under 50-200 milliseconds.  (That is, less than half-a-second at worst, in people terms.)\r\n\r\n* The next person to delight is someone following the first person's published content—and humanly speaking, delays of *tens of thousands of milliseconds* can be acceptable here.  (That is, 1-10 seconds at worst, in people terms.)\r\n\r\n* Finally, you can start worrying about strangers, allowing the content to propagate to tag pages, keyword tracking pages, and other public views—and I'd assert that delays of *hundreds of thousands of milliseconds* are acceptable here.  (That is, 1-2 minutes at worst, in people terms.)\r\n\r\nThe idea here is that the social structure can help you scale, while still delighting people.  Even with these delays, the system is still better at getting the word out than the original content creator would be at notifying all the others involved with an out-of-band system like IM or email.  And that's at worst—on most good days, all the delays should tend to be on the order of seconds or less.\r\n\r\nAnd how do you do all of this?  Use queues.  Sure, the original submission of content can and should be done all at once—just enough to get the content into the user's collection.  Then, queue a job for further processing and get out of the way.  In fact, just queue one job from the user interface—the processor of *that* queue can then queue further jobs for all the other individual processing tasks that are likely susceptible to plenty of parallel processing and horizontal scaling.\r\n\r\nMeanwhile, the original user creating content has been thanked for their submission and life goes on.  In fact, their life may include going on to submit many more pieces of content in rapid succession, thanks to your delightfully responsive web user interface.  \r\n\r\nAnd, in the end, that's really the purpose of a web-based content creation interface—accepting something as quickly as possible to make the user happy enough to continue submitting more.  The other part of the user interface, retrieval, serves simply to get the original content distributed as fast as can be reasonably expected.\r\n\r\nNow, preparing for fast retrieval is another story.  The flip side to processing queues are message inboxes—expect content duplicated everywhere and fetched simply, rather than using cleverly expressed SQL joins that bring a system to its knees.  But, that's another post altogether. :)\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221083313\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://fatalerror.in\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15516fd23722eeca86b8ea91738eea4b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://fatalerror.in\">shyam</a>\n                </div>\n                <a href=\"#comment-221083313\" class=\"permalink\"><time datetime=\"2008-07-04T21:12:46\">2008-07-04T21:12:46</time></a>\n            </div>\n            <div class=\"content\"><p>Interesting bits of conversation happening all over the place regarding queues and the irony of it all - the much maligned Java has had workqueues since the early days.</p>\n\n<p>What everyone will learn, rather painfully in in cases like Twitter, is that all data is not created, consumed or processed equally. If you write your system which treats data equally you'll wind up with many Twitters all over the place.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083314\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221083314\" class=\"permalink\"><time datetime=\"2008-07-04T21:37:30\">2008-07-04T21:37:30</time></a>\n            </div>\n            <div class=\"content\"><p>Oh, definitely.  Work queues are not a new thing at all.  It's just that I think there're a lot of modern web app builders who skipped Java \"enterprise\" software—skipped, or hoped to run away—and are rediscovering the whole set of problems.  Maybe the solutions will be less over-engineered this time.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083315\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://mikewarot.blogspot.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=04f21a4b6a007063d191b66c34f71710&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://mikewarot.blogspot.com\">Mike Warot</a>\n                </div>\n                <a href=\"#comment-221083315\" class=\"permalink\"><time datetime=\"2008-07-04T21:40:15\">2008-07-04T21:40:15</time></a>\n            </div>\n            <div class=\"content\"><p>The thing that drives me nuts about twitter is that the core data rate is only about 30k/second... yet it kept going down. It's easy to spit out a broadcast to a subnet and never even miss a packet if there are only 100 of them per second or so. There's no reason on god's green earth that twitter should be anywhere near overloaded.</p>\n\n<p>Bad architecture, on the other hand, is the work of Satan. ;-)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083317\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://simonwillison.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ac7005eff7720218df4cf0c72ddf6a3d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://simonwillison.net/\">Simon Willison</a>\n                </div>\n                <a href=\"#comment-221083317\" class=\"permalink\"><time datetime=\"2008-07-04T21:40:39\">2008-07-04T21:40:39</time></a>\n            </div>\n            <div class=\"content\"><p>Thank you! I've been trying to put my thumb on why queues are so interesting for months; this expresses it perfectly.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083319\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://blog.wachob.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5c8ad784d2b5d12d57cf707dded1d58c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://blog.wachob.com\">Gabe Wachob</a>\n                </div>\n                <a href=\"#comment-221083319\" class=\"permalink\"><time datetime=\"2008-07-04T22:54:10\">2008-07-04T22:54:10</time></a>\n            </div>\n            <div class=\"content\"><p>Usually I would have something serious to say in agreement with you, because I do so much agree with you.</p>\n\n<p>But I have just one comment: </p>\n\n<p>DUH!!!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083320\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.docuverse.com/blog/donpark/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=88f2ee32d146425a422f58f8eab5424b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.docuverse.com/blog/donpark/\">Don Park</a>\n                </div>\n                <a href=\"#comment-221083320\" class=\"permalink\"><time datetime=\"2008-07-06T05:16:32\">2008-07-06T05:16:32</time></a>\n            </div>\n            <div class=\"content\"><p>Good suggestions. For social services like Twitter, I would also add one more item:</p>\n\n<p>Prioritize by Relationship</p>\n\n<p>For example, two-way Twitter relationships (mutual-follow or recent @ or direct message exchange) should be refreshed before one-way. One can go further by placing higher priority on users whom poster sent messages to or received from within past X-hours.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083323\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.rabbitmq.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6f355ae1f33640b777cae294092116ff&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.rabbitmq.com\">alexis</a>\n                </div>\n                <a href=\"#comment-221083323\" class=\"permalink\"><time datetime=\"2008-07-10T12:35:25\">2008-07-10T12:35:25</time></a>\n            </div>\n            <div class=\"content\"><p>er... eventually consistent social graphs anyone?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083324\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://cosmicrealms.com\"><img src=\"http://disqus.com/api/users/avatars/Sembiance.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://cosmicrealms.com\">Robert Schultz</a>\n                </div>\n                <a href=\"#comment-221083324\" class=\"permalink\"><time datetime=\"2008-07-10T13:36:22\">2008-07-10T13:36:22</time></a>\n            </div>\n            <div class=\"content\"><p>I agree with everything you've said. Especially the last part, duplicating data in the format it will be retrieved in rather than using complicated and CPU intensive SQL queries. This is especially true for any sort of statistics or reporting. I learned this by seeing my website's statistics growing slower and slower to retrieve as more and more traffic caused the database to become larger and larger and all of a sudden those queries that ran nearly instantly, even with good indexing were taking several seconds to return.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083326\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8acae029d9833597f8eb1623f94ef7e6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">citric</a>\n                </div>\n                <a href=\"#comment-221083326\" class=\"permalink\"><time datetime=\"2008-07-10T21:49:19\">2008-07-10T21:49:19</time></a>\n            </div>\n            <div class=\"content\"><p>Web apps doing things while the user waits unnecessarily is an old phenomenon. I think it's often a matter of developers not wanting to (and/or being politically unable to) venture into what they consider the sysadmin's domain. Take the way-too-common case of apps that make the client wait while it does housekeeping. Why isn't this in a cron job? One reason is maybe this is KewlOSSBlogWikiPackage and it's simpler to say \"just untar the package under htdocs and you're done\" instead of saying \"also, unpack these scripts in a non-servable area and set them up to run hourly, but not all at the same time; stagger them a little. And run them with the same UID your web server is running as\". But we end up with a lot of apps that (badly) reimplement basic tools their OS ships with in the first place.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083327\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d7a7610cb0f02de44be3c4186f82ac3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n                </div>\n                <a href=\"#comment-221083327\" class=\"permalink\"><time datetime=\"2008-07-28T21:23:06\">2008-07-28T21:23:06</time></a>\n            </div>\n            <div class=\"content\"><p>I wonder if you're still setting the bar too high for low-priority connections. I mean, microblogging <em>isn't</em> really messaging, and maybe isn't (shouldn't-be?) conversation. </p>\n\n<p>So why wouldn't 10-15min be good enough?</p>\n\n<p>What % of \"messages\" are <em>read</em> instantly after they hit an inbox?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083328\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.yukes.com/2008/11/jimdo-dropr-php-messa\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=151a00c8656ea5c733dff2ac3adb27a3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.yukes.com/2008/11/jimdo-dropr-php-messa\">Jay Yukes</a>\n                </div>\n                <a href=\"#comment-221083328\" class=\"permalink\"><time datetime=\"2008-11-23T10:35:55\">2008-11-23T10:35:55</time></a>\n            </div>\n            <div class=\"content\"><p>I had to solve a similar problem.  Needed the fastest possible response, so had to rule out interacting with the Database directly from the web app.  Used PHP message queue Dropr to defer all DB work.  It is very fast, easily over 1000 messages/second</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083329\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=70c1729db01a21a2a9d236f336e3beff&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">jmxz</a>\n                </div>\n                <a href=\"#comment-221083329\" class=\"permalink\"><time datetime=\"2009-02-13T20:00:13\">2009-02-13T20:00:13</time></a>\n            </div>\n            <div class=\"content\"><p>Wow those comments make me feel old.  I remember when these java queues everyone's referring to reminded me of how I had a VAX dedicated to queuing and scheduling batch jobs for a Cray.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083331\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://chr.ishenry.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4ab185c23be3076c02c2b7b7f48062d1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://chr.ishenry.com\">Chris Henry</a>\n                </div>\n                <a href=\"#comment-221083331\" class=\"permalink\"><time datetime=\"2009-06-11T20:09:47\">2009-06-11T20:09:47</time></a>\n            </div>\n            <div class=\"content\"><p>Handling load is probably one of the biggest problems facing websites today.  Queueing is definitely the way to go, but like you said, sites need the type of architecture where it's easy to deploy services to different machines.  Usually by the time the site is under load, it's too late...</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083333\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://9fans.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5b5f08225c299dd0955eb13d6b5c043c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://9fans.net\">maht</a>\n                </div>\n                <a href=\"#comment-221083333\" class=\"permalink\"><time datetime=\"2010-05-04T14:50:05\">2010-05-04T14:50:05</time></a>\n            </div>\n            <div class=\"content\"><p>I use Inotify as my queue messaging system</p>\n\n<p>http://maht0x0r.blogspot.com/2009/06/serialising-multiple-writers-in-shell_20.html</p>\n\n<p>Inotify can wait on MOVED_TO or CLOSE_WRITE events so that you can add them to the queue when the upload has finished.</p>\n\n<p>It should also be noted that this is a mnethod of load balacing too. Instead of 1000 parallel thumbnails being produced all context switching away, you can determine how many processes get spawned, use the OS' resource managing features etc.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/07/04/queue-everything-and-delight-everyone"
  },
  {
    "comments_archived": true,
    "date": "2007-10-17T07:22:47.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "rss",
      "php",
      "atom",
      "xml",
      "opml",
      "feedmagick",
      "feedmagick2",
      "feeds"
    ],
    "title": "OPML reading lists in FeedMagick2",
    "wordpress_id": 1066,
    "wordpress_slug": "opml-reading-lists-in-feedmagick2",
    "wordpress_url": "http://decafbad.com/blog/2007/10/17/opml-reading-lists-in-feedmagick2",
    "year": "2007",
    "month": "10",
    "day": "17",
    "isDir": false,
    "slug": "opml-reading-lists-in-feedmagick2",
    "postName": "2007-10-17-opml-reading-lists-in-feedmagick2",
    "html": "<p>For anyone who&#39;s interested:  I&#39;ve been hacking a little bit on <a href=\"http://decafbad.com/trac/wiki/FeedMagick\">FeedMagick2</a> again, with the latest addition being an OPML reading list feed blender.  </p>\n<p><a href=\"http://nick.typepad.com/blog/2005/10/reading_lists_f.html\">What&#39;s an OPML reading list?</a>  Basically, it&#39;s the same as as OPML export of a feed reader&#39;s subscription list - only rather than doing a one-time import into another program, the OPML is itself treated as a live feed.  A feed reader that supports OPML reading lists will continually check the list for updates and sync RSS/Atom feed subscriptions with its contents, maybe in a special sub-folder.</p>\n<p>Here&#39;s a quick demo:</p>\n<ul>\n<li><a href=\"http://decafbad.com/2007/04/FeedMagick2/?pipeline=readinglist&amp;url=http%3A%2F%2Fdecafbad.com%2F2007%2F04%2FFeedMagick2%2Fdocs%2Fmaster.opml&amp;format=rss&amp;run=Run+Pipeline\">An RSS feed blended from many of the sites I use daily</a></li>\n<li><a href=\"http://decafbad.com/2007/04/FeedMagick2/docs/master.opml\">The OPML reading list used as input for the above blend</a></li>\n</ul>\n<p>The itch I mean to eventually scratch is to replace the front page of decafbad.com with a live updating aggregation of the stuff I create and capture daily on the web.  It&#39;ll be basically a self-assembling <a href=\"http://en.wikipedia.org/wiki/Tumblelog\">tumblelog</a> pulled from many different services across the web.  It&#39;ll also replace the footer of accumulated crud I&#39;ve got on this very blog - which I thought was a good idea at one point, but now consider <a href=\"http://decafbad.com/twiki/bin/view/Main/NeatLikeDigitalWatches\">NeatLikeDigitalWatches</a>.</p>\n<p>With that in mind, the next thing I plan to develop is an <a href=\"http://microformats.org/wiki/hatom\">hAtom</a> module or XSL transform.  This will turn the blended feed into an XHTML page.  Maybe someday, <a href=\"http://hatomic.org\">hAtomic</a> will launch, and I&#39;ll have a nice pretty style for the page too.  Some time after that, I might work up a module that stows away dated historical archives of the feed and pages.  I have <a href=\"http://decafbad.com/svn/trunk/FeedMagick2/TODO\">further plans and ideas</a>, but I&#39;m trying to focus on the itchy spots first so that I might actually get something done in this round of serial enthusiasm.</p>\n",
    "body": "For anyone who's interested:  I've been hacking a little bit on [FeedMagick2](http://decafbad.com/trac/wiki/FeedMagick) again, with the latest addition being an OPML reading list feed blender.  \r\n\r\n[What's an OPML reading list?](http://nick.typepad.com/blog/2005/10/reading_lists_f.html)  Basically, it's the same as as OPML export of a feed reader's subscription list - only rather than doing a one-time import into another program, the OPML is itself treated as a live feed.  A feed reader that supports OPML reading lists will continually check the list for updates and sync RSS/Atom feed subscriptions with its contents, maybe in a special sub-folder.\r\n\r\nHere's a quick demo:\r\n\r\n* [An RSS feed blended from many of the sites I use daily](http://decafbad.com/2007/04/FeedMagick2/?pipeline=readinglist&url=http%3A%2F%2Fdecafbad.com%2F2007%2F04%2FFeedMagick2%2Fdocs%2Fmaster.opml&format=rss&run=Run+Pipeline)\r\n* [The OPML reading list used as input for the above blend](http://decafbad.com/2007/04/FeedMagick2/docs/master.opml)\r\n\r\nThe itch I mean to eventually scratch is to replace the front page of decafbad.com with a live updating aggregation of the stuff I create and capture daily on the web.  It'll be basically a self-assembling [tumblelog](http://en.wikipedia.org/wiki/Tumblelog) pulled from many different services across the web.  It'll also replace the footer of accumulated crud I've got on this very blog - which I thought was a good idea at one point, but now consider [NeatLikeDigitalWatches](http://decafbad.com/twiki/bin/view/Main/NeatLikeDigitalWatches).\r\n\r\nWith that in mind, the next thing I plan to develop is an [hAtom](http://microformats.org/wiki/hatom) module or XSL transform.  This will turn the blended feed into an XHTML page.  Maybe someday, [hAtomic](http://hatomic.org) will launch, and I'll have a nice pretty style for the page too.  Some time after that, I might work up a module that stows away dated historical archives of the feed and pages.  I have [further plans and ideas](http://decafbad.com/svn/trunk/FeedMagick2/TODO), but I'm trying to focus on the itchy spots first so that I might actually get something done in this round of serial enthusiasm.\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/10/17/opml-reading-lists-in-feedmagick2"
  },
  {
    "comments_archived": true,
    "date": "2007-07-23T14:37:33.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "php",
      "zend",
      "symfony",
      "curmudgeons",
      "cakephp",
      "openid",
      "codeigniter"
    ],
    "title": "A Curmudgeon Playing with the CodeIgniter Framework and OpenID",
    "wordpress_id": 1059,
    "wordpress_slug": "a-curmudgeon-playing-with-the-codeigniter-framework-and-openid",
    "wordpress_url": "http://decafbad.com/blog/2007/07/23/a-curmudgeon-playing-with-the-codeigniter-framework-and-openid",
    "year": "2007",
    "month": "07",
    "day": "23",
    "isDir": false,
    "slug": "a-curmudgeon-playing-with-the-codeigniter-framework-and-openid",
    "postName": "2007-07-23-a-curmudgeon-playing-with-the-codeigniter-framework-and-openid",
    "html": "<p>One bit of hackery I did this weekend was to explore the <a href=\"http://codeigniter.com/\">CodeIgniter PHP framework</a>, which is even less magic yet more glued-together out of the box than the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  Also, very much less magic than <a href=\"http://cakephp.org/\">CakePHP</a> and barely in the same universe as <a href=\"http://www.symfony-project.com/\">Symfony</a>.  I think I may have found my sweet spot of simplicity and comprehensible magic.</p>\n<p><a href=\"http://codeigniter.com/\">CodeIgniter</a> has is a PHP 4 / 5 framework that provides a lightweight Model / View / Controller arrangement with URL routing and a useful but minimal constellation of utility classes and helpers.  The view templates are in PHP, with just a bit of pre-processing.  The controllers are plain-old PHP classes whose methods are called via simple URL routes.</p>\n<p>The <a href=\"http://codeigniter.com/user_guide/general/models.html\">model layer of CodeIgniter</a>, however, is the weakest part of the trio - which I actually like a lot.  It's not a magical ORM - instead it's just a simple superclass from which to derive, mostly there to suggest that a separate model is a good thing to write.  The DB abstraction classes just make the job of writing SQL statements easier and don't pretend that there's no impedance mismatch between objects and relational tables.</p>\n<p>The depth of code in <a href=\"http://codeigniter.com/\">CodeIgniter</a> is shallow enough that I felt I was able to get into developing quickly while still taking side trips through the framework methods I was calling and get at least a glance at what being taken care of for me.  <a href=\"http://codeigniter.com/forums/viewthread/50715/\">There's always danger in magic</a>, but this stuff doesn't really get out of hand.</p>\n<p>To doodle around with an idea, I threw together a layout decorator class to support the sort of nested templates I'm used to from <a href=\"http://www.symfony-project.com/\">Symfony</a>.  Out of the box, <a href=\"http://codeigniter.com/user_guide/general/views.html\">CI views</a> are simple, offering facilities for calling sub-templates and \"partials\" but not directly providing conventions for such.  My first swatches of code add a bit of that.</p>\n<p>After playing around with layouts, the next thing I did was to use <a href=\"http://codeigniter.com/user_guide/libraries/sessions.html\">CI sessions</a> and the <a href=\"http://www.openidenabled.com/openid/libraries/php\">PHP OpenID Library</a> to develop both an auth producer and consumer.  <a href=\"http://codeigniter.com/\">CodeIgniter</a> doesn't come with a ready-made user auth system, though it does come with <a href=\"http://codeigniter.com/user_guide/libraries/sessions.html\">its own implementation of sessions</a> using encrypted browser cookies to replace PHP's native sessions - another feature I really like.</p>\n<p>Kind of odd - but on the same toy app I can sign up for local accounts, sign into other sites with OpenID URLs based on local accounts, and sign into my <a href=\"http://codeigniter.com/\">CI</a> app with external OpenID identities.</p>\n<p>The wild bit is that I can even sign in locally with one OpenID URL, then use the newly created local profile to get a second OpenID URL to sign in somewhere else.  Seems interesting yet possibly dangerous.  I mostly just glued the right parts together and got the Auth_OpenID black-box modules working - now that I have an operational OpenID system, I need to study it further.</p>\n<p>The next thing I want to do is work more on profile managment, offer some of the <a href=\"http://openid.net/specs/openid-simple-registration-extension-1_1-01.html\">OpenID Simple Registration</a> fields, and look into <a href=\"http://drnicwilliams.com/2007/07/20/one-app-one-user-account-and-multiple-openids/\">supporting multiple auth IDs linked to the same user profile</a>.</p>\n<p>It might also be fun to do something like \"<a href=\"http://simonwillison.net/2007/Jul/13/\">catalogue the sites that a user logs into and automatically construct a homepage</a>.\"  Overall, I've got some vague notional ideas to build a personal status collector and maybe some federated social networking and messaging stuff.  But, one hack at a time.</p>\n<p>Hopefully, I'll get this code I've got so far into better shape and commit to my SVN repository.  Sooner than later, otherwise it'll never get off my dev box.</p>\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087156\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221087156\" class=\"permalink\"><time datetime=\"2007-07-24T01:34:03\">2007-07-24T01:34:03</time></a>\n</div>\n<div class=\"content\"><p>Hmm, a system that treats its own OpenIDs just like any other OpenID and considers them foreign credentials for which it creates a new account seems… weird. It seems it should recognize its own OpenIDs and map them back to the corresponding username.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087158\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.elroyjetson.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4a34cf8d239b6589024fc004cfdad5b8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.elroyjetson.org\">Elroy Jetson</a>\n</div>\n<a href=\"#comment-221087158\" class=\"permalink\"><time datetime=\"2007-08-24T20:51:24\">2007-08-24T20:51:24</time></a>\n</div>\n<div class=\"content\"><p>Thanks for pointing this framework out.  Some how it had slipped through my fingers.</p>\n<p>I have tried them all and was (maybe still am) close to dumping php for ruby and the rails framework.</p>\n<p>Once I started digging into rails all the php frameworks just seemed like awkward teenagers that have to do everything their own way just to prove that they are different.</p>\n<p>codeIgniter is small.  Simple to setup and, so far anyway, seems about as elegant as you are going to get using php.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087159\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7b2554252993cc349aa4671cdc751985&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Cody Ray</a>\n</div>\n<a href=\"#comment-221087159\" class=\"permalink\"><time datetime=\"2008-06-03T21:30:09\">2008-06-03T21:30:09</time></a>\n</div>\n<div class=\"content\"><p>Did you ever put this into your SVN? I can't seem to find it through Trac.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<p>One bit of hackery I did this weekend was to explore the <a href=\"http://codeigniter.com/\">CodeIgniter PHP framework</a>, which is even less magic yet more glued-together out of the box than the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  Also, very much less magic than <a href=\"http://cakephp.org/\">CakePHP</a> and barely in the same universe as <a href=\"http://www.symfony-project.com/\">Symfony</a>.  I think I may have found my sweet spot of simplicity and comprehensible magic.</p>\r\n<p><a href=\"http://codeigniter.com/\">CodeIgniter</a> has is a PHP 4 / 5 framework that provides a lightweight Model / View / Controller arrangement with URL routing and a useful but minimal constellation of utility classes and helpers.  The view templates are in PHP, with just a bit of pre-processing.  The controllers are plain-old PHP classes whose methods are called via simple URL routes.</p>\r\n<p>The <a href=\"http://codeigniter.com/user_guide/general/models.html\">model layer of CodeIgniter</a>, however, is the weakest part of the trio - which I actually like a lot.  It's not a magical ORM - instead it's just a simple superclass from which to derive, mostly there to suggest that a separate model is a good thing to write.  The DB abstraction classes just make the job of writing SQL statements easier and don't pretend that there's no impedance mismatch between objects and relational tables.</p>\r\n<p>The depth of code in <a href=\"http://codeigniter.com/\">CodeIgniter</a> is shallow enough that I felt I was able to get into developing quickly while still taking side trips through the framework methods I was calling and get at least a glance at what being taken care of for me.  <a href=\"http://codeigniter.com/forums/viewthread/50715/\">There's always danger in magic</a>, but this stuff doesn't really get out of hand.</p>\r\n<p>To doodle around with an idea, I threw together a layout decorator class to support the sort of nested templates I'm used to from <a href=\"http://www.symfony-project.com/\">Symfony</a>.  Out of the box, <a href=\"http://codeigniter.com/user_guide/general/views.html\">CI views</a> are simple, offering facilities for calling sub-templates and \"partials\" but not directly providing conventions for such.  My first swatches of code add a bit of that.</p>\r\n<p>After playing around with layouts, the next thing I did was to use <a href=\"http://codeigniter.com/user_guide/libraries/sessions.html\">CI sessions</a> and the <a href=\"http://www.openidenabled.com/openid/libraries/php\">PHP OpenID Library</a> to develop both an auth producer and consumer.  <a href=\"http://codeigniter.com/\">CodeIgniter</a> doesn't come with a ready-made user auth system, though it does come with <a href=\"http://codeigniter.com/user_guide/libraries/sessions.html\">its own implementation of sessions</a> using encrypted browser cookies to replace PHP's native sessions - another feature I really like.</p>\r\n<p>Kind of odd - but on the same toy app I can sign up for local accounts, sign into other sites with OpenID URLs based on local accounts, and sign into my <a href=\"http://codeigniter.com/\">CI</a> app with external OpenID identities.</p>\r\n<p>The wild bit is that I can even sign in locally with one OpenID URL, then use the newly created local profile to get a second OpenID URL to sign in somewhere else.  Seems interesting yet possibly dangerous.  I mostly just glued the right parts together and got the Auth_OpenID black-box modules working - now that I have an operational OpenID system, I need to study it further.</p>\r\n<p>The next thing I want to do is work more on profile managment, offer some of the <a href=\"http://openid.net/specs/openid-simple-registration-extension-1_1-01.html\">OpenID Simple Registration</a> fields, and look into <a href=\"http://drnicwilliams.com/2007/07/20/one-app-one-user-account-and-multiple-openids/\">supporting multiple auth IDs linked to the same user profile</a>.</p>\r\n<p>It might also be fun to do something like \"<a href=\"http://simonwillison.net/2007/Jul/13/\">catalogue the sites that a user logs into and automatically construct a homepage</a>.\"  Overall, I've got some vague notional ideas to build a personal status collector and maybe some federated social networking and messaging stuff.  But, one hack at a time.</p>\r\n<p>Hopefully, I'll get this code I've got so far into better shape and commit to my SVN repository.  Sooner than later, otherwise it'll never get off my dev box.</p>\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087156\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n                </div>\n                <a href=\"#comment-221087156\" class=\"permalink\"><time datetime=\"2007-07-24T01:34:03\">2007-07-24T01:34:03</time></a>\n            </div>\n            <div class=\"content\"><p>Hmm, a system that treats its own OpenIDs just like any other OpenID and considers them foreign credentials for which it creates a new account seems… weird. It seems it should recognize its own OpenIDs and map them back to the corresponding username.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087158\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.elroyjetson.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4a34cf8d239b6589024fc004cfdad5b8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.elroyjetson.org\">Elroy Jetson</a>\n                </div>\n                <a href=\"#comment-221087158\" class=\"permalink\"><time datetime=\"2007-08-24T20:51:24\">2007-08-24T20:51:24</time></a>\n            </div>\n            <div class=\"content\"><p>Thanks for pointing this framework out.  Some how it had slipped through my fingers.</p>\n\n<p>I have tried them all and was (maybe still am) close to dumping php for ruby and the rails framework.</p>\n\n<p>Once I started digging into rails all the php frameworks just seemed like awkward teenagers that have to do everything their own way just to prove that they are different.</p>\n\n<p>codeIgniter is small.  Simple to setup and, so far anyway, seems about as elegant as you are going to get using php.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087159\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7b2554252993cc349aa4671cdc751985&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Cody Ray</a>\n                </div>\n                <a href=\"#comment-221087159\" class=\"permalink\"><time datetime=\"2008-06-03T21:30:09\">2008-06-03T21:30:09</time></a>\n            </div>\n            <div class=\"content\"><p>Did you ever put this into your SVN? I can't seem to find it through Trac.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/07/23/a-curmudgeon-playing-with-the-codeigniter-framework-and-openid"
  },
  {
    "comments_archived": true,
    "date": "2007-07-09T20:21:41.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "php",
      "zend",
      "symfony",
      "frameworks",
      "django",
      "python",
      "curmudgeons"
    ],
    "title": "A Curmudgeon Playing with the Zend Framework",
    "wordpress_id": 1058,
    "wordpress_slug": "a-curmudgeon-playing-with-the-zend-framework",
    "wordpress_url": "http://decafbad.com/blog/2007/07/09/a-curmudgeon-playing-with-the-zend-framework",
    "year": "2007",
    "month": "07",
    "day": "09",
    "isDir": false,
    "slug": "a-curmudgeon-playing-with-the-zend-framework",
    "postName": "2007-07-09-a-curmudgeon-playing-with-the-zend-framework",
    "html": "<p>Because it's been awhile since I last surveyed the landscape, I played around a bit with web frameworks this weekend.  Mainly, I tried getting something simple working with the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  After intermittent play and much studying of documentation between Saturday and Sunday, I got to \"hello world.\"</p>\n<p>Unlike other web frameworks of late, Zend Framework doesn't come with any magical CLI tools to build out directory trees and / or generate code.  Being somewhat suspicious and curmudgeonly about that sort of magic to begin with, this actually struck me as an attractive thing about ZF.  In fact, what I really liked about ZF at first glance is that it's less of a monolithic <b>system</b> and more of a bucket of parts from a single source that fit together decently.</p>\n<p>And, all my favorite parts are there:  Among other things there's <a href=\"http://framework.zend.com/manual/en/zend.config.html\">config</a>, <a href=\"http://framework.zend.com/manual/en/zend.log.html\">logging</a>, <a href=\"http://framework.zend.com/manual/en/zend.controller.html\">a front controller</a> with <a href=\"http://framework.zend.com/manual/en/zend.controller.router.html\">URL routing</a>, template-system agnostic <a href=\"http://framework.zend.com/manual/en/zend.view.html\">view support</a>, and somewhat non-magical <a href=\"http://framework.zend.com/manual/en/zend.db.html\">DB / model support</a>.</p>\n<p>These were all things I'd grabbed from <a href=\"http://pear.php.net/\">PEAR</a> for <a href=\"http://decafbad.com/svn/trunk/Cuckoo/lib/MiniFramework.php\">my more recent PHP mini-framework</a> play, but I figured there should be some benefit from finding them in a unified collection like the Zend Framework.</p>\n<p>The experience was somewhat similar to rolling my own, though.  I stumbled through some docs and eventually found some blog entries and a tutorial.  It's all very loosely-coupled and somewhat DIY, which is actually what I wanted.  The experience has left me wondering if I really <b>should</b> have wanted it, but I'm guessing it'll go easier from here on out.</p>\n<p>In the meantime, though, I feel like I have a decent grasp on what all those loosely-coupled parts are doing.  I've skimmed through code, traced wires, broken things and watched the errors.</p>\n<p>See, my problem with a lot of modern magic-imbued web frameworks is that I have a deep distrust of what they're doing.  They come with a lot of moving parts doing things that I don't see - and when I do finally see them, I tend to run into decisions with which I disagree.  I see abstraction where I think the gritty concrete needs to be left bare.  I often see lots of astronaut acrobatics that just have to be burning tons of cycles.  I see further acrobatics done to compensate, unrolling loops and pre-parsing config files - which requires further layers of magical tools to generate code and caches.</p>\n<p>Too many moving parts wherein assumptions can hide, later to bite me when we're hundreds of miles into the post-launch desert and trying to fight scaling fires or develop a new feature with some weird angles to it.</p>\n<p>For example, consider <a href=\"http://www.symfony-project.com/\">Symfony</a> for PHP.  Their configuration system runs PHP code that results in YAML.  Parsing that YAML, along with cascading layers of other generated YAML, then drives a PHP code generation stage, composing all the static code necessary to bootstrap the framework with each request.  There's an amazing amount of flexibility exposed by that system, and it's quite clever -&nbsp;but my curmudgeonly side catches whiffs of insanity.</p>\n<p>Maybe that's really the issue -&nbsp;I've been doing this stuff long enough to have written my own one of everything, so I've got my own opinions and I like to have a grasp on everything.  I've written front controllers, templating systems, and model abstraction layers.  I've worked in a half-dozen or so languages doing all the above.  I don't yet accept that web app development has <a href=\"http://mengwong.livejournal.com/38969.html\">passed the da Vinci point</a> -&nbsp;a single developer should be able to grasp the structure of a web framework in mind without getting lost in too many fractal branchings.</p>\n<p>Anyway, I'm rambling like an old grouch, but I think I've reached my point.  Hopefully more actual experimentation soon.</p>\n",
    "body": "<p>Because it's been awhile since I last surveyed the landscape, I played around a bit with web frameworks this weekend.  Mainly, I tried getting something simple working with the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  After intermittent play and much studying of documentation between Saturday and Sunday, I got to \"hello world.\"</p>\r\n<p>Unlike other web frameworks of late, Zend Framework doesn't come with any magical CLI tools to build out directory trees and / or generate code.  Being somewhat suspicious and curmudgeonly about that sort of magic to begin with, this actually struck me as an attractive thing about ZF.  In fact, what I really liked about ZF at first glance is that it's less of a monolithic <b>system</b> and more of a bucket of parts from a single source that fit together decently.</p>\r\n<p>And, all my favorite parts are there:  Among other things there's <a href=\"http://framework.zend.com/manual/en/zend.config.html\">config</a>, <a href=\"http://framework.zend.com/manual/en/zend.log.html\">logging</a>, <a href=\"http://framework.zend.com/manual/en/zend.controller.html\">a front controller</a> with <a href=\"http://framework.zend.com/manual/en/zend.controller.router.html\">URL routing</a>, template-system agnostic <a href=\"http://framework.zend.com/manual/en/zend.view.html\">view support</a>, and somewhat non-magical <a href=\"http://framework.zend.com/manual/en/zend.db.html\">DB / model support</a>.</p>\r\n<p>These were all things I'd grabbed from <a href=\"http://pear.php.net/\">PEAR</a> for <a href=\"http://decafbad.com/svn/trunk/Cuckoo/lib/MiniFramework.php\">my more recent PHP mini-framework</a> play, but I figured there should be some benefit from finding them in a unified collection like the Zend Framework.</p>\r\n<p>The experience was somewhat similar to rolling my own, though.  I stumbled through some docs and eventually found some blog entries and a tutorial.  It's all very loosely-coupled and somewhat DIY, which is actually what I wanted.  The experience has left me wondering if I really <b>should</b> have wanted it, but I'm guessing it'll go easier from here on out.</p>\r\n<p>In the meantime, though, I feel like I have a decent grasp on what all those loosely-coupled parts are doing.  I've skimmed through code, traced wires, broken things and watched the errors.</p>\r\n<p>See, my problem with a lot of modern magic-imbued web frameworks is that I have a deep distrust of what they're doing.  They come with a lot of moving parts doing things that I don't see - and when I do finally see them, I tend to run into decisions with which I disagree.  I see abstraction where I think the gritty concrete needs to be left bare.  I often see lots of astronaut acrobatics that just have to be burning tons of cycles.  I see further acrobatics done to compensate, unrolling loops and pre-parsing config files - which requires further layers of magical tools to generate code and caches.</p>\r\n<p>Too many moving parts wherein assumptions can hide, later to bite me when we're hundreds of miles into the post-launch desert and trying to fight scaling fires or develop a new feature with some weird angles to it.</p>\r\n<p>For example, consider <a href=\"http://www.symfony-project.com/\">Symfony</a> for PHP.  Their configuration system runs PHP code that results in YAML.  Parsing that YAML, along with cascading layers of other generated YAML, then drives a PHP code generation stage, composing all the static code necessary to bootstrap the framework with each request.  There's an amazing amount of flexibility exposed by that system, and it's quite clever -&nbsp;but my curmudgeonly side catches whiffs of insanity.</p>\r\n<p>Maybe that's really the issue -&nbsp;I've been doing this stuff long enough to have written my own one of everything, so I've got my own opinions and I like to have a grasp on everything.  I've written front controllers, templating systems, and model abstraction layers.  I've worked in a half-dozen or so languages doing all the above.  I don't yet accept that web app development has <a href=\"http://mengwong.livejournal.com/38969.html\">passed the da Vinci point</a> -&nbsp;a single developer should be able to grasp the structure of a web framework in mind without getting lost in too many fractal branchings.</p>\r\n<p>Anyway, I'm rambling like an old grouch, but I think I've reached my point.  Hopefully more actual experimentation soon.</p>\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/07/09/a-curmudgeon-playing-with-the-zend-framework"
  },
  {
    "comments_archived": true,
    "date": "2007-05-15T22:45:10.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "cilantro",
      "adobe",
      "flash",
      "silverlight",
      "webfx",
      "sun",
      "java",
      "macromedia"
    ],
    "title": "Cilantro of the web",
    "wordpress_id": 1054,
    "wordpress_slug": "cilantro-of-the-web",
    "wordpress_url": "http://decafbad.com/blog/2007/05/15/cilantro-of-the-web",
    "year": "2007",
    "month": "05",
    "day": "15",
    "isDir": false,
    "slug": "cilantro-of-the-web",
    "postName": "2007-05-15-cilantro-of-the-web",
    "html": "<p><i>Trying out the OPML Editor again, pasting in an entry composed over at <a href=\"http://blogs.opml.org/decafbad\">my OPML blog</a>.</i></p>\n<p>\"When the tool spits out some bundle of shining Deployment-Ready Code Artifact, do you get something that can be mashed up, styled, scripted, indexed by search engines, read aloud by screen readers, read by humans, customized with greasemonkey, reformatted for mobile devices, machine-translated, excerpted, transcluded, edited live with tools like Firebug?\" - <a href=\"http://shaver.off.net/diary/2007/05/10/the-high-cost-of-some-free-tools/\">Mike Shaver</a></p>\n<p>\"can't cut and past text from adobe's <a href=\"kuler.com\">kuler.com</a> - that is the flash suck. nice colours, but a different kind of poor internet app. text?\" - <a href=\"http://twitter.com/monkchips/statuses/61693412\">James Governor</a></p>\n<p>So...  the web is <i>View Source</i>.  But, it's also <i>cut-and-paste of what I see</i> and <i>post-launch mashability</i>.  What else do we lose with Flash, Silverlight, and JavaFX?</p>\n<p>For what it's worth, I've got an enormous amount of love for Flash, and think that it has its place right alongside images and textareas.  And most times, when you've otherwise got some 3-ring circus of stuttering, lumbering DHTML and AJAX - a little dash of Flash is what you need.  But, you wouldn't make a meal of cilantro, and <a href=\"http://ihatecilantro.com/\">some people hate it altogether</a>.</p>\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086863\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n</div>\n<a href=\"#comment-221086863\" class=\"permalink\"><time datetime=\"2007-05-16T22:41:10\">2007-05-16T22:41:10</time></a>\n</div>\n<div class=\"content\"><p>perfect analogy.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<p><i>Trying out the OPML Editor again, pasting in an entry composed over at <a href=\"http://blogs.opml.org/decafbad\">my OPML blog</a>.</i></p>\r\n<p>\"When the tool spits out some bundle of shining Deployment-Ready Code Artifact, do you get something that can be mashed up, styled, scripted, indexed by search engines, read aloud by screen readers, read by humans, customized with greasemonkey, reformatted for mobile devices, machine-translated, excerpted, transcluded, edited live with tools like Firebug?\" - <a href=\"http://shaver.off.net/diary/2007/05/10/the-high-cost-of-some-free-tools/\">Mike Shaver</a></p>\r\n<p>\"can't cut and past text from adobe's <a href=\"kuler.com\">kuler.com</a> - that is the flash suck. nice colours, but a different kind of poor internet app. text?\" - <a href=\"http://twitter.com/monkchips/statuses/61693412\">James Governor</a></p>\r\n<p>So...  the web is <i>View Source</i>.  But, it's also <i>cut-and-paste of what I see</i> and <i>post-launch mashability</i>.  What else do we lose with Flash, Silverlight, and JavaFX?</p>\r\n<p>For what it's worth, I've got an enormous amount of love for Flash, and think that it has its place right alongside images and textareas.  And most times, when you've otherwise got some 3-ring circus of stuttering, lumbering DHTML and AJAX - a little dash of Flash is what you need.  But, you wouldn't make a meal of cilantro, and <a href=\"http://ihatecilantro.com/\">some people hate it altogether</a>.</p>\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221086863\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n                </div>\n                <a href=\"#comment-221086863\" class=\"permalink\"><time datetime=\"2007-05-16T22:41:10\">2007-05-16T22:41:10</time></a>\n            </div>\n            <div class=\"content\"><p>perfect analogy.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/05/15/cilantro-of-the-web"
  },
  {
    "comments_archived": true,
    "date": "2007-04-30T03:06:32.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "rss",
      "php",
      "atom",
      "xml",
      "feedmagick",
      "feedmagick2",
      "feeds"
    ],
    "title": "Say hello to FeedMagick2",
    "wordpress_id": 1048,
    "wordpress_slug": "say-hello-to-feedmagick2",
    "wordpress_url": "http://decafbad.com/blog/2007/04/29/say-hello-to-feedmagick2",
    "year": "2007",
    "month": "04",
    "day": "29",
    "isDir": false,
    "slug": "say-hello-to-feedmagick2",
    "postName": "2007-04-29-say-hello-to-feedmagick2",
    "html": "<p>Yeah, things have been basically silent around here thanks to post-work brain fryage and a general lack of things to say.  Really, everyone else around the blogosphere seems to be covering things satisfactorily.  However, I have been idly working on a new project over the past few weeks, namely a total rewrite and redesign of <a href=\"http://decafbad.com/blog/?s=feedmagick\">my format-ignorant feed filtering and munging kit dubbed FeedMagick</a>.</p>\n<p>You can find <a href=\"http://decafbad.com/2007/04/FeedMagick2/\">a demo installation of FeedMagick2 here</a> and find it <a href=\"http://decafbad.com/svn/trunk/FeedMagick2/\">ready for checkout from SVN over here</a>.  It&#39;s basically just a step away from being a proof of concept, but I&#39;m hoping to get around to fleshing out docs and battening down the hatches with tests.  In any case, if my serial enthusiasm holds out, this thing could eventually subsume everything else I&#39;ve done with feeds.</p>\n<p>For now, peek at some of these highlights:</p>\n<ul>\n<li><a href=\"http://decafbad.com/2007/04/FeedMagick2/inspect/masterfeed\">Master Personal Feed</a> - One big feed blended from 10 other personal metadata feeds pulled from various Web-2.0-ish sites.</li>\n<li><a href=\"http://decafbad.com/2007/04/FeedMagick2/inspect/magpiejson\">Feed to JSON via Magpie</a> - Get feed data parsed by way of <a href=\"http://magpierss.sourceforge.net/\">Magpie</a> into JSON data structures</li>\n<li><a href=\"http://decafbad.com/2007/04/FeedMagick2/inspect/flickrfavorites\">Flickr Favorites Feed</a> - Feed of photos marked as favorites by a Flickr user, pulled via the API</li>\n<li><a href=\"http://decafbad.com/2007/04/FeedMagick2/inspect/jbox\">jbox.com scraper</a> - Pipeline composed of <a href=\"http://tidy.sourceforge.net/\">HTML Tidy</a> and XSL to scrape <a href=\"http://jbox.com/\">jbox.com</a> to build an RSS feed of new items for sale.</li>\n</ul>\n<p>Beyond practical examples, there are some things under the hood that seem keen to me.  Apropos of my <a href=\"http://decafbad.com/blog/2007/02/15/thoughts-on-pipes-on-the-web-part-ii\">pipes-via-web ramblings</a> back in February, I&#39;m trying out a few different approaches to pipelining feed content through processor modules.  My original FeedMagick relied on feeding URLs to URLs as parameters.  That, unfortunately, can be mighty cumbersome and inefficient.  So, FeedMagick2 explores a few more approaches:</p>\n<ul>\n<li><p>The first and obvious approach is to chain them together in a single script.  So, I&#39;ve got objects instances that pass content from one to the next.  The thing is, the pipe works in reverse:  The driver script asks the last module in the pipe for content, which then asks the one before it for content, and so on.  At any point along the way, modules can cache the output of previous modules, and refrain from calling up the chain.</p>\n</li>\n<li><p>The second way to chain pipelines together is just like the first FeedMagick:  Some pipelines start with fetching a URL.  That can be an original feed, or a URL leading to the output of an antecedent pipeline.  And, oh yeah, most pipelines are run via parameterized URLs, so there&#39;s that bit of handy recursion.</p>\n</li>\n<li><p>The third way to chain pipelines together is with HTTP POST:  A pipeline can accept feed data via the request body of an HTTP POST, thus allowing antecedent pipelines (or even cURL scripts) to <em>push</em> data into the pipeline rather than getting <em>pulled</em> via URL.  This is kind of like my <a href=\"http://decafbad.com/blog/?s=xmlrpc+pipe\">years-old jiggery pokery</a> with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/XmlRpcFilteringPipe\">pipelines via XML-RPC</a>, only much <em>much</em> simpler.</p>\n</li>\n</ul>\n<p>I&#39;m also poking around at making all of the above available at the command line via PHP-CLI, and I&#39;m having gratuitous fun exploring PEAR to roll my own stripped-down web framework.  I still hate PHP, but I&#39;m at least finding ways to entertain myself while I&#39;m holding my nose.  Of course, I find weird things entertaining.</p>\n<p>And, as a side note, the only reason I&#39;m using PHP is because I&#39;d like to play around with the idea of the de facto WordPress installation requirements standard.  That is:  If you can run WordPress, you can run this.  In reality, I don&#39;t think I&#39;m there, but I&#39;m hoping to get close.  For one, I&#39;m refusing to play with anything older than PHP 5.</p>\n<p>Anyway, play with it, tell me what you think and give me a reason to keep hacking at it.  :)</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221082761\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://jamesv.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c82c72ca4f9eab33a80a7bd839c1ae0b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://jamesv.org\">jamesv</a>\n</div>\n<a href=\"#comment-221082761\" class=\"permalink\"><time datetime=\"2007-04-30T11:39:15\">2007-04-30T11:39:15</time></a>\n</div>\n<div class=\"content\"><p>Aw man, now I've got to port all the code you wrote while you were here over to this new hotness ;) I really like (and appreciate) the single script approach.</p>\n<p>Is caching at a module level done automatically, or is that something I need to flag in my original call? Some installs of the original code base are now aggregating large sections of a pool of around 400 feeds, and eeking out even minor performances gains would be just lovely.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082762\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b309c5a1952afc3d7d81ee90908309af&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">dRAUPP</a>\n</div>\n<a href=\"#comment-221082762\" class=\"permalink\"><time datetime=\"2007-04-30T13:40:16\">2007-04-30T13:40:16</time></a>\n</div>\n<div class=\"content\"><p>hawt.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082763\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082763\" class=\"permalink\"><time datetime=\"2007-04-30T14:43:54\">2007-04-30T14:43:54</time></a>\n</div>\n<div class=\"content\"><p>@jamesv: Take a look at the source to this big-ish pipeline, all the way at the end:</p>\n<p>http://decafbad.com/2007/04/FeedMagick2/pipelines/masterfeed</p>\n<p>You can basically slap a Cacher module at the tail-end or even middle of a long string of modules, and it'll cache the results of everything before it.  I've got a cache lifetime set in the conf/config.php, and you can also set the lifetime in the Cacher parameters.  There can multiple Cacher's per pipeline too.</p>\n<p>This thing might not quite yet be even as stable / in working order as the original FeedMagick, but it might be worth poking at for you.  :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082766\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://laughingmeme.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=01457d1a0f0e533062cd0d1033fb4d7a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://laughingmeme.org\">kellan</a>\n</div>\n<a href=\"#comment-221082766\" class=\"permalink\"><time datetime=\"2007-04-30T16:02:31\">2007-04-30T16:02:31</time></a>\n</div>\n<div class=\"content\"><blockquote>For one, I’m refusing to play with anything older than PHP 5.</blockquote>\n<p>That must be nice.  </p>\n<p>And curse you, this looks interesting, now I've got to find time to look at it.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082767\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n</div>\n<a href=\"#comment-221082767\" class=\"permalink\"><time datetime=\"2007-04-30T17:53:08\">2007-04-30T17:53:08</time></a>\n</div>\n<div class=\"content\"><p>addendum to README:</p>\nInstallation\n<p>cp conf/config.php-dist conf/config.php\nchmod a+w logs\n- RewriteBase /~lorchard/FeedMagick2\n+ RewriteBase /FeedMagick2</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082768\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082768\" class=\"permalink\"><time datetime=\"2007-04-30T17:58:49\">2007-04-30T17:58:49</time></a>\n</div>\n<div class=\"content\"><p>@jm3: Ah!  Good catch.  I really need to eventually installer-ify that kind of stuff.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082769\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://xiled.rss-central.net/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=750dbcc9cc192bfad37a3daa4edf139e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://xiled.rss-central.net/blog\">megalar</a>\n</div>\n<a href=\"#comment-221082769\" class=\"permalink\"><time datetime=\"2007-08-05T12:25:34\">2007-08-05T12:25:34</time></a>\n</div>\n<div class=\"content\"><p>Yesterday my host upgraded to php5 so I ran over to your svn dump and installed feedmagick2.\nAfter editing the $baseurl and rewritebase i tested it and it worked like a charm, so I took a nap.\nUpon waking I was gonna go play with it and see what hacks I could get going with it but something\nwas fubar.\nWarning: fopen(/home/megalar/www/html/feedmagick/logs/feedmagick2-debug-20070805.log) [function.fopen]: failed to open stream: Permission denied in /usr/share/php/Log/file.php on line 216\nare the errors I get as you can see @ <a href=\"http://xiled.rss-central.net/feedmagick/\" rel=\"nofollow\">my site</a>.\nIf it hadn't worked to begin with I would think module problems on my server. To my knowledge, and my host's knowledge, nothing has changed since the upgrade so I'm wondering if it is some sort of bug or a server problem that waited a few hours to reveal itself. The latter doesn't really make much sense to me\nbut I can't rule it out since I'm not r00t on the box and am not 100% certain my host didn't bork something while I slept. </p>\n<pre><code>              anyhoo, your thoughts?\n</code></pre></div>\n</li>\n</ul>\n</div>\n",
    "body": "Yeah, things have been basically silent around here thanks to post-work brain fryage and a general lack of things to say.  Really, everyone else around the blogosphere seems to be covering things satisfactorily.  However, I have been idly working on a new project over the past few weeks, namely a total rewrite and redesign of [my format-ignorant feed filtering and munging kit dubbed FeedMagick](http://decafbad.com/blog/?s=feedmagick).\r\n\r\nYou can find [a demo installation of FeedMagick2 here](http://decafbad.com/2007/04/FeedMagick2/) and find it [ready for checkout from SVN over here](http://decafbad.com/svn/trunk/FeedMagick2/).  It's basically just a step away from being a proof of concept, but I'm hoping to get around to fleshing out docs and battening down the hatches with tests.  In any case, if my serial enthusiasm holds out, this thing could eventually subsume everything else I've done with feeds.\r\n\r\nFor now, peek at some of these highlights:\r\n\r\n   * [Master Personal Feed](http://decafbad.com/2007/04/FeedMagick2/inspect/masterfeed) - One big feed blended from 10 other personal metadata feeds pulled from various Web-2.0-ish sites.\r\n   * [Feed to JSON via Magpie](http://decafbad.com/2007/04/FeedMagick2/inspect/magpiejson) - Get feed data parsed by way of [Magpie](http://magpierss.sourceforge.net/) into JSON data structures\r\n   * [Flickr Favorites Feed](http://decafbad.com/2007/04/FeedMagick2/inspect/flickrfavorites) - Feed of photos marked as favorites by a Flickr user, pulled via the API\r\n   * [jbox.com scraper](http://decafbad.com/2007/04/FeedMagick2/inspect/jbox) - Pipeline composed of [HTML Tidy](http://tidy.sourceforge.net/) and XSL to scrape [jbox.com](http://jbox.com/) to build an RSS feed of new items for sale.\r\n\r\nBeyond practical examples, there are some things under the hood that seem keen to me.  Apropos of my [pipes-via-web ramblings](http://decafbad.com/blog/2007/02/15/thoughts-on-pipes-on-the-web-part-ii) back in February, I'm trying out a few different approaches to pipelining feed content through processor modules.  My original FeedMagick relied on feeding URLs to URLs as parameters.  That, unfortunately, can be mighty cumbersome and inefficient.  So, FeedMagick2 explores a few more approaches:\r\n\r\n   * The first and obvious approach is to chain them together in a single script.  So, I've got objects instances that pass content from one to the next.  The thing is, the pipe works in reverse:  The driver script asks the last module in the pipe for content, which then asks the one before it for content, and so on.  At any point along the way, modules can cache the output of previous modules, and refrain from calling up the chain.\r\n\r\n   * The second way to chain pipelines together is just like the first FeedMagick:  Some pipelines start with fetching a URL.  That can be an original feed, or a URL leading to the output of an antecedent pipeline.  And, oh yeah, most pipelines are run via parameterized URLs, so there's that bit of handy recursion.\r\n\r\n   * The third way to chain pipelines together is with HTTP POST:  A pipeline can accept feed data via the request body of an HTTP POST, thus allowing antecedent pipelines (or even cURL scripts) to *push* data into the pipeline rather than getting *pulled* via URL.  This is kind of like my [years-old jiggery pokery](http://decafbad.com/blog/?s=xmlrpc+pipe) with [pipelines via XML-RPC](http://www.decafbad.com/twiki/bin/view/Main/XmlRpcFilteringPipe), only much *much* simpler.\r\n\r\nI'm also poking around at making all of the above available at the command line via PHP-CLI, and I'm having gratuitous fun exploring PEAR to roll my own stripped-down web framework.  I still hate PHP, but I'm at least finding ways to entertain myself while I'm holding my nose.  Of course, I find weird things entertaining.\r\n\r\nAnd, as a side note, the only reason I'm using PHP is because I'd like to play around with the idea of the de facto WordPress installation requirements standard.  That is:  If you can run WordPress, you can run this.  In reality, I don't think I'm there, but I'm hoping to get close.  For one, I'm refusing to play with anything older than PHP 5.\r\n\r\nAnyway, play with it, tell me what you think and give me a reason to keep hacking at it.  :)\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221082761\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://jamesv.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c82c72ca4f9eab33a80a7bd839c1ae0b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://jamesv.org\">jamesv</a>\n                </div>\n                <a href=\"#comment-221082761\" class=\"permalink\"><time datetime=\"2007-04-30T11:39:15\">2007-04-30T11:39:15</time></a>\n            </div>\n            <div class=\"content\"><p>Aw man, now I've got to port all the code you wrote while you were here over to this new hotness ;) I really like (and appreciate) the single script approach.</p>\n\n<p>Is caching at a module level done automatically, or is that something I need to flag in my original call? Some installs of the original code base are now aggregating large sections of a pool of around 400 feeds, and eeking out even minor performances gains would be just lovely.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082762\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b309c5a1952afc3d7d81ee90908309af&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">dRAUPP</a>\n                </div>\n                <a href=\"#comment-221082762\" class=\"permalink\"><time datetime=\"2007-04-30T13:40:16\">2007-04-30T13:40:16</time></a>\n            </div>\n            <div class=\"content\"><p>hawt.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082763\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221082763\" class=\"permalink\"><time datetime=\"2007-04-30T14:43:54\">2007-04-30T14:43:54</time></a>\n            </div>\n            <div class=\"content\"><p>@jamesv: Take a look at the source to this big-ish pipeline, all the way at the end:</p>\n\n<p>http://decafbad.com/2007/04/FeedMagick2/pipelines/masterfeed</p>\n\n<p>You can basically slap a Cacher module at the tail-end or even middle of a long string of modules, and it'll cache the results of everything before it.  I've got a cache lifetime set in the conf/config.php, and you can also set the lifetime in the Cacher parameters.  There can multiple Cacher's per pipeline too.</p>\n\n<p>This thing might not quite yet be even as stable / in working order as the original FeedMagick, but it might be worth poking at for you.  :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082766\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://laughingmeme.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=01457d1a0f0e533062cd0d1033fb4d7a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://laughingmeme.org\">kellan</a>\n                </div>\n                <a href=\"#comment-221082766\" class=\"permalink\"><time datetime=\"2007-04-30T16:02:31\">2007-04-30T16:02:31</time></a>\n            </div>\n            <div class=\"content\"><blockquote>For one, I’m refusing to play with anything older than PHP 5.</blockquote>\n\n<p>That must be nice.  </p>\n\n<p>And curse you, this looks interesting, now I've got to find time to look at it.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082767\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n                </div>\n                <a href=\"#comment-221082767\" class=\"permalink\"><time datetime=\"2007-04-30T17:53:08\">2007-04-30T17:53:08</time></a>\n            </div>\n            <div class=\"content\"><p>addendum to README:</p>\n\nInstallation\n\n<p>cp conf/config.php-dist conf/config.php\n  chmod a+w logs\n- RewriteBase /~lorchard/FeedMagick2\n+ RewriteBase /FeedMagick2</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082768\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221082768\" class=\"permalink\"><time datetime=\"2007-04-30T17:58:49\">2007-04-30T17:58:49</time></a>\n            </div>\n            <div class=\"content\"><p>@jm3: Ah!  Good catch.  I really need to eventually installer-ify that kind of stuff.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082769\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://xiled.rss-central.net/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=750dbcc9cc192bfad37a3daa4edf139e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://xiled.rss-central.net/blog\">megalar</a>\n                </div>\n                <a href=\"#comment-221082769\" class=\"permalink\"><time datetime=\"2007-08-05T12:25:34\">2007-08-05T12:25:34</time></a>\n            </div>\n            <div class=\"content\"><p>Yesterday my host upgraded to php5 so I ran over to your svn dump and installed feedmagick2.\nAfter editing the $baseurl and rewritebase i tested it and it worked like a charm, so I took a nap.\nUpon waking I was gonna go play with it and see what hacks I could get going with it but something\n was fubar.\nWarning: fopen(/home/megalar/www/html/feedmagick/logs/feedmagick2-debug-20070805.log) [function.fopen]: failed to open stream: Permission denied in /usr/share/php/Log/file.php on line 216\nare the errors I get as you can see @ <a href=\"http://xiled.rss-central.net/feedmagick/\" rel=\"nofollow\">my site</a>.\nIf it hadn't worked to begin with I would think module problems on my server. To my knowledge, and my host's knowledge, nothing has changed since the upgrade so I'm wondering if it is some sort of bug or a server problem that waited a few hours to reveal itself. The latter doesn't really make much sense to me\nbut I can't rule it out since I'm not r00t on the box and am not 100% certain my host didn't bork something while I slept. </p>\n\n<pre><code>              anyhoo, your thoughts?\n</code></pre></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/04/29/say-hello-to-feedmagick2"
  },
  {
    "comments_archived": true,
    "date": "2007-03-05T22:13:45.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "metablogging",
      "webdev",
      "webservices",
      "atom",
      "xmlrpc",
      "rest",
      "http",
      "auth"
    ],
    "title": "Blog posting delegation and third-party auth",
    "wordpress_id": 1043,
    "wordpress_slug": "blog-posting-delegation-and-third-party-auth",
    "wordpress_url": "http://decafbad.com/blog/2007/03/05/blog-posting-delegation-and-third-party-auth",
    "year": "2007",
    "month": "03",
    "day": "05",
    "isDir": false,
    "slug": "blog-posting-delegation-and-third-party-auth",
    "postName": "2007-03-05-blog-posting-delegation-and-third-party-auth",
    "html": "<p>Here&#39;s something I&#39;ve been meaning to post about, brought back to mind from <a href=\"http://www.identityblog.com/?p=701\">Kim Cameron&#39;s post on &quot;Wrong-headed impersonation&quot;</a>:  </p>\n<p>I wish that blog posting interfaces (ie. <a href=\"http://www.xmlrpc.com/metaWeblogApi\">MetaWeblog API</a> and <a href=\"http://www.ietf.org/html.charters/atompub-charter.html\">Atom Publishing Protocol</a>) offered a way to delegate blog posting to a 3rd party app (desktop or web) in such a way as to avoid providing one&#39;s login details (i.e. user name and password).  For instance, consider both <a href=\"http://www.flickr.com/services/api/auth.spec.html\">Flickr&#39;s</a> and <a href=\"http://upcoming.org/services/api/token_auth.php\">Upcoming&#39;s</a> 3rd party token-based authentication / authorization schemes.</p>\n<p>In particular, I&#39;m looking at things like del.icio.us&#39; own Daily Blog Post and others.  These can be used to auto-post content to one&#39;s blog generated elsewhere - but at the price of sharing login details.  Granted, you can mostly trust these 3rd parties not to do anything nasty with your credentials, but it would be nice not to have to.</p>\n<p>I figure that something RESTful like extending HTTP authentication (ala <a href=\"http://www.xml.com/pub/a/2003/12/17/dive.html\">Atom Authentication</a>) with a token scheme could be interesting, and possibly fit nicely into <a href=\"http://www.ietf.org/html.charters/atompub-charter.html\">APP</a> itself.  It could probably be retrofit into the <a href=\"http://www.xmlrpc.com/metaWeblogApi\">MetaWeblog API</a> by specifying a per-app user name and password.  I can imagine a WordPress admin plugin that issues approved authentication tokens to restrict the categories and other activities allowed by 3rd party apps.  </p>\n<p>Just something I&#39;m thinking about, as more services may or may not grow into delegated blog posting.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221084462\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\">fluffy</a>\n</div>\n<a href=\"#comment-221084462\" class=\"permalink\"><time datetime=\"2007-03-05T22:40:26\">2007-03-05T22:40:26</time></a>\n</div>\n<div class=\"content\"><p>Wouldn't openID be a better candidate for this?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084463\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084463\" class=\"permalink\"><time datetime=\"2007-03-05T22:48:24\">2007-03-05T22:48:24</time></a>\n</div>\n<div class=\"content\"><p>Not really, unless I don't entirely understand OpenID.  </p>\n<p>OpenID offers way to authenticate <em>yourself</em>.  However, what I want is an easy way to delegate your access to 3rd party apps, without those apps being able to authenticate as you or performs actions outside of the permissions you approve.  I don't really want Flickr Uploader, Ecto, MarsEdit to be able to use OpenID to login as me with carte blanche.</p>\n<p>With a token-based system like Flickr has, I can approve delegation to various apps and revoke their access at any time - without ever releasing my login details.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084464\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://george.hotelling.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c7d1c8d2b1a7643236a4661e9a974dee&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://george.hotelling.net/\">George Hotelling</a>\n</div>\n<a href=\"#comment-221084464\" class=\"permalink\"><time datetime=\"2007-03-06T17:51:55\">2007-03-06T17:51:55</time></a>\n</div>\n<div class=\"content\"><p>At first I had this great idea to build a blog posting proxy service that could grant access to your blog to different services by giving them different usernames and passwords and you could revoke them at any time and it would be great and everyone would be posting to everyone's blog all the time.</p>\n<p>Then I realized I had put on <a href=\"http://worsethanfailure.com/Articles/The_Complicator's_Gloves.aspx\" rel=\"nofollow\">complicator gloves</a> and that it would be way easier to just add new users to my blog without a proxy service.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084465\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084465\" class=\"permalink\"><time datetime=\"2007-03-06T18:04:57\">2007-03-06T18:04:57</time></a>\n</div>\n<div class=\"content\"><p>Yeah, I figured making multiple accounts is a way to go when you've got your own install of something like WordPress.  It kind of gets stymied, though, if you want the same thing for a hosted service like WordPress.com, Vox, TypePad, or LiveJournal where one account = one blog.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084466\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://ian.mckellar.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a38054904e39e36fab7c4d779abf3752&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://ian.mckellar.org/\">Ian McKellar</a>\n</div>\n<a href=\"#comment-221084466\" class=\"permalink\"><time datetime=\"2007-03-12T17:43:49\">2007-03-12T17:43:49</time></a>\n</div>\n<div class=\"content\"><p>It seems to me that the ideal solution to this is to have your blog pull new posts from an RSS/Atom feed that's hosted by the service that is generating your content. Feedburner already has a half-assed implementation of this where they'll pull your delicious bookmarks and flickr photos into your burned feed.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084468\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084468\" class=\"permalink\"><time datetime=\"2007-03-12T17:58:35\">2007-03-12T17:58:35</time></a>\n</div>\n<div class=\"content\"><p>@ian: Hmm, yeah, that probably does end up being the least onerous solution - just offer an aggregated feed of one's output.  I do like the idea of auto-posting to a blog, though, for the sake of something sorta like daily backups to a system I control.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084470\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://ian.mckellar.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a38054904e39e36fab7c4d779abf3752&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://ian.mckellar.org/\">Ian McKellar</a>\n</div>\n<a href=\"#comment-221084470\" class=\"permalink\"><time datetime=\"2007-03-12T18:44:46\">2007-03-12T18:44:46</time></a>\n</div>\n<div class=\"content\"><p>@l.m.orchard: you don't need to just aggregate you can also import posts into your own store. We could come up with a cleverly confusing buzzword acronym like Atom Pull Publishing. You just periodically poll a feed and import the items. Actually, this is kind of what Google Reader is doing. They've even got a namespace in their atom for expressing the original id and the source feed. Perhaps I should write a drupal module.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084471\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084471\" class=\"permalink\"><time datetime=\"2007-03-12T19:01:45\">2007-03-12T19:01:45</time></a>\n</div>\n<div class=\"content\"><p>@ian: Hmm, yeah, that does sound like the least complicated way to get outside content pulled into a blog without releasing the blog's login details.  I know I've seen / used some WordPress plugins that do  basically that, though I've not been happy with any of them yet.  I should re-look into why that's been the case</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084473\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://ian.mckellar.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a38054904e39e36fab7c4d779abf3752&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://ian.mckellar.org/\">Ian McKellar</a>\n</div>\n<a href=\"#comment-221084473\" class=\"permalink\"><time datetime=\"2007-03-12T19:26:16\">2007-03-12T19:26:16</time></a>\n</div>\n<div class=\"content\"><p>@l.m.orchard: in my experience the problems are with the formatting of the content (do blank lines turn into paragraphs, etc) and fragile post IDs (the upgraded wordpress and spammed all my friends on livejournal or planet problem). I'm not sure how to fix either of these problems but I think they're both problems Atom is attempting to solve...</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Here's something I've been meaning to post about, brought back to mind from [Kim Cameron's post on \"Wrong-headed impersonation\"][kc]:  \r\n\r\nI wish that blog posting interfaces (ie. [MetaWeblog API][ma] and [Atom Publishing Protocol][app]) offered a way to delegate blog posting to a 3rd party app (desktop or web) in such a way as to avoid providing one's login details (i.e. user name and password).  For instance, consider both [Flickr's][fa] and [Upcoming's][ua] 3rd party token-based authentication / authorization schemes.\r\n\r\nIn particular, I'm looking at things like del.icio.us' own Daily Blog Post and others.  These can be used to auto-post content to one's blog generated elsewhere - but at the price of sharing login details.  Granted, you can mostly trust these 3rd parties not to do anything nasty with your credentials, but it would be nice not to have to.\r\n\r\nI figure that something RESTful like extending HTTP authentication (ala [Atom Authentication][aa]) with a token scheme could be interesting, and possibly fit nicely into [APP][app] itself.  It could probably be retrofit into the [MetaWeblog API][ma] by specifying a per-app user name and password.  I can imagine a WordPress admin plugin that issues approved authentication tokens to restrict the categories and other activities allowed by 3rd party apps.  \r\n\r\nJust something I'm thinking about, as more services may or may not grow into delegated blog posting.\r\n\r\n[aa]: http://www.xml.com/pub/a/2003/12/17/dive.html\r\n[ma]: http://www.xmlrpc.com/metaWeblogApi\r\n[app]: http://www.ietf.org/html.charters/atompub-charter.html\r\n[fa]: http://www.flickr.com/services/api/auth.spec.html\r\n[ua]: http://upcoming.org/services/api/token_auth.php\r\n[kc]: http://www.identityblog.com/?p=701\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221084462\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://beesbuzz.biz/\">fluffy</a>\n                </div>\n                <a href=\"#comment-221084462\" class=\"permalink\"><time datetime=\"2007-03-05T22:40:26\">2007-03-05T22:40:26</time></a>\n            </div>\n            <div class=\"content\"><p>Wouldn't openID be a better candidate for this?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084463\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084463\" class=\"permalink\"><time datetime=\"2007-03-05T22:48:24\">2007-03-05T22:48:24</time></a>\n            </div>\n            <div class=\"content\"><p>Not really, unless I don't entirely understand OpenID.  </p>\n\n<p>OpenID offers way to authenticate <em>yourself</em>.  However, what I want is an easy way to delegate your access to 3rd party apps, without those apps being able to authenticate as you or performs actions outside of the permissions you approve.  I don't really want Flickr Uploader, Ecto, MarsEdit to be able to use OpenID to login as me with carte blanche.</p>\n\n<p>With a token-based system like Flickr has, I can approve delegation to various apps and revoke their access at any time - without ever releasing my login details.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084464\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://george.hotelling.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c7d1c8d2b1a7643236a4661e9a974dee&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://george.hotelling.net/\">George Hotelling</a>\n                </div>\n                <a href=\"#comment-221084464\" class=\"permalink\"><time datetime=\"2007-03-06T17:51:55\">2007-03-06T17:51:55</time></a>\n            </div>\n            <div class=\"content\"><p>At first I had this great idea to build a blog posting proxy service that could grant access to your blog to different services by giving them different usernames and passwords and you could revoke them at any time and it would be great and everyone would be posting to everyone's blog all the time.</p>\n\n<p>Then I realized I had put on <a href=\"http://worsethanfailure.com/Articles/The_Complicator's_Gloves.aspx\" rel=\"nofollow\">complicator gloves</a> and that it would be way easier to just add new users to my blog without a proxy service.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084465\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084465\" class=\"permalink\"><time datetime=\"2007-03-06T18:04:57\">2007-03-06T18:04:57</time></a>\n            </div>\n            <div class=\"content\"><p>Yeah, I figured making multiple accounts is a way to go when you've got your own install of something like WordPress.  It kind of gets stymied, though, if you want the same thing for a hosted service like WordPress.com, Vox, TypePad, or LiveJournal where one account = one blog.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084466\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://ian.mckellar.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a38054904e39e36fab7c4d779abf3752&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://ian.mckellar.org/\">Ian McKellar</a>\n                </div>\n                <a href=\"#comment-221084466\" class=\"permalink\"><time datetime=\"2007-03-12T17:43:49\">2007-03-12T17:43:49</time></a>\n            </div>\n            <div class=\"content\"><p>It seems to me that the ideal solution to this is to have your blog pull new posts from an RSS/Atom feed that's hosted by the service that is generating your content. Feedburner already has a half-assed implementation of this where they'll pull your delicious bookmarks and flickr photos into your burned feed.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084468\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084468\" class=\"permalink\"><time datetime=\"2007-03-12T17:58:35\">2007-03-12T17:58:35</time></a>\n            </div>\n            <div class=\"content\"><p>@ian: Hmm, yeah, that probably does end up being the least onerous solution - just offer an aggregated feed of one's output.  I do like the idea of auto-posting to a blog, though, for the sake of something sorta like daily backups to a system I control.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084470\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://ian.mckellar.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a38054904e39e36fab7c4d779abf3752&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://ian.mckellar.org/\">Ian McKellar</a>\n                </div>\n                <a href=\"#comment-221084470\" class=\"permalink\"><time datetime=\"2007-03-12T18:44:46\">2007-03-12T18:44:46</time></a>\n            </div>\n            <div class=\"content\"><p>@l.m.orchard: you don't need to just aggregate you can also import posts into your own store. We could come up with a cleverly confusing buzzword acronym like Atom Pull Publishing. You just periodically poll a feed and import the items. Actually, this is kind of what Google Reader is doing. They've even got a namespace in their atom for expressing the original id and the source feed. Perhaps I should write a drupal module.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084471\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084471\" class=\"permalink\"><time datetime=\"2007-03-12T19:01:45\">2007-03-12T19:01:45</time></a>\n            </div>\n            <div class=\"content\"><p>@ian: Hmm, yeah, that does sound like the least complicated way to get outside content pulled into a blog without releasing the blog's login details.  I know I've seen / used some WordPress plugins that do  basically that, though I've not been happy with any of them yet.  I should re-look into why that's been the case</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084473\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://ian.mckellar.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a38054904e39e36fab7c4d779abf3752&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://ian.mckellar.org/\">Ian McKellar</a>\n                </div>\n                <a href=\"#comment-221084473\" class=\"permalink\"><time datetime=\"2007-03-12T19:26:16\">2007-03-12T19:26:16</time></a>\n            </div>\n            <div class=\"content\"><p>@l.m.orchard: in my experience the problems are with the formatting of the content (do blank lines turn into paragraphs, etc) and fragile post IDs (the upgraded wordpress and spammed all my friends on livejournal or planet problem). I'm not sure how to fix either of these problems but I think they're both problems Atom is attempting to solve...</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/03/05/blog-posting-delegation-and-third-party-auth"
  },
  {
    "comments_archived": true,
    "date": "2007-02-15T08:49:56.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "rss",
      "mashups",
      "atom",
      "yahoo",
      "feedmagick"
    ],
    "title": "Thoughts on Pipes on the Web - Part II",
    "wordpress_id": 1039,
    "wordpress_slug": "thoughts-on-pipes-on-the-web-part-ii",
    "wordpress_url": "http://decafbad.com/blog/2007/02/15/thoughts-on-pipes-on-the-web-part-ii",
    "year": "2007",
    "month": "02",
    "day": "15",
    "isDir": false,
    "slug": "thoughts-on-pipes-on-the-web-part-ii",
    "postName": "2007-02-15-thoughts-on-pipes-on-the-web-part-ii",
    "html": "<p>In <a href=\"http://decafbad.com/blog/2007/02/15/thoughts-on-pipes-on-the-web\">the last post</a>, I expressed concern for my own well-being over a lack of head-over-heels love for <a href=\"http://pipes.yahoo.com/\">Yahoo! Pipes</a>.  On the surface, I think it&#39;s because it&#39;s not a freshly discovered concept for me, and also probably because I&#39;m tired and a bit hacked out right now.  But, I think there&#39;s a bit more to it.</p>\n<p>First of all, I&#39;m not impressed by GUI builders for most things.  Don&#39;t get me wrong:  That <a href=\"http://pipes.yahoo.com/\">Pipes</a> GUI is pretty sweet and quite an impressive implementation — but as a rule, such things don&#39;t quite get my geek on.  So, there&#39;s that.</p>\n<p>Another thing is that I&#39;ve done something <em>kinda</em> like <a href=\"http://pipes.yahoo.com/\">Yahoo! Pipes</a>, called <a href=\"http://decafbad.com/trac/wiki/FeedMagick\">FeedMagick</a> — only, it doesn&#39;t have a GUI and I mostly abandoned it after releasing the code and having used it for a project at my old job.  It&#39;s one of those <a href=\"http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\">serial enthusiasms</a> that I&#39;ve figured I&#39;d circle back to eventually.  I still think it&#39;s a pretty cool idea.  </p>\n<p>All kudos to the <a href=\"http://pipes.yahoo.com/\">Yahoo! Pipes</a> team though: Unlike me, they&#39;ve actually got a living and breathing project — which trumps a paged-to-disk <a href=\"http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\">serial enthusiasm</a> most days.</p>\n<p>So what else is really curbing my enthusiasm?  Well, <a href=\"http://pipes.yahoo.com/\">Yahoo! Pipes</a> looks like a pretty self-contained pipes engine — data goes in one end, <a href=\"http://www.catb.org/~esr/jargon/html/F/frobnicate.html\">frobnication</a> happens in the middle, data comes out the other side.</p>\n<p>But, what I like about the notion of <a href=\"http://207.22.26.166/bytecols/2001-08-15.html\">the URL-line</a> is that you can take one URL and <em>supply it as a parameter to another URL</em> — making <a href=\"http://www.decafbad.com/blog/2002/04/18/oooaod\">messy pipelined URLs</a> while building a crazy web-wide distributed execution environment powered by HTTP and REST.  This is the kernel of the notion that I think really excites me about pipe on the web — I just haven&#39;t had a chance to do much with it lately.</p>\n<p>Depending on the perspective, true pipes on the web — that is, URLs fetching URLs — look to me like <a href=\"http://www.defmacro.org/ramblings/fp.html\">functional programming</a> ala <a href=\"http://en.wikipedia.org/wiki/Lisp_programming_language\">Lisp</a>.  Consider an idempotent GET request as a pure function call with no side-effects.  Then, consider a GET request that accepts a URL as a parameter — it&#39;s a nested function call: the outer GET must make an inner GET to fetch the parameter-supplied URL.  Give the inner URL another URL as a parameter, and you&#39;ve got yet another nested function call.  </p>\n<p>But, if you like, ignore the theoretical <a href=\"http://www.defmacro.org/ramblings/fp.html\">benefits of functional programming</a> — flip the nested function calls inside out and you&#39;ve got a pipe.  And, since you&#39;re using HTTP GET, you can get all the benefits of HTTP — like caching of execution results and a web full of distributed processing nodes, among other things.  </p>\n<p>I haven&#39;t explored <a href=\"http://pipes.yahoo.com/\">Yahoo! Pipes</a> deeply enough yet, so maybe I&#39;m missing the features that pipe authors can used to call on other distributed pipe elements out on the web at large.  But, I think that&#39;s what ultimately gets me psyched about pipes the web and hasn&#39;t yet for <a href=\"http://pipes.yahoo.com/\">Yahoo! Pipes</a>.</p>\n<p>And, of course, I think I&#39;m just a little hacked out and tired of whizbang new stuff right now.  :)</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090511\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://journal.2manyjohns.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d9670e63de2bba834c5a725193702718&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://journal.2manyjohns.com\">John Evans</a>\n</div>\n<a href=\"#comment-221090511\" class=\"permalink\"><time datetime=\"2007-02-15T13:59:01\">2007-02-15T13:59:01</time></a>\n</div>\n<div class=\"content\"><p>The thing that struck me about Pipes is that it seemed rather limiting to someone who can code but too geeky to someone who can't. Maybe I am wrong but I wonder that once the hype dies down who exactly the audience will be long term.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090512\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://sturob.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=66681517af9a0a62c1044b16a528b7e3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://sturob.com/\">Stuart Robinson</a>\n</div>\n<a href=\"#comment-221090512\" class=\"permalink\"><time datetime=\"2007-02-15T19:35:41\">2007-02-15T19:35:41</time></a>\n</div>\n<div class=\"content\"><p>Don't be so apologetic! Conceptually it's cool, but the UI quickly becomes frustrating for anyone with text-based coding experience. I guess this is the web's visual basic and we are all going to be more interested in it's perl.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "In [the last post][part1], I expressed concern for my own well-being over a lack of head-over-heels love for [Yahoo! Pipes][pipes].  On the surface, I think it's because it's not a freshly discovered concept for me, and also probably because I'm tired and a bit hacked out right now.  But, I think there's a bit more to it.\r\n\r\nFirst of all, I'm not impressed by GUI builders for most things.  Don't get me wrong:  That [Pipes][] GUI is pretty sweet and quite an impressive implementation — but as a rule, such things don't quite get my geek on.  So, there's that.\r\n\r\nAnother thing is that I've done something *kinda* like [Yahoo! Pipes][pipes], called [FeedMagick][] — only, it doesn't have a GUI and I mostly abandoned it after releasing the code and having used it for a project at my old job.  It's one of those [serial enthusiasms][se] that I've figured I'd circle back to eventually.  I still think it's a pretty cool idea.  \r\n\r\nAll kudos to the [Yahoo! Pipes][pipes] team though: Unlike me, they've actually got a living and breathing project — which trumps a paged-to-disk [serial enthusiasm][se] most days.\r\n\r\nSo what else is really curbing my enthusiasm?  Well, [Yahoo! Pipes][pipes] looks like a pretty self-contained pipes engine — data goes in one end, [frobnication][] happens in the middle, data comes out the other side.\r\n\r\nBut, what I like about the notion of [the URL-line][urlline] is that you can take one URL and *supply it as a parameter to another URL* — making [messy pipelined URLs][pipelined] while building a crazy web-wide distributed execution environment powered by HTTP and REST.  This is the kernel of the notion that I think really excites me about pipe on the web — I just haven't had a chance to do much with it lately.\r\n\r\nDepending on the perspective, true pipes on the web — that is, URLs fetching URLs — look to me like [functional programming][fp] ala [Lisp][].  Consider an idempotent GET request as a pure function call with no side-effects.  Then, consider a GET request that accepts a URL as a parameter — it's a nested function call: the outer GET must make an inner GET to fetch the parameter-supplied URL.  Give the inner URL another URL as a parameter, and you've got yet another nested function call.  \r\n\r\nBut, if you like, ignore the theoretical [benefits of functional programming][fp] — flip the nested function calls inside out and you've got a pipe.  And, since you're using HTTP GET, you can get all the benefits of HTTP — like caching of execution results and a web full of distributed processing nodes, among other things.  \r\n\r\nI haven't explored [Yahoo! Pipes][pipes] deeply enough yet, so maybe I'm missing the features that pipe authors can used to call on other distributed pipe elements out on the web at large.  But, I think that's what ultimately gets me psyched about pipes the web and hasn't yet for [Yahoo! Pipes][pipes].\r\n\r\nAnd, of course, I think I'm just a little hacked out and tired of whizbang new stuff right now.  :)\r\n\r\n[fp]: http://www.defmacro.org/ramblings/fp.html\r\n[lisp]: http://en.wikipedia.org/wiki/Lisp_programming_language\r\n[pipelined]: http://www.decafbad.com/blog/2002/04/18/oooaod\r\n[urlline]: http://207.22.26.166/bytecols/2001-08-15.html\r\n[frobnication]: http://www.catb.org/~esr/jargon/html/F/frobnicate.html\r\n[se]: http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\r\n[feedmagick]: http://decafbad.com/trac/wiki/FeedMagick\r\n[pipes]: http://pipes.yahoo.com/\r\n[part1]: http://decafbad.com/blog/2007/02/15/thoughts-on-pipes-on-the-web\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221090511\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://journal.2manyjohns.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d9670e63de2bba834c5a725193702718&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://journal.2manyjohns.com\">John Evans</a>\n                </div>\n                <a href=\"#comment-221090511\" class=\"permalink\"><time datetime=\"2007-02-15T13:59:01\">2007-02-15T13:59:01</time></a>\n            </div>\n            <div class=\"content\"><p>The thing that struck me about Pipes is that it seemed rather limiting to someone who can code but too geeky to someone who can't. Maybe I am wrong but I wonder that once the hype dies down who exactly the audience will be long term.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090512\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://sturob.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=66681517af9a0a62c1044b16a528b7e3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://sturob.com/\">Stuart Robinson</a>\n                </div>\n                <a href=\"#comment-221090512\" class=\"permalink\"><time datetime=\"2007-02-15T19:35:41\">2007-02-15T19:35:41</time></a>\n            </div>\n            <div class=\"content\"><p>Don't be so apologetic! Conceptually it's cool, but the UI quickly becomes frustrating for anyone with text-based coding experience. I guess this is the web's visual basic and we are all going to be more interested in it's perl.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/02/15/thoughts-on-pipes-on-the-web-part-ii"
  },
  {
    "comments_archived": true,
    "date": "2007-02-15T08:09:56.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "rss",
      "mashups",
      "atom",
      "yahoo",
      "feedmagick"
    ],
    "title": "Thoughts on Pipes on the Web",
    "wordpress_id": 1038,
    "wordpress_slug": "thoughts-on-pipes-on-the-web",
    "wordpress_url": "http://decafbad.com/blog/2007/02/15/thoughts-on-pipes-on-the-web",
    "year": "2007",
    "month": "02",
    "day": "15",
    "isDir": false,
    "slug": "thoughts-on-pipes-on-the-web",
    "postName": "2007-02-15-thoughts-on-pipes-on-the-web",
    "html": "<p>By way of my <a href=\"http://decafbad.com/trac/browser/trunk/hacking_rss_and_atom/ch15_popular_links.py\">meme tracker</a>, I found something like 15 entries linking to <a href=\"http://pipes.yahoo.com/\">Yahoo! Pipes</a> from my feed subscriptions.  That&#39;s crazy — I&#39;ve usually never seen more than 3-5 feeds linking to anyone thing, maybe as many as 8 if it&#39;s something <em>really</em> hot.  I read about it over morning coffee and aggregator skimming; I heard about it on <a href=\"http://www.twit.tv/88\">TWiT</a> on the bus to work; I was told all about it in the hallway once I got to work.  <a href=\"http://pipes.yahoo.com/\">Yahoo! Pipes</a> has been hard to miss. </p>\n<p>With that in mind, it seems weird to me that <em>I</em> didn&#39;t get as excited about the release of <a href=\"http://pipes.yahoo.com/\">Pipes</a> as everyone else in my local blogosphere seems to have.  <a href=\"http://pipes.yahoo.com/\">Pipes</a> has all the ingredients of something that should <em>really</em> set me off.  Pipes, filters, mashups, RSS, Atom, RDF — (singing) these are a few of my favorite things!  So, what gives?  I&#39;m genuinely worried that I&#39;m sick, depressed, losing it, or otherwise replaced by a pod alien.  Possibly all the above.</p>\n<p>I knew about <a href=\"http://pipes.yahoo.com/\">Pipes</a> as an internal project at Yahoo! quite awhile ago — possibly even in my first week or two after <a href=\"http://decafbad.com/blog/2006/06/24/go-west-young-man\">having joined</a>.  I&#39;m fuzzy on the timing here, but it&#39;s not important.  Someone mentioned it to me at some point, I poked at it a bit from the internal network, and thought it was neat / keen.  My main impression at the time was, &quot;Cool, someone&#39;s doing <a href=\"http://decafbad.com/trac/wiki/FeedMagick\">FeedMagick</a>, but done right and with a slick visual layout tool.&quot;  </p>\n<p>Then, I got really busy with del.icio.us and wandered off.  So, the release wasn&#39;t big surprising news to me — my reaction was something like, &quot;Huh, so they did a public release of that?  Nice.&quot;  Clearly I need more caffeine.</p>\n<p>The thing is that the idea of pipes on the web is not itself a new concept to me.  I think my <a href=\"http://www.decafbad.com/twiki/bin/view/Main/XmlRpcFilteringPipe\">XmlRpcFilteringPipes</a> seems kinda silly in retrospect, and I&#39;m all about <a href=\"http://207.22.26.166/bytecols/2001-08-15.html\">the Power of the URL-line</a> nowadays — but suffice it to say that I&#39;ve been thinking about pipes on the web since as long ago as 2002 or so.  </p>\n<p>So, while I&#39;m all jaded and apparently incapable of feeling the wonder, this seems to be one of the biggest revelations to people playing with <a href=\"http://pipes.yahoo.com/\">Yahoo! Pipes</a>:</p>\n<p><i>Pipes?  On the web?  <strong>BRILLIANT!</strong></i></p>\n<p>So, it&#39;s not you, it&#39;s me.  I think I&#39;ve got a serious deficit of enthusiasm for what&#39;s really a pretty cool thing.  I want to think a bit more about why that is.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086705\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=390bc3dca83aea14b31f821e51a4400b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Kenneth</a>\n</div>\n<a href=\"#comment-221086705\" class=\"permalink\"><time datetime=\"2007-02-15T14:06:37\">2007-02-15T14:06:37</time></a>\n</div>\n<div class=\"content\"><p>http://yakubovich.blogspot.com/2007/01/visipipe-visual-version-of-core-utils.html</p>\n<p>Might have been buried in all the buzz about Yahoo, but this sounds like a neat idea.</p>\n<p><a href=\"http://proessays.com\">Kenneth Writer</a></p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086707\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://jeffdaly.wordpress.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=f2e613837687c930227127a7b0267dd0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://jeffdaly.wordpress.com/\">Jeff Daly</a>\n</div>\n<a href=\"#comment-221086707\" class=\"permalink\"><time datetime=\"2007-02-16T01:08:54\">2007-02-16T01:08:54</time></a>\n</div>\n<div class=\"content\"><p>You're not alone. I was excited when I learned about Pipes, but ultimately I was let down by the lack of parsing tools. Pipes is seriously limited without any XPath/regular expression parsing capabilities. Fortunately, there is a post on XPath in the feature request page.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "By way of my [meme tracker][mt], I found something like 15 entries linking to [Yahoo! Pipes][pipes] from my feed subscriptions.  That's crazy — I've usually never seen more than 3-5 feeds linking to anyone thing, maybe as many as 8 if it's something *really* hot.  I read about it over morning coffee and aggregator skimming; I heard about it on [TWiT][] on the bus to work; I was told all about it in the hallway once I got to work.  [Yahoo! Pipes][pipes] has been hard to miss. \r\n\r\nWith that in mind, it seems weird to me that *I* didn't get as excited about the release of [Pipes][pipes] as everyone else in my local blogosphere seems to have.  [Pipes][pipes] has all the ingredients of something that should *really* set me off.  Pipes, filters, mashups, RSS, Atom, RDF — (singing) these are a few of my favorite things!  So, what gives?  I'm genuinely worried that I'm sick, depressed, losing it, or otherwise replaced by a pod alien.  Possibly all the above.\r\n\r\nI knew about [Pipes][pipes] as an internal project at Yahoo! quite awhile ago — possibly even in my first week or two after [having joined][joined].  I'm fuzzy on the timing here, but it's not important.  Someone mentioned it to me at some point, I poked at it a bit from the internal network, and thought it was neat / keen.  My main impression at the time was, \"Cool, someone's doing [FeedMagick][], but done right and with a slick visual layout tool.\"  \r\n\r\nThen, I got really busy with del.icio.us and wandered off.  So, the release wasn't big surprising news to me — my reaction was something like, \"Huh, so they did a public release of that?  Nice.\"  Clearly I need more caffeine.\r\n\r\nThe thing is that the idea of pipes on the web is not itself a new concept to me.  I think my [XmlRpcFilteringPipes][xrfp] seems kinda silly in retrospect, and I'm all about [the Power of the URL-line][urlline] nowadays — but suffice it to say that I've been thinking about pipes on the web since as long ago as 2002 or so.  \r\n\r\nSo, while I'm all jaded and apparently incapable of feeling the wonder, this seems to be one of the biggest revelations to people playing with [Yahoo! Pipes][pipes]:\r\n\r\n<i>Pipes?  On the web?  **BRILLIANT!**</i>\r\n\r\nSo, it's not you, it's me.  I think I've got a serious deficit of enthusiasm for what's really a pretty cool thing.  I want to think a bit more about why that is.\r\n\r\n[joined]: http://decafbad.com/blog/2006/06/24/go-west-young-man\r\n[twit]: http://www.twit.tv/88\r\n[feedmagick]: http://decafbad.com/trac/wiki/FeedMagick\r\n[feedmagick-demo]: http://decafbad.com/2005/12/FeedMagick/\r\n[me]: http://decafbad.com/blog/2005/12/01/feedrolls-in-xoxo-from-opml-via-xslt-and-url-line-magic\r\n[urlline]: http://207.22.26.166/bytecols/2001-08-15.html\r\n[xrfp]: http://www.decafbad.com/twiki/bin/view/Main/XmlRpcFilteringPipe\r\n[pipes]: http://pipes.yahoo.com/\r\n[mt]: http://decafbad.com/trac/browser/trunk/hacking_rss_and_atom/ch15_popular_links.py\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221086705\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=390bc3dca83aea14b31f821e51a4400b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Kenneth</a>\n                </div>\n                <a href=\"#comment-221086705\" class=\"permalink\"><time datetime=\"2007-02-15T14:06:37\">2007-02-15T14:06:37</time></a>\n            </div>\n            <div class=\"content\"><p>http://yakubovich.blogspot.com/2007/01/visipipe-visual-version-of-core-utils.html</p>\n\n<p>Might have been buried in all the buzz about Yahoo, but this sounds like a neat idea.</p>\n\n<p><a href=\"http://proessays.com\">Kenneth Writer</a></p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086707\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://jeffdaly.wordpress.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=f2e613837687c930227127a7b0267dd0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://jeffdaly.wordpress.com/\">Jeff Daly</a>\n                </div>\n                <a href=\"#comment-221086707\" class=\"permalink\"><time datetime=\"2007-02-16T01:08:54\">2007-02-16T01:08:54</time></a>\n            </div>\n            <div class=\"content\"><p>You're not alone. I was excited when I learned about Pipes, but ultimately I was let down by the lack of parsing tools. Pipes is seriously limited without any XPath/regular expression parsing capabilities. Fortunately, there is a post on XPath in the feature request page.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/02/15/thoughts-on-pipes-on-the-web"
  },
  {
    "comments_archived": true,
    "date": "2007-01-03T20:29:31.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "rss",
      "js",
      "xoxooutliner",
      "bookmarklets"
    ],
    "title": "rss feeds of bookmarklets?",
    "wordpress_id": 1033,
    "wordpress_slug": "rss-feeds-of-bookmarklets",
    "wordpress_url": "http://decafbad.com/blog/2007/01/03/rss-feeds-of-bookmarklets",
    "year": "2007",
    "month": "01",
    "day": "03",
    "isDir": false,
    "slug": "rss-feeds-of-bookmarklets",
    "postName": "2007-01-03-rss-feeds-of-bookmarklets",
    "html": "<p>Hmm, a quick idea:  Has anyone yet tried making an RSS feed of bookmarklets?  I&#39;d use it by dragging it to the Firefox bookmark toolbar to get a drop-down menu of usable bookmarklets, dynamically generated by an online app.  In particular, say I had an outline in XoxoOutliner, and I wanted to treat the first level of items each as a loosely categorized inbox for ideas.  The RSS feed would offer bookmarklets to append a new idea via quick pop-up to each of the top-level branches.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090498\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://stadik.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c28fdb5b196caeb5d37101b73b50ae26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://stadik.net\">Scytrin dai Kinthra</a>\n</div>\n<a href=\"#comment-221090498\" class=\"permalink\"><time datetime=\"2007-01-03T23:30:42\">2007-01-03T23:30:42</time></a>\n</div>\n<div class=\"content\"><p>I used to do this from my home page once browsers started integrating rss into bookmark thingies.\nThese days I've been using the Firefox del.icio.us 1.3.x extention and store my bookmarklets and smart bookmarks (hello galeon) on my account.\nHowever, del.icio.us doesn't allow sharing of certain types of bookmarks and bookmarklets are one of them (being javascript and all), so sharing of them is not very well enabled.\nIt'd be nice being able to peruse a del.icio.us/tag/bookmarklet and pickout nifties.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090499\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://factoryjoe.com/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d187daa261d3472b7e07f38f8e5c010e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://factoryjoe.com/blog\">Chris Messina</a>\n</div>\n<a href=\"#comment-221090499\" class=\"permalink\"><time datetime=\"2007-01-03T23:32:42\">2007-01-03T23:32:42</time></a>\n</div>\n<div class=\"content\"><p>Not sure, but that's a great idea! The bookmarklets that load remote scripts and are therefore always up to date IMO are genius... this simply adds some depth to them I guess... and takes advantage of the Firefox UI.</p>\n<p>Would you be able to execute Javascript loaded from feeds that aren't top level locations? That seems like a security issue, no?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090501\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.robinsonhouse.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=04dbf0ad0e3154fad1b02345d8668b72&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.robinsonhouse.com/\">James Robinson, III</a>\n</div>\n<a href=\"#comment-221090501\" class=\"permalink\"><time datetime=\"2007-01-04T01:34:56\">2007-01-04T01:34:56</time></a>\n</div>\n<div class=\"content\"><p>Haven't tried it in FF 2.0.0.1, but older versions filtered out bookmarklets from the feed due to the JS.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090502\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://db79.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d527b871fc097b317f7993bdac0d349e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://db79.com\">Shawn Medero</a>\n</div>\n<a href=\"#comment-221090502\" class=\"permalink\"><time datetime=\"2007-01-04T05:03:17\">2007-01-04T05:03:17</time></a>\n</div>\n<div class=\"content\"><p>James is right about Firefox - I wanted to have a feed of bookmarklets as a live bookmark that people at work would subscribe to for a certain project but Firefox 1.x filtered out any Javascript. Going back to unstable Firefox (it worked up until 0.9 or something) didn't seem like a great idea so I canned it. Kinda stinks because it would be really useful for internal usage where security shouldn't be an issue.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Hmm, a quick idea:  Has anyone yet tried making an RSS feed of bookmarklets?  I'd use it by dragging it to the Firefox bookmark toolbar to get a drop-down menu of usable bookmarklets, dynamically generated by an online app.  In particular, say I had an outline in XoxoOutliner, and I wanted to treat the first level of items each as a loosely categorized inbox for ideas.  The RSS feed would offer bookmarklets to append a new idea via quick pop-up to each of the top-level branches.\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221090498\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://stadik.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c28fdb5b196caeb5d37101b73b50ae26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://stadik.net\">Scytrin dai Kinthra</a>\r\n                </div>\r\n                <a href=\"#comment-221090498\" class=\"permalink\"><time datetime=\"2007-01-03T23:30:42\">2007-01-03T23:30:42</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I used to do this from my home page once browsers started integrating rss into bookmark thingies.\r\nThese days I've been using the Firefox del.icio.us 1.3.x extention and store my bookmarklets and smart bookmarks (hello galeon) on my account.\r\nHowever, del.icio.us doesn't allow sharing of certain types of bookmarks and bookmarklets are one of them (being javascript and all), so sharing of them is not very well enabled.\r\nIt'd be nice being able to peruse a del.icio.us/tag/bookmarklet and pickout nifties.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221090499\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://factoryjoe.com/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d187daa261d3472b7e07f38f8e5c010e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://factoryjoe.com/blog\">Chris Messina</a>\r\n                </div>\r\n                <a href=\"#comment-221090499\" class=\"permalink\"><time datetime=\"2007-01-03T23:32:42\">2007-01-03T23:32:42</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Not sure, but that's a great idea! The bookmarklets that load remote scripts and are therefore always up to date IMO are genius... this simply adds some depth to them I guess... and takes advantage of the Firefox UI.</p>\r\n\r\n<p>Would you be able to execute Javascript loaded from feeds that aren't top level locations? That seems like a security issue, no?</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221090501\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.robinsonhouse.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=04dbf0ad0e3154fad1b02345d8668b72&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.robinsonhouse.com/\">James Robinson, III</a>\r\n                </div>\r\n                <a href=\"#comment-221090501\" class=\"permalink\"><time datetime=\"2007-01-04T01:34:56\">2007-01-04T01:34:56</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Haven't tried it in FF 2.0.0.1, but older versions filtered out bookmarklets from the feed due to the JS.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221090502\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://db79.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d527b871fc097b317f7993bdac0d349e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://db79.com\">Shawn Medero</a>\r\n                </div>\r\n                <a href=\"#comment-221090502\" class=\"permalink\"><time datetime=\"2007-01-04T05:03:17\">2007-01-04T05:03:17</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>James is right about Firefox - I wanted to have a feed of bookmarklets as a live bookmark that people at work would subscribe to for a certain project but Firefox 1.x filtered out any Javascript. Going back to unstable Firefox (it worked up until 0.9 or something) didn't seem like a great idea so I canned it. Kinda stinks because it would be really useful for internal usage where security shouldn't be an issue.</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/01/03/rss-feeds-of-bookmarklets"
  },
  {
    "comments_archived": true,
    "date": "2007-01-02T21:37:48.000Z",
    "layout": "post",
    "tags": [
      "metablogging",
      "webdev",
      "aggregators",
      "rss",
      "software",
      "osx"
    ],
    "title": "Vienna is now my weapon of choice for feeds",
    "wordpress_id": 1031,
    "wordpress_slug": "vienna-is-now-my-weapon-of-choice-for-feeds",
    "wordpress_url": "http://decafbad.com/blog/2007/01/02/vienna-is-now-my-weapon-of-choice-for-feeds",
    "year": "2007",
    "month": "01",
    "day": "02",
    "isDir": false,
    "slug": "vienna-is-now-my-weapon-of-choice-for-feeds",
    "postName": "2007-01-02-vienna-is-now-my-weapon-of-choice-for-feeds",
    "html": "<p>In the last few days, I&#39;ve switched news aggregators again - this time to <a href=\"http://www.opencommunity.co.uk/vienna2.php\">Vienna</a>.</p>\n<p>I&#39;ve got a <a href=\"http://decafbad.com/blog/2006/08/18/good-gregarius\">long</a>, <a href=\"http://decafbad.com/blog/2006/02/12/further-work-on-decafbadnewsriver\">long</a>, <a href=\"http://decafbad.com/blog/2005/10/05/feedspool-is-progressing-nicely\">long</a> <a href=\"http://decafbad.com/blog/2004/08/05/introducing-dbagg3-an-atom-powered-clientserver-aggregator\">history</a> of doing this - partially because of my <a href=\"http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\">serial enthusiasm</a>, and partially because none of the aggregators I&#39;ve used so far have satisfied all of my itches.  Some tie up my laptop in terms of memory and CPU, some aren&#39;t fast enough UI-wise to help me really blaze through skimming, and some aren&#39;t flexible enough for me to tweak to my particular liking.</p>\n<p>At this point, though, <a href=\"http://www.opencommunity.co.uk/vienna2.php\">Vienna</a> comes really close to what I&#39;ve been wanting for years.  It&#39;s open source (<a href=\"http://vienna-rss.svn.sourceforge.net/svnroot/vienna-rss/trunk/2.1.0/\">check it out!</a>); uses WebKit to offer a <a href=\"http://www.opencommunity.co.uk/vienna_styles.php\">theme-able</a> feed item display (<a href=\"http://decafbad.com/blog/2004/02/12/colloquy-irc\">hello Colloquy!</a>); and uses SQLite 3 for persistence (<a href=\"http://vienna-rss.sourceforge.net/public/DatabaseSchema.pdf\">with schema documentation!</a>).  Out of the box, it&#39;s a pretty nice app, but it was even nicer when I started poking under the hood.  I&#39;ve even <a href=\"http://sourceforge.net/mailarchive/forum.php?thread_id=31310885&amp;forum_id=48723\">submitted my first small patch</a>, which got accepted into the codebase.</p>\n<p>When last I tried <a href=\"http://www.opencommunity.co.uk/vienna2.php\">Vienna</a>, it was on my poor old PowerBook G4 12&quot; 867Mhz and it was a somewhat rough and bad tasting experience.  At the time, <a href=\"http://www.newsgator.com/NGOLProduct.aspx?ProdID=NetNewsWire\">NetNewsWire</a> was my tool of choice, and <a href=\"http://www.opencommunity.co.uk/vienna2.php\">Vienna</a> was lacking some features - like, say, a user-sortable list of subscription folders and feeds.  It also thrashed a lot and generally made me Force Quit it and move on.  But now, on my new-ish MacBook Pro, the performance is stellar with my set of 500+ feeds and my few showstopper missing features are no longer missing.  </p>\n<p>Now, it seems like <a href=\"http://www.newsgator.com/NGOLProduct.aspx?ProdID=NetNewsWire\">NetNewsWire</a> is the app that thrashes for me and gets a Force Quit.  I need to try <a href=\"http://www.newsgator.com/NGOLProduct.aspx?ProdID=NetNewsWire\">NNW</a> a bit more and figure out if it&#39;s just my initial import of subscriptions that drags things down - but <a href=\"http://www.opencommunity.co.uk/vienna2.php\">Vienna</a>&#39;s got me now.  It&#39;s catching up mightily fast with the feature list of NNW.  And, nothing beats open source software for tossing in a few tweaks to things that are just <em>not quite</em> doing what I&#39;d like.</p>\n<p>Again, since I&#39;m a <a href=\"http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\">serial enthusiast</a>, I have no idea if I&#39;ll be a regular contributor of patches to <a href=\"http://www.opencommunity.co.uk/vienna2.php\">Vienna</a> or even offer any commitment to the project - but I&#39;m definitely happy with it at the moment.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221085597\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ab21890e84fd31ff0d651d77bc82d118&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.net\">Craig</a>\n</div>\n<a href=\"#comment-221085597\" class=\"permalink\"><time datetime=\"2007-01-02T22:20:49\">2007-01-02T22:20:49</time></a>\n</div>\n<div class=\"content\"><p>Not sure if you care much for web-based aggregators, but ReBlog is my current favorite. I prefer the web-based aggregators because it allows me to have the same feed list between home and work... er, I mean my other home. \nhttp://www.reblog.org/\nHope this helps!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085598\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://monkey.org/~jose/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e89957a6d99c3951e3944fff6fa94cda&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://monkey.org/~jose/\">jose</a>\n</div>\n<a href=\"#comment-221085598\" class=\"permalink\"><time datetime=\"2007-01-03T01:36:43\">2007-01-03T01:36:43</time></a>\n</div>\n<div class=\"content\"><p>hi les</p>\n<p>i had used vienna before, it has more features than NNW that i like (IIRC it had flagging etc), but it had just lousy performance. it consumed gobs of memory and CPU and invariably fell apart under my feed load (over 100 feeds). </p>\n<p>i've tried probably a half dozen RSS readers on the Mac and they all stink. i miss RSS Bandit for Windows, which had all of the features i like but sadly runs on windows (which i don't use routinely). :-/</p>\n<p>hope all is well.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085600\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221085600\" class=\"permalink\"><time datetime=\"2007-01-03T03:54:01\">2007-01-03T03:54:01</time></a>\n</div>\n<div class=\"content\"><p>@Craig:  I have tried using BlogLines and then Gregarius...  ReBlog i've used before, too, but actually as a sort of newsdesk for a team at work - they skimmed through news stories and flagged items for republishing, which our CMS then plucked out of the outgoing ReBlog RSS feed.  Nice aggregator.  But, for me, nothing beats a desktop aggregator for swift skimming speed.  For what it's worth, the Vienna team is working on BlogLines integration.</p>\n<p>@jose: Not sure when you tried Vienna last - it seems to have improved markedly, though that might just be my mileage with the MacBook Pro now.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085601\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://mike.teczno.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e3b46099c3fd3844c4539b27f143fd97&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://mike.teczno.com\">Michal Migurski</a>\n</div>\n<a href=\"#comment-221085601\" class=\"permalink\"><time datetime=\"2007-01-03T08:17:14\">2007-01-03T08:17:14</time></a>\n</div>\n<div class=\"content\"><p>I almost feel bad for wanting to switch. =)</p>\n<p>Vienna is <em>really good</em>.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085602\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://brian.cors.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7b3073e125f3ac8f09130950ef5d7790&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://brian.cors.org\">brian cors</a>\n</div>\n<a href=\"#comment-221085602\" class=\"permalink\"><time datetime=\"2007-01-03T16:45:29\">2007-01-03T16:45:29</time></a>\n</div>\n<div class=\"content\"><p>I checked out Vienna today a bit, and it's mucho nice.</p>\n<p>However, the one thing that I use the most on NNW is the ability to sync to NewsGator.  I use that on my cell to read feeds when I am out and about, and not at the desk.  And that setup is particularly nice because it syncs history between NewsGator and NNW, so I dont end up reading things again that I have already read.</p>\n<p>I'll definitely look at this as a freeware feed aggregator to use at work though, on our workstations.  I need to get a decent, easy to use one for people here to learn about RSS.  This might be the ticket.  Thanks for pointing it out!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085603\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://yendi.livejournal.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8fd5f20d94b45e9392dc1d9264e641df&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://yendi.livejournal.com\">Adam Lipkin</a>\n</div>\n<a href=\"#comment-221085603\" class=\"permalink\"><time datetime=\"2007-01-03T23:35:34\">2007-01-03T23:35:34</time></a>\n</div>\n<div class=\"content\"><p>I've been a complete Google Reader addict for the last two months (although I also suffer from Serial Enthusiasm). It seems to toe the line nicely between web-based reader and true app, and combined with Firefox 2.0's nice handling of tabs and links (closing an article I head to from Google Read will pop me back to the Reader tab), it's integrated pretty seamlessly into my browsing.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085605\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://runmystic.jankowskis.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4e69f0a0b3908b8681b1e1b0e05ae067&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://runmystic.jankowskis.net\">jank</a>\n</div>\n<a href=\"#comment-221085605\" class=\"permalink\"><time datetime=\"2007-01-08T21:57:02\">2007-01-08T21:57:02</time></a>\n</div>\n<div class=\"content\"><p>I'm checking out Vienna, too, but, like Brian, having the ability to sync with a non-mac client (preferably a web-based one) is the biggest thing that NNW has going for it.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085607\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221085607\" class=\"permalink\"><time datetime=\"2007-01-08T22:42:53\">2007-01-08T22:42:53</time></a>\n</div>\n<div class=\"content\"><p>Ironically, I've never spent much time with an aggregator that syncs with any other client - web-based or not.  So, that's a feature of NNW I've never really appreciated or had much use for.  I tend to have a laptop with me at all times, so my aggregator tends to go with me.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085608\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.aa3xyz2g.info\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5e2898db630df4353fae47a90f35add5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.aa3xyz2g.info\">Peter Miller</a>\n</div>\n<a href=\"#comment-221085608\" class=\"permalink\"><time datetime=\"2007-01-11T08:24:55\">2007-01-11T08:24:55</time></a>\n</div>\n<div class=\"content\"><p>Thanks for opening my eyes to Vienna. I was using Bloglines for the longest time and never knew what I was missing!</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "In the last few days, I've switched news aggregators again - this time to [Vienna][].\r\n\r\nI've got a [long][l1], [long][l2], [long][l3] [history][l4] of doing this - partially because of my [serial enthusiasm][se], and partially because none of the aggregators I've used so far have satisfied all of my itches.  Some tie up my laptop in terms of memory and CPU, some aren't fast enough UI-wise to help me really blaze through skimming, and some aren't flexible enough for me to tweak to my particular liking.\r\n\r\nAt this point, though, [Vienna][] comes really close to what I've been wanting for years.  It's open source ([check it out!][vsvn]); uses WebKit to offer a [theme-able][vt] feed item display ([hello Colloquy!][wk]); and uses SQLite 3 for persistence ([with schema documentation!][vdb]).  Out of the box, it's a pretty nice app, but it was even nicer when I started poking under the hood.  I've even [submitted my first small patch][vpatch], which got accepted into the codebase.\r\n\r\nWhen last I tried [Vienna][], it was on my poor old PowerBook G4 12\" 867Mhz and it was a somewhat rough and bad tasting experience.  At the time, [NetNewsWire][] was my tool of choice, and [Vienna][] was lacking some features - like, say, a user-sortable list of subscription folders and feeds.  It also thrashed a lot and generally made me Force Quit it and move on.  But now, on my new-ish MacBook Pro, the performance is stellar with my set of 500+ feeds and my few showstopper missing features are no longer missing.  \r\n\r\nNow, it seems like [NetNewsWire][] is the app that thrashes for me and gets a Force Quit.  I need to try [NNW][NetNewsWire] a bit more and figure out if it's just my initial import of subscriptions that drags things down - but [Vienna][]'s got me now.  It's catching up mightily fast with the feature list of NNW.  And, nothing beats open source software for tossing in a few tweaks to things that are just *not quite* doing what I'd like.\r\n\r\nAgain, since I'm a [serial enthusiast][se], I have no idea if I'll be a regular contributor of patches to [Vienna][] or even offer any commitment to the project - but I'm definitely happy with it at the moment.\r\n\r\n[vpatch]: http://sourceforge.net/mailarchive/forum.php?thread_id=31310885&forum_id=48723\r\n[vt]: http://www.opencommunity.co.uk/vienna_styles.php\r\n[vsvn]: http://vienna-rss.svn.sourceforge.net/svnroot/vienna-rss/trunk/2.1.0/\r\n[vdb]: http://vienna-rss.sourceforge.net/public/DatabaseSchema.pdf\r\n[wk]: http://decafbad.com/blog/2004/02/12/colloquy-irc\r\n[Vienna]: http://www.opencommunity.co.uk/vienna2.php\r\n[NetNewsWire]: http://www.newsgator.com/NGOLProduct.aspx?ProdID=NetNewsWire\r\n[l1]: http://decafbad.com/blog/2006/08/18/good-gregarius\r\n[l2]: http://decafbad.com/blog/2006/02/12/further-work-on-decafbadnewsriver\r\n[l3]: http://decafbad.com/blog/2005/10/05/feedspool-is-progressing-nicely\r\n[l4]: http://decafbad.com/blog/2004/08/05/introducing-dbagg3-an-atom-powered-clientserver-aggregator\r\n[se]: http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\r\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221085597\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ab21890e84fd31ff0d651d77bc82d118&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.net\">Craig</a>\n                </div>\n                <a href=\"#comment-221085597\" class=\"permalink\"><time datetime=\"2007-01-02T22:20:49\">2007-01-02T22:20:49</time></a>\n            </div>\n            <div class=\"content\"><p>Not sure if you care much for web-based aggregators, but ReBlog is my current favorite. I prefer the web-based aggregators because it allows me to have the same feed list between home and work... er, I mean my other home. \nhttp://www.reblog.org/\nHope this helps!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085598\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://monkey.org/~jose/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e89957a6d99c3951e3944fff6fa94cda&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://monkey.org/~jose/\">jose</a>\n                </div>\n                <a href=\"#comment-221085598\" class=\"permalink\"><time datetime=\"2007-01-03T01:36:43\">2007-01-03T01:36:43</time></a>\n            </div>\n            <div class=\"content\"><p>hi les</p>\n\n<p>i had used vienna before, it has more features than NNW that i like (IIRC it had flagging etc), but it had just lousy performance. it consumed gobs of memory and CPU and invariably fell apart under my feed load (over 100 feeds). </p>\n\n<p>i've tried probably a half dozen RSS readers on the Mac and they all stink. i miss RSS Bandit for Windows, which had all of the features i like but sadly runs on windows (which i don't use routinely). :-/</p>\n\n<p>hope all is well.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085600\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221085600\" class=\"permalink\"><time datetime=\"2007-01-03T03:54:01\">2007-01-03T03:54:01</time></a>\n            </div>\n            <div class=\"content\"><p>@Craig:  I have tried using BlogLines and then Gregarius...  ReBlog i've used before, too, but actually as a sort of newsdesk for a team at work - they skimmed through news stories and flagged items for republishing, which our CMS then plucked out of the outgoing ReBlog RSS feed.  Nice aggregator.  But, for me, nothing beats a desktop aggregator for swift skimming speed.  For what it's worth, the Vienna team is working on BlogLines integration.</p>\n\n<p>@jose: Not sure when you tried Vienna last - it seems to have improved markedly, though that might just be my mileage with the MacBook Pro now.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085601\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://mike.teczno.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e3b46099c3fd3844c4539b27f143fd97&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://mike.teczno.com\">Michal Migurski</a>\n                </div>\n                <a href=\"#comment-221085601\" class=\"permalink\"><time datetime=\"2007-01-03T08:17:14\">2007-01-03T08:17:14</time></a>\n            </div>\n            <div class=\"content\"><p>I almost feel bad for wanting to switch. =)</p>\n\n<p>Vienna is <em>really good</em>.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085602\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://brian.cors.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7b3073e125f3ac8f09130950ef5d7790&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://brian.cors.org\">brian cors</a>\n                </div>\n                <a href=\"#comment-221085602\" class=\"permalink\"><time datetime=\"2007-01-03T16:45:29\">2007-01-03T16:45:29</time></a>\n            </div>\n            <div class=\"content\"><p>I checked out Vienna today a bit, and it's mucho nice.</p>\n\n<p>However, the one thing that I use the most on NNW is the ability to sync to NewsGator.  I use that on my cell to read feeds when I am out and about, and not at the desk.  And that setup is particularly nice because it syncs history between NewsGator and NNW, so I dont end up reading things again that I have already read.</p>\n\n<p>I'll definitely look at this as a freeware feed aggregator to use at work though, on our workstations.  I need to get a decent, easy to use one for people here to learn about RSS.  This might be the ticket.  Thanks for pointing it out!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085603\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://yendi.livejournal.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8fd5f20d94b45e9392dc1d9264e641df&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://yendi.livejournal.com\">Adam Lipkin</a>\n                </div>\n                <a href=\"#comment-221085603\" class=\"permalink\"><time datetime=\"2007-01-03T23:35:34\">2007-01-03T23:35:34</time></a>\n            </div>\n            <div class=\"content\"><p>I've been a complete Google Reader addict for the last two months (although I also suffer from Serial Enthusiasm). It seems to toe the line nicely between web-based reader and true app, and combined with Firefox 2.0's nice handling of tabs and links (closing an article I head to from Google Read will pop me back to the Reader tab), it's integrated pretty seamlessly into my browsing.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085605\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://runmystic.jankowskis.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4e69f0a0b3908b8681b1e1b0e05ae067&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://runmystic.jankowskis.net\">jank</a>\n                </div>\n                <a href=\"#comment-221085605\" class=\"permalink\"><time datetime=\"2007-01-08T21:57:02\">2007-01-08T21:57:02</time></a>\n            </div>\n            <div class=\"content\"><p>I'm checking out Vienna, too, but, like Brian, having the ability to sync with a non-mac client (preferably a web-based one) is the biggest thing that NNW has going for it.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085607\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221085607\" class=\"permalink\"><time datetime=\"2007-01-08T22:42:53\">2007-01-08T22:42:53</time></a>\n            </div>\n            <div class=\"content\"><p>Ironically, I've never spent much time with an aggregator that syncs with any other client - web-based or not.  So, that's a feature of NNW I've never really appreciated or had much use for.  I tend to have a laptop with me at all times, so my aggregator tends to go with me.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085608\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.aa3xyz2g.info\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5e2898db630df4353fae47a90f35add5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.aa3xyz2g.info\">Peter Miller</a>\n                </div>\n                <a href=\"#comment-221085608\" class=\"permalink\"><time datetime=\"2007-01-11T08:24:55\">2007-01-11T08:24:55</time></a>\n            </div>\n            <div class=\"content\"><p>Thanks for opening my eyes to Vienna. I was using Bloglines for the longest time and never knew what I was missing!</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/01/02/vienna-is-now-my-weapon-of-choice-for-feeds"
  },
  {
    "comments_archived": true,
    "date": "2006-12-21T02:55:45.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "json",
      "webdev",
      "webservices",
      "javascript",
      "ws"
    ],
    "title": "do not taunt happy fun JSON",
    "wordpress_id": 1029,
    "wordpress_slug": "do-not-taunt-happy-fun-json",
    "wordpress_url": "http://decafbad.com/blog/2006/12/20/do-not-taunt-happy-fun-json",
    "year": "2006",
    "month": "12",
    "day": "20",
    "isDir": false,
    "slug": "do-not-taunt-happy-fun-json",
    "postName": "2006-12-20-do-not-taunt-happy-fun-json",
    "html": "<p>Allow me to repeat myself somewhat and clarify my general opinion of JSON and its use in cross-domain browser scripting:</p>\n<p>Happy Fun JSON is not really an API. Happy Fun JSON is not a bold declaration of side-taking in the grand war of web service specifications. Do not base business models on Happy Fun JSON. Caution: Happy Fun JSON may suddenly accelerate to dangerous speeds or stop altogether. Happy Fun JSON contains a liquid core, which, if exposed due to rupture, should not be touched, inhaled, or looked at. Ingredients of Happy Fun JSON include an unknown glowing substance which fell to Earth, presumably from outer space. If Happy Fun JSON begins to smoke, get away immediately. Seek shelter and cover head.</p>\n<p>Do not taunt Happy Fun JSON.</p>\n<p>Having said all that?  Happy Fun JSON is pretty fun to throw around.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087880\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://gfmorris.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=505e3b39dcea29b3ded74a5494c493eb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://gfmorris.net/\">Geof F. Morris</a>\n</div>\n<a href=\"#comment-221087880\" class=\"permalink\"><time datetime=\"2006-12-21T03:34:19\">2006-12-21T03:34:19</time></a>\n</div>\n<div class=\"content\"><p>Did it hurt when Happy Fun JSON fell from Heaven?  ;)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087884\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://franklinmint.fm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b9ed774661a22ff8797a1e0e24f0baf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://franklinmint.fm\">Robert Sayre</a>\n</div>\n<a href=\"#comment-221087884\" class=\"permalink\"><time datetime=\"2006-12-21T03:55:47\">2006-12-21T03:55:47</time></a>\n</div>\n<div class=\"content\"><p>Obviously, the new del.icio.us JSON url feed is crushing blow against XML Web Enterprise Services Declarative Net Neutrality.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087886\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c82c72ca4f9eab33a80a7bd839c1ae0b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">jamesv</a>\n</div>\n<a href=\"#comment-221087886\" class=\"permalink\"><time datetime=\"2006-12-21T15:14:24\">2006-12-21T15:14:24</time></a>\n</div>\n<div class=\"content\"><p>I only wish you could pass Happy Fun JSON into Flash via FlashVars in IE. FF and Safari seem to have no problems with it.</p>\n<p>It would make authoring a richer content version of sIFR much, much easier.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087889\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.litfuel.net/plush\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=048d90bde20830d1e4fdec860321a5a6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.litfuel.net/plush\">Jim Plush</a>\n</div>\n<a href=\"#comment-221087889\" class=\"permalink\"><time datetime=\"2006-12-22T19:22:48\">2006-12-22T19:22:48</time></a>\n</div>\n<div class=\"content\"><p>You should be banned from talking about JSON if you think you have to choose one or the other. A place for everything and everything in it's place.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087893\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://dannyayers.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7028f422ca6da0180de6c9d922a3228f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://dannyayers.com\">Danny</a>\n</div>\n<a href=\"#comment-221087893\" class=\"permalink\"><time datetime=\"2006-12-31T18:11:19\">2006-12-31T18:11:19</time></a>\n</div>\n<div class=\"content\"><p>All this lynch talk - I just got throttled! </p>\n<p>Running the script <a href=\"http://dannyayers.com/2006/12/29/del\" rel=\"nofollow\">here</a> on a series of URIs got me the 999 error (no sure how many had run). There's a 2 second pause between calls, I thought that would be polite enough. Still throttled now, maybe 10 mins later. Any suggestions for what would prevent throttling? How long it needs to recover?</p>\n<p>btw, I think Happy Fun JSON is great, and not unreasonable for interop. But what isn't so good for interop is inventing a new HTTP code when there's <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4\" rel=\"nofollow\">503 Service Unavailable</a> (and a Retry-After header would be handy).</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087896\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.alleged.org.uk/pdc/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5b7d6aea7a0ef515700985bb17cdc5a0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.alleged.org.uk/pdc/\">Damian Cugley</a>\n</div>\n<a href=\"#comment-221087896\" class=\"permalink\"><time datetime=\"2007-01-22T14:16:27\">2007-01-22T14:16:27</time></a>\n</div>\n<div class=\"content\"><p>@jamesv: The first thing I did with JSON at work was pass it in to a Flash movie via FlashVars. This used a JSON decode written in ActionScript grabbed from JSON.org, plus a JSON encoder written in C# (it did not take long to write because I  did not attempt to serialize arbitrary objects).  Some gratuitous URL-encoding was also involved. Compared with passing the same data structure via URL-encoded XML to be picked apart by ActionScript's DOM support, it was easy and much more like fun.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Allow me to repeat myself somewhat and clarify my general opinion of JSON and its use in cross-domain browser scripting:\r\n\r\nHappy Fun JSON is not really an API. Happy Fun JSON is not a bold declaration of side-taking in the grand war of web service specifications. Do not base business models on Happy Fun JSON. Caution: Happy Fun JSON may suddenly accelerate to dangerous speeds or stop altogether. Happy Fun JSON contains a liquid core, which, if exposed due to rupture, should not be touched, inhaled, or looked at. Ingredients of Happy Fun JSON include an unknown glowing substance which fell to Earth, presumably from outer space. If Happy Fun JSON begins to smoke, get away immediately. Seek shelter and cover head.\r\n\r\nDo not taunt Happy Fun JSON.\r\n\r\nHaving said all that?  Happy Fun JSON is pretty fun to throw around.\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087880\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://gfmorris.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=505e3b39dcea29b3ded74a5494c493eb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://gfmorris.net/\">Geof F. Morris</a>\n                </div>\n                <a href=\"#comment-221087880\" class=\"permalink\"><time datetime=\"2006-12-21T03:34:19\">2006-12-21T03:34:19</time></a>\n            </div>\n            <div class=\"content\"><p>Did it hurt when Happy Fun JSON fell from Heaven?  ;)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087884\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://franklinmint.fm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b9ed774661a22ff8797a1e0e24f0baf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://franklinmint.fm\">Robert Sayre</a>\n                </div>\n                <a href=\"#comment-221087884\" class=\"permalink\"><time datetime=\"2006-12-21T03:55:47\">2006-12-21T03:55:47</time></a>\n            </div>\n            <div class=\"content\"><p>Obviously, the new del.icio.us JSON url feed is crushing blow against XML Web Enterprise Services Declarative Net Neutrality.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087886\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c82c72ca4f9eab33a80a7bd839c1ae0b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">jamesv</a>\n                </div>\n                <a href=\"#comment-221087886\" class=\"permalink\"><time datetime=\"2006-12-21T15:14:24\">2006-12-21T15:14:24</time></a>\n            </div>\n            <div class=\"content\"><p>I only wish you could pass Happy Fun JSON into Flash via FlashVars in IE. FF and Safari seem to have no problems with it.</p>\n\n<p>It would make authoring a richer content version of sIFR much, much easier.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087889\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.litfuel.net/plush\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=048d90bde20830d1e4fdec860321a5a6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.litfuel.net/plush\">Jim Plush</a>\n                </div>\n                <a href=\"#comment-221087889\" class=\"permalink\"><time datetime=\"2006-12-22T19:22:48\">2006-12-22T19:22:48</time></a>\n            </div>\n            <div class=\"content\"><p>You should be banned from talking about JSON if you think you have to choose one or the other. A place for everything and everything in it's place.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087893\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://dannyayers.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7028f422ca6da0180de6c9d922a3228f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://dannyayers.com\">Danny</a>\n                </div>\n                <a href=\"#comment-221087893\" class=\"permalink\"><time datetime=\"2006-12-31T18:11:19\">2006-12-31T18:11:19</time></a>\n            </div>\n            <div class=\"content\"><p>All this lynch talk - I just got throttled! </p>\n\n<p>Running the script <a href=\"http://dannyayers.com/2006/12/29/del\" rel=\"nofollow\">here</a> on a series of URIs got me the 999 error (no sure how many had run). There's a 2 second pause between calls, I thought that would be polite enough. Still throttled now, maybe 10 mins later. Any suggestions for what would prevent throttling? How long it needs to recover?</p>\n\n<p>btw, I think Happy Fun JSON is great, and not unreasonable for interop. But what isn't so good for interop is inventing a new HTTP code when there's <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4\" rel=\"nofollow\">503 Service Unavailable</a> (and a Retry-After header would be handy).</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087896\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.alleged.org.uk/pdc/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5b7d6aea7a0ef515700985bb17cdc5a0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.alleged.org.uk/pdc/\">Damian Cugley</a>\n                </div>\n                <a href=\"#comment-221087896\" class=\"permalink\"><time datetime=\"2007-01-22T14:16:27\">2007-01-22T14:16:27</time></a>\n            </div>\n            <div class=\"content\"><p>@jamesv: The first thing I did with JSON at work was pass it in to a Flash movie via FlashVars. This used a JSON decode written in ActionScript grabbed from JSON.org, plus a JSON encoder written in C# (it did not take long to write because I  did not attempt to serialize arbitrary objects).  Some gratuitous URL-encoding was also involved. Compared with passing the same data structure via URL-encoded XML to be picked apart by ActionScript's DOM support, it was easy and much more like fun.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/12/20/do-not-taunt-happy-fun-json"
  },
  {
    "comments_archived": true,
    "date": "2006-12-21T02:01:38.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "delicious",
      "json",
      "webdev",
      "webservices",
      "google",
      "soap"
    ],
    "title": "correlation is not causation",
    "wordpress_id": 1028,
    "wordpress_slug": "correlation-is-not-causation",
    "wordpress_url": "http://decafbad.com/blog/2006/12/20/correlation-is-not-causation",
    "year": "2006",
    "month": "12",
    "day": "20",
    "isDir": false,
    "slug": "correlation-is-not-causation",
    "postName": "2006-12-20-correlation-is-not-causation",
    "html": "<p>By the by:  Correlating the <a href=\"http://del.icio.us/help/json/url\">new del.icio.us JSON URL feed</a> with <a href=\"http://google-code-updates.blogspot.com/2006/12/beyond-soap-search-api.html\">Google&#39;s recent deprecation of the SOAP Search API</a> is about as effective as noticing how often the clock reads 12:34 when you just happen to be looking at it.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090761\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.joegrossberg.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=f288a8afe5302a16a366d5e9d34f2fec&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.joegrossberg.com\">Joe Grossberg</a>\n</div>\n<a href=\"#comment-221090761\" class=\"permalink\"><time datetime=\"2006-12-21T13:10:16\">2006-12-21T13:10:16</time></a>\n</div>\n<div class=\"content\"><p>Because ... you say so? :)</p>\n<p>Also, I think you misuse the word \"correlation\".</p>\n<p>And I think there is a correlation -- both are indicative of a trend in \"web services\" today.</p>\n<p>JSON and YAML are getting more popular in that arena and XML (especially SOAP) is something that a lot of programmers dislike workign with.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "By the by:  Correlating the [new del.icio.us JSON URL feed][ju] with [Google's recent deprecation of the SOAP Search API][dep] is about as effective as noticing how often the clock reads 12:34 when you just happen to be looking at it.\r\n\r\n[ju]: http://del.icio.us/help/json/url\r\n[dep]: http://google-code-updates.blogspot.com/2006/12/beyond-soap-search-api.html\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221090761\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.joegrossberg.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=f288a8afe5302a16a366d5e9d34f2fec&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.joegrossberg.com\">Joe Grossberg</a>\n                </div>\n                <a href=\"#comment-221090761\" class=\"permalink\"><time datetime=\"2006-12-21T13:10:16\">2006-12-21T13:10:16</time></a>\n            </div>\n            <div class=\"content\"><p>Because ... you say so? :)</p>\n\n<p>Also, I think you misuse the word \"correlation\".</p>\n\n<p>And I think there is a correlation -- both are indicative of a trend in \"web services\" today.</p>\n\n<p>JSON and YAML are getting more popular in that arena and XML (especially SOAP) is something that a lot of programmers dislike workign with.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/12/20/correlation-is-not-causation"
  },
  {
    "comments_archived": true,
    "date": "2006-12-21T01:19:56.000Z",
    "layout": "post",
    "tags": [
      "metablogging",
      "delicious",
      "json",
      "webdev",
      "winer"
    ],
    "title": "Tagometers and Travesties",
    "wordpress_id": 1027,
    "wordpress_slug": "tagometers-and-travesties",
    "wordpress_url": "http://decafbad.com/blog/2006/12/20/tagometers-and-travesties",
    "year": "2006",
    "month": "12",
    "day": "20",
    "isDir": false,
    "slug": "tagometers-and-travesties",
    "postName": "2006-12-20-tagometers-and-travesties",
    "html": "<p>You know you&#39;ve truly arrived in Silicon Valley when <a href=\"http://blog.del.icio.us/blog/2006/12/the_new_and_tag.html\">the darling new feature you just helped launch</a> on <a href=\"http://del.icio.us/\">a Web 2.0 site</a> gets shredded in <a href=\"http://www.scripting.com/2006/12/20.html#godBlessTheReinventers\">a rant by Dave Winer</a>.  :)  </p>\n<p>My day, having started with me in a foul mood, has been made.  Pre-launch, the tooth marks in my tongue have gotten deep as I watch the <a href=\"http://scripting.wordpress.com/2006/12/20/scripting-news-for-12202006/\">comments</a> pile up.  It&#39;s exciting to have so many people debating something you&#39;ve made.  (Update:  Seriously.  I&#39;m in a better mood now.  It&#39;s made me laugh.)</p>\n<p>Actually, it wasn&#39;t the <a href=\"http://blog.del.icio.us/blog/2006/12/the_new_and_tag.html\">feature itself</a> that got shredded, so much as the <a href=\"http://del.icio.us/help/json/url\">new JSON data feed</a> revealed before the <a href=\"http://blog.del.icio.us/blog/2006/12/the_new_and_tag.html\">intended star of the show</a> made it on-stage, by way of <a href=\"http://developer.yahoo.net/blog/archives/2006/12/preview_of_the.html\">a screencast preview on Y!DN by Matt McAlister</a> and <a href=\"http://www.niallkennedy.com/blog/archives/2006/12/delicious-url-api.html\">an amplification by Niall Kennedy</a>.  </p>\n<p>The feed itself is mainly intended to power our new <a href=\"http://del.icio.us/help/tagometer\">Tagometer</a> page widget include thingy.  Beyond that, leaving the feed decoupled from the include itself made sense to me, both for our own flexibility&#39;s sake and as a nod toward our mashup friends in the blogosphere and lazyweb.</p>\n<p>You see, I like JSON.  It was convenient in this use case of creating a remote blog widget fed by cross-domain sourced data.  I, personally, didn&#39;t even have to <a href=\"http://www.scripting.com/2006/12/20.html#godBlessTheReinventers\">reinvent anything</a> that wasn&#39;t already implemented in <a href=\"http://json.org/\">assorted off-the-web tools</a>.  JSON worked for this purpose - it might not work for your purpose.  <strike>If it doesn&#39;t, please accept my insincere apology, but yours wasn&#39;t my primary goal.  Attempts to string me up for this travesty will be met with giggles and pointing.</strike>  (Update:  I realize I&#39;m not the to-be-strung-up party responsible for the JSON travesty - I just couldn&#39;t resist being a smart ass for its own sake.  I really do giggle and point a lot.  My <em>actual</em> apologies for that.)</p>\n<p>It&#39;s funny, laugh.</p>\n<p><a href=\"http://del.icio.us/help/json/url\">JSON URL feed</a> is not really an API.  <a href=\"http://del.icio.us/help/json/url\">JSON URL feed</a> is not a bold declaration of side-taking in the grand war of web service specifications.  Do not base business models on <a href=\"http://del.icio.us/help/json/url\">JSON URL feed</a>.  Caution: <a href=\"http://del.icio.us/help/json/url\">JSON URL feed</a> may suddenly accelerate to dangerous speeds or stop altogether.  <a href=\"http://del.icio.us/help/json/url\">JSON URL feed</a> contains a liquid core, which, if exposed due to rupture, should not be touched, inhaled, or looked at.  Ingredients of <a href=\"http://del.icio.us/help/json/url\">JSON URL feed</a> include an unknown glowing substance which fell to Earth, presumably from outer space.  If <a href=\"http://del.icio.us/help/json/url\">JSON URL feed</a> begins to smoke, get away immediately. Seek shelter and cover head.  </p>\n<p>Do not taunt <a href=\"http://del.icio.us/help/json/url\">JSON URL feed</a>.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090833\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.scripting.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2378b474e8eadf5da80e86c2bbc75a74&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.scripting.com/\">Dave Winer</a>\n</div>\n<a href=\"#comment-221090833\" class=\"permalink\"><time datetime=\"2006-12-21T02:00:51\">2006-12-21T02:00:51</time></a>\n</div>\n<div class=\"content\"><p>Not sure if I helped your mood or made it worse, but the rant wasn't about you. </p>\n<p>http://www.json.org/xml.html</p>\n<p>Tell me what you think of that bit of hyperbole. Someone there is trying to undermine a lot of work a lot of people did over a long period of time to get software to interoperate. When you say that's just my issue, you miss the point. It should be everyone's.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090834\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://gfmorris.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=505e3b39dcea29b3ded74a5494c493eb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://gfmorris.net/\">Geof F. Morris</a>\n</div>\n<a href=\"#comment-221090834\" class=\"permalink\"><time datetime=\"2006-12-21T02:28:32\">2006-12-21T02:28:32</time></a>\n</div>\n<div class=\"content\"><p>Aw, man.  It should've been \"Do not taunt happy JSON URL feed.\"</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090836\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221090836\" class=\"permalink\"><time datetime=\"2006-12-21T02:47:44\">2006-12-21T02:47:44</time></a>\n</div>\n<div class=\"content\"><p>Honestly, it brightened my mood.  The smiley was neither ironic nor sarcastic.  Something big I helped launch has been stirring an interesting discussion, however tangential my blame in the making.  </p>\n<p>Vanity and Carly Simon aside, I know I'm not the main perpetrator of JSON.  I just couldn't resist an opportunity to be a smart ass.  For that I have a <em>sincere</em> apology.  I should probably strike it or delete it now that the giddiness of a major launch and a lot of attention has subsided.</p>\n<p>But seriously, what I meant above is not that this is <em>your</em> issue, per se.  This post is really more directed at some comments on your blog post, in bulk.  </p>\n<p>Our particular intentions behind using JSON here do not necessarily map to anyone else's expectation from a web service or standards-driven perspective.  It seems like a lot of people are looking at this JSON data since its early release, divorced from it's main consumer:  The Tagometer JS include.  It works for that purpose - and incidentally might help others - but we're not working very hard to support other uses.</p>\n<p>Apropos of that, I don't particularly buy the hyperbole about JSON being XML's superior in the general case.  JSON's a brilliant hack, but it's got issues.  And seriously, if anyone thinks that adding and removing script tags on the fly in a browser DOM is the best overall way to go about things...  they should be strung up.  It just so happens that right now, it's the only way to do some things.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090837\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://bon.gs\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e8bc54082f8f4894f625bb229265b9bd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://bon.gs\">timb</a>\n</div>\n<a href=\"#comment-221090837\" class=\"permalink\"><time datetime=\"2006-12-21T11:22:52\">2006-12-21T11:22:52</time></a>\n</div>\n<div class=\"content\"><p>hooray, i'm glad to see the json url feed.</p>\n<p>however, i shouldn't have to generate the md5s of the urls i am interested in... i should just be able to give it the actual urls.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090838\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n</div>\n<a href=\"#comment-221090838\" class=\"permalink\"><time datetime=\"2006-12-30T02:28:08\">2006-12-30T02:28:08</time></a>\n</div>\n<div class=\"content\"><p>mmmmm, swilling the liquid core...!</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "You know you've truly arrived in Silicon Valley when [the darling new feature you just helped launch][ta] on [a Web 2.0 site][del] gets shredded in [a rant by Dave Winer][dw].  :)  \r\n\r\nMy day, having started with me in a foul mood, has been made.  Pre-launch, the tooth marks in my tongue have gotten deep as I watch the [comments][com] pile up.  It's exciting to have so many people debating something you've made.  (Update:  Seriously.  I'm in a better mood now.  It's made me laugh.)\r\n\r\nActually, it wasn't the [feature itself][ta] that got shredded, so much as the [new JSON data feed][jf] revealed before the [intended star of the show][ta] made it on-stage, by way of [a screencast preview on Y!DN by Matt McAlister][mm] and [an amplification by Niall Kennedy][nk].  \r\n\r\nThe feed itself is mainly intended to power our new [Tagometer][ta2] page widget include thingy.  Beyond that, leaving the feed decoupled from the include itself made sense to me, both for our own flexibility's sake and as a nod toward our mashup friends in the blogosphere and lazyweb.\r\n\r\nYou see, I like JSON.  It was convenient in this use case of creating a remote blog widget fed by cross-domain sourced data.  I, personally, didn't even have to [reinvent anything][dw] that wasn't already implemented in [assorted off-the-web tools][json].  JSON worked for this purpose - it might not work for your purpose.  <strike>If it doesn't, please accept my insincere apology, but yours wasn't my primary goal.  Attempts to string me up for this travesty will be met with giggles and pointing.</strike>  (Update:  I realize I'm not the to-be-strung-up party responsible for the JSON travesty - I just couldn't resist being a smart ass for its own sake.  I really do giggle and point a lot.  My *actual* apologies for that.)\r\n\r\nIt's funny, laugh.\r\n\r\n[JSON URL feed][jf] is not really an API.  [JSON URL feed][jf] is not a bold declaration of side-taking in the grand war of web service specifications.  Do not base business models on [JSON URL feed][jf].  Caution: [JSON URL feed][jf] may suddenly accelerate to dangerous speeds or stop altogether.  [JSON URL feed][jf] contains a liquid core, which, if exposed due to rupture, should not be touched, inhaled, or looked at.  Ingredients of [JSON URL feed][jf] include an unknown glowing substance which fell to Earth, presumably from outer space.  If [JSON URL feed][jf] begins to smoke, get away immediately. Seek shelter and cover head.  \r\n\r\nDo not taunt [JSON URL feed][jf].\r\n\r\n[com]: http://scripting.wordpress.com/2006/12/20/scripting-news-for-12202006/\r\n[json]: http://json.org/\r\n[mm]: http://developer.yahoo.net/blog/archives/2006/12/preview_of_the.html\r\n[nk]: http://www.niallkennedy.com/blog/archives/2006/12/delicious-url-api.html\r\n[ta2]: http://del.icio.us/help/tagometer\r\n[jf]: http://del.icio.us/help/json/url\r\n[del]: http://del.icio.us/\r\n[ta]: http://blog.del.icio.us/blog/2006/12/the_new_and_tag.html\r\n[dw]: http://www.scripting.com/2006/12/20.html#godBlessTheReinventers\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221090833\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.scripting.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2378b474e8eadf5da80e86c2bbc75a74&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.scripting.com/\">Dave Winer</a>\n                </div>\n                <a href=\"#comment-221090833\" class=\"permalink\"><time datetime=\"2006-12-21T02:00:51\">2006-12-21T02:00:51</time></a>\n            </div>\n            <div class=\"content\"><p>Not sure if I helped your mood or made it worse, but the rant wasn't about you. </p>\n\n<p>http://www.json.org/xml.html</p>\n\n<p>Tell me what you think of that bit of hyperbole. Someone there is trying to undermine a lot of work a lot of people did over a long period of time to get software to interoperate. When you say that's just my issue, you miss the point. It should be everyone's.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090834\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://gfmorris.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=505e3b39dcea29b3ded74a5494c493eb&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://gfmorris.net/\">Geof F. Morris</a>\n                </div>\n                <a href=\"#comment-221090834\" class=\"permalink\"><time datetime=\"2006-12-21T02:28:32\">2006-12-21T02:28:32</time></a>\n            </div>\n            <div class=\"content\"><p>Aw, man.  It should've been \"Do not taunt happy JSON URL feed.\"</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090836\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221090836\" class=\"permalink\"><time datetime=\"2006-12-21T02:47:44\">2006-12-21T02:47:44</time></a>\n            </div>\n            <div class=\"content\"><p>Honestly, it brightened my mood.  The smiley was neither ironic nor sarcastic.  Something big I helped launch has been stirring an interesting discussion, however tangential my blame in the making.  </p>\n\n<p>Vanity and Carly Simon aside, I know I'm not the main perpetrator of JSON.  I just couldn't resist an opportunity to be a smart ass.  For that I have a <em>sincere</em> apology.  I should probably strike it or delete it now that the giddiness of a major launch and a lot of attention has subsided.</p>\n\n<p>But seriously, what I meant above is not that this is <em>your</em> issue, per se.  This post is really more directed at some comments on your blog post, in bulk.  </p>\n\n<p>Our particular intentions behind using JSON here do not necessarily map to anyone else's expectation from a web service or standards-driven perspective.  It seems like a lot of people are looking at this JSON data since its early release, divorced from it's main consumer:  The Tagometer JS include.  It works for that purpose - and incidentally might help others - but we're not working very hard to support other uses.</p>\n\n<p>Apropos of that, I don't particularly buy the hyperbole about JSON being XML's superior in the general case.  JSON's a brilliant hack, but it's got issues.  And seriously, if anyone thinks that adding and removing script tags on the fly in a browser DOM is the best overall way to go about things...  they should be strung up.  It just so happens that right now, it's the only way to do some things.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090837\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://bon.gs\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e8bc54082f8f4894f625bb229265b9bd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://bon.gs\">timb</a>\n                </div>\n                <a href=\"#comment-221090837\" class=\"permalink\"><time datetime=\"2006-12-21T11:22:52\">2006-12-21T11:22:52</time></a>\n            </div>\n            <div class=\"content\"><p>hooray, i'm glad to see the json url feed.</p>\n\n<p>however, i shouldn't have to generate the md5s of the urls i am interested in... i should just be able to give it the actual urls.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090838\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\"><img src=\"http://disqus.com/api/users/avatars/jm3.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.jm3.net/\">John Manoogian III (jm3)</a>\n                </div>\n                <a href=\"#comment-221090838\" class=\"permalink\"><time datetime=\"2006-12-30T02:28:08\">2006-12-30T02:28:08</time></a>\n            </div>\n            <div class=\"content\"><p>mmmmm, swilling the liquid core...!</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/12/20/tagometers-and-travesties"
  },
  {
    "comments_archived": true,
    "date": "2006-12-19T16:21:40.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "firefox",
      "javascript",
      "dhtml",
      "xoxooutliner"
    ],
    "title": "drag and drop and the missing mouseup",
    "wordpress_id": 1026,
    "wordpress_slug": "drag-and-drop-and-the-missing-mouseup",
    "wordpress_url": "http://decafbad.com/blog/2006/12/19/drag-and-drop-and-the-missing-mouseup",
    "year": "2006",
    "month": "12",
    "day": "19",
    "isDir": false,
    "slug": "drag-and-drop-and-the-missing-mouseup",
    "postName": "2006-12-19-drag-and-drop-and-the-missing-mouseup",
    "html": "<blockquote cite=\"http://www.thinkvitamin.com/features/design/create-cross-browser-vector-graphics#comment-34453\">With the draggable circles - click, drag, move the mouse outside the rectangle, release the mouse button. Now move the mouse back inside the rectangle, and it still thinks your dragging, even though you’ve mouse-up’d.<br /><br />I guess this is because it’s not catching the onmouseup when you’re outside it’s “domain”. Perhaps make it automatically trigger the mouseup when the pointer leaves the area?</blockquote><div class=\"quotesource\">Source: <a href=\"http://www.thinkvitamin.com/features/design/create-cross-browser-vector-graphics#comment-34453\">Vitamin Features » Create cross browser vector graphics - Comment by Steve</a></div>\n\n<p>So, that <code>dojo.gfx</code> thing is cool - but what caught my eye in the above-linked article is the above-quoted comment.  Drag and drop and missed mouseups seem to be an issue everywhere.  I can&#39;t seem to get around them in my <a href=\"http://decafbad.com/trac/wiki/XoxoOutliner\">XoxoOutliner</a> drag code, <a href=\"http://developer.yahoo.com/yui/examples/dragdrop/drag.html?mode=dist\">YUI DnD examples</a> seem to suffer from it, and hell - even Firefox itself doesn&#39;t seem immune:  Try drag-selecting some text, wander off-window with the mouse, release the mouse button.  For me at least, on my Mac, the drag-selection keeps doing its thing when I wander back on-window.   No me gusta.</p>\n",
    "body": "<blockquote cite=\"http://www.thinkvitamin.com/features/design/create-cross-browser-vector-graphics#comment-34453\">With the draggable circles - click, drag, move the mouse outside the rectangle, release the mouse button. Now move the mouse back inside the rectangle, and it still thinks your dragging, even though you’ve mouse-up’d.<br /><br />I guess this is because it’s not catching the onmouseup when you’re outside it’s “domain”. Perhaps make it automatically trigger the mouseup when the pointer leaves the area?</blockquote><div class=\"quotesource\">Source: <a href=\"http://www.thinkvitamin.com/features/design/create-cross-browser-vector-graphics#comment-34453\">Vitamin Features » Create cross browser vector graphics - Comment by Steve</a></div>\r\n\r\nSo, that <code>dojo.gfx</code> thing is cool - but what caught my eye in the above-linked article is the above-quoted comment.  Drag and drop and missed mouseups seem to be an issue everywhere.  I can't seem to get around them in my [XoxoOutliner](http://decafbad.com/trac/wiki/XoxoOutliner) drag code, [YUI DnD examples](http://developer.yahoo.com/yui/examples/dragdrop/drag.html?mode=dist) seem to suffer from it, and hell - even Firefox itself doesn't seem immune:  Try drag-selecting some text, wander off-window with the mouse, release the mouse button.  For me at least, on my Mac, the drag-selection keeps doing its thing when I wander back on-window.   No me gusta.\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/12/19/drag-and-drop-and-the-missing-mouseup"
  },
  {
    "comments_archived": true,
    "date": "2006-11-29T00:05:22.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "delicious",
      "webdev",
      "md5"
    ],
    "title": "painfully metalicious",
    "wordpress_id": 1023,
    "wordpress_slug": "painfully-metalicious",
    "wordpress_url": "http://decafbad.com/blog/2006/11/28/painfully-metalicious",
    "year": "2006",
    "month": "11",
    "day": "28",
    "isDir": false,
    "slug": "painfully-metalicious",
    "postName": "2006-11-28-painfully-metalicious",
    "html": "<p>I find this sequence of URLs almost as funny as <a href=\"http://decafbad.com/blog/2005/12/23/like-a-blonde-ouroboros\">the blonde joke</a>:</p>\n<ul>\n<li><a href=\"http://del.icio.us/url/?url=http%3A//del.icio.us/\">http://del.icio.us/url/?url=http%3A//del.icio.us/</a></li>\n<li><a href=\"http://del.icio.us/url/9a81616a6fdc3fd6cd432f0c3cce9b5c\">http://del.icio.us/url/9a81616a6fdc3fd6cd432f0c3cce9b5c</a></li>\n<li><a href=\"http://del.icio.us/url/b944c5e478a1e32dc71af722951498e3\">http://del.icio.us/url/b944c5e478a1e32dc71af722951498e3</a></li>\n<li><a href=\"http://del.icio.us/url/3ddb685e75e1bd74363748355dc30d2d\">http://del.icio.us/url/3ddb685e75e1bd74363748355dc30d2d</a></li>\n<li><a href=\"http://del.icio.us/url/e2ca7a0b59613504f3b0658a1b519b33\">http://del.icio.us/url/e2ca7a0b59613504f3b0658a1b519b33</a></li>\n<li><a href=\"http://del.icio.us/url/27209b794819a0dce0e3e970be2d1789\">http://del.icio.us/url/27209b794819a0dce0e3e970be2d1789</a></li>\n<li><a href=\"http://del.icio.us/url/cd0b24de440fe51b2797b125a33b60e0\">http://del.icio.us/url/cd0b24de440fe51b2797b125a33b60e0</a></li>\n<li><a href=\"http://del.icio.us/url/102ab8bb6becc7d3eac87f4c2707d0a9\">http://del.icio.us/url/102ab8bb6becc7d3eac87f4c2707d0a9</a></li>\n<li><a href=\"http://del.icio.us/url/aec6c8de3d189f18cdd85798f36bf716\">http://del.icio.us/url/aec6c8de3d189f18cdd85798f36bf716</a></li>\n</ul>\n<p>I&#39;m also happy that del.icio.us uses MD5 hashes to normalize this situation.</p>\n<p><em>Update</em>: I also see that <a href=\"http://www.kottke.org/06/11/delicious-will-eat-itself\">Kottke</a> beat me to the meta.</p>\n",
    "body": "I find this sequence of URLs almost as funny as [the blonde joke][tbj]:\r\n\r\n   * [http://del.icio.us/url/?url=http%3A//del.icio.us/](http://del.icio.us/url/?url=http%3A//del.icio.us/)\r\n   * [http://del.icio.us/url/9a81616a6fdc3fd6cd432f0c3cce9b5c](http://del.icio.us/url/9a81616a6fdc3fd6cd432f0c3cce9b5c)\r\n   * [http://del.icio.us/url/b944c5e478a1e32dc71af722951498e3](http://del.icio.us/url/b944c5e478a1e32dc71af722951498e3)\r\n   * [http://del.icio.us/url/3ddb685e75e1bd74363748355dc30d2d](http://del.icio.us/url/3ddb685e75e1bd74363748355dc30d2d)\r\n   * [http://del.icio.us/url/e2ca7a0b59613504f3b0658a1b519b33](http://del.icio.us/url/e2ca7a0b59613504f3b0658a1b519b33)\r\n   * [http://del.icio.us/url/27209b794819a0dce0e3e970be2d1789](http://del.icio.us/url/27209b794819a0dce0e3e970be2d1789)\r\n   * [http://del.icio.us/url/cd0b24de440fe51b2797b125a33b60e0](http://del.icio.us/url/cd0b24de440fe51b2797b125a33b60e0)\r\n   * [http://del.icio.us/url/102ab8bb6becc7d3eac87f4c2707d0a9](http://del.icio.us/url/102ab8bb6becc7d3eac87f4c2707d0a9)\r\n   * [http://del.icio.us/url/aec6c8de3d189f18cdd85798f36bf716](http://del.icio.us/url/aec6c8de3d189f18cdd85798f36bf716)\r\n\r\nI'm also happy that del.icio.us uses MD5 hashes to normalize this situation.\r\n\r\n*Update*: I also see that [Kottke](http://www.kottke.org/06/11/delicious-will-eat-itself) beat me to the meta.\r\n\r\n[tbj]: http://decafbad.com/blog/2005/12/23/like-a-blonde-ouroboros\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/28/painfully-metalicious"
  },
  {
    "comments_archived": true,
    "date": "2006-11-15T08:07:12.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "php",
      "outliners",
      "outlining",
      "xoxooutliner",
      "xsl",
      "xoxo",
      "xml",
      "opml"
    ],
    "title": "XoxoOutliner and further outline addressing adventures",
    "wordpress_id": 1019,
    "wordpress_slug": "xoxooutliner-and-further-outline-addressing-adventures",
    "wordpress_url": "http://decafbad.com/blog/2006/11/15/xoxooutliner-and-further-outline-addressing-adventures",
    "year": "2006",
    "month": "11",
    "day": "15",
    "isDir": false,
    "slug": "xoxooutliner-and-further-outline-addressing-adventures",
    "postName": "2006-11-15-xoxooutliner-and-further-outline-addressing-adventures",
    "html": "<p><a href=\"http://decafbad.com/trac/changeset/779\">Revised the addressing code a bit</a>, adding a few new kinds of addresses and getting ready to support sub-outline <em>updates</em>.  That is, fetch a sub-branch of an outline and then later post a change to that sub-branch using the same address.  Needs more thought - ie. what happens if things move between fetch and update? - but here are a few more samples:</p>\n<ul>\n<li>First is a straight linear index counting down from the top of the outline:<ul>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;index:4?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;index:4?format=xoxo</a></li>\n</ul>\n</li>\n<li>Second is a navigation of outline structure, alternating numbers and letters:<ul>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;level:3c4?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;level:3c4?format=xoxo</a></li>\n</ul>\n</li>\n</ul>\n<p>That&#39;s all for now.  In my next round of enthusiasm, I may try stealing <a href=\"http://blogs.opml.org/tommorris/2006/11/11#opathAToolToPopulariseAConcept\">Tom Morris&#39; Opath idea</a>...</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087323\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://vdm.cc/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a4dae25fe0faeec4f9ff1ad769a52b36&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://vdm.cc/\">Vincent D Murphy</a>\n</div>\n<a href=\"#comment-221087323\" class=\"permalink\"><time datetime=\"2006-11-18T20:52:07\">2006-11-18T20:52:07</time></a>\n</div>\n<div class=\"content\"><p>I think (and said as much on Tom Morris' site) that a fragment identifier would be a better solution, in which case Opath would be a fragment identifier syntax for OPML and XOXO. At least it would be the best solution from a REST/web architecture point of view..</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087325\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221087325\" class=\"permalink\"><time datetime=\"2006-11-18T21:40:41\">2006-11-18T21:40:41</time></a>\n</div>\n<div class=\"content\"><p>One reason I didn't use the #identifier URI syntax for suboutlines is because some gymnastics need to be done to get the hash through to the server from a browser.  Otherwise, it gets treated as an in-page anchor.  The semicolon syntax seems to work well for a set of path-segment parameters, and follows the standard (if I've read it correctly).  </p>\n<p>In either case, it works for me, and should be just fine in a REST context - the suboutline syntax here should always identify a single parent outline node as a resource, and will eventually work for GET / PUT / POST / DELETE.</p>\n<p>Now I just need to implement a solution for the <a href=\"http://www.w3.org/1999/04/Editing/01\" rel=\"nofollow\">Lost Update Problem</a>.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087328\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.dynamiclist.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=09eb19f1e84a7aaa63c86bd48c4d0f3d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.dynamiclist.com/\">Michael Poremba</a>\n</div>\n<a href=\"#comment-221087328\" class=\"permalink\"><time datetime=\"2008-09-18T23:45:56\">2008-09-18T23:45:56</time></a>\n</div>\n<div class=\"content\"><p>Wondering if you ever completed your online outliner? Check out dynamiclist.com, a functioning but incomlete project I launched back in 2001. The editor is rich and works well. Been thinking of reviving now that all major browsers support the contentEditable tag.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "[Revised the addressing code a bit][rev], adding a few new kinds of addresses and getting ready to support sub-outline *updates*.  That is, fetch a sub-branch of an outline and then later post a change to that sub-branch using the same address.  Needs more thought - ie. what happens if things move between fetch and update? - but here are a few more samples:\r\n\r\n* First is a straight linear index counting down from the top of the outline:\r\n   * [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;index:4?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;index:4?format=xoxo)\r\n* Second is a navigation of outline structure, alternating numbers and letters:\r\n   * [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;level:3c4?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;level:3c4?format=xoxo)\r\n\r\nThat's all for now.  In my next round of enthusiasm, I may try stealing [Tom Morris' Opath idea][opath]...\r\n\r\n[rev]: http://decafbad.com/trac/changeset/779\r\n[opath]: http://blogs.opml.org/tommorris/2006/11/11#opathAToolToPopulariseAConcept\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087323\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://vdm.cc/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a4dae25fe0faeec4f9ff1ad769a52b36&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://vdm.cc/\">Vincent D Murphy</a>\n                </div>\n                <a href=\"#comment-221087323\" class=\"permalink\"><time datetime=\"2006-11-18T20:52:07\">2006-11-18T20:52:07</time></a>\n            </div>\n            <div class=\"content\"><p>I think (and said as much on Tom Morris' site) that a fragment identifier would be a better solution, in which case Opath would be a fragment identifier syntax for OPML and XOXO. At least it would be the best solution from a REST/web architecture point of view..</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087325\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221087325\" class=\"permalink\"><time datetime=\"2006-11-18T21:40:41\">2006-11-18T21:40:41</time></a>\n            </div>\n            <div class=\"content\"><p>One reason I didn't use the #identifier URI syntax for suboutlines is because some gymnastics need to be done to get the hash through to the server from a browser.  Otherwise, it gets treated as an in-page anchor.  The semicolon syntax seems to work well for a set of path-segment parameters, and follows the standard (if I've read it correctly).  </p>\n\n<p>In either case, it works for me, and should be just fine in a REST context - the suboutline syntax here should always identify a single parent outline node as a resource, and will eventually work for GET / PUT / POST / DELETE.</p>\n\n<p>Now I just need to implement a solution for the <a href=\"http://www.w3.org/1999/04/Editing/01\" rel=\"nofollow\">Lost Update Problem</a>.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087328\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.dynamiclist.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=09eb19f1e84a7aaa63c86bd48c4d0f3d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.dynamiclist.com/\">Michael Poremba</a>\n                </div>\n                <a href=\"#comment-221087328\" class=\"permalink\"><time datetime=\"2008-09-18T23:45:56\">2008-09-18T23:45:56</time></a>\n            </div>\n            <div class=\"content\"><p>Wondering if you ever completed your online outliner? Check out dynamiclist.com, a functioning but incomlete project I launched back in 2001. The editor is rich and works well. Been thinking of reviving now that all major browsers support the contentEditable tag.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/15/xoxooutliner-and-further-outline-addressing-adventures"
  },
  {
    "comments_archived": true,
    "date": "2006-11-13T09:34:02.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "php",
      "outlining",
      "xoxooutliner",
      "xsl",
      "xoxo",
      "xml"
    ],
    "title": "XoxoOutliner and suboutline addressing",
    "wordpress_id": 1018,
    "wordpress_slug": "xoxooutliner-and-suboutline-addressing",
    "wordpress_url": "http://decafbad.com/blog/2006/11/13/xoxooutliner-and-suboutline-addressing",
    "year": "2006",
    "month": "11",
    "day": "13",
    "isDir": false,
    "slug": "xoxooutliner-and-suboutline-addressing",
    "postName": "2006-11-13-xoxooutliner-and-suboutline-addressing",
    "html": "<p>Here&#39;s a feature I <a href=\"http://decafbad.com/trac/changeset/776\">just hacked together</a> for <a href=\"http://decafbad.com/trac/wiki/XoxoOutliner\">XoxoOutliner</a> and plan to refine further:</p>\n<ul>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;text:Features?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;text:Features?format=xoxo</a></li>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;id:native?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;id:native?format=xoxo</a></li>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;contains:Implement?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;contains:Implement?format=xoxo</a></li>\n</ul>\n<p>Not entirely sure that this is how I want this to work, but these three URLs demonstrate the ability to address and fetch subsets of outlines.  I&#39;m hoping this will be a basis for selective transclusion in other outlines, or maybe even in a sidebar of a blog.  (Which, depending on the blog software, might be built from outlines anyway.)</p>\n",
    "body": "Here's a feature I [just hacked together][ha] for [XoxoOutliner][xo] and plan to refine further:\r\n\r\n[ha]: http://decafbad.com/trac/changeset/776\r\n[xo]: http://decafbad.com/trac/wiki/XoxoOutliner\r\n\r\n* [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;text:Features?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;text:Features?format=xoxo)\r\n* [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;id:native?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;id:native?format=xoxo)\r\n* [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;contains:Implement?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;contains:Implement?format=xoxo)\r\n\r\nNot entirely sure that this is how I want this to work, but these three URLs demonstrate the ability to address and fetch subsets of outlines.  I'm hoping this will be a basis for selective transclusion in other outlines, or maybe even in a sidebar of a blog.  (Which, depending on the blog software, might be built from outlines anyway.)\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/13/xoxooutliner-and-suboutline-addressing"
  },
  {
    "comments_archived": true,
    "date": "2006-11-12T05:25:40.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "javascript",
      "xoxooutliner",
      "xoxo",
      "microformats"
    ],
    "title": "XoxoOutliner shows some signs of life",
    "wordpress_id": 1017,
    "wordpress_slug": "xoxooutliner-shows-some-signs-of-life",
    "wordpress_url": "http://decafbad.com/blog/2006/11/12/xoxooutliner-shows-some-signs-of-life",
    "year": "2006",
    "month": "11",
    "day": "12",
    "isDir": false,
    "slug": "xoxooutliner-shows-some-signs-of-life",
    "postName": "2006-11-12-xoxooutliner-shows-some-signs-of-life",
    "html": "<p>Remember when I <a href=\"http://decafbad.com/blog/2006/03/25/about-xoxooutliner\">started writing about</a> <a href=\"http://decafbad.com/trac/wiki/XoxoOutliner\">XoxoOutliner</a> around 8 months ago?  Yeah, lots has happened with life in general between then and now - but lately I&#39;ve been <a href=\"http://decafbad.com/blog/2006/11/06/xoxooutliner-rewrite-coming-now-with-event-delegation\">working on code</a> for it again.  As you might see from <a href=\"http://decafbad.com/trac/timeline\">my Trac timeline</a>, I&#39;ve got lots of new code checked in.  And I mean <a href=\"http://decafbad.com/trac/changeset/765\">lots</a>.</p>\n<p>If I can keep up this bout of <a href=\"http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\">serial enthusiasm</a> for the project, you&#39;ll be hearing lots more about it soon.</p>\n<p>For now, check out the new static <a href=\"http://decafbad.com/2006/11/XoxoOutliner/README.html\">README.html</a> and the <a href=\"http://decafbad.com/2006/11/XoxoOutliner/\">live demo</a>.  It&#39;s extremely bugful, but it might do interesting things for Firefox and Safari users.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087237\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://vdm.cc/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a4dae25fe0faeec4f9ff1ad769a52b36&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://vdm.cc/\">Vincent D Murphy</a>\n</div>\n<a href=\"#comment-221087237\" class=\"permalink\"><time datetime=\"2006-11-12T09:14:26\">2006-11-12T09:14:26</time></a>\n</div>\n<div class=\"content\"><p>Wow!</p>\n<p>This thing is such an improvement. I love that the README is an outline.</p>\n<p>I think this is really powerful. I think an outliner should eliminate the need for a lot of rich text browser editors. Outlines inherently break text into small little chunks, which are stylable (and potentially URL addressable, for block-level comments). I think this thing would rock in a wiki.</p>\n<p>Keep up the good work!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087241\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://db79.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=db8059b0ce0b3cf393f4de0ad7af758f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://db79.com\">Shawn Medero</a>\n</div>\n<a href=\"#comment-221087241\" class=\"permalink\"><time datetime=\"2006-11-13T12:59:18\">2006-11-13T12:59:18</time></a>\n</div>\n<div class=\"content\"><p>Bravo! This is a great set of updates and works well in Safari (haven't had the time yet to test in Firefox.)</p>\n<p>I've been thinking about using some portion of these tools in my wiki software to dress up outlines. I'm not sure yet... sometimes I feel like editing an outline  (well a simple one I'd use on a wiki at least) is quicker manually with something like Markdown.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087243\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\">misuba</a>\n</div>\n<a href=\"#comment-221087243\" class=\"permalink\"><time datetime=\"2006-11-14T00:15:01\">2006-11-14T00:15:01</time></a>\n</div>\n<div class=\"content\"><p>Rad!</p>\n<p>Keep this up and I won't have to finish mine. :-)</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Remember when I [started writing about][st] [XoxoOutliner][xo] around 8 months ago?  Yeah, lots has happened with life in general between then and now - but lately I've been [working on code][wo] for it again.  As you might see from [my Trac timeline][time], I've got lots of new code checked in.  And I mean [lots][lots].\r\n\r\nIf I can keep up this bout of [serial enthusiasm][se] for the project, you'll be hearing lots more about it soon.\r\n\r\nFor now, check out the new static [README.html][re] and the [live demo][demo].  It's extremely bugful, but it might do interesting things for Firefox and Safari users.\r\n\r\n[se]: http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\r\n[re]:http://decafbad.com/2006/11/XoxoOutliner/README.html\r\n[demo]: http://decafbad.com/2006/11/XoxoOutliner/\r\n[lots]: http://decafbad.com/trac/changeset/765\r\n[time]: http://decafbad.com/trac/timeline\r\n[wo]: http://decafbad.com/blog/2006/11/06/xoxooutliner-rewrite-coming-now-with-event-delegation\r\n[xo]: http://decafbad.com/trac/wiki/XoxoOutliner\r\n[st]: http://decafbad.com/blog/2006/03/25/about-xoxooutliner \n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087237\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://vdm.cc/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a4dae25fe0faeec4f9ff1ad769a52b36&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://vdm.cc/\">Vincent D Murphy</a>\n                </div>\n                <a href=\"#comment-221087237\" class=\"permalink\"><time datetime=\"2006-11-12T09:14:26\">2006-11-12T09:14:26</time></a>\n            </div>\n            <div class=\"content\"><p>Wow!</p>\n\n<p>This thing is such an improvement. I love that the README is an outline.</p>\n\n<p>I think this is really powerful. I think an outliner should eliminate the need for a lot of rich text browser editors. Outlines inherently break text into small little chunks, which are stylable (and potentially URL addressable, for block-level comments). I think this thing would rock in a wiki.</p>\n\n<p>Keep up the good work!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087241\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://db79.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=db8059b0ce0b3cf393f4de0ad7af758f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://db79.com\">Shawn Medero</a>\n                </div>\n                <a href=\"#comment-221087241\" class=\"permalink\"><time datetime=\"2006-11-13T12:59:18\">2006-11-13T12:59:18</time></a>\n            </div>\n            <div class=\"content\"><p>Bravo! This is a great set of updates and works well in Safari (haven't had the time yet to test in Firefox.)</p>\n\n<p>I've been thinking about using some portion of these tools in my wiki software to dress up outlines. I'm not sure yet... sometimes I feel like editing an outline  (well a simple one I'd use on a wiki at least) is quicker manually with something like Markdown.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087243\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\">misuba</a>\n                </div>\n                <a href=\"#comment-221087243\" class=\"permalink\"><time datetime=\"2006-11-14T00:15:01\">2006-11-14T00:15:01</time></a>\n            </div>\n            <div class=\"content\"><p>Rad!</p>\n\n<p>Keep this up and I won't have to finish mine. :-)</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/11/xoxooutliner-shows-some-signs-of-life"
  },
  {
    "comments_archived": true,
    "date": "2006-11-07T21:46:35.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "rss",
      "firefox",
      "xsl"
    ],
    "title": "firefox, rss, xsl - from anger to apathy",
    "wordpress_id": 1015,
    "wordpress_slug": "firefox-rss-xsl-from-anger-to-apathy",
    "wordpress_url": "http://decafbad.com/blog/2006/11/07/firefox-rss-xsl-from-anger-to-apathy",
    "year": "2006",
    "month": "11",
    "day": "07",
    "isDir": false,
    "slug": "firefox-rss-xsl-from-anger-to-apathy",
    "postName": "2006-11-07-firefox-rss-xsl-from-anger-to-apathy",
    "html": "<p>Having skimmed through <a href=\"http://groups.google.com/group/mozilla.dev.apps.firefox/browse_thread/thread/146f70eaf0e1686f/f35c316db3883cf8\">this Mozilla newsgroup thread</a>, I&#39;m perturbed anew about the <a href=\"http://catb.org/jargon/html/M/misfeature.html\">new Firefox 2.0 misfeature</a> with <a href=\"http://decafbad.com/blog/2006/11/02/firefox-20-breaks-client-side-xsl-for-rss-and-atom-feeds\">regard to RSS feeds and client-side XSL</a>.  My original grief was that it cost me a significant bit of pointless debugging time even discovering that it was a brand new gotcha.  But, the &quot;we know what&#39;s good for you&quot; sentiment is clear - I feel like posting any newsgroup responses would be just more time wasted.  At least shoving an arbitrary 512 bytes into the feed fixes the bug.  (This seems to compress well: &quot;AAAAAAAAAAAA ... AAAAAAAAAARGH!&quot;)</p>\n<p>Brilliant: I&#39;ll just add that to the body of obscure CSS hacks and bug workarounds that&#39;ll someday make me give up web development for raising sheep.  Thanks a million, guys.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087102\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.mpwilson.com/uccu/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02ffe238ed68da35e8037df461552234&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.mpwilson.com/uccu/\">Mad William Flint</a>\n</div>\n<a href=\"#comment-221087102\" class=\"permalink\"><time datetime=\"2006-11-07T22:00:34\">2006-11-07T22:00:34</time></a>\n</div>\n<div class=\"content\"><p>Some days man, I'm not sure raising sheep would be such a bad idea.</p>\n<p>30 years behind the keyboard is a long time.</p>\n<p>Especially at 37.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087103\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221087103\" class=\"permalink\"><time datetime=\"2006-11-07T22:38:55\">2006-11-07T22:38:55</time></a>\n</div>\n<div class=\"content\"><p>I'm about 6 years behind you, so let me know if you hit the sheep herding phase before me, and let me know how it treats ya.  :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087104\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.joegrossberg.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=f288a8afe5302a16a366d5e9d34f2fec&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.joegrossberg.com\">Joe Grossberg</a>\n</div>\n<a href=\"#comment-221087104\" class=\"permalink\"><time datetime=\"2006-11-07T23:13:23\">2006-11-07T23:13:23</time></a>\n</div>\n<div class=\"content\"><p>Not to be pedantic, but don't you think there's a lot of random shit a shepherd needs to memorize too?</p>\n<p>And you get to work indoors, avoid anthrax and keep your hands free of ovine feces.</p>\n<p>I agree that the overriding of RSS styling is wack, but maybe you should go on a sheep-herding vacation if for no other reason than to realize this is a speck on a mote on a flea's arse on the giant ewe of web development. :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087105\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://franklinmint.fm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b9ed774661a22ff8797a1e0e24f0baf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://franklinmint.fm\">Robert Sayre</a>\n</div>\n<a href=\"#comment-221087105\" class=\"permalink\"><time datetime=\"2006-11-08T00:19:42\">2006-11-08T00:19:42</time></a>\n</div>\n<div class=\"content\"><p>les, your feedback seems to fall into the \"IT IS OBJECTIVELY WRONG\" bucket. It does fail to account for the behavior of Safari 2 and IE 7, and doesn't account for authors who would like their stylesheet to show only in older browsers without RSS support. Why do you think it's good for the Web for Firefox to diverge from the new de-facto standard? Seems like pissing in the wind to me. </p>\n<p>BTW, I can't say framing the decision as some collective character flaw of the Mozilla project is particularly productive.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087106\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221087106\" class=\"permalink\"><time datetime=\"2006-11-08T01:26:32\">2006-11-08T01:26:32</time></a>\n</div>\n<div class=\"content\"><p>Joe: Sheep farming has always been my frustrated-programmer joke.  It would be something different to memorize - not necessarily easier.  But, hmm, I never thought about anthrax.  I suppose that would be a job hazard to consider, beyond simple wasted time.</p>\n<p>Robert:  Admittedly, I'm frustrated.  This change breaks things I've invested hours into across several jobs, and into which I've been investing hours again.  At least I've been paid for those hours, and I'm glad I don't have to go back and explain / fix the stuff now broken at previous jobs.</p>\n<p>From my perspective, I'm seeing all the latest generation browsers now breaking something I thought was standard - but about that I guess was mistaken.  At least, it \"smelled\" like a fairly clean quasi-standard approach to me.  I really don't have standards all memorized or even well studied.</p>\n<p>But, in the new defacto standard, I get to stuff 512 random bytes into a feed to get the old behavior back.  That certainly doesn't \"smell\" like a clean standard to me, even if IE 7 does it and Firefox 2 now follows.  It still doesn't work in Safari.  It seems a defacto standard to me in the same way that exploiting CSS parser errors to filter by browser is a defacto standard.  Yet another weird edge case to memorize.</p>\n<p>From my perspective, the defacto standard has been what FeedBurner and others have been doing with client-side XSL for feeds.  And there've been some exciting things starting there - so there's some personal disappointment invoked.  And now, all those feeds are broken in that respect.  Retroactive wind-blown urine, at this point, I guess.</p>\n<p>Maybe all this was really just a neat geeky trick best now forgotten, and the decision really will be the right one in the end.  Nonetheless, I don't like it.  So, perhaps not \"IT IS OBJECTIVELY WRONG\".  But, from my perspective, it was an unexpected and unwanted surprise.</p>\n<p>As for being productive, the decision seems made and others have already registered the same or better objections than I would just rehash.  And I can't see with what collective character flaw I've painted the team - I'm perturbed, but I certainly don't think everyone involved is a villain.  My apologies if my frustration vents that way.  It's just that taking over feed styling from content providers strikes me as \"we can do user experience better\", and the explanations I've read don't seem to disagree with that notion.</p>\n<p>But, I disagree and I don't like it.  So, fine, from here on out I use the 512-byte-hack if I want custom XSL styling for feeds.  Another trick in the bag.  That's pretty much my last word on the subject, unless the capability disappears entirely.</p>\n<p>All I have left to say is that I hope the <a href=\"http://decafbad.com/blog/2006/07/30/xml-stylesheet-and-the-world-of-warcraft-home-page\" rel=\"nofollow\">client-side XSL-styled World of Warcraft home page</a> never switches to an Atom or RSS format - whether or not using a non-HTML format for a front page was a good idea in the first place.  I thought it was, but that could be my whole problem.  :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087108\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://decafbad.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ab21890e84fd31ff0d651d77bc82d118&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://decafbad.net\">CraigM</a>\n</div>\n<a href=\"#comment-221087108\" class=\"permalink\"><time datetime=\"2006-11-08T02:42:06\">2006-11-08T02:42:06</time></a>\n</div>\n<div class=\"content\"><p>My \"frustrated with technology\" catch-phrase has always been to become a Buddhist Monk. That complete detatchment of technology seems to be quite the fantasy of all coders everywhere. Maybe that's saying something.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087109\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://franklinmint.fm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b9ed774661a22ff8797a1e0e24f0baf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://franklinmint.fm\">Robert Sayre</a>\n</div>\n<a href=\"#comment-221087109\" class=\"permalink\"><time datetime=\"2006-11-08T03:07:32\">2006-11-08T03:07:32</time></a>\n</div>\n<div class=\"content\"><p>By \"collective character flaw\", I meant that I've read you and other web authors writing \"they think they know better than us\". That's not how the decision was made. And to be honest, it bothers me somewhat to read a rant on the subject that only focuses on Firefox. To me, it seems like taking advantage of an open product development process because you know we will listen, while other vendors won't. A rant that claims \"Firefox and IE and Safari suck\" would be different, because then it is an opinion on a behavior. Criticism of browser behavior is welcome, criticism of people based on tech religion is not so welcome.</p>\n<p>I understand that FeedBurner and others have a business interest here, but you have to understand that at least some of the things they do directly conflict with capabilities that are beneficial to browser users (that we can't deliver if it only works with half of the feeds out there). We want our users to have a coherent feed experience, with browser-specific preferences and minimal click-through screens. To that end, the screen that supplants the XSL was termed the \"feed preview\". It should show what's in the feed, and default to user-specified feed preferences. If the feed doesn't contain ads for aggregators and feed services (and wrong instructions), a preview that shows that stuff deceives our users. Not in an evil way, but in a \"bad usability\" way. When combined with authors who <em>want</em> a browser feed screen with a stylesheet for older browsers, and Safari/IE7 behavior, the scales tilted away from  using the XSL.</p>\n<p>I understand that people disagree here. But the fact that all browser vendors have done something that doesn't align with the way they used to do it should tell you that the issue is more complicated than \"author's intent\", for better or worse.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087111\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221087111\" class=\"permalink\"><time datetime=\"2006-11-08T04:38:57\">2006-11-08T04:38:57</time></a>\n</div>\n<div class=\"content\"><p>Robert:  You have a great point there - I do in fact think that Firefox, IE, and Safari all suck with this current change in feed handling.  And yeah, the only reason I ranted about Firefox is because I think it's the only one of the three there's much chance in affecting.  It's also the only browser I use, so it's the first one where the feed handling change really sunk in for me.  I really haven't cared about it until just now.</p>\n<p>Of course, I've been nowhere near participating in the newsgroups or code checkins or anything whatsoever related to actually contributing to Firefox - so this is all blog-chair quarterbacking from a syndication feeds enthusiast.</p>\n<p>As for the \"they think they know better than us\" issue, I think it can be found in <a href=\"http://groups.google.com/group/mozilla.dev.apps.firefox/browse_thread/thread/146f70eaf0e1686f/1daec246d79c7dbd#ccd0a66d6a204f49\" rel=\"nofollow\">a newsgroup response like Mike Shaver's</a>:</p>\n<blockquote>\n<p>... one significant motivation was that very many uses of XSLT-on-RSS was to create a page that said \"this is not <em>for</em> you browsers, go to the main site instead\", which is not what we wanted the user's experience to be.  Distinguishing those cases from the \"righteous use of XSLT for dual presentation\" ones is a publishable result, I submit.</p>\n</blockquote>\n<p>To this, the most vocal respondents say, \"But I <em>really want</em> my users to experience my righteous XSLT!\"  Even if it has flaming GIFs, dancing hamsters, and cat pictures.  It's <em>righteous</em>, damn it.  (Yeah, the quoted \"righteous\" is a little off-putting when you actually think the XSLT thing is kind of keen.)</p>\n<p>Why not apply the new-and-improved styling by default and bow out when there's a processing instruction?  Then, spread the word - \"Get rid of your cruddy not-for-you XSLT!\"  I'm sure you'd get lots of converts grateful to stop screwing with their feeds, which would leave the outlier nutters like me and FeedBurner to keep happily shooting themselves in the feet.  Instead, I see, \"style 'em all and let hacks sort 'em out,\" which totally rubs me the wrong way.</p>\n<p>At this point, I'm really just mildly disappointed, and feel like I've gotten a downgrade in an otherwise all-around great new browser.  I'm not <em>actually</em> looking to farm sheep over this.  There is a hack-around available for IE7 and FF2, so at least there's that.</p>\n<p>I guess what would make me feel like I'd gotten a decent consolation prize would be if that Feed Preview screen were significantly richer and easier on the eyes than the other browsers' offerings.  I'm assuming that's projected for the future.  Maybe what I need is to do a checkout and dig around.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087112\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.mpwilson.com/uccu/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02ffe238ed68da35e8037df461552234&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.mpwilson.com/uccu/\">Mad William Flint</a>\n</div>\n<a href=\"#comment-221087112\" class=\"permalink\"><time datetime=\"2006-11-08T04:41:06\">2006-11-08T04:41:06</time></a>\n</div>\n<div class=\"content\"><p>CraigM: You may want to reconsider.  I've known WAY too many buddhist monk programmers in my day.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087113\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://jclark.org/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d0a9ab4b71ce193e98b7284ca257e327&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://jclark.org/weblog/\">Jason Clark</a>\n</div>\n<a href=\"#comment-221087113\" class=\"permalink\"><time datetime=\"2006-11-08T13:19:11\">2006-11-08T13:19:11</time></a>\n</div>\n<div class=\"content\"><p>conscious Robert:  Why do you keep seeing people writing \"they think they know better than us\"?  Because Mozilla has chosen to ignore an Author's preferences when displaying a feed.  Period.  You can explain it all you want, your reasoning may even be right- but the bottom line is, Mozilla made a conscious decision to ignore styling instructions included by the feed's author.  The only reasons I can think of to do this is to be perverse (which I doubt), or because you think you know better (and from here on out, I use the collective you for Mozilla, because I'm tired of typing Mozilla).</p>\n<p>You claim it's better for users.  I say you think you know better what is good for your users than the feed author does.  This is the same feed author that created the feed's content, and the stylesheet, and decided to present the feed to users with the stylesheet.  I'm sorry, I just don't buy it.</p>\n<p>Another non-starter is the IE7/Safari argument.  I don't care what those browsers do; I chose Firefox because it decided to lead, not follow, when it comes to standards.  Whether you believe that displaying RSS feeds with stylesheets is a standards issue or not, you can't deny it was a de-facto standard until recently.</p>\n<p>And what about those authors who only want their stylesheets applied in older browsers that aren't as enlightened as IE7?  Not that I've seen a public outcry from these authors in any of the forums discussing this \"feature\", but let's assume they must exist.  They were smart enought to add the stylesheet to their feed, why not allow them to also add to their feed an indication that a browser's built in styling may trump the linked stylesheet (perhaps a PI)?  Wouldn't that allow both types of authors to get what they want without wasting bandwidth in 1/2 kb increments of sheer hack?  </p>\n<p>I've read the arguments, here, on the buglist, and in the newsgroups.  To me, and I suspect, to many others, Mozilla (or those who made this decision within Mozilla) has acted as though they think they know better than web site authors.  Explanations such as yours appear to me as an explanation of why you think that, not a refutation that you don't.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087115\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://jclark.org/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d0a9ab4b71ce193e98b7284ca257e327&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://jclark.org/weblog/\">Jason Clark</a>\n</div>\n<a href=\"#comment-221087115\" class=\"permalink\"><time datetime=\"2006-11-08T13:21:50\">2006-11-08T13:21:50</time></a>\n</div>\n<div class=\"content\"><p>Regarding the above:  Sorry about the extra \"conscious\" at the beginning.... I was typing my comment in a text editor, and used the comment form to check the spelling of that word.  Forgot to delete it when I pasted in my comment.  It is not a poorly-formed attack on Robert :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087116\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tim</a>\n</div>\n<a href=\"#comment-221087116\" class=\"permalink\"><time datetime=\"2006-11-27T04:16:54\">2006-11-27T04:16:54</time></a>\n</div>\n<div class=\"content\"><p>I, as a user, don't think feeds should be styled. Feeds are used in ways where styles are not easy to apply, would cause theming chaos, and just look good when all in the same style.</p>\n<p>That said, I heard Firefox 2.0 has an ugly default style, which, I guess, should be improved. I like IE7s feed view. Oh, and the arbitrary 512 byte switch is odd - reminds me of Internet Explorer's Friendly HTTP errors... Which weren't that friendly.</p>\n<p>Hm, I might not be thinking in the same way a regular user is thinking...</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Having skimmed through [this Mozilla newsgroup thread][tt], I'm perturbed anew about the [new Firefox 2.0 misfeature][mff] with [regard to RSS feeds and client-side XSL][nfm].  My original grief was that it cost me a significant bit of pointless debugging time even discovering that it was a brand new gotcha.  But, the \"we know what's good for you\" sentiment is clear - I feel like posting any newsgroup responses would be just more time wasted.  At least shoving an arbitrary 512 bytes into the feed fixes the bug.  (This seems to compress well: \"AAAAAAAAAAAA ... AAAAAAAAAARGH!\")\r\n\r\nBrilliant: I'll just add that to the body of obscure CSS hacks and bug workarounds that'll someday make me give up web development for raising sheep.  Thanks a million, guys.\r\n\r\n[mff]: http://catb.org/jargon/html/M/misfeature.html\r\n[nfm]: http://decafbad.com/blog/2006/11/02/firefox-20-breaks-client-side-xsl-for-rss-and-atom-feeds\r\n[tt]: http://groups.google.com/group/mozilla.dev.apps.firefox/browse_thread/thread/146f70eaf0e1686f/f35c316db3883cf8\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087102\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.mpwilson.com/uccu/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02ffe238ed68da35e8037df461552234&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.mpwilson.com/uccu/\">Mad William Flint</a>\n                </div>\n                <a href=\"#comment-221087102\" class=\"permalink\"><time datetime=\"2006-11-07T22:00:34\">2006-11-07T22:00:34</time></a>\n            </div>\n            <div class=\"content\"><p>Some days man, I'm not sure raising sheep would be such a bad idea.</p>\n\n<p>30 years behind the keyboard is a long time.</p>\n\n<p>Especially at 37.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087103\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221087103\" class=\"permalink\"><time datetime=\"2006-11-07T22:38:55\">2006-11-07T22:38:55</time></a>\n            </div>\n            <div class=\"content\"><p>I'm about 6 years behind you, so let me know if you hit the sheep herding phase before me, and let me know how it treats ya.  :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087104\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.joegrossberg.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=f288a8afe5302a16a366d5e9d34f2fec&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.joegrossberg.com\">Joe Grossberg</a>\n                </div>\n                <a href=\"#comment-221087104\" class=\"permalink\"><time datetime=\"2006-11-07T23:13:23\">2006-11-07T23:13:23</time></a>\n            </div>\n            <div class=\"content\"><p>Not to be pedantic, but don't you think there's a lot of random shit a shepherd needs to memorize too?</p>\n\n<p>And you get to work indoors, avoid anthrax and keep your hands free of ovine feces.</p>\n\n<p>I agree that the overriding of RSS styling is wack, but maybe you should go on a sheep-herding vacation if for no other reason than to realize this is a speck on a mote on a flea's arse on the giant ewe of web development. :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087105\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://franklinmint.fm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b9ed774661a22ff8797a1e0e24f0baf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://franklinmint.fm\">Robert Sayre</a>\n                </div>\n                <a href=\"#comment-221087105\" class=\"permalink\"><time datetime=\"2006-11-08T00:19:42\">2006-11-08T00:19:42</time></a>\n            </div>\n            <div class=\"content\"><p>les, your feedback seems to fall into the \"IT IS OBJECTIVELY WRONG\" bucket. It does fail to account for the behavior of Safari 2 and IE 7, and doesn't account for authors who would like their stylesheet to show only in older browsers without RSS support. Why do you think it's good for the Web for Firefox to diverge from the new de-facto standard? Seems like pissing in the wind to me. </p>\n\n<p>BTW, I can't say framing the decision as some collective character flaw of the Mozilla project is particularly productive.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087106\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221087106\" class=\"permalink\"><time datetime=\"2006-11-08T01:26:32\">2006-11-08T01:26:32</time></a>\n            </div>\n            <div class=\"content\"><p>Joe: Sheep farming has always been my frustrated-programmer joke.  It would be something different to memorize - not necessarily easier.  But, hmm, I never thought about anthrax.  I suppose that would be a job hazard to consider, beyond simple wasted time.</p>\n\n<p>Robert:  Admittedly, I'm frustrated.  This change breaks things I've invested hours into across several jobs, and into which I've been investing hours again.  At least I've been paid for those hours, and I'm glad I don't have to go back and explain / fix the stuff now broken at previous jobs.</p>\n\n<p>From my perspective, I'm seeing all the latest generation browsers now breaking something I thought was standard - but about that I guess was mistaken.  At least, it \"smelled\" like a fairly clean quasi-standard approach to me.  I really don't have standards all memorized or even well studied.</p>\n\n<p>But, in the new defacto standard, I get to stuff 512 random bytes into a feed to get the old behavior back.  That certainly doesn't \"smell\" like a clean standard to me, even if IE 7 does it and Firefox 2 now follows.  It still doesn't work in Safari.  It seems a defacto standard to me in the same way that exploiting CSS parser errors to filter by browser is a defacto standard.  Yet another weird edge case to memorize.</p>\n\n<p>From my perspective, the defacto standard has been what FeedBurner and others have been doing with client-side XSL for feeds.  And there've been some exciting things starting there - so there's some personal disappointment invoked.  And now, all those feeds are broken in that respect.  Retroactive wind-blown urine, at this point, I guess.</p>\n\n<p>Maybe all this was really just a neat geeky trick best now forgotten, and the decision really will be the right one in the end.  Nonetheless, I don't like it.  So, perhaps not \"IT IS OBJECTIVELY WRONG\".  But, from my perspective, it was an unexpected and unwanted surprise.</p>\n\n<p>As for being productive, the decision seems made and others have already registered the same or better objections than I would just rehash.  And I can't see with what collective character flaw I've painted the team - I'm perturbed, but I certainly don't think everyone involved is a villain.  My apologies if my frustration vents that way.  It's just that taking over feed styling from content providers strikes me as \"we can do user experience better\", and the explanations I've read don't seem to disagree with that notion.</p>\n\n<p>But, I disagree and I don't like it.  So, fine, from here on out I use the 512-byte-hack if I want custom XSL styling for feeds.  Another trick in the bag.  That's pretty much my last word on the subject, unless the capability disappears entirely.</p>\n\n<p>All I have left to say is that I hope the <a href=\"http://decafbad.com/blog/2006/07/30/xml-stylesheet-and-the-world-of-warcraft-home-page\" rel=\"nofollow\">client-side XSL-styled World of Warcraft home page</a> never switches to an Atom or RSS format - whether or not using a non-HTML format for a front page was a good idea in the first place.  I thought it was, but that could be my whole problem.  :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087108\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://decafbad.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ab21890e84fd31ff0d651d77bc82d118&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://decafbad.net\">CraigM</a>\n                </div>\n                <a href=\"#comment-221087108\" class=\"permalink\"><time datetime=\"2006-11-08T02:42:06\">2006-11-08T02:42:06</time></a>\n            </div>\n            <div class=\"content\"><p>My \"frustrated with technology\" catch-phrase has always been to become a Buddhist Monk. That complete detatchment of technology seems to be quite the fantasy of all coders everywhere. Maybe that's saying something.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087109\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://franklinmint.fm\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b9ed774661a22ff8797a1e0e24f0baf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://franklinmint.fm\">Robert Sayre</a>\n                </div>\n                <a href=\"#comment-221087109\" class=\"permalink\"><time datetime=\"2006-11-08T03:07:32\">2006-11-08T03:07:32</time></a>\n            </div>\n            <div class=\"content\"><p>By \"collective character flaw\", I meant that I've read you and other web authors writing \"they think they know better than us\". That's not how the decision was made. And to be honest, it bothers me somewhat to read a rant on the subject that only focuses on Firefox. To me, it seems like taking advantage of an open product development process because you know we will listen, while other vendors won't. A rant that claims \"Firefox and IE and Safari suck\" would be different, because then it is an opinion on a behavior. Criticism of browser behavior is welcome, criticism of people based on tech religion is not so welcome.</p>\n\n<p>I understand that FeedBurner and others have a business interest here, but you have to understand that at least some of the things they do directly conflict with capabilities that are beneficial to browser users (that we can't deliver if it only works with half of the feeds out there). We want our users to have a coherent feed experience, with browser-specific preferences and minimal click-through screens. To that end, the screen that supplants the XSL was termed the \"feed preview\". It should show what's in the feed, and default to user-specified feed preferences. If the feed doesn't contain ads for aggregators and feed services (and wrong instructions), a preview that shows that stuff deceives our users. Not in an evil way, but in a \"bad usability\" way. When combined with authors who <em>want</em> a browser feed screen with a stylesheet for older browsers, and Safari/IE7 behavior, the scales tilted away from  using the XSL.</p>\n\n<p>I understand that people disagree here. But the fact that all browser vendors have done something that doesn't align with the way they used to do it should tell you that the issue is more complicated than \"author's intent\", for better or worse.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087111\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221087111\" class=\"permalink\"><time datetime=\"2006-11-08T04:38:57\">2006-11-08T04:38:57</time></a>\n            </div>\n            <div class=\"content\"><p>Robert:  You have a great point there - I do in fact think that Firefox, IE, and Safari all suck with this current change in feed handling.  And yeah, the only reason I ranted about Firefox is because I think it's the only one of the three there's much chance in affecting.  It's also the only browser I use, so it's the first one where the feed handling change really sunk in for me.  I really haven't cared about it until just now.</p>\n\n<p>Of course, I've been nowhere near participating in the newsgroups or code checkins or anything whatsoever related to actually contributing to Firefox - so this is all blog-chair quarterbacking from a syndication feeds enthusiast.</p>\n\n<p>As for the \"they think they know better than us\" issue, I think it can be found in <a href=\"http://groups.google.com/group/mozilla.dev.apps.firefox/browse_thread/thread/146f70eaf0e1686f/1daec246d79c7dbd#ccd0a66d6a204f49\" rel=\"nofollow\">a newsgroup response like Mike Shaver's</a>:</p>\n\n<blockquote>\n  <p>... one significant motivation was that very many uses of XSLT-on-RSS was to create a page that said \"this is not <em>for</em> you browsers, go to the main site instead\", which is not what we wanted the user's experience to be.  Distinguishing those cases from the \"righteous use of XSLT for dual presentation\" ones is a publishable result, I submit.</p>\n</blockquote>\n\n<p>To this, the most vocal respondents say, \"But I <em>really want</em> my users to experience my righteous XSLT!\"  Even if it has flaming GIFs, dancing hamsters, and cat pictures.  It's <em>righteous</em>, damn it.  (Yeah, the quoted \"righteous\" is a little off-putting when you actually think the XSLT thing is kind of keen.)</p>\n\n<p>Why not apply the new-and-improved styling by default and bow out when there's a processing instruction?  Then, spread the word - \"Get rid of your cruddy not-for-you XSLT!\"  I'm sure you'd get lots of converts grateful to stop screwing with their feeds, which would leave the outlier nutters like me and FeedBurner to keep happily shooting themselves in the feet.  Instead, I see, \"style 'em all and let hacks sort 'em out,\" which totally rubs me the wrong way.</p>\n\n<p>At this point, I'm really just mildly disappointed, and feel like I've gotten a downgrade in an otherwise all-around great new browser.  I'm not <em>actually</em> looking to farm sheep over this.  There is a hack-around available for IE7 and FF2, so at least there's that.</p>\n\n<p>I guess what would make me feel like I'd gotten a decent consolation prize would be if that Feed Preview screen were significantly richer and easier on the eyes than the other browsers' offerings.  I'm assuming that's projected for the future.  Maybe what I need is to do a checkout and dig around.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087112\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.mpwilson.com/uccu/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=02ffe238ed68da35e8037df461552234&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.mpwilson.com/uccu/\">Mad William Flint</a>\n                </div>\n                <a href=\"#comment-221087112\" class=\"permalink\"><time datetime=\"2006-11-08T04:41:06\">2006-11-08T04:41:06</time></a>\n            </div>\n            <div class=\"content\"><p>CraigM: You may want to reconsider.  I've known WAY too many buddhist monk programmers in my day.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087113\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://jclark.org/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d0a9ab4b71ce193e98b7284ca257e327&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://jclark.org/weblog/\">Jason Clark</a>\n                </div>\n                <a href=\"#comment-221087113\" class=\"permalink\"><time datetime=\"2006-11-08T13:19:11\">2006-11-08T13:19:11</time></a>\n            </div>\n            <div class=\"content\"><p>conscious Robert:  Why do you keep seeing people writing \"they think they know better than us\"?  Because Mozilla has chosen to ignore an Author's preferences when displaying a feed.  Period.  You can explain it all you want, your reasoning may even be right- but the bottom line is, Mozilla made a conscious decision to ignore styling instructions included by the feed's author.  The only reasons I can think of to do this is to be perverse (which I doubt), or because you think you know better (and from here on out, I use the collective you for Mozilla, because I'm tired of typing Mozilla).</p>\n\n<p>You claim it's better for users.  I say you think you know better what is good for your users than the feed author does.  This is the same feed author that created the feed's content, and the stylesheet, and decided to present the feed to users with the stylesheet.  I'm sorry, I just don't buy it.</p>\n\n<p>Another non-starter is the IE7/Safari argument.  I don't care what those browsers do; I chose Firefox because it decided to lead, not follow, when it comes to standards.  Whether you believe that displaying RSS feeds with stylesheets is a standards issue or not, you can't deny it was a de-facto standard until recently.</p>\n\n<p>And what about those authors who only want their stylesheets applied in older browsers that aren't as enlightened as IE7?  Not that I've seen a public outcry from these authors in any of the forums discussing this \"feature\", but let's assume they must exist.  They were smart enought to add the stylesheet to their feed, why not allow them to also add to their feed an indication that a browser's built in styling may trump the linked stylesheet (perhaps a PI)?  Wouldn't that allow both types of authors to get what they want without wasting bandwidth in 1/2 kb increments of sheer hack?  </p>\n\n<p>I've read the arguments, here, on the buglist, and in the newsgroups.  To me, and I suspect, to many others, Mozilla (or those who made this decision within Mozilla) has acted as though they think they know better than web site authors.  Explanations such as yours appear to me as an explanation of why you think that, not a refutation that you don't.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087115\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://jclark.org/weblog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d0a9ab4b71ce193e98b7284ca257e327&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://jclark.org/weblog/\">Jason Clark</a>\n                </div>\n                <a href=\"#comment-221087115\" class=\"permalink\"><time datetime=\"2006-11-08T13:21:50\">2006-11-08T13:21:50</time></a>\n            </div>\n            <div class=\"content\"><p>Regarding the above:  Sorry about the extra \"conscious\" at the beginning.... I was typing my comment in a text editor, and used the comment form to check the spelling of that word.  Forgot to delete it when I pasted in my comment.  It is not a poorly-formed attack on Robert :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087116\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Tim</a>\n                </div>\n                <a href=\"#comment-221087116\" class=\"permalink\"><time datetime=\"2006-11-27T04:16:54\">2006-11-27T04:16:54</time></a>\n            </div>\n            <div class=\"content\"><p>I, as a user, don't think feeds should be styled. Feeds are used in ways where styles are not easy to apply, would cause theming chaos, and just look good when all in the same style.</p>\n\n<p>That said, I heard Firefox 2.0 has an ugly default style, which, I guess, should be improved. I like IE7s feed view. Oh, and the arbitrary 512 byte switch is odd - reminds me of Internet Explorer's Friendly HTTP errors... Which weren't that friendly.</p>\n\n<p>Hm, I might not be thinking in the same way a regular user is thinking...</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/07/firefox-rss-xsl-from-anger-to-apathy"
  },
  {
    "comments_archived": true,
    "date": "2006-11-06T18:14:26.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "outliners",
      "javascript",
      "xoxooutliner",
      "projects",
      "eventdelegation"
    ],
    "title": "XoxoOutliner rewrite coming, now with event delegation",
    "wordpress_id": 1013,
    "wordpress_slug": "xoxooutliner-rewrite-coming-now-with-event-delegation",
    "wordpress_url": "http://decafbad.com/blog/2006/11/06/xoxooutliner-rewrite-coming-now-with-event-delegation",
    "year": "2006",
    "month": "11",
    "day": "06",
    "isDir": false,
    "slug": "xoxooutliner-rewrite-coming-now-with-event-delegation",
    "postName": "2006-11-06-xoxooutliner-rewrite-coming-now-with-event-delegation",
    "html": "<p>For what it&#39;s worth: I&#39;ve answered my own <a href=\"http://decafbad.com/blog/2006/10/31/event-delegation-based-dhtml-drag-and-drop\">question about event delegation based drag and drop</a>.  It seems to work quite well on my machine, which is quite a bit beefier than my old machine.  I should try it out on there soon.  But, I&#39;ll hopefully be releasing it soon in the form of a mostly-rewritten <a href=\"http://decafbad.com/trac/wiki/XoxoOutliner\">XoxoOutliner</a> that will feature drag and drop outline items as well as keyboard navigation/control and in-place editing.  And, it should actually start to become useful, since I plan to also whip up a PHP-based server side bit that will handle loading and saving outlines, as well as possibly a client-side bit that can save outlines using local browser storage.  I have the technology - we&#39;ll see how far my ambitious plans take me during this hobbling sprint of development.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087316\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://db79.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=db8059b0ce0b3cf393f4de0ad7af758f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://db79.com\">Shawn Medero</a>\n</div>\n<a href=\"#comment-221087316\" class=\"permalink\"><time datetime=\"2006-11-07T11:01:11\">2006-11-07T11:01:11</time></a>\n</div>\n<div class=\"content\"><p>Great news Les! I had checked out the souce of XoxoOutliner and was thinking about playing around myself. Let me know if you'd like an additional tester. :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087318\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://overstimulate.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=50d10a8864accf0b2522c326381a4702&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://overstimulate.com\">Jesse Andrews</a>\n</div>\n<a href=\"#comment-221087318\" class=\"permalink\"><time datetime=\"2006-11-08T18:18:11\">2006-11-08T18:18:11</time></a>\n</div>\n<div class=\"content\"><p>Is there a demo of the event delegation framework you are building posted?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087319\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221087319\" class=\"permalink\"><time datetime=\"2006-11-08T18:23:29\">2006-11-08T18:23:29</time></a>\n</div>\n<div class=\"content\"><p>Nope, nothing available or posted yet.  Soon, though - hoping to check the works in before the end of the week.  It's a bit in pieces right now</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087320\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://codinginparadise.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=96da1b3d8858bfa0306b7c55d3e48270&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://codinginparadise.org\">Brad Neuberg</a>\n</div>\n<a href=\"#comment-221087320\" class=\"permalink\"><time datetime=\"2006-11-29T09:57:04\">2006-11-29T09:57:04</time></a>\n</div>\n<div class=\"content\"><p>Les, very exciting that you're jumping back into the XoXoOutliner code! I can't wait to try to hook it up to HyperScope and play with it some more. It's the best open source DHTMLly outliner out there.</p>\n<p>Two things that might help you; for local storage, I just checked in a new storage provider for Dojo Storage that will use the native storage abilities in Firefox 2 if they are available, in an automagic way; if they aren't there, then it will revert to hidden Flash like it's worked in the past. This might be useful for you; don't know what you were thinking about for local storage. There's a page up with better docs on Dojo Storage now at http://manual.dojotoolkit.org/WikiHome/DojoDotBook/Book50</p>\n<p>The second thing is I just finished an HTML to OPML outline transformer; right now it adds in the line for the HyperScope XSLT stylesheet, but it can be used by any OPML hackers who want to play with bringing HTML into the OPML world, including for things like experimenting with the kind of OPath, deep linking, and inclusion work you've hinted about in other blog entries. A blog post on it is here: http://codinginparadise.org/weblog/2006/11/html-transformer-for-hyperscope-apply.html . Might be fun for you to use in your hacking.</p>\n<p>We still need to grab drinks some time! How is your leg healing up? Hope you had a great thanksgiving.</p>\n<p>Best,\nBrad</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "For what it's worth: I've answered my own [question about event delegation based drag and drop][ednd].  It seems to work quite well on my machine, which is quite a bit beefier than my old machine.  I should try it out on there soon.  But, I'll hopefully be releasing it soon in the form of a mostly-rewritten [XoxoOutliner][xo] that will feature drag and drop outline items as well as keyboard navigation/control and in-place editing.  And, it should actually start to become useful, since I plan to also whip up a PHP-based server side bit that will handle loading and saving outlines, as well as possibly a client-side bit that can save outlines using local browser storage.  I have the technology - we'll see how far my ambitious plans take me during this hobbling sprint of development.\r\n\r\n[xo]: http://decafbad.com/trac/wiki/XoxoOutliner\r\n[ednd]: http://decafbad.com/blog/2006/10/31/event-delegation-based-dhtml-drag-and-drop\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087316\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://db79.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=db8059b0ce0b3cf393f4de0ad7af758f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://db79.com\">Shawn Medero</a>\n                </div>\n                <a href=\"#comment-221087316\" class=\"permalink\"><time datetime=\"2006-11-07T11:01:11\">2006-11-07T11:01:11</time></a>\n            </div>\n            <div class=\"content\"><p>Great news Les! I had checked out the souce of XoxoOutliner and was thinking about playing around myself. Let me know if you'd like an additional tester. :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087318\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://overstimulate.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=50d10a8864accf0b2522c326381a4702&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://overstimulate.com\">Jesse Andrews</a>\n                </div>\n                <a href=\"#comment-221087318\" class=\"permalink\"><time datetime=\"2006-11-08T18:18:11\">2006-11-08T18:18:11</time></a>\n            </div>\n            <div class=\"content\"><p>Is there a demo of the event delegation framework you are building posted?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087319\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221087319\" class=\"permalink\"><time datetime=\"2006-11-08T18:23:29\">2006-11-08T18:23:29</time></a>\n            </div>\n            <div class=\"content\"><p>Nope, nothing available or posted yet.  Soon, though - hoping to check the works in before the end of the week.  It's a bit in pieces right now</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087320\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://codinginparadise.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=96da1b3d8858bfa0306b7c55d3e48270&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://codinginparadise.org\">Brad Neuberg</a>\n                </div>\n                <a href=\"#comment-221087320\" class=\"permalink\"><time datetime=\"2006-11-29T09:57:04\">2006-11-29T09:57:04</time></a>\n            </div>\n            <div class=\"content\"><p>Les, very exciting that you're jumping back into the XoXoOutliner code! I can't wait to try to hook it up to HyperScope and play with it some more. It's the best open source DHTMLly outliner out there.</p>\n\n<p>Two things that might help you; for local storage, I just checked in a new storage provider for Dojo Storage that will use the native storage abilities in Firefox 2 if they are available, in an automagic way; if they aren't there, then it will revert to hidden Flash like it's worked in the past. This might be useful for you; don't know what you were thinking about for local storage. There's a page up with better docs on Dojo Storage now at http://manual.dojotoolkit.org/WikiHome/DojoDotBook/Book50</p>\n\n<p>The second thing is I just finished an HTML to OPML outline transformer; right now it adds in the line for the HyperScope XSLT stylesheet, but it can be used by any OPML hackers who want to play with bringing HTML into the OPML world, including for things like experimenting with the kind of OPath, deep linking, and inclusion work you've hinted about in other blog entries. A blog post on it is here: http://codinginparadise.org/weblog/2006/11/html-transformer-for-hyperscope-apply.html . Might be fun for you to use in your hacking.</p>\n\n<p>We still need to grab drinks some time! How is your leg healing up? Hope you had a great thanksgiving.</p>\n\n<p>Best,\n  Brad</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/06/xoxooutliner-rewrite-coming-now-with-event-delegation"
  },
  {
    "comments_archived": true,
    "date": "2006-10-31T21:46:40.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "js",
      "outliners",
      "outlining",
      "javascript",
      "dhtml",
      "yui"
    ],
    "title": "Event Delegation based DHTML Drag and Drop?",
    "wordpress_id": 1011,
    "wordpress_slug": "event-delegation-based-dhtml-drag-and-drop",
    "wordpress_url": "http://decafbad.com/blog/2006/10/31/event-delegation-based-dhtml-drag-and-drop",
    "year": "2006",
    "month": "10",
    "day": "31",
    "isDir": false,
    "slug": "event-delegation-based-dhtml-drag-and-drop",
    "postName": "2006-10-31-event-delegation-based-dhtml-drag-and-drop",
    "html": "<p>So, as the urge to tinker rises again, I&#39;ve started playing with <a href=\"http://developer.yahoo.com/yui/\">YUI</a> and cracked open some <a href=\"http://decafbad.com/trac/wiki/XoxoOutliner\">XoxoOutliner</a> code again.  One of the things that struck me like a bolt from the blue recently is the notion of <a href=\"http://icant.co.uk/sandbox/eventdelegation/\">event delegation</a>.  For the most part, I&#39;ve treated event bubbling as a nuisance, except for where it came in handy in keyboard input handling.  But avoiding the need to individually track events on every list element on the page via instantiated objects and methods is <em>hot</em> and <em>forehead-slappingly obvious</em> once you&#39;ve seen it working.  Just implement one set of event handlers on the outline root element (ie. UL or OL), and do the right thing as events come in from the list child elements.</p>\n<p>Thus, while I can do outline node expand/collapse with ease, my goal is to implement an <a href=\"http://icant.co.uk/sandbox/eventdelegation/\">event delegation</a> based approach to dragging outline nodes around.  Apropos of that, I&#39;ve been poking at <a href=\"http://yuiblog.com/sandbox/yui/v0114/examples/event/delegation.php\">how event delegation it works in YUI</a>.  While there&#39;s nothing much special about it in general, I&#39;ve run into a bit of a snag when it comes to drag-and-drop.</p>\n<p>See, YUI comes with a <a href=\"http://developer.yahoo.com/yui/dragdrop/\">rather nice drag-and-drop abstraction</a> that I&#39;d like to use.  That abstraction, however, requires the instantiation of lots of little objects - one per outline node.  Definitely not delegation-based: The problem is that I&#39;ll be adding and removing outline nodes at whim throughout the lifetime of the page, which would require lots of care to ensure that I&#39;m maintaining drag-and-drop wrapper objects.  I&#39;ve done that a bit in <a href=\"http://decafbad.com/trac/wiki/XoxoOutliner\">XoxoOutliner</a>; it sucks.</p>\n<p>So, I was able to build part of a delegation-based drag tracker from scratch.  I&#39;m sad to lose the other niceties that the YUI DnD offers, but it works.  The problem now, though, is the <em>drop</em> part of the equation.  I can drag elements around the page until my heart&#39;s content, but I can never quite tell in what context I&#39;ve dropped it.</p>\n<p>I poured through the source code for the YUI DnD implementation, as well as the implementation of a few other JS frameworks&#39; DnD offerings.  The general solution seems to be calculating and caching the page coordinate regions for each element relevant in the drop operation.  In my case, that usually includes every outline node on the page.  That&#39;s easy when you have lots of little objects instantiated - you just iterate through them and match up regions with the coordinates where the drag stopped.  But, part of my win with event delegation was that I don&#39;t have to maintain a pile of objects.</p>\n<p>Oh yeah, and did I mention that I don&#39;t assign IDs to all the little list items making up my outline?  And that I don&#39;t particularly feel like doing so?  That also throws a monkey wrench in the YUI DnD paradigm.</p>\n<p>The only idea I have so far is that I need to at least build a cache mapping regions to outline nodes, and keep it fairly well maintained.  That should be lighterweight than a fleet of DOM event wrappers, but still annoying.  I could trigger a cache refresh when a drag first starts, but that will probably drag down UI response.  I could trigger it whenever the outline changes, but that&#39;s just moving the burden.  And then, who knows how I&#39;ll map ID-less elements to their respective regions, while ensuring I stay clear of memory leaks.  That&#39;s still semi-voodoo to me, and I feel ashamed of that.</p>\n<p>Eh, maybe it won&#39;t be as bad as I think.  But, to anyone who understands what I just spewed:  Any ideas?</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221083066\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2d870e8df3af0d62fa636b336b17cd60&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Nick</a>\n</div>\n<a href=\"#comment-221083066\" class=\"permalink\"><time datetime=\"2006-11-01T00:19:27\">2006-11-01T00:19:27</time></a>\n</div>\n<div class=\"content\"><p>You know, Marty and I were talking tonight about how some of your posts make NO sense to us.  She even said \"it's like he's talking another fucking language\".</p>\n<p>Damn Programmers!!</p>\n<p>--nick</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083067\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://gandrew.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=de0d80e531fef9095048375a247d1149&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://gandrew.com\">Gareth Andrew</a>\n</div>\n<a href=\"#comment-221083067\" class=\"permalink\"><time datetime=\"2006-11-01T18:57:21\">2006-11-01T18:57:21</time></a>\n</div>\n<div class=\"content\"><p>I'm sure I've missed something obvious - why can't you simply use the same event delegation approach on the mouseUp event?  getTarget should return the node you've dropped on, what else do you need?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083074\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221083074\" class=\"permalink\"><time datetime=\"2006-11-01T19:18:52\">2006-11-01T19:18:52</time></a>\n</div>\n<div class=\"content\"><p>Gareth: Yup, the issue I have with the mouseUp is that getTarget gives me what was under the mouse when I let go of the button - namely, the element I've been dragging around, not the element under the thing being dragged.  In addition, for user feedback <em>during</em> the drag (ie. at mouseMove time), I want to know what's under the dragged element - so I can highlight the potential landing spot, etc.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083075\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.fluffy.co.uk/stediting/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a660afb8f1f22ce1b03ad3b532aa05b5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.fluffy.co.uk/stediting/\">Ben</a>\n</div>\n<a href=\"#comment-221083075\" class=\"permalink\"><time datetime=\"2006-11-02T13:10:53\">2006-11-02T13:10:53</time></a>\n</div>\n<div class=\"content\"><p>I presume the problem is that, given a point on the screen, you want to find exactly what DOM element is beneath it.</p>\n<p>I found a solution for this in my proof-of-concept structured editor http://www.fluffy.co.uk/stediting/ -- you need to know where the mouse was clicked to insert the caret.</p>\n<p>It might be a start anyway.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083078\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\">misuba</a>\n</div>\n<a href=\"#comment-221083078\" class=\"permalink\"><time datetime=\"2006-11-06T02:40:19\">2006-11-06T02:40:19</time></a>\n</div>\n<div class=\"content\"><p>I think the dragdrop stuff in scriptaculous would get you most of this... at least, it is good about draggable elements having handles you can specify (e.g. child elements of the thing you want to drag), and flexible about what sorts of targets you can land on.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083084\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221083084\" class=\"permalink\"><time datetime=\"2006-11-06T19:06:03\">2006-11-06T19:06:03</time></a>\n</div>\n<div class=\"content\"><p>misuba: Nope, the Scriptaculous approach gives me problems too.  The first is that I don't like Prototype, unless they've stopped messing with Object.prototype since I last checked.  The second is that DnD in Scriptaculous involves juggling lots of little objects ilke most other DnD implementations I've found.  When I have an outline of 100's to 1000's of items, that really blows.  I think I've got an approach working now that's significantly lighter weight.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083085\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\">misuba</a>\n</div>\n<a href=\"#comment-221083085\" class=\"permalink\"><time datetime=\"2006-11-06T22:26:55\">2006-11-06T22:26:55</time></a>\n</div>\n<div class=\"content\"><p>I'm interested to see your approach. (FWIW, Proto hasn't touched Object.prototype for a couple of versions now.)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083086\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://javascriptmvc.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=10b3282aac613831755e42ac74acbc41&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://javascriptmvc.com\">Justin Meyer</a>\n</div>\n<a href=\"#comment-221083086\" class=\"permalink\"><time datetime=\"2008-05-31T07:43:52\">2008-05-31T07:43:52</time></a>\n</div>\n<div class=\"content\"><p>I am working on the exact same issue for JavaScriptMVC.  If you haven't seen JavaScriptMVC, check out its trunk.  In the controller2 plugin, you'll find a really nice event delegation library.</p>\n<p>I've only thought of 1 way to do event delegation drops.  It's crazy, but it might work.</p>\n<p>First, style Drags so their z-Index is LOWER than the Drops.  You want your mouse to hit the droppable areas.</p>\n<p>Once a droppable is moused over by dragging a drag to it, it creates a transparent element in the exact same position as the Droppable.  It also lowers the droppable z-Index.  This gives the appearance that the draggable is over the droppable.</p>\n<p>To simulate movement, the transparent droppable's mouseovers are sent to the draggable.</p>\n<p>On mousing out of the transparent Droppable, it sets everything back to normal.</p>\n<p>I haven't tried this yet.  The biggest issue I see is that when you grab a draggable in the middle, half of it will be behind the droppable until the mouseover happens.  This isn't ideal, but maybe there is something that can be done about that.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083088\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8f18d2579d5c8f2fb2a79c09a9234e6e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Batiste</a>\n</div>\n<a href=\"#comment-221083088\" class=\"permalink\"><time datetime=\"2009-01-20T10:06:54\">2009-01-20T10:06:54</time></a>\n</div>\n<div class=\"content\"><p>A jQuery solution for Drag and Drop with event delegation :</p>\n<p>http://batiste.dosimple.ch/blog/posts/2008-05-18-1/jquery-drag-and-drop-and-resize-event-delegation.html</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "So, as the urge to tinker rises again, I've started playing with [YUI][] and cracked open some [XoxoOutliner][] code again.  One of the things that struck me like a bolt from the blue recently is the notion of [event delegation][ed].  For the most part, I've treated event bubbling as a nuisance, except for where it came in handy in keyboard input handling.  But avoiding the need to individually track events on every list element on the page via instantiated objects and methods is *hot* and *forehead-slappingly obvious* once you've seen it working.  Just implement one set of event handlers on the outline root element (ie. UL or OL), and do the right thing as events come in from the list child elements.\r\n\r\nThus, while I can do outline node expand/collapse with ease, my goal is to implement an [event delegation][ed] based approach to dragging outline nodes around.  Apropos of that, I've been poking at [how event delegation it works in YUI][edy].  While there's nothing much special about it in general, I've run into a bit of a snag when it comes to drag-and-drop.\r\n\r\nSee, YUI comes with a [rather nice drag-and-drop abstraction][yuidd] that I'd like to use.  That abstraction, however, requires the instantiation of lots of little objects - one per outline node.  Definitely not delegation-based: The problem is that I'll be adding and removing outline nodes at whim throughout the lifetime of the page, which would require lots of care to ensure that I'm maintaining drag-and-drop wrapper objects.  I've done that a bit in [XoxoOutliner][]; it sucks.\r\n\r\nSo, I was able to build part of a delegation-based drag tracker from scratch.  I'm sad to lose the other niceties that the YUI DnD offers, but it works.  The problem now, though, is the *drop* part of the equation.  I can drag elements around the page until my heart's content, but I can never quite tell in what context I've dropped it.\r\n\r\nI poured through the source code for the YUI DnD implementation, as well as the implementation of a few other JS frameworks' DnD offerings.  The general solution seems to be calculating and caching the page coordinate regions for each element relevant in the drop operation.  In my case, that usually includes every outline node on the page.  That's easy when you have lots of little objects instantiated - you just iterate through them and match up regions with the coordinates where the drag stopped.  But, part of my win with event delegation was that I don't have to maintain a pile of objects.\r\n\r\nOh yeah, and did I mention that I don't assign IDs to all the little list items making up my outline?  And that I don't particularly feel like doing so?  That also throws a monkey wrench in the YUI DnD paradigm.\r\n\r\nThe only idea I have so far is that I need to at least build a cache mapping regions to outline nodes, and keep it fairly well maintained.  That should be lighterweight than a fleet of DOM event wrappers, but still annoying.  I could trigger a cache refresh when a drag first starts, but that will probably drag down UI response.  I could trigger it whenever the outline changes, but that's just moving the burden.  And then, who knows how I'll map ID-less elements to their respective regions, while ensuring I stay clear of memory leaks.  That's still semi-voodoo to me, and I feel ashamed of that.\r\n\r\nEh, maybe it won't be as bad as I think.  But, to anyone who understands what I just spewed:  Any ideas?\r\n\r\n[yui]: http://developer.yahoo.com/yui/\r\n[xoxooutliner]: http://decafbad.com/trac/wiki/XoxoOutliner\r\n[ed]: http://icant.co.uk/sandbox/eventdelegation/\r\n[edy]: http://yuiblog.com/sandbox/yui/v0114/examples/event/delegation.php\r\n[yuidd]: http://developer.yahoo.com/yui/dragdrop/\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221083066\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2d870e8df3af0d62fa636b336b17cd60&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Nick</a>\n                </div>\n                <a href=\"#comment-221083066\" class=\"permalink\"><time datetime=\"2006-11-01T00:19:27\">2006-11-01T00:19:27</time></a>\n            </div>\n            <div class=\"content\"><p>You know, Marty and I were talking tonight about how some of your posts make NO sense to us.  She even said \"it's like he's talking another fucking language\".</p>\n\n<p>Damn Programmers!!</p>\n\n<p>--nick</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083067\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://gandrew.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=de0d80e531fef9095048375a247d1149&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://gandrew.com\">Gareth Andrew</a>\n                </div>\n                <a href=\"#comment-221083067\" class=\"permalink\"><time datetime=\"2006-11-01T18:57:21\">2006-11-01T18:57:21</time></a>\n            </div>\n            <div class=\"content\"><p>I'm sure I've missed something obvious - why can't you simply use the same event delegation approach on the mouseUp event?  getTarget should return the node you've dropped on, what else do you need?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083074\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221083074\" class=\"permalink\"><time datetime=\"2006-11-01T19:18:52\">2006-11-01T19:18:52</time></a>\n            </div>\n            <div class=\"content\"><p>Gareth: Yup, the issue I have with the mouseUp is that getTarget gives me what was under the mouse when I let go of the button - namely, the element I've been dragging around, not the element under the thing being dragged.  In addition, for user feedback <em>during</em> the drag (ie. at mouseMove time), I want to know what's under the dragged element - so I can highlight the potential landing spot, etc.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083075\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.fluffy.co.uk/stediting/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a660afb8f1f22ce1b03ad3b532aa05b5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.fluffy.co.uk/stediting/\">Ben</a>\n                </div>\n                <a href=\"#comment-221083075\" class=\"permalink\"><time datetime=\"2006-11-02T13:10:53\">2006-11-02T13:10:53</time></a>\n            </div>\n            <div class=\"content\"><p>I presume the problem is that, given a point on the screen, you want to find exactly what DOM element is beneath it.</p>\n\n<p>I found a solution for this in my proof-of-concept structured editor http://www.fluffy.co.uk/stediting/ -- you need to know where the mouse was clicked to insert the caret.</p>\n\n<p>It might be a start anyway.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083078\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\">misuba</a>\n                </div>\n                <a href=\"#comment-221083078\" class=\"permalink\"><time datetime=\"2006-11-06T02:40:19\">2006-11-06T02:40:19</time></a>\n            </div>\n            <div class=\"content\"><p>I think the dragdrop stuff in scriptaculous would get you most of this... at least, it is good about draggable elements having handles you can specify (e.g. child elements of the thing you want to drag), and flexible about what sorts of targets you can land on.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083084\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221083084\" class=\"permalink\"><time datetime=\"2006-11-06T19:06:03\">2006-11-06T19:06:03</time></a>\n            </div>\n            <div class=\"content\"><p>misuba: Nope, the Scriptaculous approach gives me problems too.  The first is that I don't like Prototype, unless they've stopped messing with Object.prototype since I last checked.  The second is that DnD in Scriptaculous involves juggling lots of little objects ilke most other DnD implementations I've found.  When I have an outline of 100's to 1000's of items, that really blows.  I think I've got an approach working now that's significantly lighter weight.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083085\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\">misuba</a>\n                </div>\n                <a href=\"#comment-221083085\" class=\"permalink\"><time datetime=\"2006-11-06T22:26:55\">2006-11-06T22:26:55</time></a>\n            </div>\n            <div class=\"content\"><p>I'm interested to see your approach. (FWIW, Proto hasn't touched Object.prototype for a couple of versions now.)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083086\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://javascriptmvc.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=10b3282aac613831755e42ac74acbc41&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://javascriptmvc.com\">Justin Meyer</a>\n                </div>\n                <a href=\"#comment-221083086\" class=\"permalink\"><time datetime=\"2008-05-31T07:43:52\">2008-05-31T07:43:52</time></a>\n            </div>\n            <div class=\"content\"><p>I am working on the exact same issue for JavaScriptMVC.  If you haven't seen JavaScriptMVC, check out its trunk.  In the controller2 plugin, you'll find a really nice event delegation library.</p>\n\n<p>I've only thought of 1 way to do event delegation drops.  It's crazy, but it might work.</p>\n\n<p>First, style Drags so their z-Index is LOWER than the Drops.  You want your mouse to hit the droppable areas.</p>\n\n<p>Once a droppable is moused over by dragging a drag to it, it creates a transparent element in the exact same position as the Droppable.  It also lowers the droppable z-Index.  This gives the appearance that the draggable is over the droppable.</p>\n\n<p>To simulate movement, the transparent droppable's mouseovers are sent to the draggable.</p>\n\n<p>On mousing out of the transparent Droppable, it sets everything back to normal.</p>\n\n<p>I haven't tried this yet.  The biggest issue I see is that when you grab a draggable in the middle, half of it will be behind the droppable until the mouseover happens.  This isn't ideal, but maybe there is something that can be done about that.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083088\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8f18d2579d5c8f2fb2a79c09a9234e6e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Batiste</a>\n                </div>\n                <a href=\"#comment-221083088\" class=\"permalink\"><time datetime=\"2009-01-20T10:06:54\">2009-01-20T10:06:54</time></a>\n            </div>\n            <div class=\"content\"><p>A jQuery solution for Drag and Drop with event delegation :</p>\n\n<p>http://batiste.dosimple.ch/blog/posts/2008-05-18-1/jquery-drag-and-drop-and-resize-event-delegation.html</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/10/31/event-delegation-based-dhtml-drag-and-drop"
  },
  {
    "comments_archived": true,
    "date": "2006-10-29T20:34:49.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "firefox",
      "microsummaries",
      "bookmarks"
    ],
    "title": "Microsummaries and Content-Type Mysteries",
    "wordpress_id": 1010,
    "wordpress_slug": "microsummaries-and-content-type-mysteries",
    "wordpress_url": "http://decafbad.com/blog/2006/10/29/microsummaries-and-content-type-mysteries",
    "year": "2006",
    "month": "10",
    "day": "29",
    "isDir": false,
    "slug": "microsummaries-and-content-type-mysteries",
    "postName": "2006-10-29-microsummaries-and-content-type-mysteries",
    "html": "<p>One of my favorite features of the new Firefox are <a href=\"http://microsummaries.org/\">Microsummaries</a>.  They&#39;re like RSS-lite: one-liner summaries of web pages that can be used to keep bookmark titles up to date and get succinct info about a page.  For example, you could get the latest temperature from the title of a weather report bookmark, or the most recent bid price from an auction page.</p>\n<p>But, there&#39;s one thing that rubs me the wrong way, and it&#39;s this:</p>\n<pre><code>&lt;link rel=&quot;microsummary&quot; href=&quot;microsummary.txt&quot;&gt;</code></pre>\n<p>That&#39;s how you clue a client into finding the microsummary for a given HTML page.  Stick that in your head tag, and you&#39;re off.  It&#39;s just like <a href=\"http://diveintomark.org/archives/2002/05/30/rss_autodiscovery\">RSS autodiscovery</a>.  Well it is, except for an important detail: What&#39;s the Content-Type I should expect at that URL?</p>\n<p>You see, microsummaries can be provided as either a direct URL to a plain text summary of the page, or a URL to an XML-based generator providing the means to extract that plain text summary from the page.  But, as spec&#39;ed, you never know which you&#39;re going to get until you fetch the URL.  So, when trying to handle a <a href=\"http://wiki.mozilla.org/Microsummaries\">microsummary</a>, I never know whether to just use the fetched content directly as plain text or whether it&#39;s time to fire up the XSL machinery.</p>\n<p>I&#39;ve seen some sites toss in a type=&quot;text/plain&quot; or type=&quot;application/xml&quot; attribute - which is very helpful and what I really want to see - but it&#39;s not in <a href=\"http://wiki.mozilla.org/Microsummaries\">the spec</a>.  From a cursory perusal of Firefox source code, it looks like the browser tries to sniff the Content-Type header returned by the web server - but that sucks, because web servers often lie or are confused about Content-Type.  I need to read more into that source code, so I can at least do as well as Firefox does.</p>\n<p>Eh, it&#39;s a small gripe, but one on which I&#39;ve spent too much time already.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221082514\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://george.hotelling.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c7d1c8d2b1a7643236a4661e9a974dee&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://george.hotelling.net/\">George Hotelling</a>\n</div>\n<a href=\"#comment-221082514\" class=\"permalink\"><time datetime=\"2006-10-29T22:26:04\">2006-10-29T22:26:04</time></a>\n</div>\n<div class=\"content\"><p>What's the advantage of sticking it into the markup instead of just using the HTTP headers for the microsummary?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082515\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082515\" class=\"permalink\"><time datetime=\"2006-10-31T01:11:08\">2006-10-31T01:11:08</time></a>\n</div>\n<div class=\"content\"><p>Well, in the markup, I'm more confident it'll tell the intended truth.  That's easier to change many times than the server config itself to serve up the correct HTTP headers.  I know this is a shady argument - but so far in my small sample set of 8 or so sites, a third of them fed me the wrong Content-Type.  That is, \"text/HTML\" when it was plain text, \"text/HTML\" when it was an XML generator.  So, I've had to come up with some smart guesses.</p>\n<p>One example, <a href=\"http://www.markdownmonkey.com/microsummary.asp\" rel=\"nofollow\">Markdown Monkey</a>.  The site header includes a type=\"application/x.microsummary+xml\" for href=\"http://www.markdownmonkey.com/microsummary.asp\", yet the server feeds me a Content-Type: text/html header.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082517\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082517\" class=\"permalink\"><time datetime=\"2006-10-31T01:12:15\">2006-10-31T01:12:15</time></a>\n</div>\n<div class=\"content\"><p>And, of course, there's always this old horror story:</p>\n<p>http://www.xml.com/pub/a/2004/07/21/dive.html</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082518\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.melez.com/mykzilla/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4bcc1646956acd3ee25234b34da91414&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.melez.com/mykzilla/\">Myk Melez</a>\n</div>\n<a href=\"#comment-221082518\" class=\"permalink\"><time datetime=\"2006-11-01T01:33:18\">2006-11-01T01:33:18</time></a>\n</div>\n<div class=\"content\"><p>Indeed, Firefox ignores the type attribute to the  tag.  It would be great if that attribute wasn't necessary, because web servers always served the correct type, but that's clearly not the case, and allowing pages to specify the content type of their microsummaries seems likely to be as useful for microsummaries as it is for feeds.</p>\n<p>I have filed <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=358977\" rel=\"nofollow\">bug 358977</a> on the issue.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082519\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082519\" class=\"permalink\"><time datetime=\"2006-11-01T02:23:32\">2006-11-01T02:23:32</time></a>\n</div>\n<div class=\"content\"><p>Myk: Fair enough.  Excellent technology, by the way.  :)</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "One of my favorite features of the new Firefox are [Microsummaries][ms].  They're like RSS-lite: one-liner summaries of web pages that can be used to keep bookmark titles up to date and get succinct info about a page.  For example, you could get the latest temperature from the title of a weather report bookmark, or the most recent bid price from an auction page.\r\n\r\nBut, there's one thing that rubs me the wrong way, and it's this:\r\n\r\n    <link rel=\"microsummary\" href=\"microsummary.txt\">\r\n\r\nThat's how you clue a client into finding the microsummary for a given HTML page.  Stick that in your head tag, and you're off.  It's just like [RSS autodiscovery][rd].  Well it is, except for an important detail: What's the Content-Type I should expect at that URL?\r\n\r\nYou see, microsummaries can be provided as either a direct URL to a plain text summary of the page, or a URL to an XML-based generator providing the means to extract that plain text summary from the page.  But, as spec'ed, you never know which you're going to get until you fetch the URL.  So, when trying to handle a [microsummary][mst], I never know whether to just use the fetched content directly as plain text or whether it's time to fire up the XSL machinery.\r\n\r\nI've seen some sites toss in a type=\"text/plain\" or type=\"application/xml\" attribute - which is very helpful and what I really want to see - but it's not in [the spec][mst].  From a cursory perusal of Firefox source code, it looks like the browser tries to sniff the Content-Type header returned by the web server - but that sucks, because web servers often lie or are confused about Content-Type.  I need to read more into that source code, so I can at least do as well as Firefox does.\r\n\r\nEh, it's a small gripe, but one on which I've spent too much time already.\r\n\r\n[rd]: http://diveintomark.org/archives/2002/05/30/rss_autodiscovery\r\n[ms]: http://microsummaries.org/\r\n[mst]: http://wiki.mozilla.org/Microsummaries\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221082514\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://george.hotelling.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c7d1c8d2b1a7643236a4661e9a974dee&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://george.hotelling.net/\">George Hotelling</a>\n                </div>\n                <a href=\"#comment-221082514\" class=\"permalink\"><time datetime=\"2006-10-29T22:26:04\">2006-10-29T22:26:04</time></a>\n            </div>\n            <div class=\"content\"><p>What's the advantage of sticking it into the markup instead of just using the HTTP headers for the microsummary?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082515\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221082515\" class=\"permalink\"><time datetime=\"2006-10-31T01:11:08\">2006-10-31T01:11:08</time></a>\n            </div>\n            <div class=\"content\"><p>Well, in the markup, I'm more confident it'll tell the intended truth.  That's easier to change many times than the server config itself to serve up the correct HTTP headers.  I know this is a shady argument - but so far in my small sample set of 8 or so sites, a third of them fed me the wrong Content-Type.  That is, \"text/HTML\" when it was plain text, \"text/HTML\" when it was an XML generator.  So, I've had to come up with some smart guesses.</p>\n\n<p>One example, <a href=\"http://www.markdownmonkey.com/microsummary.asp\" rel=\"nofollow\">Markdown Monkey</a>.  The site header includes a type=\"application/x.microsummary+xml\" for href=\"http://www.markdownmonkey.com/microsummary.asp\", yet the server feeds me a Content-Type: text/html header.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082517\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221082517\" class=\"permalink\"><time datetime=\"2006-10-31T01:12:15\">2006-10-31T01:12:15</time></a>\n            </div>\n            <div class=\"content\"><p>And, of course, there's always this old horror story:</p>\n\n<p>http://www.xml.com/pub/a/2004/07/21/dive.html</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082518\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.melez.com/mykzilla/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4bcc1646956acd3ee25234b34da91414&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.melez.com/mykzilla/\">Myk Melez</a>\n                </div>\n                <a href=\"#comment-221082518\" class=\"permalink\"><time datetime=\"2006-11-01T01:33:18\">2006-11-01T01:33:18</time></a>\n            </div>\n            <div class=\"content\"><p>Indeed, Firefox ignores the type attribute to the  tag.  It would be great if that attribute wasn't necessary, because web servers always served the correct type, but that's clearly not the case, and allowing pages to specify the content type of their microsummaries seems likely to be as useful for microsummaries as it is for feeds.</p>\n\n<p>I have filed <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=358977\" rel=\"nofollow\">bug 358977</a> on the issue.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082519\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221082519\" class=\"permalink\"><time datetime=\"2006-11-01T02:23:32\">2006-11-01T02:23:32</time></a>\n            </div>\n            <div class=\"content\"><p>Myk: Fair enough.  Excellent technology, by the way.  :)</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/10/29/microsummaries-and-content-type-mysteries"
  },
  {
    "comments_archived": true,
    "date": "2006-09-06T19:57:42.000Z",
    "layout": "post",
    "tags": [
      "ajax",
      "webdev",
      "hyperscope",
      "engelbart",
      "augment",
      "js",
      "outliners"
    ],
    "title": "Futility in alternate pasts and futures in human augmentation",
    "wordpress_id": 992,
    "wordpress_slug": "futility-in-alternate-pasts-and-futures-in-human-augmentation",
    "wordpress_url": "http://decafbad.com/blog/2006/09/06/futility-in-alternate-pasts-and-futures-in-human-augmentation",
    "year": "2006",
    "month": "09",
    "day": "06",
    "isDir": false,
    "slug": "futility-in-alternate-pasts-and-futures-in-human-augmentation",
    "postName": "2006-09-06-futility-in-alternate-pasts-and-futures-in-human-augmentation",
    "html": "<blockquote cite=\"http://www.adaptivepath.com/blog/2006/09/05/the-futility-of-designing-for-an-alternate-past/\">While it’s great to draw inspiration and ideas from the past, recreating the past in the hope that it becomes the future seems like a futile idea. Does anyone really want to return to a command-line interface to manipulate documents? It’s designing for a past that never happened, one where we all became computer scientists and enjoyed manipulating documents via arcane commands.<br />...<br />A better, more productive, use of time would have been to say, what inspiration can still be gained from Engelbart’s ideas? There’s still a lot to be gleaned from his 1962 (!) paper [Augmenting Human Intellect](http://www.bootstrap.org/augdocs/friedewald030402/augmentinghumanintellect/ahi62index.html). How might some of his thoughts on collaborative intelligence be implemented in our world now, in 2006, within the technology we have now? That’s the question waiting to be solved.</blockquote><div class=\"quotesource\">Source: <a href=\"http://www.adaptivepath.com/blog/2006/09/05/the-futility-of-designing-for-an-alternate-past/\">adaptive path » blog » blog archive » The Futility of Designing for an Alternate Past</a></div>\n\n<p>Allow me to engage in some Devil&#39;s Advocacy here - although I really am an Engelbart sympathizer:  </p>\n<p>Consider a program like Microsoft Word, with all its ribbons and toolbars and menus and animated assistance.  When you first started working with it, you probably spent time navigating these visual and guided parts of the user interface to get your job done.  But, after awhile, you probably discovered keyboard shortcuts and accellerators - CTRL-s to save, for instance.  These have likely been invaluable in speeding up your work and helping the application get out of your way.  So, having reached this point, do you ever really have a use for the &quot;user friendly&quot; bits anymore?  Or, have you graduated to &quot;manipulating documents via arcane commands&quot;?</p>\n<p>What if this application had never sugar-coated things and had instead optimized for efficiency and ergonomics in daily expert operation, trading an &quot;intuitive interface&quot; for an offer to incrementally train on its necessarily complex functionality?  After awhile, you&#39;ll have it all down, and be ready to shed the training wheels.</p>\n<p>What if - instead of a maze of menus and toolbar icons - your mouse just had dozens of easily-accessible buttons?  You&#39;re used to only having a left and a right click from which to choose.  If you&#39;ve splurged, you might have the more expansive choices offered by a fancier pointing device.  But, what if you had a chording keyboard under your off-mouse hand, offering an order of magnitude more mouse pointer actions?  </p>\n<p>For example, how about a &quot;delete word&quot; mouse button?  Or a &quot;copy sentence&quot; button?  Or maybe even a &quot;jump to the selected link with a custom view filter&quot; button?  The important part is that these commands act <strong>immediately</strong>, <em>just like a mouse button</em>, upon whatever&#39;s under the pointer.  There&#39;s no left-click then CTRL-x to Cut - no, you just point at a word, and say &quot;cut that&quot;.  There&#39;s a lot of power and efficiency here.</p>\n<p>These &quot;what if&quot; scenarios are not just wishful thinking, though.  They&#39;re what Doug Engelbart and crew implemented.  These are things I picked up after being invited to try a hands-on self-guided tour of <a href=\"http://codinginparadise.org/weblog/2006/03/new-screencast-of-douglas-engelbarts.html\">Augment</a>.  I only wish I&#39;d had a chording keyboard to get the full experience.  The interface was like a mouse-heavy <a href=\"http://www.vim.org/\">VIM</a>, with verb-object command patterns and structured document interactions.  (Or, rather, <a href=\"http://www.vim.org/\">VIM</a> is like a mouse- and outline-deficient derivation of Augment.)  </p>\n<p>The basic core of this facet of <a href=\"http://codinginparadise.org/weblog/2006/03/new-screencast-of-douglas-engelbarts.html\">Augment</a> is this:  Computers are powerful tools with great potential to augment human intellect.  As such, they offer a lot of complex functionality.  But, human beings are trainable, and can assimilate this functionality.  Once assimilated, it&#39;s best to squeeze out all the performance you can.  You don&#39;t see today&#39;s degree of computer &quot;user friendliness&quot; in chainsaws, tanks, jack-hammers, semi-trucks, or fighter jets.  These things are necessarily complex and require training.  Why should the most powerful of intelligence enhancement tools offered by computers be any different?  Of course, you generally won&#39;t lose a limb to a computer, but you might be mentally impaired or lose valuable work in the process.</p>\n<p>This is, I think, one of the still-relevant central facets of Doug Engelbart&#39;s ideas that could use some re-examination today.  It could just be because I&#39;m an übernerd who thinks it&#39;s fun to self-train on things like <a href=\"http://www.vim.org/\">VIM</a> and <a href=\"http://codinginparadise.org/weblog/2006/03/new-screencast-of-douglas-engelbarts.html\">Augment</a>, but I also think that there&#39;s a lot of potential to be unlocked once you clear away expectations of &quot;intuitive interfaces&quot; that are <a href=\"http://www.greenend.org.uk/rjk/2002/08/nipple.html\">decidedly not nipples</a>.  </p>\n<p>And, since I&#39;ve <a href=\"http://decafbad.com/blog/2006/09/06/world-of-warcraft-is-my-world-of-warcraft\">admitted my recently acquired semi-addiction</a>, consider World of Warcraft as an expert application.  Advanced players could never succeed by navigating a complex yet &quot;friendly&quot; UI to invoke various spells and skills and in-game actions.  Just take a look at some of the customizations and UI revisions being offered at <a href=\"http://ui.worldofwar.net/\">this site</a>.  Some configurations of this game smack me as eerily similar to the principles of Augment.  In fact, just this weekend, I was considering blowing the dust off <a href=\"http://www.avault.com/hardware/getreview.asp?review=msstratcom\">this keyset controller</a> I used to use with Everquest, years ago.</p>\n<p>Then again, maybe it&#39;s a matter of intensity.  Coordinating with a 40-player guild to slay something from the molten bowels of the earth is a slightly different activity than composing a memo or even a few-dozen-page report.  On the other hand, I really would&#39;ve liked to strip away most of the Word interface while writing my <a href=\"#text-2\">two books</a>.  And someday, who&#39;s to say that online interpersonal collaboration in the general case won&#39;t more closely resemble a World of Warcraft raid?  Having <a href=\"http://decafbad.vox.com/library/post/reading-vernor-vinges-new-novel.html\">just read</a> <a href=\"http://www.amazon.com/exec/obidos/ASIN/0312856849/0xdecafbad01-20\">Vernor Vinge&#39;s latest book Rainbows End</a>, he makes a lot of intelligence augmentation and collaboration tasks look just like WoW.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221085202\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n</div>\n<a href=\"#comment-221085202\" class=\"permalink\"><time datetime=\"2006-09-06T21:58:26\">2006-09-06T21:58:26</time></a>\n</div>\n<div class=\"content\"><p>The fighter-jet metaphor is interesting. Obviously a fighter has a narrower scope/focus than the general computer. But perhaps there's a narrower technique/practice of intelligence augmentation that warrants a more specialized/locally-optimized interface design.</p>\n<p>But then maybe the Engelbart work isn't focused <em>enough</em> on a particular context and associated method-of-use?</p>\n<p>To relate this to a similar software offering, how important are the specific Compendium features compared to the process of IBIS?</p>\n<p>And a big factor in the ChangeFunction is how critical the problem/pain is being solved by the new offering. Can you convince people that there will be a pay-back for learning to use HyperScope that compensates for the investment, compared to other uses of your time?</p>\n<p>Let's put it this way: if you were picking between 2 start-ups to invest in, how much weight would you associate with 1 of the teams using HyperScope? How does this compare to betting on a dogfight where 1 party has an F-15 and the other a Cessna?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085203\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.synaesmedia.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=248a3c4ba8f2972427222d46954f9c1c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.synaesmedia.net\">phil jones</a>\n</div>\n<a href=\"#comment-221085203\" class=\"permalink\"><time datetime=\"2006-09-07T22:22:40\">2006-09-07T22:22:40</time></a>\n</div>\n<div class=\"content\"><p>Very nice post. </p>\n<p>And Bill's comments too. They remind me of the LEO editor for Python which was always touted as having great productivity benefits if only your team would undergo the three month training required to use it properly. Not sure if it ever took off or could. But there's something nice about the idea that LEO empowered programmers could outperform the norm.</p>\n<p>I'm convinced that there are certainly productivity improvements available to power-users, beyond anything currently dreamed of, once we step away from the assumption that \"ease of use\" equals \"1-to-1 correspondance between functionality and UI objects\".</p>\n<p>As every nerd knows, real (interesting) productivity, comes from higher levels of abstraction. And maybe what's really important about the outliner tradition (from HyperScope to MORE / UserLand / OPML to LEO) is that it remains loyal to this notion. When you collapse a block of text and ideas down to a single-line, you are essentially abstracting away from that detail and working with the higher-level description. </p>\n<p>OTOH, the Xerox Parc tradition of the GUI and direct manipulation, lost this core ideal. (At least as it was spread via Apple and Microsoft, although obviously you can probably do all sorts of powerful abstractions via a Smalltalk interface)</p>\n<p>I'm pretty sure that this insight is general. The really interesting innovations beyond HyperScope are going to be new ways of giving the power-users yet more abstract ways of manipulating their information. Either by folding more of it together as complex aggrogates, or allowing large-scale cross-cutting processing. (Maybe style-sheets in Word are the only other surviving popular example.)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085205\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://harold.hotelling.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5183bee2961385af94a500759bb7a372&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://harold.hotelling.net/\">Harold</a>\n</div>\n<a href=\"#comment-221085205\" class=\"permalink\"><time datetime=\"2006-09-08T22:45:31\">2006-09-08T22:45:31</time></a>\n</div>\n<div class=\"content\"><p>Y'know - this is what it is like to be an Emacs user. I've come to the opinion that the set of document formats you can work with, and the set of commands you can perform on them, should be somewhat-to-completely separate from the UI.</p>\n<p>That way, you can have a learners/beginners UI to get people up to speed, then they graduate to the intermediate UI that assumes knowledge of things like C-s, C-o, C-q etc. And of course, if an application follows strong UI design guidelines, experienced computer users might be able to start a new program in the intermediate UI. Gosh! C-o opens a file in Excel too!</p>\n<p>Then, I think there should be a choice of expert-level UIs. For example, VIM and Emacs have both grown together (VIM started small, light and fast, and Emacs stared with everything AND the kitchen sink), so that they both represent reasonable choices for a power-user's text editor.</p>\n<p>This is also one of the problems that web developers are working on (or working around). Google and others have started introducing intermediate level UI features in web apps (like shortcut keys), but try building a site that looks and feels like WoW...</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085206\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://mozdawg.blogspot.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2c2c2c8f9e42a145f54f257111c6e84d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://mozdawg.blogspot.com\">Ben Tremblay</a>\n</div>\n<a href=\"#comment-221085206\" class=\"permalink\"><time datetime=\"2006-09-12T20:35:09\">2006-09-12T20:35:09</time></a>\n</div>\n<div class=\"content\"><p>What still catches me with systems like Augment (I would call Neuberg's new incarnation \"hyperScope\".) is precisely the mousing.</p>\n<p>The war is long lost but I recall with fond pleasure how I blew a Word user away by using WP5.2 ... ^F6-P <em>boom</em> And when I rolled out the functions I'd cobbled together with WP's lovely macro language? Sonic boom. The key in that situation was that I had a large number of unique tasks and a small very number of tasks carrying a huge workload (MILSPEC change management). So it was ideal for hot-keyed macros: like shooting fish in a barrel.</p>\n<p>For one thing, unless I'm reading passively or doing some flavour of CAD my hands are nowhere near the mouse. Or, to invert that, when I'm keyboarding I have to routinely suppress my resentment with reach, swivel, click, drag, select, click, select ... interminable menus and options bla-bla-blah, and nowhere muscle memory comes into play. But even with that aside, to have to right click and then select Delete from a menu /after/ having dragged to select a block ... I can outshoot that action stream using keystrokes anyday, if the app allowed me to.</p>\n<p>I don't disagree with the fundamental insight ... far from it. But we've just barely begun to implement the foundational cognitive ergonomics. (I was gratified to see in one thread that Brad explicated his having moved Help to the upper right ... cuz that's where it is most often. When it works it works cuz it works. Tradition is sometimes/often arbitrary; life's like that and we should sometimes just suck it up.)</p>\n<p>Harold's point about expert users is, I think, key. It's merely foolish to impose a system that makes good use of habituation onto a newly arrived visitor. I'm quite sure that attentive study shows a clustering or quantum of user intention and expertise ... until and unless we contrive some seamless continuum (a terrible distraction inspired by naive perfectionism) we should focus on differentiating expters from n00bs (no diss) and serve both well. \"Intermediate level\" sounds quite appropriate ... so long as this isn't just a maelstrum of fish/foul goat/sheep confounds.</p>\n<p>Alternatively we can always fall back on the old TRW concept of making people think more like machines. There might be funding for that.\n;-P</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085208\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://mozdawg.blogspot.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2c2c2c8f9e42a145f54f257111c6e84d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://mozdawg.blogspot.com\">Ben Tremblay</a>\n</div>\n<a href=\"#comment-221085208\" class=\"permalink\"><time datetime=\"2006-09-12T20:39:47\">2006-09-12T20:39:47</time></a>\n</div>\n<div class=\"content\"><p>Muscle memory just jumped up and reminded me of this: in a situation where I was doing Print Preview a gazillion times a day Shift-F7 6 was as effortless as breathing. <em>snap</em></p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085209\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://vielmetti.typepad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e377f3e2140297d32460ae9a4b38ff98&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://vielmetti.typepad.com\">Edward Vielmetti</a>\n</div>\n<a href=\"#comment-221085209\" class=\"permalink\"><time datetime=\"2006-10-18T06:00:17\">2006-10-18T06:00:17</time></a>\n</div>\n<div class=\"content\"><p>I can speak as a former Emacs user and coder that the only reason I gave it up for vi was that it hurt my hands too much to make all of those funky keyboard chords, and it started to hurt my head to remember all of the time-saving things I had built.</p>\n<p>Classically there's a tradeoff between the ease of typing something and the amount of think time you have to put into remembering what to type.</p>\n<p>One thing I am annoyed by on too many blogs is the inability to tab from the comment field to the \"submit\" button, which forces a mouse event and a scroll event.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://www.adaptivepath.com/blog/2006/09/05/the-futility-of-designing-for-an-alternate-past/\">While it’s great to draw inspiration and ideas from the past, recreating the past in the hope that it becomes the future seems like a futile idea. Does anyone really want to return to a command-line interface to manipulate documents? It’s designing for a past that never happened, one where we all became computer scientists and enjoyed manipulating documents via arcane commands.<br />...<br />A better, more productive, use of time would have been to say, what inspiration can still be gained from Engelbart’s ideas? There’s still a lot to be gleaned from his 1962 (!) paper [Augmenting Human Intellect](http://www.bootstrap.org/augdocs/friedewald030402/augmentinghumanintellect/ahi62index.html). How might some of his thoughts on collaborative intelligence be implemented in our world now, in 2006, within the technology we have now? That’s the question waiting to be solved.</blockquote><div class=\"quotesource\">Source: <a href=\"http://www.adaptivepath.com/blog/2006/09/05/the-futility-of-designing-for-an-alternate-past/\">adaptive path » blog » blog archive » The Futility of Designing for an Alternate Past</a></div>\r\n\r\nAllow me to engage in some Devil's Advocacy here - although I really am an Engelbart sympathizer:  \r\n\r\nConsider a program like Microsoft Word, with all its ribbons and toolbars and menus and animated assistance.  When you first started working with it, you probably spent time navigating these visual and guided parts of the user interface to get your job done.  But, after awhile, you probably discovered keyboard shortcuts and accellerators - CTRL-s to save, for instance.  These have likely been invaluable in speeding up your work and helping the application get out of your way.  So, having reached this point, do you ever really have a use for the \"user friendly\" bits anymore?  Or, have you graduated to \"manipulating documents via arcane commands\"?\r\n\r\nWhat if this application had never sugar-coated things and had instead optimized for efficiency and ergonomics in daily expert operation, trading an \"intuitive interface\" for an offer to incrementally train on its necessarily complex functionality?  After awhile, you'll have it all down, and be ready to shed the training wheels.\r\n\r\nWhat if - instead of a maze of menus and toolbar icons - your mouse just had dozens of easily-accessible buttons?  You're used to only having a left and a right click from which to choose.  If you've splurged, you might have the more expansive choices offered by a fancier pointing device.  But, what if you had a chording keyboard under your off-mouse hand, offering an order of magnitude more mouse pointer actions?  \r\n\r\nFor example, how about a \"delete word\" mouse button?  Or a \"copy sentence\" button?  Or maybe even a \"jump to the selected link with a custom view filter\" button?  The important part is that these commands act **immediately**, *just like a mouse button*, upon whatever's under the pointer.  There's no left-click then CTRL-x to Cut - no, you just point at a word, and say \"cut that\".  There's a lot of power and efficiency here.\r\n\r\nThese \"what if\" scenarios are not just wishful thinking, though.  They're what Doug Engelbart and crew implemented.  These are things I picked up after being invited to try a hands-on self-guided tour of [Augment][].  I only wish I'd had a chording keyboard to get the full experience.  The interface was like a mouse-heavy [VIM][], with verb-object command patterns and structured document interactions.  (Or, rather, [VIM][] is like a mouse- and outline-deficient derivation of Augment.)  \r\n\r\nThe basic core of this facet of [Augment][] is this:  Computers are powerful tools with great potential to augment human intellect.  As such, they offer a lot of complex functionality.  But, human beings are trainable, and can assimilate this functionality.  Once assimilated, it's best to squeeze out all the performance you can.  You don't see today's degree of computer \"user friendliness\" in chainsaws, tanks, jack-hammers, semi-trucks, or fighter jets.  These things are necessarily complex and require training.  Why should the most powerful of intelligence enhancement tools offered by computers be any different?  Of course, you generally won't lose a limb to a computer, but you might be mentally impaired or lose valuable work in the process.\r\n\r\nThis is, I think, one of the still-relevant central facets of Doug Engelbart's ideas that could use some re-examination today.  It could just be because I'm an übernerd who thinks it's fun to self-train on things like [VIM][] and [Augment][], but I also think that there's a lot of potential to be unlocked once you clear away expectations of \"intuitive interfaces\" that are [decidedly not nipples][nip].  \r\n\r\nAnd, since I've [admitted my recently acquired semi-addiction][wow], consider World of Warcraft as an expert application.  Advanced players could never succeed by navigating a complex yet \"friendly\" UI to invoke various spells and skills and in-game actions.  Just take a look at some of the customizations and UI revisions being offered at [this site][wowui].  Some configurations of this game smack me as eerily similar to the principles of Augment.  In fact, just this weekend, I was considering blowing the dust off [this keyset controller](http://www.avault.com/hardware/getreview.asp?review=msstratcom) I used to use with Everquest, years ago.\r\n\r\nThen again, maybe it's a matter of intensity.  Coordinating with a 40-player guild to slay something from the molten bowels of the earth is a slightly different activity than composing a memo or even a few-dozen-page report.  On the other hand, I really would've liked to strip away most of the Word interface while writing my [two books](#text-2).  And someday, who's to say that online interpersonal collaboration in the general case won't more closely resemble a World of Warcraft raid?  Having [just read][read] [Vernor Vinge's latest book Rainbows End][re], he makes a lot of intelligence augmentation and collaboration tasks look just like WoW.\r\n\r\n[re]: http://www.amazon.com/exec/obidos/ASIN/0312856849/0xdecafbad01-20\r\n[read]: http://decafbad.vox.com/library/post/reading-vernor-vinges-new-novel.html\r\n[wowui]: http://ui.worldofwar.net/\r\n[wow]: http://decafbad.com/blog/2006/09/06/world-of-warcraft-is-my-world-of-warcraft\r\n[nip]: http://www.greenend.org.uk/rjk/2002/08/nipple.html\r\n[vim]: http://www.vim.org/\r\n[augment]: http://codinginparadise.org/weblog/2006/03/new-screencast-of-douglas-engelbarts.html\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221085202\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n                </div>\n                <a href=\"#comment-221085202\" class=\"permalink\"><time datetime=\"2006-09-06T21:58:26\">2006-09-06T21:58:26</time></a>\n            </div>\n            <div class=\"content\"><p>The fighter-jet metaphor is interesting. Obviously a fighter has a narrower scope/focus than the general computer. But perhaps there's a narrower technique/practice of intelligence augmentation that warrants a more specialized/locally-optimized interface design.</p>\n\n<p>But then maybe the Engelbart work isn't focused <em>enough</em> on a particular context and associated method-of-use?</p>\n\n<p>To relate this to a similar software offering, how important are the specific Compendium features compared to the process of IBIS?</p>\n\n<p>And a big factor in the ChangeFunction is how critical the problem/pain is being solved by the new offering. Can you convince people that there will be a pay-back for learning to use HyperScope that compensates for the investment, compared to other uses of your time?</p>\n\n<p>Let's put it this way: if you were picking between 2 start-ups to invest in, how much weight would you associate with 1 of the teams using HyperScope? How does this compare to betting on a dogfight where 1 party has an F-15 and the other a Cessna?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085203\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.synaesmedia.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=248a3c4ba8f2972427222d46954f9c1c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.synaesmedia.net\">phil jones</a>\n                </div>\n                <a href=\"#comment-221085203\" class=\"permalink\"><time datetime=\"2006-09-07T22:22:40\">2006-09-07T22:22:40</time></a>\n            </div>\n            <div class=\"content\"><p>Very nice post. </p>\n\n<p>And Bill's comments too. They remind me of the LEO editor for Python which was always touted as having great productivity benefits if only your team would undergo the three month training required to use it properly. Not sure if it ever took off or could. But there's something nice about the idea that LEO empowered programmers could outperform the norm.</p>\n\n<p>I'm convinced that there are certainly productivity improvements available to power-users, beyond anything currently dreamed of, once we step away from the assumption that \"ease of use\" equals \"1-to-1 correspondance between functionality and UI objects\".</p>\n\n<p>As every nerd knows, real (interesting) productivity, comes from higher levels of abstraction. And maybe what's really important about the outliner tradition (from HyperScope to MORE / UserLand / OPML to LEO) is that it remains loyal to this notion. When you collapse a block of text and ideas down to a single-line, you are essentially abstracting away from that detail and working with the higher-level description. </p>\n\n<p>OTOH, the Xerox Parc tradition of the GUI and direct manipulation, lost this core ideal. (At least as it was spread via Apple and Microsoft, although obviously you can probably do all sorts of powerful abstractions via a Smalltalk interface)</p>\n\n<p>I'm pretty sure that this insight is general. The really interesting innovations beyond HyperScope are going to be new ways of giving the power-users yet more abstract ways of manipulating their information. Either by folding more of it together as complex aggrogates, or allowing large-scale cross-cutting processing. (Maybe style-sheets in Word are the only other surviving popular example.)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085205\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://harold.hotelling.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5183bee2961385af94a500759bb7a372&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://harold.hotelling.net/\">Harold</a>\n                </div>\n                <a href=\"#comment-221085205\" class=\"permalink\"><time datetime=\"2006-09-08T22:45:31\">2006-09-08T22:45:31</time></a>\n            </div>\n            <div class=\"content\"><p>Y'know - this is what it is like to be an Emacs user. I've come to the opinion that the set of document formats you can work with, and the set of commands you can perform on them, should be somewhat-to-completely separate from the UI.</p>\n\n<p>That way, you can have a learners/beginners UI to get people up to speed, then they graduate to the intermediate UI that assumes knowledge of things like C-s, C-o, C-q etc. And of course, if an application follows strong UI design guidelines, experienced computer users might be able to start a new program in the intermediate UI. Gosh! C-o opens a file in Excel too!</p>\n\n<p>Then, I think there should be a choice of expert-level UIs. For example, VIM and Emacs have both grown together (VIM started small, light and fast, and Emacs stared with everything AND the kitchen sink), so that they both represent reasonable choices for a power-user's text editor.</p>\n\n<p>This is also one of the problems that web developers are working on (or working around). Google and others have started introducing intermediate level UI features in web apps (like shortcut keys), but try building a site that looks and feels like WoW...</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085206\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://mozdawg.blogspot.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2c2c2c8f9e42a145f54f257111c6e84d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://mozdawg.blogspot.com\">Ben Tremblay</a>\n                </div>\n                <a href=\"#comment-221085206\" class=\"permalink\"><time datetime=\"2006-09-12T20:35:09\">2006-09-12T20:35:09</time></a>\n            </div>\n            <div class=\"content\"><p>What still catches me with systems like Augment (I would call Neuberg's new incarnation \"hyperScope\".) is precisely the mousing.</p>\n\n<p>The war is long lost but I recall with fond pleasure how I blew a Word user away by using WP5.2 ... ^F6-P <em>boom</em> And when I rolled out the functions I'd cobbled together with WP's lovely macro language? Sonic boom. The key in that situation was that I had a large number of unique tasks and a small very number of tasks carrying a huge workload (MILSPEC change management). So it was ideal for hot-keyed macros: like shooting fish in a barrel.</p>\n\n<p>For one thing, unless I'm reading passively or doing some flavour of CAD my hands are nowhere near the mouse. Or, to invert that, when I'm keyboarding I have to routinely suppress my resentment with reach, swivel, click, drag, select, click, select ... interminable menus and options bla-bla-blah, and nowhere muscle memory comes into play. But even with that aside, to have to right click and then select Delete from a menu /after/ having dragged to select a block ... I can outshoot that action stream using keystrokes anyday, if the app allowed me to.</p>\n\n<p>I don't disagree with the fundamental insight ... far from it. But we've just barely begun to implement the foundational cognitive ergonomics. (I was gratified to see in one thread that Brad explicated his having moved Help to the upper right ... cuz that's where it is most often. When it works it works cuz it works. Tradition is sometimes/often arbitrary; life's like that and we should sometimes just suck it up.)</p>\n\n<p>Harold's point about expert users is, I think, key. It's merely foolish to impose a system that makes good use of habituation onto a newly arrived visitor. I'm quite sure that attentive study shows a clustering or quantum of user intention and expertise ... until and unless we contrive some seamless continuum (a terrible distraction inspired by naive perfectionism) we should focus on differentiating expters from n00bs (no diss) and serve both well. \"Intermediate level\" sounds quite appropriate ... so long as this isn't just a maelstrum of fish/foul goat/sheep confounds.</p>\n\n<p>Alternatively we can always fall back on the old TRW concept of making people think more like machines. There might be funding for that.\n;-P</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085208\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://mozdawg.blogspot.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2c2c2c8f9e42a145f54f257111c6e84d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://mozdawg.blogspot.com\">Ben Tremblay</a>\n                </div>\n                <a href=\"#comment-221085208\" class=\"permalink\"><time datetime=\"2006-09-12T20:39:47\">2006-09-12T20:39:47</time></a>\n            </div>\n            <div class=\"content\"><p>Muscle memory just jumped up and reminded me of this: in a situation where I was doing Print Preview a gazillion times a day Shift-F7 6 was as effortless as breathing. <em>snap</em></p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085209\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://vielmetti.typepad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e377f3e2140297d32460ae9a4b38ff98&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://vielmetti.typepad.com\">Edward Vielmetti</a>\n                </div>\n                <a href=\"#comment-221085209\" class=\"permalink\"><time datetime=\"2006-10-18T06:00:17\">2006-10-18T06:00:17</time></a>\n            </div>\n            <div class=\"content\"><p>I can speak as a former Emacs user and coder that the only reason I gave it up for vi was that it hurt my hands too much to make all of those funky keyboard chords, and it started to hurt my head to remember all of the time-saving things I had built.</p>\n\n<p>Classically there's a tradeoff between the ease of typing something and the amount of think time you have to put into remembering what to type.</p>\n\n<p>One thing I am annoyed by on too many blogs is the inability to tab from the comment field to the \"submit\" button, which forces a mouse event and a scroll event.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/09/06/futility-in-alternate-pasts-and-futures-in-human-augmentation"
  },
  {
    "comments_archived": true,
    "date": "2006-08-24T12:58:04.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "amazon",
      "s3",
      "ec2",
      "webservices"
    ],
    "title": "Amazon EC2 emerges",
    "wordpress_id": 984,
    "wordpress_slug": "amazon-ec2-emerges",
    "wordpress_url": "http://decafbad.com/blog/2006/08/24/amazon-ec2-emerges",
    "year": "2006",
    "month": "08",
    "day": "24",
    "isDir": false,
    "slug": "amazon-ec2-emerges",
    "postName": "2006-08-24-amazon-ec2-emerges",
    "html": "<blockquote cite=\"http://www.amazon.com/b/ref=sc_fe_c_1_3435361_1/002-3833110-2752034?ie=UTF8&node=201590011&no=3435361&me=A36L942TSJ2AJA\"><p>Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides resizable compute capacity in the cloud. It is designed to make web-scale computing easier for developers.\n</p><p>\nJust as Amazon Simple Storage Service (Amazon S3) enables storage in the cloud, Amazon EC2 enables \"compute\" in the cloud.</p></blockquote><div class=\"quotesource\">Source: <a href=\"http://www.amazon.com/b/ref=sc_fe_c_1_3435361_1/002-3833110-2752034?ie=UTF8&node=201590011&no=3435361&me=A36L942TSJ2AJA\">Amazon.com Amazon Web Services Store: Amazon EC2 / Amazon Web Services</a></div>\n\n<p>This seems like the sound of the second shoe hitting the floor.  Although I tried signing up for this as soon as I saw the email, I was already too late to get in on the beta and start playing.  Maybe I&#39;ll get in on a second round.</p>\n<p>EC2 seems a lot like <a href=\"http://user-mode-linux.sourceforge.net/\">User Mode Linux</a> virtual hosting, but it charges <del>by the CPU hour</del> by the hour of uptime instead of month-to-month.  I&#39;ll be very interested to see how this shakes out, and what sort of web app architecture it encourages when used in conjunction with S3 - say <a href=\"http://weblog.infoworld.com/udell/2006/07/07.html\">AJAX-based queues</a> for instance? - or if it just gets used as a straight <a href=\"http://en.wikipedia.org/wiki/LAMP_(software_bundle)\">LAMP</a> host in general.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221088886\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.sencer.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0e94b4d4662542b91df48f0ff3b36d26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.sencer.de\">Sencer</a>\n</div>\n<a href=\"#comment-221088886\" class=\"permalink\"><time datetime=\"2006-08-24T15:27:46\">2006-08-24T15:27:46</time></a>\n</div>\n<div class=\"content\"><blockquote>\n<p>it charges by the CPU hour</p>\n</blockquote>\n<p>Just to prevent confusion: They call it instance hours and mean the hours a vm/instance has been running (independent of utilization). \nOnly saying this, beause some hosts, like dreamhost, use(d) the term CPU-minutes for keeping track of \"how much time a processor spends working for your username\" and allow(ed) sth. like 60 CPU-minutes a day.</p>\n<p>At least that's how I understand the amazon offer.</p>\n<p>And thanks for the pointer! It'll be intereting to watch what people are going to come up with. Given that the instances are not \"persistent\", i.e. data is gone when you stop them (unless you move things int S3 or elsewhere), I am assuming that they <em>will</em> be used differently from regular dedicated machines. </p>\n<p>It reminds a little bit of DSL (Damnsmalllinux) which boots/runs of a CD, but allows you to save all your data and customization to an external storage (usb/ftp/etc.) and does auto-restore when you boot into it again. This is nice for people afraid of viruses or getting hacked etc.. I wonder whether this will turn out to be a plus for amazons offer as well. At first it does make things a bit more complicated wrt to usual linux way. But I guess tose things can be solved...</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088888\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088888\" class=\"permalink\"><time datetime=\"2006-08-24T16:29:44\">2006-08-24T16:29:44</time></a>\n</div>\n<div class=\"content\"><p>Sencer: Actually, I think your reading is the right one.  It's charge per hour of uptime of the instance, and not a meter on CPU cycles.  \n</p><p>\nSo, to do a quick napkin calculation - $0.10 per hour x 24 hours x 31 days = $74.40 per month to keep an instance running around the clock.  \n</p><p>\nThat makes me think that applications using this service will need to be designed around some clever resource usage, either through scheduled tasks or some interesting way to respond on demand.  Simply running a straight PHP app would seem a bit wasteful in many small-scale cases.</p>\n<p>If I were to run a blog from it, say, I'd lean more toward the Movable Type school of static publishing than the WordPress school of live PHP pages.  Of course, that could all be done from a behind-firewall personal desktop machine, so I need to think of a better example.</p>\n<p>Then again, being able to add and drop instances at will is a big, big deal for larger scale applications.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088891\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.jonathanboutelle.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d77d55a352cc3dc84a86510094b2dde8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.jonathanboutelle.com\">Jonathan Boutelle</a>\n</div>\n<a href=\"#comment-221088891\" class=\"permalink\"><time datetime=\"2006-08-24T17:12:09\">2006-08-24T17:12:09</time></a>\n</div>\n<div class=\"content\"><p>Let's see,  back of the envelope calculation ... that's a 10-machine cluster for 720$ /month + bandwidth. With redundant storage and firewall included. Holy crap! Web 2.0 apps just got a LOT cheaper to deploy.</p>\n<p>I am also stuck in limbo land: they sent the email out at 3AM PST, which is just rude: a west-coast company should at least wait until California and Washington wakes up before sending out a limited beta. Methinks the geeks in NYC and boston and the research triangle got all the slots.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088893\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088893\" class=\"permalink\"><time datetime=\"2006-08-24T17:57:58\">2006-08-24T17:57:58</time></a>\n</div>\n<div class=\"content\"><p>Jonathan: Yeah, I think your calculation is a better one.  Mine just reflects the fact that EC2 doesn't scale <em>down</em> to piddly little apps like I've been playing with.  But scaling up, it looks like a much better value.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088895\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://claimid.com/dne\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7cc1b40a65ed472663b1af1749e8fcb6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://claimid.com/dne\">Daniel Néri</a>\n</div>\n<a href=\"#comment-221088895\" class=\"permalink\"><time datetime=\"2006-08-24T19:04:19\">2006-08-24T19:04:19</time></a>\n</div>\n<div class=\"content\"><p></p><p>It appears to be based on <a href=\"http://www.cl.cam.ac.uk/Research/SRG/netos/xen/\" rel=\"nofollow\">Xen</a>, judging from the sample hostnames in the <a href=\"http://docs.amazonwebservices.com/AmazonEC2/gsg/2006-06-26/\" rel=\"nofollow\">docs</a>.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088899\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.base4.net/Blog.aspx?ID=93\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ef0b5680532c0e0fac2fe20ef4b01929&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.base4.net/Blog.aspx?ID=93\">Alex James</a>\n</div>\n<a href=\"#comment-221088899\" class=\"permalink\"><time datetime=\"2006-08-25T11:27:19\">2006-08-25T11:27:19</time></a>\n</div>\n<div class=\"content\"><p>I agree, you need to band together with a couple of mates to make it worthwhile for really small sites. But at the high end it is amazing value. </p>\n<p>Perhaps then there is an opportunity for someone to use EC2 based websites, you could easily create an sort of ISP or ASP model using this, by putting about 20 little websites/application servers on one Image. </p>\n<p>BTW Jonathan... I'm from little old New Zealand and I managed to nab a slot!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088900\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.waituk.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=accdd07341577af9d82a220a8a0f5a2d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.waituk.com\">Website Nepal</a>\n</div>\n<a href=\"#comment-221088900\" class=\"permalink\"><time datetime=\"2007-08-31T17:23:53\">2007-08-31T17:23:53</time></a>\n</div>\n<div class=\"content\"><p>I checked out the Amazon EC2 since I am planning to offer web hosting solution somewhat similar to what EC2 are doing.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://www.amazon.com/b/ref=sc_fe_c_1_3435361_1/002-3833110-2752034?ie=UTF8&node=201590011&no=3435361&me=A36L942TSJ2AJA\"><p>Amazon Elastic Compute Cloud (Amazon EC2) is a web service that provides resizable compute capacity in the cloud. It is designed to make web-scale computing easier for developers.\r\n</p><p>\r\nJust as Amazon Simple Storage Service (Amazon S3) enables storage in the cloud, Amazon EC2 enables \"compute\" in the cloud.</p></blockquote><div class=\"quotesource\">Source: <a href=\"http://www.amazon.com/b/ref=sc_fe_c_1_3435361_1/002-3833110-2752034?ie=UTF8&node=201590011&no=3435361&me=A36L942TSJ2AJA\">Amazon.com Amazon Web Services Store: Amazon EC2 / Amazon Web Services</a></div>\r\n\r\nThis seems like the sound of the second shoe hitting the floor.  Although I tried signing up for this as soon as I saw the email, I was already too late to get in on the beta and start playing.  Maybe I'll get in on a second round.\r\n  \r\nEC2 seems a lot like [User Mode Linux][uml] virtual hosting, but it charges <del>by the CPU hour</del> by the hour of uptime instead of month-to-month.  I'll be very interested to see how this shakes out, and what sort of web app architecture it encourages when used in conjunction with S3 - say [AJAX-based queues][aq] for instance? - or if it just gets used as a straight [LAMP][] host in general.\r\n\r\n[lamp]: http://en.wikipedia.org/wiki/LAMP_(software_bundle)\r\n[uml]:http://user-mode-linux.sourceforge.net/\r\n[aq]: http://weblog.infoworld.com/udell/2006/07/07.html\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221088886\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.sencer.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0e94b4d4662542b91df48f0ff3b36d26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.sencer.de\">Sencer</a>\n                </div>\n                <a href=\"#comment-221088886\" class=\"permalink\"><time datetime=\"2006-08-24T15:27:46\">2006-08-24T15:27:46</time></a>\n            </div>\n            <div class=\"content\"><blockquote>\n  <p>it charges by the CPU hour</p>\n</blockquote>\n\n<p>Just to prevent confusion: They call it instance hours and mean the hours a vm/instance has been running (independent of utilization). \nOnly saying this, beause some hosts, like dreamhost, use(d) the term CPU-minutes for keeping track of \"how much time a processor spends working for your username\" and allow(ed) sth. like 60 CPU-minutes a day.</p>\n\n<p>At least that's how I understand the amazon offer.</p>\n\n<p>And thanks for the pointer! It'll be intereting to watch what people are going to come up with. Given that the instances are not \"persistent\", i.e. data is gone when you stop them (unless you move things int S3 or elsewhere), I am assuming that they <em>will</em> be used differently from regular dedicated machines. </p>\n\n<p>It reminds a little bit of DSL (Damnsmalllinux) which boots/runs of a CD, but allows you to save all your data and customization to an external storage (usb/ftp/etc.) and does auto-restore when you boot into it again. This is nice for people afraid of viruses or getting hacked etc.. I wonder whether this will turn out to be a plus for amazons offer as well. At first it does make things a bit more complicated wrt to usual linux way. But I guess tose things can be solved...</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088888\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088888\" class=\"permalink\"><time datetime=\"2006-08-24T16:29:44\">2006-08-24T16:29:44</time></a>\n            </div>\n            <div class=\"content\"><p>Sencer: Actually, I think your reading is the right one.  It's charge per hour of uptime of the instance, and not a meter on CPU cycles.  \n</p><p>\nSo, to do a quick napkin calculation - $0.10 per hour x 24 hours x 31 days = $74.40 per month to keep an instance running around the clock.  \n</p><p>\nThat makes me think that applications using this service will need to be designed around some clever resource usage, either through scheduled tasks or some interesting way to respond on demand.  Simply running a straight PHP app would seem a bit wasteful in many small-scale cases.</p>\n\n<p>If I were to run a blog from it, say, I'd lean more toward the Movable Type school of static publishing than the WordPress school of live PHP pages.  Of course, that could all be done from a behind-firewall personal desktop machine, so I need to think of a better example.</p>\n\n<p>Then again, being able to add and drop instances at will is a big, big deal for larger scale applications.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088891\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.jonathanboutelle.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d77d55a352cc3dc84a86510094b2dde8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.jonathanboutelle.com\">Jonathan Boutelle</a>\n                </div>\n                <a href=\"#comment-221088891\" class=\"permalink\"><time datetime=\"2006-08-24T17:12:09\">2006-08-24T17:12:09</time></a>\n            </div>\n            <div class=\"content\"><p>Let's see,  back of the envelope calculation ... that's a 10-machine cluster for 720$ /month + bandwidth. With redundant storage and firewall included. Holy crap! Web 2.0 apps just got a LOT cheaper to deploy.</p>\n\n<p>I am also stuck in limbo land: they sent the email out at 3AM PST, which is just rude: a west-coast company should at least wait until California and Washington wakes up before sending out a limited beta. Methinks the geeks in NYC and boston and the research triangle got all the slots.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088893\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088893\" class=\"permalink\"><time datetime=\"2006-08-24T17:57:58\">2006-08-24T17:57:58</time></a>\n            </div>\n            <div class=\"content\"><p>Jonathan: Yeah, I think your calculation is a better one.  Mine just reflects the fact that EC2 doesn't scale <em>down</em> to piddly little apps like I've been playing with.  But scaling up, it looks like a much better value.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088895\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://claimid.com/dne\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7cc1b40a65ed472663b1af1749e8fcb6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://claimid.com/dne\">Daniel Néri</a>\n                </div>\n                <a href=\"#comment-221088895\" class=\"permalink\"><time datetime=\"2006-08-24T19:04:19\">2006-08-24T19:04:19</time></a>\n            </div>\n            <div class=\"content\"><p></p><p>It appears to be based on <a href=\"http://www.cl.cam.ac.uk/Research/SRG/netos/xen/\" rel=\"nofollow\">Xen</a>, judging from the sample hostnames in the <a href=\"http://docs.amazonwebservices.com/AmazonEC2/gsg/2006-06-26/\" rel=\"nofollow\">docs</a>.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088899\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.base4.net/Blog.aspx?ID=93\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ef0b5680532c0e0fac2fe20ef4b01929&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.base4.net/Blog.aspx?ID=93\">Alex James</a>\n                </div>\n                <a href=\"#comment-221088899\" class=\"permalink\"><time datetime=\"2006-08-25T11:27:19\">2006-08-25T11:27:19</time></a>\n            </div>\n            <div class=\"content\"><p>I agree, you need to band together with a couple of mates to make it worthwhile for really small sites. But at the high end it is amazing value. </p>\n\n<p>Perhaps then there is an opportunity for someone to use EC2 based websites, you could easily create an sort of ISP or ASP model using this, by putting about 20 little websites/application servers on one Image. </p>\n\n<p>BTW Jonathan... I'm from little old New Zealand and I managed to nab a slot!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088900\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.waituk.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=accdd07341577af9d82a220a8a0f5a2d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.waituk.com\">Website Nepal</a>\n                </div>\n                <a href=\"#comment-221088900\" class=\"permalink\"><time datetime=\"2007-08-31T17:23:53\">2007-08-31T17:23:53</time></a>\n            </div>\n            <div class=\"content\"><p>I checked out the Amazon EC2 since I am planning to offer web hosting solution somewhat similar to what EC2 are doing.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/08/24/amazon-ec2-emerges"
  },
  {
    "comments_archived": true,
    "date": "2006-08-19T19:18:42.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "wordpress",
      "metablogging",
      "webdev",
      "identity"
    ],
    "title": "about me as a plugin",
    "wordpress_id": 980,
    "wordpress_slug": "about-me-as-a-plugin",
    "wordpress_url": "http://decafbad.com/blog/2006/08/19/about-me-as-a-plugin",
    "year": "2006",
    "month": "08",
    "day": "19",
    "isDir": false,
    "slug": "about-me-as-a-plugin",
    "postName": "2006-08-19-about-me-as-a-plugin",
    "html": "<blockquote cite=\"http://www.voidstar.com/node.php?id=2779\">We need both ends of this. We need the social networks to be able to import the data. But we also need the personal blog software to support an \"About Me\" page that maintains and publishes the master copy.</blockquote><div class=\"quotesource\">Source: <a href=\"http://www.voidstar.com/node.php?id=2779\">Voidstar - Personal About Me Pages and account creation</a></div>\n\n<p>This sounds like a perfect job for a decent WordPress plugin, which could double as a standalone PHP app.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221088157\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://protocol7.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=817b8e1e4735de76cf27a9d3976bd66b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://protocol7.com\">Niklas Gustavsson</a>\n</div>\n<a href=\"#comment-221088157\" class=\"permalink\"><time datetime=\"2006-08-21T19:25:37\">2006-08-21T19:25:37</time></a>\n</div>\n<div class=\"content\"><p>Sounds a lot like what the OpenID protocol with the Simple Registration extension aims at. Using, for example, the PHP implementation of the OpenID server, you could maintain your identity (as long as it supports Simple Registration). Then, at the site where you'r required to register, you simply fill in your OpenID identifier and the rest is magic. </p>\n<p>There is also a Wordpress plugin (http://singpolyma-tech.blogspot.com/2006/04/openid-for-wordpress.html) available that will run a server within Wordpress, if that's what you would like.</p>\n<p>Personally I use the myopenid.com server, but running your own should be just fine. That's the point of a distributed identity system :-) You can read a little bit more about my experience setting it up in Wordpress here: http://www.protocol7.com/archives/2006/08/21/openid-on-protocol7/</p>\n<p>/niklas</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088159\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221088159\" class=\"permalink\"><time datetime=\"2006-08-21T20:12:53\">2006-08-21T20:12:53</time></a>\n</div>\n<div class=\"content\"><p>Having an OpenID endpoint here is one part of what I'd like to do.  The other is a kind of NetVibes-ish public aggregation of all my output from other sites, and to point new services here as I join them to import my already-provided details.  So, beyond the auth that OpenID provides, I want other sites to read my hCard and profile data etc.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088161\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://protocol7.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=817b8e1e4735de76cf27a9d3976bd66b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://protocol7.com\">Niklas Gustavsson</a>\n</div>\n<a href=\"#comment-221088161\" class=\"permalink\"><time datetime=\"2006-08-21T22:00:10\">2006-08-21T22:00:10</time></a>\n</div>\n<div class=\"content\"><p>Not sure if it will allow for all the information you would like to provide, but simple registration does allow for a site where you authenticate with OpenID to retrive the needed data. The subset of information (http://openid.net/specs/openid-simple-registration-extension-1<em>0.html#response</em>format) might be limiting though. Of course, that won't include more rich data collected at other sites, like your del.icio.us links.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://www.voidstar.com/node.php?id=2779\">We need both ends of this. We need the social networks to be able to import the data. But we also need the personal blog software to support an \"About Me\" page that maintains and publishes the master copy.</blockquote><div class=\"quotesource\">Source: <a href=\"http://www.voidstar.com/node.php?id=2779\">Voidstar - Personal About Me Pages and account creation</a></div>\r\n\r\nThis sounds like a perfect job for a decent WordPress plugin, which could double as a standalone PHP app.\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221088157\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://protocol7.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=817b8e1e4735de76cf27a9d3976bd66b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://protocol7.com\">Niklas Gustavsson</a>\n                </div>\n                <a href=\"#comment-221088157\" class=\"permalink\"><time datetime=\"2006-08-21T19:25:37\">2006-08-21T19:25:37</time></a>\n            </div>\n            <div class=\"content\"><p>Sounds a lot like what the OpenID protocol with the Simple Registration extension aims at. Using, for example, the PHP implementation of the OpenID server, you could maintain your identity (as long as it supports Simple Registration). Then, at the site where you'r required to register, you simply fill in your OpenID identifier and the rest is magic. </p>\n\n<p>There is also a Wordpress plugin (http://singpolyma-tech.blogspot.com/2006/04/openid-for-wordpress.html) available that will run a server within Wordpress, if that's what you would like.</p>\n\n<p>Personally I use the myopenid.com server, but running your own should be just fine. That's the point of a distributed identity system :-) You can read a little bit more about my experience setting it up in Wordpress here: http://www.protocol7.com/archives/2006/08/21/openid-on-protocol7/</p>\n\n<p>/niklas</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088159\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221088159\" class=\"permalink\"><time datetime=\"2006-08-21T20:12:53\">2006-08-21T20:12:53</time></a>\n            </div>\n            <div class=\"content\"><p>Having an OpenID endpoint here is one part of what I'd like to do.  The other is a kind of NetVibes-ish public aggregation of all my output from other sites, and to point new services here as I join them to import my already-provided details.  So, beyond the auth that OpenID provides, I want other sites to read my hCard and profile data etc.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088161\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://protocol7.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=817b8e1e4735de76cf27a9d3976bd66b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://protocol7.com\">Niklas Gustavsson</a>\n                </div>\n                <a href=\"#comment-221088161\" class=\"permalink\"><time datetime=\"2006-08-21T22:00:10\">2006-08-21T22:00:10</time></a>\n            </div>\n            <div class=\"content\"><p>Not sure if it will allow for all the information you would like to provide, but simple registration does allow for a site where you authenticate with OpenID to retrive the needed data. The subset of information (http://openid.net/specs/openid-simple-registration-extension-1<em>0.html#response</em>format) might be limiting though. Of course, that won't include more rich data collected at other sites, like your del.icio.us links.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/08/19/about-me-as-a-plugin"
  },
  {
    "comments_archived": true,
    "date": "2006-08-19T18:02:21.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "metablogging",
      "delicious",
      "webdev",
      "identity",
      "claimid"
    ],
    "title": "what use claimid?",
    "wordpress_id": 979,
    "wordpress_slug": "what-use-claimid",
    "wordpress_url": "http://decafbad.com/blog/2006/08/19/what-use-claimid",
    "year": "2006",
    "month": "08",
    "day": "19",
    "isDir": false,
    "slug": "what-use-claimid",
    "postName": "2006-08-19-what-use-claimid",
    "html": "<p>So, now that I&#39;ve had <a href=\"http://decafbad.com/blog/2006/08/18/see-also\">a brief bit</a> of <a href=\"http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\">serial enthusiasm</a> in discovering this whole <a href=\"http://microid.org/\">microID</a> / <a href=\"http://claimid.org/\">claimID</a> thing, all it&#39;s ended up with in practical terms is <a href=\"http://decafbad.com/blog/#claimid\">a list of links in my sidebar</a>.  So, with that and fully understanding that it&#39;s early days yet for <a href=\"http://claimid.org/\">claimID</a>, I have to ask myself:  What does this do that I couldn&#39;t have done with a tagged set of <a href=\"http://del.icio.us/deusx\">del.icio.us</a> bookmarks?  Of course, bookmarks on <a href=\"http://del.icio.us/deusx\">del.icio.us</a> don&#39;t enjoy any sort of <a href=\"http://microid.org/\">microID</a> verification, but that could change - either through features implemented there directly or through a sidecar service.  My <a href=\"http://decafbad.com/blog/2006/08/17/dont-ask-me-who-i-am\">original gripe</a> was about both machines <em>and</em> people finding out about me from a central source.  So far <a href=\"http://claimid.org/\">claimID</a> seems to be good for just people finding out about me.</p>\n<p>By the way, this is not criticism or a put-down of <a href=\"http://claimid.org/\">claimID</a> - this is me thinking out loud and puzzling it out.</p>\n<p><em>Update:</em>  Although, I certainly understand the utility of <a href=\"http://microid.org/\">microID</a> in replacing <a href=\"http://vielmetti.typepad.com/superpatron/2006/08/for_technorati.html\">blog posts like this one</a>.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221083474\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://chimprawk.blogspot.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=77afe52123d8667fe867cf1a707e397b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://chimprawk.blogspot.com\">Fred</a>\n</div>\n<a href=\"#comment-221083474\" class=\"permalink\"><time datetime=\"2006-08-20T18:01:06\">2006-08-20T18:01:06</time></a>\n</div>\n<div class=\"content\"><p>These are really quite valid questions, and stuff as important as identity does deserve our puzzling.  ClaimID is a model - just as blogs enabled millions of people to share their voice online, claimID lets people have a way to approach their identity.  Simple? Yes - but that's the point.  There are tons of people out there who have stuff about them online (mailing list archives, blog comments) who don't have the time, desire or expertiese to create a myname.com site, or even a html list of links about themselves.  ClaimID is designed so that these people can have a dead simple solution for a fundamental need.  </p>\n<p>Of course, on top of that you do get value adds...the personal SEO stuff is nice, having your links tied together for search engines are nice, the microformats stuff, link status checking, having an OpenID, and so on - but the main experience is the simplicity.  For as important as identity is, most people really still aren't going out of their way to protect/defend their names.  Maybe this will change in the future, maybe it won't - but we are betting that the way to get people in the door, to start them thinking about the process is through simplicity.</p>\n<p>Honestly, though, we're still figuring all of this out.  Identity is huge, complicated, loaded with meaning and interpretation - and we aren't going to say that we've got all the answers.  But reading posts, responding, listening - we really feel like we're learning a lot.  Our goal down the road is for ClaimID to be a place where you can simply an easily have your identity needs met.  That said, we're still working on it, and thanks for being part of the process! </p>\n<p>Best,\nFred</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "So, now that I've had [a brief bit][bb] of [serial enthusiasm](http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast) in discovering this whole [microID][] / [claimID][] thing, all it's ended up with in practical terms is [a list of links in my sidebar](http://decafbad.com/blog/#claimid).  So, with that and fully understanding that it's early days yet for [claimID][], I have to ask myself:  What does this do that I couldn't have done with a tagged set of [del.icio.us](http://del.icio.us/deusx) bookmarks?  Of course, bookmarks on [del.icio.us](http://del.icio.us/deusx) don't enjoy any sort of [microID][] verification, but that could change - either through features implemented there directly or through a sidecar service.  My [original gripe](http://decafbad.com/blog/2006/08/17/dont-ask-me-who-i-am) was about both machines *and* people finding out about me from a central source.  So far [claimID][] seems to be good for just people finding out about me.\r\n\r\nBy the way, this is not criticism or a put-down of [claimID][] - this is me thinking out loud and puzzling it out.\r\n\r\n*Update:*  Although, I certainly understand the utility of [microID][] in replacing [blog posts like this one](http://vielmetti.typepad.com/superpatron/2006/08/for_technorati.html).\r\n\r\n[bb]: http://decafbad.com/blog/2006/08/18/see-also\r\n[microid]: http://microid.org/\r\n[claimid]: http://claimid.org/\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221083474\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://chimprawk.blogspot.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=77afe52123d8667fe867cf1a707e397b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://chimprawk.blogspot.com\">Fred</a>\n                </div>\n                <a href=\"#comment-221083474\" class=\"permalink\"><time datetime=\"2006-08-20T18:01:06\">2006-08-20T18:01:06</time></a>\n            </div>\n            <div class=\"content\"><p>These are really quite valid questions, and stuff as important as identity does deserve our puzzling.  ClaimID is a model - just as blogs enabled millions of people to share their voice online, claimID lets people have a way to approach their identity.  Simple? Yes - but that's the point.  There are tons of people out there who have stuff about them online (mailing list archives, blog comments) who don't have the time, desire or expertiese to create a myname.com site, or even a html list of links about themselves.  ClaimID is designed so that these people can have a dead simple solution for a fundamental need.  </p>\n\n<p>Of course, on top of that you do get value adds...the personal SEO stuff is nice, having your links tied together for search engines are nice, the microformats stuff, link status checking, having an OpenID, and so on - but the main experience is the simplicity.  For as important as identity is, most people really still aren't going out of their way to protect/defend their names.  Maybe this will change in the future, maybe it won't - but we are betting that the way to get people in the door, to start them thinking about the process is through simplicity.</p>\n\n<p>Honestly, though, we're still figuring all of this out.  Identity is huge, complicated, loaded with meaning and interpretation - and we aren't going to say that we've got all the answers.  But reading posts, responding, listening - we really feel like we're learning a lot.  Our goal down the road is for ClaimID to be a place where you can simply an easily have your identity needs met.  That said, we're still working on it, and thanks for being part of the process! </p>\n\n<p>Best,\nFred</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/08/19/what-use-claimid"
  },
  {
    "comments_archived": true,
    "date": "2006-08-18T05:22:56.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "wordpress",
      "metablogging",
      "webdev",
      "amazon"
    ],
    "title": "no amazon iframes for me",
    "wordpress_id": 976,
    "wordpress_slug": "no-amazon-iframes-for-me",
    "wordpress_url": "http://decafbad.com/blog/2006/08/18/no-amazon-iframes-for-me",
    "year": "2006",
    "month": "08",
    "day": "18",
    "isDir": false,
    "slug": "no-amazon-iframes-for-me",
    "postName": "2006-08-18-no-amazon-iframes-for-me",
    "html": "<p>So here&#39;s a problem that&#39;s cropped up for me lately.  I think it came with the upgrade to <a href=\"http://decafbad.com/blog/2006/07/25/youngmangonewest\">WP 2.0</a>.  I&#39;m trying to include some Amazon-provided iframes in the sidebar for continue book pimping, which worked fine with my WP 1.5 installation.  But now, for some reason, the iframes are always forced into a <code>display: none</code> style and I can&#39;t figure out what&#39;s doing it.</p>\n<p><em>Update:</em>  Now is the time on 0xDECAFBAD when the head meets desk.  Adblock is the culprit.  Oof.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221083793\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\"\nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\"\nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221083793\" class=\"permalink\"><time datetime=\"2006-08-18T09:13:09\">2006-08-18T09:13:09</time></a>\n</div>\n<div class=\"content\"><p>Works for me.</p>\n<p>Maybe it’s not actually a problem with your site, but rather some adblocking thingie that’s running on your desktop?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083794\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\"\nhref=\"http://dougal.gunters.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=81717a172b6918071fbea1a52483294b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\"\nhref=\"http://dougal.gunters.org/\">Dougal Campbell</a>\n</div>\n<a href=\"#comment-221083794\" class=\"permalink\"><time datetime=\"2006-08-18T13:32:29\">2006-08-18T13:32:29</time></a>\n</div>\n<div class=\"content\"><p>I see it, too. Ad-blocker? User.js? 1337 h4x0rz?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083795\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\"\nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\"\nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221083795\" class=\"permalink\"><time datetime=\"2006-08-18T13:39:22\">2006-08-18T13:39:22</time></a>\n</div>\n<div class=\"content\"><p>Ugh, now why didn't that occur to me?  Yup, I'd installed a particularly zealous set of Adblock filters recently.  Thanks for the clues.  :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083796\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\"\nhref=\"http://TheVirtualHandshake.com/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=971937b12b1f0058ccdd7e7c99335850&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\"\nhref=\"http://TheVirtualHandshake.com/blog\">Scott Allen</a>\n</div>\n<a href=\"#comment-221083796\" class=\"permalink\"><time datetime=\"2006-08-31T00:35:27\">2006-08-31T00:35:27</time></a>\n</div>\n<div class=\"content\"><p>Actually, I'd just like to know where you found that nice lean Amazon iframe. I haven't been able to find the place to generate a link like that. I can copy your links and swap my affiliate ID and the ASIN, but that's a PITA.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "So here's a problem that's cropped up for me lately.  I think it came with the upgrade to [WP 2.0][wp2].  I'm trying to include some Amazon-provided iframes in the sidebar for continue book pimping, which worked fine with my WP 1.5 installation.  But now, for some reason, the iframes are always forced into a <code>display: none</code> style and I can't figure out what's doing it.\r\n\r\n*Update:*  Now is the time on 0xDECAFBAD when the head meets desk.  Adblock is the culprit.  Oof.\r\n\r\n[wp2]: http://decafbad.com/blog/2006/07/25/youngmangonewest\n\n<div id=\"comments\" class=\"comments archived-comments\">\n<h3>Archived Comments</h3>\n\n<ul class=\"comments\">\n\n<li class=\"comment\" id=\"comment-221083793\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\"\nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\"\nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221083793\" class=\"permalink\"><time datetime=\"2006-08-18T09:13:09\">2006-08-18T09:13:09</time></a>\n</div>\n<div class=\"content\"><p>Works for me.</p>\n\n<p>Maybe it’s not actually a problem with your site, but rather some adblocking thingie that’s running on your desktop?</p></div>\n\n</li>\n\n<li class=\"comment\" id=\"comment-221083794\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\"\nhref=\"http://dougal.gunters.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=81717a172b6918071fbea1a52483294b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\"\nhref=\"http://dougal.gunters.org/\">Dougal Campbell</a>\n</div>\n<a href=\"#comment-221083794\" class=\"permalink\"><time datetime=\"2006-08-18T13:32:29\">2006-08-18T13:32:29</time></a>\n</div>\n<div class=\"content\"><p>I see it, too. Ad-blocker? User.js? 1337 h4x0rz?</p></div>\n\n</li>\n\n<li class=\"comment\" id=\"comment-221083795\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\"\nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\"\nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221083795\" class=\"permalink\"><time datetime=\"2006-08-18T13:39:22\">2006-08-18T13:39:22</time></a>\n</div>\n<div class=\"content\"><p>Ugh, now why didn't that occur to me?  Yup, I'd installed a particularly zealous set of Adblock filters recently.  Thanks for the clues.  :)</p></div>\n\n</li>\n\n<li class=\"comment\" id=\"comment-221083796\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\"\nhref=\"http://TheVirtualHandshake.com/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=971937b12b1f0058ccdd7e7c99335850&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\"\nhref=\"http://TheVirtualHandshake.com/blog\">Scott Allen</a>\n</div>\n<a href=\"#comment-221083796\" class=\"permalink\"><time datetime=\"2006-08-31T00:35:27\">2006-08-31T00:35:27</time></a>\n</div>\n<div class=\"content\"><p>Actually, I'd just like to know where you found that nice lean Amazon iframe. I haven't been able to find the place to generate a link like that. I can copy your links and swap my affiliate ID and the ASIN, but that's a PITA.</p></div>\n\n</li>\n\n</ul>\n\n</div>\n\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/08/17/no-amazon-iframes-for-me"
  },
  {
    "comments_archived": true,
    "date": "2006-08-18T04:43:20.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "aggregators",
      "rss",
      "syndication",
      "php",
      "readinglists"
    ],
    "title": "good gregarius",
    "wordpress_id": 975,
    "wordpress_slug": "good-gregarius",
    "wordpress_url": "http://decafbad.com/blog/2006/08/18/good-gregarius",
    "year": "2006",
    "month": "08",
    "day": "18",
    "isDir": false,
    "slug": "good-gregarius",
    "postName": "2006-08-18-good-gregarius",
    "html": "<p>Oh, and apropos my <a href=\"http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\">serial enthusiast</a> ways, I&#39;ve shacked up with a different news aggregator again.  I <a href=\"http://decafbad.com/blog/2006/05/12/back-to-newsriver-and-hacking-lists-of-reading-lists\">was using newsRiver</a> again, but the temporary lack of a spare server to run it on in the midst of <a href=\"http://decafbad.com/blog/2006/07/25/youngmangonewest\">the move</a> had me feedless.  So, after a brief flirtation with <a href=\"http://bloglines.com/\">Bloglines</a> - which went down promptly after I started using it - I switched using <a href=\"http://gregarius.net/\">Gregarius</a>.  I have to say:  This is a pretty keen aggregator.  It doesn&#39;t support <a href=\"http://nick.typepad.com/blog/2005/10/reading_lists_f.html\">reading lists</a>, but I have an itch to implement that support.  Otherwise, the feed folders work pretty much how I&#39;d like them to work - as a <a href=\"http://decafbad.com/blog/2006/01/01/new-feed-reader-ideas-for-the-new-year\">prioritized and stratified River of News</a>. I might also think about hacking <a href=\"http://decafbad.com/2005/10/miniagg/news-20051005-152956.html\">my evolving feed reader template</a> as a drop-in theme for <a href=\"http://gregarius.net/\">Gregarius</a>.</p>\n",
    "body": "Oh, and apropos my [serial enthusiast][se] ways, I've shacked up with a different news aggregator again.  I [was using newsRiver][nr] again, but the temporary lack of a spare server to run it on in the midst of [the move][mo] had me feedless.  So, after a brief flirtation with [Bloglines][] - which went down promptly after I started using it - I switched using [Gregarius][].  I have to say:  This is a pretty keen aggregator.  It doesn't support [reading lists][rl], but I have an itch to implement that support.  Otherwise, the feed folders work pretty much how I'd like them to work - as a [prioritized and stratified River of News][st]. I might also think about hacking [my evolving feed reader template][ma] as a drop-in theme for [Gregarius][].\r\n\r\n[mo]: http://decafbad.com/blog/2006/07/25/youngmangonewest\r\n[ma]: http://decafbad.com/2005/10/miniagg/news-20051005-152956.html\r\n[se]: http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\r\n[nr]: http://decafbad.com/blog/2006/05/12/back-to-newsriver-and-hacking-lists-of-reading-lists\r\n[gregarius]: http://gregarius.net/\r\n[bloglines]: http://bloglines.com/\r\n[st]: http://decafbad.com/blog/2006/01/01/new-feed-reader-ideas-for-the-new-year\r\n[rl]: http://nick.typepad.com/blog/2005/10/reading_lists_f.html\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/08/17/good-gregarius"
  },
  {
    "comments_archived": true,
    "date": "2006-08-17T01:41:24.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "delicious",
      "webdev",
      "web20"
    ],
    "title": "optimized for thumbnailing",
    "wordpress_id": 972,
    "wordpress_slug": "optimized-for-thumbnails",
    "wordpress_url": "http://decafbad.com/blog/2006/08/16/optimized-for-thumbnails",
    "year": "2006",
    "month": "08",
    "day": "16",
    "isDir": false,
    "slug": "optimized-for-thumbnails",
    "postName": "2006-08-16-optimized-for-thumbnails",
    "html": "<p>Now that <a href=\"http://del.icio.us/\">del.icio.us</a> has made steps into the list of social bookmarking sites that render thumbnails of sites, it suddenly occurs to me:  Will Web 3.0 sites be optimized for thumbnailing?</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086804\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://george.hotelling.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c7d1c8d2b1a7643236a4661e9a974dee&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://george.hotelling.net/\">George Hotelling</a>\n</div>\n<a href=\"#comment-221086804\" class=\"permalink\"><time datetime=\"2006-08-17T15:11:19\">2006-08-17T15:11:19</time></a>\n</div>\n<div class=\"content\"><p>I thought big fonts were the hallmark of 2.0 design.  Web 3.0 will be optimized for vector graphics drawn with lasers.  It is the future, after all.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Now that [del.icio.us](http://del.icio.us/) has made steps into the list of social bookmarking sites that render thumbnails of sites, it suddenly occurs to me:  Will Web 3.0 sites be optimized for thumbnailing?\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221086804\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://george.hotelling.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c7d1c8d2b1a7643236a4661e9a974dee&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://george.hotelling.net/\">George Hotelling</a>\r\n                </div>\r\n                <a href=\"#comment-221086804\" class=\"permalink\"><time datetime=\"2006-08-17T15:11:19\">2006-08-17T15:11:19</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I thought big fonts were the hallmark of 2.0 design.  Web 3.0 will be optimized for vector graphics drawn with lasers.  It is the future, after all.</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/08/16/optimized-for-thumbnails"
  },
  {
    "comments_archived": true,
    "date": "2006-08-16T13:12:07.000Z",
    "layout": "post",
    "tags": [
      "delicious",
      "book",
      "hacks",
      "ajax",
      "json",
      "webdev"
    ],
    "title": "Ajaxitagging",
    "wordpress_id": 971,
    "wordpress_slug": "ajaxitagging",
    "wordpress_url": "http://decafbad.com/blog/2006/08/16/ajaxitagging",
    "year": "2006",
    "month": "08",
    "day": "16",
    "isDir": false,
    "slug": "ajaxitagging",
    "postName": "2006-08-16-ajaxitagging",
    "html": "<blockquote cite=\"http://adactio.com/journal/1162\">Ever since I switched over to a new CMS back in February, I’ve been tagging all my journal entries. Until now, I haven’t been doing anything with those tags apart from exposing them in category elements in my RSS feed. Now that I’ve got a good head of steam going with my tags, I’ve decided to play around with them a bit.</blockquote><div class=\"quotesource\">Source: <a href=\"http://adactio.com/journal/1162\">Adactio: Journal - Ajaxitagging</a></div>\n\n<p><a href=\"http://www.amazon.com/exec/obidos/ASIN/0470037857/0xdecafbad01-20/104-2713105-4524705?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2\">Book</a> pimping time:  In <a href=\"http://www.amazon.com/exec/obidos/ASIN/0470037857/0xdecafbad01-20/104-2713105-4524705?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2\">Hacking del.icio.us</a>, I&#39;ve got something not entirely unlike the above-linked hack.  (Which, by the way, is good work!)  Mine is much more basic, though - with less microformat, progress bar, and yellow fadey goodness.  And, instead of AJAX, my hack uses <a href=\"http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/\">JSONP</a>.  The Related Links hack in Chapter 9 of <a href=\"http://www.amazon.com/exec/obidos/ASIN/0470037857/0xdecafbad01-20/104-2713105-4524705?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2\">the book</a> shows you how to include lists of the last few bookmarks you&#39;ve posted under each tag / category / keyword used in a blog post.</p>\n",
    "body": "<blockquote cite=\"http://adactio.com/journal/1162\">Ever since I switched over to a new CMS back in February, I’ve been tagging all my journal entries. Until now, I haven’t been doing anything with those tags apart from exposing them in category elements in my RSS feed. Now that I’ve got a good head of steam going with my tags, I’ve decided to play around with them a bit.</blockquote><div class=\"quotesource\">Source: <a href=\"http://adactio.com/journal/1162\">Adactio: Journal - Ajaxitagging</a></div>\r\n\r\n[Book][book] pimping time:  In [Hacking del.icio.us][book], I've got something not entirely unlike the above-linked hack.  (Which, by the way, is good work!)  Mine is much more basic, though - with less microformat, progress bar, and yellow fadey goodness.  And, instead of AJAX, my hack uses [JSONP][].  The Related Links hack in Chapter 9 of [the book][book] shows you how to include lists of the last few bookmarks you've posted under each tag / category / keyword used in a blog post.\r\n\r\n[jsonp]: http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/\r\n[book]: http://www.amazon.com/exec/obidos/ASIN/0470037857/0xdecafbad01-20/104-2713105-4524705?%5Fencoding=UTF8&camp=1789&link%5Fcode=xm2\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/08/16/ajaxitagging"
  },
  {
    "comments_archived": true,
    "date": "2006-02-13T17:09:08.000Z",
    "layout": "post",
    "tags": [
      "metablogging",
      "webdev",
      "rss",
      "syndication",
      "xoxo",
      "microformats",
      "opml",
      "podcasting",
      "rdf",
      "semweb"
    ],
    "title": "Reading Lists, OPML, XOXO, Semantic Web, and Tools",
    "wordpress_id": 871,
    "wordpress_slug": "reading-lists-opml-xoxo-semantic-web-and-tools",
    "wordpress_url": "http://decafbad.com/blog/?p=871",
    "year": "2006",
    "month": "02",
    "day": "13",
    "isDir": false,
    "slug": "reading-lists-opml-xoxo-semantic-web-and-tools",
    "postName": "2006-02-13-reading-lists-opml-xoxo-semantic-web-and-tools",
    "html": "<p>Listening to this <a href=\"http://blogs.msdn.com/alexbarn/archive/2006/02/12/530652.aspx\">podcast about OPML and Reading Lists</a> and enjoying the various perspectives on RSS, OPML, and Semantic Web tech.  It&#39;s also the first time I&#39;ve heard Danny Ayers&#39; voice, so that was pretty cool after having been a textual blog acquaintance for a few years now.  As for the rest of the guys on the call, I&#39;m not quite as familiar with all of them yet, but I&#39;ll be adding them to my Reading Lists shortly.</p>\n<p>Apropos of this podcast, I&#39;ve lately gotten a bit of a fresh take on the RSS/OPML versus XHTML versus Semantic Web tech merry-go-round.  Here&#39;s the basic gist:  Invest time into tools that solve problems first and formats that enable possibilities second, if you want to get any attention and subsequent help.</p>\n<p>And then I say &quot;tools&quot;, I don&#39;t mean a GraphViz construct that makes really cool charts for people willing to chase down and install the dependencies.  No, I mean something like the OPML Editor.  The OPML Editor comes in a single package, and you launch it from a single icon.  The OPML Editor is <a href=\"http://davenet.scripting.com/1995/09/03/wemakeshittysoftware\">a shitty piece of software</a> that&#39;s nonetheless helping me achieve some practical goals that I&#39;ve heretofore been vaguely stymied in reaching.  The OPML Editor is making me think more favorably about OPML, <i>despite</i> OPML being <a href=\"http://davenet.scripting.com/1995/09/03/wemakeshittysoftware\">a shitty format</a>.</p>\n<p>The utility of the OPML Editor is giving me the motivation to build filters and workarounds to transmute OPML into XOXO and RDF formats, but only when the need arises.  I could also see putting an OPML-to-triples bridge in front of a semweb crawler or tool.  And, there&#39;s no reason why outlines in the OPML Editor couldn&#39;t be rendered in XOXO and RDF formats by the tool itself, if there&#39;s something useful around to consume it.</p>\n<p>On the other hand, I&#39;ve done enough with RDF and <a href=\"http://www.decafbad.com/blog/2005/07/12/xoxo_outliner_experiment\">XOXO</a> to see the clear potential in both.  With enough RDF data around, you can turn the whole wide web into a single massively networked database ripe for the querying thanks to a uniform data model and clear specs for representation of that model.  With XOXO and microformats, you get a <a href=\"http://www.sudoku.com/\">Sudoku-esque</a> solution to providing both human and machine readable data in the same format and file, while sterring close to the inherent design principles of the web.</p>\n<p>The problem with these formats, though, is that they open potential avenues but don&#39;t provide value until there&#39;s some foot traffic on the avenues.  This is just establishing a world in which there can exist both chickens and eggs, but not doing much with respect to concrete instantiations of poultry.\nNow, to be fair, there have been efforts to make practical usage of RDF (see: <a href=\"http://musicbrainz.org/\">MusicBrainz</a>) and these are early days for microformats.  But, I think a lot more effort needs to be given toward making useful, personally rewarding tools - and less effort given toward expressing awe toward the potentials given by formats and models.  You can have both, but you&#39;ve got to pick one to start with.</p>\n<p>And, the reason you need to make tools first that use formats second is attention.  (That&#39;s been a buzzword lately, hasn&#39;t it?)  You need attention if you want adoption and help.  And, you can get attention - and subsequent help - by scratching someone&#39;s itch.</p>\n<p>Now, some people&#39;s itches are scratched by the fun of abstract symbol manipulation and the perception of elegance.  Others&#39; itches are scratched by getting work done, like writing or organizing thoughts or expanding awareness of more information sources.  Personally, I&#39;ve got itches of both of these varieties.  The problem is that there are many fewer people with itches in that first category.  And, no offense to anyone, that seems to be the bulk of the RDF and XOXO fanbase at the moment.  For the second category, even if things are shitty, smoke a bit and catch on fire - as long as some work gets done at the end of the day, there&#39;s a lot of tolerance to go around and a lot of motivation to pitch in to improve the situation.</p>\n<p>At the end of the day, I firmly believe that ATOM, RDF, and XHTML-based microformats trounce OPML, RSS, and the like in terms of clear definition, affordance in manipulation, and technical elegance.  But, OPML and RSS are still winning in the world because the tools using these formats are scratching some damn annoying itches.  And, though towers built atop shitty tools and formats seem Jenga-shaky, somehow they never quite come crashing down.  Maybe they will come crashing down someday, but we seem to be getting work done in the meantime.</p>\n<p>So, to wrap up:  My take on this whole mess is that your format will gain adoption to the degree that the tools producing it help people get work done.  I can&#39;t find tools today for RDF and XOXO that are as rewardingly useful as the OPML Editor has become.  When that happens, the story may change.</p>\n<!-- tags: metablogging rdf semweb webdev opml rss syndication microformats xoxo podcasting -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086877\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://vielmetti.typepad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e377f3e2140297d32460ae9a4b38ff98&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://vielmetti.typepad.com\">Edward Vielmetti</a>\n</div>\n<a href=\"#comment-221086877\" class=\"permalink\"><time datetime=\"2006-02-14T02:32:49\">2006-02-14T02:32:49</time></a>\n</div>\n<div class=\"content\"><p>There's a lot to be said for rough consensus and running code, and there's a lot more running code that speaks OPML than there is that speaks XOXO or RDF.  You can just plain sit down and get work done and not have to entangle yourself in a microstandards battle.  There's a certain appeal to that.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086879\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.synaesmedia.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=248a3c4ba8f2972427222d46954f9c1c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.synaesmedia.net\">phil jones</a>\n</div>\n<a href=\"#comment-221086879\" class=\"permalink\"><time datetime=\"2006-02-14T03:03:10\">2006-02-14T03:03:10</time></a>\n</div>\n<div class=\"content\"><p>Same as it ever was :</p>\n<p>http://www.laputan.org/gabriel/worse-is-better.html </p>\n<p>(scroll down to section 2.1)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086880\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://philwilson.org/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=abb5e982d97d7539860141b7904ba31a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://philwilson.org/blog/\">Phil Wilson</a>\n</div>\n<a href=\"#comment-221086880\" class=\"permalink\"><time datetime=\"2006-02-21T20:39:35\">2006-02-21T20:39:35</time></a>\n</div>\n<div class=\"content\"><p>I know they're very different things, but is there any <em>particular</em> part of the OPML Editor that doesn't exist, say, in something like NVU, or a stripped-down TinyMCE?</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Listening to this <a href=\"http://blogs.msdn.com/alexbarn/archive/2006/02/12/530652.aspx\">podcast about OPML and Reading Lists</a> and enjoying the various perspectives on RSS, OPML, and Semantic Web tech.  It's also the first time I've heard Danny Ayers' voice, so that was pretty cool after having been a textual blog acquaintance for a few years now.  As for the rest of the guys on the call, I'm not quite as familiar with all of them yet, but I'll be adding them to my Reading Lists shortly.\r\n\r\nApropos of this podcast, I've lately gotten a bit of a fresh take on the RSS/OPML versus XHTML versus Semantic Web tech merry-go-round.  Here's the basic gist:  Invest time into tools that solve problems first and formats that enable possibilities second, if you want to get any attention and subsequent help.\r\n\r\nAnd then I say \"tools\", I don't mean a GraphViz construct that makes really cool charts for people willing to chase down and install the dependencies.  No, I mean something like the OPML Editor.  The OPML Editor comes in a single package, and you launch it from a single icon.  The OPML Editor is <a href=\"http://davenet.scripting.com/1995/09/03/wemakeshittysoftware\">a shitty piece of software</a> that's nonetheless helping me achieve some practical goals that I've heretofore been vaguely stymied in reaching.  The OPML Editor is making me think more favorably about OPML, <i>despite</i> OPML being <a href=\"http://davenet.scripting.com/1995/09/03/wemakeshittysoftware\">a shitty format</a>.\r\n\r\nThe utility of the OPML Editor is giving me the motivation to build filters and workarounds to transmute OPML into XOXO and RDF formats, but only when the need arises.  I could also see putting an OPML-to-triples bridge in front of a semweb crawler or tool.  And, there's no reason why outlines in the OPML Editor couldn't be rendered in XOXO and RDF formats by the tool itself, if there's something useful around to consume it.\r\n\r\nOn the other hand, I've done enough with RDF and <a href=\"http://www.decafbad.com/blog/2005/07/12/xoxo_outliner_experiment\">XOXO</a> to see the clear potential in both.  With enough RDF data around, you can turn the whole wide web into a single massively networked database ripe for the querying thanks to a uniform data model and clear specs for representation of that model.  With XOXO and microformats, you get a <a href=\"http://www.sudoku.com/\">Sudoku-esque</a> solution to providing both human and machine readable data in the same format and file, while sterring close to the inherent design principles of the web.\r\n\r\nThe problem with these formats, though, is that they open potential avenues but don't provide value until there's some foot traffic on the avenues.  This is just establishing a world in which there can exist both chickens and eggs, but not doing much with respect to concrete instantiations of poultry.\r\nNow, to be fair, there have been efforts to make practical usage of RDF (see: <a href=\"http://musicbrainz.org/\">MusicBrainz</a>) and these are early days for microformats.  But, I think a lot more effort needs to be given toward making useful, personally rewarding tools - and less effort given toward expressing awe toward the potentials given by formats and models.  You can have both, but you've got to pick one to start with.\r\n\r\nAnd, the reason you need to make tools first that use formats second is attention.  (That's been a buzzword lately, hasn't it?)  You need attention if you want adoption and help.  And, you can get attention - and subsequent help - by scratching someone's itch.\r\n\r\nNow, some people's itches are scratched by the fun of abstract symbol manipulation and the perception of elegance.  Others' itches are scratched by getting work done, like writing or organizing thoughts or expanding awareness of more information sources.  Personally, I've got itches of both of these varieties.  The problem is that there are many fewer people with itches in that first category.  And, no offense to anyone, that seems to be the bulk of the RDF and XOXO fanbase at the moment.  For the second category, even if things are shitty, smoke a bit and catch on fire - as long as some work gets done at the end of the day, there's a lot of tolerance to go around and a lot of motivation to pitch in to improve the situation.\r\n\r\nAt the end of the day, I firmly believe that ATOM, RDF, and XHTML-based microformats trounce OPML, RSS, and the like in terms of clear definition, affordance in manipulation, and technical elegance.  But, OPML and RSS are still winning in the world because the tools using these formats are scratching some damn annoying itches.  And, though towers built atop shitty tools and formats seem Jenga-shaky, somehow they never quite come crashing down.  Maybe they will come crashing down someday, but we seem to be getting work done in the meantime.\r\n\r\nSo, to wrap up:  My take on this whole mess is that your format will gain adoption to the degree that the tools producing it help people get work done.  I can't find tools today for RDF and XOXO that are as rewardingly useful as the OPML Editor has become.  When that happens, the story may change.\r\n\r\n\r\n<!-- tags: metablogging rdf semweb webdev opml rss syndication microformats xoxo podcasting -->\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221086877\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://vielmetti.typepad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e377f3e2140297d32460ae9a4b38ff98&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://vielmetti.typepad.com\">Edward Vielmetti</a>\r\n                </div>\r\n                <a href=\"#comment-221086877\" class=\"permalink\"><time datetime=\"2006-02-14T02:32:49\">2006-02-14T02:32:49</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>There's a lot to be said for rough consensus and running code, and there's a lot more running code that speaks OPML than there is that speaks XOXO or RDF.  You can just plain sit down and get work done and not have to entangle yourself in a microstandards battle.  There's a certain appeal to that.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086879\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.synaesmedia.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=248a3c4ba8f2972427222d46954f9c1c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.synaesmedia.net\">phil jones</a>\r\n                </div>\r\n                <a href=\"#comment-221086879\" class=\"permalink\"><time datetime=\"2006-02-14T03:03:10\">2006-02-14T03:03:10</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Same as it ever was :</p>\r\n\r\n<p>http://www.laputan.org/gabriel/worse-is-better.html </p>\r\n\r\n<p>(scroll down to section 2.1)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086880\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://philwilson.org/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=abb5e982d97d7539860141b7904ba31a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://philwilson.org/blog/\">Phil Wilson</a>\r\n                </div>\r\n                <a href=\"#comment-221086880\" class=\"permalink\"><time datetime=\"2006-02-21T20:39:35\">2006-02-21T20:39:35</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I know they're very different things, but is there any <em>particular</em> part of the OPML Editor that doesn't exist, say, in something like NVU, or a stripped-down TinyMCE?</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/02/13/reading-lists-opml-xoxo-semantic-web-and-tools"
  },
  {
    "comments_archived": true,
    "date": "2006-01-08T01:33:47.000Z",
    "layout": "post",
    "tags": [
      "wordpress",
      "webdev",
      "syndication",
      "python",
      "programming",
      "perl",
      "templating",
      "smarty",
      "dtml",
      "cheetah",
      "reblog",
      "evil"
    ],
    "title": "Smarty is on my evil list",
    "wordpress_id": 818,
    "wordpress_slug": "smarty-is-on-my-evil-list",
    "wordpress_url": "http://decafbad.com/blog/?p=818",
    "year": "2006",
    "month": "01",
    "day": "07",
    "isDir": false,
    "slug": "smarty-is-on-my-evil-list",
    "postName": "2006-01-07-smarty-is-on-my-evil-list",
    "html": "<p>Although I have <a href=\"http://decafbad.com/blog/2005/12/18/not-so-deep-php-thoughts\">my grousing about PHP in general</a>, I have to say that it makes much better template language as-is before pulling something like <a href=\"http://smarty.php.net\">Smarty</a> into the mix.  </p>\n<p>At this point, I consider <a href=\"http://smarty.php.net\">Smarty</a> to be evil—though I&#39;m willing to admit that I haven&#39;t grokked it fully yet.  And this is coming from <a href=\"http://decafbad.com/blog/2005/09/25/templates-good-or-evil\">a templating addict</a> who has been at times in love with <a href=\"http://www.template-toolkit.org/\">Template Toolkit</a> in Perl,  <a href=\"http://jakarta.apache.org/velocity/\">Velocity</a> in Java, and <a href=\"http://www.cheetahtemplate.org/\">Cheetah</a> and <a href=\"http://twisted.sourceforge.net/TwistedDocs-1.2.0rc3/howto/woven.html\">Woven</a> and <a href=\"http://www.owlfish.com/software/simpleTAL/\">ZPT/TAL</a> in Python.  </p>\n<p><a href=\"http://wordpress.org/\">WordPress</a> seems to have put native-PHP-as-templating to good use, so I&#39;ve already got a favorite for comparison.  But the use of <a href=\"http://smarty.php.net\">Smarty</a> in <a href=\"http://www.reblog.org/\">reBlog</a> rubs me the wrong way.  Of course, <a href=\"http://www.reblog.org/\">reBlog</a> has a lot of highly-abstracted MVC architecture going on.  And this, itself, is something I haven&#39;t much in my PHP explorations thus far.  (In fact, I almost hate to see PHP chopped up in this J2EE-esque fashion, but that&#39;s another story.  Oh, and <a href=\"http://www.reblog.org/\">reBlog</a> rocks, by the way.)</p>\n<p>But either way, <a href=\"http://smarty.php.net\">Smarty</a> makes this right-handed hacker feel like he&#39;s writing with his left.  It seems to have a lot of weird conventions and terminology for which neither knowledge of PHP nor knowledge of other templating systems in general seem much help.  It could just be a learning curve, but to me it seems like an odd <em>sideways</em> curve at the moment.  </p>\n<p>In fact, you know what?  <a href=\"http://smarty.php.net\">Smarty</a> reminds me a lot of <a href=\"http://www.zope.org/Documentation/Guides/DTML-HTML/DTML.html\">DTML in Zope</a>.  I hate <a href=\"http://www.zope.org/Documentation/Guides/DTML-HTML/DTML.html\">DTML</a>—it, also, is most firmly on my evil list.</p>\n<p>Yuck.  Again, it could be just that I haven&#39;t known <a href=\"http://smarty.php.net\">Smarty</a> long enough to like it... but yuck.</p>\n<!-- tags: templating php smarty dtml python perl cheetah webdev programming syndication reblog wordpress evil -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221082526\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://luka.kladaric.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=78b0e32da6ce10e17db345a9aa8cde78&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://luka.kladaric.net/\">Luka Kladaric</a>\n</div>\n<a href=\"#comment-221082526\" class=\"permalink\"><time datetime=\"2006-01-08T11:55:40\">2006-01-08T11:55:40</time></a>\n</div>\n<div class=\"content\"><p>I agree with you... I used Smarty in one project and am now using it in another work-in-progress... and I have to say, the decision to use it with the second was a bad one... Smarty is pretty cool for simple templating, but when you need raw power, it leaves you shipwrecked... I had to turn to some really black magic to get things done... Anyway, a rewrite of the first project is in negotiations and I'm 100% sure I will <em>NOT</em> be using Smarty there, either.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082527\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://laughingmeme.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=01457d1a0f0e533062cd0d1033fb4d7a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://laughingmeme.org\">kellan</a>\n</div>\n<a href=\"#comment-221082527\" class=\"permalink\"><time datetime=\"2006-01-08T14:34:57\">2006-01-08T14:34:57</time></a>\n</div>\n<div class=\"content\"><p>Agreed.  Using a templating languages with PHP makes no sense. (though I'm not sure the fact that WP does or doesn't do something makes it good design)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082528\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082528\" class=\"permalink\"><time datetime=\"2006-01-08T15:03:33\">2006-01-08T15:03:33</time></a>\n</div>\n<div class=\"content\"><p>Kellan:  Oh, no, WordPress isn't an automatic gold standard for me...  There's plenty that could be better about WP.  (Not having checked out 2.0 yet)  But, I just had a much better time setting up the templates for this blog than I have had in hacking around with templates implemented in Smarty.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082529\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://sporkmonger.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://sporkmonger.com/\">Bob Aman</a>\n</div>\n<a href=\"#comment-221082529\" class=\"permalink\"><time datetime=\"2006-01-08T17:41:17\">2006-01-08T17:41:17</time></a>\n</div>\n<div class=\"content\"><p>Me, I just wish there was a templating system for Ruby for me to fall in love with.  With all due respect to the Rails people, ERb just doesn't really do it for me.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082530\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221082530\" class=\"permalink\"><time datetime=\"2006-01-08T21:04:14\">2006-01-08T21:04:14</time></a>\n</div>\n<div class=\"content\"><p><a href=\"#comment-3388\" rel=\"nofollow\">Bob</a>: port <a href=\"http://kid.lesscode.org/language.html\" rel=\"nofollow\">Kid</a> to Ruby. :-<i></i>)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082532\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://talideon.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e698f564ac90c4c248f1f678caafd624&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://talideon.com/\">Keith Gaughan</a>\n</div>\n<a href=\"#comment-221082532\" class=\"permalink\"><time datetime=\"2006-01-08T21:28:05\">2006-01-08T21:28:05</time></a>\n</div>\n<div class=\"content\"><p>What's moronic is that people go to all this trouble building templating systems when all you really need is extract(). Sad, really.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082533\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.ntwizards.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cb564795a1912c36f9fa1399fd22ce29&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.ntwizards.net/\">Bryce</a>\n</div>\n<a href=\"#comment-221082533\" class=\"permalink\"><time datetime=\"2006-01-12T13:33:10\">2006-01-12T13:33:10</time></a>\n</div>\n<div class=\"content\"><p>PHP as a template engine is more evil than Smarty. The main issue is that template authors may not be trustworthy. Once you include or eval() a PHP template the app is no longer in control and I don't see any way of structuring a PHP app such that it cannot be subverted from within. </p>\n<p>The only defense seems to be using the tokenizer functions to build a PHP parser that validates templates against a \"whitelist\" of allowed operations. Savant's Restricted Compiler is about the only implementation out there, but it's not quite complete and seems to be more of a proof-of-concept than battle-tested code.</p>\n<p>Whatever Smarty's faults, it solves the untrusted templates problem nicely.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082534\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082534\" class=\"permalink\"><time datetime=\"2006-01-12T14:27:42\">2006-01-12T14:27:42</time></a>\n</div>\n<div class=\"content\"><p>Bryce: Oh, I totally understand the implications of offering too much capability to template authors.  That's just how much I dislike Smarty—I'm willing to risk it, rather than put up with that particular implementation.  On the other hand, in my situation, I'm on the same team with the template developers, so we're all on the same team to sink or swim.  I know it's not that simple, in principle, but it covers the 80% of the 80/20 equation.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082536\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://dougal.gunters.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=81717a172b6918071fbea1a52483294b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://dougal.gunters.org/\">Dougal Campbell</a>\n</div>\n<a href=\"#comment-221082536\" class=\"permalink\"><time datetime=\"2006-01-12T15:25:25\">2006-01-12T15:25:25</time></a>\n</div>\n<div class=\"content\"><p>Yeah, I was never able to get into Smarty either, and I've never been able to put my finger on why. Philosophically, I like the idea of using template engines, particularly if you're collaborating with a non-programming designer. I even wrote one (albeit a <em>very simple</em> one) myself, once. But I've never used any of the PHP template packages that I've looked at.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082537\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://sporkmonger.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://sporkmonger.com/\">Bob Aman</a>\n</div>\n<a href=\"#comment-221082537\" class=\"permalink\"><time datetime=\"2006-01-13T01:10:16\">2006-01-13T01:10:16</time></a>\n</div>\n<div class=\"content\"><p>Aristotle: When TurboGears first came out, I almost did, believe it or not.  But then I remembered that FeedTools eats all of the time I have available for open-source projects, and I figured someone else would probably do it for me anyways...</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082538\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221082538\" class=\"permalink\"><time datetime=\"2006-01-13T09:02:38\">2006-01-13T09:02:38</time></a>\n</div>\n<div class=\"content\"><p>Hehe. Well, I plan to port it to Perl, in any case. :<i></i>-)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082539\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=31475c246f5521e40d92a29ec0e36aa8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Brian Grayless</a>\n</div>\n<a href=\"#comment-221082539\" class=\"permalink\"><time datetime=\"2006-01-19T16:00:24\">2006-01-19T16:00:24</time></a>\n</div>\n<div class=\"content\"><p>Smarty is really a waste of time. Some food for thought....</p>\n<p><a href=\"http://www.fudnik.com/main/tiki-read_article.php?articleId=7\" rel=\"nofollow\">Smarty for Dummies?</a></p>\n<p>Just write better code!!!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082540\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bdbf6409528370f5549e8470caf6ba30&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tali Banana</a>\n</div>\n<a href=\"#comment-221082540\" class=\"permalink\"><time datetime=\"2006-02-01T07:33:41\">2006-02-01T07:33:41</time></a>\n</div>\n<div class=\"content\"><p>Well, quite opinionated I see.</p>\n<p>Smarty solves some fantastic problems and the cacheing system is beyond fabulous at this level.</p>\n<p>I've used Smarty on several projects and have been using it now exclusively for 4 years.  Of course, I used others but it was getting sick coming to a new phase in a project and finding out the template system had become RIP....abandoned before their time.</p>\n<p>Smarty has done two great things for me, and I'll speak about them until the day that PHP is abolished:</p>\n<ol>\n<li><p>Smarty has reduced my code to a reasonably sized, scan-able, masterpiece.  Having the logic and presentation seperate is so nice.  I recently rewrote one of my old projects using smarty and all of a sudden it made sense!  No more php in the html and no more html in the php.  And that's something you can't solve without templates for you juniors out there.</p></li>\n<li><p>Smarty's caching has turned monster db queries into non issues.  Consider this.  A top 10 list from all-time sales.  I'm talking about searching a db with sales spanning 6 years for all items purchased and creating a top sales page.  Easy!  Smarty does it once and caches the results until I decide they need to be refreshed.  Took a 4 second execution time down to less than 0.4 seconds.  And all without having to implement a CMS or otherwise.  Even if you have limitless resources to buy new hardware, caching like this still makes sense.  And the intermediate php/html cache is brilliant.  Everything is so much faster with smarty.</p></li>\n</ol>\n<p>I can't deny, I love Smarty.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082542\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221082542\" class=\"permalink\"><time datetime=\"2006-02-01T11:43:36\">2006-02-01T11:43:36</time></a>\n</div>\n<div class=\"content\"><p>Tali: I'm usually opinionated, but I try to listen &amp; learn :)</p>\n<p>The benefits you describe with Smarty would seem to come with any decent web development system.  Separating logic and presentation are the general idea behind templating, and some sort of caching is a must no matter what you're using as a presentation-side tool.  My beef is that, out of all the templating systems I've used, Smarty is one of the ugliest.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082543\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bdbf6409528370f5549e8470caf6ba30&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Tali Banana</a>\n</div>\n<a href=\"#comment-221082543\" class=\"permalink\"><time datetime=\"2006-02-01T17:30:03\">2006-02-01T17:30:03</time></a>\n</div>\n<div class=\"content\"><p>Smarty does need some standards redesign on the interface, as does php itself which has been well documented but slow going.</p>\n<p>Coming from the PERL background and previous php template systems I've been very happy with Smarty in general, even if there are a few things that could be done to speed up the learning curve.</p>\n<p>May be worthwhile jumping on the dev team and making some suggestions.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082544\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221082544\" class=\"permalink\"><time datetime=\"2006-02-02T01:30:31\">2006-02-02T01:30:31</time></a>\n</div>\n<div class=\"content\"><p>But why would you need a template system when you’re already working with PHP, which is itself a template system? Why do You don’t have to have different languages to be able to put the business logic in one file and the display logic in another.</p>\n<p>Perl (not PERL), btw, has the Template Toolkit on the CPAN, which is the spiritual father of Smarty. (And it’s vaguely more defensible in Perl’s case becase Perl is not a template system; though constrated with Perl the deficiencies of TT’s mini language are just all the more painfully obvious.)</p>\n<p>By all of which I mean to say that whether people use languages in stupid ways does not mean the language is the problem; not in either PHP’s or Perl’s case.</p>\n<p>I also don’t see why you need a templating system to implement caching; in fact, having caching coupled with the template engine sounds like a bad distribution of responsibilities. (Indeed, Template Toolkit has no such facilities.) But there’s the Cache::Cache family of modules on the CPAN, which you can use to cache things completely independently of <em>what</em> is being cached – whether it be the output of a template, or the query results themselves, or anything else, which might not even have anything to do without any output you generate.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082546\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bab1c370ad7b246023e23e87c8e206c4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">M.</a>\n</div>\n<a href=\"#comment-221082546\" class=\"permalink\"><time datetime=\"2006-02-16T14:13:18\">2006-02-16T14:13:18</time></a>\n</div>\n<div class=\"content\"><p>I've good experiences with the Expose PHP template engine (www.kwasd.nl/expose). It doesn't require you to learn a new language, because it uses plain PHP and still offers security, because it contains a tokenizer and, in fact, a small compiler. I used it for some projects and it really offered all I needed. </p>\n<p>And for people who wonder why one would need a template engine: I work with designers and I don't want them to mingle application code. By setting up a shared folder which contains the templates, they can safely work on design and never need to touch my controller or module files. Especially since this template engine has a tokenizer/compiler, they can't call unsafe PHP functions (only those that you, the programmer, register).</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082549\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://mike.teczno.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e3b46099c3fd3844c4539b27f143fd97&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://mike.teczno.com\">Michal Migurski</a>\n</div>\n<a href=\"#comment-221082549\" class=\"permalink\"><time datetime=\"2006-03-05T23:16:25\">2006-03-05T23:16:25</time></a>\n</div>\n<div class=\"content\"><p>Smarty appealed to us because it offered a (relatively) clean way to separate the code from the HTML output. It's definitely got its problems. A large part of the choice was based on my perception of Smarty as having much thought &amp; effort behind it, plus I like the idea of templates caching down to plain PHP. I've done a few PHP projects where I used PHP as the templating language, and frequently succumbed to the temptation to stash app logic into the templates where it didn't really belong. Smarty has a pretty extensive vocabulary, but has (so far) resisted the pull to incorporate more real-language features, like PHP did. It's worth remembering that PHP was originally supposed to be a template language for \"real\" code to be written in C. <em>shudder</em></p>\n<p>When we forked Reblog from Feed On Feeds, we were starting with raw-PHP display code mixed in with database calls, and it was a freaking disaster. One of my first design goals was to make it hacker-friendly, clarifying and documenting as many seams as possible so people could make localized changes more easily. I'd like to be using Python under the hood with Smarty on top, though there's a lot to be said for using commonly-known tools like Smarty in apps where you want to encourage modifications.</p>\n<p>And Wordpress.... oh, Wordpress. My eyes roll back in my head when I'm forced to touch its convoluted innards. I pushed hard for a Reblog plug-in API specifically so I could cheerfully deprecate the old-style Wordpress plug-in. =)</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Although I have [my grousing about PHP in general][gphp], I have to say that it makes much better template language as-is before pulling something like [Smarty][smarty] into the mix.  \r\n\r\nAt this point, I consider [Smarty][] to be evil—though I'm willing to admit that I haven't grokked it fully yet.  And this is coming from [a templating addict][tmpl] who has been at times in love with [Template Toolkit][tt] in Perl,  [Velocity][] in Java, and [Cheetah][] and [Woven][] and [ZPT/TAL][zpt] in Python.  \r\n\r\n[WordPress][] seems to have put native-PHP-as-templating to good use, so I've already got a favorite for comparison.  But the use of [Smarty][] in [reBlog][] rubs me the wrong way.  Of course, [reBlog][] has a lot of highly-abstracted MVC architecture going on.  And this, itself, is something I haven't much in my PHP explorations thus far.  (In fact, I almost hate to see PHP chopped up in this J2EE-esque fashion, but that's another story.  Oh, and [reBlog][] rocks, by the way.)\r\n\r\nBut either way, [Smarty][] makes this right-handed hacker feel like he's writing with his left.  It seems to have a lot of weird conventions and terminology for which neither knowledge of PHP nor knowledge of other templating systems in general seem much help.  It could just be a learning curve, but to me it seems like an odd *sideways* curve at the moment.  \r\n\r\nIn fact, you know what?  [Smarty][] reminds me a lot of [DTML in Zope][dtml].  I hate [DTML][]—it, also, is most firmly on my evil list.\r\n\r\nYuck.  Again, it could be just that I haven't known [Smarty][] long enough to like it... but yuck.\r\n\r\n<!-- tags: templating php smarty dtml python perl cheetah webdev programming syndication reblog wordpress evil -->\r\n\r\n[dtml]: http://www.zope.org/Documentation/Guides/DTML-HTML/DTML.html\r\n[tt]: http://www.template-toolkit.org/\r\n[velocity]: http://jakarta.apache.org/velocity/\r\n[gphp]: http://decafbad.com/blog/2005/12/18/not-so-deep-php-thoughts\r\n[cheetah]: http://www.cheetahtemplate.org/\r\n[zpt]: http://www.owlfish.com/software/simpleTAL/\r\n[smarty]: http://smarty.php.net\r\n[wordpress]: http://wordpress.org/\r\n[reblog]: http://www.reblog.org/\r\n[woven]: http://twisted.sourceforge.net/TwistedDocs-1.2.0rc3/howto/woven.html\r\n[tmpl]: http://decafbad.com/blog/2005/09/25/templates-good-or-evil\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221082526\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://luka.kladaric.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=78b0e32da6ce10e17db345a9aa8cde78&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://luka.kladaric.net/\">Luka Kladaric</a>\r\n                </div>\r\n                <a href=\"#comment-221082526\" class=\"permalink\"><time datetime=\"2006-01-08T11:55:40\">2006-01-08T11:55:40</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I agree with you... I used Smarty in one project and am now using it in another work-in-progress... and I have to say, the decision to use it with the second was a bad one... Smarty is pretty cool for simple templating, but when you need raw power, it leaves you shipwrecked... I had to turn to some really black magic to get things done... Anyway, a rewrite of the first project is in negotiations and I'm 100% sure I will <em>NOT</em> be using Smarty there, either.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082527\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://laughingmeme.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=01457d1a0f0e533062cd0d1033fb4d7a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://laughingmeme.org\">kellan</a>\r\n                </div>\r\n                <a href=\"#comment-221082527\" class=\"permalink\"><time datetime=\"2006-01-08T14:34:57\">2006-01-08T14:34:57</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Agreed.  Using a templating languages with PHP makes no sense. (though I'm not sure the fact that WP does or doesn't do something makes it good design)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082528\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221082528\" class=\"permalink\"><time datetime=\"2006-01-08T15:03:33\">2006-01-08T15:03:33</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Kellan:  Oh, no, WordPress isn't an automatic gold standard for me...  There's plenty that could be better about WP.  (Not having checked out 2.0 yet)  But, I just had a much better time setting up the templates for this blog than I have had in hacking around with templates implemented in Smarty.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082529\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://sporkmonger.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://sporkmonger.com/\">Bob Aman</a>\r\n                </div>\r\n                <a href=\"#comment-221082529\" class=\"permalink\"><time datetime=\"2006-01-08T17:41:17\">2006-01-08T17:41:17</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Me, I just wish there was a templating system for Ruby for me to fall in love with.  With all due respect to the Rails people, ERb just doesn't really do it for me.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082530\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\r\n                </div>\r\n                <a href=\"#comment-221082530\" class=\"permalink\"><time datetime=\"2006-01-08T21:04:14\">2006-01-08T21:04:14</time></a>\r\n            </div>\r\n            <div class=\"content\"><p><a href=\"#comment-3388\" rel=\"nofollow\">Bob</a>: port <a href=\"http://kid.lesscode.org/language.html\" rel=\"nofollow\">Kid</a> to Ruby. :-<i></i>)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082532\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://talideon.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e698f564ac90c4c248f1f678caafd624&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://talideon.com/\">Keith Gaughan</a>\r\n                </div>\r\n                <a href=\"#comment-221082532\" class=\"permalink\"><time datetime=\"2006-01-08T21:28:05\">2006-01-08T21:28:05</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>What's moronic is that people go to all this trouble building templating systems when all you really need is extract(). Sad, really.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082533\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.ntwizards.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cb564795a1912c36f9fa1399fd22ce29&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.ntwizards.net/\">Bryce</a>\r\n                </div>\r\n                <a href=\"#comment-221082533\" class=\"permalink\"><time datetime=\"2006-01-12T13:33:10\">2006-01-12T13:33:10</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>PHP as a template engine is more evil than Smarty. The main issue is that template authors may not be trustworthy. Once you include or eval() a PHP template the app is no longer in control and I don't see any way of structuring a PHP app such that it cannot be subverted from within. </p>\r\n\r\n<p>The only defense seems to be using the tokenizer functions to build a PHP parser that validates templates against a \"whitelist\" of allowed operations. Savant's Restricted Compiler is about the only implementation out there, but it's not quite complete and seems to be more of a proof-of-concept than battle-tested code.</p>\r\n\r\n<p>Whatever Smarty's faults, it solves the untrusted templates problem nicely.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082534\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221082534\" class=\"permalink\"><time datetime=\"2006-01-12T14:27:42\">2006-01-12T14:27:42</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Bryce: Oh, I totally understand the implications of offering too much capability to template authors.  That's just how much I dislike Smarty—I'm willing to risk it, rather than put up with that particular implementation.  On the other hand, in my situation, I'm on the same team with the template developers, so we're all on the same team to sink or swim.  I know it's not that simple, in principle, but it covers the 80% of the 80/20 equation.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082536\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://dougal.gunters.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=81717a172b6918071fbea1a52483294b&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://dougal.gunters.org/\">Dougal Campbell</a>\r\n                </div>\r\n                <a href=\"#comment-221082536\" class=\"permalink\"><time datetime=\"2006-01-12T15:25:25\">2006-01-12T15:25:25</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Yeah, I was never able to get into Smarty either, and I've never been able to put my finger on why. Philosophically, I like the idea of using template engines, particularly if you're collaborating with a non-programming designer. I even wrote one (albeit a <em>very simple</em> one) myself, once. But I've never used any of the PHP template packages that I've looked at.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082537\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://sporkmonger.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://sporkmonger.com/\">Bob Aman</a>\r\n                </div>\r\n                <a href=\"#comment-221082537\" class=\"permalink\"><time datetime=\"2006-01-13T01:10:16\">2006-01-13T01:10:16</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Aristotle: When TurboGears first came out, I almost did, believe it or not.  But then I remembered that FeedTools eats all of the time I have available for open-source projects, and I figured someone else would probably do it for me anyways...</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082538\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\r\n                </div>\r\n                <a href=\"#comment-221082538\" class=\"permalink\"><time datetime=\"2006-01-13T09:02:38\">2006-01-13T09:02:38</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Hehe. Well, I plan to port it to Perl, in any case. :<i></i>-)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082539\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=31475c246f5521e40d92a29ec0e36aa8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Brian Grayless</a>\r\n                </div>\r\n                <a href=\"#comment-221082539\" class=\"permalink\"><time datetime=\"2006-01-19T16:00:24\">2006-01-19T16:00:24</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Smarty is really a waste of time. Some food for thought....</p>\r\n\r\n<p><a href=\"http://www.fudnik.com/main/tiki-read_article.php?articleId=7\" rel=\"nofollow\">Smarty for Dummies?</a></p>\r\n\r\n<p>Just write better code!!!</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082540\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bdbf6409528370f5549e8470caf6ba30&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Tali Banana</a>\r\n                </div>\r\n                <a href=\"#comment-221082540\" class=\"permalink\"><time datetime=\"2006-02-01T07:33:41\">2006-02-01T07:33:41</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Well, quite opinionated I see.</p>\r\n\r\n<p>Smarty solves some fantastic problems and the cacheing system is beyond fabulous at this level.</p>\r\n\r\n<p>I've used Smarty on several projects and have been using it now exclusively for 4 years.  Of course, I used others but it was getting sick coming to a new phase in a project and finding out the template system had become RIP....abandoned before their time.</p>\r\n\r\n<p>Smarty has done two great things for me, and I'll speak about them until the day that PHP is abolished:</p>\r\n\r\n<ol>\r\n<li><p>Smarty has reduced my code to a reasonably sized, scan-able, masterpiece.  Having the logic and presentation seperate is so nice.  I recently rewrote one of my old projects using smarty and all of a sudden it made sense!  No more php in the html and no more html in the php.  And that's something you can't solve without templates for you juniors out there.</p></li>\r\n<li><p>Smarty's caching has turned monster db queries into non issues.  Consider this.  A top 10 list from all-time sales.  I'm talking about searching a db with sales spanning 6 years for all items purchased and creating a top sales page.  Easy!  Smarty does it once and caches the results until I decide they need to be refreshed.  Took a 4 second execution time down to less than 0.4 seconds.  And all without having to implement a CMS or otherwise.  Even if you have limitless resources to buy new hardware, caching like this still makes sense.  And the intermediate php/html cache is brilliant.  Everything is so much faster with smarty.</p></li>\r\n</ol>\r\n\r\n<p>I can't deny, I love Smarty.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082542\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221082542\" class=\"permalink\"><time datetime=\"2006-02-01T11:43:36\">2006-02-01T11:43:36</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Tali: I'm usually opinionated, but I try to listen &amp; learn :)</p>\r\n\r\n<p>The benefits you describe with Smarty would seem to come with any decent web development system.  Separating logic and presentation are the general idea behind templating, and some sort of caching is a must no matter what you're using as a presentation-side tool.  My beef is that, out of all the templating systems I've used, Smarty is one of the ugliest.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082543\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bdbf6409528370f5549e8470caf6ba30&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Tali Banana</a>\r\n                </div>\r\n                <a href=\"#comment-221082543\" class=\"permalink\"><time datetime=\"2006-02-01T17:30:03\">2006-02-01T17:30:03</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Smarty does need some standards redesign on the interface, as does php itself which has been well documented but slow going.</p>\r\n\r\n<p>Coming from the PERL background and previous php template systems I've been very happy with Smarty in general, even if there are a few things that could be done to speed up the learning curve.</p>\r\n\r\n<p>May be worthwhile jumping on the dev team and making some suggestions.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082544\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\r\n                </div>\r\n                <a href=\"#comment-221082544\" class=\"permalink\"><time datetime=\"2006-02-02T01:30:31\">2006-02-02T01:30:31</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>But why would you need a template system when you’re already working with PHP, which is itself a template system? Why do You don’t have to have different languages to be able to put the business logic in one file and the display logic in another.</p>\r\n\r\n<p>Perl (not PERL), btw, has the Template Toolkit on the CPAN, which is the spiritual father of Smarty. (And it’s vaguely more defensible in Perl’s case becase Perl is not a template system; though constrated with Perl the deficiencies of TT’s mini language are just all the more painfully obvious.)</p>\r\n\r\n<p>By all of which I mean to say that whether people use languages in stupid ways does not mean the language is the problem; not in either PHP’s or Perl’s case.</p>\r\n\r\n<p>I also don’t see why you need a templating system to implement caching; in fact, having caching coupled with the template engine sounds like a bad distribution of responsibilities. (Indeed, Template Toolkit has no such facilities.) But there’s the Cache::Cache family of modules on the CPAN, which you can use to cache things completely independently of <em>what</em> is being cached – whether it be the output of a template, or the query results themselves, or anything else, which might not even have anything to do without any output you generate.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082546\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bab1c370ad7b246023e23e87c8e206c4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">M.</a>\r\n                </div>\r\n                <a href=\"#comment-221082546\" class=\"permalink\"><time datetime=\"2006-02-16T14:13:18\">2006-02-16T14:13:18</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I've good experiences with the Expose PHP template engine (www.kwasd.nl/expose). It doesn't require you to learn a new language, because it uses plain PHP and still offers security, because it contains a tokenizer and, in fact, a small compiler. I used it for some projects and it really offered all I needed. </p>\r\n\r\n<p>And for people who wonder why one would need a template engine: I work with designers and I don't want them to mingle application code. By setting up a shared folder which contains the templates, they can safely work on design and never need to touch my controller or module files. Especially since this template engine has a tokenizer/compiler, they can't call unsafe PHP functions (only those that you, the programmer, register).</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082549\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://mike.teczno.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e3b46099c3fd3844c4539b27f143fd97&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://mike.teczno.com\">Michal Migurski</a>\r\n                </div>\r\n                <a href=\"#comment-221082549\" class=\"permalink\"><time datetime=\"2006-03-05T23:16:25\">2006-03-05T23:16:25</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Smarty appealed to us because it offered a (relatively) clean way to separate the code from the HTML output. It's definitely got its problems. A large part of the choice was based on my perception of Smarty as having much thought &amp; effort behind it, plus I like the idea of templates caching down to plain PHP. I've done a few PHP projects where I used PHP as the templating language, and frequently succumbed to the temptation to stash app logic into the templates where it didn't really belong. Smarty has a pretty extensive vocabulary, but has (so far) resisted the pull to incorporate more real-language features, like PHP did. It's worth remembering that PHP was originally supposed to be a template language for \"real\" code to be written in C. <em>shudder</em></p>\r\n\r\n<p>When we forked Reblog from Feed On Feeds, we were starting with raw-PHP display code mixed in with database calls, and it was a freaking disaster. One of my first design goals was to make it hacker-friendly, clarifying and documenting as many seams as possible so people could make localized changes more easily. I'd like to be using Python under the hood with Smarty on top, though there's a lot to be said for using commonly-known tools like Smarty in apps where you want to encourage modifications.</p>\r\n\r\n<p>And Wordpress.... oh, Wordpress. My eyes roll back in my head when I'm forced to touch its convoluted innards. I pushed hard for a Reblog plug-in API specifically so I could cheerfully deprecate the old-style Wordpress plug-in. =)</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/01/07/smarty-is-on-my-evil-list"
  },
  {
    "comments_archived": true,
    "date": "2005-12-19T04:17:55.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "ajax",
      "json",
      "webdev",
      "xml"
    ],
    "title": "Okay, okay, JSON is pretty hot",
    "wordpress_id": 802,
    "wordpress_slug": "okay-okay-json-is-pretty-hot",
    "wordpress_url": "http://decafbad.com/blog/?p=802",
    "year": "2005",
    "month": "12",
    "day": "18",
    "isDir": false,
    "slug": "okay-okay-json-is-pretty-hot",
    "postName": "2005-12-18-okay-okay-json-is-pretty-hot",
    "html": "<p>The XML <strike>purist</strike> fanboy in me has had me <em>pshaw</em>&#39;ing at JSON.  But, now that <a href=\"http://ws1.inf.scd.yahoo.com/common/json.html\">the recent JSON release from Yahoo!</a> reminded me of its existence and I <a href=\"http://decafbad.com/2005/12/FeedMagick/docs/json-demo.html\">gave it a shot</a> myself, I have to admit that it&#39;s pretty hot—if only for the cross-domain bridging capabilities and the no-fuss parsing.</p>\n<p>Although, I do worry about running into a poisoned payload someday that raids my cookie jar. </p>\n<!-- tags: webdev ajax json xml -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221082692\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\">fluffy</a>\n</div>\n<a href=\"#comment-221082692\" class=\"permalink\"><time datetime=\"2005-12-19T06:50:57\">2005-12-19T06:50:57</time></a>\n</div>\n<div class=\"content\"><p>JSON is currently the big Hot Thing at work.  It's very good for some things, but IMO it's not nearly as robust as XML as far as generic interchange goes.  Its big drawback is that it's not nearly as flexible, and since elements are either unordered or stored in an array, you have to agree upon the actual structure of the document before you send it across the wire (which isn't so much the case with XML where often all you care about is the nesting order which you can handle with XPath or similar).</p>\n<p>It's GREAT for AJAX though, as long as you can trust the server of course.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082695\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.whump.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=152a649080e99c313ecae9a34c60d11d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.whump.com/\">Bill Humphries</a>\n</div>\n<a href=\"#comment-221082695\" class=\"permalink\"><time datetime=\"2005-12-19T07:26:09\">2005-12-19T07:26:09</time></a>\n</div>\n<div class=\"content\"><p>I thought <a href=\"http://microformats.org/wiki/rest/ahah\" rel=\"nofollow\">AHAH</a> was the current big thing. Just send HTML to the client and use <code>Element.innerHTML</code>.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "The XML <strike>purist</strike> fanboy in me has had me *pshaw*'ing at JSON.  But, now that [the recent JSON release from Yahoo!][yj] reminded me of its existence and I [gave it a shot][gs] myself, I have to admit that it's pretty hot—if only for the cross-domain bridging capabilities and the no-fuss parsing.\r\n\r\nAlthough, I do worry about running into a poisoned payload someday that raids my cookie jar. \r\n\r\n<!-- tags: webdev ajax json xml -->\r\n\r\n[yj]: http://ws1.inf.scd.yahoo.com/common/json.html\r\n[gs]: http://decafbad.com/2005/12/FeedMagick/docs/json-demo.html\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221082692\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://beesbuzz.biz/\">fluffy</a>\r\n                </div>\r\n                <a href=\"#comment-221082692\" class=\"permalink\"><time datetime=\"2005-12-19T06:50:57\">2005-12-19T06:50:57</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>JSON is currently the big Hot Thing at work.  It's very good for some things, but IMO it's not nearly as robust as XML as far as generic interchange goes.  Its big drawback is that it's not nearly as flexible, and since elements are either unordered or stored in an array, you have to agree upon the actual structure of the document before you send it across the wire (which isn't so much the case with XML where often all you care about is the nesting order which you can handle with XPath or similar).</p>\r\n\r\n<p>It's GREAT for AJAX though, as long as you can trust the server of course.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082695\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.whump.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=152a649080e99c313ecae9a34c60d11d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.whump.com/\">Bill Humphries</a>\r\n                </div>\r\n                <a href=\"#comment-221082695\" class=\"permalink\"><time datetime=\"2005-12-19T07:26:09\">2005-12-19T07:26:09</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I thought <a href=\"http://microformats.org/wiki/rest/ahah\" rel=\"nofollow\">AHAH</a> was the current big thing. Just send HTML to the client and use <code>Element.innerHTML</code>.</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/12/18/okay-okay-json-is-pretty-hot"
  },
  {
    "comments_archived": true,
    "date": "2005-12-19T03:59:31.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "javascript"
    ],
    "title": "JS versus PHP?",
    "wordpress_id": 804,
    "wordpress_slug": "js-versus-php",
    "wordpress_url": "http://decafbad.com/blog/?p=804",
    "year": "2005",
    "month": "12",
    "day": "18",
    "isDir": false,
    "slug": "js-versus-php",
    "postName": "2005-12-18-js-versus-php",
    "html": "<p>...on the other hand:  With all these people getting reacquainted with JavaScript by way of AJAX, wouldn&#39;t it be cool if we had something as easy to deploy as PHP but based on JavaScript?</p>\n<!-- tags: javascript webdev php -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090997\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.snook.ca/jonathan/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ce0f8df84e1e4edb3d9999740472261a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.snook.ca/jonathan/\">Jonathan Snook</a>\n</div>\n<a href=\"#comment-221090997\" class=\"permalink\"><time datetime=\"2005-12-19T04:26:31\">2005-12-19T04:26:31</time></a>\n</div>\n<div class=\"content\"><p>Isn't that ASP?</p>\n<p>I know I've liked the idea of doing JavaScript on the server and client. Less confusing.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090999\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://admin.support.journurl.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5f89d3df08b8dedac1a0fde900a586db&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://admin.support.journurl.com/\">Roger Benningfield</a>\n</div>\n<a href=\"#comment-221090999\" class=\"permalink\"><time datetime=\"2005-12-19T15:10:28\">2005-12-19T15:10:28</time></a>\n</div>\n<div class=\"content\"><p>As of CFMX, the CFScript sub-branch of the language is similar to Javascript... the handling of curly brackets is the same, and Coldfusion Components are basically a server-side implementation of Javascript's approach to objects.</p>\n<p>The big difference is in operators. For some reason, they stuck with CF's standard, text-based operators, so you end up with stuff like this:</p>\n<p>if (i=1;i LT 10;i = i + 1) {\n// do something\n}</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091000\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221091000\" class=\"permalink\"><time datetime=\"2005-12-19T18:23:36\">2005-12-19T18:23:36</time></a>\n</div>\n<div class=\"content\"><p>Jonathan: Well, yeah, JScript is one of the languages available in ASP...  but ASP isn't a quick configure-and-make module for Apache.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091001\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=47a5b72b5be083e6dd744f59ab6143c5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Stephen De Gabrielle</a>\n</div>\n<a href=\"#comment-221091001\" class=\"permalink\"><time datetime=\"2005-12-21T07:31:52\">2005-12-21T07:31:52</time></a>\n</div>\n<div class=\"content\"><p>Isn't Rhino the obvious solution? I'm sure there is an opensource jvm/compiler that it will run on too?</p>\n<p>http://www.mozilla.org/rhino/</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221091002\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.vivabit.com/bollocks\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6ab593768880d22b442d964443b4e4c5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.vivabit.com/bollocks\">Dan Webb</a>\n</div>\n<a href=\"#comment-221091002\" class=\"permalink\"><time datetime=\"2006-04-04T23:18:43\">2006-04-04T23:18:43</time></a>\n</div>\n<div class=\"content\"><p>I'd love to give that a go.  I like RoR for large applications but having an apache mod that interpeted JS along with some APIs to access the system and server environment would be great.</p>\n<p>I've been looking for someone to start that project with because unfortunately I know hardly any C.  If anyone does an is interested then I'd love to give it a shot.  </p>\n<p>I think mod_javascript was started years ago but stalled eventually before it came to anything.  I think spidermonkey would be a better basis that rhino to get in all to run as fast as possible which is a shame because I can code Java..</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "...on the other hand:  With all these people getting reacquainted with JavaScript by way of AJAX, wouldn't it be cool if we had something as easy to deploy as PHP but based on JavaScript?\r\n\r\n<!-- tags: javascript webdev php -->\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221090997\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.snook.ca/jonathan/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ce0f8df84e1e4edb3d9999740472261a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.snook.ca/jonathan/\">Jonathan Snook</a>\r\n                </div>\r\n                <a href=\"#comment-221090997\" class=\"permalink\"><time datetime=\"2005-12-19T04:26:31\">2005-12-19T04:26:31</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Isn't that ASP?</p>\r\n\r\n<p>I know I've liked the idea of doing JavaScript on the server and client. Less confusing.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221090999\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://admin.support.journurl.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5f89d3df08b8dedac1a0fde900a586db&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://admin.support.journurl.com/\">Roger Benningfield</a>\r\n                </div>\r\n                <a href=\"#comment-221090999\" class=\"permalink\"><time datetime=\"2005-12-19T15:10:28\">2005-12-19T15:10:28</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>As of CFMX, the CFScript sub-branch of the language is similar to Javascript... the handling of curly brackets is the same, and Coldfusion Components are basically a server-side implementation of Javascript's approach to objects.</p>\r\n\r\n<p>The big difference is in operators. For some reason, they stuck with CF's standard, text-based operators, so you end up with stuff like this:</p>\r\n\r\n<p>if (i=1;i LT 10;i = i + 1) {\r\n// do something\r\n}</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221091000\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221091000\" class=\"permalink\"><time datetime=\"2005-12-19T18:23:36\">2005-12-19T18:23:36</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Jonathan: Well, yeah, JScript is one of the languages available in ASP...  but ASP isn't a quick configure-and-make module for Apache.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221091001\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=47a5b72b5be083e6dd744f59ab6143c5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Stephen De Gabrielle</a>\r\n                </div>\r\n                <a href=\"#comment-221091001\" class=\"permalink\"><time datetime=\"2005-12-21T07:31:52\">2005-12-21T07:31:52</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Isn't Rhino the obvious solution? I'm sure there is an opensource jvm/compiler that it will run on too?</p>\r\n\r\n<p>http://www.mozilla.org/rhino/</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221091002\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.vivabit.com/bollocks\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6ab593768880d22b442d964443b4e4c5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.vivabit.com/bollocks\">Dan Webb</a>\r\n                </div>\r\n                <a href=\"#comment-221091002\" class=\"permalink\"><time datetime=\"2006-04-04T23:18:43\">2006-04-04T23:18:43</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I'd love to give that a go.  I like RoR for large applications but having an apache mod that interpeted JS along with some APIs to access the system and server environment would be great.</p>\r\n\r\n<p>I've been looking for someone to start that project with because unfortunately I know hardly any C.  If anyone does an is interested then I'd love to give it a shot.  </p>\r\n\r\n<p>I think mod_javascript was started years ago but stalled eventually before it came to anything.  I think spidermonkey would be a better basis that rhino to get in all to run as fast as possible which is a shame because I can code Java..</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/12/18/js-versus-php"
  },
  {
    "comments_archived": true,
    "date": "2005-12-19T03:50:25.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "python",
      "ruby",
      "perl"
    ],
    "title": "Not-so-deep PHP thoughts",
    "wordpress_id": 803,
    "wordpress_slug": "not-so-deep-php-thoughts",
    "wordpress_url": "http://decafbad.com/blog/?p=803",
    "year": "2005",
    "month": "12",
    "day": "18",
    "isDir": false,
    "slug": "not-so-deep-php-thoughts",
    "postName": "2005-12-18-not-so-deep-php-thoughts",
    "html": "<p>You know, not that I&#39;ve been at it for long, but I&#39;ve had an long-running observation about PHP:</p>\n<p>As a language and an API, <a href=\"http://www.netalive.org/swsu/archives/2004/09/why_php_still_s.html\">PHP kinda stinks</a>.  It&#39;s got more crud than I left behind in Perl, but without all the meta-magic that made it worth it.  And, I get a little nervous tic when I think about it in relation to Python and Ruby.</p>\n<p>On the other hand, it&#39;s ubiquitous and cheap—and because it&#39;s in the hands of people with all levels of skill, most popular PHP apps have by necessity managed a high standard of easy install and simplicity.  The languages with more meta-magic tend to attract eggheads (myself included) who can forget about keeping things simple.</p>\n<p>And, did I mention PHP is ubiquitous?</p>\n<!-- tags: php webdev perl python ruby -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221083537\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.whump.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=152a649080e99c313ecae9a34c60d11d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.whump.com/\">Bill Humphries</a>\n</div>\n<a href=\"#comment-221083537\" class=\"permalink\"><time datetime=\"2005-12-19T06:38:33\">2005-12-19T06:38:33</time></a>\n</div>\n<div class=\"content\"><ol>\n<li>PHP has some future-proofing in that almost everyone doing web development knows it or can pick it up. That reduces risks for IT adoption.</li>\n<li>$5/month web hosts have it installed.</li>\n</ol></div>\n</li>\n<li class=\"comment\" id=\"comment-221083539\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://wdogsystems.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6e24f47aa88626872c16e0f740739e8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://wdogsystems.com\">Tim Howland</a>\n</div>\n<a href=\"#comment-221083539\" class=\"permalink\"><time datetime=\"2006-01-10T14:27:54\">2006-01-10T14:27:54</time></a>\n</div>\n<div class=\"content\"><p>While I don't care for the crappy structure that the language seems to revel in (SQL in your HTML? WTF?), what I despise about PHP is how hard it is to build and deploy it with a ny extensions to the basic feature set.</p>\n<p>If you need to do images, you compile in LibGD, if you want to render text, you get the freetype libraries, if you need something that isn't mysql, you compile that in- and then off you go trying to find the version of libJpeg from 1993, because the ancient version of libGD that's bundled with PHP doesn't work with anything more recent.</p>\n<p>Plain-vanilla PHP is ubiquitous, but trying to roll your own on an arbitrary box somewhere and do something that doesn't come with the default PHP that ships with your distribution is a huge and unnecessary pain in the ass. Perl can be annoying, but at least it isn't a monolithic binary- the library system drastically reduces the cross-component dependencies that PHP suffers from.</p>\n<p>PHP sucks, and it amazes me that it is so ubiquitous. On the otherhand, so is Microsoft Windows.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "You know, not that I've been at it for long, but I've had an long-running observation about PHP:\r\n\r\nAs a language and an API, [PHP kinda stinks][ps].  It's got more crud than I left behind in Perl, but without all the meta-magic that made it worth it.  And, I get a little nervous tic when I think about it in relation to Python and Ruby.\r\n\r\nOn the other hand, it's ubiquitous and cheap—and because it's in the hands of people with all levels of skill, most popular PHP apps have by necessity managed a high standard of easy install and simplicity.  The languages with more meta-magic tend to attract eggheads (myself included) who can forget about keeping things simple.\r\n\r\nAnd, did I mention PHP is ubiquitous?\r\n\r\n<!-- tags: php webdev perl python ruby -->\r\n\r\n[ps]: http://www.netalive.org/swsu/archives/2004/09/why_php_still_s.html\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221083537\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.whump.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=152a649080e99c313ecae9a34c60d11d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.whump.com/\">Bill Humphries</a>\r\n                </div>\r\n                <a href=\"#comment-221083537\" class=\"permalink\"><time datetime=\"2005-12-19T06:38:33\">2005-12-19T06:38:33</time></a>\r\n            </div>\r\n            <div class=\"content\"><ol>\r\n<li>PHP has some future-proofing in that almost everyone doing web development knows it or can pick it up. That reduces risks for IT adoption.</li>\r\n<li>$5/month web hosts have it installed.</li>\r\n</ol></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221083539\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://wdogsystems.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6e24f47aa88626872c16e0f740739e8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://wdogsystems.com\">Tim Howland</a>\r\n                </div>\r\n                <a href=\"#comment-221083539\" class=\"permalink\"><time datetime=\"2006-01-10T14:27:54\">2006-01-10T14:27:54</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>While I don't care for the crappy structure that the language seems to revel in (SQL in your HTML? WTF?), what I despise about PHP is how hard it is to build and deploy it with a ny extensions to the basic feature set.</p>\r\n\r\n<p>If you need to do images, you compile in LibGD, if you want to render text, you get the freetype libraries, if you need something that isn't mysql, you compile that in- and then off you go trying to find the version of libJpeg from 1993, because the ancient version of libGD that's bundled with PHP doesn't work with anything more recent.</p>\r\n\r\n<p>Plain-vanilla PHP is ubiquitous, but trying to roll your own on an arbitrary box somewhere and do something that doesn't come with the default PHP that ships with your distribution is a huge and unnecessary pain in the ass. Perl can be annoying, but at least it isn't a monolithic binary- the library system drastically reduces the cross-component dependencies that PHP suffers from.</p>\r\n\r\n<p>PHP sucks, and it amazes me that it is so ubiquitous. On the otherhand, so is Microsoft Windows.</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/12/18/not-so-deep-php-thoughts"
  },
  {
    "comments_archived": true,
    "date": "2005-12-19T03:01:51.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "ajax",
      "json",
      "webdev",
      "web20",
      "rss",
      "syndication",
      "atom",
      "javascript"
    ],
    "title": "FeedMagick gains an RSS-to-JSON filter",
    "wordpress_id": 801,
    "wordpress_slug": "feedmagick-gains-an-rss-to-json-filter",
    "wordpress_url": "http://decafbad.com/blog/?p=801",
    "year": "2005",
    "month": "12",
    "day": "18",
    "isDir": false,
    "slug": "feedmagick-gains-an-rss-to-json-filter",
    "postName": "2005-12-18-feedmagick-gains-an-rss-to-json-filter",
    "html": "<p>So, I put <a href=\"http://decafbad.com/2005/12/FeedMagick/\">some more infrastructure</a> behind <a href=\"http://decafbad.com/trac/wiki/FeedMagick\">FeedMagick</a> and lifted <a href=\"http://ejohn.org/projects/rss2json/\">a RSS-to-JSON idea from John Resig</a> to transform from <a href=\"http://magpierss.sourceforge.net/\">MagpieRSS</a> parsing to JSON output.  </p>\n<p>Here&#39;s <a href=\"http://decafbad.com/2005/12/FeedMagick/docs/json-demo.html\">a spiffy JSON-enriched demo</a>.  It was surprisingly easy, all told.</p>\n<p>I&#39;m not sure how much time I&#39;ll have to really put into this project, but this is the first decent effort I&#39;ve put into a URL-line suite in a long time.  I&#39;m trying to throw in some bits to make it easy to build, document, and use these feed processing commands.</p>\n<!-- tags: rss json php syndication atom javascript webdev ajax web20 -->\n\n",
    "body": "So, I put [some more infrastructure][in] behind [FeedMagick][fm] and lifted [a RSS-to-JSON idea from John Resig][jr] to transform from [MagpieRSS][mr] parsing to JSON output.  \r\n\r\nHere's [a spiffy JSON-enriched demo][jd].  It was surprisingly easy, all told.\r\n\r\nI'm not sure how much time I'll have to really put into this project, but this is the first decent effort I've put into a URL-line suite in a long time.  I'm trying to throw in some bits to make it easy to build, document, and use these feed processing commands.\r\n\r\n<!-- tags: rss json php syndication atom javascript webdev ajax web20 -->\r\n\r\n[mr]: http://magpierss.sourceforge.net/\r\n[jd]: http://decafbad.com/2005/12/FeedMagick/docs/json-demo.html\r\n[in]: http://decafbad.com/2005/12/FeedMagick/\r\n[jr]: http://ejohn.org/projects/rss2json/\r\n[fm]: http://decafbad.com/trac/wiki/FeedMagick\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/12/18/feedmagick-gains-an-rss-to-json-filter"
  },
  {
    "comments_archived": true,
    "date": "2005-11-30T03:06:24.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "firefox",
      "opensource"
    ],
    "title": "It's back to Firefox for me!",
    "wordpress_id": 785,
    "wordpress_slug": "its-back-to-firefox-for-me",
    "wordpress_url": "http://decafbad.com/blog/?p=785",
    "year": "2005",
    "month": "11",
    "day": "29",
    "isDir": false,
    "slug": "its-back-to-firefox-for-me",
    "postName": "2005-11-29-its-back-to-firefox-for-me",
    "html": "<blockquote cite=\"http://decafbad.com/blog/2005/10/28/its-back-to-omniweb-for-me\">So, after a good solid several months’ run with Firefox, the constant CPU drain finally got to me and I’ve gone back to OmniWeb.</blockquote>\n<small style=\"text-align:right; display:block\">Source: <a href=\"http://decafbad.com/blog/2005/10/28/its-back-to-omniweb-for-me\">It’s back to OmniWeb for me! » Archive » Blog » 0xDECAFBAD</a></small>\n\n<p>So, <a href=\"http://arstechnica.com/news.ars/post/20051129-5644.html\">since Firefox 1.5 has hit the wires</a>, I&#39;m giving it a shot again.  I just can&#39;t stay put on web browsers, can I?  </p>\n<p>I&#39;ve been poking at the last few pre-release versions of Firefox and have been pleasantly surprised:  It doesn&#39;t seem to be the CPU hog it once was for me, and someone built a <a href=\"http://users.blueprintit.co.uk/~dave/web/firefox/tabsidebar/index.html\">Tab Sidebar extension</a> which comes pretty close to the tab drawer I love in Omniweb.</p>\n<p>Now, I just have to see if I can figure out a way to force the sidebar narrower than the 150px or so it insist upon as a minimum width—I really want 25px-50px thumbs in my tab thumbs.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090156\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d8333ea779e4c5403687c02b54ac7304&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Justin</a>\n</div>\n<a href=\"#comment-221090156\" class=\"permalink\"><time datetime=\"2005-11-30T03:01:42\">2005-11-30T03:01:42</time></a>\n</div>\n<div class=\"content\"><p>Add this to your <a href=\"http://www.mozilla.org/support/firefox/edit\" rel=\"nofollow\">userChrome.css</a>:</p>\n<pre><code>#sidebar {\nmin-width: 0px !important;\nmax-width: none !important;\n}\n</code></pre>\n<p>...or adjust to suit.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090157\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221090157\" class=\"permalink\"><time datetime=\"2005-11-30T04:27:53\">2005-11-30T04:27:53</time></a>\n</div>\n<div class=\"content\"><p>@Justin:  Thank you, sir!  That does the trick perfectly, although I did seem to tickle a slight bug where the sidebar resize strip didn't want to let go of my mouse...  but that seemed like a fluke.</p>\n<p>(The funny thing is, most of the reason I posted this entry was in the hopes that someone would toss me a magic userChrome.css incantation that I hadn't yet dug out.)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090158\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://weblog.philringnalda.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2b6c1ba0915a97a81d59ca1e101e6d74&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://weblog.philringnalda.com/\">Phil Ringnalda</a>\n</div>\n<a href=\"#comment-221090158\" class=\"permalink\"><time datetime=\"2005-11-30T05:19:58\">2005-11-30T05:19:58</time></a>\n</div>\n<div class=\"content\"><p>If you want to stay happy with Firefox, just try to go easy on the extensions: there are vastly more ways to leak in extension code than there are comprehensible lists of those ways put where an extension author might spot them. I've been in that state of seemingly-random runaway memory leaks and wild CPU usage any number of times, but never yet while I was using a clean, extension-free profile.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090159\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.8bitjoystick.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56649421e9c3e301529f3e69e34fc5c3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.8bitjoystick.com/\">Jake of 8bitjoystick.com</a>\n</div>\n<a href=\"#comment-221090159\" class=\"permalink\"><time datetime=\"2005-11-30T16:26:02\">2005-11-30T16:26:02</time></a>\n</div>\n<div class=\"content\"><p>I have been using the1.5 Beta and RCs for a while nay and it is damn good on OSX</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090160\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://msittig.wubi.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a233a0b9bf67e939e7575b36e626744d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://msittig.wubi.org/\">Micah</a>\n</div>\n<a href=\"#comment-221090160\" class=\"permalink\"><time datetime=\"2005-12-01T08:48:11\">2005-12-01T08:48:11</time></a>\n</div>\n<div class=\"content\"><p>I recently switched too... <a href=\"http://msittig.blogspot.com/2005/11/ahh-joys-of-fresh-firefox-install-with.html\" title=\"Ah, the joys of a fresh Firefox install.\" rel=\"nofollow\">from Mozilla</a>.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://decafbad.com/blog/2005/10/28/its-back-to-omniweb-for-me\">So, after a good solid several months’ run with Firefox, the constant CPU drain finally got to me and I’ve gone back to OmniWeb.</blockquote>\r\n<small style=\"text-align:right; display:block\">Source: <a href=\"http://decafbad.com/blog/2005/10/28/its-back-to-omniweb-for-me\">It’s back to OmniWeb for me! » Archive » Blog » 0xDECAFBAD</a></small>\r\n\r\nSo, [since Firefox 1.5 has hit the wires][ff], I'm giving it a shot again.  I just can't stay put on web browsers, can I?  \r\n\r\nI've been poking at the last few pre-release versions of Firefox and have been pleasantly surprised:  It doesn't seem to be the CPU hog it once was for me, and someone built a [Tab Sidebar extension][ts] which comes pretty close to the tab drawer I love in Omniweb.\r\n\r\nNow, I just have to see if I can figure out a way to force the sidebar narrower than the 150px or so it insist upon as a minimum width—I really want 25px-50px thumbs in my tab thumbs.\r\n\r\n[ts]: http://users.blueprintit.co.uk/~dave/web/firefox/tabsidebar/index.html\r\n[ff]: http://arstechnica.com/news.ars/post/20051129-5644.html\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221090156\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d8333ea779e4c5403687c02b54ac7304&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Justin</a>\n                </div>\n                <a href=\"#comment-221090156\" class=\"permalink\"><time datetime=\"2005-11-30T03:01:42\">2005-11-30T03:01:42</time></a>\n            </div>\n            <div class=\"content\"><p>Add this to your <a href=\"http://www.mozilla.org/support/firefox/edit\" rel=\"nofollow\">userChrome.css</a>:</p>\n\n<pre><code>#sidebar {\n  min-width: 0px !important;\n  max-width: none !important;\n}\n</code></pre>\n\n<p>...or adjust to suit.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090157\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221090157\" class=\"permalink\"><time datetime=\"2005-11-30T04:27:53\">2005-11-30T04:27:53</time></a>\n            </div>\n            <div class=\"content\"><p>@Justin:  Thank you, sir!  That does the trick perfectly, although I did seem to tickle a slight bug where the sidebar resize strip didn't want to let go of my mouse...  but that seemed like a fluke.</p>\n\n<p>(The funny thing is, most of the reason I posted this entry was in the hopes that someone would toss me a magic userChrome.css incantation that I hadn't yet dug out.)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090158\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://weblog.philringnalda.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2b6c1ba0915a97a81d59ca1e101e6d74&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://weblog.philringnalda.com/\">Phil Ringnalda</a>\n                </div>\n                <a href=\"#comment-221090158\" class=\"permalink\"><time datetime=\"2005-11-30T05:19:58\">2005-11-30T05:19:58</time></a>\n            </div>\n            <div class=\"content\"><p>If you want to stay happy with Firefox, just try to go easy on the extensions: there are vastly more ways to leak in extension code than there are comprehensible lists of those ways put where an extension author might spot them. I've been in that state of seemingly-random runaway memory leaks and wild CPU usage any number of times, but never yet while I was using a clean, extension-free profile.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090159\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.8bitjoystick.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56649421e9c3e301529f3e69e34fc5c3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.8bitjoystick.com/\">Jake of 8bitjoystick.com</a>\n                </div>\n                <a href=\"#comment-221090159\" class=\"permalink\"><time datetime=\"2005-11-30T16:26:02\">2005-11-30T16:26:02</time></a>\n            </div>\n            <div class=\"content\"><p>I have been using the1.5 Beta and RCs for a while nay and it is damn good on OSX</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090160\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://msittig.wubi.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a233a0b9bf67e939e7575b36e626744d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://msittig.wubi.org/\">Micah</a>\n                </div>\n                <a href=\"#comment-221090160\" class=\"permalink\"><time datetime=\"2005-12-01T08:48:11\">2005-12-01T08:48:11</time></a>\n            </div>\n            <div class=\"content\"><p>I recently switched too... <a href=\"http://msittig.blogspot.com/2005/11/ahh-joys-of-fresh-firefox-install-with.html\" title=\"Ah, the joys of a fresh Firefox install.\" rel=\"nofollow\">from Mozilla</a>.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/11/29/its-back-to-firefox-for-me"
  },
  {
    "comments_archived": true,
    "date": "2005-11-02T20:29:25.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "linux",
      "microsoft"
    ],
    "title": "Why proprietary?",
    "wordpress_id": 765,
    "wordpress_slug": "why-proprietary",
    "wordpress_url": "http://decafbad.com/blog/?p=765",
    "year": "2005",
    "month": "11",
    "day": "02",
    "isDir": false,
    "slug": "why-proprietary",
    "postName": "2005-11-02-why-proprietary",
    "html": "<p>Hell, while I&#39;m at it, I&#39;ve got an expanded question to follow up <a href=\"http://decafbad.com/blog/2005/11/02/why-microsoft\">my last one</a>:</p>\n<p>Why would anyone developing a web application today sink any money whatsoever into a platform with any degree of proprietary technology?</p>\n<p>The latest <a href=\"http://scobleizer.wordpress.com/2005/11/01/ross-doesnt-trust-microsofts-approach-to-web/\">Scoble dispatch</a> is asking about Microsoft, but what about all the other closed-world web development environments out there?  Really, it&#39;s been awhile since I&#39;ve heard much about anything other than Microsoft versus Open Source in the web development world.  And, when I have heard about the other guys, it&#39;s usually in a scenario where someone got roped into the technology sometime in the dot-com boom days and have since built everything around it.  </p>\n<p>It seems this far out from the initial adoption that decisions are made less and less from technical merit, and more from monetary and political merit driven by the sales force.  The momentum of the platform maintains lock-in, despite any resulting impedance mismatches or inefficiencies which may crop up as the platform matures or (less charitably) ages.</p>\n<p>Finally, consider one of the main routes for finding support for Open Source platforms:  Google.  Have you run into a cryptic error message?  Google it.  Need to find docs for an API?  Google it.  So many of these wholly proprietary platforms have locked up a lot of their docs and forums behind for-pay password walls that Google never sees.</p>\n<p>Now, for now at least, it seems Microsoft has avoided these things.  But, my suspicion is that they&#39;re only able to do this as a commercial venture because of the sheer number of people and the wads of cash they have.  Eventually, I expect even they will be overrun.  I couldn&#39;t imagine a new closed-world web development platform taking off today.</p>\n<!-- tags: webdev linux microsoft -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086794\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://admin.support.journurl.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5f89d3df08b8dedac1a0fde900a586db&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://admin.support.journurl.com/\">Roger Benningfield</a>\n</div>\n<a href=\"#comment-221086794\" class=\"permalink\"><time datetime=\"2005-11-02T20:26:22\">2005-11-02T20:26:22</time></a>\n</div>\n<div class=\"content\"><p>\"Why would anyone developing a web application today sink any money whatsoever into a platform with any degree of proprietary technology?\"</p>\n<p>Because I like 'em? </p>\n<p>I use Win2k3/IIS because it is stable, easy to administer, and doesn't cost one dime more than a similar Linux/Apache server. I use Coldfusion because it's stable, easy to administer, gives me the option of using Java and COM stuff when necessary, and has a great group of folks at Macromedia supporting it.</p>\n<p>Meanwhile, I use MySQL because it's stable, cheap, and has a smaller footprint than SQL Server. Googling for support is actually quite annoying, but I take a \"you get what you pay for\" approach to these things.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086796\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221086796\" class=\"permalink\"><time datetime=\"2005-11-02T20:37:17\">2005-11-02T20:37:17</time></a>\n</div>\n<div class=\"content\"><p>Roger: Thanks for responding!  For what it's worth, I actually <em>do</em> want to see comments from people who've had good experiences with proprietary platforms, so as to balance out my leanings.</p>\n<p>Since you mentioned Macromedia, I realize that I wasn't thinking of them in my post.  They're basically semi-open proprietary (not unlike Microsoft), but I <em>do</em> like their stuff.  Well, Flash at least.  But ColdFusion...?  Admittedly, I haven't used it much since the arrival of CFMX, but I tend to think PHP's a better deal.  No offense, though, since I'm willing to blame my own ignorance.</p>\n<p>It's interesting that you say a Win2k3/IIS server is cost comparable to a Linux/Apache server, though.  Do you own your own server?  Lease a dedicated box?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086797\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.agileprogrammer.com/eightytwenty\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=12405222b80eca06189b246be2e57ef8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.agileprogrammer.com/eightytwenty\">Gordon Weakliem</a>\n</div>\n<a href=\"#comment-221086797\" class=\"permalink\"><time datetime=\"2005-11-02T21:59:04\">2005-11-02T21:59:04</time></a>\n</div>\n<div class=\"content\"><p>Roger's reason is basically the reason I was going to give.  People are most productive in an environment they know best.  This is especially true when it comes to operational support.  Any environment is going to get hairy at high loads and under \"normal operating conditions\", so when the poop hits the fan, you're better off in an environment that you're familiar with.  MySql may be a better DB, but if my DBA knows SQL Server inside and out and really knows how to use the tool, then you'll get better results with SQL Server over MySql.\nAnd anyway, according to Joel Spolsky, Google beats MSDN for support in most cases.  Actually, my experience bears out Joel's comment.  All support devolves into Googling, in most cases.  I use the MSDN support only for the real killers - those support incidents cost money, you know.\nGreat work on the book, BTW.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086798\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://admin.support.journurl.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5f89d3df08b8dedac1a0fde900a586db&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://admin.support.journurl.com/\">Roger Benningfield</a>\n</div>\n<a href=\"#comment-221086798\" class=\"permalink\"><time datetime=\"2005-11-09T00:16:17\">2005-11-09T00:16:17</time></a>\n</div>\n<div class=\"content\"><p>Sorry for not getting back before now.</p>\n<p>\"Admittedly, I haven’t used it much since the arrival of CFMX, but I tend to think PHP’s a better deal. No offense, though, since I’m willing to blame my own ignorance.\"</p>\n<p>I'm happy to sing CF's praises, but I'm not one of those people who get offended when someone prefers something else. Don't worry 'bout it.</p>\n<p>I just love CFMX. I love how the day-to-day stuff is really easy, and the esoteric stuff can be addressed by leveraging Java.  I love that the fundamental language structure makes sense to someone who taught himself to write code on a C-64 and an Atari ST. I love that it (mostly) handles Unicode for me. I love that it allows me to play with a little OOP while primarily sticking to procedural stuff. </p>\n<p>\"Lease a dedicated box?\"</p>\n<p>Yup. I could have gone Red Hat or Win2k3 during setup, and to me, it was a no-brainer. If nothing else, my wife has spent the last fifteen years as a network engineer, working mainly with Windows networks... free, in-house, 24/7 tech support cannot be ignored. :D</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086799\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221086799\" class=\"permalink\"><time datetime=\"2005-11-09T00:54:35\">2005-11-09T00:54:35</time></a>\n</div>\n<div class=\"content\"><p>Roger: Oh yeah!  I keep forgetting about the Java side of CFMX, and just keep thinking it's still only a funky-tag language.  I should check it out sometime</p>\n<p>And for my part, I learned to program on a C-64 and an Amiga :)  (Oh yeah, and there was an Atari 800 in there, early on.)</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Hell, while I'm at it, I've got an expanded question to follow up [my last one][wm]:\r\n\r\nWhy would anyone developing a web application today sink any money whatsoever into a platform with any degree of proprietary technology?\r\n\r\nThe latest [Scoble dispatch][scob] is asking about Microsoft, but what about all the other closed-world web development environments out there?  Really, it's been awhile since I've heard much about anything other than Microsoft versus Open Source in the web development world.  And, when I have heard about the other guys, it's usually in a scenario where someone got roped into the technology sometime in the dot-com boom days and have since built everything around it.  \r\n\r\nIt seems this far out from the initial adoption that decisions are made less and less from technical merit, and more from monetary and political merit driven by the sales force.  The momentum of the platform maintains lock-in, despite any resulting impedance mismatches or inefficiencies which may crop up as the platform matures or (less charitably) ages.\r\n\r\nFinally, consider one of the main routes for finding support for Open Source platforms:  Google.  Have you run into a cryptic error message?  Google it.  Need to find docs for an API?  Google it.  So many of these wholly proprietary platforms have locked up a lot of their docs and forums behind for-pay password walls that Google never sees.\r\n\r\nNow, for now at least, it seems Microsoft has avoided these things.  But, my suspicion is that they're only able to do this as a commercial venture because of the sheer number of people and the wads of cash they have.  Eventually, I expect even they will be overrun.  I couldn't imagine a new closed-world web development platform taking off today.\r\n\r\n[scob]: http://scobleizer.wordpress.com/2005/11/01/ross-doesnt-trust-microsofts-approach-to-web/\r\n[wm]: http://decafbad.com/blog/2005/11/02/why-microsoft\r\n\r\n<!-- tags: webdev linux microsoft -->\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221086794\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://admin.support.journurl.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5f89d3df08b8dedac1a0fde900a586db&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://admin.support.journurl.com/\">Roger Benningfield</a>\r\n                </div>\r\n                <a href=\"#comment-221086794\" class=\"permalink\"><time datetime=\"2005-11-02T20:26:22\">2005-11-02T20:26:22</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>\"Why would anyone developing a web application today sink any money whatsoever into a platform with any degree of proprietary technology?\"</p>\r\n\r\n<p>Because I like 'em? </p>\r\n\r\n<p>I use Win2k3/IIS because it is stable, easy to administer, and doesn't cost one dime more than a similar Linux/Apache server. I use Coldfusion because it's stable, easy to administer, gives me the option of using Java and COM stuff when necessary, and has a great group of folks at Macromedia supporting it.</p>\r\n\r\n<p>Meanwhile, I use MySQL because it's stable, cheap, and has a smaller footprint than SQL Server. Googling for support is actually quite annoying, but I take a \"you get what you pay for\" approach to these things.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086796\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221086796\" class=\"permalink\"><time datetime=\"2005-11-02T20:37:17\">2005-11-02T20:37:17</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Roger: Thanks for responding!  For what it's worth, I actually <em>do</em> want to see comments from people who've had good experiences with proprietary platforms, so as to balance out my leanings.</p>\r\n\r\n<p>Since you mentioned Macromedia, I realize that I wasn't thinking of them in my post.  They're basically semi-open proprietary (not unlike Microsoft), but I <em>do</em> like their stuff.  Well, Flash at least.  But ColdFusion...?  Admittedly, I haven't used it much since the arrival of CFMX, but I tend to think PHP's a better deal.  No offense, though, since I'm willing to blame my own ignorance.</p>\r\n\r\n<p>It's interesting that you say a Win2k3/IIS server is cost comparable to a Linux/Apache server, though.  Do you own your own server?  Lease a dedicated box?</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086797\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.agileprogrammer.com/eightytwenty\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=12405222b80eca06189b246be2e57ef8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.agileprogrammer.com/eightytwenty\">Gordon Weakliem</a>\r\n                </div>\r\n                <a href=\"#comment-221086797\" class=\"permalink\"><time datetime=\"2005-11-02T21:59:04\">2005-11-02T21:59:04</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Roger's reason is basically the reason I was going to give.  People are most productive in an environment they know best.  This is especially true when it comes to operational support.  Any environment is going to get hairy at high loads and under \"normal operating conditions\", so when the poop hits the fan, you're better off in an environment that you're familiar with.  MySql may be a better DB, but if my DBA knows SQL Server inside and out and really knows how to use the tool, then you'll get better results with SQL Server over MySql.\r\nAnd anyway, according to Joel Spolsky, Google beats MSDN for support in most cases.  Actually, my experience bears out Joel's comment.  All support devolves into Googling, in most cases.  I use the MSDN support only for the real killers - those support incidents cost money, you know.\r\nGreat work on the book, BTW.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086798\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://admin.support.journurl.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5f89d3df08b8dedac1a0fde900a586db&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://admin.support.journurl.com/\">Roger Benningfield</a>\r\n                </div>\r\n                <a href=\"#comment-221086798\" class=\"permalink\"><time datetime=\"2005-11-09T00:16:17\">2005-11-09T00:16:17</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Sorry for not getting back before now.</p>\r\n\r\n<p>\"Admittedly, I haven’t used it much since the arrival of CFMX, but I tend to think PHP’s a better deal. No offense, though, since I’m willing to blame my own ignorance.\"</p>\r\n\r\n<p>I'm happy to sing CF's praises, but I'm not one of those people who get offended when someone prefers something else. Don't worry 'bout it.</p>\r\n\r\n<p>I just love CFMX. I love how the day-to-day stuff is really easy, and the esoteric stuff can be addressed by leveraging Java.  I love that the fundamental language structure makes sense to someone who taught himself to write code on a C-64 and an Atari ST. I love that it (mostly) handles Unicode for me. I love that it allows me to play with a little OOP while primarily sticking to procedural stuff. </p>\r\n\r\n<p>\"Lease a dedicated box?\"</p>\r\n\r\n<p>Yup. I could have gone Red Hat or Win2k3 during setup, and to me, it was a no-brainer. If nothing else, my wife has spent the last fifteen years as a network engineer, working mainly with Windows networks... free, in-house, 24/7 tech support cannot be ignored. :D</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086799\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221086799\" class=\"permalink\"><time datetime=\"2005-11-09T00:54:35\">2005-11-09T00:54:35</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Roger: Oh yeah!  I keep forgetting about the Java side of CFMX, and just keep thinking it's still only a funky-tag language.  I should check it out sometime</p>\r\n\r\n<p>And for my part, I learned to program on a C-64 and an Amiga :)  (Oh yeah, and there was an Atari 800 in there, early on.)</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/11/02/why-proprietary"
  },
  {
    "comments_archived": true,
    "date": "2005-11-02T20:11:53.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "linux",
      "microsoft"
    ],
    "title": "Why Microsoft?",
    "wordpress_id": 764,
    "wordpress_slug": "why-microsoft",
    "wordpress_url": "http://decafbad.com/blog/?p=764",
    "year": "2005",
    "month": "11",
    "day": "02",
    "isDir": false,
    "slug": "why-microsoft",
    "postName": "2005-11-02-why-microsoft",
    "html": "<p><a href=\"http://scobleizer.wordpress.com/2005/11/01/ross-doesnt-trust-microsofts-approach-to-web/\">Given the recent discussion</a>, I&#39;ll ask the inverse and naïve-sounding question:  </p>\n<p>Why would anyone today sink money into a Microsoft solution for developing a web-based service or application?</p>\n<p>I mean, if you&#39;re already up to your eyeballs in Microsoft contracts, I could see momentum being on their side.  But, assume you&#39;re just starting today fresh from a good idea.  What would Microsoft give you today?</p>\n<p>The only thing I can <em>really</em> think of is <strong>support</strong>.  As in, someone to call and bug for answers or blame for problems.  Because—and maybe this is just a demonstration of my own ignorance—I can&#39;t really think of an area where Microsoft&#39;s offerings really blow any Open Source platforms out of the water, especially not once you&#39;ve considered cost and the loss of flexibility.</p>\n<!-- tags: webdev microsoft linux -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086323\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://virtuallyshocking.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=066c167d7062108915aa0eb5dd59d8bf&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://virtuallyshocking.com\">Brock Tice</a>\n</div>\n<a href=\"#comment-221086323\" class=\"permalink\"><time datetime=\"2005-11-03T02:12:59\">2005-11-03T02:12:59</time></a>\n</div>\n<div class=\"content\"><p>Hiya,\nI wanted to write a post about this myself with a trackback, but despite this being WordPress I can't seem to find a trackback URL.</p>\n<p>Anyway, I agree. And yet, people will still tie their own strait jackets on with Microsoft or whoever else. It used to be because it was easier or better-made, but I don't think that's necessarily the case any more.  Do you have any speculation?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086325\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n</div>\n<a href=\"#comment-221086325\" class=\"permalink\"><time datetime=\"2005-11-03T15:35:53\">2005-11-03T15:35:53</time></a>\n</div>\n<div class=\"content\"><p>I certainly can't see it for a public-facing system, but if you're building internal-enterprise apps, maybe it gives you integration into other stuff (e.g. Exchange for authentication, easy Office-doc publishing, etc.).</p>\n<p>I suspect that really only applies to a tiny slice of microsoft customers, though they're big shops (e.g. finance houses).</p>\n<p>For most MS customers I think it's mostly a conservative \"nobody ever got fired for buying IBM\" mentality.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086327\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.globaladvancedmedia.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=992964a1bc4f522795f8ae9ca5cafc91&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.globaladvancedmedia.com\">Jessica</a>\n</div>\n<a href=\"#comment-221086327\" class=\"permalink\"><time datetime=\"2005-11-04T00:30:08\">2005-11-04T00:30:08</time></a>\n</div>\n<div class=\"content\"><p>Yea why anyone would choose Microsoft platform over opensource would not make much sense today.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086329\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.zhangzhung.net/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15ce6eb84b3dd1c4277338196a0d36d5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.zhangzhung.net/blog/\">Al</a>\n</div>\n<a href=\"#comment-221086329\" class=\"permalink\"><time datetime=\"2005-11-04T19:29:19\">2005-11-04T19:29:19</time></a>\n</div>\n<div class=\"content\"><p>As Jamie Zawinski said a few years ago (loosely) \"Open source is only free if you don't value your time.\"</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086332\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221086332\" class=\"permalink\"><time datetime=\"2005-11-06T08:24:37\">2005-11-06T08:24:37</time></a>\n</div>\n<div class=\"content\"><p>Oh, please. For a developer? It's different with making things on an end-user system work, but for a developer, big-vendor systems are about the biggest timesink I can imagine.</p>\n<p>Les:</p>\n<p>Support isn't a good reason. Report a bug with an MS product and see how long it takes them to react; whether you get any means of tracking what's being done about it; if at all; and when you'll get a fix. You think they're going to compare favourably to open source projects?</p>\n<p>As for having someone to blame---not much consolation. Most software comes with no warranty whatsoever. The software vendor's liability extends about as far as guaranteeing that you can read the bits on the media you received with your purchase, and that's it. They certainly make not the least promise that the software works as advertised. Blame them all you want, they still won't owe you anything.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086333\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://diveintomark.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://diveintomark.org/\">Mark</a>\n</div>\n<a href=\"#comment-221086333\" class=\"permalink\"><time datetime=\"2005-11-29T05:44:14\">2005-11-29T05:44:14</time></a>\n</div>\n<div class=\"content\"><p>As I understand it from friends of mine who are smarter than me and choose the all-encompassing Microsoft universe, the #1 answer is the quality of the developer tools.  I've never been one for IDEs, but lots of developers swear by them, so they must be doing something right.</p>\n<p>Also, developer documentation, specifically MSDN.  The aforementioned friends swear by MSDN-on-DVD and its tight integration into the aforementioned developer tools.</p>\n<p>This is all hearsay; YMMV.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "[Given the recent discussion][disc], I'll ask the inverse and naïve-sounding question:  \r\n\r\nWhy would anyone today sink money into a Microsoft solution for developing a web-based service or application?\r\n\r\nI mean, if you're already up to your eyeballs in Microsoft contracts, I could see momentum being on their side.  But, assume you're just starting today fresh from a good idea.  What would Microsoft give you today?\r\n\r\nThe only thing I can *really* think of is **support**.  As in, someone to call and bug for answers or blame for problems.  Because—and maybe this is just a demonstration of my own ignorance—I can't really think of an area where Microsoft's offerings really blow any Open Source platforms out of the water, especially not once you've considered cost and the loss of flexibility.\r\n\r\n[disc]: http://scobleizer.wordpress.com/2005/11/01/ross-doesnt-trust-microsofts-approach-to-web/\r\n\r\n<!-- tags: webdev microsoft linux -->\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221086323\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://virtuallyshocking.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=066c167d7062108915aa0eb5dd59d8bf&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://virtuallyshocking.com\">Brock Tice</a>\r\n                </div>\r\n                <a href=\"#comment-221086323\" class=\"permalink\"><time datetime=\"2005-11-03T02:12:59\">2005-11-03T02:12:59</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Hiya,\r\n  I wanted to write a post about this myself with a trackback, but despite this being WordPress I can't seem to find a trackback URL.</p>\r\n\r\n<p>Anyway, I agree. And yet, people will still tie their own strait jackets on with Microsoft or whoever else. It used to be because it was easier or better-made, but I don't think that's necessarily the case any more.  Do you have any speculation?</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086325\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\r\n                </div>\r\n                <a href=\"#comment-221086325\" class=\"permalink\"><time datetime=\"2005-11-03T15:35:53\">2005-11-03T15:35:53</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I certainly can't see it for a public-facing system, but if you're building internal-enterprise apps, maybe it gives you integration into other stuff (e.g. Exchange for authentication, easy Office-doc publishing, etc.).</p>\r\n\r\n<p>I suspect that really only applies to a tiny slice of microsoft customers, though they're big shops (e.g. finance houses).</p>\r\n\r\n<p>For most MS customers I think it's mostly a conservative \"nobody ever got fired for buying IBM\" mentality.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086327\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.globaladvancedmedia.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=992964a1bc4f522795f8ae9ca5cafc91&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.globaladvancedmedia.com\">Jessica</a>\r\n                </div>\r\n                <a href=\"#comment-221086327\" class=\"permalink\"><time datetime=\"2005-11-04T00:30:08\">2005-11-04T00:30:08</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Yea why anyone would choose Microsoft platform over opensource would not make much sense today.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086329\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.zhangzhung.net/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15ce6eb84b3dd1c4277338196a0d36d5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.zhangzhung.net/blog/\">Al</a>\r\n                </div>\r\n                <a href=\"#comment-221086329\" class=\"permalink\"><time datetime=\"2005-11-04T19:29:19\">2005-11-04T19:29:19</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>As Jamie Zawinski said a few years ago (loosely) \"Open source is only free if you don't value your time.\"</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086332\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\r\n                </div>\r\n                <a href=\"#comment-221086332\" class=\"permalink\"><time datetime=\"2005-11-06T08:24:37\">2005-11-06T08:24:37</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Oh, please. For a developer? It's different with making things on an end-user system work, but for a developer, big-vendor systems are about the biggest timesink I can imagine.</p>\r\n\r\n<p>Les:</p>\r\n\r\n<p>Support isn't a good reason. Report a bug with an MS product and see how long it takes them to react; whether you get any means of tracking what's being done about it; if at all; and when you'll get a fix. You think they're going to compare favourably to open source projects?</p>\r\n\r\n<p>As for having someone to blame---not much consolation. Most software comes with no warranty whatsoever. The software vendor's liability extends about as far as guaranteeing that you can read the bits on the media you received with your purchase, and that's it. They certainly make not the least promise that the software works as advertised. Blame them all you want, they still won't owe you anything.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086333\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://diveintomark.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=357a20e8c56e69d6f9734d23ef9517e8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://diveintomark.org/\">Mark</a>\r\n                </div>\r\n                <a href=\"#comment-221086333\" class=\"permalink\"><time datetime=\"2005-11-29T05:44:14\">2005-11-29T05:44:14</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>As I understand it from friends of mine who are smarter than me and choose the all-encompassing Microsoft universe, the #1 answer is the quality of the developer tools.  I've never been one for IDEs, but lots of developers swear by them, so they must be doing something right.</p>\r\n\r\n<p>Also, developer documentation, specifically MSDN.  The aforementioned friends swear by MSDN-on-DVD and its tight integration into the aforementioned developer tools.</p>\r\n\r\n<p>This is all hearsay; YMMV.</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/11/02/why-microsoft"
  },
  {
    "comments_archived": true,
    "date": "2005-10-08T17:21:30.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "writing",
      "javascript",
      "books"
    ],
    "title": "DOM Scripting sounds like a fine book",
    "wordpress_id": 726,
    "wordpress_slug": "dom-scripting-sounds-like-a-fine-book",
    "wordpress_url": "http://decafbad.com/blog/?p=726",
    "year": "2005",
    "month": "10",
    "day": "08",
    "isDir": false,
    "slug": "dom-scripting-sounds-like-a-fine-book",
    "postName": "2005-10-08-dom-scripting-sounds-like-a-fine-book",
    "html": "<blockquote cite=\"http://domscripting.com/blog/display.php/21\">Flicking through the book, it does give the impression of being full of code. I hope that doesn’t scare off any potential buyers.</blockquote>\n<small style=\"text-align:right; display:block\">Source: <a href=\"http://domscripting.com/blog/display.php/21\">DOM Scripting: The book has landed</a></small><br />\nThis is one thing I'd worried about with [my book][book], but on the other hand [I always wanted to write for The Transactor][trans].  And what I wanted to write was a book <i>I</i> would've wanted to buy, if I hadn't written it.\n\n<p>By the sounds of it, <a href=\"http://domscripting.com/book/\">DOM Scripting</a> has turned out brilliantly.  I&#39;m looking forward to checking it out!  It&#39;s described as a book targeted at designers versus coders—but a lot of times, it&#39;s easier to show-don&#39;t-tell with code than with prose. </p>\n<blockquote cite=\"http://domscripting.com/blog/display.php/21\">Apart from those minor quibbles, I’m pleased as punch. I still can’t quite believe that I wrote an honest-to-goodness book. Some form of celebration is called for.</blockquote>\n\n<p>This is exactly how I felt, too.  Congratulations, Jeremy!  I&#39;m going to have to pick up <a href=\"http://domscripting.com/book/\">a copy of this book</a> for myself!</p>\n<!-- tags: books writing javascript webdev -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087064\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://domscripting.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b92a329df428bcda0822b25a110ab5ac&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://domscripting.com/\">Jeremy Keith</a>\n</div>\n<a href=\"#comment-221087064\" class=\"permalink\"><time datetime=\"2005-10-09T00:42:48\">2005-10-09T00:42:48</time></a>\n</div>\n<div class=\"content\"><p>Thanks, Leslie. I think you can relate to how I'm feeling right now.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087066\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://bt2net.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=61087c5f5f3f410280fb5c9dd4786582&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://bt2net.org/\">Warren Fischer</a>\n</div>\n<a href=\"#comment-221087066\" class=\"permalink\"><time datetime=\"2005-10-09T10:51:38\">2005-10-09T10:51:38</time></a>\n</div>\n<div class=\"content\"><p>This book makes sense in a clear, and consice way that most tech books don't. His examples are great, and his writing style is very readable. Thanks!</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://domscripting.com/blog/display.php/21\">Flicking through the book, it does give the impression of being full of code. I hope that doesn’t scare off any potential buyers.</blockquote>\r\n<small style=\"text-align:right; display:block\">Source: <a href=\"http://domscripting.com/blog/display.php/21\">DOM Scripting: The book has landed</a></small><br />\r\nThis is one thing I'd worried about with [my book][book], but on the other hand [I always wanted to write for The Transactor][trans].  And what I wanted to write was a book <i>I</i> would've wanted to buy, if I hadn't written it.\r\n\r\nBy the sounds of it, [DOM Scripting][dom] has turned out brilliantly.  I'm looking forward to checking it out!  It's described as a book targeted at designers versus coders—but a lot of times, it's easier to show-don't-tell with code than with prose. \r\n\r\n<blockquote cite=\"http://domscripting.com/blog/display.php/21\">Apart from those minor quibbles, I’m pleased as punch. I still can’t quite believe that I wrote an honest-to-goodness book. Some form of celebration is called for.</blockquote>\r\n\r\nThis is exactly how I felt, too.  Congratulations, Jeremy!  I'm going to have to pick up [a copy of this book][dom] for myself!\r\n\r\n[dom]: http://domscripting.com/book/\r\n[book]: http://www.amazon.com/exec/obidos/ASIN/0764597582/0xdecafbad01-20?creative=327641&camp=14573&link_code=as1\r\n[trans]: http://decafbad.com/blog/2004/05/25/i-was-a-pre-teen-transactor-author-wannabe-and-still-am\r\n\r\n<!-- tags: books writing javascript webdev -->\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221087064\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://domscripting.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b92a329df428bcda0822b25a110ab5ac&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://domscripting.com/\">Jeremy Keith</a>\r\n                </div>\r\n                <a href=\"#comment-221087064\" class=\"permalink\"><time datetime=\"2005-10-09T00:42:48\">2005-10-09T00:42:48</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Thanks, Leslie. I think you can relate to how I'm feeling right now.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087066\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://bt2net.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=61087c5f5f3f410280fb5c9dd4786582&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://bt2net.org/\">Warren Fischer</a>\r\n                </div>\r\n                <a href=\"#comment-221087066\" class=\"permalink\"><time datetime=\"2005-10-09T10:51:38\">2005-10-09T10:51:38</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>This book makes sense in a clear, and consice way that most tech books don't. His examples are great, and his writing style is very readable. Thanks!</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/10/08/dom-scripting-sounds-like-a-fine-book"
  },
  {
    "comments_archived": true,
    "date": "2005-10-05T20:58:21.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "rss",
      "syndication",
      "atom",
      "projects",
      "aggregation",
      "feedspool"
    ],
    "title": "FeedSpool is progressing nicely",
    "wordpress_id": 717,
    "wordpress_slug": "feedspool-is-progressing-nicely",
    "wordpress_url": "http://decafbad.com/blog/?p=717",
    "year": "2005",
    "month": "10",
    "day": "05",
    "isDir": false,
    "slug": "feedspool-is-progressing-nicely",
    "postName": "2005-10-05-feedspool-is-progressing-nicely",
    "html": "<p>I&#39;m at it again:  Last night, I got an initial stab at a <a href=\"http://decafbad.com/trac/wiki/FeedSpool/Plugins\">plugin API</a> for <a href=\"http://decafbad.com/trac/wiki/FeedSpool\">FeedSpool</a> working.</p>\n<p>The first thing I built was an <a href=\"http://decafbad.com/trac/browser/trunk/feedspool/plugins/poll_schedule_vary.py\">auto-adjusting feed poll schedule plugin</a> which varies the time between feed polls based on whether there were new entries found in the latest poll.  It&#39;s kind of like an AIMD algorithm used in networking—I thank <a href=\"http://decafbad.com/blog/2003/09/29/dynamic-polling-freq-too#comment-1061\">Gnomon</a> for the idea a few years back.</p>\n<p>The next thing I built was a <a href=\"http://decafbad.com/trac/browser/trunk/feedspool/plugins/miniagg/\">quick plugin bundle I call <code>miniagg</code></a>.  If you&#39;d like a preview, I&#39;ve posted <a href=\"http://decafbad.com/2005/10/miniagg/news-20051005-152956.html\">an HTML snapshot of what <code>miniagg</code> produces</a>.  It&#39;s a refinement and reworking of various aggregator UI pieces I&#39;ve had floating around since <a href=\"http://decafbad.com/trac/wiki/AmphetaOutlines\">AmphetaOutlines</a>, only I think this is the simplest and cleanest I&#39;ve gotten it yet.  (CSS and unobtrusive JavaScript, hooray!)</p>\n<p>This only seems to work on Firefox and Safari—it&#39;s currently broken for MSIE, and I don&#39;t care enough to fix it yet.  (Something to do with multiple CSS classes, I believe.)  But, if you&#39;re unfortunate enough to be using that browser, here&#39;s a screen capture:  </p>\n<p><a href=\"http://www.decafbad.com/blog_attachments/miniagg-1.jpg\" onclick=\"window.open('http://www.decafbad.com/blog_attachments/miniagg-1.jpg','popup','width=984,height=742,scrollbars=no,resizable=yes,toolbar=no,directories=no,location=no,menubar=no,status=yes,left=0,top=0');return false\"><img src=\"http://www.decafbad.com/blog_attachments/miniagg-1-tm.jpg\" height=\"244\" width=\"324\" border=\"1\" hspace=\"4\" vspace=\"4\" alt=\"Miniagg-1\" /></a></p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221085179\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://thecrypto.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=55fe39199c1dbe9e342e527d0173c57f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://thecrypto.org\">Julian Krause</a>\n</div>\n<a href=\"#comment-221085179\" class=\"permalink\"><time datetime=\"2005-10-05T22:12:31\">2005-10-05T22:12:31</time></a>\n</div>\n<div class=\"content\"><p>I've been using a program called <a href=\"http://offog.org/code/rawdog.html\" rel=\"nofollow\">Rawdog</a> for a while as my feed reader. Miniagg looks very similar to it. I've been looking for a replacement as he is not planning to support Atom 1.0 since <a href=\"http://feedparser.org\" rel=\"nofollow\">feedparser</a> has gone unmaintained. The HTML preview looks really good, I'm importing my subscriptions right now ;)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085180\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221085180\" class=\"permalink\"><time datetime=\"2005-10-05T23:25:03\">2005-10-05T23:25:03</time></a>\n</div>\n<div class=\"content\"><p>Alas, this miniagg uses feedparser also.  However, I was thinking of patching / finding someone who'd patched feedparser for Atom 1.0—or replacing it with a new, maybe less liberal parser of my own, since FeedSpool is actually not all that liberal (in that it requires valid XML, anyway).</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085182\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221085182\" class=\"permalink\"><time datetime=\"2005-10-06T08:48:52\">2005-10-06T08:48:52</time></a>\n</div>\n<div class=\"content\"><p><a href=\"http://fucoder.com/2005/08/feedparser-atom-10-patch/\" rel=\"nofollow\">FeedParser Atom 1.0 support patch</a>.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085183\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=9e44fa55e7078bff7c3dab8404913928&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Dan V.</a>\n</div>\n<a href=\"#comment-221085183\" class=\"permalink\"><time datetime=\"2005-10-26T19:16:09\">2005-10-26T19:16:09</time></a>\n</div>\n<div class=\"content\"><p>The feedparser page says that a prerelease v4.0 can be downloaded that includes support for Atom 1.0 feeds.  Beats writing your own :)</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "I'm at it again:  Last night, I got an initial stab at a [plugin API][api] for [FeedSpool][fs] working.\r\n\r\nThe first thing I built was an [auto-adjusting feed poll schedule plugin][vary] which varies the time between feed polls based on whether there were new entries found in the latest poll.  It's kind of like an AIMD algorithm used in networking—I thank [Gnomon][g] for the idea a few years back.\r\n\r\nThe next thing I built was a [quick plugin bundle I call `miniagg`][mini].  If you'd like a preview, I've posted [an HTML snapshot of what `miniagg` produces][mini_preview].  It's a refinement and reworking of various aggregator UI pieces I've had floating around since [AmphetaOutlines][amph], only I think this is the simplest and cleanest I've gotten it yet.  (CSS and unobtrusive JavaScript, hooray!)\r\n\r\nThis only seems to work on Firefox and Safari—it's currently broken for MSIE, and I don't care enough to fix it yet.  (Something to do with multiple CSS classes, I believe.)  But, if you're unfortunate enough to be using that browser, here's a screen capture:  \r\n\r\n<a href=\"http://www.decafbad.com/blog_attachments/miniagg-1.jpg\" onclick=\"window.open('http://www.decafbad.com/blog_attachments/miniagg-1.jpg','popup','width=984,height=742,scrollbars=no,resizable=yes,toolbar=no,directories=no,location=no,menubar=no,status=yes,left=0,top=0');return false\"><img src=\"http://www.decafbad.com/blog_attachments/miniagg-1-tm.jpg\" height=\"244\" width=\"324\" border=\"1\" hspace=\"4\" vspace=\"4\" alt=\"Miniagg-1\" /></a>\r\n\r\n[g]: http://decafbad.com/blog/2003/09/29/dynamic-polling-freq-too#comment-1061\r\n[amph]: http://decafbad.com/trac/wiki/AmphetaOutlines\r\n[vary]: http://decafbad.com/trac/browser/trunk/feedspool/plugins/poll_schedule_vary.py\r\n[api]: http://decafbad.com/trac/wiki/FeedSpool/Plugins\r\n[fs]: http://decafbad.com/trac/wiki/FeedSpool\r\n[mini]: http://decafbad.com/trac/browser/trunk/feedspool/plugins/miniagg/\r\n[mini_preview]: http://decafbad.com/2005/10/miniagg/news-20051005-152956.html\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221085179\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://thecrypto.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=55fe39199c1dbe9e342e527d0173c57f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://thecrypto.org\">Julian Krause</a>\n                </div>\n                <a href=\"#comment-221085179\" class=\"permalink\"><time datetime=\"2005-10-05T22:12:31\">2005-10-05T22:12:31</time></a>\n            </div>\n            <div class=\"content\"><p>I've been using a program called <a href=\"http://offog.org/code/rawdog.html\" rel=\"nofollow\">Rawdog</a> for a while as my feed reader. Miniagg looks very similar to it. I've been looking for a replacement as he is not planning to support Atom 1.0 since <a href=\"http://feedparser.org\" rel=\"nofollow\">feedparser</a> has gone unmaintained. The HTML preview looks really good, I'm importing my subscriptions right now ;)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085180\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221085180\" class=\"permalink\"><time datetime=\"2005-10-05T23:25:03\">2005-10-05T23:25:03</time></a>\n            </div>\n            <div class=\"content\"><p>Alas, this miniagg uses feedparser also.  However, I was thinking of patching / finding someone who'd patched feedparser for Atom 1.0—or replacing it with a new, maybe less liberal parser of my own, since FeedSpool is actually not all that liberal (in that it requires valid XML, anyway).</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085182\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n                </div>\n                <a href=\"#comment-221085182\" class=\"permalink\"><time datetime=\"2005-10-06T08:48:52\">2005-10-06T08:48:52</time></a>\n            </div>\n            <div class=\"content\"><p><a href=\"http://fucoder.com/2005/08/feedparser-atom-10-patch/\" rel=\"nofollow\">FeedParser Atom 1.0 support patch</a>.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085183\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=9e44fa55e7078bff7c3dab8404913928&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Dan V.</a>\n                </div>\n                <a href=\"#comment-221085183\" class=\"permalink\"><time datetime=\"2005-10-26T19:16:09\">2005-10-26T19:16:09</time></a>\n            </div>\n            <div class=\"content\"><p>The feedparser page says that a prerelease v4.0 can be downloaded that includes support for Atom 1.0 feeds.  Beats writing your own :)</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/10/05/feedspool-is-progressing-nicely",
    "thumbnail": "http://www.decafbad.com/blog_attachments/miniagg-1-tm.jpg"
  },
  {
    "comments_archived": true,
    "date": "2005-10-05T11:14:25.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "hacks",
      "webdev",
      "nifty",
      "http",
      "proxy",
      "ruby"
    ],
    "title": "RedHanded Â» Announcing the MouseHole Proxy",
    "wordpress_id": 714,
    "wordpress_slug": "redhanded-%c2%bb-announcing-the-mousehole-proxy",
    "wordpress_url": "http://decafbad.com/blog/?p=714",
    "year": "2005",
    "month": "10",
    "day": "05",
    "isDir": false,
    "slug": "redhanded-%c2%bb-announcing-the-mousehole-proxy",
    "postName": "2005-10-05-redhanded-%c2%bb-announcing-the-mousehole-proxy",
    "html": "<blockquote cite=\"http://redhanded.hobix.com/inspect/theMouseholeProxy.html\">MouseHole is a scriptable proxy. Like Greasemonkey, but scripts are in Ruby.</blockquote><small style=\"text-align:right; display:block\">Source: <a href=\"http://redhanded.hobix.com/inspect/theMouseholeProxy.html\">RedHanded » Announcing the MouseHole Proxy</a></small><br />\n\n<p>MouseHole looks pretty freakin&#39; sweet.  It&#39;s doing one of the things I never got around to making <a href=\"http://decafbad.com/trac/wiki/AgentFrank\">AgentFrank</a> do.  Every now and then I get an itch to revisit that project (or, more likely, its <a href=\"http://decafbad.com/trac/wiki/DbProxy\">Pythonic sibling</a>).  </p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086801\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.screwtheman.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=52c00253a2327f7d1d351fdd259405c1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.screwtheman.com\">Paul</a>\n</div>\n<a href=\"#comment-221086801\" class=\"permalink\"><time datetime=\"2005-10-05T13:49:56\">2005-10-05T13:49:56</time></a>\n</div>\n<div class=\"content\"><p>Hey Mr. Hacking RSS ,</p>\n<p>You may want to change the relative &lt;href=\"af\"&gt; because it doesn't resolve very well from inside an RSS reader (like Bloglines).</p>\n<p>;oD</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086802\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221086802\" class=\"permalink\"><time datetime=\"2005-10-05T14:13:20\">2005-10-05T14:13:20</time></a>\n</div>\n<div class=\"content\"><p>@Paul: D'oht.  That wasn't supposed to be an <code>&lt;a href=\"af\"&gt;</code>.  </p>\n<p>Looks like I mixed up my <code>()</code>'s with my <code>[]</code>'s in Markdown when making the link reference.  Should be fixed now!</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://redhanded.hobix.com/inspect/theMouseholeProxy.html\">MouseHole is a scriptable proxy. Like Greasemonkey, but scripts are in Ruby.</blockquote><small style=\"text-align:right; display:block\">Source: <a href=\"http://redhanded.hobix.com/inspect/theMouseholeProxy.html\">RedHanded » Announcing the MouseHole Proxy</a></small><br />\r\n\r\nMouseHole looks pretty freakin' sweet.  It's doing one of the things I never got around to making [AgentFrank][af] do.  Every now and then I get an itch to revisit that project (or, more likely, its [Pythonic sibling][dp]).  \r\n\r\n[af]: http://decafbad.com/trac/wiki/AgentFrank\r\n[dp]: http://decafbad.com/trac/wiki/DbProxy\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221086801\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.screwtheman.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=52c00253a2327f7d1d351fdd259405c1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.screwtheman.com\">Paul</a>\n                </div>\n                <a href=\"#comment-221086801\" class=\"permalink\"><time datetime=\"2005-10-05T13:49:56\">2005-10-05T13:49:56</time></a>\n            </div>\n            <div class=\"content\"><p>Hey Mr. Hacking RSS ,</p>\n\n<p>You may want to change the relative &lt;href=\"af\"&gt; because it doesn't resolve very well from inside an RSS reader (like Bloglines).</p>\n\n<p>;oD</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086802\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221086802\" class=\"permalink\"><time datetime=\"2005-10-05T14:13:20\">2005-10-05T14:13:20</time></a>\n            </div>\n            <div class=\"content\"><p>@Paul: D'oht.  That wasn't supposed to be an <code>&lt;a href=\"af\"&gt;</code>.  </p>\n\n<p>Looks like I mixed up my <code>()</code>'s with my <code>[]</code>'s in Markdown when making the link reference.  Should be fixed now!</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/10/05/redhanded-%c2%bb-announcing-the-mousehole-proxy"
  },
  {
    "comments_archived": true,
    "date": "2005-09-26T01:12:46.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "rss",
      "syndication",
      "webservices",
      "atom",
      "xml"
    ],
    "title": "Templates:  Good or Evil?",
    "wordpress_id": 689,
    "wordpress_slug": "templates-good-or-evil",
    "wordpress_url": "http://decafbad.com/blog/?p=689",
    "year": "2005",
    "month": "09",
    "day": "25",
    "isDir": false,
    "slug": "templates-good-or-evil",
    "postName": "2005-09-25-templates-good-or-evil",
    "html": "<blockquote cite=\"http://lachy.id.au/log/2005/04/xhtml-future#comment-271\">This cry and whine that draconian handling will break your page and make your users suffer for you if you have a single error is just another legacy of HTML we’ve gotten used to: our toolchains tend to be of the “glue strings together” (aka templates) variety. ... There should never be any part of your publishing toolchain just gluing strings together. Ever.</blockquote><span style=\"float:right; font-size: 0.75em; width:75%\">Source: <a href=\"http://lachy.id.au/log/2005/04/xhtml-future#comment-271\">Aristotle Pagaltzis in a comment on \"The Future: HTML or XHTML\"</a></span><br style=\"clear:both\" /><blockquote cite=\"http://lesscode.org/2005/09/24/web-services-infrastructure-kid/\">There’s no rule that says templates must only be used to generate HTML. Indeed, many of the RSS and Atom feeds in the wild are generated from some form of template. They are never automatically-generated-behind-the-scenes using language bindings and are very rarely generated using some kind of DOM/SAX API.</blockquote><span style=\"float:right; font-size: 0.75em; width:75%\">Source: <a href=\"http://lesscode.org/2005/09/24/web-services-infrastructure-kid/\">Web Services Infrastructure: Kid Templating  </a></span><br style=\"clear:both\" />\n\n<p>I&#39;ve been meaning to write about this for some time now, though I&#39;ve never had my thoughts together to any degree to mount a decent case for either side.  Problem is, I haven&#39;t gotten much closer now, but I figured I&#39;d at least post a few thoughts and conjure up a vague sketch of the issue.</p>\n<p>You see, I think it all goes back to <a href=\"http://decafbad.com/blog/2002/12/13/oooced\">thoughts about which I posted almost three years ago</a>.  On the one hand, producing something like XML using &quot;proper&quot; DOM invocations and handwavings seems like the &quot;correct&quot; thing to do.  Yet, on the other hand, using a templating system lets me get down to business much more quickly and with much more clarity and succinct code.  </p>\n<p>Yeah, templates provide a range of flexibility sufficient to aim the barrel at your own toes, while an API like the XML DOM keeps everything on the rails--but sometimes you know where you&#39;re going and don&#39;t need the rails to get you there.  Furthermore, isn&#39;t it possible to make a template system that Does The Right Thing?</p>\n<p>Anyway, it&#39;s rather apparent that I&#39;m solidly in favor of templates:  After all, a book of mine just hit the shelves which is just rife with template-based generation of RSS and Atom feeds.  </p>\n<p>My only issue, really, is that I feel vaguely guilty about it.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221084924\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=821395fe70906c8290df7f18ac4ac6cf&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">rick</a>\n</div>\n<a href=\"#comment-221084924\" class=\"permalink\"><time datetime=\"2005-09-26T02:27:37\">2005-09-26T02:27:37</time></a>\n</div>\n<div class=\"content\">Ruby has the nice Builder module for this (http://builder.rubyforge.org/).  Ruby on Rails uses it for it's rxml templates.  So, you still get the speed of templates, but you don't have to worry about those pesky xml rules.\nHere's a sample Atom 1.0 template used by Typo, a rails weblogging system: http://typo.leetsoft.com/trac/file/trunk/app/views/xml/atom10_feed.rxml</div>\n</li>\n<li class=\"comment\" id=\"comment-221084925\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221084925\" class=\"permalink\"><time datetime=\"2005-09-26T03:52:50\">2005-09-26T03:52:50</time></a>\n</div>\n<div class=\"content\">Using the DOM to build documents is awfully awkward. Don&#8217;t do that.\nCheck <a href=\"http://hsivonen.iki.fi/\" rel=\"nofollow\">Henri Sivonen</a>&#8217;s suggestions just published in his <a href=\"http://hsivonen.iki.fi/producing-xml/\" rel=\"nofollow\">HOWTO Avoid Being Called a Bozo When Producing XML</a>. Instead of building a DOM, generate SAX events, using the program structure to ensure proper nesting &#8211; or instead of generating the SAX events all manually, generate them by parsing a static XML document and using certain interesting points in the stream (such as Processing Instructions) as hooks for inserting payload.\nThe emission of synthesised SAX events can be generalised by writing a datastructure-to-SAX serialiser, so that you can build your data within your language&#8217;s native datastructures prior to outputting it, for maximum comfort. (Of course you serialise piecemeal too, f.ex. by outputting the head of a feed manually, then for each item, building the data structure and immediately serialising it, then emitting the final events to complete the document.)\nDepending on the complexity of the output, you could directly emit the otuput format or feed the events into to an XSLT transform that generates the full-blown thing from an easy to generate document structure. In both cases this can be done with or without the involvement of a serialiser as middle man.\nThere are plenty of ways to make sure that the entire toolchain from one end to the other consists only of steps that conserve well-formedness, and they need not be any less convenient than using templates.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084926\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084926\" class=\"permalink\"><time datetime=\"2005-09-26T04:16:35\">2005-09-26T04:16:35</time></a>\n</div>\n<div class=\"content\"><blockquote>or instead of generating the SAX events all manually, generate them by parsing a static XML document and using certain interesting points in the stream (such as Processing Instructions) as hooks for inserting payload.</blockquote>\nAristotle:  Now here's where I think certain templating technologies get interesting, and may Do the Right Thing.  My so-far-favorite templating kit, ZPT, wants well-formed XML as templates--although I think that restriction is unfortunately relaxed as a nod to HTML.  On the other hand, my possibly-new-favorite templating kit, Kid, [demands well-formed XML as templates](http://lesscode.org/projects/kid/wiki/KidFaq#must-templates-be-well-formed-xml).\nIn case you haven't played with them, these two template languages center around the idea that certain attributes on elements define where content provided in a data structure should be inserted / swapped in by the template engine.  The engine handles character encodings and such to ensure that the well-formed template results in a well-formed document.\nDoes this match up with what you say up there?</div>\n</li>\n<li class=\"comment\" id=\"comment-221084928\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084928\" class=\"permalink\"><time datetime=\"2005-09-26T04:28:49\">2005-09-26T04:28:49</time></a>\n</div>\n<div class=\"content\">I guess the other thing that bugs me about constructing documents via DOM or via generating SAX events—which I'd first discovered in <a href=\"http://www.xml.com/pub/a/2003/03/12/py-xml.html\" rel=\"nofollow\">this XML.com article by Uche Ogbuji</a>—is how awkward and removed it is from the view-source XML I've gotten used to hacking around with.  Of course, my distaste for programmatically generating things like this goes back to <a href=\"http://perldoc.perl.org/CGI.html#CREATING-STANDARD-HTML-ELEMENTS%3a\" rel=\"nofollow\">CGI.pm</a> in my perl-hacking days.\nWhen I start writing <i>code</i> to generate <i>data</i> that could be mostly done with a template, it strikes me as tangling Model/View/Controller elements and introducing weird context shifts.  (ie. h1() vs &lt;h1 /&gt;)  Not sure if that made sense...</div>\n</li>\n<li class=\"comment\" id=\"comment-221084929\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.sporkmonger.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.sporkmonger.com\">Bob Aman</a>\n</div>\n<a href=\"#comment-221084929\" class=\"permalink\"><time datetime=\"2005-09-26T05:40:24\">2005-09-26T05:40:24</time></a>\n</div>\n<div class=\"content\">Yeah, I was gonna say, Builder for Ruby solves most of the issues with using templates and xml.  For RSS and Atom, there's also my Ruby FeedTools library, which makes it even more rediculously easy to get a valid feed up and running.\nI'm also very tempted to play around with Kid and see how I like it, and perhaps port it to Ruby.  From what I've seen so far, it looks like perhaps the nicest templating system yet.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084930\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221084930\" class=\"permalink\"><time datetime=\"2005-09-26T05:59:08\">2005-09-26T05:59:08</time></a>\n</div>\n<div class=\"content\">It does. I confess I actually kind of liked <a href=\"http://search.cpan.org/dist/CGI.pm/\" rel=\"nofollow\">CGI.pm</a> &#8211; because nesting is automatically taken care of without so much typing of end tags, and you can seamlessly weave <code>map</code>s into the code for output loops.\nI have to note though that I used it as a sort of template language in its own right &#8211; I never littered <code>print</code>s all over my code, I kept all the calls in a single place, in fact, usually a single expression. That is also why I find it strange that people create template languages for PHP, which was itself born as a template language. What matters is that the output generation is separate from the processing logic, whether or not the template and the code are in different languages.\nAnyway, I digress.\nWhat I wanted to say is, no, I hadn&#8217;t seen either ZPT or Kid. I had put off reading the lesscode.org article you quoted and went back to it after responding here. Now that I&#8217;ve read it, I admit I&#8217;m intrigued. I&#8217;ll have to look into Kid; it sounds like an interesting take.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084931\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084931\" class=\"permalink\"><time datetime=\"2005-09-26T13:39:00\">2005-09-26T13:39:00</time></a>\n</div>\n<div class=\"content\"><blockquote>What matters is that the output generation is separate from the processing logic, whether or not the template and the code are in different languages.</blockquote>\nAh hah, yeah, that's what I was fumbling toward with the sleepy tail-end of my comment.  Logic and presentation in separate blocks / files / etc.  And then, my take is that if you're going to have your presentation/view separate from the logic/controller, you may as well code the presentation in a form as close to the goal as possible (ie. in XML or HTML, not in s-expressions or the logic implementation idiom)—especially since oftimes you've got separate people or teams working primarily on each.\nI suspect, however, that a templating system like Kid goes quite a ways toward solving the problem of \"gluing strings together\".  I almost wish it had been further along / I'd been more aware of it before I'd reinvented my own wheels for my book using Python string templates and funky map classes.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084932\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://naeblis.cx/rtomayko/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=abfc88b96ae18c85ba7aac3bded2ec5e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://naeblis.cx/rtomayko/\">Ryan Tomayko</a>\n</div>\n<a href=\"#comment-221084932\" class=\"permalink\"><time datetime=\"2005-09-26T19:00:44\">2005-09-26T19:00:44</time></a>\n</div>\n<div class=\"content\"><blockquote>I suspect, however, that a templating system like Kid goes quite a ways toward solving the problem of “gluing strings together”.</blockquote>\nThat's the idea. The correctness of DOM/SAX based contruction with the ease-of-use of templating. The future of Kid is somewhat uncertain. I'm hoping to wrap up 1.0 and stabalize it for Kevin and TurboGears but what I'd personally really love to see is the general concept of \"structured templating\" reach a wider audience.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084933\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://naeblis.cx/rtomayko/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=abfc88b96ae18c85ba7aac3bded2ec5e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://naeblis.cx/rtomayko/\">Ryan Tomayko</a>\n</div>\n<a href=\"#comment-221084933\" class=\"permalink\"><time datetime=\"2005-09-26T19:02:17\">2005-09-26T19:02:17</time></a>\n</div>\n<div class=\"content\">Oops. Sorry about the rough formatting. For some reason I thought comments were in markdown. Edit away, Leslie.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084934\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084934\" class=\"permalink\"><time datetime=\"2005-09-26T19:11:20\">2005-09-26T19:11:20</time></a>\n</div>\n<div class=\"content\">Ryan:  Grr.  Funny you should mention that—I thought comments around here allowed markdown, too.  I think I need to fix that *and* display some copy explaining markdown availablility, since I think that was something about which Aristotle expressed some confusion/surprise before as well.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084935\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221084935\" class=\"permalink\"><time datetime=\"2005-09-26T20:29:12\">2005-09-26T20:29:12</time></a>\n</div>\n<div class=\"content\"><blockquote>if you&#8217;re going to have your presentation/view separate from the logic/controller, you may as well code the presentation in a form as close to the goal as possible</blockquote>\nOh, I don&#8217;t disagree at all.\nI have been annoyed at the state of XML generation at large, myself. Kid looks very nice, except I have no use for it, being that I&#8217;m still a Perlista. (Python just doesn&#8217;t feel right to me &#8211; like wearing a badly fitting tuxedo.)\nI&#8217;m wondering how much work it would be to port it or a close copy to Perl&#8230;\n<blockquote>I think that was something about which Aristotle expressed some confusion/surprise before as well.</blockquote>\nHeh, yeah. Your MT installation permitted Markdown but no literal tags, which caught me off guard once or twice until I noticed. But thankfully it had a preview button, so I could figure it out. I <strong><em>hate</em></strong> how WordPress does not ship with preview button available and enabled by default, and the default configuration doesn't even mention the expected formatting anywhere either.\nI just suspected that your WordPress was vanilla and used HTML on that hunch &#8211; and it worked. Phew. Maybe you can install the gagdget that Ryan uses on lesscode.org? I love that.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084936\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084936\" class=\"permalink\"><time datetime=\"2005-09-26T21:38:08\">2005-09-26T21:38:08</time></a>\n</div>\n<div class=\"content\"><blockquote>\n<p>I just suspected that your WordPress was vanilla and used HTML on that hunch – and it worked. Phew. Maybe you can install the gagdget that Ryan uses on lesscode.org? I love that.</p>\n</blockquote>\n<p>Your wish is my command.  At least, in this instance.  I pawed through Ryan's HTML source and got sufficient clues to install this thing and shamelessly steal a snippet or two.  Let's see if this preview works and if it accurately reflects what this will look like when I post...</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084937\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.emacswiki.org/alex/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=73d2617de46d85c306dbdf533b72fded&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.emacswiki.org/alex/\">Alex Schröder</a>\n</div>\n<a href=\"#comment-221084937\" class=\"permalink\"><time datetime=\"2005-09-27T11:22:06\">2005-09-27T11:22:06</time></a>\n</div>\n<div class=\"content\"><p>I maintain Oddmuse, a wiki engine written in Perl, using CGI.pm to generate the HTML.  Often people want me to switch to templates.  At the moment, when you want to radically change the HTML for the stuff that is not the wiki content, ie. headers and footers, you need to override the Perl subs that I provide.  Somehow that strikes me as natural and easy, but many of my users seem to disagree, preferring to learn a templating system instead of learning to write Perl code.  I'm still undecided about the issue.  At the moment I'm still sticking to the \"write Perl code instead of templating\" because being able to write Perl code will make so many other task easy.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084938\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084938\" class=\"permalink\"><time datetime=\"2005-09-27T11:31:23\">2005-09-27T11:31:23</time></a>\n</div>\n<div class=\"content\"><p>Alex:  Well, from my perspective, I've worked on a lot of teams where you've essentially got two roles—software engineer (SE) and interface engineer (IE).  Depending on the company and the team, the SE might understand Perl/Python/Java/SQL while the IE might understand HTML/CSS/Javascript/Flash.  There's usually overlap, of course, but these are the roles on paper at least.</p>\n<p>When you're trying to come up with an overarching framework which accomodates collaboration between these two sorts of people and their respective skill sets, it helps to have a bridge between the logic and the presentation which can keep the Perl out of the HTML and the HTML out of the Perl.</p>\n<p>On the other hand...  A project like Oddmuse likely has an entirely different user and developer base than the projects I work on at my day job :)</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://lachy.id.au/log/2005/04/xhtml-future#comment-271\">This cry and whine that draconian handling will break your page and make your users suffer for you if you have a single error is just another legacy of HTML we’ve gotten used to: our toolchains tend to be of the “glue strings together” (aka templates) variety. ... There should never be any part of your publishing toolchain just gluing strings together. Ever.</blockquote><span style=\"float:right; font-size: 0.75em; width:75%\">Source: <a href=\"http://lachy.id.au/log/2005/04/xhtml-future#comment-271\">Aristotle Pagaltzis in a comment on \"The Future: HTML or XHTML\"</a></span><br style=\"clear:both\" /><blockquote cite=\"http://lesscode.org/2005/09/24/web-services-infrastructure-kid/\">There’s no rule that says templates must only be used to generate HTML. Indeed, many of the RSS and Atom feeds in the wild are generated from some form of template. They are never automatically-generated-behind-the-scenes using language bindings and are very rarely generated using some kind of DOM/SAX API.</blockquote><span style=\"float:right; font-size: 0.75em; width:75%\">Source: <a href=\"http://lesscode.org/2005/09/24/web-services-infrastructure-kid/\">Web Services Infrastructure: Kid Templating  </a></span><br style=\"clear:both\" />\r\n\r\nI've been meaning to write about this for some time now, though I've never had my thoughts together to any degree to mount a decent case for either side.  Problem is, I haven't gotten much closer now, but I figured I'd at least post a few thoughts and conjure up a vague sketch of the issue.\r\n\r\nYou see, I think it all goes back to [thoughts about which I posted almost three years ago][lazy].  On the one hand, producing something like XML using \"proper\" DOM invocations and handwavings seems like the \"correct\" thing to do.  Yet, on the other hand, using a templating system lets me get down to business much more quickly and with much more clarity and succinct code.  \r\n\r\nYeah, templates provide a range of flexibility sufficient to aim the barrel at your own toes, while an API like the XML DOM keeps everything on the rails--but sometimes you know where you're going and don't need the rails to get you there.  Furthermore, isn't it possible to make a template system that Does The Right Thing?\r\n\r\nAnyway, it's rather apparent that I'm solidly in favor of templates:  After all, a book of mine just hit the shelves which is just rife with template-based generation of RSS and Atom feeds.  \r\n\r\nMy only issue, really, is that I feel vaguely guilty about it.\r\n\r\n[lazy]: http://decafbad.com/blog/2002/12/13/oooced\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221084924\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=821395fe70906c8290df7f18ac4ac6cf&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">rick</a>\n                </div>\n                <a href=\"#comment-221084924\" class=\"permalink\"><time datetime=\"2005-09-26T02:27:37\">2005-09-26T02:27:37</time></a>\n            </div>\n            <div class=\"content\">Ruby has the nice Builder module for this (http://builder.rubyforge.org/).  Ruby on Rails uses it for it's rxml templates.  So, you still get the speed of templates, but you don't have to worry about those pesky xml rules.\n\nHere's a sample Atom 1.0 template used by Typo, a rails weblogging system: http://typo.leetsoft.com/trac/file/trunk/app/views/xml/atom10_feed.rxml</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084925\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n                </div>\n                <a href=\"#comment-221084925\" class=\"permalink\"><time datetime=\"2005-09-26T03:52:50\">2005-09-26T03:52:50</time></a>\n            </div>\n            <div class=\"content\">Using the DOM to build documents is awfully awkward. Don&#8217;t do that.\n\nCheck <a href=\"http://hsivonen.iki.fi/\" rel=\"nofollow\">Henri Sivonen</a>&#8217;s suggestions just published in his <a href=\"http://hsivonen.iki.fi/producing-xml/\" rel=\"nofollow\">HOWTO Avoid Being Called a Bozo When Producing XML</a>. Instead of building a DOM, generate SAX events, using the program structure to ensure proper nesting &#8211; or instead of generating the SAX events all manually, generate them by parsing a static XML document and using certain interesting points in the stream (such as Processing Instructions) as hooks for inserting payload.\n\nThe emission of synthesised SAX events can be generalised by writing a datastructure-to-SAX serialiser, so that you can build your data within your language&#8217;s native datastructures prior to outputting it, for maximum comfort. (Of course you serialise piecemeal too, f.ex. by outputting the head of a feed manually, then for each item, building the data structure and immediately serialising it, then emitting the final events to complete the document.)\n\nDepending on the complexity of the output, you could directly emit the otuput format or feed the events into to an XSLT transform that generates the full-blown thing from an easy to generate document structure. In both cases this can be done with or without the involvement of a serialiser as middle man.\n\nThere are plenty of ways to make sure that the entire toolchain from one end to the other consists only of steps that conserve well-formedness, and they need not be any less convenient than using templates.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084926\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084926\" class=\"permalink\"><time datetime=\"2005-09-26T04:16:35\">2005-09-26T04:16:35</time></a>\n            </div>\n            <div class=\"content\"><blockquote>or instead of generating the SAX events all manually, generate them by parsing a static XML document and using certain interesting points in the stream (such as Processing Instructions) as hooks for inserting payload.</blockquote>\nAristotle:  Now here's where I think certain templating technologies get interesting, and may Do the Right Thing.  My so-far-favorite templating kit, ZPT, wants well-formed XML as templates--although I think that restriction is unfortunately relaxed as a nod to HTML.  On the other hand, my possibly-new-favorite templating kit, Kid, [demands well-formed XML as templates](http://lesscode.org/projects/kid/wiki/KidFaq#must-templates-be-well-formed-xml).\n\nIn case you haven't played with them, these two template languages center around the idea that certain attributes on elements define where content provided in a data structure should be inserted / swapped in by the template engine.  The engine handles character encodings and such to ensure that the well-formed template results in a well-formed document.\n\nDoes this match up with what you say up there?</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084928\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084928\" class=\"permalink\"><time datetime=\"2005-09-26T04:28:49\">2005-09-26T04:28:49</time></a>\n            </div>\n            <div class=\"content\">I guess the other thing that bugs me about constructing documents via DOM or via generating SAX events—which I'd first discovered in <a href=\"http://www.xml.com/pub/a/2003/03/12/py-xml.html\" rel=\"nofollow\">this XML.com article by Uche Ogbuji</a>—is how awkward and removed it is from the view-source XML I've gotten used to hacking around with.  Of course, my distaste for programmatically generating things like this goes back to <a href=\"http://perldoc.perl.org/CGI.html#CREATING-STANDARD-HTML-ELEMENTS%3a\" rel=\"nofollow\">CGI.pm</a> in my perl-hacking days.\n\nWhen I start writing <i>code</i> to generate <i>data</i> that could be mostly done with a template, it strikes me as tangling Model/View/Controller elements and introducing weird context shifts.  (ie. h1() vs &lt;h1 /&gt;)  Not sure if that made sense...</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084929\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.sporkmonger.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=56ee28134dd0776825445e3551979b14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.sporkmonger.com\">Bob Aman</a>\n                </div>\n                <a href=\"#comment-221084929\" class=\"permalink\"><time datetime=\"2005-09-26T05:40:24\">2005-09-26T05:40:24</time></a>\n            </div>\n            <div class=\"content\">Yeah, I was gonna say, Builder for Ruby solves most of the issues with using templates and xml.  For RSS and Atom, there's also my Ruby FeedTools library, which makes it even more rediculously easy to get a valid feed up and running.\n\nI'm also very tempted to play around with Kid and see how I like it, and perhaps port it to Ruby.  From what I've seen so far, it looks like perhaps the nicest templating system yet.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084930\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n                </div>\n                <a href=\"#comment-221084930\" class=\"permalink\"><time datetime=\"2005-09-26T05:59:08\">2005-09-26T05:59:08</time></a>\n            </div>\n            <div class=\"content\">It does. I confess I actually kind of liked <a href=\"http://search.cpan.org/dist/CGI.pm/\" rel=\"nofollow\">CGI.pm</a> &#8211; because nesting is automatically taken care of without so much typing of end tags, and you can seamlessly weave <code>map</code>s into the code for output loops.\n\nI have to note though that I used it as a sort of template language in its own right &#8211; I never littered <code>print</code>s all over my code, I kept all the calls in a single place, in fact, usually a single expression. That is also why I find it strange that people create template languages for PHP, which was itself born as a template language. What matters is that the output generation is separate from the processing logic, whether or not the template and the code are in different languages.\n\nAnyway, I digress.\n\nWhat I wanted to say is, no, I hadn&#8217;t seen either ZPT or Kid. I had put off reading the lesscode.org article you quoted and went back to it after responding here. Now that I&#8217;ve read it, I admit I&#8217;m intrigued. I&#8217;ll have to look into Kid; it sounds like an interesting take.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084931\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084931\" class=\"permalink\"><time datetime=\"2005-09-26T13:39:00\">2005-09-26T13:39:00</time></a>\n            </div>\n            <div class=\"content\"><blockquote>What matters is that the output generation is separate from the processing logic, whether or not the template and the code are in different languages.</blockquote>\n\nAh hah, yeah, that's what I was fumbling toward with the sleepy tail-end of my comment.  Logic and presentation in separate blocks / files / etc.  And then, my take is that if you're going to have your presentation/view separate from the logic/controller, you may as well code the presentation in a form as close to the goal as possible (ie. in XML or HTML, not in s-expressions or the logic implementation idiom)—especially since oftimes you've got separate people or teams working primarily on each.\n\nI suspect, however, that a templating system like Kid goes quite a ways toward solving the problem of \"gluing strings together\".  I almost wish it had been further along / I'd been more aware of it before I'd reinvented my own wheels for my book using Python string templates and funky map classes.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084932\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://naeblis.cx/rtomayko/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=abfc88b96ae18c85ba7aac3bded2ec5e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://naeblis.cx/rtomayko/\">Ryan Tomayko</a>\n                </div>\n                <a href=\"#comment-221084932\" class=\"permalink\"><time datetime=\"2005-09-26T19:00:44\">2005-09-26T19:00:44</time></a>\n            </div>\n            <div class=\"content\"><blockquote>I suspect, however, that a templating system like Kid goes quite a ways toward solving the problem of “gluing strings together”.</blockquote>\n\nThat's the idea. The correctness of DOM/SAX based contruction with the ease-of-use of templating. The future of Kid is somewhat uncertain. I'm hoping to wrap up 1.0 and stabalize it for Kevin and TurboGears but what I'd personally really love to see is the general concept of \"structured templating\" reach a wider audience.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084933\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://naeblis.cx/rtomayko/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=abfc88b96ae18c85ba7aac3bded2ec5e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://naeblis.cx/rtomayko/\">Ryan Tomayko</a>\n                </div>\n                <a href=\"#comment-221084933\" class=\"permalink\"><time datetime=\"2005-09-26T19:02:17\">2005-09-26T19:02:17</time></a>\n            </div>\n            <div class=\"content\">Oops. Sorry about the rough formatting. For some reason I thought comments were in markdown. Edit away, Leslie.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084934\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084934\" class=\"permalink\"><time datetime=\"2005-09-26T19:11:20\">2005-09-26T19:11:20</time></a>\n            </div>\n            <div class=\"content\">Ryan:  Grr.  Funny you should mention that—I thought comments around here allowed markdown, too.  I think I need to fix that *and* display some copy explaining markdown availablility, since I think that was something about which Aristotle expressed some confusion/surprise before as well.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084935\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n                </div>\n                <a href=\"#comment-221084935\" class=\"permalink\"><time datetime=\"2005-09-26T20:29:12\">2005-09-26T20:29:12</time></a>\n            </div>\n            <div class=\"content\"><blockquote>if you&#8217;re going to have your presentation/view separate from the logic/controller, you may as well code the presentation in a form as close to the goal as possible</blockquote>\n\nOh, I don&#8217;t disagree at all.\n\nI have been annoyed at the state of XML generation at large, myself. Kid looks very nice, except I have no use for it, being that I&#8217;m still a Perlista. (Python just doesn&#8217;t feel right to me &#8211; like wearing a badly fitting tuxedo.)\n\nI&#8217;m wondering how much work it would be to port it or a close copy to Perl&#8230;\n\n<blockquote>I think that was something about which Aristotle expressed some confusion/surprise before as well.</blockquote>\n\nHeh, yeah. Your MT installation permitted Markdown but no literal tags, which caught me off guard once or twice until I noticed. But thankfully it had a preview button, so I could figure it out. I <strong><em>hate</em></strong> how WordPress does not ship with preview button available and enabled by default, and the default configuration doesn't even mention the expected formatting anywhere either.\n\nI just suspected that your WordPress was vanilla and used HTML on that hunch &#8211; and it worked. Phew. Maybe you can install the gagdget that Ryan uses on lesscode.org? I love that.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084936\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084936\" class=\"permalink\"><time datetime=\"2005-09-26T21:38:08\">2005-09-26T21:38:08</time></a>\n            </div>\n            <div class=\"content\"><blockquote>\n  <p>I just suspected that your WordPress was vanilla and used HTML on that hunch – and it worked. Phew. Maybe you can install the gagdget that Ryan uses on lesscode.org? I love that.</p>\n</blockquote>\n\n<p>Your wish is my command.  At least, in this instance.  I pawed through Ryan's HTML source and got sufficient clues to install this thing and shamelessly steal a snippet or two.  Let's see if this preview works and if it accurately reflects what this will look like when I post...</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084937\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.emacswiki.org/alex/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=73d2617de46d85c306dbdf533b72fded&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.emacswiki.org/alex/\">Alex Schröder</a>\n                </div>\n                <a href=\"#comment-221084937\" class=\"permalink\"><time datetime=\"2005-09-27T11:22:06\">2005-09-27T11:22:06</time></a>\n            </div>\n            <div class=\"content\"><p>I maintain Oddmuse, a wiki engine written in Perl, using CGI.pm to generate the HTML.  Often people want me to switch to templates.  At the moment, when you want to radically change the HTML for the stuff that is not the wiki content, ie. headers and footers, you need to override the Perl subs that I provide.  Somehow that strikes me as natural and easy, but many of my users seem to disagree, preferring to learn a templating system instead of learning to write Perl code.  I'm still undecided about the issue.  At the moment I'm still sticking to the \"write Perl code instead of templating\" because being able to write Perl code will make so many other task easy.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084938\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084938\" class=\"permalink\"><time datetime=\"2005-09-27T11:31:23\">2005-09-27T11:31:23</time></a>\n            </div>\n            <div class=\"content\"><p>Alex:  Well, from my perspective, I've worked on a lot of teams where you've essentially got two roles—software engineer (SE) and interface engineer (IE).  Depending on the company and the team, the SE might understand Perl/Python/Java/SQL while the IE might understand HTML/CSS/Javascript/Flash.  There's usually overlap, of course, but these are the roles on paper at least.</p>\n\n<p>When you're trying to come up with an overarching framework which accomodates collaboration between these two sorts of people and their respective skill sets, it helps to have a bridge between the logic and the presentation which can keep the Perl out of the HTML and the HTML out of the Perl.</p>\n\n<p>On the other hand...  A project like Oddmuse likely has an entirely different user and developer base than the projects I work on at my day job :)</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/09/25/templates-good-or-evil"
  }
]