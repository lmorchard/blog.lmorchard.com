<?xml version="1.0" encoding="UTF-8"?>
  <rss version="2.0">
    <channel>
      <title>Tag: hacks - blog.lmorchard.com</title>
      <description>It&#39;s all spinning wheels &amp; self-doubt until the first pot of coffee.</description>
      <link>https://lmorchard.github.io/blog.lmorchard.com</link>
      <item>
          <title>Upgrading my Couch PC monitor, v1.2</title>
          <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: My DIY couch PC monitor has been upgraded for a third time.&lt;/p&gt;
</description>
          
          <pubDate>Mon, 09 Jan 2017 12:00:00 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2017/01/09/diy-monitor-v12/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2017/01/09/diy-monitor-v12/</guid>
        </item><item>
          <title>Building my couch computing station</title>
          <description>

&lt;p&gt;Remember when I posted about &lt;a href=&quot;http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch&quot;&gt;gaming from the Orchard House couch&lt;/a&gt;? The key part was figuring out how to get &lt;a href=&quot;http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch#Laptop_decapitation&quot;&gt;a laptop-quality LCD monitor working in the living room&lt;/a&gt;, preferably attached to my trusty IKEA DAVE. Well, despite my best attempts at ruining my materials and tools, I managed to get it built!&lt;/p&gt;
</description>
          
          <pubDate>Sun, 10 Feb 2013 12:00:00 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/</guid>
        </item><item>
          <title>Gaming from the Orchard House couch</title>
          <description>

&lt;p&gt;I like playing video games; it’s one of my favorite things in life. I also like hanging out with my wife; she’s my favorite person in the world. This is a post about ensuring these two things can happen together. This is also a post where I played with SketchUp for the first time.&lt;/p&gt;
</description>
          
          <pubDate>Mon, 21 Jan 2013 12:00:00 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/</guid>
        </item><item>
          <title>Social Media Cyborg</title>
          
          
          <pubDate>Fri, 04 Nov 2011 21:12:34 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2011/11/04/social-media-cyborg/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2011/11/04/social-media-cyborg/</guid>
        </item><item>
          <title>Ficlets enhanced author feed, an XSL scraper hack</title>
          
          
          <pubDate>Thu, 05 Apr 2007 05:37:00 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2007/04/05/ficlets-enhanced-author-feed-an-xsl-scraper-hack/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2007/04/05/ficlets-enhanced-author-feed-an-xsl-scraper-hack/</guid>
        </item><item>
          <title>i&#39;m in the nintendo ds homebrew club now</title>
          
          
          <pubDate>Tue, 19 Sep 2006 16:16:12 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2006/09/19/im-in-the-nintendo-ds-homebrew-club-now/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2006/09/19/im-in-the-nintendo-ds-homebrew-club-now/</guid>
        </item><item>
          <title>Ajaxitagging</title>
          
          
          <pubDate>Wed, 16 Aug 2006 13:12:07 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2006/08/16/ajaxitagging/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2006/08/16/ajaxitagging/</guid>
        </item><item>
          <title>Stupid fun with fax machines</title>
          
          
          <pubDate>Thu, 15 Dec 2005 21:55:58 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2005/12/15/stupid-fun-with-fax-machines/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2005/12/15/stupid-fun-with-fax-machines/</guid>
        </item><item>
          <title>Yahoo for stalking iPods in the hands of couriers</title>
          
          
          <pubDate>Thu, 03 Nov 2005 18:29:12 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2005/11/03/yahoo-for-stalking-ipods-in-the-hands-of-couriers/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2005/11/03/yahoo-for-stalking-ipods-in-the-hands-of-couriers/</guid>
        </item><item>
          <title>Could an iPod and AV cable fit in a DVD case?</title>
          
          
          <pubDate>Fri, 21 Oct 2005 18:05:54 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2005/10/21/could-an-ipod-and-av-cable-fit-in-a-dvd-case/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2005/10/21/could-an-ipod-and-av-cable-fit-in-a-dvd-case/</guid>
        </item><item>
          <title>RedHanded Â» Announcing the MouseHole Proxy</title>
          
          
          <pubDate>Wed, 05 Oct 2005 11:14:25 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2005/10/05/redhanded-%c2%bb-announcing-the-mousehole-proxy/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2005/10/05/redhanded-%c2%bb-announcing-the-mousehole-proxy/</guid>
        </item><item>
          <title>Building an Address Book as a Modern Web App</title>
          <description>&lt;img src=&quot;http://www.decafbad.com/2004/12/abook-architecture.jpg&quot; align=&quot;right&quot;&gt;

&lt;p&gt;So, in the spirit of &lt;a href=&quot;http://www.decafbad.com/blog/2004/11/30/picoprojects_and_trepanation&quot;&gt;pico-projects&lt;/a&gt;, I&#39;ve started building &lt;a href=&quot;http://www.decafbad.com/blog/2004/11/30/nextgenwebapps&quot;&gt;that address book application&lt;/a&gt; I mentioned awhile ago and I want to start writing about it as I go.&lt;/p&gt;
&lt;p&gt;First off, hopefully you&#39;ll notice the quick diagram I threw together in OmniGraffle.  This is a sort of rough sketch of the loosely-joined architecture I want to explore with this thing.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Data&lt;/em&gt;: This is where address book entries live.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Model&lt;/em&gt;: A set of objects encapsulating the data, this is how address book entries will be accessed.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;REST API&lt;/em&gt;: Model objects exposed as resources identified by URI, serialized and deserialized as XML, and manipulated by GET / PUT / POST / DELETE methods.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;XSLT Filter&lt;/em&gt;: XML data produced by REST API calls can be first passed through XSL at a given URL before being served up as a response.  &lt;/li&gt;
&lt;li&gt;&lt;em&gt;HTML, CSS, JavaScript&lt;/em&gt;: Thanks to the XSLT filter layer, the XML vocabulary used to describe address book entries can be transformed into user interface presentation.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;HTTP&lt;/em&gt;: Everything happens via HTTP...&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Web Browser Client&lt;/em&gt;: ...and everything is viewed in a web browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, I call this a loosely-joined architecture because I want to stress that you should be able to swap out just about any part of this whenever you want.  &lt;/p&gt;
&lt;p&gt;Want the &lt;em&gt;Data&lt;/em&gt; to be in MySQL?  Fine.  Want it to be in flat files?  Fine.  Just make sure the &lt;em&gt;Model&lt;/em&gt; can cope while maintaining a consistent interface for the &lt;em&gt;REST API&lt;/em&gt;.  Want to change the user interface in the browser?  Great-- ideally, all you have to do is change some XSLT files.  I&#39;m writing everything from the &lt;em&gt;XSLT Filter&lt;/em&gt; down to the &lt;em&gt;Model&lt;/em&gt; in Python.  Don&#39;t like that?  Fine.  Rewrite it all in Perl, and hopefully everything from the XSLT up to the browser will still be useful to you.&lt;/p&gt;
&lt;p&gt;At some point, you might even want to ditch the browser for a native desktop client.  Fabulous! Just ignore everything past the &lt;em&gt;REST API&lt;/em&gt; and &lt;em&gt;HTTP&lt;/em&gt;, don&#39;t use any XSLT in the &lt;em&gt;Filter&lt;/em&gt;, and use the API and XML directly.&lt;/p&gt;
&lt;p&gt;I don&#39;t think any of this is particularly revolutionary-- although I thought it was when I first saw Amazon Web Services doing some of this, and I hope to throw a little GMail in as well.  I hope that this will all be useful as I muddle through explaining what I&#39;m doing.  In the meantime, you can see me getting the stage set as I start checking things into my Subversion repository over here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.decafbad.com/svn/trunk/hacks/abook/&quot;&gt;http://www.decafbad.com/svn/trunk/hacks/abook/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</description>
          
          <pubDate>Thu, 23 Dec 2004 05:58:41 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2004/12/23/abook1/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2004/12/23/abook1/</guid>
        </item><item>
          <title>XPath based Python dictionaries, on loan</title>
          
          
          <pubDate>Wed, 01 Sep 2004 10:47:41 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2004/09/01/xpath-based-python-dictionaries-on-loan/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2004/09/01/xpath-based-python-dictionaries-on-loan/</guid>
        </item><item>
          <title>Making progress on dbagg3</title>
          <description>&lt;p&gt;Work has been insanely busy lately, but I have made some more progress with &lt;a href=&quot;http://www.decafbad.com/cvs/dbagg3/&quot;&gt;&lt;code&gt;dbagg3&lt;/code&gt;&lt;/a&gt;.  The code is all in CVS, so feel free to take a gander-- I don&#39;t have a ton of time for a proper write up, but I do want to spew a little bit. &lt;/p&gt;
&lt;p&gt;As per my &lt;a href=&quot;http://www.decafbad.com/blog/2004/08/23/slicing_and_dicing_to_make_atom_soup_in_dbagg3&quot;&gt;previous musings on XML in a SQL database&lt;/a&gt;, I revamped the database.  Now things are sliced up by feed and entry tables, rows in each containing a few metadata columns and then one big column for an XML dump.  This lets me index on  date and parent feed and such, meanwhile punting on the issue of dicing things like authors or content up further.  And, as extension elements start to show up, this handling is dumb enough to simply store things it doesn&#39;t know about without mangling them.  This is a very good thing and one of my big goals for this beast.&lt;/p&gt;
&lt;p&gt;The other thing that I&#39;m getting excited about is the REST API built atop the Atom store.  Rather than spend time on proper documentation, here&#39;s a quick dump from the &lt;a href=&quot;http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/rest.py&quot;&gt;appropriate module&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;URL: GET /feeds/
URL: GET /feeds/{id}.xml
URL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml
URL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hh}.xml
URL: GET /feeds/{id}/{yyyy}/{mm}/{dd}.xml
URL: GET /feeds/{id}/{yyyy}/{mm}.xml
URL: GET /feeds/{id}/now-{nowoff}.xml
URL: GET /feeds/{fid}/entries/{eid}.xml
URL: GET /users/
URL: GET /users/{uname}.xml
URL: POST /users/
URL: DELETE /users/{uname}.xml
URL: PUT /users/{uname}.xml
URL: GET /users/{uname}/prefs.xml
URL: GET /users/{uname}/prefs/
URL: POST /users/{uname}/prefs/{pname}.{type}
URL: PUT /users/{uname}/prefs/{pname}.{type}
URL: GET /users/{uname}/prefs/{pname}.{type}
URL: DELETE /users/{uname}/prefs/{pname}.{type}
URL: GET /users/{uname}/subscriptions.{type}
URL: GET /users/{uname}/subscriptions/
URL: POST /users/{uname}/subscriptions/
URL: DELETE /users/{uname}/subscriptions/{id}.xml
URL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml
URL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hh}.xml
URL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}.xml
URL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}.xml
URL: GET /users/{uname}/subscriptions/{sid}/now-{hours}.xml
URL: GET /users/{uname}/subscriptions/{sid}/now.xml
URL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml
URL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hh}.xml
URL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}.xml
URL: GET /users/{uname}/subscriptions/{yyyy}/{mm}.xml
URL: GET /users/{uname}/subscriptions/now-{hours}.xml
URL: GET /users/{uname}/subscriptions/now.xml
URL: GET /users/{uname}/subscriptions/{sid}/entries/{eid}.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hopefully, the structure of these URL patterns make a little bit of sense.  The too-clever thing about these is that they&#39;re both documentation in the module&#39;s docstrings, and parsed out to register methods with automagically-generated regexes applied to incoming URL requests.  (I may eventually realize just how stupid an idea this is, but not yet.)  &lt;/p&gt;
&lt;p&gt;This list is nowhere near complete or final or even all that well thought out yet.  But, it seems to be working out pretty well so far, and it&#39;s so easy to tinker with the API to sketch out ideas in working code.  Eating my own dogfood, my first browser window of the day tends to open on this URL:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://localhost/~deusx/dbagg3.5/api/users/default/subscriptions/
now-12.xml?xsl=xsl/full.xsl&amp;amp;#38;content-type=text/html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This grabs the last 12 hours&#39; worth of items from &lt;code&gt;default&lt;/code&gt;&#39;s subscriptions, passing them through the XSL at &lt;code&gt;xsl/full.xsl&lt;/code&gt; on the way to my browser with a content type of &lt;code&gt;text/html&lt;/code&gt;.  This tends to produce about 1000-1500 entries in about 15 seconds on my PowerBook, which is better than I&#39;d expected.  &lt;/p&gt;
&lt;p&gt;Pretty soon, I&#39;ll be implementing the ability to post metadata onto feed entries under subscriptions.  Then, I can mark items as seen, attach categories, tags, and notes.  From there, I can exclude seen items from queries, produce new aggregate feeds based on my tagging or notes, among a few other ideas I&#39;ve got stewing.&lt;/p&gt;
&lt;p&gt;A little more work, and I think I&#39;ll be able to throw together the beginnings of a &lt;a href=&quot;http://www.bloglines.com&quot;&gt;Bloglines&lt;/a&gt;-style three-pane browser interface, as well as improving the functionality of my own outliner-style display with &lt;a href=&quot;http://developer.apple.com/internet/webcontent/xmlhttpreq.html&quot;&gt;XmlHTTPRequest&lt;/a&gt;-based calls to the API to enable refresh-free interaction.  From there, I have some ideas for desktop apps and maybe even some &lt;a href=&quot;http://www.decafbad.com/blog/2003/06/19/flash_agg&quot;&gt;tinkering in Flash&lt;/a&gt;.  (Wow... has it really been over a year since I was writing about Flash &amp;amp; REST?)&lt;/p&gt;
&lt;p&gt;And &lt;em&gt;then&lt;/em&gt;, I want to implement the Atom API and allow users to create feeds to which they can post their own items and share read-only with others (or share writing with a group).  From there, this thing can turn into a read/write Atom storage tank, serving both as an aggregator and a blog publishing engine, given the appropriate XSL work.&lt;/p&gt;
&lt;p&gt;Lots of ideas stewing.  Now I just have to get the time and possibly a new web server, since I&#39;d like to eventually open up an installation of this to fellow tinkerers, but this poor little box can barely take what it&#39;s tasked with at present...&lt;/p&gt;
&lt;p&gt;Oh yeah, and one other thing:  I&#39;ve been thinking about names better than &lt;code&gt;dbagg3&lt;/code&gt;.  The one that&#39;s sticking around in my head so far is &lt;strong&gt;feedReactor&lt;/strong&gt;.  What do you think?&lt;/p&gt;
</description>
          
          <pubDate>Tue, 31 Aug 2004 01:37:42 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2004/08/31/dbagg3-makingprogress/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2004/08/31/dbagg3-makingprogress/</guid>
        </item><item>
          <title>mysql and XML output</title>
          
          
          <pubDate>Mon, 23 Aug 2004 05:09:51 GMT</pubDate>
          <link>https://lmorchard.github.io/blog.lmorchard.com/2004/08/23/mysql-and-xml-output/</link>
          <guid isPermaLink="true">https://lmorchard.github.io/blog.lmorchard.com/2004/08/23/mysql-and-xml-output/</guid>
        </item>
    </channel>
  </rss>