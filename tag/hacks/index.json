[
  {
    "title": "Upgrading my Couch PC monitor, v1.2",
    "tags": [
      "diy",
      "hacks",
      "lcd",
      "pc",
      "tech",
      "gaming"
    ],
    "thumbnail": "/uploads/2017/diy-monitor-v12/monitor-thumb.jpg",
    "year": "2017",
    "month": "01",
    "day": "09",
    "isDir": false,
    "slug": "diy-monitor-v12",
    "date": "2017-01-09T12:00:00.000Z",
    "postName": "2017-01-09-diy-monitor-v12",
    "html": "<p><strong>TL;DR</strong>: My DIY couch PC monitor has been upgraded for a third time.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<h2 id=\"the-story-so-far\">The story so far...</h2>\n<p>Almost 3 years ago, <a href=\"http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch\">I decided to build a gaming PC that I could use from the couch</a> while a) hanging out with my wife and b) not monopolizing the living room TV.</p>\n<p>The PC was simple: <a href=\"http://amzn.to/2iy5G2b\">it&#39;s just a cube</a> behind the couch. Mouse &amp; keyboard &amp; headphones are also easy—USB cables come in long lengths and Bluetooth is a thing.</p>\n<p>No, the hard part was the monitor. I had been gaming on a 2012 15&quot; MacBook Pro—which was physically convenient but lacking in performance. A gaming PC solves the latter, but no one seems to sell 15&quot; standalone monitors equivalent to my laptop screen. That was when I discovered <a href=\"http://www.instructables.com/id/Laptop-to-Desktop-Conversion/\">an Instructable article</a> about how to turn an old laptop into a desktop panel. <a href=\"https://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/#Laptop_decapitation\">That gave me ideas</a>.</p>\n<h2 id=\"version-10---artisanal-acrylic\">Version 1.0 - Artisanal Acrylic</h2>\n<p>Turns out, there are <a href=\"http://www.ebay.com/usr/chinatobby2011\">vendors on eBay</a> who offer complete kits for hooking a laptop display panel up to a PC. They just don&#39;t come with any kind of enclosure like your typical computer monitor. So, <a href=\"http://blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/\">I ordered one of those kits and tried handcrafting a case</a>. It turned out crude yet functional:</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/8439217201/in/photolist-5m6a-dRKcfR-58SNWo-e3Nbyu-7FS8wi-7FS8pc-e3NbtC-e3Nb3W-4P3uQw-3RZHaZ-RQPr4-RNZRY-RQPwv-7aTRk8-7aTRTz-7aXEAw-dSvv2a-dSvurt-jC3LLU-dSmDqf-5m5D-5EBhpP-7HvphU-cVUcz-cVXdK-5EFzQf-cVV14\" title=\"First fully assembled power-on of my DIY monitor\"><img src=\"/uploads/2017/diy-monitor-v12/8439217201_6eea54c3e5_z.jpg\" width=\"800\" height=\"600\" alt=\"First fully assembled power-on of my DIY monitor\"></a></p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/8447859933/in/photolist-5m6a-dRKcfR-58SNWo-e3Nbyu-7FS8wi-7FS8pc-e3NbtC-e3Nb3W-4P3uQw-3RZHaZ-RQPr4-RNZRY-RQPwv-7aTRk8-7aTRTz-7aXEAw-dSvv2a-dSvurt-jC3LLU-dSmDqf-5m5D-5EBhpP-7HvphU-cVUcz-cVXdK-5EFzQf-cVV14\" title=\"Rear view #2 of DIY monitor and IKEA DAVE\"><img src=\"/uploads/2017/diy-monitor-v12/8447859933_c1bf2c05aa_z.jpg\" width=\"800\" height=\"600\" alt=\"Rear view #2 of DIY monitor and IKEA DAVE\"></a></p>\n<h2 id=\"version-11---custom-picture-frame\">Version 1.1 - Custom Picture Frame</h2>\n<p>I used that first version for a year in my living room. It was ugly &amp; heavy &amp; awkward. Happily, I fell upon <a href=\"http://www.instructables.com/id/How-to-Make-a-Raspberry-Pi-Media-Panel-fka-Digita/?ALLSTEPS\">this Instructables article</a> that pointed me to <a href=\"http://www.americanframe.com/\">American Frame</a>. They&#39;ll produce a rectangular picture frame in just about any custom size you&#39;d like—height, width, <em>and</em> depth.</p>\n<p>So, I ordered a nice matte black metal frame close to the size of my display panel. I ended up with this:</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/12222356524/in/photolist-dRKcfR-7aTRk8-dSvv2a-dSvurt-jC3LLU-5m6a-58SNWo-e3Nbyu-7FS8wi-7FS8pc-e3NbtC-e3Nb3W-4P3uQw-3RZHaZ-RQPr4-RNZRY-RQPwv-7aTRTz-7aXEAw-dSmDqf-5m5D-5EBhpP-7HvphU-cVUcz-cVXdK-5EFzQf-cVV14\" title=\"Updated Couch PC monitor\"><img src=\"/uploads/2017/diy-monitor-v12/12222356524_fcbd4cf0b4_z.jpg\" width=\"600\" height=\"800\" alt=\"Updated Couch PC monitor\"></a></p>\n<p>Sleeker and lighter. The back of the picture frame was just <a href=\"https://en.wikipedia.org/wiki/Foamcore\">foamcore</a> and I used double-sided tape on the monitor arm and all the electronics. Luckily, the panel and all were light enough for these hacks. But, it kind of fell apart across two house moves.</p>\n<h2 id=\"version-12---mic-stands--laser-cutters-ftw\">Version 1.2 - Mic Stands &amp; Laser Cutters FTW</h2>\n<p>I decided I wanted to minimize things. The Ikea Dave laptop stand seemed a bit much, especially when I needed to move it around—or hide it when company came over.</p>\n<p>Last year, I (finally) got a membership at <a href=\"https://www.i3detroit.org/\">i3Detroit</a>. I skilled up on laser cutters and <a href=\"https://blog.lmorchard.com/2016/08/29/gamechord/\">made a DIY keypad that I showed off at the Detroit Maker Faire</a>. Things that, you know, <a href=\"https://groups.google.com/d/topic/i3detroit-public/Qv1P91ySqWo/discussion\">I should have done years ago at the start of this whole DIY monitor project</a>—rather than cutting things by hand and with a Dremel.</p>\n<p>Anyway, I discovered that there&#39;s a such thing as <a href=\"http://amzn.to/2jccG5D\">a VESA mount</a> for <a href=\"http://amzn.to/2jcc93M\">microphone stands</a>. I bought those and threw in an <a href=\"http://amzn.to/2j1YpeM\">adapter</a> &amp; a <a href=\"http://amzn.to/2j1VYZq\">gooseneck</a>—all of which let me strip my rig down like so:</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/32182700386/in/datetaken/\" title=\"20170109_221645\"><img src=\"/uploads/2017/diy-monitor-v12/32182700386_4320d2a1d0_z.jpg\" width=\"450\" height=\"800\" alt=\"20170109_221645\"></a></p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/31845156280/in/datetaken/\" title=\"20170109_221722\"><img src=\"/uploads/2017/diy-monitor-v12/31845156280_d16551c8df_z.jpg\" width=\"450\" height=\"800\" alt=\"20170109_221722\"></a></p>\n<p>By this point, the double-sided tape and the foamcore just weren&#39;t up to the task. I decided that I needed to use my laser cutter skills and spare stock of acrylic sheets to build a new mounting solution.</p>\n<p>I came up with this in <a href=\"https://inkscape.org/en/\">Inkscape</a>:</p>\n<p><a href=\"/uploads/2017/diy-monitor-v12/monitor-back-2.svg\"><img class=\"fullwidth\" src=\"/uploads/2017/diy-monitor-v12/path3848.png\"></a></p>\n<p>This is a flattened image (linked to <a href=\"/uploads/2017/diy-monitor-v12/monitor-back-2.svg\">the original SVG</a>) of what turned out to be two 2.5mm and two 1.5mm sheets behind the laptop display panel. This layout has places to bolt in all of the electronic components of the monitor—driver board, button panel, and power supply. It&#39;s also got a proper 75/100 VESA mount that accepts <a href=\"http://amzn.to/2iYwbAU\">10mm thumbscrew bolts</a> through the mic stand plate.</p>\n<p>The main thing that worked out better than I expected is this: <img src=\"/uploads/2017/diy-monitor-v12/nuts.png\" style=\"width: 1.5em\"></p>\n<p>The two 1.5mm layers have rectangular cut-outs. Each of those trap a 3mm thick hexogonal M4 nut and act as wrenches. The 2.5mm layers have holes for bolts. With a little Dremel work, I have a set of M4 bolts that are trimmed so as to prevent grinding into the display panel behind the acrylic layers.</p>\n<p>After a trip to <a href=\"https://www.i3detroit.org/\">i3Detroit</a> yesterday, I ended up with this:</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/32080951661/in/datetaken/\" title=\"20170108_214638\"><img src=\"/uploads/2017/diy-monitor-v12/32080951661_c92bb3f74c_z.jpg\" width=\"800\" height=\"450\" alt=\"20170108_214638\"></a></p>\n<p>I improvised attaching the power supply with bolted-down velcro straps. And, alas, the &quot;roof&quot; I made for the driver board didn&#39;t quite work—I need longer bolts &amp; spacers. But, the 75/100 VESA mounting holes worked great!</p>\n<p>The whole thing is now decidedly heavier than with the old foamcore—but it&#39;s still lighter than v1.0 and any other comparable monitor I&#39;ve seen. It&#39;s also much sturdier: I can turn &amp; adjust it however I like with the gooseneck without the constant threat of duct tape tearing and falling apart. And, of course, the mic stand raises &amp; lowers easily.</p>\n<p>But, when I <em>do</em> want to take it apart, it&#39;s totally doable without worry. Cables unplug, thumbscrews unscrew, the mic stand breaks down—and the whole thing can hide under the couch in pieces.</p>\n<h2 id=\"next-steps\">Next steps?</h2>\n<p>Enclosure upgrades notwithstanding, this is a 3-year-old 17&quot; 1080p monitor. I&#39;m starting to feel the itch for a 4k panel since <a href=\"https://www.instagram.com/p/BOlqtGyh7Ln\">I upgraded my video card</a>. But, there&#39;s apparently still no one who sells such a thing as a readymade product.</p>\n<p>Meanwhile, on eBay, there are vendors offering <a href=\"http://www.ebay.com/itm/HDMI-DVI-DP-Board-17-3-3840x2160-UHD-4K-Wideview-100-NTSC-LCD-B173ZAN01-0-/192056466946?hash=item2cb7751e02\">4k versions of the kit</a> that started me off on this whole adventure. I&#39;m tempted to order one of those and use what I&#39;ve learned so far to build the next revision of my monitor in a picture frame with a laser-cut VESA mount back panel.</p>\n<p>Maybe I&#39;ll retire this 1080p monitor for use with my CHIP <a href=\"https://getchip.com/pages/chip\">Pico-8 console kit</a> for a snazzy all-in-one barcade project. In any case, I&#39;m just happy my lovely wife continues to tolerate this experiment of mine in living room couch gaming.</p>\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t textwidth=78: -->\n",
    "body": "**TL;DR**: My DIY couch PC monitor has been upgraded for a third time.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n## The story so far...\n\nAlmost 3 years ago, [I decided to build a gaming PC that I could use from the couch][couchgaming] while a) hanging out with my wife and b) not monopolizing the living room TV.\n\nThe PC was simple: [it's just a cube][fractalnode] behind the couch. Mouse & keyboard & headphones are also easy—USB cables come in long lengths and Bluetooth is a thing.\n\nNo, the hard part was the monitor. I had been gaming on a 2012 15\" MacBook Pro—which was physically convenient but lacking in performance. A gaming PC solves the latter, but no one seems to sell 15\" standalone monitors equivalent to my laptop screen. That was when I discovered [an Instructable article][instructablepanel] about how to turn an old laptop into a desktop panel. [That gave me ideas][laptopdecapitation].\n\n## Version 1.0 - Artisanal Acrylic\n\nTurns out, there are [vendors on eBay][monitorvendors] who offer complete kits for hooking a laptop display panel up to a PC. They just don't come with any kind of enclosure like your typical computer monitor. So, [I ordered one of those kits and tried handcrafting a case][buildingv1]. It turned out crude yet functional:\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/8439217201/in/photolist-5m6a-dRKcfR-58SNWo-e3Nbyu-7FS8wi-7FS8pc-e3NbtC-e3Nb3W-4P3uQw-3RZHaZ-RQPr4-RNZRY-RQPwv-7aTRk8-7aTRTz-7aXEAw-dSvv2a-dSvurt-jC3LLU-dSmDqf-5m5D-5EBhpP-7HvphU-cVUcz-cVXdK-5EFzQf-cVV14\" title=\"First fully assembled power-on of my DIY monitor\"><img src=\"/uploads/2017/diy-monitor-v12/8439217201_6eea54c3e5_z.jpg\" width=\"800\" height=\"600\" alt=\"First fully assembled power-on of my DIY monitor\"></a>\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/8447859933/in/photolist-5m6a-dRKcfR-58SNWo-e3Nbyu-7FS8wi-7FS8pc-e3NbtC-e3Nb3W-4P3uQw-3RZHaZ-RQPr4-RNZRY-RQPwv-7aTRk8-7aTRTz-7aXEAw-dSvv2a-dSvurt-jC3LLU-dSmDqf-5m5D-5EBhpP-7HvphU-cVUcz-cVXdK-5EFzQf-cVV14\" title=\"Rear view #2 of DIY monitor and IKEA DAVE\"><img src=\"/uploads/2017/diy-monitor-v12/8447859933_c1bf2c05aa_z.jpg\" width=\"800\" height=\"600\" alt=\"Rear view #2 of DIY monitor and IKEA DAVE\"></a>\n\n## Version 1.1 - Custom Picture Frame\n\nI used that first version for a year in my living room. It was ugly & heavy & awkward. Happily, I fell upon [this Instructables article][instructableframe] that pointed me to [American Frame][]. They'll produce a rectangular picture frame in just about any custom size you'd like—height, width, *and* depth.\n\nSo, I ordered a nice matte black metal frame close to the size of my display panel. I ended up with this:\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/12222356524/in/photolist-dRKcfR-7aTRk8-dSvv2a-dSvurt-jC3LLU-5m6a-58SNWo-e3Nbyu-7FS8wi-7FS8pc-e3NbtC-e3Nb3W-4P3uQw-3RZHaZ-RQPr4-RNZRY-RQPwv-7aTRTz-7aXEAw-dSmDqf-5m5D-5EBhpP-7HvphU-cVUcz-cVXdK-5EFzQf-cVV14\" title=\"Updated Couch PC monitor\"><img src=\"/uploads/2017/diy-monitor-v12/12222356524_fcbd4cf0b4_z.jpg\" width=\"600\" height=\"800\" alt=\"Updated Couch PC monitor\"></a>\n\nSleeker and lighter. The back of the picture frame was just [foamcore][] and I used double-sided tape on the monitor arm and all the electronics. Luckily, the panel and all were light enough for these hacks. But, it kind of fell apart across two house moves.\n\n## Version 1.2 - Mic Stands & Laser Cutters FTW\n\nI decided I wanted to minimize things. The Ikea Dave laptop stand seemed a bit much, especially when I needed to move it around—or hide it when company came over.\n\nLast year, I (finally) got a membership at [i3Detroit][]. I skilled up on laser cutters and [made a DIY keypad that I showed off at the Detroit Maker Faire][gamechord]. Things that, you know, [I should have done years ago at the start of this whole DIY monitor project][i3early]—rather than cutting things by hand and with a Dremel.\n\nAnyway, I discovered that there's a such thing as [a VESA mount][micvesa] for [microphone stands][micstand]. I bought those and threw in an [adapter][micadapter] & a [gooseneck][gooseneck]—all of which let me strip my rig down like so:\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/32182700386/in/datetaken/\" title=\"20170109_221645\"><img src=\"/uploads/2017/diy-monitor-v12/32182700386_4320d2a1d0_z.jpg\" width=\"450\" height=\"800\" alt=\"20170109_221645\"></a>\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/31845156280/in/datetaken/\" title=\"20170109_221722\"><img src=\"/uploads/2017/diy-monitor-v12/31845156280_d16551c8df_z.jpg\" width=\"450\" height=\"800\" alt=\"20170109_221722\"></a>\n\nBy this point, the double-sided tape and the foamcore just weren't up to the task. I decided that I needed to use my laser cutter skills and spare stock of acrylic sheets to build a new mounting solution.\n\nI came up with this in [Inkscape][]:\n\n[<img class=\"fullwidth\" src=\"/uploads/2017/diy-monitor-v12/path3848.png\">][backdesign]\n\nThis is a flattened image (linked to [the original SVG][backdesign]) of what turned out to be two 2.5mm and two 1.5mm sheets behind the laptop display panel. This layout has places to bolt in all of the electronic components of the monitor—driver board, button panel, and power supply. It's also got a proper 75/100 VESA mount that accepts [10mm thumbscrew bolts][thumbscrews] through the mic stand plate.\n\nThe main thing that worked out better than I expected is this: <img src=\"/uploads/2017/diy-monitor-v12/nuts.png\" style=\"width: 1.5em\">\n\nThe two 1.5mm layers have rectangular cut-outs. Each of those trap a 3mm thick hexogonal M4 nut and act as wrenches. The 2.5mm layers have holes for bolts. With a little Dremel work, I have a set of M4 bolts that are trimmed so as to prevent grinding into the display panel behind the acrylic layers.\n\nAfter a trip to [i3Detroit][] yesterday, I ended up with this:\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/32080951661/in/datetaken/\" title=\"20170108_214638\"><img src=\"/uploads/2017/diy-monitor-v12/32080951661_c92bb3f74c_z.jpg\" width=\"800\" height=\"450\" alt=\"20170108_214638\"></a>\n\nI improvised attaching the power supply with bolted-down velcro straps. And, alas, the \"roof\" I made for the driver board didn't quite work—I need longer bolts & spacers. But, the 75/100 VESA mounting holes worked great!\n\nThe whole thing is now decidedly heavier than with the old foamcore—but it's still lighter than v1.0 and any other comparable monitor I've seen. It's also much sturdier: I can turn & adjust it however I like with the gooseneck without the constant threat of duct tape tearing and falling apart. And, of course, the mic stand raises & lowers easily.\n\nBut, when I *do* want to take it apart, it's totally doable without worry. Cables unplug, thumbscrews unscrew, the mic stand breaks down—and the whole thing can hide under the couch in pieces.\n\n## Next steps?\n\nEnclosure upgrades notwithstanding, this is a 3-year-old 17\" 1080p monitor. I'm starting to feel the itch for a 4k panel since [I upgraded my video card][videocard]. But, there's apparently still no one who sells such a thing as a readymade product.\n\nMeanwhile, on eBay, there are vendors offering [4k versions of the kit][4kkit] that started me off on this whole adventure. I'm tempted to order one of those and use what I've learned so far to build the next revision of my monitor in a picture frame with a laser-cut VESA mount back panel.\n\nMaybe I'll retire this 1080p monitor for use with my CHIP [Pico-8 console kit][chipconsole] for a snazzy all-in-one barcade project. In any case, I'm just happy my lovely wife continues to tolerate this experiment of mine in living room couch gaming.\n\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n[thumbscrews]: http://amzn.to/2iYwbAU\n[laptopdecapitation]: https://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/#Laptop_decapitation\n[chipconsole]: https://getchip.com/pages/chip\n[4kkit]: http://www.ebay.com/itm/HDMI-DVI-DP-Board-17-3-3840x2160-UHD-4K-Wideview-100-NTSC-LCD-B173ZAN01-0-/192056466946?hash=item2cb7751e02\n[videocard]: https://www.instagram.com/p/BOlqtGyh7Ln\n[i3detroit]: https://www.i3detroit.org/\n[backdesign]: /uploads/2017/diy-monitor-v12/monitor-back-2.svg\n[inkscape]: https://inkscape.org/en/\n[gooseneck]: http://amzn.to/2j1VYZq\n[micadapter]: http://amzn.to/2j1YpeM\n[lapdesk]: http://amzn.to/2jntfL6\n[micstand]: http://amzn.to/2jcc93M\n[micvesa]: http://amzn.to/2jccG5D\n[i3early]: https://groups.google.com/d/topic/i3detroit-public/Qv1P91ySqWo/discussion\n[gamechord]: https://blog.lmorchard.com/2016/08/29/gamechord/\n[foamcore]: https://en.wikipedia.org/wiki/Foamcore\n[monitorvendors]: http://www.ebay.com/usr/chinatobby2011\n[american frame]: http://www.americanframe.com/\n[instructablepanel]: http://www.instructables.com/id/Laptop-to-Desktop-Conversion/\n[instructableframe]: http://www.instructables.com/id/How-to-Make-a-Raspberry-Pi-Media-Panel-fka-Digita/?ALLSTEPS\n[fractalnode]: http://amzn.to/2iy5G2b\n[couchgaming]: http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch\n[buildingv1]: http://blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2017/01/09/diy-monitor-v12",
    "summary": "<p><strong>TL;DR</strong>: My DIY couch PC monitor has been upgraded for a third time.</p>\n"
  },
  {
    "title": "Building my couch computing station",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/02/10/building-my-couch-computing-station",
    "dsq_thread_id": [
      1106746467
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "diy",
      "hacks",
      "lcd",
      "pc",
      "tech"
    ],
    "year": "2013",
    "month": "02",
    "day": "10",
    "isDir": false,
    "slug": "building-my-couch-computing-station",
    "date": "2013-02-10T12:00:00.000Z",
    "postName": "2013-02-10-building-my-couch-computing-station",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Display_from_the_other_side_of_the_earth\"><span class=\"toc_number toc_depth_1\">1</span> Display from the other side of the earth</a>\n    </li>\n    <li>\n      <a href=\"#Mounting_hardware\"><span class=\"toc_number toc_depth_1\">2</span> Mounting hardware</a>\n    </li>\n    <li>\n      <a href=\"#Building_the_enclosure\"><span class=\"toc_number toc_depth_1\">3</span> Building the enclosure</a>\n    </li>\n    <li>\n      <a href=\"#Mounting_the_mess_to_the_DAVE\"><span class=\"toc_number toc_depth_1\">4</span> Mounting the mess to the DAVE</a>\n    </li>\n    <li>\n      <a href=\"#What8217s_next\"><span class=\"toc_number toc_depth_1\">5</span> What&#8217;s next?</a>\n    </li>\n  </ul>\n</div>\n\n<p>Remember when I posted about <a href=\"http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch\">gaming from the Orchard House couch</a>? The key part was figuring out how to get <a href=\"http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch#Laptop_decapitation\">a laptop-quality LCD monitor working in the living room</a>, preferably attached to my trusty IKEA DAVE. Well, despite my best attempts at ruining my materials and tools, I managed to get it built!</p>\n<!--more-->\n\n<p>For reference, here&#8217;s what I came up with in Google Sketchup:</p>\n<p><a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2a-pc.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2a-pc.png\" alt=\"couch-gaming-2a-pc\" width=\"506\" height=\"910\" class=\"alignnone size-full wp-image-671\" /></a></p>\n<p>Spoiler alert &#8211; here&#8217;s what the final product looks like:</p>\n<p><a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-23.33.12.jpg\"><img class=\"alignnone size-large wp-image-832\" alt=\"2013-02-03 23.33.12\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-23.33.12-1024x768.jpg\" width=\"640\" height=\"480\" /></a></p>\n<h3 id=\"display-from-the-other-side-of-the-earth\"><span id=\"Display_from_the_other_side_of_the_earth\">Display from the other side of the earth</span></h3>\n<p><a href=\"http://www.ebay.com/itm/HDMI-VGA-DVI-Audio-LCD-controller-board-17-3-LP173WF1-1920-1080-lcd-panel-/170940546439?pt=LH_DefaultDomain_0&hash=item27ccd9bd87\" target=\"_blank\">The first piece</a> arrived a week or so ago:</p>\n<div id=\"attachment_825\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-01-31-11.24.53.jpg\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-01-31-11.24.53-1024x768.jpg\" alt=\"LCD panel and control board\" width=\"640\" height=\"480\" class=\"size-large wp-image-825\" /></a><p class=\"wp-caption-text\">\n    LCD panel and control board\n  </p>\n</div>\n\n<p style=\"clear: both;\">\n  Having never ordered anything like this before from a random eBay store out of China, I half expected it to never show up. But, <a href=\"http://stores.ebay.com/chinatobby?_trksid=p2047675.l2568\" target=\"_blank\">the merchant</a> has near <a href=\"http://feedback.ebay.com/ws/eBayISAPI.dll?ViewFeedback2&userid=chinatobby2011&ftab=AllFeedback\" target=\"_blank\">perfect 99.9% feedback scores</a>, so I hit the &#8220;Buy it now&#8221; button and crossed my fingers.\n</p>\n\n<p>Something great was that the confirmation email noted, &#8220;because what you bought will be shipped from the other side of the earth, it needs time&#8221;. Well, fair enough: I did pick the cheapest delivery option. Still, even with that bit of expectation setting, the package showed up just 10 days later. (<a href=\"https://twitter.com/search?q=%23livinginthefuture\" target=\"_blank\">#LivingInTheFuture</a> #FTW)</p>\n<p>What arrived was a <a href=\"http://www.panelook.com/LP173WF1-TLA1_LG%20Display_17.3_LCM_parameter_5857.html\" target=\"_blank\">17.3&#8243; 1920&#215;1080 TN LCD panel</a>, apparently used in a variety of high-end PC laptops from HP and Sony. What was also in the box was <a href=\"http://www.vslcd.com/Specification/M.NT68676.2A.pdf\" target=\"_blank\">a little driver board</a> that connects to the panel via LVDS cable. The driver board takes a 12v DC power supply, accepts HDMI / VGA / DVI video inputs, and even offers a headphone audio output jack.</p>\n<p>Overall, this hardware is exactly what I was looking for: Basically the head chopped off a laptop, with the right connectors for a desktop PC. What I needed now was an enclosure, and a way to mount the enclosure to my IKEA DAVE.</p>\n<h3 id=\"mounting-hardware\"><span id=\"Mounting_hardware\">Mounting hardware</span></h3>\n<p>As it happened, I had <a href=\"http://www.amazon.com/gp/product/B000ID7QNI/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000ID7QNI&amp;linkCode=as2&amp;tag=0xdecafbad01-20\" title=\"VideoSecu Articulating TV Wall Mount Bracket for VESA 100 LCD LED Flat Screen Monitor TV 1E9\">a cheap VESA mount with an articulated arm laying</a><img src=\"http://www.assoc-amazon.com/e/ir?t=0xdecafbad01-20&#038;l=as2&#038;o=1&#038;a=B000ID7QNI\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> around. We never got around to using it to stick a TV on the wall, so it seemed worth a shot to see if it would work on the IKEA DAVE.</p>\n<p><a href=\"http://www.amazon.com/gp/product/B000ID7QNI/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000ID7QNI&amp;linkCode=as2&amp;tag=0xdecafbad01-20\"><img border=\"0\" src=\"http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&#038;ASIN=B000ID7QNI&#038;Format=_SL110_&#038;ID=AsinImage&#038;MarketPlace=US&#038;ServiceVersion=20070822&#038;WS=1&#038;tag=0xdecafbad01-20\" /></a><img src=\"http://www.assoc-amazon.com/e/ir?t=0xdecafbad01-20&#038;l=as2&#038;o=1&#038;a=B000ID7QNI\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /></p>\n<p>For around $15, it&#8217;s just about right: I had to mount it sideways, and it doesn&#8217;t <em>quite</em> fully work that way. The side-to-side angle doesn&#8217;t want to support any weight in an up-and-down tilt, but the rest of the arm tightens down, so it&#8217;s good enough.</p>\n<h3 style=\"clear: both;\">\n  <span id=\"Building_the_enclosure\">Building the enclosure</span>\n</h3>\n\n<p>I don&#8217;t have a 3D printer or a laser cutter. Though there is <a href=\"http://www.i3detroit.com/\" target=\"_blank\">a friendly hackerspace</a> suitably equipped nearby, I wanted to see what I could prototype by hand. So, I went to Home Depot and bought <a href=\"http://www.homedepot.com/h_d1/N-5yc1v/R-100542281/h_d2/ProductDisplay?catalogId=10053&langId=-1&keyword=acrylic&storeId=10051#.URcEEZykOUk\" target=\"_blank\">4 polystyrene panels</a>, <a href=\"http://www.homedepot.com/h_d1/N-5yc1v/R-203040434/h_d2/ProductDisplay?catalogId=10053&langId=-1&keyword=dremel&storeId=10051#.URcW75ykOUk\" target=\"_blank\">a Dremel tool</a>, and <a href=\"http://www.homedepot.com/h_d1/N-5yc1v/R-202519358/h_d2/ProductDisplay?catalogId=10053&langId=-1&keyword=acrylic+cutter&storeId=10051#.URcXIJykOUk\" target=\"_blank\">an acrylic cutter</a>.</p>\n<p>With lots of trial and error, and truly awful manufacturing tolerances, I came up with a crude design consisting of 6 stacked layers bolted together with machine screws:</p>\n<ol>\n<li>Back layer with VESA mounting holes and an exit for the LVDS cable.</li>\n<li>Layer with VESA mounting holes and a pocket to route the LVDS cable.</li>\n<li>Layer behind the LCD with pocket for LVDS cable and heads of VESA mount bolts.</li>\n<li>Strips across the top and sides to hold the LCD panel.</li>\n<li>More strips across the top and sides to hold the LCD panel.</li>\n<li>Strips across the top and sides, covering the bezel area of the LCD panel.</li>\n</ol>\n<p>I made a ton of measurements and little indecipherable sketches in my grid-lined Moleskine, but those were mostly crap. No battle plan survives contact with the enemy, and all that. In the end, I just flew by the seat of my pants and hacked away.</p>\n<p>This process taught me that a Dremel (in my hands, at least) is absolutely no substitute for a laser cutter. I <em>really</em> didn&#8217;t anticipate just how horrible I&#8217;d be at cutting this stuff. Trying to cut just-right shapes out of the polystyrene turned into a dismal, stinky mess. But luckily, all the material I thought I&#8217;d wasted turned out to be perfect for cutting out as strips for the bezel and sides.</p>\n<p>So, in lieu of a diagram, how about some pictures?</p>\n<div style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-20.29.331.jpg\"><img title=\"Back layers, attached to the VESA mount clamped to my workbench\" alt=\"Back layers, attached to the VESA mount clamped to my workbench\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-20.29.331-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\n    Back layers, attached to the VESA mount clamped to my workbench.\n  </p>\n</div>\n\n<p>Here&#8217;s a little trick I worked out in this construction process: I used squares of electrical tape to retain the machine screws, so that I could flip the thing around while I was assembling layers on top before threading on the nuts. And speaking of that, here are the rest of the pieces in place:</p>\n<div id=\"attachment_850\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-00.36.29.jpg\"><img class=\"size-large wp-image-850\" title=\"Further layers bolted into the stack\" alt=\"Further layers bolted into the stack\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-00.36.29-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\n    Further layers bolted into the stack\n  </p>\n</div>\n\n<p>The middle two layers cradling the sides of the LCD panel alternate between long sides / short top and long top / short sides, providing a bit more stability in the way they overlap. The top layer is long sides / short top, with a bit more width to cover the 5mm or so of the LCD panel&#8217;s bezel area.</p>\n<p>Immediately behind the LCD panel is a layer with a cut-out to provide space for machine screws for the VESA mount, and a pocket through which to route the LVDS cable to the control board. And the final two layers form the actual VESA mount and complete the exit route for the LVDS cable.</p>\n<div style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-20.44.09.jpg\"><img title=\"Video control board bolted onto the back\" alt=\"Video control board bolted onto the back\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-20.44.09-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\n    Video control board bolted onto the back\n  </p>\n</div>\n\n<p>And finally, here&#8217;s the video control board on the back. Rather than make a full box for the board, I just sandwiched it with machine screws between acrylic layers and nylon spacers. Then, I bolted that whole mess onto the back layers.</p>\n<p>Midway through this process, I switched from Home Depot to <a href=\"http://frentzandsons.com/content/default.htm\">a family-owned hardware store</a> a few blocks from my house. I think they recognize me as a regular now after repeat visits for Dremel bits, screws, and a pile of other miscellanea.</p>\n<h3 id=\"mounting-the-mess-to-the-dave\"><span id=\"Mounting_the_mess_to_the_DAVE\">Mounting the mess to the DAVE</span></h3>\n<p>The VideoSecu VESA mount went onto the IKEA DAVE rather crudely with a pair of long wood screws. It feels pretty solid, but the screws stab treacherously out through the bottom. I&#8217;ll need to address that someday, probably after they stab me in the kneecaps.</p>\n<p>And, as it turns out, the control board placement was a mistake. Once I got the VESA arm screwed onto the IKEA DAVE, there wasn&#8217;t enough room to connect the power and an HDMI cable to the board. Or rather, there was just enough room to do so and inadvertently destroy an HDMI cable after a few hours of the monitor&#8217;s weight resting on it. I guess the good news is that the cable went before the solder joints on the jack failed. Herp, derp.</p>\n<p>So, I bought a new HDMI cable, unbolted the board, and stuck it onto the back with <a href=\"http://www.amazon.com/gp/product/B00004Z4A8/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00004Z4A8&linkCode=as2&tag=0xdecafbad01-20\" target=\"_blank\">double sided tape</a>. Here&#8217;s what the back looks like now:</p>\n<div id=\"attachment_826\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-05-00.28.14.jpg\"><img class=\"size-large wp-image-826\" title=\"LCD enclosure attached to the IKEA DAVE\" alt=\"LCD enclosure attached to the IKEA DAVE\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-05-00.28.14-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\n    LCD enclosure attached to the IKEA DAVE, featuring bonus <a href=\"http://www.flickr.com/photos/deusx/tags/cheddars/\" target=\"_blank\">Cheddars</a> appearance\n  </p>\n</div>\n\n<p>I also used the same tape to attach the button board to the front of the enclosure.</p>\n<div id=\"attachment_853\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-09-23.20.43.jpg\"><img class=\"size-large wp-image-853\" alt=\"Button board on front\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-09-23.20.43-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\n    Button board on front\n  </p>\n</div>\n\n<p>Overall, this thing works pretty much exactly as I&#8217;d imagined it. I <a href=\"http://pcpartpicker.com/p/z3mE\" target=\"_blank\">built a PC</a> in a <a href=\"http://icrontic.com/article/fractal-design-node-304-case-review\" target=\"_blank\">Fractal Node 304</a> mini-ITX case, and hid that under the coffee table. I bundled the cables together and used velcro wraps to bind them to the DAVE, and <a href=\"http://www.rabbit.org/faq/sections/rabbit-proofing.html#cords\" target=\"_blank\">some spiral wraps to bunny-proof</a> them as much as possible.</p>\n<div id=\"attachment_855\" style=\"width: 650px\" class=\"wp-caption alignnone\">\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-09-23.38.29.jpg\"><img class=\"size-large wp-image-855\" alt=\"Cheddars just loves my new couch PC\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-09-23.38.29-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\n    <a href=\"http://www.flickr.com/photos/deusx/tags/cheddars/\" target=\"_blank\">Cheddars</a> just loves my new couch PC. Or, maybe she wants dinner.\n  </p>\n</div>\n\n<h3 id=\"whats-next\"><span id=\"What8217s_next\">What&#8217;s next?</span></h3>\n<p>This monitor is ugly if you look at it too closely. I slipped a bit with the acrylic cutter and left some obvious gouges, and the layers have a grubby patina of scratches just from clumsy handling throughout the process. Basically, it&#8217;s very, very obviously hand-made by a guy who writes software for a living and hasn&#8217;t touched a power tool for more than 5 minutes since high school shop class.</p>\n<p>But, I think some really valuable things came out of this first attempt: It took me a bit to work through how to mount the LCD panel and route the cable out the back in a way that didn&#8217;t put stress on the wires or the connectors. There was a lot of fudge factor in getting the VESA mount alignment just right. And, there was also that HDMI cable I wrecked by botching the control board placement. Beyond all that, though, the basic idea worked.</p>\n<p>So, I&#8217;m already thinking about v2.0 and making friends over at <a href=\"http://www.i3detroit.com/\" target=\"_blank\">i3Detroit</a> who can drive <a href=\"http://i3detroit.com/wi/index.php?title=Laser_Cutting_and_Etching\" target=\"_blank\">a laser cutter</a>. I&#8217;m checking out <a href=\"http://www.ponoko.com/starter-kits/inkscape\" target=\"_blank\">Inkscape and Ponoko</a>. I&#8217;d also like to find some better materials &#8211; maybe aluminum for the front bezel and back panel, and maybe drop a layer from the stack. It would be really nice to get a much cleaner look and drop some weight. Also, an upgrade to this cheap VESA mount would be keen &#8211; I can&#8217;t <em>quite</em> get all the adjustments I&#8217;d like.</p>\n<p>Overall, this thing works, and that makes me pretty happy. In the beginning, I had really hoped to just find someone else had made this exact thing &#8211; maybe on Thingiverse. But, no such luck. This <a href=\"http://www.instructables.com/id/Laptop-to-Desktop-Conversion/\" target=\"_blank\">&#8220;Laptop-to-Desktop&#8221; Instructable</a> is pretty close, but not entirely what I needed. I guess DIY high-res LCD monitors are just not a thing. But, maybe this post and a possible v2.0 post in the future might come in handy for someone else.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#Display_from_the_other_side_of_the_earth\"><span class=\"toc_number toc_depth_1\">1</span> Display from the other side of the earth</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Mounting_hardware\"><span class=\"toc_number toc_depth_1\">2</span> Mounting hardware</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Building_the_enclosure\"><span class=\"toc_number toc_depth_1\">3</span> Building the enclosure</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Mounting_the_mess_to_the_DAVE\"><span class=\"toc_number toc_depth_1\">4</span> Mounting the mess to the DAVE</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#What8217s_next\"><span class=\"toc_number toc_depth_1\">5</span> What&#8217;s next?</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nRemember when I posted about [gaming from the Orchard House couch][1]? The key part was figuring out how to get [a laptop-quality LCD monitor working in the living room][2], preferably attached to my trusty IKEA DAVE. Well, despite my best attempts at ruining my materials and tools, I managed to get it built!\r\n\r\n<!--more-->\r\n\r\nFor reference, here&#8217;s what I came up with in Google Sketchup:\r\n\r\n[<img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2a-pc.png\" alt=\"couch-gaming-2a-pc\" width=\"506\" height=\"910\" class=\"alignnone size-full wp-image-671\" />][3]\r\n\r\nSpoiler alert &#8211; here&#8217;s what the final product looks like:\r\n\r\n[<img class=\"alignnone size-large wp-image-832\" alt=\"2013-02-03 23.33.12\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-23.33.12-1024x768.jpg\" width=\"640\" height=\"480\" />][4]\r\n\r\n### <span id=\"Display_from_the_other_side_of_the_earth\">Display from the other side of the earth</span>\r\n\r\n<a href=\"http://www.ebay.com/itm/HDMI-VGA-DVI-Audio-LCD-controller-board-17-3-LP173WF1-1920-1080-lcd-panel-/170940546439?pt=LH_DefaultDomain_0&hash=item27ccd9bd87\" target=\"_blank\">The first piece</a> arrived a week or so ago:\r\n\r\n<div id=\"attachment_825\" style=\"width: 650px\" class=\"wp-caption alignnone\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-01-31-11.24.53.jpg\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-01-31-11.24.53-1024x768.jpg\" alt=\"LCD panel and control board\" width=\"640\" height=\"480\" class=\"size-large wp-image-825\" /></a><p class=\"wp-caption-text\">\r\n    LCD panel and control board\r\n  </p>\r\n</div>\r\n\r\n<p style=\"clear: both;\">\r\n  Having never ordered anything like this before from a random eBay store out of China, I half expected it to never show up. But, <a href=\"http://stores.ebay.com/chinatobby?_trksid=p2047675.l2568\" target=\"_blank\">the merchant</a> has near <a href=\"http://feedback.ebay.com/ws/eBayISAPI.dll?ViewFeedback2&userid=chinatobby2011&ftab=AllFeedback\" target=\"_blank\">perfect 99.9% feedback scores</a>, so I hit the &#8220;Buy it now&#8221; button and crossed my fingers.\r\n</p>\r\n\r\nSomething great was that the confirmation email noted, &#8220;because what you bought will be shipped from the other side of the earth, it needs time&#8221;. Well, fair enough: I did pick the cheapest delivery option. Still, even with that bit of expectation setting, the package showed up just 10 days later. (<a href=\"https://twitter.com/search?q=%23livinginthefuture\" target=\"_blank\">#LivingInTheFuture</a> #FTW)\r\n\r\nWhat arrived was a <a href=\"http://www.panelook.com/LP173WF1-TLA1_LG%20Display_17.3_LCM_parameter_5857.html\" target=\"_blank\">17.3&#8243; 1920&#215;1080 TN LCD panel</a>, apparently used in a variety of high-end PC laptops from HP and Sony. What was also in the box was <a href=\"http://www.vslcd.com/Specification/M.NT68676.2A.pdf\" target=\"_blank\">a little driver board</a> that connects to the panel via LVDS cable. The driver board takes a 12v DC power supply, accepts HDMI / VGA / DVI video inputs, and even offers a headphone audio output jack.\r\n\r\nOverall, this hardware is exactly what I was looking for: Basically the head chopped off a laptop, with the right connectors for a desktop PC. What I needed now was an enclosure, and a way to mount the enclosure to my IKEA DAVE.\r\n\r\n### <span id=\"Mounting_hardware\">Mounting hardware</span>\r\n\r\nAs it happened, I had [a cheap VESA mount with an articulated arm laying][5]<img src=\"http://www.assoc-amazon.com/e/ir?t=0xdecafbad01-20&#038;l=as2&#038;o=1&#038;a=B000ID7QNI\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" /> around. We never got around to using it to stick a TV on the wall, so it seemed worth a shot to see if it would work on the IKEA DAVE.\r\n\r\n[<img border=\"0\" src=\"http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&#038;ASIN=B000ID7QNI&#038;Format=_SL110_&#038;ID=AsinImage&#038;MarketPlace=US&#038;ServiceVersion=20070822&#038;WS=1&#038;tag=0xdecafbad01-20\" />][6]<img src=\"http://www.assoc-amazon.com/e/ir?t=0xdecafbad01-20&#038;l=as2&#038;o=1&#038;a=B000ID7QNI\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\r\n\r\nFor around $15, it&#8217;s just about right: I had to mount it sideways, and it doesn&#8217;t *quite* fully work that way. The side-to-side angle doesn&#8217;t want to support any weight in an up-and-down tilt, but the rest of the arm tightens down, so it&#8217;s good enough.\r\n\r\n<h3 style=\"clear: both;\">\r\n  <span id=\"Building_the_enclosure\">Building the enclosure</span>\r\n</h3>\r\n\r\nI don&#8217;t have a 3D printer or a laser cutter. Though there is <a href=\"http://www.i3detroit.com/\" target=\"_blank\">a friendly hackerspace</a> suitably equipped nearby, I wanted to see what I could prototype by hand. So, I went to Home Depot and bought <a href=\"http://www.homedepot.com/h_d1/N-5yc1v/R-100542281/h_d2/ProductDisplay?catalogId=10053&langId=-1&keyword=acrylic&storeId=10051#.URcEEZykOUk\" target=\"_blank\">4 polystyrene panels</a>, <a href=\"http://www.homedepot.com/h_d1/N-5yc1v/R-203040434/h_d2/ProductDisplay?catalogId=10053&langId=-1&keyword=dremel&storeId=10051#.URcW75ykOUk\" target=\"_blank\">a Dremel tool</a>, and <a href=\"http://www.homedepot.com/h_d1/N-5yc1v/R-202519358/h_d2/ProductDisplay?catalogId=10053&langId=-1&keyword=acrylic+cutter&storeId=10051#.URcXIJykOUk\" target=\"_blank\">an acrylic cutter</a>.\r\n\r\nWith lots of trial and error, and truly awful manufacturing tolerances, I came up with a crude design consisting of 6 stacked layers bolted together with machine screws:\r\n\r\n1.  Back layer with VESA mounting holes and an exit for the LVDS cable.\r\n2.  Layer with VESA mounting holes and a pocket to route the LVDS cable.\r\n3.  Layer behind the LCD with pocket for LVDS cable and heads of VESA mount bolts.\r\n4.  Strips across the top and sides to hold the LCD panel.\r\n5.  More strips across the top and sides to hold the LCD panel.\r\n6.  Strips across the top and sides, covering the bezel area of the LCD panel.\r\n\r\nI made a ton of measurements and little indecipherable sketches in my grid-lined Moleskine, but those were mostly crap. No battle plan survives contact with the enemy, and all that. In the end, I just flew by the seat of my pants and hacked away.\r\n\r\nThis process taught me that a Dremel (in my hands, at least) is absolutely no substitute for a laser cutter. I *really* didn&#8217;t anticipate just how horrible I&#8217;d be at cutting this stuff. Trying to cut just-right shapes out of the polystyrene turned into a dismal, stinky mess. But luckily, all the material I thought I&#8217;d wasted turned out to be perfect for cutting out as strips for the bezel and sides.\r\n\r\nSo, in lieu of a diagram, how about some pictures?\r\n\r\n<div style=\"width: 650px\" class=\"wp-caption alignnone\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-20.29.331.jpg\"><img title=\"Back layers, attached to the VESA mount clamped to my workbench\" alt=\"Back layers, attached to the VESA mount clamped to my workbench\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-20.29.331-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\r\n    Back layers, attached to the VESA mount clamped to my workbench.\r\n  </p>\r\n</div>\r\n\r\nHere&#8217;s a little trick I worked out in this construction process: I used squares of electrical tape to retain the machine screws, so that I could flip the thing around while I was assembling layers on top before threading on the nuts. And speaking of that, here are the rest of the pieces in place:\r\n\r\n<div id=\"attachment_850\" style=\"width: 650px\" class=\"wp-caption alignnone\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-00.36.29.jpg\"><img class=\"size-large wp-image-850\" title=\"Further layers bolted into the stack\" alt=\"Further layers bolted into the stack\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-00.36.29-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\r\n    Further layers bolted into the stack\r\n  </p>\r\n</div>\r\n\r\nThe middle two layers cradling the sides of the LCD panel alternate between long sides / short top and long top / short sides, providing a bit more stability in the way they overlap. The top layer is long sides / short top, with a bit more width to cover the 5mm or so of the LCD panel&#8217;s bezel area.\r\n\r\nImmediately behind the LCD panel is a layer with a cut-out to provide space for machine screws for the VESA mount, and a pocket through which to route the LVDS cable to the control board. And the final two layers form the actual VESA mount and complete the exit route for the LVDS cable.\r\n\r\n<div style=\"width: 650px\" class=\"wp-caption alignnone\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-20.44.09.jpg\"><img title=\"Video control board bolted onto the back\" alt=\"Video control board bolted onto the back\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-20.44.09-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\r\n    Video control board bolted onto the back\r\n  </p>\r\n</div>\r\n\r\nAnd finally, here&#8217;s the video control board on the back. Rather than make a full box for the board, I just sandwiched it with machine screws between acrylic layers and nylon spacers. Then, I bolted that whole mess onto the back layers.\r\n\r\nMidway through this process, I switched from Home Depot to [a family-owned hardware store][7] a few blocks from my house. I think they recognize me as a regular now after repeat visits for Dremel bits, screws, and a pile of other miscellanea.\r\n\r\n### <span id=\"Mounting_the_mess_to_the_DAVE\">Mounting the mess to the DAVE</span>\r\n\r\nThe VideoSecu VESA mount went onto the IKEA DAVE rather crudely with a pair of long wood screws. It feels pretty solid, but the screws stab treacherously out through the bottom. I&#8217;ll need to address that someday, probably after they stab me in the kneecaps.\r\n\r\nAnd, as it turns out, the control board placement was a mistake. Once I got the VESA arm screwed onto the IKEA DAVE, there wasn&#8217;t enough room to connect the power and an HDMI cable to the board. Or rather, there was just enough room to do so and inadvertently destroy an HDMI cable after a few hours of the monitor&#8217;s weight resting on it. I guess the good news is that the cable went before the solder joints on the jack failed. Herp, derp.\r\n\r\nSo, I bought a new HDMI cable, unbolted the board, and stuck it onto the back with <a href=\"http://www.amazon.com/gp/product/B00004Z4A8/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B00004Z4A8&linkCode=as2&tag=0xdecafbad01-20\" target=\"_blank\">double sided tape</a>. Here&#8217;s what the back looks like now:\r\n\r\n<div id=\"attachment_826\" style=\"width: 650px\" class=\"wp-caption alignnone\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-05-00.28.14.jpg\"><img class=\"size-large wp-image-826\" title=\"LCD enclosure attached to the IKEA DAVE\" alt=\"LCD enclosure attached to the IKEA DAVE\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-05-00.28.14-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\r\n    LCD enclosure attached to the IKEA DAVE, featuring bonus <a href=\"http://www.flickr.com/photos/deusx/tags/cheddars/\" target=\"_blank\">Cheddars</a> appearance\r\n  </p>\r\n</div>\r\n\r\nI also used the same tape to attach the button board to the front of the enclosure.\r\n\r\n<div id=\"attachment_853\" style=\"width: 650px\" class=\"wp-caption alignnone\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-09-23.20.43.jpg\"><img class=\"size-large wp-image-853\" alt=\"Button board on front\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-09-23.20.43-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\r\n    Button board on front\r\n  </p>\r\n</div>\r\n\r\nOverall, this thing works pretty much exactly as I&#8217;d imagined it. I <a href=\"http://pcpartpicker.com/p/z3mE\" target=\"_blank\">built a PC</a> in a <a href=\"http://icrontic.com/article/fractal-design-node-304-case-review\" target=\"_blank\">Fractal Node 304</a> mini-ITX case, and hid that under the coffee table. I bundled the cables together and used velcro wraps to bind them to the DAVE, and <a href=\"http://www.rabbit.org/faq/sections/rabbit-proofing.html#cords\" target=\"_blank\">some spiral wraps to bunny-proof</a> them as much as possible.\r\n\r\n<div id=\"attachment_855\" style=\"width: 650px\" class=\"wp-caption alignnone\">\r\n  <a href=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-09-23.38.29.jpg\"><img class=\"size-large wp-image-855\" alt=\"Cheddars just loves my new couch PC\" src=\"http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-09-23.38.29-1024x768.jpg\" width=\"640\" height=\"480\" /></a><p class=\"wp-caption-text\">\r\n    <a href=\"http://www.flickr.com/photos/deusx/tags/cheddars/\" target=\"_blank\">Cheddars</a> just loves my new couch PC. Or, maybe she wants dinner.\r\n  </p>\r\n</div>\r\n\r\n### <span id=\"What8217s_next\">What&#8217;s next?</span>\r\n\r\nThis monitor is ugly if you look at it too closely. I slipped a bit with the acrylic cutter and left some obvious gouges, and the layers have a grubby patina of scratches just from clumsy handling throughout the process. Basically, it&#8217;s very, very obviously hand-made by a guy who writes software for a living and hasn&#8217;t touched a power tool for more than 5 minutes since high school shop class.\r\n\r\nBut, I think some really valuable things came out of this first attempt: It took me a bit to work through how to mount the LCD panel and route the cable out the back in a way that didn&#8217;t put stress on the wires or the connectors. There was a lot of fudge factor in getting the VESA mount alignment just right. And, there was also that HDMI cable I wrecked by botching the control board placement. Beyond all that, though, the basic idea worked.\r\n\r\nSo, I&#8217;m already thinking about v2.0 and making friends over at <a href=\"http://www.i3detroit.com/\" target=\"_blank\">i3Detroit</a> who can drive <a href=\"http://i3detroit.com/wi/index.php?title=Laser_Cutting_and_Etching\" target=\"_blank\">a laser cutter</a>. I&#8217;m checking out <a href=\"http://www.ponoko.com/starter-kits/inkscape\" target=\"_blank\">Inkscape and Ponoko</a>. I&#8217;d also like to find some better materials &#8211; maybe aluminum for the front bezel and back panel, and maybe drop a layer from the stack. It would be really nice to get a much cleaner look and drop some weight. Also, an upgrade to this cheap VESA mount would be keen &#8211; I can&#8217;t *quite* get all the adjustments I&#8217;d like.\r\n\r\nOverall, this thing works, and that makes me pretty happy. In the beginning, I had really hoped to just find someone else had made this exact thing &#8211; maybe on Thingiverse. But, no such luck. This <a href=\"http://www.instructables.com/id/Laptop-to-Desktop-Conversion/\" target=\"_blank\">&#8220;Laptop-to-Desktop&#8221; Instructable</a> is pretty close, but not entirely what I needed. I guess DIY high-res LCD monitors are just not a thing. But, maybe this post and a possible v2.0 post in the future might come in handy for someone else.\r\n\r\n [1]: http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch\r\n [2]: http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch#Laptop_decapitation\r\n [3]: http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2a-pc.png\r\n [4]: http://blog.lmorchard.com/wp-content/uploads/2013/02/2013-02-03-23.33.12.jpg\r\n [5]: http://www.amazon.com/gp/product/B000ID7QNI/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000ID7QNI&linkCode=as2&tag=0xdecafbad01-20 \"VideoSecu Articulating TV Wall Mount Bracket for VESA 100 LCD LED Flat Screen Monitor TV 1E9\"\r\n [6]: http://www.amazon.com/gp/product/B000ID7QNI/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=B000ID7QNI&linkCode=as2&tag=0xdecafbad01-20\r\n [7]: http://frentzandsons.com/content/default.htm",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/02/10/building-my-couch-computing-station",
    "thumbnail": "http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2a-pc.png",
    "summary": "\n\n<p>Remember when I posted about <a href=\"http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch\">gaming from the Orchard House couch</a>? The key part was figuring out how to get <a href=\"http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch#Laptop_decapitation\">a laptop-quality LCD monitor working in the living room</a>, preferably attached to my trusty IKEA DAVE. Well, despite my best attempts at ruining my materials and tools, I managed to get it built!</p>\n"
  },
  {
    "title": "Gaming from the Orchard House couch",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2013/01/21/gaming-from-the-orchard-house-couch",
    "dsq_thread_id": [
      1106753029
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "diy",
      "gaming",
      "hacks",
      "home",
      "lcd",
      "pc"
    ],
    "year": "2013",
    "month": "01",
    "day": "21",
    "isDir": false,
    "slug": "gaming-from-the-orchard-house-couch",
    "date": "2013-01-21T12:00:00.000Z",
    "postName": "2013-01-21-gaming-from-the-orchard-house-couch",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#The_nightlife_at_Orchard_House\"><span class=\"toc_number toc_depth_1\">1</span> The nightlife at Orchard House</a>\n    </li>\n    <li>\n      <a href=\"#My_current_gaming_rig\"><span class=\"toc_number toc_depth_1\">2</span> My current gaming rig</a>\n    </li>\n    <li>\n      <a href=\"#Thoughts_on_a_new_gaming_rig\"><span class=\"toc_number toc_depth_1\">3</span> Thoughts on a new gaming rig</a>\n    </li>\n    <li>\n      <a href=\"#Laptop_decapitation\"><span class=\"toc_number toc_depth_1\">4</span> Laptop decapitation</a>\n    </li>\n    <li>\n      <a href=\"#Couching_gamer_hidden_tower\"><span class=\"toc_number toc_depth_1\">5</span> Couching gamer, hidden tower</a>\n    </li>\n    <li>\n      <a href=\"#Living_in_the_Post-PC_future\"><span class=\"toc_number toc_depth_1\">6</span> Living in the Post-PC future</a>\n    </li>\n  </ul>\n</div>\n\n<p>I like playing video games; it&#8217;s one of my favorite things in life. I also like hanging out with my wife; she&#8217;s my favorite person in the world. This is a post about ensuring these two things can happen together. This is also a post where I played with SketchUp for the first time.</p>\n<!--more-->\n\n<h2 id=\"the-nightlife-at-orchard-house\"><span id=\"The_nightlife_at_Orchard_House\">The nightlife at Orchard House</span></h2>\n<p><a style=\"display: block; float: right; margin: 0 0 0.75em 0.75em\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-1-laptop.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-1-laptop-300x238.png\" alt=\"couch-gaming-1-laptop\" width=\"300\" height=\"238\" class=\"alignnone size-medium wp-image-670\" /></a></p>\n<p>Here, on the left, you can see a scale model of evenings at Orchard House. Alex and I like to spend nights making fun of crappy TV, piddling around on our laptops, and attracting household pets. (Yeah, I had a little too much fun playing around in <a href=\"http://www.sketchup.com/\">SketchUp</a> tonight.)</p>\n<p>So, when I play video games, I don&#8217;t usually take over the TV &#8211; at least, not until later in the evening, when the girl succumbs to napping and I feel like firing up the Xbox. What I&#8217;ve ended up with for most nights, then, is running games from Steam (I&#8217;m <a href=\"steamcommunity.com/id/lmorchard\">lmorchard</a>) on Windows 7 running on a 2010 MacBook Pro 15&#8243; via Boot Camp.</p>\n<p>This is less than optimal, but it works tolerably for many fun things.</p>\n<h2 id=\"my-current-gaming-rig\"><span id=\"My_current_gaming_rig\">My current gaming rig</span></h2>\n<p><a style=\"display: block; float: left; margin: 0 0.75em 0.75em 0\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-1a-laptop.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-1a-laptop-175x300.png\" alt=\"couch-gaming-1a-laptop\" width=\"175\" height=\"300\" class=\"alignnone size-medium wp-image-669\" /></a></p>\n<p>Let&#8217;s zoom and enhance, because I can do that in SketchUp. On the right, you can see a model of my gaming rig. It consists mainly of the aforementioned <a href=\"http://www.amazon.com/gp/product/B00578O5W4/ref=as_li_ss_tl?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B00578O5W4\">Apple MacBook Pro</a>, an <a href=\"http://www.ikea.com/us/en/catalog/products/00120818/\">Ikea DAVE laptop table</a>, and a <a href=\"http://www.amazon.com/gp/product/B001F42MKG/ref=as_li_ss_tl?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B001F42MKG\">Logitech Trackman Marble Mouse</a>.</p>\n<p>I really like the DAVE table &#8211; we&#8217;ve accumulated 4 of these things at last count. They&#8217;re cheap &#8211; easily had from Ikea for around $20 &#8211; and go together in 2 minutes. I&#8217;ve used them instead of buying <a href=\"http://www.amazon.com/gp/product/B000IG1NFM/ref=as_li_ss_tl?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B000IG1NFM\" title=\"Humanscale Keyboard, Standard Platform, 4G Mechanism with Clip Mouse and Gel Leather Palm Support\">$400 ergonomic keyboard trays</a> for my desk. (I really missed those, when I left Yahoo!)</p>\n<p>I even took one outside to make <a href=\"https://sphotos-b.xx.fbcdn.net/hphotos-prn1/26116_383125243201_3986077_n.jpg\">working on the deck</a> easier on my wrists. And, of course, I&#8217;ve been gradually evolving one into a couch computing station.</p>\n<p><a style=\"display: block; float: right; margin: 0 0 0.75em 0.75em\" href=\"http://www.flickr.com/photos/deusx/8269329367/\" title=\"My couch computing rig by lmorchard, on Flickr\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/coughrigphoto.png\" alt=\"coughrigphoto\" width=\"261\" height=\"266\" class=\"alignnone size-full wp-image-716\" /></a></p>\n<p>Here on the right is a picture of my couch-side DAVE, sans MacBook pro. The big thing is a <a href=\"http://www.amazon.com/gp/product/B005C31HC0/ref=as_li_ss_tl?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B005C31HC0\">Cooler Master NotePal X-Slim Cooling Pad</a>, because my laptop has a habit of overheating and shutting itself down in the middle of Windows games, especially in the middle of summer.</p>\n<p>I&#8217;ve also been cycling through different pairs of headphones, and am currently trying out a pair of <a href=\"http://www.amazon.com/gp/product/B005GTNZUM/ref=as_li_ss_tl?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B005GTNZUM\">Logitech H800</a> wireless headphones. (The <a href=\"http://www.amazon.com/gp/product/B001J30FZM/ref=as_li_ss_tl?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B001J30FZM\">Plantronics 355&#8217;s</a> in the picture had been turned wireless when the bunny hopped by and gave it a nip. So, I took the hint.)</p>\n<h2 id=\"thoughts-on-a-new-gaming-rig\"><span id=\"Thoughts_on_a_new_gaming_rig\">Thoughts on a new gaming rig</span></h2>\n<p>Like I wrote earlier, many fun games can be played tolerably well on this 2010 MacBook Pro in Boot Camp. But, this is suboptimal and a dead end for upgrades where it matters. I could get an updated laptop, but that&#8217;s just kicking the can down the road. And besides, this machine is intended more as a productivity machine for me than gaming.</p>\n<p>I could also buy a real gaming laptop, but those things are expensive &#8211; and also less than great for upgrades.</p>\n<p><a style=\"display: block; float: left; margin: 0 0.75em 0.75em 0\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2-pc.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2-pc-300x248.png\" alt=\"couch-gaming-2-pc\" width=\"300\" height=\"248\" class=\"alignnone size-medium wp-image-672\" /></a></p>\n<p>What about a desktop gaming PC? It&#8217;s been a long time since I last built a PC &#8211; something on the order of 10 years. But, it seems like this would be the cheaper and more easily upgraded route</p>\n<p>The deal breaker, though, is the <em>desktop</em> part. Like I said, I like hanging out with my wife on the couch &#8211; I&#8217;m not going to wander off to a desk by myself to indulge my gaming hobby. If I had to choose, my wife wins every time. She&#8217;s my best friend.</p>\n<p>So, pictured above, I&#8217;m thinking about what it would take to replace my laptop with a desktop at the couch. I need a monitor that fits on my DAVE, and I need a place to stick a big box.</p>\n<h2 id=\"laptop-decapitation\"><span id=\"Laptop_decapitation\">Laptop decapitation</span></h2>\n<p><a style=\"display: block; float: right; margin: 0 0 0.75em 0.75em\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2a-pc.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2a-pc-166x300.png\" alt=\"couch-gaming-2a-pc\" width=\"166\" height=\"300\" class=\"alignnone size-medium wp-image-671\" /></a></p>\n<p>Let&#8217;s zoom &amp; enhance again, on the right. Basically, what I&#8217;ve mocked up here is the LCD panel from my laptop torn off and bolted to the DAVE. I&#8217;ve got an <a href=\"http://www.amazon.com/Apple-Wireless-Keyboard-MC184LL-VERSION/dp/B005DLDO4U/ref=sr_1_1?ie=UTF8&amp;qid=1358748005&amp;sr=8-1&amp;keywords=apple+wireless\">Apple Wireless Keyboard</a> there. But, it could just as easily be a <a href=\"http://www.amazon.com/gp/product/B0000BW01X/ref=as_li_ss_tl?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B0000BW01X\">Happy Hacking Keyboard</a>, if only I&#8217;d found the right model in SketchUp. Maybe I&#8217;ll even get &#8220;serious&#8221; and look into a gaming keyboard with a numpad.</p>\n<p>Unfortunately, I can&#8217;t seem to find a decent off-the-shelf LCD monitor that won&#8217;t crush the DAVE and yet has as nice a resolution &amp; density as my MacBook Pro display. But, after a day of musing on Facebook and poking around on eBay, I found an exciting lead.</p>\n<p><a style=\"display: block; float: left; margin: 0 0.75em 0.75em 0\" href=\"http://www.ebay.com/itm/HDMI-VGA-DVI-Audio-LCD-controller-board-17-3-LP173WF1-1920-1080-lcd-panel-/170940546439?pt=LH_DefaultDomain_0&#038;hash=item27ccd9bd87\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/622302621_o-300x224.jpg\" alt=\"622302621_o\" width=\"300\" height=\"224\" class=\"alignnone size-medium wp-image-682\" /></a></p>\n<p>As it turns out, you can buy an LCD display panel and a board to drive it from plain old HDMI / DVI / VGA inputs. On the left is one that I&#8217;ve ordered. <a href=\"http://www.ebay.com/itm/HDMI-VGA-DVI-Audio-LCD-controller-board-17-3-LP173WF1-1920-1080-lcd-panel-/170940546439?pt=LH_DefaultDomain_0&amp;hash=item27ccd9bd87\">It&#8217;s 17.3&#8243; and offers 1920 x 1080 resolution</a>.</p>\n<p>This seems pretty nice to me, since it&#8217;s slightly better than my current laptop and will sit less than 2-3 feet from my face. Worst case, I can use it as a second monitor for my desk. Or, I could move the Xbox to under the couch and hook it up on the HDMI input. I could even use headphones, since the display interface board has an output jack.</p>\n<p>I&#8217;ll have to fabricate some sort of housing for the display, and find a way to attach it to the DAVE with friction hinges. Since this will be in the living room, it also wouldn&#8217;t hurt if the result looks clean. I&#8217;m hoping this won&#8217;t be an impossible task, despite my carpentry skills having last been exercised in high school shop class almost 20 years ago. Less than 10 miles from me is <a href=\"http://www.i3detroit.com/\">i3Detroit</a>, an awesome maker space, so I could avail myself of some tinkerers there.</p>\n<h2 id=\"couching-gamer-hidden-tower\"><span id=\"Couching_gamer_hidden_tower\">Couching gamer, hidden tower</span></h2>\n<p><a style=\"display: block; float: right; margin: 0 0 0.75em 0.75em\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/unsightly-pc-tower.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/unsightly-pc-tower-300x279.png\" alt=\"unsightly-pc-tower\" width=\"300\" height=\"279\" class=\"alignnone size-medium wp-image-756\" /></a></p>\n<p>Let&#8217;s zoom &amp; enhance on that PC tower. I&#8217;ll stub my toes on it, as I wander to and from the kitchen. And, that girl I like hanging out with will probably brain me with it. That thing is not going to fly.</p>\n<p>Ideally, I&#8217;d love to stash it under the couch. But, under the couch gives me only about 4&#8243; of clearance. I think most of the video cards I&#8217;m considering are taller than that, let alone the cases.</p>\n<p>Other options might include hiding it behind the couch, but only if it doesn&#8217;t have howling turbines that prevent the girl from taking the naps mentioned earlier. We also have an entertainment center, which could be an option if running cables across the room isn&#8217;t ugly and if they don&#8217;t become bunny food (see aforementioned headphones). Oh, and the entertainment center is poorly ventilated.</p>\n<p>Maybe behind the couch is the best option, assuming everything but the monitor is wireless.</p>\n<h2 id=\"living-in-the-post-pc-future\"><span id=\"Living_in_the_Post-PC_future\">Living in the Post-PC future</span></h2>\n<p>So, assuming I get this display panel working and mounted, and I find a place to stick the PC case, now I have to figure out what to stick inside the case. My budget is not infinite, but I&#8217;m curious to see if I can keep it under $600. But, I&#8217;m so out of the DIY PC loop, that I don&#8217;t even know if that&#8217;s a sane ballpark for satisfying gaming.</p>\n<p>On the one hand, I think I&#8217;m relatively easy to satisfy. After all, I&#8217;m putting up with games on this MacBook Pro that sometimes never get more than 15-20 FPS. Ideally, I&#8217;d like to blow well past that &#8211; that&#8217;s the whole point, really. But, I don&#8217;t need insane bells &amp; whistles that I won&#8217;t appreciate on this 17&#8243; 1920&#215;1080 display. I&#8217;ll also never ever bother with 3D. It would just be nice, for once, to get high frame rates on at least last year&#8217;s games.</p>\n<p>This is where my ideas run out, and I need to do more research and bug some friends. But, that&#8217;s okay, because I think this is a relatively boring part. What&#8217;s in the box is less interesting to me than where to put it and how to hook it up at the couch.</p>\n<p>Still, let&#8217;s see where I end up going with this. More updates after I get delivery of this LCD panel.</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#The_nightlife_at_Orchard_House\"><span class=\"toc_number toc_depth_1\">1</span> The nightlife at Orchard House</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#My_current_gaming_rig\"><span class=\"toc_number toc_depth_1\">2</span> My current gaming rig</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Thoughts_on_a_new_gaming_rig\"><span class=\"toc_number toc_depth_1\">3</span> Thoughts on a new gaming rig</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Laptop_decapitation\"><span class=\"toc_number toc_depth_1\">4</span> Laptop decapitation</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Couching_gamer_hidden_tower\"><span class=\"toc_number toc_depth_1\">5</span> Couching gamer, hidden tower</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Living_in_the_Post-PC_future\"><span class=\"toc_number toc_depth_1\">6</span> Living in the Post-PC future</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nI like playing video games; it&#8217;s one of my favorite things in life. I also like hanging out with my wife; she&#8217;s my favorite person in the world. This is a post about ensuring these two things can happen together. This is also a post where I played with SketchUp for the first time.\r\n\r\n<!--more-->\r\n\r\n## <span id=\"The_nightlife_at_Orchard_House\">The nightlife at Orchard House</span>\r\n\r\n<a style=\"display: block; float: right; margin: 0 0 0.75em 0.75em\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-1-laptop.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-1-laptop-300x238.png\" alt=\"couch-gaming-1-laptop\" width=\"300\" height=\"238\" class=\"alignnone size-medium wp-image-670\" /></a>\r\n\r\nHere, on the left, you can see a scale model of evenings at Orchard House. Alex and I like to spend nights making fun of crappy TV, piddling around on our laptops, and attracting household pets. (Yeah, I had a little too much fun playing around in [SketchUp][1] tonight.)\r\n\r\nSo, when I play video games, I don&#8217;t usually take over the TV &#8211; at least, not until later in the evening, when the girl succumbs to napping and I feel like firing up the Xbox. What I&#8217;ve ended up with for most nights, then, is running games from Steam (I&#8217;m [lmorchard][2]) on Windows 7 running on a 2010 MacBook Pro 15&#8243; via Boot Camp.\r\n\r\nThis is less than optimal, but it works tolerably for many fun things.\r\n\r\n## <span id=\"My_current_gaming_rig\">My current gaming rig</span>\r\n\r\n<a style=\"display: block; float: left; margin: 0 0.75em 0.75em 0\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-1a-laptop.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-1a-laptop-175x300.png\" alt=\"couch-gaming-1a-laptop\" width=\"175\" height=\"300\" class=\"alignnone size-medium wp-image-669\" /></a>\r\n\r\nLet&#8217;s zoom and enhance, because I can do that in SketchUp. On the right, you can see a model of my gaming rig. It consists mainly of the aforementioned [Apple MacBook Pro][3], an [Ikea DAVE laptop table][4], and a [Logitech Trackman Marble Mouse][5].\r\n\r\nI really like the DAVE table &#8211; we&#8217;ve accumulated 4 of these things at last count. They&#8217;re cheap &#8211; easily had from Ikea for around $20 &#8211; and go together in 2 minutes. I&#8217;ve used them instead of buying [$400 ergonomic keyboard trays][6] for my desk. (I really missed those, when I left Yahoo!)\r\n\r\nI even took one outside to make [working on the deck][7] easier on my wrists. And, of course, I&#8217;ve been gradually evolving one into a couch computing station.\r\n\r\n<a style=\"display: block; float: right; margin: 0 0 0.75em 0.75em\" href=\"http://www.flickr.com/photos/deusx/8269329367/\" title=\"My couch computing rig by lmorchard, on Flickr\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/coughrigphoto.png\" alt=\"coughrigphoto\" width=\"261\" height=\"266\" class=\"alignnone size-full wp-image-716\" /></a>\r\n\r\nHere on the right is a picture of my couch-side DAVE, sans MacBook pro. The big thing is a [Cooler Master NotePal X-Slim Cooling Pad][8], because my laptop has a habit of overheating and shutting itself down in the middle of Windows games, especially in the middle of summer.\r\n\r\nI&#8217;ve also been cycling through different pairs of headphones, and am currently trying out a pair of [Logitech H800][9] wireless headphones. (The [Plantronics 355&#8217;s][10] in the picture had been turned wireless when the bunny hopped by and gave it a nip. So, I took the hint.)\r\n\r\n## <span id=\"Thoughts_on_a_new_gaming_rig\">Thoughts on a new gaming rig</span>\r\n\r\nLike I wrote earlier, many fun games can be played tolerably well on this 2010 MacBook Pro in Boot Camp. But, this is suboptimal and a dead end for upgrades where it matters. I could get an updated laptop, but that&#8217;s just kicking the can down the road. And besides, this machine is intended more as a productivity machine for me than gaming.\r\n\r\nI could also buy a real gaming laptop, but those things are expensive &#8211; and also less than great for upgrades.\r\n\r\n<a style=\"display: block; float: left; margin: 0 0.75em 0.75em 0\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2-pc.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2-pc-300x248.png\" alt=\"couch-gaming-2-pc\" width=\"300\" height=\"248\" class=\"alignnone size-medium wp-image-672\" /></a>\r\n\r\nWhat about a desktop gaming PC? It&#8217;s been a long time since I last built a PC &#8211; something on the order of 10 years. But, it seems like this would be the cheaper and more easily upgraded route\r\n\r\nThe deal breaker, though, is the *desktop* part. Like I said, I like hanging out with my wife on the couch &#8211; I&#8217;m not going to wander off to a desk by myself to indulge my gaming hobby. If I had to choose, my wife wins every time. She&#8217;s my best friend.\r\n\r\nSo, pictured above, I&#8217;m thinking about what it would take to replace my laptop with a desktop at the couch. I need a monitor that fits on my DAVE, and I need a place to stick a big box.\r\n\r\n## <span id=\"Laptop_decapitation\">Laptop decapitation</span>\r\n\r\n<a style=\"display: block; float: right; margin: 0 0 0.75em 0.75em\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2a-pc.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-2a-pc-166x300.png\" alt=\"couch-gaming-2a-pc\" width=\"166\" height=\"300\" class=\"alignnone size-medium wp-image-671\" /></a>\r\n\r\nLet&#8217;s zoom & enhance again, on the right. Basically, what I&#8217;ve mocked up here is the LCD panel from my laptop torn off and bolted to the DAVE. I&#8217;ve got an [Apple Wireless Keyboard][11] there. But, it could just as easily be a [Happy Hacking Keyboard][12], if only I&#8217;d found the right model in SketchUp. Maybe I&#8217;ll even get &#8220;serious&#8221; and look into a gaming keyboard with a numpad.\r\n\r\nUnfortunately, I can&#8217;t seem to find a decent off-the-shelf LCD monitor that won&#8217;t crush the DAVE and yet has as nice a resolution & density as my MacBook Pro display. But, after a day of musing on Facebook and poking around on eBay, I found an exciting lead.\r\n\r\n<a style=\"display: block; float: left; margin: 0 0.75em 0.75em 0\" href=\"http://www.ebay.com/itm/HDMI-VGA-DVI-Audio-LCD-controller-board-17-3-LP173WF1-1920-1080-lcd-panel-/170940546439?pt=LH_DefaultDomain_0&#038;hash=item27ccd9bd87\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/622302621_o-300x224.jpg\" alt=\"622302621_o\" width=\"300\" height=\"224\" class=\"alignnone size-medium wp-image-682\" /></a>\r\n\r\nAs it turns out, you can buy an LCD display panel and a board to drive it from plain old HDMI / DVI / VGA inputs. On the left is one that I&#8217;ve ordered. [It&#8217;s 17.3&#8243; and offers 1920 x 1080 resolution][13].\r\n\r\nThis seems pretty nice to me, since it&#8217;s slightly better than my current laptop and will sit less than 2-3 feet from my face. Worst case, I can use it as a second monitor for my desk. Or, I could move the Xbox to under the couch and hook it up on the HDMI input. I could even use headphones, since the display interface board has an output jack.\r\n\r\nI&#8217;ll have to fabricate some sort of housing for the display, and find a way to attach it to the DAVE with friction hinges. Since this will be in the living room, it also wouldn&#8217;t hurt if the result looks clean. I&#8217;m hoping this won&#8217;t be an impossible task, despite my carpentry skills having last been exercised in high school shop class almost 20 years ago. Less than 10 miles from me is [i3Detroit][14], an awesome maker space, so I could avail myself of some tinkerers there.\r\n\r\n## <span id=\"Couching_gamer_hidden_tower\">Couching gamer, hidden tower</span>\r\n\r\n<a style=\"display: block; float: right; margin: 0 0 0.75em 0.75em\" href=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/unsightly-pc-tower.png\"><img src=\"http://blog.lmorchard.com/wp-content/uploads/2013/01/unsightly-pc-tower-300x279.png\" alt=\"unsightly-pc-tower\" width=\"300\" height=\"279\" class=\"alignnone size-medium wp-image-756\" /></a>\r\n\r\nLet&#8217;s zoom & enhance on that PC tower. I&#8217;ll stub my toes on it, as I wander to and from the kitchen. And, that girl I like hanging out with will probably brain me with it. That thing is not going to fly.\r\n\r\nIdeally, I&#8217;d love to stash it under the couch. But, under the couch gives me only about 4&#8243; of clearance. I think most of the video cards I&#8217;m considering are taller than that, let alone the cases.\r\n\r\nOther options might include hiding it behind the couch, but only if it doesn&#8217;t have howling turbines that prevent the girl from taking the naps mentioned earlier. We also have an entertainment center, which could be an option if running cables across the room isn&#8217;t ugly and if they don&#8217;t become bunny food (see aforementioned headphones). Oh, and the entertainment center is poorly ventilated.\r\n\r\nMaybe behind the couch is the best option, assuming everything but the monitor is wireless.\r\n\r\n## <span id=\"Living_in_the_Post-PC_future\">Living in the Post-PC future</span>\r\n\r\nSo, assuming I get this display panel working and mounted, and I find a place to stick the PC case, now I have to figure out what to stick inside the case. My budget is not infinite, but I&#8217;m curious to see if I can keep it under $600. But, I&#8217;m so out of the DIY PC loop, that I don&#8217;t even know if that&#8217;s a sane ballpark for satisfying gaming.\r\n\r\nOn the one hand, I think I&#8217;m relatively easy to satisfy. After all, I&#8217;m putting up with games on this MacBook Pro that sometimes never get more than 15-20 FPS. Ideally, I&#8217;d like to blow well past that &#8211; that&#8217;s the whole point, really. But, I don&#8217;t need insane bells & whistles that I won&#8217;t appreciate on this 17&#8243; 1920&#215;1080 display. I&#8217;ll also never ever bother with 3D. It would just be nice, for once, to get high frame rates on at least last year&#8217;s games.\r\n\r\nThis is where my ideas run out, and I need to do more research and bug some friends. But, that&#8217;s okay, because I think this is a relatively boring part. What&#8217;s in the box is less interesting to me than where to put it and how to hook it up at the couch.\r\n\r\nStill, let&#8217;s see where I end up going with this. More updates after I get delivery of this LCD panel.\r\n\r\n [1]: http://www.sketchup.com/\r\n [2]: steamcommunity.com/id/lmorchard\r\n [3]: http://www.amazon.com/gp/product/B00578O5W4/ref=as_li_ss_tl?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=B00578O5W4\r\n [4]: http://www.ikea.com/us/en/catalog/products/00120818/\r\n [5]: http://www.amazon.com/gp/product/B001F42MKG/ref=as_li_ss_tl?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=B001F42MKG\r\n [6]: http://www.amazon.com/gp/product/B000IG1NFM/ref=as_li_ss_tl?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=B000IG1NFM \"Humanscale Keyboard, Standard Platform, 4G Mechanism with Clip Mouse and Gel Leather Palm Support\"\r\n [7]: https://sphotos-b.xx.fbcdn.net/hphotos-prn1/26116_383125243201_3986077_n.jpg\r\n [8]: http://www.amazon.com/gp/product/B005C31HC0/ref=as_li_ss_tl?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=B005C31HC0\r\n [9]: http://www.amazon.com/gp/product/B005GTNZUM/ref=as_li_ss_tl?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=B005GTNZUM\r\n [10]: http://www.amazon.com/gp/product/B001J30FZM/ref=as_li_ss_tl?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=B001J30FZM\r\n [11]: http://www.amazon.com/Apple-Wireless-Keyboard-MC184LL-VERSION/dp/B005DLDO4U/ref=sr_1_1?ie=UTF8&qid=1358748005&sr=8-1&keywords=apple+wireless\r\n [12]: http://www.amazon.com/gp/product/B0000BW01X/ref=as_li_ss_tl?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&creative=390957&creativeASIN=B0000BW01X\r\n [13]: http://www.ebay.com/itm/HDMI-VGA-DVI-Audio-LCD-controller-board-17-3-LP173WF1-1920-1080-lcd-panel-/170940546439?pt=LH_DefaultDomain_0&hash=item27ccd9bd87\r\n [14]: http://www.i3detroit.com/",
    "parentPath": "../blog.lmorchard.com/posts/archives/2013",
    "path": "2013/01/21/gaming-from-the-orchard-house-couch",
    "thumbnail": "http://blog.lmorchard.com/wp-content/uploads/2013/01/couch-gaming-1-laptop-300x238.png",
    "summary": "\n\n<p>I like playing video games; it&#x2019;s one of my favorite things in life. I also like hanging out with my wife; she&#x2019;s my favorite person in the world. This is a post about ensuring these two things can happen together. This is also a post where I played with SketchUp for the first time.</p>\n"
  },
  {
    "layout": "post",
    "title": "Social Media Cyborg",
    "tags": [
      "web20",
      "social",
      "feeds",
      "metablogging",
      "ifttt",
      "hacks"
    ],
    "published": true,
    "date": "2011-11-04T21:12:34.971Z",
    "year": "2011",
    "month": "11",
    "day": "04",
    "isDir": false,
    "slug": "social-media-cyborg",
    "postName": "2011-11-04-social-media-cyborg",
    "html": "<p><strong>TL;DR</strong>: <em>Since Google Reader lost it&#39;s sharing, I&#39;ve decided to\nrevisit my &quot;social media strategy&quot;. I&#39;m plugging lots of things into\nother things. I feel like maybe I should write about this stuff.</em></p>\n<p><span style=\"display: block; float: right; text-decoration: none; border: none; margin: 0 0 1em 1em; width: 310px;\"><img src=\"http://decafbad.com/blog/images/2011/11/social-media-cyborg.png\" style=\"width: 275px; border: 2px solid #ddd; padding: 1em; background: #fff;\" /><br/><small>Started diagramming all my social media flows on LucidChart.</small></span></p>\n<h2 id=\"this-is-what-i-do-for-fun\">This is what I do for fun</h2>\n<p>Since I&#39;ve mentioned in a few places that I&#39;m a weirdo, I thought I\nmight spend some time explaining exactly what I mean by that. You see,\none of my hobbies is turning myself into a human content filter for\nfriends on the web.</p>\n<p>And, honestly, having my sharing habits shaken up by the\n<a href=\"http://decafbad.com/blog/2011/11/01/readerpocalypse\">Readerpocalypse</a> makes it fun again.</p>\n<p>The image over to the right is an attempt I made to diagram some of my\nsocial media flow. It&#39;s incomplete, though: I&#39;m a cheapsake and ran\nout of free objects in my diagram. So, I had to leave out at least a\nhalf-dozen more services and a dozen additional connections.\n(<a href=\"http://www.lucidchart.com/\">LucidChart</a> is very nice, by the way.)</p>\n<h2 id=\"in-other-words-iftttcom-is-awesome\">In other words, ifttt.com is awesome</h2>\n<p>In particular, I&#39;ve finally spent some time with <a href=\"http://ifttt.com\">ifttt.com</a>. It&#39;s\nlike <a href=\"http://en.wikipedia.org/wiki/Automator_%28software%29\">Automator</a> for the social web. It lets you <a href=\"http://ifttt.com/people/lmorchard\">define event\ntriggers from one site that cause actions on another site</a>. </p>\n<p>So, I&#39;ve gone crazy and created a bunch of tasks that make things like\nthe following possible:</p>\n<ul>\n<li><p><a href=\"http://pinboard.in/u:deusx\">Pinboard</a> bookmarks based on favorites from\n<a href=\"https://twitter.com/lmorchard/favorites\">Twitter</a>, <a href=\"http://identi.ca/lmorchard/favorites\">identi.ca</a>, <a href=\"http://www.youtube.com/user/lmorchard\">YouTube</a>,\n<a href=\"http://www.last.fm/user/deusx/library/loved\">Last.fm</a>, and my <a href=\"https://kindle.amazon.com/profile/Leslie-Michael-Orchard/1056858\">Kindle</a> highlights. I&#39;m turning my\n<a href=\"http://pinboard.in/u:deusx\">Pinboard</a> account into both my personal social media archive and\na Google Reader sharing replacement, and I don&#39;t even have to beg\nfor new features at <a href=\"http://pinboard.in/u:deusx\">Pinboard</a>.</p>\n</li>\n<li><p><a href=\"http://lmorchard.tumblr.com/\">Tumblr</a> photo posts based on <a href=\"http://pipes.yahoo.com/pipes/pipe.run?_id=6f374b46f1b9a132972b262f2d85b7db&amp;_render=rss\">Reddit up-votes</a>, <a href=\"http://www.flickr.com/photos/deusx/favorites/\">Flickr\nfavorites</a>, and <a href=\"http://pinboard.in/u:deusx\">Pinboard</a> bookmarks tagged &quot;<a href=\"http://pinboard.in/u:deusx/t:to:tumblr\">to:tumblr</a>&quot;.\nSince creating it, I&#39;ve left my <a href=\"http://lmorchard.tumblr.com/\">Tumblr</a> almost entirely\nneglected—but now with <a href=\"http://ifttt.com\">ifttt.com</a>, I can route almost every nifty\nimage I find over to that thing. It&#39;s the right side of my outboard\nbrain to the <a href=\"http://pinboard.in/u:deusx\">Pinboard</a> left.</p>\n</li>\n<li><p>Published items from from my private installation of <a href=\"http://tt-rss.org/\">Tiny Tiny RSS</a> \nend up shared on <a href=\"http://pinboard.in/u:deusx\">Pinboard</a>. This pretty much scratches my itch\nfor feed reader sharing, since <a href=\"http://decafbad.com/blog/2011/11/01/readerpocalypse\">Google nixed those features from\nReader</a>.</p>\n</li>\n<li><p>Starred items from <a href=\"http://tt-rss.org/\">tt-rss</a> get sent to\n<a href=\"http://www.instapaper.com/\">Instapaper</a>, so I can read them on my <a href=\"https://kindle.amazon.com/profile/Leslie-Michael-Orchard/1056858\">Kindle</a> later. If <a href=\"https://twitter.com/lmorchard/status/132482782709555200\">email\ndelivery of documents start working</a>, then I&#39;ll have a\npersonal long-attention span newspaper delivered regularly to that\ngadget.</p>\n</li>\n<li><p>Posts from <a href=\"https://plus.google.com/114487965928288927815/posts\">Google+</a> get copied over to <a href=\"http://www.facebook.com/lmorchard\">Facebook</a>, because I\ndon&#39;t want to pick sides.</p>\n</li>\n<li><p>In fact, almost everything I do everywhere eventually ends up posted\nto <a href=\"http://www.facebook.com/lmorchard\">Facebook</a>, because I almost never post anything in person over\nthere. I do have friends and family over there and respond to\ncomments, though.</p>\n</li>\n</ul>\n<h2 id=\"whats-the-point\">What&#39;s the point?</h2>\n<p>The important principle here is that I&#39;m lazy. If there&#39;s a single\nbutton to click somewhere that expresses my happiness about a thing,\nI&#39;d like to click it and have that happiness shared and archived\nelsewhere without me doing much (or anything) more. The scheme I have\nnow feels pretty good for that, and <a href=\"http://ifttt.com\">ifttt.com</a> does a huge amount\nto help.</p>\n<p>The other important thing is that <strong>I am at the center of these\nconnections</strong>. I don&#39;t live entirely on any single service, and\nanything I care about is archived where I can easily grab it for\nbackups or mashups. Should any particular service node in this web\nfail, I can probably do without, find an alternative, or build one\nmyself. </p>\n<p>My goal is to eventually replace as many of these nodes as possible\nwith self-hosted or at least Open Source derived services. (Though, of\ncourse, I&#39;m also lazy and my friends are where they are. So, that goal\nwill take awhile.)</p>\n<h2 id=\"one-more-thing\">One more thing...</h2>\n<p>I&#39;ve got <a href=\"https://github.com/lmorchard/tinkering-with-activity-streams\">an idea for my next book simmering</a>. And, since I&#39;ve\nso far managed to write books about the major things I&#39;ve done for\nfun, I feel I&#39;d be remiss if I skipped this stuff. I mean, I sort of\ncovered the same ground all in <a href=\"http://www.amazon.com/gp/product/0764597582?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;c%0D%0Areative=9325&amp;creativeASIN=0764597582\">my first</a> and <a href=\"http://www.amazon.com/gp/product/0470037857?ie=UTF8&amp;tag=0xdecafbad01-20&amp;linkCode=as2&amp;camp=1789&amp;%0D%0Acreative=9325&amp;creativeASIN=0470037857\">second</a> books, but\nthings have progressed since then.</p>\n<p>What this means is that all the above feels like a warm up for the\ncoding and prosing I&#39;ll need to do. I just need to get my shit\ntogether and carve out the time to make it happen.</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=70: -->\n",
    "body": "**TL;DR**: <em>Since Google Reader lost it's sharing, I've decided to\r\nrevisit my \"social media strategy\". I'm plugging lots of things into\r\nother things. I feel like maybe I should write about this stuff.</em>\r\n\r\n<span style=\"display: block; float: right; text-decoration: none; border: none; margin: 0 0 1em 1em; width: 310px;\"><img src=\"http://decafbad.com/blog/images/2011/11/social-media-cyborg.png\" style=\"width: 275px; border: 2px solid #ddd; padding: 1em; background: #fff;\" /><br/><small>Started diagramming all my social media flows on LucidChart.</small></span>\r\n\r\n## This is what I do for fun\r\n\r\nSince I've mentioned in a few places that I'm a weirdo, I thought I\r\nmight spend some time explaining exactly what I mean by that. You see,\r\none of my hobbies is turning myself into a human content filter for\r\nfriends on the web.\r\n\r\nAnd, honestly, having my sharing habits shaken up by the\r\n[Readerpocalypse][] makes it fun again.\r\n\r\nThe image over to the right is an attempt I made to diagram some of my\r\nsocial media flow. It's incomplete, though: I'm a cheapsake and ran\r\nout of free objects in my diagram. So, I had to leave out at least a\r\nhalf-dozen more services and a dozen additional connections.\r\n([LucidChart][] is very nice, by the way.)\r\n\r\n[lucidchart]: http://www.lucidchart.com/\r\n\r\n## In other words, ifttt.com is awesome\r\n\r\nIn particular, I've finally spent some time with [ifttt.com][]. It's\r\nlike [Automator][] for the social web. It lets you [define event\r\ntriggers from one site that cause actions on another site][recipes]. \r\n\r\nSo, I've gone crazy and created a bunch of tasks that make things like\r\nthe following possible:\r\n\r\n* [Pinboard][] bookmarks based on favorites from\r\n  [Twitter][twitterfavs], [identi.ca][identicafavs], [YouTube][],\r\n  [Last.fm][], and my [Kindle][] highlights. I'm turning my\r\n  [Pinboard][] account into both my personal social media archive and\r\n  a Google Reader sharing replacement, and I don't even have to beg\r\n  for new features at [Pinboard][].\r\n\r\n* [Tumblr][] photo posts based on [Reddit up-votes][reddit], [Flickr\r\n  favorites][], and [Pinboard][] bookmarks tagged \"[to:tumblr][]\".\r\n  Since creating it, I've left my [Tumblr][] almost entirely\r\n  neglected—but now with [ifttt.com][], I can route almost every nifty\r\n  image I find over to that thing. It's the right side of my outboard\r\n  brain to the [Pinboard][] left.\r\n\r\n* Published items from from my private installation of [Tiny Tiny RSS][] \r\n  end up shared on [Pinboard][]. This pretty much scratches my itch\r\n  for feed reader sharing, since [Google nixed those features from\r\n  Reader][readerpocalypse].\r\n\r\n* Starred items from [tt-rss][tiny tiny rss] get sent to\r\n  [Instapaper][], so I can read them on my [Kindle][] later. If [email\r\n  delivery of documents start working][ipemail], then I'll have a\r\n  personal long-attention span newspaper delivered regularly to that\r\n  gadget.\r\n\r\n* Posts from [Google+][] get copied over to [Facebook][], because I\r\n  don't want to pick sides.\r\n\r\n* In fact, almost everything I do everywhere eventually ends up posted\r\n  to [Facebook][], because I almost never post anything in person over\r\n  there. I do have friends and family over there and respond to\r\n  comments, though.\r\n\r\n## What's the point?\r\n\r\nThe important principle here is that I'm lazy. If there's a single\r\nbutton to click somewhere that expresses my happiness about a thing,\r\nI'd like to click it and have that happiness shared and archived\r\nelsewhere without me doing much (or anything) more. The scheme I have\r\nnow feels pretty good for that, and [ifttt.com][] does a huge amount\r\nto help.\r\n\r\nThe other important thing is that **I am at the center of these\r\nconnections**. I don't live entirely on any single service, and\r\nanything I care about is archived where I can easily grab it for\r\nbackups or mashups. Should any particular service node in this web\r\nfail, I can probably do without, find an alternative, or build one\r\nmyself. \r\n\r\nMy goal is to eventually replace as many of these nodes as possible\r\nwith self-hosted or at least Open Source derived services. (Though, of\r\ncourse, I'm also lazy and my friends are where they are. So, that goal\r\nwill take awhile.)\r\n\r\n## One more thing...\r\n\r\nI've got [an idea for my next book simmering][book]. And, since I've\r\nso far managed to write books about the major things I've done for\r\nfun, I feel I'd be remiss if I skipped this stuff. I mean, I sort of\r\ncovered the same ground all in [my first][] and [second][] books, but\r\nthings have progressed since then.\r\n\r\nWhat this means is that all the above feels like a warm up for the\r\ncoding and prosing I'll need to do. I just need to get my shit\r\ntogether and carve out the time to make it happen.\r\n\r\n[my first]: http://www.amazon.com/gp/product/0764597582?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&c%0D%0Areative=9325&creativeASIN=0764597582\r\n[second]: http://www.amazon.com/gp/product/0470037857?ie=UTF8&tag=0xdecafbad01-20&linkCode=as2&camp=1789&%0D%0Acreative=9325&creativeASIN=0470037857\r\n[book]: https://github.com/lmorchard/tinkering-with-activity-streams\r\n[google+]: https://plus.google.com/114487965928288927815/posts\r\n[ipemail]: https://twitter.com/lmorchard/status/132482782709555200\r\n[flickr favorites]: http://www.flickr.com/photos/deusx/favorites/\r\n[twitter]: http://twitter.com/lmorchard\r\n[recipes]: http://ifttt.com/people/lmorchard\r\n[facebook]: http://www.facebook.com/lmorchard\r\n[instapaper]: http://www.instapaper.com/\r\n[tiny tiny rss]: http://tt-rss.org/\r\n[last.fm]: http://www.last.fm/user/deusx/library/loved\r\n[youtube]: http://www.youtube.com/user/lmorchard\r\n[identicafavs]: http://identi.ca/lmorchard/favorites\r\n[twitterfavs]: https://twitter.com/lmorchard/favorites\r\n[kindle]: https://kindle.amazon.com/profile/Leslie-Michael-Orchard/1056858\r\n[reddit]: http://pipes.yahoo.com/pipes/pipe.run?_id=6f374b46f1b9a132972b262f2d85b7db&_render=rss\r\n[to:tumblr]: http://pinboard.in/u:deusx/t:to:tumblr\r\n[tumblr]: http://lmorchard.tumblr.com/\r\n[pinboard]: http://pinboard.in/u:deusx\r\n[yahoo! pipes]: http://pipes.yahoo.com/pipes/\r\n[automator]: http://en.wikipedia.org/wiki/Automator_%28software%29\r\n[ifttt.com]: http://ifttt.com\r\n[readerpocalypse]: http://decafbad.com/blog/2011/11/01/readerpocalypse\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=70: -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2011",
    "path": "2011/11/04/social-media-cyborg",
    "thumbnail": "http://decafbad.com/blog/images/2011/11/social-media-cyborg.png"
  },
  {
    "comments_archived": true,
    "date": "2007-04-05T05:37:00.000Z",
    "layout": "post",
    "tags": [
      "hacks",
      "rss",
      "atom",
      "xsl",
      "ficlets",
      "scrapers",
      "scraping"
    ],
    "title": "Ficlets enhanced author feed, an XSL scraper hack",
    "wordpress_id": 1046,
    "wordpress_slug": "ficlets-enhanced-author-feed-an-xsl-scraper-hack",
    "wordpress_url": "http://decafbad.com/blog/2007/04/05/ficlets-enhanced-author-feed-an-xsl-scraper-hack",
    "year": "2007",
    "month": "04",
    "day": "05",
    "isDir": false,
    "slug": "ficlets-enhanced-author-feed-an-xsl-scraper-hack",
    "postName": "2007-04-05-ficlets-enhanced-author-feed-an-xsl-scraper-hack",
    "html": "<p>I&#39;ve been trying to get myself serious about writing and even set up a <a href=\"http://decafbad.com/skein/\">personal slush pile for my output</a>.  Then, I found <a href=\"http://ficlets.com/authors/l_m_orchard\">Ficlets</a>, and spewed a few quick starter stories there.  And then... I stopped.  I&#39;m hoping to pick it up again very soon, but I guess that&#39;s the nature of my <a href=\"http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\">serial enthusiasm</a>—it doesn&#39;t just apply to hacking.</p>\n<p>So, here&#39;s something ironic:  I just spent a few hours tonight throwing together a hack for <a href=\"http://ficlets.com/authors/l_m_orchard\">Ficlets</a>.  See, <a href=\"http://ficlets.com/authors/l_m_orchard\">Ficlets</a> runs on original stories, comments, ratings, and sequels and prequels to stories.  You can get an Atom feed of an author&#39;s stories and a feed of comments—but it seems like there&#39;s no way to get notified of prequels and sequels, which are a very gratifying part of the whole shebang.</p>\n<p>With that in mind, check out this RSS feed:</p>\n<ul>\n<li><a href=\"http://decafbad.com/2005/12/FeedMagick/www-bin/ficlets.php?author=l_m_orchard\"><code>http://decafbad.com/2005/12/FeedMagick/www-bin/ficlets.php?author=l_m_orchard</code></a></li>\n</ul>\n<p>That&#39;s a blend of all my stories, comments on my stories, as well as prequels and sequels found for my stories.  Subscribing to that feed will give me updates whenever there&#39;s anything new in all the above.  It&#39;s thrown together using a semi-crazy mix of my <a href=\"http://decafbad.com/trac/wiki/FeedMagick\">FeedMagick</a> package for caching, and some XSL for scraping.  If you&#39;d like a feed like this of your own, just replace <code>l_m_orchard</code> for your own author name in the <code>author</code> parameter.</p>\n<p><strong>Please note, however, that this little service is hosted on my site and may go away at any time for any reason.</strong></p>\n<p>In case you&#39;re interested in what&#39;s under the hood, here&#39;s the quick and dirty XSL that&#39;s behind it:</p>\n<ul>\n<li><a href=\"http://decafbad.com/2007/04/ficlets.xsl\"><code>http://decafbad.com/2007/04/ficlets.xsl</code></a></li>\n</ul>\n<p>This thing&#39;s made possible because the <a href=\"http://ficlets.com/authors/l_m_orchard\">Ficlets</a> feeds are XML, <strong>and so are the XHTML pages happily infested with microformats</strong>.  If they ever go invalid, this scraper breaks.  But, that&#39;s the nature of scrapers, and it works for now.  Oh, and although they provide Atom, this feed is RSS 2.0.  Why?  Because it was easier that way.  I might put some more effort into an Atom feed, but my itch has so far been scratched.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221084356\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://rss-central.net/megalar\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1869681b309d36e59764f51c7f210406&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://rss-central.net/megalar\">megalar</a>\n</div>\n<a href=\"#comment-221084356\" class=\"permalink\"><time datetime=\"2007-04-05T09:31:48\">2007-04-05T09:31:48</time></a>\n</div>\n<div class=\"content\"><p>I had already decided I was gonna grab your FeedMagick source and try to do something with it but this just gives me more incentive as a Ficlets lover. I recently read your thoughts on pipes and feel much the same way =&gt; meh to GUI, especially a buggy one. It seems much more satisfying to just tell php what I want done and watch it go rather than spend 20 minutes fiddling with a silly applet.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084357\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084357\" class=\"permalink\"><time datetime=\"2007-04-05T14:04:06\">2007-04-05T14:04:06</time></a>\n</div>\n<div class=\"content\"><p>@meglar: Well, just to warn ya - FeedMagick needs a <em>lot</em> of work.  :)  I've got ideas for it, but have yet to get back around to it.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084360\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://lawver.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=368732c30e3525fab12f9cd0664b4ba0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://lawver.net\">Kevin Lawver</a>\n</div>\n<a href=\"#comment-221084360\" class=\"permalink\"><time datetime=\"2007-04-05T14:59:37\">2007-04-05T14:59:37</time></a>\n</div>\n<div class=\"content\"><p>That may be the coolest thing ever.  Good job!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084362\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084362\" class=\"permalink\"><time datetime=\"2007-04-05T15:14:00\">2007-04-05T15:14:00</time></a>\n</div>\n<div class=\"content\"><p>@Kevin: One thing that <em>might</em> not be cool is that this XSL hits Ficlets.com once for each story in the feed to pick up the additional info, but I try to cache the feed on my end for about 20 minutes per author...  so hopefully it doesn't put any more stress on your site than I might have done manually in opening all my stories in tabs to check for comments and prequels/sequels.  :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084364\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://lawver.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=368732c30e3525fab12f9cd0664b4ba0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://lawver.net\">Kevin Lawver</a>\n</div>\n<a href=\"#comment-221084364\" class=\"permalink\"><time datetime=\"2007-04-05T15:44:25\">2007-04-05T15:44:25</time></a>\n</div>\n<div class=\"content\"><p>That's fine.  I think we can handle it.  We'll get prequels/sequels added to either the author feed or their own feed in the near future.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084365\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084365\" class=\"permalink\"><time datetime=\"2007-04-05T21:05:26\">2007-04-05T21:05:26</time></a>\n</div>\n<div class=\"content\"><p>@Kevin: Yeah, I think the bare author feed is a good thing to leave alone.  But, a personal author feed with comments and prequels/sequels and possibly notes would be excellent!  You know, basically, notifications of significant events that'd bring me back to the site.</p>\n<p>I'm also thinking it might be neat to gently spider through prequels and sequels on stories to map them out and track progress, but that's just a future hackery idea.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084368\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e5d9a8832bed84d8d713ab0ef953d1af&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Roger Costello</a>\n</div>\n<a href=\"#comment-221084368\" class=\"permalink\"><time datetime=\"2007-04-06T13:54:55\">2007-04-06T13:54:55</time></a>\n</div>\n<div class=\"content\"><p>Is there any way for me to view the documents you are mashing up to generate the resulting RSS document?  I am particularly interested in seeing how Microformats are being mashed up.  Thanks!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084369\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221084369\" class=\"permalink\"><time datetime=\"2007-04-06T14:25:44\">2007-04-06T14:25:44</time></a>\n</div>\n<div class=\"content\"><p>Roger: Sure...  Really, the only things I'm mashing up are the author Atom feed, like mine here:</p>\n<p>http://ficlets.com/feeds/author/l<em>m</em>orchard</p>\n<p>And then, I chase down each story in the feed, like this one:</p>\n<p>http://ficlets.com/stories/1763</p>\n<p>You can view source on a story page and see all the information sprinkled in there - look for 'abbr' tags and class names like 'pubdate' and 'hentry'.  The pages are also valid XML, so they can be manipulated right in XSL.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221084370\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.blurbtree.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=fa30e56b9a686d32cdae390345019928&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.blurbtree.com\">Bill</a>\n</div>\n<a href=\"#comment-221084370\" class=\"permalink\"><time datetime=\"2009-01-28T00:36:02\">2009-01-28T00:36:02</time></a>\n</div>\n<div class=\"content\"><p>I'm sure that many Ficlets fans are sad that Ficlets.com is no more. We are in the process of constructing <a href=\"http://www.blurbtree.com\" rel=\"nofollow\">Blurbtree.com</a> a site that might be helpful for them. It's not a replacement for Ficlets, but it's a clean start and we'll build the site based on the feedback we get from the online community. Please give it a try and let us know what we can do to make it fit your needs. \nYou can also get more information at our <a href=\"http://www.blurbtree.com/faqs.php\" rel=\"nofollow\">Blurbtree FAQ</a>.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "I've been trying to get myself serious about writing and even set up a [personal slush pile for my output](http://decafbad.com/skein/).  Then, I found [Ficlets][], and spewed a few quick starter stories there.  And then... I stopped.  I'm hoping to pick it up again very soon, but I guess that's the nature of my [serial enthusiasm](http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast)—it doesn't just apply to hacking.\r\n\r\nSo, here's something ironic:  I just spent a few hours tonight throwing together a hack for [Ficlets][].  See, [Ficlets][] runs on original stories, comments, ratings, and sequels and prequels to stories.  You can get an Atom feed of an author's stories and a feed of comments—but it seems like there's no way to get notified of prequels and sequels, which are a very gratifying part of the whole shebang.\r\n\r\nWith that in mind, check out this RSS feed:\r\n\r\n   * [`http://decafbad.com/2005/12/FeedMagick/www-bin/ficlets.php?author=l_m_orchard`](http://decafbad.com/2005/12/FeedMagick/www-bin/ficlets.php?author=l_m_orchard)\r\n\r\nThat's a blend of all my stories, comments on my stories, as well as prequels and sequels found for my stories.  Subscribing to that feed will give me updates whenever there's anything new in all the above.  It's thrown together using a semi-crazy mix of my [FeedMagick][] package for caching, and some XSL for scraping.  If you'd like a feed like this of your own, just replace `l_m_orchard` for your own author name in the `author` parameter.\r\n\r\n**Please note, however, that this little service is hosted on my site and may go away at any time for any reason.**\r\n\r\nIn case you're interested in what's under the hood, here's the quick and dirty XSL that's behind it:\r\n\r\n   * [`http://decafbad.com/2007/04/ficlets.xsl`](http://decafbad.com/2007/04/ficlets.xsl)\r\n\r\nThis thing's made possible because the [Ficlets][] feeds are XML, **and so are the XHTML pages happily infested with microformats**.  If they ever go invalid, this scraper breaks.  But, that's the nature of scrapers, and it works for now.  Oh, and although they provide Atom, this feed is RSS 2.0.  Why?  Because it was easier that way.  I might put some more effort into an Atom feed, but my itch has so far been scratched.\r\n\r\n[FeedMagick]: http://decafbad.com/trac/wiki/FeedMagick\r\n[ficlets]: http://ficlets.com/authors/l_m_orchard\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221084356\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://rss-central.net/megalar\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1869681b309d36e59764f51c7f210406&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://rss-central.net/megalar\">megalar</a>\n                </div>\n                <a href=\"#comment-221084356\" class=\"permalink\"><time datetime=\"2007-04-05T09:31:48\">2007-04-05T09:31:48</time></a>\n            </div>\n            <div class=\"content\"><p>I had already decided I was gonna grab your FeedMagick source and try to do something with it but this just gives me more incentive as a Ficlets lover. I recently read your thoughts on pipes and feel much the same way =&gt; meh to GUI, especially a buggy one. It seems much more satisfying to just tell php what I want done and watch it go rather than spend 20 minutes fiddling with a silly applet.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084357\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084357\" class=\"permalink\"><time datetime=\"2007-04-05T14:04:06\">2007-04-05T14:04:06</time></a>\n            </div>\n            <div class=\"content\"><p>@meglar: Well, just to warn ya - FeedMagick needs a <em>lot</em> of work.  :)  I've got ideas for it, but have yet to get back around to it.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084360\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://lawver.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=368732c30e3525fab12f9cd0664b4ba0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://lawver.net\">Kevin Lawver</a>\n                </div>\n                <a href=\"#comment-221084360\" class=\"permalink\"><time datetime=\"2007-04-05T14:59:37\">2007-04-05T14:59:37</time></a>\n            </div>\n            <div class=\"content\"><p>That may be the coolest thing ever.  Good job!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084362\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084362\" class=\"permalink\"><time datetime=\"2007-04-05T15:14:00\">2007-04-05T15:14:00</time></a>\n            </div>\n            <div class=\"content\"><p>@Kevin: One thing that <em>might</em> not be cool is that this XSL hits Ficlets.com once for each story in the feed to pick up the additional info, but I try to cache the feed on my end for about 20 minutes per author...  so hopefully it doesn't put any more stress on your site than I might have done manually in opening all my stories in tabs to check for comments and prequels/sequels.  :)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084364\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://lawver.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=368732c30e3525fab12f9cd0664b4ba0&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://lawver.net\">Kevin Lawver</a>\n                </div>\n                <a href=\"#comment-221084364\" class=\"permalink\"><time datetime=\"2007-04-05T15:44:25\">2007-04-05T15:44:25</time></a>\n            </div>\n            <div class=\"content\"><p>That's fine.  I think we can handle it.  We'll get prequels/sequels added to either the author feed or their own feed in the near future.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084365\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084365\" class=\"permalink\"><time datetime=\"2007-04-05T21:05:26\">2007-04-05T21:05:26</time></a>\n            </div>\n            <div class=\"content\"><p>@Kevin: Yeah, I think the bare author feed is a good thing to leave alone.  But, a personal author feed with comments and prequels/sequels and possibly notes would be excellent!  You know, basically, notifications of significant events that'd bring me back to the site.</p>\n\n<p>I'm also thinking it might be neat to gently spider through prequels and sequels on stories to map them out and track progress, but that's just a future hackery idea.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084368\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e5d9a8832bed84d8d713ab0ef953d1af&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Roger Costello</a>\n                </div>\n                <a href=\"#comment-221084368\" class=\"permalink\"><time datetime=\"2007-04-06T13:54:55\">2007-04-06T13:54:55</time></a>\n            </div>\n            <div class=\"content\"><p>Is there any way for me to view the documents you are mashing up to generate the resulting RSS document?  I am particularly interested in seeing how Microformats are being mashed up.  Thanks!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084369\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221084369\" class=\"permalink\"><time datetime=\"2007-04-06T14:25:44\">2007-04-06T14:25:44</time></a>\n            </div>\n            <div class=\"content\"><p>Roger: Sure...  Really, the only things I'm mashing up are the author Atom feed, like mine here:</p>\n\n<p>http://ficlets.com/feeds/author/l<em>m</em>orchard</p>\n\n<p>And then, I chase down each story in the feed, like this one:</p>\n\n<p>http://ficlets.com/stories/1763</p>\n\n<p>You can view source on a story page and see all the information sprinkled in there - look for 'abbr' tags and class names like 'pubdate' and 'hentry'.  The pages are also valid XML, so they can be manipulated right in XSL.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084370\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.blurbtree.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=fa30e56b9a686d32cdae390345019928&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.blurbtree.com\">Bill</a>\n                </div>\n                <a href=\"#comment-221084370\" class=\"permalink\"><time datetime=\"2009-01-28T00:36:02\">2009-01-28T00:36:02</time></a>\n            </div>\n            <div class=\"content\"><p>I'm sure that many Ficlets fans are sad that Ficlets.com is no more. We are in the process of constructing <a href=\"http://www.blurbtree.com\" rel=\"nofollow\">Blurbtree.com</a> a site that might be helpful for them. It's not a replacement for Ficlets, but it's a clean start and we'll build the site based on the feedback we get from the online community. Please give it a try and let us know what we can do to make it fit your needs. \nYou can also get more information at our <a href=\"http://www.blurbtree.com/faqs.php\" rel=\"nofollow\">Blurbtree FAQ</a>.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/04/04/ficlets-enhanced-author-feed-an-xsl-scraper-hack"
  },
  {
    "comments_archived": true,
    "date": "2006-09-19T16:16:12.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "hacks",
      "gaming",
      "nintendo",
      "ds",
      "homebrew",
      "software"
    ],
    "title": "i'm in the nintendo ds homebrew club now",
    "wordpress_id": 996,
    "wordpress_slug": "im-in-the-nintendo-ds-homebrew-club-now",
    "wordpress_url": "http://decafbad.com/blog/2006/09/19/im-in-the-nintendo-ds-homebrew-club-now",
    "year": "2006",
    "month": "09",
    "day": "19",
    "isDir": false,
    "slug": "im-in-the-nintendo-ds-homebrew-club-now",
    "postName": "2006-09-19-im-in-the-nintendo-ds-homebrew-club-now",
    "html": "<blockquote cite=\"http://www.divineo.com/cgi-bin/div-us/dd-ds-pssc\">Passscard is the perfect flash card boot-up solution for DS LITE & NDS .\nIt is compatible with most types of flash cards including M3, Neo, SC & G6 etc. </blockquote><div class=\"quotesource\">Source: <a href=\"http://www.divineo.com/cgi-bin/div-us/dd-ds-pssc\">Divineo.com - Product Information</a></div>\n\n<p>I&#39;ve just received a <a href=\"http://www.divineo.com/cgi-bin/div-us/dd-ds-pssc\">Passcard 3</a> in the mail.  Nintendo DS homebrew, here I come!  I&#39;m particularly excited about <a href=\"http://nitrotracker.tobw.net/index.php\">NitroTracker</a> and <a href=\"http://scummvm.drunkencoders.com/\">ScummVM</a>.  Though I&#39;ve only got a <a href=\"http://movieadvance.com/\">GBA Movie Player</a> and a 128MB CF flash card from a camera, that seems enough to run most of this stuff so far.  Unfortunately, it just sticks out from the Nintendo DS Lite by an inch or so - almost half the depth of the handheld itself!  I think one of my next purchases may be a more compact and capable <a href=\"http://www.divineo.com/cgi-bin/div-us/dd-ds-suplite.html\">SuperCard MicroSD</a>, which fits flush in the Nintendo DS Lite and accepts MicroSD expansion cards.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221082362\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://foosel.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bc9bc547d634817fe7ca6348119b0eaf&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://foosel.net\">foosel</a>\n</div>\n<a href=\"#comment-221082362\" class=\"permalink\"><time datetime=\"2006-09-24T22:43:08\">2006-09-24T22:43:08</time></a>\n</div>\n<div class=\"content\"><p>Congratulations on the Passcard ;) I got one myself a couple of months ago, including a M3 CF, and playing Monkey Island on the DS rocks ;) I have to warn you though concerning SD based units, there were a couple of issues not so long ago with several homebrew apps (including Scumm), and write-support for SD is afaik still rather new in the standard fat-lib used by homebrew devs. So you might want to make sure that your most beloved or interesting apps will actually work like expected prior to spending loads of money.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221082363\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://twitter.com/adammokan\"><img src=\"http://disqus.com/api/users/avatars/amokan.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://twitter.com/adammokan\">Adam Mokan</a>\n</div>\n<a href=\"#comment-221082363\" class=\"permalink\"><time datetime=\"2006-09-28T04:21:30\">2006-09-28T04:21:30</time></a>\n</div>\n<div class=\"content\"><p>How does the Passcard 3 fit in the DS? I've heard that its a real tight fit and you really have to force it to \"click\".</p>\n<p>I'm getting ready to break down and buy some homebrew stuff for mine.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://www.divineo.com/cgi-bin/div-us/dd-ds-pssc\">Passscard is the perfect flash card boot-up solution for DS LITE & NDS .\r\nIt is compatible with most types of flash cards including M3, Neo, SC & G6 etc. </blockquote><div class=\"quotesource\">Source: <a href=\"http://www.divineo.com/cgi-bin/div-us/dd-ds-pssc\">Divineo.com - Product Information</a></div>\r\n\r\nI've just received a [Passcard 3][pc3] in the mail.  Nintendo DS homebrew, here I come!  I'm particularly excited about [NitroTracker][nt] and [ScummVM][svm].  Though I've only got a [GBA Movie Player][gbamp] and a 128MB CF flash card from a camera, that seems enough to run most of this stuff so far.  Unfortunately, it just sticks out from the Nintendo DS Lite by an inch or so - almost half the depth of the handheld itself!  I think one of my next purchases may be a more compact and capable [SuperCard MicroSD][sc], which fits flush in the Nintendo DS Lite and accepts MicroSD expansion cards.\r\n\r\n[sc]: http://www.divineo.com/cgi-bin/div-us/dd-ds-suplite.html\r\n[gbamp]: http://movieadvance.com/\r\n[pc3]: http://www.divineo.com/cgi-bin/div-us/dd-ds-pssc\r\n[nt]: http://nitrotracker.tobw.net/index.php\r\n[svm]: http://scummvm.drunkencoders.com/\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221082362\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://foosel.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bc9bc547d634817fe7ca6348119b0eaf&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://foosel.net\">foosel</a>\n                </div>\n                <a href=\"#comment-221082362\" class=\"permalink\"><time datetime=\"2006-09-24T22:43:08\">2006-09-24T22:43:08</time></a>\n            </div>\n            <div class=\"content\"><p>Congratulations on the Passcard ;) I got one myself a couple of months ago, including a M3 CF, and playing Monkey Island on the DS rocks ;) I have to warn you though concerning SD based units, there were a couple of issues not so long ago with several homebrew apps (including Scumm), and write-support for SD is afaik still rather new in the standard fat-lib used by homebrew devs. So you might want to make sure that your most beloved or interesting apps will actually work like expected prior to spending loads of money.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221082363\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://twitter.com/adammokan\"><img src=\"http://disqus.com/api/users/avatars/amokan.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://twitter.com/adammokan\">Adam Mokan</a>\n                </div>\n                <a href=\"#comment-221082363\" class=\"permalink\"><time datetime=\"2006-09-28T04:21:30\">2006-09-28T04:21:30</time></a>\n            </div>\n            <div class=\"content\"><p>How does the Passcard 3 fit in the DS? I've heard that its a real tight fit and you really have to force it to \"click\".</p>\n\n<p>I'm getting ready to break down and buy some homebrew stuff for mine.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/09/19/im-in-the-nintendo-ds-homebrew-club-now"
  },
  {
    "comments_archived": true,
    "date": "2006-08-16T13:12:07.000Z",
    "layout": "post",
    "tags": [
      "delicious",
      "book",
      "hacks",
      "ajax",
      "json",
      "webdev"
    ],
    "title": "Ajaxitagging",
    "wordpress_id": 971,
    "wordpress_slug": "ajaxitagging",
    "wordpress_url": "http://decafbad.com/blog/2006/08/16/ajaxitagging",
    "year": "2006",
    "month": "08",
    "day": "16",
    "isDir": false,
    "slug": "ajaxitagging",
    "postName": "2006-08-16-ajaxitagging",
    "html": "<blockquote cite=\"http://adactio.com/journal/1162\">Ever since I switched over to a new CMS back in February, I’ve been tagging all my journal entries. Until now, I haven’t been doing anything with those tags apart from exposing them in category elements in my RSS feed. Now that I’ve got a good head of steam going with my tags, I’ve decided to play around with them a bit.</blockquote><div class=\"quotesource\">Source: <a href=\"http://adactio.com/journal/1162\">Adactio: Journal - Ajaxitagging</a></div>\n\n<p><a href=\"http://www.amazon.com/exec/obidos/ASIN/0470037857/0xdecafbad01-20/104-2713105-4524705?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2\">Book</a> pimping time:  In <a href=\"http://www.amazon.com/exec/obidos/ASIN/0470037857/0xdecafbad01-20/104-2713105-4524705?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2\">Hacking del.icio.us</a>, I&#39;ve got something not entirely unlike the above-linked hack.  (Which, by the way, is good work!)  Mine is much more basic, though - with less microformat, progress bar, and yellow fadey goodness.  And, instead of AJAX, my hack uses <a href=\"http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/\">JSONP</a>.  The Related Links hack in Chapter 9 of <a href=\"http://www.amazon.com/exec/obidos/ASIN/0470037857/0xdecafbad01-20/104-2713105-4524705?%5Fencoding=UTF8&amp;camp=1789&amp;link%5Fcode=xm2\">the book</a> shows you how to include lists of the last few bookmarks you&#39;ve posted under each tag / category / keyword used in a blog post.</p>\n",
    "body": "<blockquote cite=\"http://adactio.com/journal/1162\">Ever since I switched over to a new CMS back in February, I’ve been tagging all my journal entries. Until now, I haven’t been doing anything with those tags apart from exposing them in category elements in my RSS feed. Now that I’ve got a good head of steam going with my tags, I’ve decided to play around with them a bit.</blockquote><div class=\"quotesource\">Source: <a href=\"http://adactio.com/journal/1162\">Adactio: Journal - Ajaxitagging</a></div>\r\n\r\n[Book][book] pimping time:  In [Hacking del.icio.us][book], I've got something not entirely unlike the above-linked hack.  (Which, by the way, is good work!)  Mine is much more basic, though - with less microformat, progress bar, and yellow fadey goodness.  And, instead of AJAX, my hack uses [JSONP][].  The Related Links hack in Chapter 9 of [the book][book] shows you how to include lists of the last few bookmarks you've posted under each tag / category / keyword used in a blog post.\r\n\r\n[jsonp]: http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/\r\n[book]: http://www.amazon.com/exec/obidos/ASIN/0470037857/0xdecafbad01-20/104-2713105-4524705?%5Fencoding=UTF8&camp=1789&link%5Fcode=xm2\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/08/16/ajaxitagging"
  },
  {
    "comments_archived": true,
    "date": "2005-12-15T21:55:58.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "hacks",
      "fun",
      "nifty",
      "fax"
    ],
    "title": "Stupid fun with fax machines",
    "wordpress_id": 800,
    "wordpress_slug": "stupid-fun-with-fax-machines",
    "wordpress_url": "http://decafbad.com/blog/?p=800",
    "year": "2005",
    "month": "12",
    "day": "15",
    "isDir": false,
    "slug": "stupid-fun-with-fax-machines",
    "postName": "2005-12-15-stupid-fun-with-fax-machines",
    "html": "<blockquote cite=\"http://faxtoy.net/\">Random Stuff Sent From Your Fax Machine<br />Fax something interesting to 1-510-545-0990</blockquote>\n<small style=\"text-align:right; display:block\">Source: <a href=\"http://faxtoy.net/\">Fax Toy - Random Stuff You Fax To Us</a></small>\n\n<p>It&#39;s fun to fax anonymously!  And it&#39;s fun to have <a href=\"http://faxtoy.net/page/fax-iBwDqh\">yet another opportunity for meta</a>.  First person to fax their ass from the Christmas party loses.</p>\n<!-- tags: fax fun nifty hacks -->\n\n",
    "body": "<blockquote cite=\"http://faxtoy.net/\">Random Stuff Sent From Your Fax Machine<br />Fax something interesting to 1-510-545-0990</blockquote>\r\n<small style=\"text-align:right; display:block\">Source: <a href=\"http://faxtoy.net/\">Fax Toy - Random Stuff You Fax To Us</a></small>\r\n\r\nIt's fun to fax anonymously!  And it's fun to have [yet another opportunity for meta][meta].  First person to fax their ass from the Christmas party loses.\r\n\r\n<!-- tags: fax fun nifty hacks -->\r\n\r\n[meta]: http://faxtoy.net/page/fax-iBwDqh\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/12/15/stupid-fun-with-fax-machines"
  },
  {
    "comments_archived": true,
    "date": "2005-11-03T18:29:12.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "hacks",
      "yahoo",
      "ipod",
      "programming",
      "maps"
    ],
    "title": "Yahoo for stalking iPods in the hands of couriers",
    "wordpress_id": 768,
    "wordpress_slug": "yahoo-for-stalking-ipods-in-the-hands-of-couriers",
    "wordpress_url": "http://decafbad.com/blog/?p=768",
    "year": "2005",
    "month": "11",
    "day": "03",
    "isDir": false,
    "slug": "yahoo-for-stalking-ipods-in-the-hands-of-couriers",
    "postName": "2005-11-03-yahoo-for-stalking-ipods-in-the-hands-of-couriers",
    "html": "<p>If the new <a href=\"http://maps.yahoo.com/beta/\">Yahoo! Maps</a> were <em>really</em> cool, they&#39;d&#39;ve already done a mashup with <a href=\"http://track.dhl-usa.com/\">DHL</a> to let me obsessively stalk the courier in whose truck my returning iPod repair currently rests.  </p>\n<p>Come on, get with the program!  When we&#39;ve got <a href=\"http://www.garmin.com/products/forerunner201/\">GPS watches</a>, &quot;<code>Status: With delivery courier / Location: (blank)</code>&quot; is no way to track a package!  In the meantime, my <a href=\"http://www.randsinrepose.com/archives/2005/11/02/repetitive_information_injury.html\">repetitive information injury</a> is flaring up as I refresh, refresh, refresh, refresh...</p>\n<!-- tags: yahoo hacks programming maps ipod -->\n",
    "body": "If the new [Yahoo! Maps][ym] were *really* cool, they'd've already done a mashup with [DHL][] to let me obsessively stalk the courier in whose truck my returning iPod repair currently rests.  \r\n\r\nCome on, get with the program!  When we've got [GPS watches][gw], \"`Status: With delivery courier / Location: (blank)`\" is no way to track a package!  In the meantime, my [repetitive information injury][rii] is flaring up as I refresh, refresh, refresh, refresh...\r\n\r\n[rii]: http://www.randsinrepose.com/archives/2005/11/02/repetitive_information_injury.html\r\n[gw]: http://www.garmin.com/products/forerunner201/\r\n[dhl]: http://track.dhl-usa.com/\r\n[ym]: http://maps.yahoo.com/beta/\r\n\r\n<!-- tags: yahoo hacks programming maps ipod -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/11/03/yahoo-for-stalking-ipods-in-the-hands-of-couriers"
  },
  {
    "comments_archived": true,
    "date": "2005-10-21T18:05:54.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "hacks",
      "rss",
      "syndication",
      "atom",
      "apple",
      "ipod",
      "podcasting",
      "xbox",
      "video",
      "vidcasting"
    ],
    "title": "Could an iPod and AV cable fit in a DVD case?",
    "wordpress_id": 742,
    "wordpress_slug": "could-an-ipod-and-av-cable-fit-in-a-dvd-case",
    "wordpress_url": "http://decafbad.com/blog/?p=742",
    "year": "2005",
    "month": "10",
    "day": "21",
    "isDir": false,
    "slug": "could-an-ipod-and-av-cable-fit-in-a-dvd-case",
    "postName": "2005-10-21-could-an-ipod-and-av-cable-fit-in-a-dvd-case",
    "html": "<blockquote cite=\"http://www.russellbeattie.com/notebook/1008657.html\">Being able to listen to audio while in the “natural” places you listen to audio (in the car, while walking/running, on the couch, etc.) is what accelerated audio Podcasts to the phenomenon it is today.  Now that there is a way to view video the same way ... that’s going to accelerate that new type of user generated content as well. I’m positive. It’s a no brainer.</blockquote>\n<small style=\"text-align:right; display:block\">Source: <a href=\"http://www.russellbeattie.com/notebook/1008657.html\">Russell Beattie Notebook » My New iPod: Video Podcasting Is Going to Be BIG</a></small>\n\n<p>I&#39;ve been gradually easing into subscribing to vidcast feeds, starting to find some early greats out there like <a href=\"http://www.rocketboom.com/vlog/\">RocketBoom</a>, <a href=\"http://www.commandn.net/\">Command-N</a>, and <a href=\"http://openalpha.tv\">OpenAlpha</a>.  I&#39;ve also started hacking together feeds for <a href=\"http://decafbad.com/blog/2005/10/13/internet-tv-wheres-the-feed\">great online video shows which lack feeds</a>.  And then, there&#39;s the occasional private hack I&#39;ve done to record shows with a capture card or help catch up on TV shows I find on Usenet.  </p>\n<p>To watch all of these things in the living room, I use <a href=\"http://www.xboxmediacenter.com/\">Xbox Media Center</a> on my modded Xbox, networked to a file server in the basement.  However, there are probably very few other people on the planet who&#39;d bother setting up a rig like mine.  So the combination of iTunes loading feed-delivered video enclosures onto an iPod equipped with an AV cable and a remote sounds like a genius combination for really jump starting the next phase of the vidcasting rise.</p>\n<!-- tags: apple ipod video syndication rss atom podcasting vidcasting hacks xbox -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086753\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://rasterweb.net/raster/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=db0fab74bcb564ebb09295498b892fb6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://rasterweb.net/raster/\">Pete Prodoehl</a>\n</div>\n<a href=\"#comment-221086753\" class=\"permalink\"><time datetime=\"2005-10-21T19:27:21\">2005-10-21T19:27:21</time></a>\n</div>\n<div class=\"content\"><p>I really wish I had a enough spare parts of bucks lying around to build a MythTV box, because I could create quite a freaking videoblog aggregating machine out of it, and view it all on the big screen TV... Someday... Someday...</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086754\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221086754\" class=\"permalink\"><time datetime=\"2005-10-21T20:29:08\">2005-10-21T20:29:08</time></a>\n</div>\n<div class=\"content\"><p>Pete, well, I'm not doing all that bad with just an NSLU2, a 160 GB drive, and an Xbox.  :)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086755\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.slackorama.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15b474c86cd73c2d12c1d77af11c1d8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.slackorama.com/\">Seth Mason</a>\n</div>\n<a href=\"#comment-221086755\" class=\"permalink\"><time datetime=\"2005-10-21T20:59:13\">2005-10-21T20:59:13</time></a>\n</div>\n<div class=\"content\"><p>Thanks for the tip about Xbox Media Center.  I'll have to check that out.</p>\n<p>How did you mod your Xbox?  Or did I miss a post about it?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086756\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221086756\" class=\"permalink\"><time datetime=\"2005-10-22T01:43:09\">2005-10-22T01:43:09</time></a>\n</div>\n<div class=\"content\"><p>Seth: Oh, I just went over to <a href=\"http://www.modchipman.com\" rel=\"nofollow\">ModChipMan.com</a> and picked up a <a href=\"http://www.modchipman.com/xecuter-26-ce-p-120.html\" rel=\"nofollow\">Xecuter 2.6</a> and soldered it in myself.  I upgraded the internal HD with one from a junker PC.  Very cool to dump all my games onto the drive and leave them squirreled away in their cases.  And then there's all the homebrew stuff like XBMC...</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086758\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.slackorama.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15b474c86cd73c2d12c1d77af11c1d8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.slackorama.com\">Seth Mason</a>\n</div>\n<a href=\"#comment-221086758\" class=\"permalink\"><time datetime=\"2005-10-23T03:59:13\">2005-10-23T03:59:13</time></a>\n</div>\n<div class=\"content\"><p>Thanks for the lowdown.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086759\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://stephanierose.hondaelement.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=209e3adbef289391174f1a3a08af7c8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://stephanierose.hondaelement.org/\">Steph_B</a>\n</div>\n<a href=\"#comment-221086759\" class=\"permalink\"><time datetime=\"2005-10-25T18:48:47\">2005-10-25T18:48:47</time></a>\n</div>\n<div class=\"content\"><p>I wanna thanks for the tip about Xbox Media Center too. It's very useful information for me because I'm going to create videoblog instead of my homepage.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://www.russellbeattie.com/notebook/1008657.html\">Being able to listen to audio while in the “natural” places you listen to audio (in the car, while walking/running, on the couch, etc.) is what accelerated audio Podcasts to the phenomenon it is today.  Now that there is a way to view video the same way ... that’s going to accelerate that new type of user generated content as well. I’m positive. It’s a no brainer.</blockquote>\r\n<small style=\"text-align:right; display:block\">Source: <a href=\"http://www.russellbeattie.com/notebook/1008657.html\">Russell Beattie Notebook » My New iPod: Video Podcasting Is Going to Be BIG</a></small>\r\n\r\nI've been gradually easing into subscribing to vidcast feeds, starting to find some early greats out there like [RocketBoom][rb], [Command-N][cn], and [OpenAlpha][oa].  I've also started hacking together feeds for [great online video shows which lack feeds][shows].  And then, there's the occasional private hack I've done to record shows with a capture card or help catch up on TV shows I find on Usenet.  \r\n\r\nTo watch all of these things in the living room, I use [Xbox Media Center][xbmc] on my modded Xbox, networked to a file server in the basement.  However, there are probably very few other people on the planet who'd bother setting up a rig like mine.  So the combination of iTunes loading feed-delivered video enclosures onto an iPod equipped with an AV cable and a remote sounds like a genius combination for really jump starting the next phase of the vidcasting rise.\r\n\r\n<!-- tags: apple ipod video syndication rss atom podcasting vidcasting hacks xbox -->\r\n\r\n[xbmc]: http://www.xboxmediacenter.com/\r\n[rb]: http://www.rocketboom.com/vlog/\r\n[cn]: http://www.commandn.net/\r\n[oa]: http://openalpha.tv\r\n[shows]: http://decafbad.com/blog/2005/10/13/internet-tv-wheres-the-feed\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221086753\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://rasterweb.net/raster/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=db0fab74bcb564ebb09295498b892fb6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://rasterweb.net/raster/\">Pete Prodoehl</a>\r\n                </div>\r\n                <a href=\"#comment-221086753\" class=\"permalink\"><time datetime=\"2005-10-21T19:27:21\">2005-10-21T19:27:21</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I really wish I had a enough spare parts of bucks lying around to build a MythTV box, because I could create quite a freaking videoblog aggregating machine out of it, and view it all on the big screen TV... Someday... Someday...</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086754\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221086754\" class=\"permalink\"><time datetime=\"2005-10-21T20:29:08\">2005-10-21T20:29:08</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Pete, well, I'm not doing all that bad with just an NSLU2, a 160 GB drive, and an Xbox.  :)</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086755\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.slackorama.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15b474c86cd73c2d12c1d77af11c1d8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.slackorama.com/\">Seth Mason</a>\r\n                </div>\r\n                <a href=\"#comment-221086755\" class=\"permalink\"><time datetime=\"2005-10-21T20:59:13\">2005-10-21T20:59:13</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Thanks for the tip about Xbox Media Center.  I'll have to check that out.</p>\r\n\r\n<p>How did you mod your Xbox?  Or did I miss a post about it?</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086756\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221086756\" class=\"permalink\"><time datetime=\"2005-10-22T01:43:09\">2005-10-22T01:43:09</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Seth: Oh, I just went over to <a href=\"http://www.modchipman.com\" rel=\"nofollow\">ModChipMan.com</a> and picked up a <a href=\"http://www.modchipman.com/xecuter-26-ce-p-120.html\" rel=\"nofollow\">Xecuter 2.6</a> and soldered it in myself.  I upgraded the internal HD with one from a junker PC.  Very cool to dump all my games onto the drive and leave them squirreled away in their cases.  And then there's all the homebrew stuff like XBMC...</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086758\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.slackorama.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=15b474c86cd73c2d12c1d77af11c1d8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.slackorama.com\">Seth Mason</a>\r\n                </div>\r\n                <a href=\"#comment-221086758\" class=\"permalink\"><time datetime=\"2005-10-23T03:59:13\">2005-10-23T03:59:13</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Thanks for the lowdown.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221086759\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://stephanierose.hondaelement.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=209e3adbef289391174f1a3a08af7c8a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://stephanierose.hondaelement.org/\">Steph_B</a>\r\n                </div>\r\n                <a href=\"#comment-221086759\" class=\"permalink\"><time datetime=\"2005-10-25T18:48:47\">2005-10-25T18:48:47</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I wanna thanks for the tip about Xbox Media Center too. It's very useful information for me because I'm going to create videoblog instead of my homepage.</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/10/21/could-an-ipod-and-av-cable-fit-in-a-dvd-case"
  },
  {
    "comments_archived": true,
    "date": "2005-10-05T11:14:25.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "hacks",
      "webdev",
      "nifty",
      "http",
      "proxy",
      "ruby"
    ],
    "title": "RedHanded Â» Announcing the MouseHole Proxy",
    "wordpress_id": 714,
    "wordpress_slug": "redhanded-%c2%bb-announcing-the-mousehole-proxy",
    "wordpress_url": "http://decafbad.com/blog/?p=714",
    "year": "2005",
    "month": "10",
    "day": "05",
    "isDir": false,
    "slug": "redhanded-%c2%bb-announcing-the-mousehole-proxy",
    "postName": "2005-10-05-redhanded-%c2%bb-announcing-the-mousehole-proxy",
    "html": "<blockquote cite=\"http://redhanded.hobix.com/inspect/theMouseholeProxy.html\">MouseHole is a scriptable proxy. Like Greasemonkey, but scripts are in Ruby.</blockquote><small style=\"text-align:right; display:block\">Source: <a href=\"http://redhanded.hobix.com/inspect/theMouseholeProxy.html\">RedHanded » Announcing the MouseHole Proxy</a></small><br />\n\n<p>MouseHole looks pretty freakin&#39; sweet.  It&#39;s doing one of the things I never got around to making <a href=\"http://decafbad.com/trac/wiki/AgentFrank\">AgentFrank</a> do.  Every now and then I get an itch to revisit that project (or, more likely, its <a href=\"http://decafbad.com/trac/wiki/DbProxy\">Pythonic sibling</a>).  </p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086801\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.screwtheman.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=52c00253a2327f7d1d351fdd259405c1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.screwtheman.com\">Paul</a>\n</div>\n<a href=\"#comment-221086801\" class=\"permalink\"><time datetime=\"2005-10-05T13:49:56\">2005-10-05T13:49:56</time></a>\n</div>\n<div class=\"content\"><p>Hey Mr. Hacking RSS ,</p>\n<p>You may want to change the relative &lt;href=\"af\"&gt; because it doesn't resolve very well from inside an RSS reader (like Bloglines).</p>\n<p>;oD</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221086802\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221086802\" class=\"permalink\"><time datetime=\"2005-10-05T14:13:20\">2005-10-05T14:13:20</time></a>\n</div>\n<div class=\"content\"><p>@Paul: D'oht.  That wasn't supposed to be an <code>&lt;a href=\"af\"&gt;</code>.  </p>\n<p>Looks like I mixed up my <code>()</code>'s with my <code>[]</code>'s in Markdown when making the link reference.  Should be fixed now!</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://redhanded.hobix.com/inspect/theMouseholeProxy.html\">MouseHole is a scriptable proxy. Like Greasemonkey, but scripts are in Ruby.</blockquote><small style=\"text-align:right; display:block\">Source: <a href=\"http://redhanded.hobix.com/inspect/theMouseholeProxy.html\">RedHanded » Announcing the MouseHole Proxy</a></small><br />\r\n\r\nMouseHole looks pretty freakin' sweet.  It's doing one of the things I never got around to making [AgentFrank][af] do.  Every now and then I get an itch to revisit that project (or, more likely, its [Pythonic sibling][dp]).  \r\n\r\n[af]: http://decafbad.com/trac/wiki/AgentFrank\r\n[dp]: http://decafbad.com/trac/wiki/DbProxy\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221086801\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.screwtheman.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=52c00253a2327f7d1d351fdd259405c1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.screwtheman.com\">Paul</a>\n                </div>\n                <a href=\"#comment-221086801\" class=\"permalink\"><time datetime=\"2005-10-05T13:49:56\">2005-10-05T13:49:56</time></a>\n            </div>\n            <div class=\"content\"><p>Hey Mr. Hacking RSS ,</p>\n\n<p>You may want to change the relative &lt;href=\"af\"&gt; because it doesn't resolve very well from inside an RSS reader (like Bloglines).</p>\n\n<p>;oD</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221086802\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221086802\" class=\"permalink\"><time datetime=\"2005-10-05T14:13:20\">2005-10-05T14:13:20</time></a>\n            </div>\n            <div class=\"content\"><p>@Paul: D'oht.  That wasn't supposed to be an <code>&lt;a href=\"af\"&gt;</code>.  </p>\n\n<p>Looks like I mixed up my <code>()</code>'s with my <code>[]</code>'s in Markdown when making the link reference.  Should be fixed now!</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/10/05/redhanded-%c2%bb-announcing-the-mousehole-proxy"
  },
  {
    "comments_archived": true,
    "date": "2004-12-23T05:58:41.000Z",
    "excerpt": "So, in the spirit of pico-projects, I've started building that address book application I mentioned awhile ago and I want to start writing about it as I go.",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "Building an Address Book as a Modern Web App",
    "wordpress_id": 580,
    "wordpress_slug": "abook1",
    "wordpress_url": "http://www.decafbad.com/blog/?p=580",
    "year": "2004",
    "month": "12",
    "day": "23",
    "isDir": false,
    "slug": "abook1",
    "postName": "2004-12-23-abook1",
    "html": "<img src=\"http://www.decafbad.com/2004/12/abook-architecture.jpg\" align=\"right\" />\n\n<p>So, in the spirit of <a href=\"http://www.decafbad.com/blog/2004/11/30/picoprojects_and_trepanation\">pico-projects</a>, I&#39;ve started building <a href=\"http://www.decafbad.com/blog/2004/11/30/nextgenwebapps\">that address book application</a> I mentioned awhile ago and I want to start writing about it as I go.</p>\n<p>First off, hopefully you&#39;ll notice the quick diagram I threw together in OmniGraffle.  This is a sort of rough sketch of the loosely-joined architecture I want to explore with this thing.  </p>\n<ul>\n<li><em>Data</em>: This is where address book entries live.</li>\n<li><em>Model</em>: A set of objects encapsulating the data, this is how address book entries will be accessed.</li>\n<li><em>REST API</em>: Model objects exposed as resources identified by URI, serialized and deserialized as XML, and manipulated by GET / PUT / POST / DELETE methods.</li>\n<li><em>XSLT Filter</em>: XML data produced by REST API calls can be first passed through XSL at a given URL before being served up as a response.  </li>\n<li><em>HTML, CSS, JavaScript</em>: Thanks to the XSLT filter layer, the XML vocabulary used to describe address book entries can be transformed into user interface presentation.</li>\n<li><em>HTTP</em>: Everything happens via HTTP...</li>\n<li><em>Web Browser Client</em>: ...and everything is viewed in a web browser.</li>\n</ul>\n<p>Now, I call this a loosely-joined architecture because I want to stress that you should be able to swap out just about any part of this whenever you want.  </p>\n<p>Want the <em>Data</em> to be in MySQL?  Fine.  Want it to be in flat files?  Fine.  Just make sure the <em>Model</em> can cope while maintaining a consistent interface for the <em>REST API*.  Want to change the user interface in the browser?  Great-- ideally, all you have to do is change some XSLT files.  I&#39;m writing everything from the *XSLT Filter</em> down to the <em>Model</em> in Python.  Don&#39;t like that?  Fine.  Rewrite it all in Perl, and hopefully everything from the XSLT up to the browser will still be useful to you.</p>\n<p>At some point, you might even want to ditch the browser for a native desktop client.  Fabulous! Just ignore everything past the <em>REST API</em> and <em>HTTP</em>, don&#39;t use any XSLT in the <em>Filter</em>, and use the API and XML directly.</p>\n<p>I don&#39;t think any of this is particularly revolutionary-- although I thought it was when I first saw Amazon Web Services doing some of this, and I hope to throw a little GMail in as well.  I hope that this will all be useful as I muddle through explaining what I&#39;m doing.  In the meantime, you can see me getting the stage set as I start checking things into my Subversion repository over here:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/svn/trunk/hacks/abook/\">http://www.decafbad.com/svn/trunk/hacks/abook/</a><!--more-->\nshortname=abook1</li>\n</ul>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221085892\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://trikuare.cx/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7d3d1e46aae8ca19855a6026d404b91d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://trikuare.cx/\">fluffy</a>\n</div>\n<a href=\"#comment-221085892\" class=\"permalink\"><time datetime=\"2004-12-23T07:35:40\">2004-12-23T07:35:40</time></a>\n</div>\n<div class=\"content\">Don't forget that with XSLT you could also rewrite it to SyncML and vCard and so on, so you could also sync it with external devices and iSync (assuming Apple finally opens up a third-party conduit system in Tiger, preferably one which doesn't require .Mac to function).</div>\n</li>\n<li class=\"comment\" id=\"comment-221085894\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://eliot.landrum.cx\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8b8f5370253bd0e0030154baa15785ed&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://eliot.landrum.cx\">eliot</a>\n</div>\n<a href=\"#comment-221085894\" class=\"permalink\"><time datetime=\"2004-12-23T09:12:34\">2004-12-23T09:12:34</time></a>\n</div>\n<div class=\"content\">I'm looking forward to what becomes of this little app. Address book apps seem to all be severely lacking (with the possible exception of OS X's app) and need some fresh thinking. Making the components flexible could be a great way for some change to come about. \nKeep us posted!</div>\n</li>\n<li class=\"comment\" id=\"comment-221085895\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com/\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221085895\" class=\"permalink\"><time datetime=\"2004-12-23T12:41:13\">2004-12-23T12:41:13</time></a>\n</div>\n<div class=\"content\">Well, hopefully it's not too disappointing, but this address book app will be pretty anemic in terms of use as a serious app.  Implementing an address book is just an excuse to run through the various technologies involved.\nHowever, there's nothing stopping anyone (including me) from enhancing the thing when I'm done and making it into a serious offering with vCard support and such.</div>\n</li>\n<li class=\"comment\" id=\"comment-221085896\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n</div>\n<a href=\"#comment-221085896\" class=\"permalink\"><time datetime=\"2004-12-27T12:23:46\">2004-12-27T12:23:46</time></a>\n</div>\n<div class=\"content\">(Hmm, posted last week but it never showed up...)\nWhat are you thinking in terms of having this data store actually used by, say, your email client?\nMake it look like an LDAP server, maybe?</div>\n</li>\n<li class=\"comment\" id=\"comment-221085898\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.chuckknows.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6cede7ba6ff803837ba2da9cc6e466b6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.chuckknows.com\">Chuck Conway</a>\n</div>\n<a href=\"#comment-221085898\" class=\"permalink\"><time datetime=\"2005-01-02T20:37:00\">2005-01-02T20:37:00</time></a>\n</div>\n<div class=\"content\">How Funny! I've been thinking about doing the same thing.\nThe only difference is I was thinking about doing address book, bookmarks and my RSS feeds. \nThose are the things I miss the most when I am away.</div>\n</li>\n<li class=\"comment\" id=\"comment-221085900\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.worldwide-sources.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=73de6d1640f8cae902843f4a753bcaee&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.worldwide-sources.com\">William</a>\n</div>\n<a href=\"#comment-221085900\" class=\"permalink\"><time datetime=\"2005-03-05T05:16:08\">2005-03-05T05:16:08</time></a>\n</div>\n<div class=\"content\">I'm curious to see where this little app is going its still needs more work</div>\n</li>\n<li class=\"comment\" id=\"comment-221085903\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n</div>\n<a href=\"#comment-221085903\" class=\"permalink\"><time datetime=\"2006-08-26T13:37:35\">2006-08-26T13:37:35</time></a>\n</div>\n<div class=\"content\"><p>I see you working with Tarawa in there. Did you like it? Is it being worked on at all?</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<img src=\"http://www.decafbad.com/2004/12/abook-architecture.jpg\" align=\"right\" />\r\n\r\nSo, in the spirit of [pico-projects][pp], I've started building [that address book application][ab] I mentioned awhile ago and I want to start writing about it as I go.\r\n\r\n[pp]: http://www.decafbad.com/blog/2004/11/30/picoprojects_and_trepanation\r\n[ab]: http://www.decafbad.com/blog/2004/11/30/nextgenwebapps\r\n\r\nFirst off, hopefully you'll notice the quick diagram I threw together in OmniGraffle.  This is a sort of rough sketch of the loosely-joined architecture I want to explore with this thing.  \r\n\r\n* *Data*: This is where address book entries live.\r\n* *Model*: A set of objects encapsulating the data, this is how address book entries will be accessed.\r\n* *REST API*: Model objects exposed as resources identified by URI, serialized and deserialized as XML, and manipulated by GET / PUT / POST / DELETE methods.\r\n* *XSLT Filter*: XML data produced by REST API calls can be first passed through XSL at a given URL before being served up as a response.  \r\n* *HTML, CSS, JavaScript*: Thanks to the XSLT filter layer, the XML vocabulary used to describe address book entries can be transformed into user interface presentation.\r\n* *HTTP*: Everything happens via HTTP...\r\n* *Web Browser Client*: ...and everything is viewed in a web browser.\r\n\r\nNow, I call this a loosely-joined architecture because I want to stress that you should be able to swap out just about any part of this whenever you want.  \r\n\r\nWant the *Data* to be in MySQL?  Fine.  Want it to be in flat files?  Fine.  Just make sure the *Model* can cope while maintaining a consistent interface for the *REST API*.  Want to change the user interface in the browser?  Great-- ideally, all you have to do is change some XSLT files.  I'm writing everything from the *XSLT Filter* down to the *Model* in Python.  Don't like that?  Fine.  Rewrite it all in Perl, and hopefully everything from the XSLT up to the browser will still be useful to you.\r\n\r\nAt some point, you might even want to ditch the browser for a native desktop client.  Fabulous! Just ignore everything past the *REST API* and *HTTP*, don't use any XSLT in the *Filter*, and use the API and XML directly.\r\n\r\nI don't think any of this is particularly revolutionary-- although I thought it was when I first saw Amazon Web Services doing some of this, and I hope to throw a little GMail in as well.  I hope that this will all be useful as I muddle through explaining what I'm doing.  In the meantime, you can see me getting the stage set as I start checking things into my Subversion repository over here:\r\n\r\n* [http://www.decafbad.com/svn/trunk/hacks/abook/](http://www.decafbad.com/svn/trunk/hacks/abook/)\r\n<!--more-->\r\nshortname=abook1\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221085892\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://trikuare.cx/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7d3d1e46aae8ca19855a6026d404b91d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://trikuare.cx/\">fluffy</a>\r\n                </div>\r\n                <a href=\"#comment-221085892\" class=\"permalink\"><time datetime=\"2004-12-23T07:35:40\">2004-12-23T07:35:40</time></a>\r\n            </div>\r\n            <div class=\"content\">Don't forget that with XSLT you could also rewrite it to SyncML and vCard and so on, so you could also sync it with external devices and iSync (assuming Apple finally opens up a third-party conduit system in Tiger, preferably one which doesn't require .Mac to function).</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221085894\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://eliot.landrum.cx\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8b8f5370253bd0e0030154baa15785ed&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://eliot.landrum.cx\">eliot</a>\r\n                </div>\r\n                <a href=\"#comment-221085894\" class=\"permalink\"><time datetime=\"2004-12-23T09:12:34\">2004-12-23T09:12:34</time></a>\r\n            </div>\r\n            <div class=\"content\">I'm looking forward to what becomes of this little app. Address book apps seem to all be severely lacking (with the possible exception of OS X's app) and need some fresh thinking. Making the components flexible could be a great way for some change to come about. \r\n\r\nKeep us posted!</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221085895\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.decafbad.com/\">l.m.orchard</a>\r\n                </div>\r\n                <a href=\"#comment-221085895\" class=\"permalink\"><time datetime=\"2004-12-23T12:41:13\">2004-12-23T12:41:13</time></a>\r\n            </div>\r\n            <div class=\"content\">Well, hopefully it's not too disappointing, but this address book app will be pretty anemic in terms of use as a serious app.  Implementing an address book is just an excuse to run through the various technologies involved.\r\n\r\nHowever, there's nothing stopping anyone (including me) from enhancing the thing when I'm done and making it into a serious offering with vCard support and such.</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221085896\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\r\n                </div>\r\n                <a href=\"#comment-221085896\" class=\"permalink\"><time datetime=\"2004-12-27T12:23:46\">2004-12-27T12:23:46</time></a>\r\n            </div>\r\n            <div class=\"content\">(Hmm, posted last week but it never showed up...)\r\n\r\nWhat are you thinking in terms of having this data store actually used by, say, your email client?\r\n\r\nMake it look like an LDAP server, maybe?</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221085898\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.chuckknows.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6cede7ba6ff803837ba2da9cc6e466b6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.chuckknows.com\">Chuck Conway</a>\r\n                </div>\r\n                <a href=\"#comment-221085898\" class=\"permalink\"><time datetime=\"2005-01-02T20:37:00\">2005-01-02T20:37:00</time></a>\r\n            </div>\r\n            <div class=\"content\">How Funny! I've been thinking about doing the same thing.\r\n\r\nThe only difference is I was thinking about doing address book, bookmarks and my RSS feeds. \r\n\r\nThose are the things I miss the most when I am away.</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221085900\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.worldwide-sources.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=73de6d1640f8cae902843f4a753bcaee&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.worldwide-sources.com\">William</a>\r\n                </div>\r\n                <a href=\"#comment-221085900\" class=\"permalink\"><time datetime=\"2005-03-05T05:16:08\">2005-03-05T05:16:08</time></a>\r\n            </div>\r\n            <div class=\"content\">I'm curious to see where this little app is going its still needs more work</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221085903\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8157a5907b244071cda98ba5aa7a9635&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\r\n                </div>\r\n                <a href=\"#comment-221085903\" class=\"permalink\"><time datetime=\"2006-08-26T13:37:35\">2006-08-26T13:37:35</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>I see you working with Tarawa in there. Did you like it? Is it being worked on at all?</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/12/22/abook1",
    "thumbnail": "http://www.decafbad.com/2004/12/abook-architecture.jpg",
    "summary": "<img src=\"http://www.decafbad.com/2004/12/abook-architecture.jpg\" align=\"right\">\n\n<p>So, in the spirit of <a href=\"http://www.decafbad.com/blog/2004/11/30/picoprojects_and_trepanation\">pico-projects</a>, I&apos;ve started building <a href=\"http://www.decafbad.com/blog/2004/11/30/nextgenwebapps\">that address book application</a> I mentioned awhile ago and I want to start writing about it as I go.</p>\n<p>First off, hopefully you&apos;ll notice the quick diagram I threw together in OmniGraffle.  This is a sort of rough sketch of the loosely-joined architecture I want to explore with this thing.  </p>\n<ul>\n<li><em>Data</em>: This is where address book entries live.</li>\n<li><em>Model</em>: A set of objects encapsulating the data, this is how address book entries will be accessed.</li>\n<li><em>REST API</em>: Model objects exposed as resources identified by URI, serialized and deserialized as XML, and manipulated by GET / PUT / POST / DELETE methods.</li>\n<li><em>XSLT Filter</em>: XML data produced by REST API calls can be first passed through XSL at a given URL before being served up as a response.  </li>\n<li><em>HTML, CSS, JavaScript</em>: Thanks to the XSLT filter layer, the XML vocabulary used to describe address book entries can be transformed into user interface presentation.</li>\n<li><em>HTTP</em>: Everything happens via HTTP...</li>\n<li><em>Web Browser Client</em>: ...and everything is viewed in a web browser.</li>\n</ul>\n<p>Now, I call this a loosely-joined architecture because I want to stress that you should be able to swap out just about any part of this whenever you want.  </p>\n<p>Want the <em>Data</em> to be in MySQL?  Fine.  Want it to be in flat files?  Fine.  Just make sure the <em>Model</em> can cope while maintaining a consistent interface for the <em>REST API*.  Want to change the user interface in the browser?  Great-- ideally, all you have to do is change some XSLT files.  I&apos;m writing everything from the *XSLT Filter</em> down to the <em>Model</em> in Python.  Don&apos;t like that?  Fine.  Rewrite it all in Perl, and hopefully everything from the XSLT up to the browser will still be useful to you.</p>\n<p>At some point, you might even want to ditch the browser for a native desktop client.  Fabulous! Just ignore everything past the <em>REST API</em> and <em>HTTP</em>, don&apos;t use any XSLT in the <em>Filter</em>, and use the API and XML directly.</p>\n<p>I don&apos;t think any of this is particularly revolutionary-- although I thought it was when I first saw Amazon Web Services doing some of this, and I hope to throw a little GMail in as well.  I hope that this will all be useful as I muddle through explaining what I&apos;m doing.  In the meantime, you can see me getting the stage set as I start checking things into my Subversion repository over here:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/svn/trunk/hacks/abook/\">http://www.decafbad.com/svn/trunk/hacks/abook/</a></li></ul>"
  },
  {
    "comments_archived": true,
    "date": "2004-09-01T10:47:41.000Z",
    "excerpt": "But, while I'm in the process of wheel reinvention, how about I borrow Kimbro's idea?  I just threw together a quick class called XPathDict, based on libxml2.",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "XPath based Python dictionaries, on loan",
    "wordpress_id": 544,
    "wordpress_slug": "xpath-based-python-dictionaries-on-loan",
    "wordpress_url": "http://www.decafbad.com/blog/?p=544",
    "year": "2004",
    "month": "09",
    "day": "01",
    "isDir": false,
    "slug": "xpath-based-python-dictionaries-on-loan",
    "postName": "2004-09-01-xpath-based-python-dictionaries-on-loan",
    "html": "<p>So <a href=\"http://www.xmldatabases.org/WK/blog\">Kimbro Staken</a> posted this nifty idea to build <a href=\"http://www.xmldatabases.org/WK/blog/1964_XPath_based_Python_Dictionaries.item\">XPath based Python dictionaries</a> to access XML data as a part of his incredibly nifty <a href=\"http://www.syncato.org/\">Syncato</a> microcontent management system.  Eventually, I&#39;ve really got to break down and get that thing built and running on my server and my laptop-- it really seems like I&#39;m reinventing so many wheels by not basing <a href=\"http://www.decafbad.com/cvs/dbagg3/\"><code>dbagg3</code></a> on it.</p>\n<p>But, while I&#39;m in the process of wheel reinvention, how about I borrow Kimbro&#39;s idea?  I just threw together <a href=\"http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/xmlutils.py\">a quick class called XPathDict</a>, based on <a href=\"http://www.xmlsoft.org/\">libxml2</a>.  It works a little something like this:</p>\n<pre><code>feed_xd = XPathDict(file=&quot;sample-atom.xml&quot;)\nfor entry_node in feed_xd.nodes(&quot;//atom:entry&quot;):\n    entry = XPathDict(doc=entry_node.doc, node=entry_node)\n    print &quot;Title: &quot; % entry[&#39;atom:title&#39;]\n    if &#39;atom:author&#39; in entry:\n        print &quot;Author: &quot; % entry[&#39;atom:author/atom:name&#39;]\n\nxml = &quot;&quot;&quot;\n   &lt;dbagg3:user xmlns=&quot;http://purl.org/atom/ns#&quot; \n            xmlns:dbagg3=&quot;http://decafbad.com/2004/07/dbagg3/&quot;&gt;\n        &lt;name&gt;deusx&lt;/name&gt;\n        &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n        &lt;url&gt;http://www.decafbad.com/&lt;/url&gt;\n        &lt;dbagg3:prefs&gt;\n            &lt;dbagg3:pref name=&quot;foo&quot;&gt;bar&lt;/dbagg3:pref&gt;\n        &lt;/dbagg3:prefs&gt;\n   &lt;/dbagg3:author&gt;\n&quot;&quot;&quot;\n\nmap = (\n    (&#39;userName&#39;,  &#39;a:name&#39;),\n    (&#39;userEmail&#39;, &#39;a:email&#39;),\n    (&#39;fooPref&#39;,   &quot;dbagg3:prefs/dbagg3:pref[@name=&#39;foo&#39;]&quot;)\n)\n\nxd = XPathDict(xml=xml)\nxd.cd(&quot;/dbagg3:user&quot;)\nprint xd.extract(map)\n\n#    {&#39;userName&#39;  : &#39;deusx&#39;, \n#     &#39;userEmail&#39; : &#39;deus_x@pobox.com&#39;, \n#     &#39;fooPref&#39;   : &#39;bar&#39;}</code></pre>\n<p>There isn&#39;t any spectacular code behind all this, and the idea <em>was</em> Kimbro&#39;s, but it&#39;s working.  It&#39;s also incredibly convenient, especially with the little XML-to-dict extraction map method I whipped up.  This would take a bit more work to pry it out of its current context, such as turning the hardcoded namespaces into an option, among other things.  But, <a href=\"http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/xmlutils.py\">here&#39;s the code</a> for you to peruse.</p>\n<p>(I got hooked early on subverting in-built language constructs from perl&#39;s <code>tie</code> facilities, and C++&#39;s operator overloading.  Now I&#39;m loving Python&#39;s <a href=\"http://diveintopython.org/object_oriented_framework/special_class_methods2.html\">special class methods</a>.  Someday, maybe, I&#39;ll actually get down to doing some work in LISP and wrap my head around some <em>real</em> language subversion.)</p>\n<p>Anyway, while this is neither quite <a href=\"http://dev2dev.bea.com/products/wlworkshop/articles/JSchneider_XML.jsp\">Native XML Scripting</a> nor XML as <a href=\"http://www.xmldatabases.org/WK/blog/663?t=item\">a native language construct</a>, it&#39;s getting there.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090556\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://naeblis.cx\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=abfc88b96ae18c85ba7aac3bded2ec5e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://naeblis.cx\">Ryan Tomayko</a>\n</div>\n<a href=\"#comment-221090556\" class=\"permalink\"><time datetime=\"2004-09-01T17:29:27\">2004-09-01T17:29:27</time></a>\n</div>\n<div class=\"content\">Funny that. I also have one that has survived a couple of failed apps. I have a hard time dropping it to be honest and just keep lugging it around to each new project. \nhttp://naeblis.cx/cvs/percolator/xb/lib/xpdm.py?rev=HEAD&content-type=text/vnd.viewcvs-markup\nIt has some pretty big issues. Among other things, creating nodes with namespace support is a little.. ermmm.. not there. But it does a lot of things well like garbage collecting xmlDoc instances (freeDoc), copying nodesets between documents, encoding things when they need to be, etc.\nAnyway, I wonder if maybe we all might benefit by teaming up on this and try to define what a complete xpathish wrapper atop libxml2 should look like. And really, why limit it to libxml2? I'm of the opinion that the value here is an interface that embraces xpath. The fact that it's running on top of the blazingly fast libxml2 is nice but coding against the XMLTRAMP like interface is the value for me.\nSo let me see if I can get some time together to whip up a quick comparison of the three implementations. I'll shoot that over to you and Kimbro and we can go from there. If these seem to work best as backyard APIs we like to keep close to us, we'll drop it. However, I think there's a good chance that we can all benefit by combining our efforts.</div>\n</li>\n</ul>\n</div>\n",
    "body": "So [Kimbro Staken][kimbro] posted this nifty idea to build [XPath based Python dictionaries][xpathdict] to access XML data as a part of his incredibly nifty [Syncato][syncato] microcontent management system.  Eventually, I've really got to break down and get that thing built and running on my server and my laptop-- it really seems like I'm reinventing so many wheels by not basing [`dbagg3`][dbagg3] on it.\r\n\r\nBut, while I'm in the process of wheel reinvention, how about I borrow Kimbro's idea?  I just threw together [a quick class called XPathDict][myxdict], based on [libxml2][libxml2].  It works a little something like this:\r\n\r\n    feed_xd = XPathDict(file=\"sample-atom.xml\")\r\n    for entry_node in feed_xd.nodes(\"//atom:entry\"):\r\n        entry = XPathDict(doc=entry_node.doc, node=entry_node)\r\n        print \"Title: \" % entry['atom:title']\r\n        if 'atom:author' in entry:\r\n            print \"Author: \" % entry['atom:author/atom:name']\r\n\r\n    xml = \"\"\"\r\n       <dbagg3:user xmlns=\"http://purl.org/atom/ns#\" \r\n                xmlns:dbagg3=\"http://decafbad.com/2004/07/dbagg3/\">\r\n            <name>deusx</name>\r\n            <email>deus_x@pobox.com</email>\r\n            <url>http://www.decafbad.com/</url>\r\n            <dbagg3:prefs>\r\n                <dbagg3:pref name=\"foo\">bar</dbagg3:pref>\r\n            </dbagg3:prefs>\r\n       </dbagg3:author>\r\n    \"\"\"\r\n\r\n    map = (\r\n        ('userName',  'a:name'),\r\n        ('userEmail', 'a:email'),\r\n        ('fooPref',   \"dbagg3:prefs/dbagg3:pref[@name='foo']\")\r\n    )\r\n\r\n    xd = XPathDict(xml=xml)\r\n    xd.cd(\"/dbagg3:user\")\r\n    print xd.extract(map)\r\n\r\n    #    {'userName'  : 'deusx', \r\n    #     'userEmail' : 'deus_x@pobox.com', \r\n    #     'fooPref'   : 'bar'}\r\n\r\nThere isn't any spectacular code behind all this, and the idea *was* Kimbro's, but it's working.  It's also incredibly convenient, especially with the little XML-to-dict extraction map method I whipped up.  This would take a bit more work to pry it out of its current context, such as turning the hardcoded namespaces into an option, among other things.  But, [here's the code][myxdict] for you to peruse.\r\n\r\n(I got hooked early on subverting in-built language constructs from perl's `tie` facilities, and C++'s operator overloading.  Now I'm loving Python's [special class methods][methods].  Someday, maybe, I'll actually get down to doing some work in LISP and wrap my head around some *real* language subversion.)\r\n\r\nAnyway, while this is neither quite [Native XML Scripting][nativexml] nor XML as [a native language construct][nativeconstruct], it's getting there.\r\n\r\n[methods]: http://diveintopython.org/object_oriented_framework/special_class_methods2.html\r\n[nativeconstruct]: http://www.xmldatabases.org/WK/blog/663?t=item\r\n[nativexml]: http://dev2dev.bea.com/products/wlworkshop/articles/JSchneider_XML.jsp\r\n[libxml2]: http://www.xmlsoft.org/\r\n[myxdict]: http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/xmlutils.py\r\n[dbagg3]: http://www.decafbad.com/cvs/dbagg3/\r\n[syncato]: http://www.syncato.org/\r\n[kimbro]: http://www.xmldatabases.org/WK/blog\r\n[xpathdict]: http://www.xmldatabases.org/WK/blog/1964_XPath_based_Python_Dictionaries.item\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221090556\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://naeblis.cx\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=abfc88b96ae18c85ba7aac3bded2ec5e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://naeblis.cx\">Ryan Tomayko</a>\r\n                </div>\r\n                <a href=\"#comment-221090556\" class=\"permalink\"><time datetime=\"2004-09-01T17:29:27\">2004-09-01T17:29:27</time></a>\r\n            </div>\r\n            <div class=\"content\">Funny that. I also have one that has survived a couple of failed apps. I have a hard time dropping it to be honest and just keep lugging it around to each new project. \r\n\r\nhttp://naeblis.cx/cvs/percolator/xb/lib/xpdm.py?rev=HEAD&content-type=text/vnd.viewcvs-markup\r\n\r\nIt has some pretty big issues. Among other things, creating nodes with namespace support is a little.. ermmm.. not there. But it does a lot of things well like garbage collecting xmlDoc instances (freeDoc), copying nodesets between documents, encoding things when they need to be, etc.\r\n \r\nAnyway, I wonder if maybe we all might benefit by teaming up on this and try to define what a complete xpathish wrapper atop libxml2 should look like. And really, why limit it to libxml2? I'm of the opinion that the value here is an interface that embraces xpath. The fact that it's running on top of the blazingly fast libxml2 is nice but coding against the XMLTRAMP like interface is the value for me.\r\n\r\nSo let me see if I can get some time together to whip up a quick comparison of the three implementations. I'll shoot that over to you and Kimbro and we can go from there. If these seem to work best as backyard APIs we like to keep close to us, we'll drop it. However, I think there's a good chance that we can all benefit by combining our efforts.</div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/09/01/xpath-based-python-dictionaries-on-loan"
  },
  {
    "comments_archived": true,
    "date": "2004-08-31T01:37:42.000Z",
    "excerpt": "Work has been insanely busy lately, but I have made some more progress with [`dbagg3`][dbagg3].  The code is all in CVS, so feel free to take a gander-- I don't have a ton of time for a proper write up, but I do want to spew a little bit.",
    "layout": "post",
    "tags": [
      "hacks",
      "syndication",
      "xml"
    ],
    "title": "Making progress on dbagg3",
    "wordpress_id": 543,
    "wordpress_slug": "dbagg3-makingprogress",
    "wordpress_url": "http://www.decafbad.com/blog/?p=543",
    "year": "2004",
    "month": "08",
    "day": "30",
    "isDir": false,
    "slug": "dbagg3-makingprogress",
    "postName": "2004-08-30-dbagg3-makingprogress",
    "html": "<p>Work has been insanely busy lately, but I have made some more progress with <a href=\"http://www.decafbad.com/cvs/dbagg3/\"><code>dbagg3</code></a>.  The code is all in CVS, so feel free to take a gander-- I don&#39;t have a ton of time for a proper write up, but I do want to spew a little bit. </p>\n<p>As per my <a href=\"http://www.decafbad.com/blog/2004/08/23/slicing_and_dicing_to_make_atom_soup_in_dbagg3\">previous musings on XML in a SQL database</a>, I revamped the database.  Now things are sliced up by feed and entry tables, rows in each containing a few metadata columns and then one big column for an XML dump.  This lets me index on  date and parent feed and such, meanwhile punting on the issue of dicing things like authors or content up further.  And, as extension elements start to show up, this handling is dumb enough to simply store things it doesn&#39;t know about without mangling them.  This is a very good thing and one of my big goals for this beast.</p>\n<p>The other thing that I&#39;m getting excited about is the REST API built atop the Atom store.  Rather than spend time on proper documentation, here&#39;s a quick dump from the <a href=\"http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/rest.py\">appropriate module</a>:</p>\n<pre><code>URL: GET /feeds/\nURL: GET /feeds/{id}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hh}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}/{dd}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}.xml\nURL: GET /feeds/{id}/now-{nowoff}.xml\nURL: GET /feeds/{fid}/entries/{eid}.xml\nURL: GET /users/\nURL: GET /users/{uname}.xml\nURL: POST /users/\nURL: DELETE /users/{uname}.xml\nURL: PUT /users/{uname}.xml\nURL: GET /users/{uname}/prefs.xml\nURL: GET /users/{uname}/prefs/\nURL: POST /users/{uname}/prefs/{pname}.{type}\nURL: PUT /users/{uname}/prefs/{pname}.{type}\nURL: GET /users/{uname}/prefs/{pname}.{type}\nURL: DELETE /users/{uname}/prefs/{pname}.{type}\nURL: GET /users/{uname}/subscriptions.{type}\nURL: GET /users/{uname}/subscriptions/\nURL: POST /users/{uname}/subscriptions/\nURL: DELETE /users/{uname}/subscriptions/{id}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hh}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/now-{hours}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/now.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hh}.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}.xml\nURL: GET /users/{uname}/subscriptions/now-{hours}.xml\nURL: GET /users/{uname}/subscriptions/now.xml\nURL: GET /users/{uname}/subscriptions/{sid}/entries/{eid}.xml</code></pre>\n<p>Hopefully, the structure of these URL patterns make a little bit of sense.  The too-clever thing about these is that they&#39;re both documentation in the module&#39;s docstrings, and parsed out to register methods with automagically-generated regexes applied to incoming URL requests.  (I may eventually realize just how stupid an idea this is, but not yet.)  </p>\n<p>This list is nowhere near complete or final or even all that well thought out yet.  But, it seems to be working out pretty well so far, and it&#39;s so easy to tinker with the API to sketch out ideas in working code.  Eating my own dogfood, my first browser window of the day tends to open on this URL:</p>\n<pre><code>http://localhost/~deusx/dbagg3.5/api/users/default/subscriptions/\nnow-12.xml?xsl=xsl/full.xsl&amp;#38;content-type=text/html</code></pre>\n<p>This grabs the last 12 hours&#39; worth of items from <code>default</code>&#39;s subscriptions, passing them through the XSL at <code>xsl/full.xsl</code> on the way to my browser with a content type of <code>text/html</code>.  This tends to produce about 1000-1500 entries in about 15 seconds on my PowerBook, which is better than I&#39;d expected.  </p>\n<p>Pretty soon, I&#39;ll be implementing the ability to post metadata onto feed entries under subscriptions.  Then, I can mark items as seen, attach categories, tags, and notes.  From there, I can exclude seen items from queries, produce new aggregate feeds based on my tagging or notes, among a few other ideas I&#39;ve got stewing.</p>\n<p>A little more work, and I think I&#39;ll be able to throw together the beginnings of a <a href=\"http://www.bloglines.com\">Bloglines</a>-style three-pane browser interface, as well as improving the functionality of my own outliner-style display with <a href=\"http://developer.apple.com/internet/webcontent/xmlhttpreq.html\">XmlHTTPRequest</a>-based calls to the API to enable refresh-free interaction.  From there, I have some ideas for desktop apps and maybe even some <a href=\"http://www.decafbad.com/blog/2003/06/19/flash_agg\">tinkering in Flash</a>.  (Wow... has it really been over a year since I was writing about Flash &#38; REST?)</p>\n<p>And <em>then</em>, I want to implement the Atom API and allow users to create feeds to which they can post their own items and share read-only with others (or share writing with a group).  From there, this thing can turn into a read/write Atom storage tank, serving both as an aggregator and a blog publishing engine, given the appropriate XSL work.</p>\n<p>Lots of ideas stewing.  Now I just have to get the time and possibly a new web server, since I&#39;d like to eventually open up an installation of this to fellow tinkerers, but this poor little box can barely take what it&#39;s tasked with at present...</p>\n<p>Oh yeah, and one other thing:  I&#39;ve been thinking about names better than <code>dbagg3</code>.  The one that&#39;s sticking around in my head so far is <strong>feedReactor</strong>.  What do you think?</p>\n<!--more-->\n<p>shortname=dbagg3_makingprogress</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221086277\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=26343060da04d2f84c3fbd726c1158b6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Alan</a>\n</div>\n<a href=\"#comment-221086277\" class=\"permalink\"><time datetime=\"2004-09-01T03:39:10\">2004-09-01T03:39:10</time></a>\n</div>\n<div class=\"content\">I prefer the dbagg title to feed_anything_. There's feedster, feedburner, feedreader and I'm sure there will be a whole slew more. This needs an original name. It seems similiar to Urchin, which you earlier posted a link to, how about Starfish or maybe Seahorse. ;)</div>\n</li>\n</ul>\n</div>\n",
    "body": "Work has been insanely busy lately, but I have made some more progress with [`dbagg3`][dbagg3].  The code is all in CVS, so feel free to take a gander-- I don't have a ton of time for a proper write up, but I do want to spew a little bit. \r\n\r\nAs per my [previous musings on XML in a SQL database][soup], I revamped the database.  Now things are sliced up by feed and entry tables, rows in each containing a few metadata columns and then one big column for an XML dump.  This lets me index on  date and parent feed and such, meanwhile punting on the issue of dicing things like authors or content up further.  And, as extension elements start to show up, this handling is dumb enough to simply store things it doesn't know about without mangling them.  This is a very good thing and one of my big goals for this beast.\r\n\r\nThe other thing that I'm getting excited about is the REST API built atop the Atom store.  Rather than spend time on proper documentation, here's a quick dump from the [appropriate module][restapi]:\r\n\r\n    URL: GET /feeds/\r\n    URL: GET /feeds/{id}.xml\r\n    URL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\r\n    URL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hh}.xml\r\n    URL: GET /feeds/{id}/{yyyy}/{mm}/{dd}.xml\r\n    URL: GET /feeds/{id}/{yyyy}/{mm}.xml\r\n    URL: GET /feeds/{id}/now-{nowoff}.xml\r\n    URL: GET /feeds/{fid}/entries/{eid}.xml\r\n    URL: GET /users/\r\n    URL: GET /users/{uname}.xml\r\n    URL: POST /users/\r\n    URL: DELETE /users/{uname}.xml\r\n    URL: PUT /users/{uname}.xml\r\n    URL: GET /users/{uname}/prefs.xml\r\n    URL: GET /users/{uname}/prefs/\r\n    URL: POST /users/{uname}/prefs/{pname}.{type}\r\n    URL: PUT /users/{uname}/prefs/{pname}.{type}\r\n    URL: GET /users/{uname}/prefs/{pname}.{type}\r\n    URL: DELETE /users/{uname}/prefs/{pname}.{type}\r\n    URL: GET /users/{uname}/subscriptions.{type}\r\n    URL: GET /users/{uname}/subscriptions/\r\n    URL: POST /users/{uname}/subscriptions/\r\n    URL: DELETE /users/{uname}/subscriptions/{id}.xml\r\n    URL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\r\n    URL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hh}.xml\r\n    URL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}.xml\r\n    URL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}.xml\r\n    URL: GET /users/{uname}/subscriptions/{sid}/now-{hours}.xml\r\n    URL: GET /users/{uname}/subscriptions/{sid}/now.xml\r\n    URL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\r\n    URL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hh}.xml\r\n    URL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}.xml\r\n    URL: GET /users/{uname}/subscriptions/{yyyy}/{mm}.xml\r\n    URL: GET /users/{uname}/subscriptions/now-{hours}.xml\r\n    URL: GET /users/{uname}/subscriptions/now.xml\r\n    URL: GET /users/{uname}/subscriptions/{sid}/entries/{eid}.xml\r\n\r\nHopefully, the structure of these URL patterns make a little bit of sense.  The too-clever thing about these is that they're both documentation in the module's docstrings, and parsed out to register methods with automagically-generated regexes applied to incoming URL requests.  (I may eventually realize just how stupid an idea this is, but not yet.)  \r\n\r\nThis list is nowhere near complete or final or even all that well thought out yet.  But, it seems to be working out pretty well so far, and it's so easy to tinker with the API to sketch out ideas in working code.  Eating my own dogfood, my first browser window of the day tends to open on this URL:\r\n\r\n    http://localhost/~deusx/dbagg3.5/api/users/default/subscriptions/\r\n    now-12.xml?xsl=xsl/full.xsl&#38;content-type=text/html\r\n\r\nThis grabs the last 12 hours' worth of items from `default`'s subscriptions, passing them through the XSL at `xsl/full.xsl` on the way to my browser with a content type of `text/html`.  This tends to produce about 1000-1500 entries in about 15 seconds on my PowerBook, which is better than I'd expected.  \r\n\r\nPretty soon, I'll be implementing the ability to post metadata onto feed entries under subscriptions.  Then, I can mark items as seen, attach categories, tags, and notes.  From there, I can exclude seen items from queries, produce new aggregate feeds based on my tagging or notes, among a few other ideas I've got stewing.\r\n\r\nA little more work, and I think I'll be able to throw together the beginnings of a [Bloglines][bloglines]-style three-pane browser interface, as well as improving the functionality of my own outliner-style display with [XmlHTTPRequest][xmlhttp]-based calls to the API to enable refresh-free interaction.  From there, I have some ideas for desktop apps and maybe even some [tinkering in Flash][flash].  (Wow... has it really been over a year since I was writing about Flash &#38; REST?)\r\n\r\nAnd *then*, I want to implement the Atom API and allow users to create feeds to which they can post their own items and share read-only with others (or share writing with a group).  From there, this thing can turn into a read/write Atom storage tank, serving both as an aggregator and a blog publishing engine, given the appropriate XSL work.\r\n\r\nLots of ideas stewing.  Now I just have to get the time and possibly a new web server, since I'd like to eventually open up an installation of this to fellow tinkerers, but this poor little box can barely take what it's tasked with at present...\r\n\r\nOh yeah, and one other thing:  I've been thinking about names better than `dbagg3`.  The one that's sticking around in my head so far is **feedReactor**.  What do you think?\r\n\r\n[flash]: http://www.decafbad.com/blog/2003/06/19/flash_agg\r\n[xmlhttp]: http://developer.apple.com/internet/webcontent/xmlhttpreq.html\r\n[bloglines]: http://www.bloglines.com\r\n[restapi]: http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/rest.py\r\n[dbagg3]: http://www.decafbad.com/cvs/dbagg3/\r\n[soup]: http://www.decafbad.com/blog/2004/08/23/slicing_and_dicing_to_make_atom_soup_in_dbagg3\r\n<!--more-->\r\nshortname=dbagg3_makingprogress\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221086277\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=26343060da04d2f84c3fbd726c1158b6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Alan</a>\r\n                </div>\r\n                <a href=\"#comment-221086277\" class=\"permalink\"><time datetime=\"2004-09-01T03:39:10\">2004-09-01T03:39:10</time></a>\r\n            </div>\r\n            <div class=\"content\">I prefer the dbagg title to feed_anything_. There's feedster, feedburner, feedreader and I'm sure there will be a whole slew more. This needs an original name. It seems similiar to Urchin, which you earlier posted a link to, how about Starfish or maybe Seahorse. ;)</div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/08/30/dbagg3-makingprogress",
    "summary": "<p>Work has been insanely busy lately, but I have made some more progress with <a href=\"http://www.decafbad.com/cvs/dbagg3/\"><code>dbagg3</code></a>.  The code is all in CVS, so feel free to take a gander-- I don&apos;t have a ton of time for a proper write up, but I do want to spew a little bit. </p>\n<p>As per my <a href=\"http://www.decafbad.com/blog/2004/08/23/slicing_and_dicing_to_make_atom_soup_in_dbagg3\">previous musings on XML in a SQL database</a>, I revamped the database.  Now things are sliced up by feed and entry tables, rows in each containing a few metadata columns and then one big column for an XML dump.  This lets me index on  date and parent feed and such, meanwhile punting on the issue of dicing things like authors or content up further.  And, as extension elements start to show up, this handling is dumb enough to simply store things it doesn&apos;t know about without mangling them.  This is a very good thing and one of my big goals for this beast.</p>\n<p>The other thing that I&apos;m getting excited about is the REST API built atop the Atom store.  Rather than spend time on proper documentation, here&apos;s a quick dump from the <a href=\"http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/rest.py\">appropriate module</a>:</p>\n<pre><code>URL: GET /feeds/\nURL: GET /feeds/{id}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}/{dd}/{hh}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}/{dd}.xml\nURL: GET /feeds/{id}/{yyyy}/{mm}.xml\nURL: GET /feeds/{id}/now-{nowoff}.xml\nURL: GET /feeds/{fid}/entries/{eid}.xml\nURL: GET /users/\nURL: GET /users/{uname}.xml\nURL: POST /users/\nURL: DELETE /users/{uname}.xml\nURL: PUT /users/{uname}.xml\nURL: GET /users/{uname}/prefs.xml\nURL: GET /users/{uname}/prefs/\nURL: POST /users/{uname}/prefs/{pname}.{type}\nURL: PUT /users/{uname}/prefs/{pname}.{type}\nURL: GET /users/{uname}/prefs/{pname}.{type}\nURL: DELETE /users/{uname}/prefs/{pname}.{type}\nURL: GET /users/{uname}/subscriptions.{type}\nURL: GET /users/{uname}/subscriptions/\nURL: POST /users/{uname}/subscriptions/\nURL: DELETE /users/{uname}/subscriptions/{id}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}/{hh}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}/{dd}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/{yyyy}/{mm}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/now-{hours}.xml\nURL: GET /users/{uname}/subscriptions/{sid}/now.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hstart}-{hend}.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}/{hh}.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}/{dd}.xml\nURL: GET /users/{uname}/subscriptions/{yyyy}/{mm}.xml\nURL: GET /users/{uname}/subscriptions/now-{hours}.xml\nURL: GET /users/{uname}/subscriptions/now.xml\nURL: GET /users/{uname}/subscriptions/{sid}/entries/{eid}.xml</code></pre>\n<p>Hopefully, the structure of these URL patterns make a little bit of sense.  The too-clever thing about these is that they&apos;re both documentation in the module&apos;s docstrings, and parsed out to register methods with automagically-generated regexes applied to incoming URL requests.  (I may eventually realize just how stupid an idea this is, but not yet.)  </p>\n<p>This list is nowhere near complete or final or even all that well thought out yet.  But, it seems to be working out pretty well so far, and it&apos;s so easy to tinker with the API to sketch out ideas in working code.  Eating my own dogfood, my first browser window of the day tends to open on this URL:</p>\n<pre><code>http://localhost/~deusx/dbagg3.5/api/users/default/subscriptions/\nnow-12.xml?xsl=xsl/full.xsl&amp;#38;content-type=text/html</code></pre>\n<p>This grabs the last 12 hours&apos; worth of items from <code>default</code>&apos;s subscriptions, passing them through the XSL at <code>xsl/full.xsl</code> on the way to my browser with a content type of <code>text/html</code>.  This tends to produce about 1000-1500 entries in about 15 seconds on my PowerBook, which is better than I&apos;d expected.  </p>\n<p>Pretty soon, I&apos;ll be implementing the ability to post metadata onto feed entries under subscriptions.  Then, I can mark items as seen, attach categories, tags, and notes.  From there, I can exclude seen items from queries, produce new aggregate feeds based on my tagging or notes, among a few other ideas I&apos;ve got stewing.</p>\n<p>A little more work, and I think I&apos;ll be able to throw together the beginnings of a <a href=\"http://www.bloglines.com\">Bloglines</a>-style three-pane browser interface, as well as improving the functionality of my own outliner-style display with <a href=\"http://developer.apple.com/internet/webcontent/xmlhttpreq.html\">XmlHTTPRequest</a>-based calls to the API to enable refresh-free interaction.  From there, I have some ideas for desktop apps and maybe even some <a href=\"http://www.decafbad.com/blog/2003/06/19/flash_agg\">tinkering in Flash</a>.  (Wow... has it really been over a year since I was writing about Flash &amp; REST?)</p>\n<p>And <em>then</em>, I want to implement the Atom API and allow users to create feeds to which they can post their own items and share read-only with others (or share writing with a group).  From there, this thing can turn into a read/write Atom storage tank, serving both as an aggregator and a blog publishing engine, given the appropriate XSL work.</p>\n<p>Lots of ideas stewing.  Now I just have to get the time and possibly a new web server, since I&apos;d like to eventually open up an installation of this to fellow tinkerers, but this poor little box can barely take what it&apos;s tasked with at present...</p>\n<p>Oh yeah, and one other thing:  I&apos;ve been thinking about names better than <code>dbagg3</code>.  The one that&apos;s sticking around in my head so far is <strong>feedReactor</strong>.  What do you think?</p>\n"
  },
  {
    "comments_archived": true,
    "date": "2004-08-23T05:09:51.000Z",
    "excerpt": "So...  How many of you have ever used mysql -X?",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "mysql and XML output",
    "wordpress_id": 538,
    "wordpress_slug": "mysql-and-xml-output",
    "wordpress_url": "http://www.decafbad.com/blog/?p=538",
    "year": "2004",
    "month": "08",
    "day": "23",
    "isDir": false,
    "slug": "mysql-and-xml-output",
    "postName": "2004-08-23-mysql-and-xml-output",
    "html": "<p>So...  How many of you have ever used <code>mysql -X</code>?</p>\n<p>I just discovered it today, while screwing around with dumping database queries into Atom.  While I&#39;m not entirely sure it&#39;s what I need to use, this is pretty nifty:</p>\n<pre><code>$ mysql -Xp -udbagg3 dbagg3 -e &#39;\n&gt; select id, title, modified \n&gt; from feed\n&gt; order by modified \n&gt; limit 4&#39; \nEnter password:\n\n&lt;?xml version=&quot;1.0&quot;?&gt;\n\n&lt;resultset statement=&quot;select id, title, modified \n        from feed order by modified limit 4&quot;&gt;\n  &lt;row&gt;\n    &lt;id&gt;527&lt;/id&gt;\n    &lt;title&gt;Channel Dean&lt;/title&gt;\n    &lt;modified&gt;2004-03-04 15:56:54&lt;/modified&gt;\n  &lt;/row&gt;\n\n  &lt;row&gt;\n    &lt;id&gt;31&lt;/id&gt;\n    &lt;title&gt;chocolate and vodka&lt;/title&gt;\n    &lt;modified&gt;2004-07-21 21:30:08&lt;/modified&gt;\n  &lt;/row&gt;\n\n  &lt;row&gt;\n    &lt;id&gt;183&lt;/id&gt;\n    &lt;title&gt;floating atoll&lt;/title&gt;\n    &lt;modified&gt;2004-07-31 14:09:27&lt;/modified&gt;\n  &lt;/row&gt;\n\n  &lt;row&gt;\n    &lt;id&gt;24&lt;/id&gt;\n    &lt;title&gt;What&#39;s Your Brand Mantra?&lt;/title&gt;\n    &lt;modified&gt;2004-08-02 03:15:03&lt;/modified&gt;\n  &lt;/row&gt;\n&lt;/resultset&gt;    </code></pre>\n<p>Now, while I don&#39;t think that using this for <code>dbagg3</code> is all that great an idea, it&#39;s something I need to remember for future shell and XSLT hacks...</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087588\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=365087c6a73a2ee5fa90760c2f9d9ca8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">iamsure</a>\n</div>\n<a href=\"#comment-221087588\" class=\"permalink\"><time datetime=\"2004-08-23T03:47:12\">2004-08-23T03:47:12</time></a>\n</div>\n<div class=\"content\">Is there a way to do so without the commandline option, ie, via a select call, etc?</div>\n</li>\n<li class=\"comment\" id=\"comment-221087591\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=34b6089110a6bfc86b6351ba400ae8fa&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">bosshoff</a>\n</div>\n<a href=\"#comment-221087591\" class=\"permalink\"><time datetime=\"2005-04-20T12:22:15\">2005-04-20T12:22:15</time></a>\n</div>\n<div class=\"content\">There is a better way, using mysqldump, explained here: http://insight.zdnet.co.uk/software/developer/0,39020469,2112200,00.htm</div>\n</li>\n<li class=\"comment\" id=\"comment-221087595\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4c32c5992ac6744d2f14712d280e3834&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Rededog027</a>\n</div>\n<a href=\"#comment-221087595\" class=\"permalink\"><time datetime=\"2007-07-19T23:51:15\">2007-07-19T23:51:15</time></a>\n</div>\n<div class=\"content\"><p>That is awesome I haven't used it before but it is extreamly useful for  creating changelogs from svn and bugzilla :)</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "So...  How many of you have ever used `mysql -X`?\r\n\r\nI just discovered it today, while screwing around with dumping database queries into Atom.  While I'm not entirely sure it's what I need to use, this is pretty nifty:\r\n\r\n    $ mysql -Xp -udbagg3 dbagg3 -e '\r\n    > select id, title, modified \r\n    > from feed\r\n    > order by modified \r\n    > limit 4' \r\n    Enter password:\r\n \r\n    <?xml version=\"1.0\"?>\r\n\r\n    <resultset statement=\"select id, title, modified \r\n            from feed order by modified limit 4\">\r\n      <row>\r\n        <id>527</id>\r\n        <title>Channel Dean</title>\r\n        <modified>2004-03-04 15:56:54</modified>\r\n      </row>\r\n\r\n      <row>\r\n        <id>31</id>\r\n        <title>chocolate and vodka</title>\r\n        <modified>2004-07-21 21:30:08</modified>\r\n      </row>\r\n\r\n      <row>\r\n        <id>183</id>\r\n        <title>floating atoll</title>\r\n        <modified>2004-07-31 14:09:27</modified>\r\n      </row>\r\n \r\n      <row>\r\n        <id>24</id>\r\n        <title>What's Your Brand Mantra?</title>\r\n        <modified>2004-08-02 03:15:03</modified>\r\n      </row>\r\n    </resultset>    \r\n\r\nNow, while I don't think that using this for `dbagg3` is all that great an idea, it's something I need to remember for future shell and XSLT hacks...\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221087588\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=365087c6a73a2ee5fa90760c2f9d9ca8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">iamsure</a>\r\n                </div>\r\n                <a href=\"#comment-221087588\" class=\"permalink\"><time datetime=\"2004-08-23T03:47:12\">2004-08-23T03:47:12</time></a>\r\n            </div>\r\n            <div class=\"content\">Is there a way to do so without the commandline option, ie, via a select call, etc?</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087591\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=34b6089110a6bfc86b6351ba400ae8fa&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">bosshoff</a>\r\n                </div>\r\n                <a href=\"#comment-221087591\" class=\"permalink\"><time datetime=\"2005-04-20T12:22:15\">2005-04-20T12:22:15</time></a>\r\n            </div>\r\n            <div class=\"content\">There is a better way, using mysqldump, explained here: http://insight.zdnet.co.uk/software/developer/0,39020469,2112200,00.htm</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087595\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4c32c5992ac6744d2f14712d280e3834&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Rededog027</a>\r\n                </div>\r\n                <a href=\"#comment-221087595\" class=\"permalink\"><time datetime=\"2007-07-19T23:51:15\">2007-07-19T23:51:15</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>That is awesome I haven't used it before but it is extreamly useful for  creating changelogs from svn and bugzilla :)</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/08/22/mysql-and-xml-output"
  },
  {
    "comments_archived": true,
    "date": "2004-07-06T21:05:45.000Z",
    "excerpt": "This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts one and two.",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "Wish-of-the-Month Club, Part 3 of 3",
    "wordpress_id": 532,
    "wordpress_slug": "wishofthemonthclub3",
    "wordpress_url": "http://www.decafbad.com/blog/?p=532",
    "year": "2004",
    "month": "07",
    "day": "06",
    "isDir": false,
    "slug": "wishofthemonthclub3",
    "postName": "2004-07-06-wishofthemonthclub3",
    "html": "<p><i>This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">one</a> and <a href=\"http://www.decafbad.com/blog/2004/06/27/wishofthemonthclub2\">two</a>.</i></p>\n<h3 id=\"presenting-the-results\">Presenting the Results</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\"><code>wishes-ex5.xsl</code></a>: The fifth iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.html\"><code>wishes.html</code></a>: Sample output in HTML</li>\n</ul>\n<p>We&#39;ve finally gotten together all the bits of information we need--wishlists have been queried; random items have been selected; and a shopping cart has been prepared.  Now we just have to present the selections and a link to check out with the shopping cart.</p>\n<p>First, locate the following line toward the end of the stylesheet as we left it in the last section:</p>\n<pre><code>    &lt;xsl:copy-of select=&quot;$shopping_cart&quot; /&gt;</code></pre>\n<p>Delete this, and let&#39;s replace it by building some HTML:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart_purchase_url&quot; \n                  select=&quot;exsl:node-set($shopping_cart)//PurchaseUrl&quot; /&gt;\n\n    &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n      &lt;head&gt;&lt;title&gt;Wishlist Shopping Cart&lt;/title&gt;\\&lt;/head&gt;\n      &lt;body&gt;\n        &lt;p class=&quot;title&quot;&gt;\n          Here are your wishlist items\n          &lt;a href=&quot;{$shopping_cart_purchase_url}&quot;&gt;\n            &lt;img src=&quot;http://g-images.amazon.com/images/G/01/detail/shoppingcart-header-02.gif&quot; /&gt;\n          &lt;/a&gt; \n          items:\n        &lt;/p&gt;</code></pre>\n<p>We&#39;re using the <code>exsl:note-set</code> function again to access the contents of <code>$shopping_cart</code> with an XPath expression.  We pluck out the value of the <code>PurchaseUrl</code> in the shopping cart and place it in the variable <code>shopping_cart_purchase_url</code>.  Then, after a bit of HTML preamble, we borrow a shopping cart icon from Amazon itself to construct a link to which we can browse later to purchase the selected items.  This HTML is very simple so far; it&#39;s likely too simple, so eventually you may like to toss some CSS in here to improve the looks of things.  But, I&#39;ll leave that as an exercise for the reader.  </p>\n<p>Next, let&#39;s build a display of the items selected by iterating first through the wishlists:</p>\n<pre><code>        &lt;xsl:for-each select=&quot;exsl:node-set($random_products)/wishes:wishitem&quot;&gt;\n          &lt;div class=&quot;Detail&quot;&gt;\n\n            &lt;p class=&quot;wishlistLabel&quot;&gt;\n              &lt;xsl:value-of select=&quot;wishes:wishlist/@label&quot; /&gt;\n            &lt;/p&gt;</code></pre>\n<p>This begins a block for each wishlist, starting off with a paragraph containing the label we gave each wishlist.  Next, let&#39;s include a few details about the product chosen.  Again, all of the bits of data included for each product are described in the AWS documentation in the <em>Overview</em> under <em>Amazon Web Services Data Model</em>.  Checking that out, we can see that the data includes a URL to images of several sizes representing the product.  Let&#39;s include the medium-sized image as a link to the product&#39;s detail page:</p>\n<pre><code>            &lt;p class=&quot;Product&quot;&gt;\n              &lt;a href=&quot;{Details/@url}&quot;&gt;\n                &lt;img src=&quot;{Details/ImageUrlMedium}&quot; /&gt;\n              &lt;/a&gt;\n              &lt;br /&gt;</code></pre>\n<p>We can also include the product&#39;s name as a link:</p>\n<pre><code>              &lt;span class=&quot;ProductName&quot;&gt;\n                &lt;a href=&quot;{Details/@url}&quot;&gt;\n                  &lt;xsl:value-of select=&quot;Details/ProductName&quot; /&gt;\n                &lt;/a&gt;\n              &lt;/span&gt;\n              &lt;br /&gt;</code></pre>\n<p>And, it would be nice to provide a listing of people involved in creating the product (ie. the artists and/or authors):</p>\n<pre><code>          &lt;xsl:for-each select=&quot;./Details/Artists/Artist | \n                                ./Details/Authors/Author&quot;&gt;\n            &lt;span class=&quot;Author&quot;&gt;by &lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/span&gt;&lt;br /&gt;\n          &lt;/xsl:for-each&gt;</code></pre>\n<p>Note that here, the XPath selecting the data is just a bit more involved, since this information can be found in both <code>Artist</code> and <code>Author</code> elements.  In another case, we might care to make a distinction, but it really isn&#39;t all that important for this project.  The data model also provides an indication of from which catalog this product came, as well as its date of release.  Let&#39;s include that for good measure:</p>\n<pre><code>          (\n          &lt;xsl:value-of select=&quot;Details/Catalog&quot; /&gt; -\n          &lt;span class=&quot;ReleaseDate&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/ReleaseDate&quot; /&gt;\n          &lt;/span&gt;\n          )\n          &lt;br /&gt;\n        &lt;/p&gt;</code></pre>\n<p>Another thing that would be nice to know is how much this thing costs--we&#39;ve got this information provided in the XML data as well, so let&#39;s include it:</p>\n<pre><code>        &lt;p&gt;\n          &lt;span class=&quot;PriceLabel&quot;&gt;List Price:&lt;/span&gt; \n          &lt;span class=&quot;ListPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/ListPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n\n          &lt;span class=&quot;PriceLabel&quot;&gt;Our Price:&lt;/span&gt;\n          &lt;span class=&quot;OurPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/OurPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n\n          &lt;span class=&quot;PriceLabel&quot;&gt;Used Price:&lt;/span&gt; \n          &lt;span class=&quot;UsedPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/UsedPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n        &lt;/p&gt;</code></pre>\n<p>Something to note about these prices, too, is that although the used price is listed, the shopping cart will contain new items from Amazon&#39;s shelves.  You might want to compare these prices though, and make a change to the shopping cart when you get there, if a used item is acceptable.  (Another good reason for manual intervention in our Wish-of-the-Month club.)</p>\n<p>Oh yeah, and we should include one other bit of information:</p>\n<pre><code>        &lt;p&gt;(&lt;xsl:value-of select=&quot;Details/Availability&quot; /&gt;)&lt;/p&gt;</code></pre>\n<p>This tells us whether or not this item can actually be bought, at present.  Although we used this data earlier to try to filter out unavailable items, we should still display this information just in case we missed something.</p>\n<p>Finally, let&#39;s clean up and finish the HTML:</p>\n<pre><code>      &lt;/div&gt;\n    &lt;/xsl:for-each&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>Running this stylesheet (<a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\">wishes-ex5.xsl</a>) should give you a page that looks something like this in a browser:</p>\n<p><img src=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg\" alt=\"Wishlist HTML screenshot\"></p>\n<h3 id=\"scheduling-monthly-emails\">Scheduling Monthly Emails</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex6.xsl\"><code>wishes-ex6.xsl</code></a>: The sixth (and final) iteration of the stylesheet in development.</li>\n</ul>\n<p>That HTML we&#39;re producing is fine, but what we really want to do is get it delivered to us.  We could set up a scheduled run that would periodically generate a page for us to visit, but the whole point of this is laziness.  How about firing off an email with this content?  There are two things to help us with this: <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> shows us how to construct email messages with a variety of content types; and <a href=\"http://www.hmug.org/man/8/sendmail.html\" title=\"man: sendmail\"><code>sendmail</code></a> will let us send these messages out.  And then, with the help of <code>cron</code>, we can fire up this process every month.</p>\n<p>Along with producing XML, XSLT can also construct plain text output--which is just what we need to create MIME email messages.  <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> doesn&#39;t make for the most thrilling reading, but there are a few articles to be found that summarize things (such as <a href=\"http://www.abiglime.com/webmaster/articles/cgi/010698.htm\" title=\"How to encapsulate HTML in an email message\">this article</a> and <a href=\"http://www.wilsonweb.com/wmt5/html-email-multi.htm\" title=\"Sending HTML and Plain Text E-Mail Simultaneously\">this article</a>).   To make a long story short, a basic shell for an email message using MIME to include an HTML part and a plain text part looks something like this:</p>\n<pre><code>To: someone@example.org\nSubject: Some useful email subject\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=&quot;theBoundaryString&quot;\n\n--theBoundaryString\nContent-Type: text/plain\n\nSome plain text representation goes here...\n\n--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: &quot;http://www.decafbad.com/&quot;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n    &lt;p&gt;Some HTML representation goes here...&lt;/p&gt;\n&lt;/html&gt;\n\n--theBoundaryString--</code></pre>\n<p>I&#39;ve snuck in the idea of providing both an HTML version (which we&#39;ve already done) and a new plain text version.  Depending on your email program and your preferences, one type might be more useful than the other.  In any case, it&#39;s not all that hard to offer both here.  To start sending these email messages, though, we&#39;ll need an email address.  So, add that as an element in <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\">wishes.xml</a>:</p>\n<pre><code>&lt;wishes xmlns=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n  &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n  &lt;maxprice&gt;15.00&lt;/maxprice&gt;\n  &lt;associate&gt;0xdecafbad-20&lt;/associate&gt;\n  &lt;devtoken&gt;D8HVH869XA0NP&lt;/devtoken&gt;\n  &lt;wishlists&gt;\n    &lt;wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishlist&gt;\n    &lt;wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishlist&gt;\n  &lt;/wishlists&gt;\n&lt;/wishes&gt;</code></pre>\n<p>Let&#39;s extract this data into a global variable near the start of the stylesheet:</p>\n<pre><code>  &lt;xsl:variable name=&quot;email_to&quot;  select=&quot;/wishes:wishes/wishes:email&quot; /&gt;</code></pre>\n<p>Start editing the final template of the stylesheet, inserting before the start of HTML content:</p>\n<pre><code>    &lt;!-- Eat all the line breaks generated so far --&gt;\n    &lt;xsl:text&gt;To: &lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;$email_to&quot; /&gt;   \nSubject: 0xDECAFBAD&#39;s Amazon Wish-of-the-Month Club\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=&quot;theBoundaryString&quot;</code></pre>\n<p>This is the header for the email.  Up until now, we&#39;ve been generating XML with the stylesheet and haven&#39;t cared very much about any extra whitespace or line breaks which might sneak into the output.  However, in an email header, whitespace is important since a blank line is what&#39;s used to separate the headers from the body of the email message.  So, any stray blank lines will cause what we might have meant to be headers to be interpreted as part of the message instead.  Producing the first header in the email with <code>xsl:text</code> tags causes the XSL processor to throw away any leading whitespace which would have appeared before the first header.</p>\n<p>Other than this little twist, the email header looks pretty much like the shell.  We fill in the <code>To</code> address from the global variable <code>$email_to</code> and define a <code>Subject</code> line.  The <code>MIME-Version</code> and <code>Content-Type</code> headers are what enable us to include both text and HTML versions in one email.</p>\n<p>Now we can start into one of the parts:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/plain</code></pre>\n<p>This begins the plain text section of the email, using the <em>boundary string</em> as defined in the headers to delinieate the section&#39;s beginning.  The section can also have its own set of headers, of which we use only one: <code>Content-Type</code>.  Moving along, let&#39;s work on the text content itself.</p>\n<pre><code>Here are your wishlist items:\n\n&lt;xsl:value-of select=&quot;$shopping_cart_purchase_url&quot; /&gt;&lt;xsl:text&gt;\n&lt;/xsl:text&gt;</code></pre>\n<p>No shopping cart image here, but this includes the human-viewable URL which leads to a shopping cart on Amazon.com.  The usage of <code>xsl:text</code> here forces a line break where there otherwise wouldn&#39;t have been one with the usage of <code>xsl:value-of</code>.  Now, let&#39;s iterate through each of the wishlists and list out the product details:</p>\n<pre><code>&lt;xsl:for-each select=&quot;exsl:node-set($random_products)/wishes:wishitem&quot;&gt;\n---------------------------------------------------------------------------\n&lt;xsl:value-of select=&quot;wishes:wishlist/@label&quot; \n       disable-output-escaping=&quot;yes&quot; /&gt;\n---------------------------------------------------------------------------\n\n&lt;xsl:value-of select=&quot;Details/ProductName&quot; \n       disable-output-escaping=&quot;yes&quot; /&gt;\n\n&lt;xsl:for-each select=&quot;./Details/Artists/Artist | \n                      ./Details/Authors/Author&quot;&gt;\nby &lt;xsl:value-of select=&quot;.&quot;  \n   disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;/xsl:for-each&gt;\n\nCatalog:      &lt;xsl:value-of select=&quot;Details/Catalog&quot; \n   disable-output-escaping=&quot;yes&quot; /&gt;\nReleased:     &lt;xsl:value-of select=&quot;Details/ReleaseDate&quot; \n   disable-output-escaping=&quot;yes&quot; /&gt;\n\nList Price:   &lt;xsl:value-of select=&quot;Details/ListPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \nOur  Price:   &lt;xsl:value-of select=&quot;Details/UsedPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \nUsed Price:   &lt;xsl:value-of select=&quot;Details/OurPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \n\nAvailability: &lt;xsl:value-of select=&quot;Details/Availability&quot;  \n       disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;xsl:text&gt;\n\n&lt;/xsl:text&gt;\n&lt;xsl:value-of select=&quot;Details/@url&quot;  \n       disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n\n&lt;/xsl:for-each&gt;</code></pre>\n<p>Most everything in this stretch should look very similar to the HTML version we just finished.  The biggest difference is that every bit of information pulled in using <code>xsl:value-of</code> is done using the <code>disable-output-escaping</code> option.  When this is <code>yes</code>, things like ampersands are no longer escaped for valid XML output.  Since this bit of the email is plain text, we don&#39;t want to see <code>&amp;amp;</code> in album titles, so this will cause ampersands to appear unmolested.</p>\n<p>That&#39;s the plain text version finished.  Now let&#39;s create the HTML version:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: &quot;http://www.decafbad.com/2004/05/wishes&quot;</code></pre>\n<p>The boundary string appears again, signifying the end of the plain text section and the start of the HTML section.  Headers appear here which specify that what follows is HTML; that it&#39;s encoded in 7-bit characters; that it should be included in the message display itself (rather than presented as an attachment to be saved); and that all relative URLs which might appear in the HTML should be treated as having a base URL as specified.  This last part allows HTML in email to refer to images and other pages on another site without making all the URLs absolute.</p>\n<p>We don&#39;t need to make any modifications to the HTML as we built it in the last iteration of the stylesheet, so we can just include it unchanged:</p>\n<pre><code>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n...\n&lt;/html&gt;\n\n--theBoundaryString--</code></pre>\n<p>This final appearance of the boundary string is bracketed on both sides by dashes, which indicates the end of the final section of the document.  We should be ready to try this in combination with <code>sendmail</code> in a shell:</p>\n<pre><code>$ xsltproc wishes-ex6.xsl wishes.xml | sendmail -it</code></pre>\n<p>If everything has worked correctly, there should be an email arriving in your mailbox sometime soon.  (Or in my inbox, if you followed the directions literally and didn&#39;t supply your own email address.)  The options supplied to <code>sendmail</code> are fairly basic: </p>\n<ul>\n<li><code>-i</code> causes lines consisting solely of <code>.</code> <em>not</em> to be treated as an end-of-input signal.</li>\n<li><code>-t</code> causes <code>sendmail</code> to look in the message headers (ie. <code>To:</code>) for a list of recipients.</li>\n</ul>\n<p>If you don&#39;t happen to have have <code>sendmail</code> available, you might want to look into what local mail programs you have available which can accept the output from the stylesheet.</p>\n<p>Once you have this working, the final task is to schedule its monthly execution with your local <code>cron</code> installation.  If you haven&#39;t played with <code>cron</code> before, there are many resources and tutorials available (<a href=\"http://www.lysator.liu.se/~forsberg/linux/cron.html\" title=\"Doing things periodically - Using CRON\">here&#39;s one</a> and <a href=\"http://www.itworld.com/Comp/2378/swol-0825-unix101/\" title=\"Using cron basics\">here&#39;s another</a>).  You should add something like the following to your user account&#39;s <code>crontab</code>:</p>\n<pre><code>0 0 * 1 *  (cd /your/working/path; xsltproc wishes.xsl wishes.xml | sendmail -it)</code></pre>\n<p>The &quot;<code>0 0 * 1 *</code>&quot; indicates to <code>cron</code> that this set of commands should be run at midnight on the first of every months.  Note also that <code>/your/working/path</code> should be replaced by the path to where you&#39;ve been working during this project.  And finally, I&#39;ve renamed the final iteration of the stylesheet file to simply <code>wishes.xsl</code>.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>So that&#39;s it--we have an XSL stylesheet which queries Amazon Web Services for products contained in multiple wishlists; selects a random item from each; prepares a shopping cart containing those items; and finally generates an email message containing both plain text and HTML presentations of the shopping cart and selected items.</p>\n<p>Though this implementation serves the purpose I wrote about at the start of this article, there are definitely many areas where this can be improved upon or expanded:</p>\n<ul>\n<li><p>Many people think Amazon is an evil company for their use of patents.  I can&#39;t say that I&#39;m entirely happy with them for this myself, but their AWS offering is just too nice to resist tinkering with.  It might be interesting to investigate other retailers&#39; wishlist offerings, where they exist, and to see how this idea might be made to work with other (or even multiple) retailers.  Even better, come up with your own wishlist system, and a cross-retailer shopping cart.</p>\n</li>\n<li><p>I chose XSLT as the implementation technology because I thought it would be more natural to deal with Amazon&#39;s XML this way.  There are, admittedly, a few awkward parts in the resulting stylesheet however.  Sometimes it&#39;s good to see a project like this through, just to get a sense for where things do go awkward with a technology or my understanding of it.  It could be interesting to transliterate this into a scripting language like Python or Perl, perhaps using the <a href=\"http://xmlsoft.org/python.html\">libxml bindings</a> to do so.</p>\n</li>\n<li><p>The error and failure handling in this implementation are all but non-existent.  Should anything unexpected happen while dealing with Amazon Web Services, the results aren&#39;t likely to be very pretty.  You may want to consider improving in this area.  One instance I identified was to report when the sanity limit was hit in looping through wishlist pages, versus an actual end of pages.</p>\n</li>\n<li><p>If you play around with making more wishlist queries using the techniques here, you might want to consider caching the full set of data pulled in by the multiple-page calls to AWS, in order to prevent hammering Amazon&#39;s servers with repeated requests for the same data, likely unchanged.</p>\n</li>\n<li><p>I still don&#39;t know why <code>exsl:random</code> doesn&#39;t work for me.  Although I thought using a web service for random numbers was intereting, it would be very nice if I didn&#39;t have to use it.</p>\n</li>\n<li><p>The HTML presentation could certainly use some good CSS to make it more attractive.</p>\n</li>\n</ul>\n<p>Feel free to send me any suggestions, criticisms, or complaints related to this article!</p>\n<!--more-->\n<p>shortname=wishofthemonthclub3</p>\n",
    "body": "<i>This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts [one][part1] and [two][part2].</i>\r\n\r\n### Presenting the Results\r\n\r\nSome ready-made files are available for this section:\r\n* [`wishes-ex5.xsl`][wishes-ex5.xsl]: The fifth iteration of the stylesheet in development.\r\n* [`wishes.html`][wishes.html]: Sample output in HTML\r\n\r\nWe've finally gotten together all the bits of information we need--wishlists have been queried; random items have been selected; and a shopping cart has been prepared.  Now we just have to present the selections and a link to check out with the shopping cart.\r\n\r\nFirst, locate the following line toward the end of the stylesheet as we left it in the last section:\r\n\r\n        <xsl:copy-of select=\"$shopping_cart\" />\r\n\r\nDelete this, and let's replace it by building some HTML:\r\n\r\n        <xsl:variable name=\"shopping_cart_purchase_url\" \r\n                      select=\"exsl:node-set($shopping_cart)//PurchaseUrl\" />\r\n        \r\n        <html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n          <head><title>Wishlist Shopping Cart</title>\\</head>\r\n          <body>\r\n            <p class=\"title\">\r\n              Here are your wishlist items\r\n              <a href=\"{$shopping_cart_purchase_url}\">\r\n                <img src=\"http://g-images.amazon.com/images/G/01/detail/shoppingcart-header-02.gif\" />\r\n              </a> \r\n              items:\r\n            </p>\r\n\r\nWe're using the `exsl:note-set` function again to access the contents of `$shopping_cart` with an XPath expression.  We pluck out the value of the `PurchaseUrl` in the shopping cart and place it in the variable `shopping_cart_purchase_url`.  Then, after a bit of HTML preamble, we borrow a shopping cart icon from Amazon itself to construct a link to which we can browse later to purchase the selected items.  This HTML is very simple so far; it's likely too simple, so eventually you may like to toss some CSS in here to improve the looks of things.  But, I'll leave that as an exercise for the reader.  \r\n\r\nNext, let's build a display of the items selected by iterating first through the wishlists:\r\n        \r\n            <xsl:for-each select=\"exsl:node-set($random_products)/wishes:wishitem\">\r\n              <div class=\"Detail\">\r\n\r\n                <p class=\"wishlistLabel\">\r\n                  <xsl:value-of select=\"wishes:wishlist/@label\" />\r\n                </p>\r\n\r\nThis begins a block for each wishlist, starting off with a paragraph containing the label we gave each wishlist.  Next, let's include a few details about the product chosen.  Again, all of the bits of data included for each product are described in the AWS documentation in the *Overview* under *Amazon Web Services Data Model*.  Checking that out, we can see that the data includes a URL to images of several sizes representing the product.  Let's include the medium-sized image as a link to the product's detail page:\r\n\r\n                <p class=\"Product\">\r\n                  <a href=\"{Details/@url}\">\r\n                    <img src=\"{Details/ImageUrlMedium}\" />\r\n                  </a>\r\n                  <br />\r\n\r\nWe can also include the product's name as a link:\r\n\r\n                  <span class=\"ProductName\">\r\n                    <a href=\"{Details/@url}\">\r\n                      <xsl:value-of select=\"Details/ProductName\" />\r\n                    </a>\r\n                  </span>\r\n                  <br />\r\n\r\nAnd, it would be nice to provide a listing of people involved in creating the product (ie. the artists and/or authors):\r\n\r\n              <xsl:for-each select=\"./Details/Artists/Artist | \r\n                                    ./Details/Authors/Author\">\r\n                <span class=\"Author\">by <xsl:value-of select=\".\" /></span><br />\r\n              </xsl:for-each>\r\n\r\nNote that here, the XPath selecting the data is just a bit more involved, since this information can be found in both `Artist` and `Author` elements.  In another case, we might care to make a distinction, but it really isn't all that important for this project.  The data model also provides an indication of from which catalog this product came, as well as its date of release.  Let's include that for good measure:\r\n              \r\n              (\r\n              <xsl:value-of select=\"Details/Catalog\" /> -\r\n              <span class=\"ReleaseDate\">\r\n                <xsl:value-of select=\"Details/ReleaseDate\" />\r\n              </span>\r\n              )\r\n              <br />\r\n            </p>\r\n\r\nAnother thing that would be nice to know is how much this thing costs--we've got this information provided in the XML data as well, so let's include it:\r\n            \r\n            <p>\r\n              <span class=\"PriceLabel\">List Price:</span> \r\n              <span class=\"ListPrice\">\r\n                <xsl:value-of select=\"Details/ListPrice\" />\r\n              </span>\r\n              <br />\r\n              \r\n              <span class=\"PriceLabel\">Our Price:</span>\r\n              <span class=\"OurPrice\">\r\n                <xsl:value-of select=\"Details/OurPrice\" />\r\n              </span>\r\n              <br />\r\n\r\n              <span class=\"PriceLabel\">Used Price:</span> \r\n              <span class=\"UsedPrice\">\r\n                <xsl:value-of select=\"Details/UsedPrice\" />\r\n              </span>\r\n              <br />\r\n            </p>\r\n\r\nSomething to note about these prices, too, is that although the used price is listed, the shopping cart will contain new items from Amazon's shelves.  You might want to compare these prices though, and make a change to the shopping cart when you get there, if a used item is acceptable.  (Another good reason for manual intervention in our Wish-of-the-Month club.)\r\n\r\nOh yeah, and we should include one other bit of information:\r\n            \r\n            <p>(<xsl:value-of select=\"Details/Availability\" />)</p>\r\n\r\nThis tells us whether or not this item can actually be bought, at present.  Although we used this data earlier to try to filter out unavailable items, we should still display this information just in case we missed something.\r\n\r\nFinally, let's clean up and finish the HTML:\r\n            \r\n          </div>\r\n        </xsl:for-each>\r\n        \r\n      </body>\r\n    </html>\r\n\r\nRunning this stylesheet ([wishes-ex5.xsl][wishes-ex5.xsl]) should give you a page that looks something like this in a browser:\r\n\r\n![Wishlist HTML screenshot][wishes_html_screenshot]\r\n\r\n### Scheduling Monthly Emails\r\n\r\nSome ready-made files are available for this section:\r\n* [`wishes-ex6.xsl`][wishes-ex6.xsl]: The sixth (and final) iteration of the stylesheet in development.\r\n\r\nThat HTML we're producing is fine, but what we really want to do is get it delivered to us.  We could set up a scheduled run that would periodically generate a page for us to visit, but the whole point of this is laziness.  How about firing off an email with this content?  There are two things to help us with this: [RFC 1521][rfc1521] shows us how to construct email messages with a variety of content types; and [`sendmail`][man_sendmail] will let us send these messages out.  And then, with the help of `cron`, we can fire up this process every month.\r\n\r\nAlong with producing XML, XSLT can also construct plain text output--which is just what we need to create MIME email messages.  [RFC 1521][rfc1521] doesn't make for the most thrilling reading, but there are a few articles to be found that summarize things (such as [this article][email_mime_and_html] and [this article][email_html_and_text]).   To make a long story short, a basic shell for an email message using MIME to include an HTML part and a plain text part looks something like this:\r\n\r\n    To: someone@example.org\r\n    Subject: Some useful email subject\r\n    MIME-Version: 1.0\r\n    Content-Type: multipart/alternative; boundary=\"theBoundaryString\"\r\n\r\n    --theBoundaryString\r\n    Content-Type: text/plain\r\n\r\n    Some plain text representation goes here...\r\n\r\n    --theBoundaryString\r\n    Content-Type: text/html\r\n    Content-Transfer-Encoding: 7bit\r\n    Content-Disposition: inline\r\n    Content-Base: \"http://www.decafbad.com/\"\r\n\r\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n        <p>Some HTML representation goes here...</p>\r\n    </html>\r\n\r\n    --theBoundaryString--\r\n\r\nI've snuck in the idea of providing both an HTML version (which we've already done) and a new plain text version.  Depending on your email program and your preferences, one type might be more useful than the other.  In any case, it's not all that hard to offer both here.  To start sending these email messages, though, we'll need an email address.  So, add that as an element in [wishes.xml][wishes.xml]:\r\n\r\n    <wishes xmlns=\"http://www.decafbad.com/2004/05/wishes\">\r\n      <email>deus_x@pobox.com</email>\r\n      <maxprice>15.00</maxprice>\r\n      <associate>0xdecafbad-20</associate>\r\n      <devtoken>D8HVH869XA0NP</devtoken>\r\n      <wishlists>\r\n        <wishlist label=\"Me\">1QWYI6P2JF3Q5</wishlist>\r\n        <wishlist label=\"The Girl\">35OIOYWQ9XQAE</wishlist>\r\n      </wishlists>\r\n    </wishes>\r\n\r\nLet's extract this data into a global variable near the start of the stylesheet:\r\n\r\n      <xsl:variable name=\"email_to\"  select=\"/wishes:wishes/wishes:email\" />\r\n\r\nStart editing the final template of the stylesheet, inserting before the start of HTML content:\r\n\r\n        <!-- Eat all the line breaks generated so far -->\r\n        <xsl:text>To: </xsl:text><xsl:value-of select=\"$email_to\" />   \r\n    Subject: 0xDECAFBAD's Amazon Wish-of-the-Month Club\r\n    MIME-Version: 1.0\r\n    Content-Type: multipart/alternative; boundary=\"theBoundaryString\"\r\n\r\nThis is the header for the email.  Up until now, we've been generating XML with the stylesheet and haven't cared very much about any extra whitespace or line breaks which might sneak into the output.  However, in an email header, whitespace is important since a blank line is what's used to separate the headers from the body of the email message.  So, any stray blank lines will cause what we might have meant to be headers to be interpreted as part of the message instead.  Producing the first header in the email with `xsl:text` tags causes the XSL processor to throw away any leading whitespace which would have appeared before the first header.\r\n\r\nOther than this little twist, the email header looks pretty much like the shell.  We fill in the `To` address from the global variable `$email_to` and define a `Subject` line.  The `MIME-Version` and `Content-Type` headers are what enable us to include both text and HTML versions in one email.\r\n\r\nNow we can start into one of the parts:\r\n\r\n    --theBoundaryString\r\n    Content-Type: text/plain\r\n\r\nThis begins the plain text section of the email, using the *boundary string* as defined in the headers to delinieate the section's beginning.  The section can also have its own set of headers, of which we use only one: `Content-Type`.  Moving along, let's work on the text content itself.\r\n\r\n    Here are your wishlist items:\r\n\r\n    <xsl:value-of select=\"$shopping_cart_purchase_url\" /><xsl:text>\r\n    </xsl:text>\r\n\r\nNo shopping cart image here, but this includes the human-viewable URL which leads to a shopping cart on Amazon.com.  The usage of `xsl:text` here forces a line break where there otherwise wouldn't have been one with the usage of `xsl:value-of`.  Now, let's iterate through each of the wishlists and list out the product details:\r\n\r\n    <xsl:for-each select=\"exsl:node-set($random_products)/wishes:wishitem\">\r\n    ---------------------------------------------------------------------------\r\n    <xsl:value-of select=\"wishes:wishlist/@label\" \r\n           disable-output-escaping=\"yes\" />\r\n    ---------------------------------------------------------------------------\r\n\r\n    <xsl:value-of select=\"Details/ProductName\" \r\n           disable-output-escaping=\"yes\" />\r\n\r\n    <xsl:for-each select=\"./Details/Artists/Artist | \r\n                          ./Details/Authors/Author\">\r\n    by <xsl:value-of select=\".\"  \r\n       disable-output-escaping=\"yes\"/>\r\n    </xsl:for-each>\r\n\r\n    Catalog:      <xsl:value-of select=\"Details/Catalog\" \r\n       disable-output-escaping=\"yes\" />\r\n    Released:     <xsl:value-of select=\"Details/ReleaseDate\" \r\n       disable-output-escaping=\"yes\" />\r\n\r\n    List Price:   <xsl:value-of select=\"Details/ListPrice\"  \r\n         disable-output-escaping=\"yes\"/> \r\n    Our  Price:   <xsl:value-of select=\"Details/UsedPrice\"  \r\n         disable-output-escaping=\"yes\"/> \r\n    Used Price:   <xsl:value-of select=\"Details/OurPrice\"  \r\n         disable-output-escaping=\"yes\"/> \r\n            \r\n    Availability: <xsl:value-of select=\"Details/Availability\"  \r\n           disable-output-escaping=\"yes\"/>\r\n    <xsl:text>\r\n\r\n    </xsl:text>\r\n    <xsl:value-of select=\"Details/@url\"  \r\n           disable-output-escaping=\"yes\"/>\r\n    <xsl:text>\r\n    </xsl:text>\r\n\r\n    </xsl:for-each>\r\n\r\nMost everything in this stretch should look very similar to the HTML version we just finished.  The biggest difference is that every bit of information pulled in using `xsl:value-of` is done using the `disable-output-escaping` option.  When this is `yes`, things like ampersands are no longer escaped for valid XML output.  Since this bit of the email is plain text, we don't want to see `&amp;` in album titles, so this will cause ampersands to appear unmolested.\r\n\r\nThat's the plain text version finished.  Now let's create the HTML version:\r\n\r\n    --theBoundaryString\r\n    Content-Type: text/html\r\n    Content-Transfer-Encoding: 7bit\r\n    Content-Disposition: inline\r\n    Content-Base: \"http://www.decafbad.com/2004/05/wishes\"\r\n\r\nThe boundary string appears again, signifying the end of the plain text section and the start of the HTML section.  Headers appear here which specify that what follows is HTML; that it's encoded in 7-bit characters; that it should be included in the message display itself (rather than presented as an attachment to be saved); and that all relative URLs which might appear in the HTML should be treated as having a base URL as specified.  This last part allows HTML in email to refer to images and other pages on another site without making all the URLs absolute.\r\n\r\nWe don't need to make any modifications to the HTML as we built it in the last iteration of the stylesheet, so we can just include it unchanged:\r\n\r\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n    ...\r\n    </html>\r\n\r\n    --theBoundaryString--\r\n    \r\nThis final appearance of the boundary string is bracketed on both sides by dashes, which indicates the end of the final section of the document.  We should be ready to try this in combination with `sendmail` in a shell:\r\n\r\n    $ xsltproc wishes-ex6.xsl wishes.xml | sendmail -it\r\n\r\nIf everything has worked correctly, there should be an email arriving in your mailbox sometime soon.  (Or in my inbox, if you followed the directions literally and didn't supply your own email address.)  The options supplied to `sendmail` are fairly basic: \r\n\r\n* `-i` causes lines consisting solely of `.` *not* to be treated as an end-of-input signal.\r\n* `-t` causes `sendmail` to look in the message headers (ie. `To:`) for a list of recipients.\r\n\r\nIf you don't happen to have have `sendmail` available, you might want to look into what local mail programs you have available which can accept the output from the stylesheet.\r\n\r\nOnce you have this working, the final task is to schedule its monthly execution with your local `cron` installation.  If you haven't played with `cron` before, there are many resources and tutorials available ([here's one][cron1] and [here's another][cron2]).  You should add something like the following to your user account's `crontab`:\r\n\r\n    0 0 * 1 *  (cd /your/working/path; xsltproc wishes.xsl wishes.xml | sendmail -it)\r\n\r\nThe \"`0 0 * 1 *`\" indicates to `cron` that this set of commands should be run at midnight on the first of every months.  Note also that `/your/working/path` should be replaced by the path to where you've been working during this project.  And finally, I've renamed the final iteration of the stylesheet file to simply `wishes.xsl`.\r\n\r\n### Conclusion\r\n\r\nSo that's it--we have an XSL stylesheet which queries Amazon Web Services for products contained in multiple wishlists; selects a random item from each; prepares a shopping cart containing those items; and finally generates an email message containing both plain text and HTML presentations of the shopping cart and selected items.\r\n\r\nThough this implementation serves the purpose I wrote about at the start of this article, there are definitely many areas where this can be improved upon or expanded:\r\n\r\n* Many people think Amazon is an evil company for their use of patents.  I can't say that I'm entirely happy with them for this myself, but their AWS offering is just too nice to resist tinkering with.  It might be interesting to investigate other retailers' wishlist offerings, where they exist, and to see how this idea might be made to work with other (or even multiple) retailers.  Even better, come up with your own wishlist system, and a cross-retailer shopping cart.\r\n\r\n* I chose XSLT as the implementation technology because I thought it would be more natural to deal with Amazon's XML this way.  There are, admittedly, a few awkward parts in the resulting stylesheet however.  Sometimes it's good to see a project like this through, just to get a sense for where things do go awkward with a technology or my understanding of it.  It could be interesting to transliterate this into a scripting language like Python or Perl, perhaps using the [libxml bindings][python_libxml] to do so.\r\n\r\n* The error and failure handling in this implementation are all but non-existent.  Should anything unexpected happen while dealing with Amazon Web Services, the results aren't likely to be very pretty.  You may want to consider improving in this area.  One instance I identified was to report when the sanity limit was hit in looping through wishlist pages, versus an actual end of pages.\r\n\r\n* If you play around with making more wishlist queries using the techniques here, you might want to consider caching the full set of data pulled in by the multiple-page calls to AWS, in order to prevent hammering Amazon's servers with repeated requests for the same data, likely unchanged.\r\n\r\n* I still don't know why `exsl:random` doesn't work for me.  Although I thought using a web service for random numbers was intereting, it would be very nice if I didn't have to use it.\r\n\r\n* The HTML presentation could certainly use some good CSS to make it more attractive.\r\n\r\nFeel free to send me any suggestions, criticisms, or complaints related to this article!\r\n\r\n[missadroit]: http://missadroit.livejournal.com \"Miss Adroit, my favorite girl in the world\"\r\n[mywishlist]: http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5 \"Buy me something, will ya?\"\r\n[herwishlist]: http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE \"Buy her something, will ya?\"\r\n[amazonapi]: http://www.amazon.com/gp/aws/landing.html \"Amazon Web Services\"\r\n[libxml]: http://www.xmlsoft.org/\r\n[xalan]: http://xml.apache.org/xalan-j/\r\n[sablotron]: http://www.gingerall.com/charlie/ga/xml/p_sab.xml\r\n[saxon]: http://saxon.sourceforge.net/\r\n[exslt]: http://www.exslt.org/\r\n[libxslt]: http://www.xmlsoft.org/XSLT.html\r\n[spideringhacks]: http://www.amazon.com/exec/obidos/ASIN/0596005776/0xdecafbad-20 \"O'Reilly's Spidering Hacks\"\r\n[xslscraper]: http://www.decafbad.com/twiki/bin/view/Main/XslScraper \"Scrape RSS and Atom from HTML using Tidy and XSLT\"\r\n[awsdownload]: http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&#38;node=3434641&#38;no=3435361&#38;me=A36L942TSJ2AJA\r\n[awstoken]: https://associates.amazon.com/exec/panama/associates/join/developer/application.html\r\n[amazonassociate]: http://associates.amazon.com\r\n[wlsearch]: http://www.amazon.com/gp/registry/search.html/002-7899886-3676027?%5Fencoding=UTF8&#38;type=wishlist\r\n[wlurl]: http://xml.amazon.com/onca/xml3?t=0xdecafbad-20&#38;dev-t=D8HVH869XA0NP&#38;type=lite&#38;WishlistSearch=35OIOYWQ9XQAE&#38;f=xml\r\n[detailsurl]: http://www.amazon.com/exec/obidos/ASIN/0262133601/0xdecafbad-20?dev-t=D8HVH869XA0NP%26camp=2025%26link_code=xm2\r\n[awslite]: http://xml.amazon.com/schemas3/dev-lite.xsd\r\n[fink]: http://fink.sourceforge.net\r\n[testxslt]: http://www.entropy.ch:16080/software/macosx/#testxslt\r\n[darwinports]: http://darwinports.opendarwin.org/\r\n[curl]: http://www.decafbad.com/#TODO\r\n[wget]: http://www.decafbad.com/#TODO\r\n[xpconcat]: http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-concat\r\n[xpdocument]: http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-document\r\n[wishescvs]: http://www.decafbad.com/cvs/hacks/wishes/\r\n[wishes.tar.gz]: http://www.decafbad.com/cvs/hacks/wishes/wishes.tar.gz?tarball=1 \"All Wish-of-the-Month Club files wrapped up in a tarball\"\r\n[wishes.xml]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\r\n[wishes.html]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.html\r\n[wishes-ex1.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\r\n[wishes-ex2.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex2.xsl\r\n[wishes-ex3.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex3.xsl\r\n[wishes-ex4.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex4.xsl\r\n[wishes-ex5.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\r\n[wishes-ex6.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex6.xsl\r\n[random-xml]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/random-xml\r\n[wishes_html_screenshot]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg\r\n[xslt_iteration]: http://www.dpawson.co.uk/xsl/sect2/N4806.html \"Iteration in XSLT\"\r\n[xslt_recursion]: http://www-106.ibm.com/developerworks/xml/library/x-xslrecur/ \"Use recursion effectively in XSL\"\r\n[exsl_random]: http://www.exslt.org/math/functions/random/index.html\r\n[exsl_node_set]: http://www.exslt.org/exsl/functions/node-set/index.html\r\n[rand_url]: http://www.decafbad.com/2004/05/random-xml?int=1&#38;min=10&#38;max=20 \"A random integer between 10 and 20, in XML\"\r\n[xslt_result_tree_fragment]: http://www.w3.org/TR/xslt#section-Result-Tree-Fragments\r\n\r\n[email_attach_anatomy]: http://www.dpo.uab.edu/Email/attach.html \"Anatomy of an Email Attachment\"\r\n[email_mime_and_html]: http://www.abiglime.com/webmaster/articles/cgi/010698.htm \"How to encapsulate HTML in an email message\"\r\n\r\n[email_html_and_text]: http://www.wilsonweb.com/wmt5/html-email-multi.htm \"Sending HTML and Plain Text E-Mail Simultaneously\"\r\n[man_sendmail]: http://www.hmug.org/man/8/sendmail.html \"man: sendmail\"\r\n[rfc1521]: http://www.faqs.org/rfcs/rfc1521.html \"RFC 1521\"\r\n[cron1]: http://www.lysator.liu.se/~forsberg/linux/cron.html \"Doing things periodically - Using CRON\"\r\n[cron2]: http://www.itworld.com/Comp/2378/swol-0825-unix101/ \"Using cron basics\"\r\n[python_libxml]: http://xmlsoft.org/python.html \r\n[part2]: http://www.decafbad.com/blog/2004/06/27/wishofthemonthclub2\r\n[part1]: http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\r\n<!--more-->\r\nshortname=wishofthemonthclub3\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/07/06/wishofthemonthclub3",
    "thumbnail": "http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg",
    "summary": "<p><i>This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">one</a> and <a href=\"http://www.decafbad.com/blog/2004/06/27/wishofthemonthclub2\">two</a>.</i></p>\n<h3 id=\"presenting-the-results\">Presenting the Results</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\"><code>wishes-ex5.xsl</code></a>: The fifth iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.html\"><code>wishes.html</code></a>: Sample output in HTML</li>\n</ul>\n<p>We&apos;ve finally gotten together all the bits of information we need--wishlists have been queried; random items have been selected; and a shopping cart has been prepared.  Now we just have to present the selections and a link to check out with the shopping cart.</p>\n<p>First, locate the following line toward the end of the stylesheet as we left it in the last section:</p>\n<pre><code>    &lt;xsl:copy-of select=&quot;$shopping_cart&quot; /&gt;</code></pre>\n<p>Delete this, and let&apos;s replace it by building some HTML:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart_purchase_url&quot; \n                  select=&quot;exsl:node-set($shopping_cart)//PurchaseUrl&quot; /&gt;\n\n    &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n      &lt;head&gt;&lt;title&gt;Wishlist Shopping Cart&lt;/title&gt;\\&lt;/head&gt;\n      &lt;body&gt;\n        &lt;p class=&quot;title&quot;&gt;\n          Here are your wishlist items\n          &lt;a href=&quot;{$shopping_cart_purchase_url}&quot;&gt;\n            &lt;img src=&quot;http://g-images.amazon.com/images/G/01/detail/shoppingcart-header-02.gif&quot; /&gt;\n          &lt;/a&gt; \n          items:\n        &lt;/p&gt;</code></pre>\n<p>We&apos;re using the <code>exsl:note-set</code> function again to access the contents of <code>$shopping_cart</code> with an XPath expression.  We pluck out the value of the <code>PurchaseUrl</code> in the shopping cart and place it in the variable <code>shopping_cart_purchase_url</code>.  Then, after a bit of HTML preamble, we borrow a shopping cart icon from Amazon itself to construct a link to which we can browse later to purchase the selected items.  This HTML is very simple so far; it&apos;s likely too simple, so eventually you may like to toss some CSS in here to improve the looks of things.  But, I&apos;ll leave that as an exercise for the reader.  </p>\n<p>Next, let&apos;s build a display of the items selected by iterating first through the wishlists:</p>\n<pre><code>        &lt;xsl:for-each select=&quot;exsl:node-set($random_products)/wishes:wishitem&quot;&gt;\n          &lt;div class=&quot;Detail&quot;&gt;\n\n            &lt;p class=&quot;wishlistLabel&quot;&gt;\n              &lt;xsl:value-of select=&quot;wishes:wishlist/@label&quot; /&gt;\n            &lt;/p&gt;</code></pre>\n<p>This begins a block for each wishlist, starting off with a paragraph containing the label we gave each wishlist.  Next, let&apos;s include a few details about the product chosen.  Again, all of the bits of data included for each product are described in the AWS documentation in the <em>Overview</em> under <em>Amazon Web Services Data Model</em>.  Checking that out, we can see that the data includes a URL to images of several sizes representing the product.  Let&apos;s include the medium-sized image as a link to the product&apos;s detail page:</p>\n<pre><code>            &lt;p class=&quot;Product&quot;&gt;\n              &lt;a href=&quot;{Details/@url}&quot;&gt;\n                &lt;img src=&quot;{Details/ImageUrlMedium}&quot; /&gt;\n              &lt;/a&gt;\n              &lt;br /&gt;</code></pre>\n<p>We can also include the product&apos;s name as a link:</p>\n<pre><code>              &lt;span class=&quot;ProductName&quot;&gt;\n                &lt;a href=&quot;{Details/@url}&quot;&gt;\n                  &lt;xsl:value-of select=&quot;Details/ProductName&quot; /&gt;\n                &lt;/a&gt;\n              &lt;/span&gt;\n              &lt;br /&gt;</code></pre>\n<p>And, it would be nice to provide a listing of people involved in creating the product (ie. the artists and/or authors):</p>\n<pre><code>          &lt;xsl:for-each select=&quot;./Details/Artists/Artist | \n                                ./Details/Authors/Author&quot;&gt;\n            &lt;span class=&quot;Author&quot;&gt;by &lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/span&gt;&lt;br /&gt;\n          &lt;/xsl:for-each&gt;</code></pre>\n<p>Note that here, the XPath selecting the data is just a bit more involved, since this information can be found in both <code>Artist</code> and <code>Author</code> elements.  In another case, we might care to make a distinction, but it really isn&apos;t all that important for this project.  The data model also provides an indication of from which catalog this product came, as well as its date of release.  Let&apos;s include that for good measure:</p>\n<pre><code>          (\n          &lt;xsl:value-of select=&quot;Details/Catalog&quot; /&gt; -\n          &lt;span class=&quot;ReleaseDate&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/ReleaseDate&quot; /&gt;\n          &lt;/span&gt;\n          )\n          &lt;br /&gt;\n        &lt;/p&gt;</code></pre>\n<p>Another thing that would be nice to know is how much this thing costs--we&apos;ve got this information provided in the XML data as well, so let&apos;s include it:</p>\n<pre><code>        &lt;p&gt;\n          &lt;span class=&quot;PriceLabel&quot;&gt;List Price:&lt;/span&gt; \n          &lt;span class=&quot;ListPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/ListPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n\n          &lt;span class=&quot;PriceLabel&quot;&gt;Our Price:&lt;/span&gt;\n          &lt;span class=&quot;OurPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/OurPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n\n          &lt;span class=&quot;PriceLabel&quot;&gt;Used Price:&lt;/span&gt; \n          &lt;span class=&quot;UsedPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/UsedPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n        &lt;/p&gt;</code></pre>\n<p>Something to note about these prices, too, is that although the used price is listed, the shopping cart will contain new items from Amazon&apos;s shelves.  You might want to compare these prices though, and make a change to the shopping cart when you get there, if a used item is acceptable.  (Another good reason for manual intervention in our Wish-of-the-Month club.)</p>\n<p>Oh yeah, and we should include one other bit of information:</p>\n<pre><code>        &lt;p&gt;(&lt;xsl:value-of select=&quot;Details/Availability&quot; /&gt;)&lt;/p&gt;</code></pre>\n<p>This tells us whether or not this item can actually be bought, at present.  Although we used this data earlier to try to filter out unavailable items, we should still display this information just in case we missed something.</p>\n<p>Finally, let&apos;s clean up and finish the HTML:</p>\n<pre><code>      &lt;/div&gt;\n    &lt;/xsl:for-each&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>Running this stylesheet (<a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\">wishes-ex5.xsl</a>) should give you a page that looks something like this in a browser:</p>\n<p><img src=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg\" alt=\"Wishlist HTML screenshot\"></p>\n<h3 id=\"scheduling-monthly-emails\">Scheduling Monthly Emails</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex6.xsl\"><code>wishes-ex6.xsl</code></a>: The sixth (and final) iteration of the stylesheet in development.</li>\n</ul>\n<p>That HTML we&apos;re producing is fine, but what we really want to do is get it delivered to us.  We could set up a scheduled run that would periodically generate a page for us to visit, but the whole point of this is laziness.  How about firing off an email with this content?  There are two things to help us with this: <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> shows us how to construct email messages with a variety of content types; and <a href=\"http://www.hmug.org/man/8/sendmail.html\" title=\"man: sendmail\"><code>sendmail</code></a> will let us send these messages out.  And then, with the help of <code>cron</code>, we can fire up this process every month.</p>\n<p>Along with producing XML, XSLT can also construct plain text output--which is just what we need to create MIME email messages.  <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> doesn&apos;t make for the most thrilling reading, but there are a few articles to be found that summarize things (such as <a href=\"http://www.abiglime.com/webmaster/articles/cgi/010698.htm\" title=\"How to encapsulate HTML in an email message\">this article</a> and <a href=\"http://www.wilsonweb.com/wmt5/html-email-multi.htm\" title=\"Sending HTML and Plain Text E-Mail Simultaneously\">this article</a>).   To make a long story short, a basic shell for an email message using MIME to include an HTML part and a plain text part looks something like this:</p>\n<pre><code>To: someone@example.org\nSubject: Some useful email subject\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=&quot;theBoundaryString&quot;\n\n--theBoundaryString\nContent-Type: text/plain\n\nSome plain text representation goes here...\n\n--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: &quot;http://www.decafbad.com/&quot;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n    &lt;p&gt;Some HTML representation goes here...&lt;/p&gt;\n&lt;/html&gt;\n\n--theBoundaryString--</code></pre>\n<p>I&apos;ve snuck in the idea of providing both an HTML version (which we&apos;ve already done) and a new plain text version.  Depending on your email program and your preferences, one type might be more useful than the other.  In any case, it&apos;s not all that hard to offer both here.  To start sending these email messages, though, we&apos;ll need an email address.  So, add that as an element in <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\">wishes.xml</a>:</p>\n<pre><code>&lt;wishes xmlns=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n  &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n  &lt;maxprice&gt;15.00&lt;/maxprice&gt;\n  &lt;associate&gt;0xdecafbad-20&lt;/associate&gt;\n  &lt;devtoken&gt;D8HVH869XA0NP&lt;/devtoken&gt;\n  &lt;wishlists&gt;\n    &lt;wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishlist&gt;\n    &lt;wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishlist&gt;\n  &lt;/wishlists&gt;\n&lt;/wishes&gt;</code></pre>\n<p>Let&apos;s extract this data into a global variable near the start of the stylesheet:</p>\n<pre><code>  &lt;xsl:variable name=&quot;email_to&quot;  select=&quot;/wishes:wishes/wishes:email&quot; /&gt;</code></pre>\n<p>Start editing the final template of the stylesheet, inserting before the start of HTML content:</p>\n<pre><code>    &lt;!-- Eat all the line breaks generated so far --&gt;\n    &lt;xsl:text&gt;To: &lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;$email_to&quot; /&gt;   \nSubject: 0xDECAFBAD&apos;s Amazon Wish-of-the-Month Club\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=&quot;theBoundaryString&quot;</code></pre>\n<p>This is the header for the email.  Up until now, we&apos;ve been generating XML with the stylesheet and haven&apos;t cared very much about any extra whitespace or line breaks which might sneak into the output.  However, in an email header, whitespace is important since a blank line is what&apos;s used to separate the headers from the body of the email message.  So, any stray blank lines will cause what we might have meant to be headers to be interpreted as part of the message instead.  Producing the first header in the email with <code>xsl:text</code> tags causes the XSL processor to throw away any leading whitespace which would have appeared before the first header.</p>\n<p>Other than this little twist, the email header looks pretty much like the shell.  We fill in the <code>To</code> address from the global variable <code>$email_to</code> and define a <code>Subject</code> line.  The <code>MIME-Version</code> and <code>Content-Type</code> headers are what enable us to include both text and HTML versions in one email.</p>\n<p>Now we can start into one of the parts:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/plain</code></pre>\n<p>This begins the plain text section of the email, using the <em>boundary string</em> as defined in the headers to delinieate the section&apos;s beginning.  The section can also have its own set of headers, of which we use only one: <code>Content-Type</code>.  Moving along, let&apos;s work on the text content itself.</p>\n<pre><code>Here are your wishlist items:\n\n&lt;xsl:value-of select=&quot;$shopping_cart_purchase_url&quot; /&gt;&lt;xsl:text&gt;\n&lt;/xsl:text&gt;</code></pre>\n<p>No shopping cart image here, but this includes the human-viewable URL which leads to a shopping cart on Amazon.com.  The usage of <code>xsl:text</code> here forces a line break where there otherwise wouldn&apos;t have been one with the usage of <code>xsl:value-of</code>.  Now, let&apos;s iterate through each of the wishlists and list out the product details:</p>\n<pre><code>&lt;xsl:for-each select=&quot;exsl:node-set($random_products)/wishes:wishitem&quot;&gt;\n---------------------------------------------------------------------------\n&lt;xsl:value-of select=&quot;wishes:wishlist/@label&quot; \n       disable-output-escaping=&quot;yes&quot; /&gt;\n---------------------------------------------------------------------------\n\n&lt;xsl:value-of select=&quot;Details/ProductName&quot; \n       disable-output-escaping=&quot;yes&quot; /&gt;\n\n&lt;xsl:for-each select=&quot;./Details/Artists/Artist | \n                      ./Details/Authors/Author&quot;&gt;\nby &lt;xsl:value-of select=&quot;.&quot;  \n   disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;/xsl:for-each&gt;\n\nCatalog:      &lt;xsl:value-of select=&quot;Details/Catalog&quot; \n   disable-output-escaping=&quot;yes&quot; /&gt;\nReleased:     &lt;xsl:value-of select=&quot;Details/ReleaseDate&quot; \n   disable-output-escaping=&quot;yes&quot; /&gt;\n\nList Price:   &lt;xsl:value-of select=&quot;Details/ListPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \nOur  Price:   &lt;xsl:value-of select=&quot;Details/UsedPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \nUsed Price:   &lt;xsl:value-of select=&quot;Details/OurPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \n\nAvailability: &lt;xsl:value-of select=&quot;Details/Availability&quot;  \n       disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;xsl:text&gt;\n\n&lt;/xsl:text&gt;\n&lt;xsl:value-of select=&quot;Details/@url&quot;  \n       disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n\n&lt;/xsl:for-each&gt;</code></pre>\n<p>Most everything in this stretch should look very similar to the HTML version we just finished.  The biggest difference is that every bit of information pulled in using <code>xsl:value-of</code> is done using the <code>disable-output-escaping</code> option.  When this is <code>yes</code>, things like ampersands are no longer escaped for valid XML output.  Since this bit of the email is plain text, we don&apos;t want to see <code>&amp;amp;</code> in album titles, so this will cause ampersands to appear unmolested.</p>\n<p>That&apos;s the plain text version finished.  Now let&apos;s create the HTML version:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: &quot;http://www.decafbad.com/2004/05/wishes&quot;</code></pre>\n<p>The boundary string appears again, signifying the end of the plain text section and the start of the HTML section.  Headers appear here which specify that what follows is HTML; that it&apos;s encoded in 7-bit characters; that it should be included in the message display itself (rather than presented as an attachment to be saved); and that all relative URLs which might appear in the HTML should be treated as having a base URL as specified.  This last part allows HTML in email to refer to images and other pages on another site without making all the URLs absolute.</p>\n<p>We don&apos;t need to make any modifications to the HTML as we built it in the last iteration of the stylesheet, so we can just include it unchanged:</p>\n<pre><code>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n...\n&lt;/html&gt;\n\n--theBoundaryString--</code></pre>\n<p>This final appearance of the boundary string is bracketed on both sides by dashes, which indicates the end of the final section of the document.  We should be ready to try this in combination with <code>sendmail</code> in a shell:</p>\n<pre><code>$ xsltproc wishes-ex6.xsl wishes.xml | sendmail -it</code></pre>\n<p>If everything has worked correctly, there should be an email arriving in your mailbox sometime soon.  (Or in my inbox, if you followed the directions literally and didn&apos;t supply your own email address.)  The options supplied to <code>sendmail</code> are fairly basic: </p>\n<ul>\n<li><code>-i</code> causes lines consisting solely of <code>.</code> <em>not</em> to be treated as an end-of-input signal.</li>\n<li><code>-t</code> causes <code>sendmail</code> to look in the message headers (ie. <code>To:</code>) for a list of recipients.</li>\n</ul>\n<p>If you don&apos;t happen to have have <code>sendmail</code> available, you might want to look into what local mail programs you have available which can accept the output from the stylesheet.</p>\n<p>Once you have this working, the final task is to schedule its monthly execution with your local <code>cron</code> installation.  If you haven&apos;t played with <code>cron</code> before, there are many resources and tutorials available (<a href=\"http://www.lysator.liu.se/~forsberg/linux/cron.html\" title=\"Doing things periodically - Using CRON\">here&apos;s one</a> and <a href=\"http://www.itworld.com/Comp/2378/swol-0825-unix101/\" title=\"Using cron basics\">here&apos;s another</a>).  You should add something like the following to your user account&apos;s <code>crontab</code>:</p>\n<pre><code>0 0 * 1 *  (cd /your/working/path; xsltproc wishes.xsl wishes.xml | sendmail -it)</code></pre>\n<p>The &quot;<code>0 0 * 1 *</code>&quot; indicates to <code>cron</code> that this set of commands should be run at midnight on the first of every months.  Note also that <code>/your/working/path</code> should be replaced by the path to where you&apos;ve been working during this project.  And finally, I&apos;ve renamed the final iteration of the stylesheet file to simply <code>wishes.xsl</code>.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>So that&apos;s it--we have an XSL stylesheet which queries Amazon Web Services for products contained in multiple wishlists; selects a random item from each; prepares a shopping cart containing those items; and finally generates an email message containing both plain text and HTML presentations of the shopping cart and selected items.</p>\n<p>Though this implementation serves the purpose I wrote about at the start of this article, there are definitely many areas where this can be improved upon or expanded:</p>\n<ul>\n<li><p>Many people think Amazon is an evil company for their use of patents.  I can&apos;t say that I&apos;m entirely happy with them for this myself, but their AWS offering is just too nice to resist tinkering with.  It might be interesting to investigate other retailers&apos; wishlist offerings, where they exist, and to see how this idea might be made to work with other (or even multiple) retailers.  Even better, come up with your own wishlist system, and a cross-retailer shopping cart.</p>\n</li>\n<li><p>I chose XSLT as the implementation technology because I thought it would be more natural to deal with Amazon&apos;s XML this way.  There are, admittedly, a few awkward parts in the resulting stylesheet however.  Sometimes it&apos;s good to see a project like this through, just to get a sense for where things do go awkward with a technology or my understanding of it.  It could be interesting to transliterate this into a scripting language like Python or Perl, perhaps using the <a href=\"http://xmlsoft.org/python.html\">libxml bindings</a> to do so.</p>\n</li>\n<li><p>The error and failure handling in this implementation are all but non-existent.  Should anything unexpected happen while dealing with Amazon Web Services, the results aren&apos;t likely to be very pretty.  You may want to consider improving in this area.  One instance I identified was to report when the sanity limit was hit in looping through wishlist pages, versus an actual end of pages.</p>\n</li>\n<li><p>If you play around with making more wishlist queries using the techniques here, you might want to consider caching the full set of data pulled in by the multiple-page calls to AWS, in order to prevent hammering Amazon&apos;s servers with repeated requests for the same data, likely unchanged.</p>\n</li>\n<li><p>I still don&apos;t know why <code>exsl:random</code> doesn&apos;t work for me.  Although I thought using a web service for random numbers was intereting, it would be very nice if I didn&apos;t have to use it.</p>\n</li>\n<li><p>The HTML presentation could certainly use some good CSS to make it more attractive.</p>\n</li>\n</ul>\n<p>Feel free to send me any suggestions, criticisms, or complaints related to this article!</p>\n"
  },
  {
    "comments_archived": true,
    "date": "2004-06-28T23:17:36.000Z",
    "excerpt": "Lately, my iTunes has been playing radioio Rock almost exclusively lately, but one thing that peeves me is that I don't seem to see the current song while the stream's playing.  Instead, the radioio site offers a pop-up window that displays the last few songs in the playlist.  However, I'm usually somewhere off in another window or a shell and don't really feel like popping over to a browser and navigating to the playlist just to see what this song is.  So, I wrote myself a little mini-scraper script...",
    "layout": "post",
    "tags": [
      "hacks"
    ],
    "title": "A mini-scraper for the playlist at radioio Rock",
    "wordpress_id": 531,
    "wordpress_slug": "radioiorock-scraper",
    "wordpress_url": "http://www.decafbad.com/blog/?p=531",
    "year": "2004",
    "month": "06",
    "day": "28",
    "isDir": false,
    "slug": "radioiorock-scraper",
    "postName": "2004-06-28-radioiorock-scraper",
    "html": "<p>Lately, my iTunes has been playing <a href=\"http://www.radioio.com/radioiorock.php?stream=radioioRock\">radioio Rock</a> almost exclusively lately, but one thing that peeves me is that I don&#39;t seem to see the current song while the stream&#39;s playing.  Instead, the <a href=\"http://www.radioio.com/\">radioio</a> site offers a pop-up window that displays the last few songs in the playlist.  However, I&#39;m usually somewhere off in another window or a shell and don&#39;t really feel like popping over to a browser and navigating to the playlist just to see what this song is.</p>\n<p>So, I wrote myself a little mini-scraper script:</p>\n<pre><code>#!/bin/sh\n\ncurl -s &#39;http://player.radioio.com/player.php?b=614&amp;#38;stream=radioioRock&#39; | \\\n    tidy -asxml --wrap 300 -q -f /dev/null | \\\n    xml sel -t -m &quot;//*[@class=&#39;leadrock&#39;]&quot; -v &#39;.&#39; -n \\\n        -o &#39;    [http://www.radioio.com&#39; -v &#39;../@href&#39; -o &#39;]&#39; -n </code></pre>\n<p>The output looks something like this:</p>\n<pre><code>[06/29 11:01:08] deusx@Caffeina2:~ % radioio\n\nVast - I Need To Say Goodbye\n    [http://www.radioio.com...]\nCure - The End Of The World\n    [http://www.radioio.com...]\nSeachange - Avs Co 10\n    [http://www.radioio.com...]\nPixies - Bam Thwok\n    [http://www.radioio.com...]\nDeath Cab For Cutie - The New Year\n    [http://www.radioio.com...]\nLovethugs - Drawing The Curtains\n    [http://www.radioio.com...]</code></pre>\n<p>Oh yeah, and to run this script, you will need these tools:</p>\n<ul>\n<li><a href=\"http://curl.haxx.se/\">curl</a></li>\n<li><a href=\"http://tidy.sourceforge.net/\">HTML Tidy</a> </li>\n<li><a href=\"http://xmlstar.sourceforge.net/\">XMLStarlet</a></li>\n</ul>\n<p>Personally, I like the included URLs (which I edited here for length) since they launch a search for CDs by the artist.  However, you can cut the output down to just the artist/title by removing the final line of the script and the backslash at the end of the line before.</p>\n<p>If you like a different <a href=\"http://www.radioio.com/\">radioio</a> station, say <a href=\"http://www.radioio.com/radioioeclectic.php?stream=radioioEclectic\">radioio Eclectic</a>, you can change <code>stream=radioioRock</code> to <code>stream=radioioEclectic</code> in the URL above and change <code>class=&#39;leadrock&#39;</code> to <code>class=&#39;leadeclectic&#39;</code>.  I could have parameterized these, but I&#39;m lazy, and that was the whole point!</p>\n<p>ShareAndEnjoy!</p>\n<!--more-->\n<p>shortname=radioiorock_scraper</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087229\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.bytecloud.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7388f3fd9cfa9436c5282542aaccf4fd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.bytecloud.com\">Mike Carter</a>\n</div>\n<a href=\"#comment-221087229\" class=\"permalink\"><time datetime=\"2004-07-01T07:39:45\">2004-07-01T07:39:45</time></a>\n</div>\n<div class=\"content\">I was listening to some streams today for the first time in a while and I was thinking how annoying it was not to know the track names.  Thanks for posting this, it may come in handy!</div>\n</li>\n<li class=\"comment\" id=\"comment-221087231\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://cpe000103c34069-cm014300001653.cpe.net.cable.rogers.com/weblogs/ben/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=871196de9b27ed994c30428eed59073c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://cpe000103c34069-cm014300001653.cpe.net.cable.rogers.com/weblogs/ben/\">Gnomon</a>\n</div>\n<a href=\"#comment-221087231\" class=\"permalink\"><time datetime=\"2004-07-01T18:31:58\">2004-07-01T18:31:58</time></a>\n</div>\n<div class=\"content\">How is this the first time I've ever found out about XML Starlet? It's magnificent!\nThe application is cool, too, but /man/ - I'm going to have fun with XML Starlet. Thanks so very much for the pointer, Les!</div>\n</li>\n<li class=\"comment\" id=\"comment-221087232\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.radioio.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0cfcb3aefaca714528c009a68810e8ec&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.radioio.com/\">Jesse</a>\n</div>\n<a href=\"#comment-221087232\" class=\"permalink\"><time datetime=\"2005-01-23T11:50:41\">2005-01-23T11:50:41</time></a>\n</div>\n<div class=\"content\">I was searching around with blowsearch.com today (which btw blows heheh) and found this entry.  This earl might be of interest to ya:\nhttp://69.28.133.51:1040/7.html\nThe db for searchplay and our players is only updated every 30 seconds, 7.html is near reatime right from our playback software.  :)\nWe used to have title streaming on our mp3 streams but are in transition of server and encoding software atm while we prepare to roll out our own software, and will be adding new formats such as heaac.  :)\nToo much to talk about, we have a LOT of stuff planned for 2005-2006 that we've been working on (and patent pending) for years now.  Definately going to be exciting time for net radio.  Thanks for your interest Leslie.\njesse\nchief tinkerer of toys,\nradioio</div>\n</li>\n</ul>\n</div>\n",
    "body": "Lately, my iTunes has been playing [radioio Rock][rock] almost exclusively lately, but one thing that peeves me is that I don't seem to see the current song while the stream's playing.  Instead, the [radioio][radioio] site offers a pop-up window that displays the last few songs in the playlist.  However, I'm usually somewhere off in another window or a shell and don't really feel like popping over to a browser and navigating to the playlist just to see what this song is.\r\n\r\nSo, I wrote myself a little mini-scraper script:\r\n\r\n    #!/bin/sh\r\n    \r\n    curl -s 'http://player.radioio.com/player.php?b=614&#38;stream=radioioRock' | \\\r\n        tidy -asxml --wrap 300 -q -f /dev/null | \\\r\n        xml sel -t -m \"//*[@class='leadrock']\" -v '.' -n \\\r\n            -o '    [http://www.radioio.com' -v '../@href' -o ']' -n \r\n\r\nThe output looks something like this:\r\n\r\n    [06/29 11:01:08] deusx@Caffeina2:~ % radioio\r\n    \r\n    Vast - I Need To Say Goodbye\r\n        [http://www.radioio.com...]\r\n    Cure - The End Of The World\r\n        [http://www.radioio.com...]\r\n    Seachange - Avs Co 10\r\n        [http://www.radioio.com...]\r\n    Pixies - Bam Thwok\r\n        [http://www.radioio.com...]\r\n    Death Cab For Cutie - The New Year\r\n        [http://www.radioio.com...]\r\n    Lovethugs - Drawing The Curtains\r\n        [http://www.radioio.com...]\r\n\r\nOh yeah, and to run this script, you will need these tools:\r\n\r\n* [curl][curl]\r\n* [HTML Tidy][tidy] \r\n* [XMLStarlet][xmlstarlet]\r\n\r\nPersonally, I like the included URLs (which I edited here for length) since they launch a search for CDs by the artist.  However, you can cut the output down to just the artist/title by removing the final line of the script and the backslash at the end of the line before.\r\n\r\nIf you like a different [radioio][radioio] station, say [radioio Eclectic][eclectic], you can change `stream=radioioRock` to `stream=radioioEclectic` in the URL above and change `class='leadrock'` to `class='leadeclectic'`.  I could have parameterized these, but I'm lazy, and that was the whole point!\r\n\r\nShareAndEnjoy!\r\n\r\n[curl]: http://curl.haxx.se/\r\n[tidy]: http://tidy.sourceforge.net/\r\n[xmlstarlet]: http://xmlstar.sourceforge.net/\r\n[rock]: http://www.radioio.com/radioiorock.php?stream=radioioRock\r\n[radioio]: http://www.radioio.com/\r\n[eclectic]: http://www.radioio.com/radioioeclectic.php?stream=radioioEclectic\r\n<!--more-->\r\nshortname=radioiorock_scraper\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221087229\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.bytecloud.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7388f3fd9cfa9436c5282542aaccf4fd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.bytecloud.com\">Mike Carter</a>\r\n                </div>\r\n                <a href=\"#comment-221087229\" class=\"permalink\"><time datetime=\"2004-07-01T07:39:45\">2004-07-01T07:39:45</time></a>\r\n            </div>\r\n            <div class=\"content\">I was listening to some streams today for the first time in a while and I was thinking how annoying it was not to know the track names.  Thanks for posting this, it may come in handy!</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087231\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://cpe000103c34069-cm014300001653.cpe.net.cable.rogers.com/weblogs/ben/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=871196de9b27ed994c30428eed59073c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://cpe000103c34069-cm014300001653.cpe.net.cable.rogers.com/weblogs/ben/\">Gnomon</a>\r\n                </div>\r\n                <a href=\"#comment-221087231\" class=\"permalink\"><time datetime=\"2004-07-01T18:31:58\">2004-07-01T18:31:58</time></a>\r\n            </div>\r\n            <div class=\"content\">How is this the first time I've ever found out about XML Starlet? It's magnificent!\r\n\r\nThe application is cool, too, but /man/ - I'm going to have fun with XML Starlet. Thanks so very much for the pointer, Les!</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087232\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.radioio.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0cfcb3aefaca714528c009a68810e8ec&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.radioio.com/\">Jesse</a>\r\n                </div>\r\n                <a href=\"#comment-221087232\" class=\"permalink\"><time datetime=\"2005-01-23T11:50:41\">2005-01-23T11:50:41</time></a>\r\n            </div>\r\n            <div class=\"content\">I was searching around with blowsearch.com today (which btw blows heheh) and found this entry.  This earl might be of interest to ya:\r\nhttp://69.28.133.51:1040/7.html\r\nThe db for searchplay and our players is only updated every 30 seconds, 7.html is near reatime right from our playback software.  :)\r\n\r\nWe used to have title streaming on our mp3 streams but are in transition of server and encoding software atm while we prepare to roll out our own software, and will be adding new formats such as heaac.  :)\r\n\r\nToo much to talk about, we have a LOT of stuff planned for 2005-2006 that we've been working on (and patent pending) for years now.  Definately going to be exciting time for net radio.  Thanks for your interest Leslie.\r\n\r\njesse\r\nchief tinkerer of toys,\r\nradioio</div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/06/28/radioiorock-scraper",
    "summary": "<p>Lately, my iTunes has been playing <a href=\"http://www.radioio.com/radioiorock.php?stream=radioioRock\">radioio Rock</a> almost exclusively lately, but one thing that peeves me is that I don&apos;t seem to see the current song while the stream&apos;s playing.  Instead, the <a href=\"http://www.radioio.com/\">radioio</a> site offers a pop-up window that displays the last few songs in the playlist.  However, I&apos;m usually somewhere off in another window or a shell and don&apos;t really feel like popping over to a browser and navigating to the playlist just to see what this song is.</p>\n<p>So, I wrote myself a little mini-scraper script:</p>\n<pre><code>#!/bin/sh\n\ncurl -s &apos;http://player.radioio.com/player.php?b=614&amp;#38;stream=radioioRock&apos; | \\\n    tidy -asxml --wrap 300 -q -f /dev/null | \\\n    xml sel -t -m &quot;//*[@class=&apos;leadrock&apos;]&quot; -v &apos;.&apos; -n \\\n        -o &apos;    [http://www.radioio.com&apos; -v &apos;../@href&apos; -o &apos;]&apos; -n </code></pre>\n<p>The output looks something like this:</p>\n<pre><code>[06/29 11:01:08] deusx@Caffeina2:~ % radioio\n\nVast - I Need To Say Goodbye\n    [http://www.radioio.com...]\nCure - The End Of The World\n    [http://www.radioio.com...]\nSeachange - Avs Co 10\n    [http://www.radioio.com...]\nPixies - Bam Thwok\n    [http://www.radioio.com...]\nDeath Cab For Cutie - The New Year\n    [http://www.radioio.com...]\nLovethugs - Drawing The Curtains\n    [http://www.radioio.com...]</code></pre>\n<p>Oh yeah, and to run this script, you will need these tools:</p>\n<ul>\n<li><a href=\"http://curl.haxx.se/\">curl</a></li>\n<li><a href=\"http://tidy.sourceforge.net/\">HTML Tidy</a> </li>\n<li><a href=\"http://xmlstar.sourceforge.net/\">XMLStarlet</a></li>\n</ul>\n<p>Personally, I like the included URLs (which I edited here for length) since they launch a search for CDs by the artist.  However, you can cut the output down to just the artist/title by removing the final line of the script and the backslash at the end of the line before.</p>\n<p>If you like a different <a href=\"http://www.radioio.com/\">radioio</a> station, say <a href=\"http://www.radioio.com/radioioeclectic.php?stream=radioioEclectic\">radioio Eclectic</a>, you can change <code>stream=radioioRock</code> to <code>stream=radioioEclectic</code> in the URL above and change <code>class=&apos;leadrock&apos;</code> to <code>class=&apos;leadeclectic&apos;</code>.  I could have parameterized these, but I&apos;m lazy, and that was the whole point!</p>\n<p>ShareAndEnjoy!</p>\n"
  },
  {
    "comments_archived": true,
    "date": "2004-06-28T01:44:51.000Z",
    "excerpt": "Here's the next installment of the Wish-of-the-Month Club.  You can revisit the first part, too, if you've missed it.  I'd meant to post it within a week of the first part, so apologies all around to anyone who has been tapping a foot waiting for it.  Enjoy!",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "Wish-of-the-Month Club, Part 2 of 3",
    "wordpress_id": 530,
    "wordpress_slug": "wishofthemonthclub2",
    "wordpress_url": "http://www.decafbad.com/blog/?p=530",
    "year": "2004",
    "month": "06",
    "day": "27",
    "isDir": false,
    "slug": "wishofthemonthclub2",
    "postName": "2004-06-27-wishofthemonthclub2",
    "html": "<p><i>Here&#39;s the next installment of the Wish-of-the-Month Club.  You can <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">revisit the first part</a>, too, if you&#39;ve missed it.  I&#39;d meant to post it within a week of the first part, so apologies all around to anyone who has been tapping a foot waiting for it.  Enjoy!</i></p>\n<h3 id=\"paging-through-wishes\">Paging Through Wishes</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex2.xsl\"><code>wishes-ex2.xsl</code></a>: The second iteration of the stylesheet in development.</li>\n</ul>\n<p>Now we&#39;ve got a way to make queries against Amazon Web Services, not entirely unlike what you might be used to if you tinker with MySQL databases on a regular basis.  At this point, though, we still have a bit of refining to make to this query.  If you take a look at the data produced by the query in its current state, and compare that to what you see on wishlists in your browser, you should notice some things missing.</p>\n<p>If you look at <a href=\"http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5\" title=\"Buy me something, will ya?\">my wishlist</a>, you&#39;ll notice that items span several pages when visited by browser.  As it turns out, AWS queries work in a similar fashion--each query returns only a limited number of items (about 10), and an additional parameter supplied to further queries is required to step through further pages of results.  So, using what we&#39;ve built so far will only get us to the first page of wishlist items; to get all of the items, we&#39;ll need a way to step through all of the pages.</p>\n<p>In playing with this, I experienced a bit of hairpulling frustration:  The AWS documentation, under &quot;Generating Additional Product Results&quot;, claims that XML returned by the service will supply a count of the total pages available for a given query.  And although I see this element present in other types of searches, the <code>TotalPages</code> element is absent when querying on wishlists.  This may be a bug, or it may be an undocumented change in the service--either way, it was a surprise and leaves me with no official way to know how many pages I need to ask for in order to have a complete set of data.  </p>\n<p>With some further tinkering, though, I figured out a workaround: If a query is made for a page number beyond the final page, the XML returned will be a duplicate of the final page.  Once I see a duplicate item appear, I know it&#39;s time to stop paging through results.  This is completely undocumented behavior, and could break at any time (ie. if Amazon decided to start issuing an error for a page index out of bounds), but it&#39;ll work for now.</p>\n<p>This calls for reworking the <code>processWishlist</code> template.  For a given wishlist, it will need to iterate through a sequence of page numbers, requesting XML from AWS for each, stopping when the first duplicate page is found.  Since XSLT is heavily steeped in functional programming concepts, this sort of <a href=\"http://www.dpawson.co.uk/xsl/sect2/N4806.html\" title=\"Iteration in XSLT\">iteration in XSLT</a> is best done <a href=\"http://www-106.ibm.com/developerworks/xml/library/x-xslrecur/\" title=\"Use recursion effectively in XSL\">with recursion</a>:</p>\n<pre><code>  &lt;xsl:template name=&quot;processWishlist&quot;&gt;\n\n    &lt;xsl:param name=&quot;wishlist&quot; /&gt;              &lt;!-- Wishlist ID --&gt;\n    &lt;xsl:param name=&quot;max&quot;   select=&quot;50&quot; /&gt;     &lt;!-- Arbitrary upper loop limit --&gt;\n    &lt;xsl:param name=&quot;curr_page&quot; select=&quot;1&quot; /&gt;  &lt;!-- Curr page # --&gt;\n    &lt;xsl:param name=&quot;prev_first_asin&quot; /&gt;       &lt;!-- Keeping track of repeats --&gt;</code></pre>\n<p>The first modification to this template is the addition of three parameters:</p>\n<ul>\n<li><code>max</code> provides an arbitrary upper limit to the number of pages through which this template will iterate.</li>\n<li><code>curr_page</code> contains the number of the page to be requested in this iteration.</li>\n<li><code>prev_first_asin</code> will contain the ASIN number of the first item from the previous iteration&#39;s page of results.</li>\n</ul>\n<p>Next, we modify the URL used to query for wishlist data:</p>\n<pre><code>    &lt;!-- Fetch the wishlist products --&gt;\n    &lt;xsl:variable name=&quot;details&quot; select=&quot;document(concat(\n                  &#39;http://xml.amazon.com/onca/xml3?&#39;,\n                  &#39;t=&#39;,$associate,&#39;&amp;amp;&#39;,\n                  &#39;dev-t=&#39;,$devtoken,&#39;&amp;amp;&#39;,\n                  &#39;WishlistSearch=&#39;,$wishlist,&#39;&amp;amp;&#39;,\n                  &#39;type=lite&amp;amp;f=xml&amp;amp;&#39;,\n                  &#39;page=&#39;,$curr_page))//Details&quot; /&gt;</code></pre>\n<p>The only addition here beyond the previous version is the <code>page</code> parameter in the URL.  Not much mystery here--this parameter specifies which page of results we want.  Now, let&#39;s build the loop:</p>\n<pre><code>    &lt;!-- Snag the first item Asin --&gt;\n    &lt;xsl:variable name=&quot;curr_first_asin&quot; select=&quot;$details/Asin/text()&quot; /&gt;\n\n    &lt;!-- If we haven&#39;t exceeded the loop limit, and this first Asin isn&#39;t --&gt;\n    &lt;!-- a repeat of the previous loop (indicating we&#39;ve run out of new   --&gt;\n    &lt;!-- pages), then go ahead...                                         --&gt;\n    &lt;xsl:if test=&quot;(($curr_page+1) &amp;lt; $max) and\n                  (string-length($curr_first_asin) &amp;gt; 0) and\n                  not($curr_first_asin = $prev_first_asin)&quot;&gt;</code></pre>\n<p>We capture the ASIN of the first item in this page of results and check to see if we should continue.  This <code>if</code> conditional first ensures that we&#39;re not past the sanity guard for loop iterations, makes sure that we actually got a non-empty current first ASIN, then checks our current first product&#39;s ASIN against what was passed in as the previous iteration&#39;s first product&#39;s ASIN.  If this was the first time through the loop, this value should be empty and therefore wouldn&#39;t match the current ASIN.  But, if we&#39;ve gone past the end of results, the previous and current ASIN values should match, and the conditional will fail.</p>\n<p>Moving along into the body of the conditional, we copy in wishlist products filtered on a price maximum, just as before:</p>\n<pre><code>      &lt;!-- Copy products, filtering on a maximum price --&gt;\n      &lt;xsl:copy-of select=&quot;$details/OurPrice[number(substring(\n                   text(),2)) &amp;lt; $maxprice]/..&quot; /&gt;</code></pre>\n<p>Having done that, we move onto the recursive end of this template:</p>\n<pre><code>      &lt;!-- Loop by recursion to get the next page --&gt;\n      &lt;xsl:call-template name=&quot;processWishlist&quot;&gt;\n        &lt;xsl:with-param name=&quot;wishlist&quot;        select=&quot;$wishlist&quot; /&gt;\n        &lt;xsl:with-param name=&quot;max&quot;             select=&quot;$max&quot; /&gt;\n        &lt;xsl:with-param name=&quot;curr_page&quot;       select=&quot;$curr_page + 1&quot; /&gt;\n        &lt;xsl:with-param name=&quot;prev_first_asin&quot; select=&quot;$curr_first_asin&quot; /&gt;\n      &lt;/xsl:call-template&gt;\n\n    &lt;/xsl:if&gt;    \n  &lt;/xsl:template&gt;</code></pre>\n<p>Here, the template makes a recursive call back to itself, passing through the wishlist ID and the maximum iteration count.  Since variables in XSLT are immutable, meaning that their values can&#39;t be changed once they&#39;ve been set, we can&#39;t increment <code>$curr_page</code> in-place like a loop counter in other languages--so, the current page count <em>value</em> is incremented and passed to the recursive call as a parameter.  Finally, the current first item&#39;s ASIN is passed along, to become the previous ASIN for the next iteration.</p>\n<p>Note that when the conditional fails--that is, if the loop limit is passed or a duplicate page is detected--the loop ends.  In other words, nothing further happens and execution pops back up out of all the levels of recursion and the top-level template ends.  </p>\n<p>I wrote &quot;<em>when</em> the conditional fails&quot;.  This is a key point: for the loop to eventually end, this conditional <em>must</em> fail (or be made to fail) at some point, else this loop will happily progress through page requests forever.  This is the reason for the <code>$max</code> parameter limiting the number of iterations, in case something goes haywire--like, oh say, a failure of our duplicate-page detection hack as a loop ending condition.  A useful exercise for the reader might be to add some additional diagnostic code to report that the limit was hit versus a natural end to results.</p>\n<h3 id=\"random-numbers\">Random Numbers</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex3.xsl\"><code>wishes-ex3.xsl</code></a>: The third iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/random-xml\"><code>random-xml</code></a>: A Perl CGI script used as a web service to generate random numbers.</li>\n</ul>\n<p>Armed with a template that will query against the full set of items in a wishlist, we&#39;re ready to look into making a random selection from a list of products.  </p>\n<p>But first, we need to pick a random number.  Unfortunately, there doesn&#39;t appear to be any <code>random()</code> function in the XPath or XSLT standards.  There <em>is</em> a <a href=\"http://www.exslt.org/math/functions/random/index.html\"><code>math:random()</code></a> from EXSLT implemented in <code>libxslt</code>, but I seem to be having a bit of a problem getting it to produce anything other than the same sequence of numbers.  I suspect there&#39;s a problem in seeding the random number generator, but I&#39;ve yet to work out how to fix it.  (Suggestions welcome.)</p>\n<p>So, I cheated and made another workaround with a CGI script on my web server that generates random numbers in a simple XML document.  Currently, it&#39;s hosted here:</p>\n<pre><code>http://www.decafbad.com/2004/05/random-xml</code></pre>\n<p>And this is what the script looks like:</p>\n<pre><code>#!/usr/bin/perl\n\nuse strict;\nuse CGI;\n\nmy $q = new CGI();\n\nmy $min = $q-&gt;param(&#39;min&#39;) or 0;\nmy $max = $q-&gt;param(&#39;max&#39;) or 1;\nmy $int = $q-&gt;param(&#39;int&#39;);\n\nmy $num = $min + ( rand() * ($max - $min));\nif ($int) { $num = int($num); }\n\nprint $q-&gt;header(&#39;text/xml&#39;);\nprint &quot;&lt;rand&gt;$num&lt;/rand&gt;\\n&quot;;</code></pre>\n<p>This is a very simple CGI.  It accepts the parameters <code>max</code>, <code>min</code>, and <code>int</code>.  The values of these parameters determine the maximum and minimum value for the random number returned, and whether or not it should be an integer.  For example, the <a href=\"http://www.decafbad.com/2004/05/random-xml?int=1&#38;min=10&#38;max=20\" title=\"A random integer between 10 and 20, in XML\">following URL</a> should return an integer between 10 and 20:</p>\n<pre><code>http://www.decafbad.com/2004/05/random-xml?\nint=1&amp;#38;min=10&amp;#38;max=20</code></pre>\n<p>Using this as a web service in the stylesheet with the <code>document()</code> function, we can get a random number.  If you&#39;ve got web space where you can host CGI scripts, I suggest you host a copy of this script yourself, since I can&#39;t guarantee how long mine will stick around.  But, for as long at works, feel free to use the service from my server.</p>\n<p>Moving along, let&#39;s add a new named template to the stylesheet, called <code>randomWishlistProduct</code>:</p>\n<pre><code>  &lt;xsl:template name=&quot;randomWishlistProduct&quot;&gt;\n\n    &lt;xsl:param name=&quot;wishlist&quot; /&gt; &lt;!-- Wishlist ID --&gt;\n\n    &lt;!-- Gather all the products for the current wishlist --&gt;\n    &lt;xsl:variable name=&quot;products&quot;&gt;\n      &lt;xsl:call-template name=&quot;processWishlist&quot;&gt;\n        &lt;xsl:with-param name=&quot;wishlist&quot; select=&quot;$wishlist&quot; /&gt;\n      &lt;/xsl:call-template&gt;\n    &lt;/xsl:variable&gt;</code></pre>\n<p>Just like the <code>processWishlist</code> template, we start by defining the parameter <code>wishlist</code> to accept a wishlist ID.  Using this ID, we call the <code>processWishlist</code> template itself and store the complete list of products queried from the wishlist into the variable <code>$products</code>.</p>\n<pre><code>    &lt;!-- Count the products in the wishlist --&gt;\n    &lt;xsl:variable name=&quot;max_products&quot;\n                  select=&quot;count(exsl:node-set($products)/Details)&quot; /&gt;</code></pre>\n<p>This next step counts the number of products found in the wishlist.  The one tricky bit here is the use of the EXSLT function <a href=\"http://www.exslt.org/exsl/functions/node-set/index.html\"><code>exsl:node-set()</code></a>: The <code>$products</code> variable contains what&#39;s called a <a href=\"http://www.w3.org/TR/xslt#section-Result-Tree-Fragments\"><em>result tree fragment</em></a>, which is a kind of cross between XML data nodes and a plain old string.  This type of data does not normally allow the full set of XPath operators to be used on it, so first we need to use <code>exsl:node-set()</code> to turn it into a full-fledged node set.  Then we can look up the <code>Details</code> element nodes and count them.  </p>\n<pre><code>    &lt;!-- Conjure up a random index within the list of products --&gt;\n    &lt;xsl:variable name=&quot;rand_product_num&quot;\n                  select=&quot;document(concat(\n                  &#39;http://www.decafbad.com/2004/05/random-xml?&#39;,\n                  &#39;int=1&amp;amp;&#39;,\n                  &#39;min=1&amp;amp;&#39;,\n                  &#39;max=&#39;,$max_products))/rand&quot; /&gt;</code></pre>\n<p>Here is where the random number service comes in handy.  The <code>concat()</code> function is used to build the URL to the service, with parameters specifying that the number should be an integer, and should fall between 1 and the number of products in the wishlist.  The <code>document()</code> function grabs the XML document from the service, and the value is extracted from the single element the document contains.</p>\n<p>There is an alternative to this last bit, should you happen to have a properly working <code>math:random()</code> function in your XSLT processor:</p>\n<pre><code>    &lt;xsl:variable name=&quot;rand_product_num&quot; select=&quot;round( math:random() *\n                  $max_products ) + 1&quot; /&gt;</code></pre>\n<p>If you can use this instead, you&#39;ll have no need for the random number web service.  This version is obviously more concise, and doesn&#39;t require another trip out to a web service.  You might want to try it--but if you find that you keep getting the same wishlist items selected, then you&#39;ve run into the problem I found with the random number generator.</p>\n<p>Now, let&#39;s wrap this template up by selecting an item:</p>\n<pre><code>    &lt;!-- Copy the product as indexed by the random number --&gt;\n    &lt;xsl:copy-of select=&quot;exsl:node-set($products)/Details[\n                 position()=$rand_product_num]&quot; /&gt;\n\n  &lt;/xsl:template&gt;</code></pre>\n<p>Again, we need to use the <code>exsl:node-set()</code> function to turn the result tree fragment in the <code>$products</code> variable into a node set, from which we select and copy the <code>Details</code> element whose position in the data is indexed by the random number we just selected.  Just one last tweak needed to wrap up this iteration of our stylesheet.  We need to swap out the call to the <code>processWishlist</code> function at the end and replace it with a call to <code>randomWishlistProduct</code>:</p>\n<pre><code>  &lt;xsl:template match=&quot;/wishes:wishes&quot;&gt;\n\n    &lt;xsl:for-each select=&quot;//wishes:wishlist&quot;&gt;\n      &lt;wishes:wishitem&gt;\n        &lt;xsl:copy-of select=&quot;.&quot; /&gt;\n        &lt;xsl:call-template name=&quot;randomWishlistProduct&quot;&gt;\n          &lt;xsl:with-param name=&quot;wishlist&quot; select=&quot;.&quot; /&gt;\n        &lt;/xsl:call-template&gt;\n      &lt;/wishes:wishitem&gt;\n    &lt;/xsl:for-each&gt;\n\n  &lt;/xsl:template&gt;</code></pre>\n<p>After these changes, you should be able to run the stylesheet ([wishes-ex3.xsl][wishes_ex3]) and get something like the following:</p>\n<pre><code>&lt;wishes:wishitem xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n    &lt;wishes:wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n&lt;/wishes:wishitem&gt;\n&lt;wishes:wishitem xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n    &lt;wishes:wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n&lt;/wishes:wishitem&gt;</code></pre>\n<p>This is similar to the output of the previous iteration of the stylesheet, but this time there&#39;s only one product selected at random for each wishlist.  </p>\n<h3 id=\"shopping-carts\">Shopping Carts</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex4.xsl\"><code>wishes-ex4.xsl</code></a>: The fourth iteration of the stylesheet in development.</li>\n</ul>\n<p>By this point, we&#39;ve been able to query and filter products in Amazon wishlists, and we&#39;ve selected an item at random from each wishlist we&#39;ve queried.  Now, let&#39;s enable some purchases.</p>\n<p>The AWS provides for Remote Shopping Cart functionality, whereby items can be added to an Amazon.com shopping cart programmatically.  This is about as close as we can get to automating the purchase of items selected from the wishlists--there is no API functionality for actually completing the ordering of items.  If you really think about it, this really is a good thing and <em>should</em> demand human intervention; we certainly wouldn&#39;t want this script going crazy and accidentally buying up everything on a wishlist.</p>\n<p>Documentation for the AWS Remote Shopping Cart explains that a shopping cart can be created and items added with a URL like the following:</p>\n<pre><code>http://xml.amazon.com/onca/xml3?\nShoppingCart=add&amp;#38;\nf=xml&amp;#38;\ndev-t=[Developer Token goes here]&amp;#38;\nt=[Associates ID goes here]&amp;#38;\nAsin.[ASIN goes here]=[quantity goes here]&amp;#38;\nsims=true</code></pre>\n<p>Part of this should look familiar, so we already know what to do with the developer token and the associates ID.  The last part, specifying product ASIN and quantity, can be filled out with information contained in the product records selected at random from the wishlists.  </p>\n<p>So, let&#39;s start by revising the template at the end of the stylesheet:</p>\n<pre><code>&lt;xsl:template match=&quot;/wishes:wishes&quot;&gt;\n\n    &lt;xsl:variable name=&quot;random_products&quot;&gt;      \n      &lt;xsl:for-each select=&quot;//wishes:wishlist&quot;&gt;\n        &lt;wishes:wishitem&gt;\n          &lt;xsl:copy-of select=&quot;.&quot; /&gt;\n          &lt;xsl:call-template name=&quot;randomWishlistProduct&quot;&gt;\n            &lt;xsl:with-param name=&quot;wishlist&quot; select=&quot;.&quot; /&gt;\n          &lt;/xsl:call-template&gt;\n        &lt;/wishes:wishitem&gt;\n      &lt;/xsl:for-each&gt;\n    &lt;/xsl:variable&gt;</code></pre>\n<p>Here, we&#39;ve taken what was the output of the previous iteration of the stylesheet and stuffed it into the variable <code>$random_products</code>.  Next, let&#39;s fill in the blanks and build a Remote Shopping Cart URL:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart_create_url&quot;&gt;\n      &lt;!-- Standard AWS URL --&gt;\n      &lt;xsl:text&gt;http://xml.amazon.com/onca/xml3?&lt;/xsl:text&gt;\n\n      &lt;!-- Add in the selected items --&gt;\n      &lt;xsl:for-each select=&quot;exsl:node-set($random_products)\n                            /wishes:wishitem/Details&quot;&gt;\n        &lt;xsl:text&gt;Asin.&lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;Asin&quot; /&gt;\n        &lt;xsl:text&gt;=1&amp;amp;&lt;/xsl:text&gt;\n      &lt;/xsl:for-each&gt;\n\n      &lt;!-- Wrap up with the shopping cart function and required tokens --&gt;\n      &lt;xsl:text&gt;ShoppingCart=add&amp;amp;&lt;/xsl:text&gt;\n      &lt;xsl:text&gt;f=xml&amp;amp;&lt;/xsl:text&gt;\n      &lt;xsl:text&gt;dev-t=&lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;$devtoken&quot; /&gt;\n      &lt;xsl:text&gt;&amp;amp;&lt;/xsl:text&gt;\n      &lt;xsl:text&gt;t=&lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;$associate&quot; /&gt;\n    &lt;/xsl:variable&gt;</code></pre>\n<p>Since simple XPath doesn&#39;t allow for the looping needed for multiple items, we can&#39;t just concatenate this URL together in a <code>select</code> expression like we did with the wishlist item query.  So, we use <code>xslt:foreach</code> to build this with blocks of text using the <code>xsl:text</code> element.  We iterate though the random products chosen from wishlists and add an ASIN for each to the URL with a quantity of 1. Then, we use the <code>$devtoken</code> and <code>$associate</code> variables to fill in their respective spots.</p>\n<p>Note that this could have been written without using the <code>xsl:text</code> elements like so:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart_create_url&quot;&gt;http://xml.amazon.\n    com/onca/xml3?ShoppingCart=add&amp;amp;f=xml&amp;amp;dev-t=&lt;xsl:value-of \n    select=&quot;$devtoken&quot; /&gt;&amp;amp;t=&lt;xsl:value-of select=&quot;$associate&quot; /&gt;\n    &amp;amp;&lt;xsl:for-each select=&quot;exsl:node-set($random_products)/\n    wishes:wishitem/Details&quot;&gt;Asin.&lt;xsl:value-of select=&quot;Asin&quot; /&gt;=1\n    &amp;amp;&lt;/xsl:for-each&gt;&lt;/xsl:variable&gt;</code></pre>\n<p>This removes the clutter of all the <code>xsl:text</code> elements, but it would need to be piled all on one line in order to keep undesired whitespace from getting into the URL.  I made a small attempt at wrapping this line here, but line breaks and spaces would leave us with a non-functioning shopping cart URL.  It&#39;s up to you to decide which to use--personally, I prefer the <code>xsl:text</code> clutter for the ability to add in comments and clarify things a bit.</p>\n<p>Finally, having built the shopping cart URL, let&#39;s use it to get a shopping cart and wrap things up:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart&quot;\n                  select=&quot;document($shopping_cart_create_url)&quot; /&gt;\n\n    &lt;xsl:copy-of select=&quot;$shopping_cart&quot; /&gt;\n\n&lt;/xsl:template&gt;  </code></pre>\n<p>As an aside, this part is pushing the concept of a REST web service a bit: In the REST philosophy, requests using the GET method (which is what <code>document()</code> uses) should only return existing resources and not create new resources or cause modifications to happen.  Instead, these sorts of actions should use a POST request.  But, since we&#39;ve already accepted a few rough edges and workarounds in this project so far, we won&#39;t let a point of esoterica like that stop us.  (That and, well, this is the way Amazon designed their web service, so we&#39;ll take what we can get.)</p>\n<p>Once you run this iteration of the stylesheet ([wishes-ex4.xsl][wishes_ex4]), you should get something like this XML as output:</p>\n<pre><code>&lt;ShoppingCartResponse ...&gt;\n  ...\n  &lt;ShoppingCart&gt;\n   &lt;CartId&gt;...&lt;/CartId&gt;\n   &lt;HMAC&gt;...&lt;/HMAC&gt;\n   &lt;PurchaseUrl&gt;...&lt;/PurchaseUrl&gt;\n   &lt;Items&gt;\n    &lt;Item&gt;...&lt;/item&gt;\n    &lt;Item&gt;...&lt;/item&gt;\n   &lt;/Items&gt;\n  &lt;/ShoppingCart&gt;\n  ...\n&lt;/ShoppingCartResponse&gt;</code></pre>\n<p>The AWS documentation describes the vital elements here like so:</p>\n<ul>\n<li><code>CartId</code> - The Cart ID is the unique identifier for a given shopping cart.</li>\n<li><code>HMAC</code> - The HMAC is a security token that must be passed back to Amazon Web Services for using an existing cart.</li>\n<li><code>PurchaseUrl</code> - Use the purchase URL to transfer the remote shopping cart from your application to Amazon so that your application&#39;s users may complete their purchases.&#160; The purchase URL merges the remote shopping cart with the Amazon.com shopping cart. </li>\n</ul>\n<p>So, in short, whenever we want to do any sort of manipulation on this Remote Shopping Cart via AWS, we&#39;ll need to remember and later supply both the <code>CartId</code> and <code>HMAC</code> found in the XML returned at its creation.  And, once we&#39;re all ready to check out, the <code>PurchaseUrl</code> points to where we&#39;ll need to browse in person.</p>\n<h3 id=\"stay-tuned\">Stay Tuned!</h3>\n<p>This concludes Part 2 of the Wish-of-the-Month Club.  Following this will be the final part, where we tie everything together and start firing off monthly emails!</p>\n<!-- links -->\n\n<!--more-->\n<p>shortname=wishofthemonthclub2</p>\n",
    "body": "<i>Here's the next installment of the Wish-of-the-Month Club.  You can [revisit the first part][part1], too, if you've missed it.  I'd meant to post it within a week of the first part, so apologies all around to anyone who has been tapping a foot waiting for it.  Enjoy!</i>\r\n\r\n### Paging Through Wishes\r\n\r\nSome ready-made files are available for this section:\r\n* [`wishes-ex2.xsl`][wishes-ex2.xsl]: The second iteration of the stylesheet in development.\r\n\r\nNow we've got a way to make queries against Amazon Web Services, not entirely unlike what you might be used to if you tinker with MySQL databases on a regular basis.  At this point, though, we still have a bit of refining to make to this query.  If you take a look at the data produced by the query in its current state, and compare that to what you see on wishlists in your browser, you should notice some things missing.\r\n\r\nIf you look at [my wishlist][mywishlist], you'll notice that items span several pages when visited by browser.  As it turns out, AWS queries work in a similar fashion--each query returns only a limited number of items (about 10), and an additional parameter supplied to further queries is required to step through further pages of results.  So, using what we've built so far will only get us to the first page of wishlist items; to get all of the items, we'll need a way to step through all of the pages.\r\n\r\nIn playing with this, I experienced a bit of hairpulling frustration:  The AWS documentation, under \"Generating Additional Product Results\", claims that XML returned by the service will supply a count of the total pages available for a given query.  And although I see this element present in other types of searches, the `TotalPages` element is absent when querying on wishlists.  This may be a bug, or it may be an undocumented change in the service--either way, it was a surprise and leaves me with no official way to know how many pages I need to ask for in order to have a complete set of data.  \r\n\r\nWith some further tinkering, though, I figured out a workaround: If a query is made for a page number beyond the final page, the XML returned will be a duplicate of the final page.  Once I see a duplicate item appear, I know it's time to stop paging through results.  This is completely undocumented behavior, and could break at any time (ie. if Amazon decided to start issuing an error for a page index out of bounds), but it'll work for now.\r\n\r\nThis calls for reworking the `processWishlist` template.  For a given wishlist, it will need to iterate through a sequence of page numbers, requesting XML from AWS for each, stopping when the first duplicate page is found.  Since XSLT is heavily steeped in functional programming concepts, this sort of [iteration in XSLT][xslt_iteration] is best done [with recursion][xslt_recursion]:\r\n\r\n      <xsl:template name=\"processWishlist\">\r\n\r\n        <xsl:param name=\"wishlist\" />              <!-- Wishlist ID -->\r\n        <xsl:param name=\"max\"   select=\"50\" />     <!-- Arbitrary upper loop limit -->\r\n        <xsl:param name=\"curr_page\" select=\"1\" />  <!-- Curr page # -->\r\n        <xsl:param name=\"prev_first_asin\" />       <!-- Keeping track of repeats -->\r\n\r\nThe first modification to this template is the addition of three parameters:\r\n\r\n* `max` provides an arbitrary upper limit to the number of pages through which this template will iterate.\r\n* `curr_page` contains the number of the page to be requested in this iteration.\r\n* `prev_first_asin` will contain the ASIN number of the first item from the previous iteration's page of results.\r\n\r\nNext, we modify the URL used to query for wishlist data:\r\n\r\n        <!-- Fetch the wishlist products -->\r\n        <xsl:variable name=\"details\" select=\"document(concat(\r\n                      'http://xml.amazon.com/onca/xml3?',\r\n                      't=',$associate,'&amp;',\r\n                      'dev-t=',$devtoken,'&amp;',\r\n                      'WishlistSearch=',$wishlist,'&amp;',\r\n                      'type=lite&amp;f=xml&amp;',\r\n                      'page=',$curr_page))//Details\" />\r\n\r\nThe only addition here beyond the previous version is the `page` parameter in the URL.  Not much mystery here--this parameter specifies which page of results we want.  Now, let's build the loop:\r\n    \r\n        <!-- Snag the first item Asin -->\r\n        <xsl:variable name=\"curr_first_asin\" select=\"$details/Asin/text()\" />\r\n    \r\n        <!-- If we haven't exceeded the loop limit, and this first Asin isn't -->\r\n        <!-- a repeat of the previous loop (indicating we've run out of new   -->\r\n        <!-- pages), then go ahead...                                         -->\r\n        <xsl:if test=\"(($curr_page+1) &lt; $max) and\r\n                      (string-length($curr_first_asin) &gt; 0) and\r\n                      not($curr_first_asin = $prev_first_asin)\">\r\n      \r\nWe capture the ASIN of the first item in this page of results and check to see if we should continue.  This `if` conditional first ensures that we're not past the sanity guard for loop iterations, makes sure that we actually got a non-empty current first ASIN, then checks our current first product's ASIN against what was passed in as the previous iteration's first product's ASIN.  If this was the first time through the loop, this value should be empty and therefore wouldn't match the current ASIN.  But, if we've gone past the end of results, the previous and current ASIN values should match, and the conditional will fail.\r\n\r\nMoving along into the body of the conditional, we copy in wishlist products filtered on a price maximum, just as before:\r\n      \r\n          <!-- Copy products, filtering on a maximum price -->\r\n          <xsl:copy-of select=\"$details/OurPrice[number(substring(\r\n                       text(),2)) &lt; $maxprice]/..\" />\r\n\r\nHaving done that, we move onto the recursive end of this template:\r\n      \r\n          <!-- Loop by recursion to get the next page -->\r\n          <xsl:call-template name=\"processWishlist\">\r\n            <xsl:with-param name=\"wishlist\"        select=\"$wishlist\" />\r\n            <xsl:with-param name=\"max\"             select=\"$max\" />\r\n            <xsl:with-param name=\"curr_page\"       select=\"$curr_page + 1\" />\r\n            <xsl:with-param name=\"prev_first_asin\" select=\"$curr_first_asin\" />\r\n          </xsl:call-template>\r\n\r\n        </xsl:if>    \r\n      </xsl:template>\r\n\r\nHere, the template makes a recursive call back to itself, passing through the wishlist ID and the maximum iteration count.  Since variables in XSLT are immutable, meaning that their values can't be changed once they've been set, we can't increment `$curr_page` in-place like a loop counter in other languages--so, the current page count *value* is incremented and passed to the recursive call as a parameter.  Finally, the current first item's ASIN is passed along, to become the previous ASIN for the next iteration.\r\n\r\nNote that when the conditional fails--that is, if the loop limit is passed or a duplicate page is detected--the loop ends.  In other words, nothing further happens and execution pops back up out of all the levels of recursion and the top-level template ends.  \r\n\r\nI wrote \"*when* the conditional fails\".  This is a key point: for the loop to eventually end, this conditional *must* fail (or be made to fail) at some point, else this loop will happily progress through page requests forever.  This is the reason for the `$max` parameter limiting the number of iterations, in case something goes haywire--like, oh say, a failure of our duplicate-page detection hack as a loop ending condition.  A useful exercise for the reader might be to add some additional diagnostic code to report that the limit was hit versus a natural end to results.\r\n\r\n\r\n### Random Numbers\r\n\r\nSome ready-made files are available for this section:\r\n* [`wishes-ex3.xsl`][wishes-ex3.xsl]: The third iteration of the stylesheet in development.\r\n* [`random-xml`][random-xml]: A Perl CGI script used as a web service to generate random numbers.\r\n\r\nArmed with a template that will query against the full set of items in a wishlist, we're ready to look into making a random selection from a list of products.  \r\n\r\nBut first, we need to pick a random number.  Unfortunately, there doesn't appear to be any `random()` function in the XPath or XSLT standards.  There *is* a [`math:random()`][exsl_random] from EXSLT implemented in `libxslt`, but I seem to be having a bit of a problem getting it to produce anything other than the same sequence of numbers.  I suspect there's a problem in seeding the random number generator, but I've yet to work out how to fix it.  (Suggestions welcome.)\r\n\r\nSo, I cheated and made another workaround with a CGI script on my web server that generates random numbers in a simple XML document.  Currently, it's hosted here:\r\n\r\n    http://www.decafbad.com/2004/05/random-xml\r\n\r\nAnd this is what the script looks like:\r\n\r\n    #!/usr/bin/perl\r\n\r\n    use strict;\r\n    use CGI;\r\n\r\n    my $q = new CGI();\r\n\r\n    my $min = $q->param('min') or 0;\r\n    my $max = $q->param('max') or 1;\r\n    my $int = $q->param('int');\r\n\r\n    my $num = $min + ( rand() * ($max - $min));\r\n    if ($int) { $num = int($num); }\r\n\r\n    print $q->header('text/xml');\r\n    print \"<rand>$num</rand>\\n\";\r\n\r\nThis is a very simple CGI.  It accepts the parameters `max`, `min`, and `int`.  The values of these parameters determine the maximum and minimum value for the random number returned, and whether or not it should be an integer.  For example, the [following URL][rand_url] should return an integer between 10 and 20:\r\n\r\n    http://www.decafbad.com/2004/05/random-xml?\r\n    int=1&#38;min=10&#38;max=20\r\n\r\nUsing this as a web service in the stylesheet with the `document()` function, we can get a random number.  If you've got web space where you can host CGI scripts, I suggest you host a copy of this script yourself, since I can't guarantee how long mine will stick around.  But, for as long at works, feel free to use the service from my server.\r\n\r\nMoving along, let's add a new named template to the stylesheet, called `randomWishlistProduct`:\r\n\r\n      <xsl:template name=\"randomWishlistProduct\">\r\n    \r\n        <xsl:param name=\"wishlist\" /> <!-- Wishlist ID -->\r\n        \r\n        <!-- Gather all the products for the current wishlist -->\r\n        <xsl:variable name=\"products\">\r\n          <xsl:call-template name=\"processWishlist\">\r\n            <xsl:with-param name=\"wishlist\" select=\"$wishlist\" />\r\n          </xsl:call-template>\r\n        </xsl:variable>\r\n\r\nJust like the `processWishlist` template, we start by defining the parameter `wishlist` to accept a wishlist ID.  Using this ID, we call the `processWishlist` template itself and store the complete list of products queried from the wishlist into the variable `$products`.\r\n\r\n        <!-- Count the products in the wishlist -->\r\n        <xsl:variable name=\"max_products\"\r\n                      select=\"count(exsl:node-set($products)/Details)\" />\r\n\r\nThis next step counts the number of products found in the wishlist.  The one tricky bit here is the use of the EXSLT function [`exsl:node-set()`][exsl_node_set]: The `$products` variable contains what's called a [*result tree fragment*][xslt_result_tree_fragment], which is a kind of cross between XML data nodes and a plain old string.  This type of data does not normally allow the full set of XPath operators to be used on it, so first we need to use `exsl:node-set()` to turn it into a full-fledged node set.  Then we can look up the `Details` element nodes and count them.  \r\n\r\n        <!-- Conjure up a random index within the list of products -->\r\n        <xsl:variable name=\"rand_product_num\"\r\n                      select=\"document(concat(\r\n                      'http://www.decafbad.com/2004/05/random-xml?',\r\n                      'int=1&amp;',\r\n                      'min=1&amp;',\r\n                      'max=',$max_products))/rand\" />\r\n\r\nHere is where the random number service comes in handy.  The `concat()` function is used to build the URL to the service, with parameters specifying that the number should be an integer, and should fall between 1 and the number of products in the wishlist.  The `document()` function grabs the XML document from the service, and the value is extracted from the single element the document contains.\r\n\r\nThere is an alternative to this last bit, should you happen to have a properly working `math:random()` function in your XSLT processor:\r\n\r\n        <xsl:variable name=\"rand_product_num\" select=\"round( math:random() *\r\n                      $max_products ) + 1\" />\r\n\r\nIf you can use this instead, you'll have no need for the random number web service.  This version is obviously more concise, and doesn't require another trip out to a web service.  You might want to try it--but if you find that you keep getting the same wishlist items selected, then you've run into the problem I found with the random number generator.\r\n\r\nNow, let's wrap this template up by selecting an item:\r\n        \r\n        <!-- Copy the product as indexed by the random number -->\r\n        <xsl:copy-of select=\"exsl:node-set($products)/Details[\r\n                     position()=$rand_product_num]\" />\r\n           \r\n      </xsl:template>\r\n\r\nAgain, we need to use the `exsl:node-set()` function to turn the result tree fragment in the `$products` variable into a node set, from which we select and copy the `Details` element whose position in the data is indexed by the random number we just selected.  Just one last tweak needed to wrap up this iteration of our stylesheet.  We need to swap out the call to the `processWishlist` function at the end and replace it with a call to `randomWishlistProduct`:\r\n\r\n      <xsl:template match=\"/wishes:wishes\">\r\n\r\n        <xsl:for-each select=\"//wishes:wishlist\">\r\n          <wishes:wishitem>\r\n            <xsl:copy-of select=\".\" />\r\n            <xsl:call-template name=\"randomWishlistProduct\">\r\n              <xsl:with-param name=\"wishlist\" select=\".\" />\r\n            </xsl:call-template>\r\n          </wishes:wishitem>\r\n        </xsl:for-each>\r\n    \r\n      </xsl:template>\r\n\r\nAfter these changes, you should be able to run the stylesheet ([wishes-ex3.xsl][wishes_ex3]) and get something like the following:\r\n\r\n    <wishes:wishitem xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\">\r\n        <wishes:wishlist label=\"The Girl\">35OIOYWQ9XQAE</wishes:wishlist>\r\n        <Details ...>...</Details>\r\n    </wishes:wishitem>\r\n    <wishes:wishitem xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\">\r\n        <wishes:wishlist label=\"Me\">1QWYI6P2JF3Q5</wishes:wishlist>\r\n        <Details ...>...</Details>\r\n    </wishes:wishitem>\r\n\r\nThis is similar to the output of the previous iteration of the stylesheet, but this time there's only one product selected at random for each wishlist.  \r\n\r\n### Shopping Carts\r\n\r\nSome ready-made files are available for this section:\r\n* [`wishes-ex4.xsl`][wishes-ex4.xsl]: The fourth iteration of the stylesheet in development.\r\n\r\nBy this point, we've been able to query and filter products in Amazon wishlists, and we've selected an item at random from each wishlist we've queried.  Now, let's enable some purchases.\r\n\r\nThe AWS provides for Remote Shopping Cart functionality, whereby items can be added to an Amazon.com shopping cart programmatically.  This is about as close as we can get to automating the purchase of items selected from the wishlists--there is no API functionality for actually completing the ordering of items.  If you really think about it, this really is a good thing and *should* demand human intervention; we certainly wouldn't want this script going crazy and accidentally buying up everything on a wishlist.\r\n\r\nDocumentation for the AWS Remote Shopping Cart explains that a shopping cart can be created and items added with a URL like the following:\r\n\r\n    http://xml.amazon.com/onca/xml3?\r\n    ShoppingCart=add&#38;\r\n    f=xml&#38;\r\n    dev-t=[Developer Token goes here]&#38;\r\n    t=[Associates ID goes here]&#38;\r\n    Asin.[ASIN goes here]=[quantity goes here]&#38;\r\n    sims=true\r\n\r\nPart of this should look familiar, so we already know what to do with the developer token and the associates ID.  The last part, specifying product ASIN and quantity, can be filled out with information contained in the product records selected at random from the wishlists.  \r\n\r\nSo, let's start by revising the template at the end of the stylesheet:\r\n\r\n    <xsl:template match=\"/wishes:wishes\">\r\n\r\n        <xsl:variable name=\"random_products\">      \r\n          <xsl:for-each select=\"//wishes:wishlist\">\r\n            <wishes:wishitem>\r\n              <xsl:copy-of select=\".\" />\r\n              <xsl:call-template name=\"randomWishlistProduct\">\r\n                <xsl:with-param name=\"wishlist\" select=\".\" />\r\n              </xsl:call-template>\r\n            </wishes:wishitem>\r\n          </xsl:for-each>\r\n        </xsl:variable>\r\n\r\nHere, we've taken what was the output of the previous iteration of the stylesheet and stuffed it into the variable `$random_products`.  Next, let's fill in the blanks and build a Remote Shopping Cart URL:\r\n\r\n        <xsl:variable name=\"shopping_cart_create_url\">\r\n          <!-- Standard AWS URL -->\r\n          <xsl:text>http://xml.amazon.com/onca/xml3?</xsl:text>\r\n\r\n          <!-- Add in the selected items -->\r\n          <xsl:for-each select=\"exsl:node-set($random_products)\r\n                                /wishes:wishitem/Details\">\r\n            <xsl:text>Asin.</xsl:text><xsl:value-of select=\"Asin\" />\r\n            <xsl:text>=1&amp;</xsl:text>\r\n          </xsl:for-each>\r\n\r\n          <!-- Wrap up with the shopping cart function and required tokens -->\r\n          <xsl:text>ShoppingCart=add&amp;</xsl:text>\r\n          <xsl:text>f=xml&amp;</xsl:text>\r\n          <xsl:text>dev-t=</xsl:text><xsl:value-of select=\"$devtoken\" />\r\n          <xsl:text>&amp;</xsl:text>\r\n          <xsl:text>t=</xsl:text><xsl:value-of select=\"$associate\" />\r\n        </xsl:variable>\r\n    \r\nSince simple XPath doesn't allow for the looping needed for multiple items, we can't just concatenate this URL together in a `select` expression like we did with the wishlist item query.  So, we use `xslt:foreach` to build this with blocks of text using the `xsl:text` element.  We iterate though the random products chosen from wishlists and add an ASIN for each to the URL with a quantity of 1. Then, we use the `$devtoken` and `$associate` variables to fill in their respective spots.\r\n\r\nNote that this could have been written without using the `xsl:text` elements like so:\r\n\r\n        <xsl:variable name=\"shopping_cart_create_url\">http://xml.amazon.\r\n        com/onca/xml3?ShoppingCart=add&amp;f=xml&amp;dev-t=<xsl:value-of \r\n        select=\"$devtoken\" />&amp;t=<xsl:value-of select=\"$associate\" />\r\n        &amp;<xsl:for-each select=\"exsl:node-set($random_products)/\r\n        wishes:wishitem/Details\">Asin.<xsl:value-of select=\"Asin\" />=1\r\n        &amp;</xsl:for-each></xsl:variable>\r\n\r\nThis removes the clutter of all the `xsl:text` elements, but it would need to be piled all on one line in order to keep undesired whitespace from getting into the URL.  I made a small attempt at wrapping this line here, but line breaks and spaces would leave us with a non-functioning shopping cart URL.  It's up to you to decide which to use--personally, I prefer the `xsl:text` clutter for the ability to add in comments and clarify things a bit.\r\n\r\nFinally, having built the shopping cart URL, let's use it to get a shopping cart and wrap things up:\r\n\r\n        <xsl:variable name=\"shopping_cart\"\r\n                      select=\"document($shopping_cart_create_url)\" />\r\n    \r\n        <xsl:copy-of select=\"$shopping_cart\" />\r\n    \r\n    </xsl:template>  \r\n\r\nAs an aside, this part is pushing the concept of a REST web service a bit: In the REST philosophy, requests using the GET method (which is what `document()` uses) should only return existing resources and not create new resources or cause modifications to happen.  Instead, these sorts of actions should use a POST request.  But, since we've already accepted a few rough edges and workarounds in this project so far, we won't let a point of esoterica like that stop us.  (That and, well, this is the way Amazon designed their web service, so we'll take what we can get.)\r\n\r\nOnce you run this iteration of the stylesheet ([wishes-ex4.xsl][wishes_ex4]), you should get something like this XML as output:\r\n\r\n    <ShoppingCartResponse ...>\r\n      ...\r\n      <ShoppingCart>\r\n       <CartId>...</CartId>\r\n       <HMAC>...</HMAC>\r\n       <PurchaseUrl>...</PurchaseUrl>\r\n       <Items>\r\n        <Item>...</item>\r\n        <Item>...</item>\r\n       </Items>\r\n      </ShoppingCart>\r\n      ...\r\n    </ShoppingCartResponse>\r\n\r\nThe AWS documentation describes the vital elements here like so:\r\n\r\n* `CartId` - The Cart ID is the unique identifier for a given shopping cart.\r\n* `HMAC` - The HMAC is a security token that must be passed back to Amazon Web Services for using an existing cart.\r\n* `PurchaseUrl` - Use the purchase URL to transfer the remote shopping cart from your application to Amazon so that your application's users may complete their purchases.&#160; The purchase URL merges the remote shopping cart with the Amazon.com shopping cart. \r\n\r\nSo, in short, whenever we want to do any sort of manipulation on this Remote Shopping Cart via AWS, we'll need to remember and later supply both the `CartId` and `HMAC` found in the XML returned at its creation.  And, once we're all ready to check out, the `PurchaseUrl` points to where we'll need to browse in person.\r\n\r\n### Stay Tuned!\r\n\r\nThis concludes Part 2 of the Wish-of-the-Month Club.  Following this will be the final part, where we tie everything together and start firing off monthly emails!\r\n\r\n<!-- links -->\r\n\r\n[missadroit]: http://missadroit.livejournal.com \"Miss Adroit, my favorite girl in the world\"\r\n[mywishlist]: http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5 \"Buy me something, will ya?\"\r\n[herwishlist]: http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE \"Buy her something, will ya?\"\r\n[amazonapi]: http://www.amazon.com/gp/aws/landing.html \"Amazon Web Services\"\r\n[libxml]: http://www.xmlsoft.org/\r\n[xalan]: http://xml.apache.org/xalan-j/\r\n[sablotron]: http://www.gingerall.com/charlie/ga/xml/p_sab.xml\r\n[saxon]: http://saxon.sourceforge.net/\r\n[exslt]: http://www.exslt.org/\r\n[libxslt]: http://www.xmlsoft.org/XSLT.html\r\n[spideringhacks]: http://www.amazon.com/exec/obidos/ASIN/0596005776/0xdecafbad-20 \"O'Reilly's Spidering Hacks\"\r\n[xslscraper]: http://www.decafbad.com/twiki/bin/view/Main/XslScraper \"Scrape RSS and Atom from HTML using Tidy and XSLT\"\r\n[awsdownload]: http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&#38;node=3434641&#38;no=3435361&#38;me=A36L942TSJ2AJA\r\n[awstoken]: https://associates.amazon.com/exec/panama/associates/join/developer/application.html\r\n[amazonassociate]: http://associates.amazon.com\r\n[wlsearch]: http://www.amazon.com/gp/registry/search.html/002-7899886-3676027?%5Fencoding=UTF8&#38;type=wishlist\r\n[wlurl]: http://xml.amazon.com/onca/xml3?t=0xdecafbad-20&#38;dev-t=D8HVH869XA0NP&#38;type=lite&#38;WishlistSearch=35OIOYWQ9XQAE&#38;f=xml\r\n[detailsurl]: http://www.amazon.com/exec/obidos/ASIN/0262133601/0xdecafbad-20?dev-t=D8HVH869XA0NP%26camp=2025%26link_code=xm2\r\n[awslite]: http://xml.amazon.com/schemas3/dev-lite.xsd\r\n[fink]: http://fink.sourceforge.net\r\n[testxslt]: http://www.entropy.ch:16080/software/macosx/#testxslt\r\n[darwinports]: http://darwinports.opendarwin.org/\r\n[curl]: http://www.decafbad.com/#TODO\r\n[wget]: http://www.decafbad.com/#TODO\r\n[xpconcat]: http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-concat\r\n[xpdocument]: http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-document\r\n[wishescvs]: http://www.decafbad.com/cvs/hacks/wishes/\r\n[wishes.tar.gz]: http://www.decafbad.com/cvs/hacks/wishes/wishes.tar.gz?tarball=1 \"All Wish-of-the-Month Club files wrapped up in a tarball\"\r\n[wishes.xml]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\r\n[wishes-ex1.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\r\n[wishes-ex2.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex2.xsl\r\n[wishes-ex3.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex3.xsl\r\n[wishes-ex4.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex4.xsl\r\n[wishes-ex5.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\r\n[wishes-ex6.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex6.xsl\r\n[random-xml]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/random-xml\r\n[wishes_html_screenshot]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg\r\n[xslt_iteration]: http://www.dpawson.co.uk/xsl/sect2/N4806.html \"Iteration in XSLT\"\r\n[xslt_recursion]: http://www-106.ibm.com/developerworks/xml/library/x-xslrecur/ \"Use recursion effectively in XSL\"\r\n[exsl_random]: http://www.exslt.org/math/functions/random/index.html\r\n[exsl_node_set]: http://www.exslt.org/exsl/functions/node-set/index.html\r\n[rand_url]: http://www.decafbad.com/2004/05/random-xml?int=1&#38;min=10&#38;max=20 \"A random integer between 10 and 20, in XML\"\r\n[xslt_result_tree_fragment]: http://www.w3.org/TR/xslt#section-Result-Tree-Fragments\r\n\r\n[email_attach_anatomy]: http://www.dpo.uab.edu/Email/attach.html \"Anatomy of an Email Attachment\"\r\n[email_mime_and_html]: http://www.abiglime.com/webmaster/articles/cgi/010698.htm \"How to encapsulate HTML in an email message\"\r\n\r\n[email_html_and_text]: http://www.wilsonweb.com/wmt5/html-email-multi.htm \"Sending HTML and Plain Text E-Mail Simultaneously\"\r\n[man_sendmail]: http://www.hmug.org/man/8/sendmail.html \"man: sendmail\"\r\n[rfc1521]: http://www.faqs.org/rfcs/rfc1521.html \"RFC 1521\"\r\n[cron1]: http://www.lysator.liu.se/~forsberg/linux/cron.html \"Doing things periodically - Using CRON\"\r\n[cron2]: http://www.itworld.com/Comp/2378/swol-0825-unix101/ \"Using cron basics\"\r\n[python_libxml]: http://xmlsoft.org/python.html \r\n[part1]: http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\r\n<!--more-->\r\nshortname=wishofthemonthclub2\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/06/27/wishofthemonthclub2",
    "summary": "<p><i>Here&apos;s the next installment of the Wish-of-the-Month Club.  You can <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">revisit the first part</a>, too, if you&apos;ve missed it.  I&apos;d meant to post it within a week of the first part, so apologies all around to anyone who has been tapping a foot waiting for it.  Enjoy!</i></p>\n<h3 id=\"paging-through-wishes\">Paging Through Wishes</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex2.xsl\"><code>wishes-ex2.xsl</code></a>: The second iteration of the stylesheet in development.</li>\n</ul>\n<p>Now we&apos;ve got a way to make queries against Amazon Web Services, not entirely unlike what you might be used to if you tinker with MySQL databases on a regular basis.  At this point, though, we still have a bit of refining to make to this query.  If you take a look at the data produced by the query in its current state, and compare that to what you see on wishlists in your browser, you should notice some things missing.</p>\n<p>If you look at <a href=\"http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5\" title=\"Buy me something, will ya?\">my wishlist</a>, you&apos;ll notice that items span several pages when visited by browser.  As it turns out, AWS queries work in a similar fashion--each query returns only a limited number of items (about 10), and an additional parameter supplied to further queries is required to step through further pages of results.  So, using what we&apos;ve built so far will only get us to the first page of wishlist items; to get all of the items, we&apos;ll need a way to step through all of the pages.</p>\n<p>In playing with this, I experienced a bit of hairpulling frustration:  The AWS documentation, under &quot;Generating Additional Product Results&quot;, claims that XML returned by the service will supply a count of the total pages available for a given query.  And although I see this element present in other types of searches, the <code>TotalPages</code> element is absent when querying on wishlists.  This may be a bug, or it may be an undocumented change in the service--either way, it was a surprise and leaves me with no official way to know how many pages I need to ask for in order to have a complete set of data.  </p>\n<p>With some further tinkering, though, I figured out a workaround: If a query is made for a page number beyond the final page, the XML returned will be a duplicate of the final page.  Once I see a duplicate item appear, I know it&apos;s time to stop paging through results.  This is completely undocumented behavior, and could break at any time (ie. if Amazon decided to start issuing an error for a page index out of bounds), but it&apos;ll work for now.</p>\n<p>This calls for reworking the <code>processWishlist</code> template.  For a given wishlist, it will need to iterate through a sequence of page numbers, requesting XML from AWS for each, stopping when the first duplicate page is found.  Since XSLT is heavily steeped in functional programming concepts, this sort of <a href=\"http://www.dpawson.co.uk/xsl/sect2/N4806.html\" title=\"Iteration in XSLT\">iteration in XSLT</a> is best done <a href=\"http://www-106.ibm.com/developerworks/xml/library/x-xslrecur/\" title=\"Use recursion effectively in XSL\">with recursion</a>:</p>\n<pre><code>  &lt;xsl:template name=&quot;processWishlist&quot;&gt;\n\n    &lt;xsl:param name=&quot;wishlist&quot; /&gt;              &lt;!-- Wishlist ID --&gt;\n    &lt;xsl:param name=&quot;max&quot;   select=&quot;50&quot; /&gt;     &lt;!-- Arbitrary upper loop limit --&gt;\n    &lt;xsl:param name=&quot;curr_page&quot; select=&quot;1&quot; /&gt;  &lt;!-- Curr page # --&gt;\n    &lt;xsl:param name=&quot;prev_first_asin&quot; /&gt;       &lt;!-- Keeping track of repeats --&gt;</code></pre>\n<p>The first modification to this template is the addition of three parameters:</p>\n<ul>\n<li><code>max</code> provides an arbitrary upper limit to the number of pages through which this template will iterate.</li>\n<li><code>curr_page</code> contains the number of the page to be requested in this iteration.</li>\n<li><code>prev_first_asin</code> will contain the ASIN number of the first item from the previous iteration&apos;s page of results.</li>\n</ul>\n<p>Next, we modify the URL used to query for wishlist data:</p>\n<pre><code>    &lt;!-- Fetch the wishlist products --&gt;\n    &lt;xsl:variable name=&quot;details&quot; select=&quot;document(concat(\n                  &apos;http://xml.amazon.com/onca/xml3?&apos;,\n                  &apos;t=&apos;,$associate,&apos;&amp;amp;&apos;,\n                  &apos;dev-t=&apos;,$devtoken,&apos;&amp;amp;&apos;,\n                  &apos;WishlistSearch=&apos;,$wishlist,&apos;&amp;amp;&apos;,\n                  &apos;type=lite&amp;amp;f=xml&amp;amp;&apos;,\n                  &apos;page=&apos;,$curr_page))//Details&quot; /&gt;</code></pre>\n<p>The only addition here beyond the previous version is the <code>page</code> parameter in the URL.  Not much mystery here--this parameter specifies which page of results we want.  Now, let&apos;s build the loop:</p>\n<pre><code>    &lt;!-- Snag the first item Asin --&gt;\n    &lt;xsl:variable name=&quot;curr_first_asin&quot; select=&quot;$details/Asin/text()&quot; /&gt;\n\n    &lt;!-- If we haven&apos;t exceeded the loop limit, and this first Asin isn&apos;t --&gt;\n    &lt;!-- a repeat of the previous loop (indicating we&apos;ve run out of new   --&gt;\n    &lt;!-- pages), then go ahead...                                         --&gt;\n    &lt;xsl:if test=&quot;(($curr_page+1) &amp;lt; $max) and\n                  (string-length($curr_first_asin) &amp;gt; 0) and\n                  not($curr_first_asin = $prev_first_asin)&quot;&gt;</code></pre>\n<p>We capture the ASIN of the first item in this page of results and check to see if we should continue.  This <code>if</code> conditional first ensures that we&apos;re not past the sanity guard for loop iterations, makes sure that we actually got a non-empty current first ASIN, then checks our current first product&apos;s ASIN against what was passed in as the previous iteration&apos;s first product&apos;s ASIN.  If this was the first time through the loop, this value should be empty and therefore wouldn&apos;t match the current ASIN.  But, if we&apos;ve gone past the end of results, the previous and current ASIN values should match, and the conditional will fail.</p>\n<p>Moving along into the body of the conditional, we copy in wishlist products filtered on a price maximum, just as before:</p>\n<pre><code>      &lt;!-- Copy products, filtering on a maximum price --&gt;\n      &lt;xsl:copy-of select=&quot;$details/OurPrice[number(substring(\n                   text(),2)) &amp;lt; $maxprice]/..&quot; /&gt;</code></pre>\n<p>Having done that, we move onto the recursive end of this template:</p>\n<pre><code>      &lt;!-- Loop by recursion to get the next page --&gt;\n      &lt;xsl:call-template name=&quot;processWishlist&quot;&gt;\n        &lt;xsl:with-param name=&quot;wishlist&quot;        select=&quot;$wishlist&quot; /&gt;\n        &lt;xsl:with-param name=&quot;max&quot;             select=&quot;$max&quot; /&gt;\n        &lt;xsl:with-param name=&quot;curr_page&quot;       select=&quot;$curr_page + 1&quot; /&gt;\n        &lt;xsl:with-param name=&quot;prev_first_asin&quot; select=&quot;$curr_first_asin&quot; /&gt;\n      &lt;/xsl:call-template&gt;\n\n    &lt;/xsl:if&gt;    \n  &lt;/xsl:template&gt;</code></pre>\n<p>Here, the template makes a recursive call back to itself, passing through the wishlist ID and the maximum iteration count.  Since variables in XSLT are immutable, meaning that their values can&apos;t be changed once they&apos;ve been set, we can&apos;t increment <code>$curr_page</code> in-place like a loop counter in other languages--so, the current page count <em>value</em> is incremented and passed to the recursive call as a parameter.  Finally, the current first item&apos;s ASIN is passed along, to become the previous ASIN for the next iteration.</p>\n<p>Note that when the conditional fails--that is, if the loop limit is passed or a duplicate page is detected--the loop ends.  In other words, nothing further happens and execution pops back up out of all the levels of recursion and the top-level template ends.  </p>\n<p>I wrote &quot;<em>when</em> the conditional fails&quot;.  This is a key point: for the loop to eventually end, this conditional <em>must</em> fail (or be made to fail) at some point, else this loop will happily progress through page requests forever.  This is the reason for the <code>$max</code> parameter limiting the number of iterations, in case something goes haywire--like, oh say, a failure of our duplicate-page detection hack as a loop ending condition.  A useful exercise for the reader might be to add some additional diagnostic code to report that the limit was hit versus a natural end to results.</p>\n<h3 id=\"random-numbers\">Random Numbers</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex3.xsl\"><code>wishes-ex3.xsl</code></a>: The third iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/random-xml\"><code>random-xml</code></a>: A Perl CGI script used as a web service to generate random numbers.</li>\n</ul>\n<p>Armed with a template that will query against the full set of items in a wishlist, we&apos;re ready to look into making a random selection from a list of products.  </p>\n<p>But first, we need to pick a random number.  Unfortunately, there doesn&apos;t appear to be any <code>random()</code> function in the XPath or XSLT standards.  There <em>is</em> a <a href=\"http://www.exslt.org/math/functions/random/index.html\"><code>math:random()</code></a> from EXSLT implemented in <code>libxslt</code>, but I seem to be having a bit of a problem getting it to produce anything other than the same sequence of numbers.  I suspect there&apos;s a problem in seeding the random number generator, but I&apos;ve yet to work out how to fix it.  (Suggestions welcome.)</p>\n<p>So, I cheated and made another workaround with a CGI script on my web server that generates random numbers in a simple XML document.  Currently, it&apos;s hosted here:</p>\n<pre><code>http://www.decafbad.com/2004/05/random-xml</code></pre>\n<p>And this is what the script looks like:</p>\n<pre><code>#!/usr/bin/perl\n\nuse strict;\nuse CGI;\n\nmy $q = new CGI();\n\nmy $min = $q-&gt;param(&apos;min&apos;) or 0;\nmy $max = $q-&gt;param(&apos;max&apos;) or 1;\nmy $int = $q-&gt;param(&apos;int&apos;);\n\nmy $num = $min + ( rand() * ($max - $min));\nif ($int) { $num = int($num); }\n\nprint $q-&gt;header(&apos;text/xml&apos;);\nprint &quot;&lt;rand&gt;$num&lt;/rand&gt;\\n&quot;;</code></pre>\n<p>This is a very simple CGI.  It accepts the parameters <code>max</code>, <code>min</code>, and <code>int</code>.  The values of these parameters determine the maximum and minimum value for the random number returned, and whether or not it should be an integer.  For example, the <a href=\"http://www.decafbad.com/2004/05/random-xml?int=1&amp;min=10&amp;max=20\" title=\"A random integer between 10 and 20, in XML\">following URL</a> should return an integer between 10 and 20:</p>\n<pre><code>http://www.decafbad.com/2004/05/random-xml?\nint=1&amp;#38;min=10&amp;#38;max=20</code></pre>\n<p>Using this as a web service in the stylesheet with the <code>document()</code> function, we can get a random number.  If you&apos;ve got web space where you can host CGI scripts, I suggest you host a copy of this script yourself, since I can&apos;t guarantee how long mine will stick around.  But, for as long at works, feel free to use the service from my server.</p>\n<p>Moving along, let&apos;s add a new named template to the stylesheet, called <code>randomWishlistProduct</code>:</p>\n<pre><code>  &lt;xsl:template name=&quot;randomWishlistProduct&quot;&gt;\n\n    &lt;xsl:param name=&quot;wishlist&quot; /&gt; &lt;!-- Wishlist ID --&gt;\n\n    &lt;!-- Gather all the products for the current wishlist --&gt;\n    &lt;xsl:variable name=&quot;products&quot;&gt;\n      &lt;xsl:call-template name=&quot;processWishlist&quot;&gt;\n        &lt;xsl:with-param name=&quot;wishlist&quot; select=&quot;$wishlist&quot; /&gt;\n      &lt;/xsl:call-template&gt;\n    &lt;/xsl:variable&gt;</code></pre>\n<p>Just like the <code>processWishlist</code> template, we start by defining the parameter <code>wishlist</code> to accept a wishlist ID.  Using this ID, we call the <code>processWishlist</code> template itself and store the complete list of products queried from the wishlist into the variable <code>$products</code>.</p>\n<pre><code>    &lt;!-- Count the products in the wishlist --&gt;\n    &lt;xsl:variable name=&quot;max_products&quot;\n                  select=&quot;count(exsl:node-set($products)/Details)&quot; /&gt;</code></pre>\n<p>This next step counts the number of products found in the wishlist.  The one tricky bit here is the use of the EXSLT function <a href=\"http://www.exslt.org/exsl/functions/node-set/index.html\"><code>exsl:node-set()</code></a>: The <code>$products</code> variable contains what&apos;s called a <a href=\"http://www.w3.org/TR/xslt#section-Result-Tree-Fragments\"><em>result tree fragment</em></a>, which is a kind of cross between XML data nodes and a plain old string.  This type of data does not normally allow the full set of XPath operators to be used on it, so first we need to use <code>exsl:node-set()</code> to turn it into a full-fledged node set.  Then we can look up the <code>Details</code> element nodes and count them.  </p>\n<pre><code>    &lt;!-- Conjure up a random index within the list of products --&gt;\n    &lt;xsl:variable name=&quot;rand_product_num&quot;\n                  select=&quot;document(concat(\n                  &apos;http://www.decafbad.com/2004/05/random-xml?&apos;,\n                  &apos;int=1&amp;amp;&apos;,\n                  &apos;min=1&amp;amp;&apos;,\n                  &apos;max=&apos;,$max_products))/rand&quot; /&gt;</code></pre>\n<p>Here is where the random number service comes in handy.  The <code>concat()</code> function is used to build the URL to the service, with parameters specifying that the number should be an integer, and should fall between 1 and the number of products in the wishlist.  The <code>document()</code> function grabs the XML document from the service, and the value is extracted from the single element the document contains.</p>\n<p>There is an alternative to this last bit, should you happen to have a properly working <code>math:random()</code> function in your XSLT processor:</p>\n<pre><code>    &lt;xsl:variable name=&quot;rand_product_num&quot; select=&quot;round( math:random() *\n                  $max_products ) + 1&quot; /&gt;</code></pre>\n<p>If you can use this instead, you&apos;ll have no need for the random number web service.  This version is obviously more concise, and doesn&apos;t require another trip out to a web service.  You might want to try it--but if you find that you keep getting the same wishlist items selected, then you&apos;ve run into the problem I found with the random number generator.</p>\n<p>Now, let&apos;s wrap this template up by selecting an item:</p>\n<pre><code>    &lt;!-- Copy the product as indexed by the random number --&gt;\n    &lt;xsl:copy-of select=&quot;exsl:node-set($products)/Details[\n                 position()=$rand_product_num]&quot; /&gt;\n\n  &lt;/xsl:template&gt;</code></pre>\n<p>Again, we need to use the <code>exsl:node-set()</code> function to turn the result tree fragment in the <code>$products</code> variable into a node set, from which we select and copy the <code>Details</code> element whose position in the data is indexed by the random number we just selected.  Just one last tweak needed to wrap up this iteration of our stylesheet.  We need to swap out the call to the <code>processWishlist</code> function at the end and replace it with a call to <code>randomWishlistProduct</code>:</p>\n<pre><code>  &lt;xsl:template match=&quot;/wishes:wishes&quot;&gt;\n\n    &lt;xsl:for-each select=&quot;//wishes:wishlist&quot;&gt;\n      &lt;wishes:wishitem&gt;\n        &lt;xsl:copy-of select=&quot;.&quot; /&gt;\n        &lt;xsl:call-template name=&quot;randomWishlistProduct&quot;&gt;\n          &lt;xsl:with-param name=&quot;wishlist&quot; select=&quot;.&quot; /&gt;\n        &lt;/xsl:call-template&gt;\n      &lt;/wishes:wishitem&gt;\n    &lt;/xsl:for-each&gt;\n\n  &lt;/xsl:template&gt;</code></pre>\n<p>After these changes, you should be able to run the stylesheet ([wishes-ex3.xsl][wishes_ex3]) and get something like the following:</p>\n<pre><code>&lt;wishes:wishitem xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n    &lt;wishes:wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n&lt;/wishes:wishitem&gt;\n&lt;wishes:wishitem xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n    &lt;wishes:wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n&lt;/wishes:wishitem&gt;</code></pre>\n<p>This is similar to the output of the previous iteration of the stylesheet, but this time there&apos;s only one product selected at random for each wishlist.  </p>\n<h3 id=\"shopping-carts\">Shopping Carts</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex4.xsl\"><code>wishes-ex4.xsl</code></a>: The fourth iteration of the stylesheet in development.</li>\n</ul>\n<p>By this point, we&apos;ve been able to query and filter products in Amazon wishlists, and we&apos;ve selected an item at random from each wishlist we&apos;ve queried.  Now, let&apos;s enable some purchases.</p>\n<p>The AWS provides for Remote Shopping Cart functionality, whereby items can be added to an Amazon.com shopping cart programmatically.  This is about as close as we can get to automating the purchase of items selected from the wishlists--there is no API functionality for actually completing the ordering of items.  If you really think about it, this really is a good thing and <em>should</em> demand human intervention; we certainly wouldn&apos;t want this script going crazy and accidentally buying up everything on a wishlist.</p>\n<p>Documentation for the AWS Remote Shopping Cart explains that a shopping cart can be created and items added with a URL like the following:</p>\n<pre><code>http://xml.amazon.com/onca/xml3?\nShoppingCart=add&amp;#38;\nf=xml&amp;#38;\ndev-t=[Developer Token goes here]&amp;#38;\nt=[Associates ID goes here]&amp;#38;\nAsin.[ASIN goes here]=[quantity goes here]&amp;#38;\nsims=true</code></pre>\n<p>Part of this should look familiar, so we already know what to do with the developer token and the associates ID.  The last part, specifying product ASIN and quantity, can be filled out with information contained in the product records selected at random from the wishlists.  </p>\n<p>So, let&apos;s start by revising the template at the end of the stylesheet:</p>\n<pre><code>&lt;xsl:template match=&quot;/wishes:wishes&quot;&gt;\n\n    &lt;xsl:variable name=&quot;random_products&quot;&gt;      \n      &lt;xsl:for-each select=&quot;//wishes:wishlist&quot;&gt;\n        &lt;wishes:wishitem&gt;\n          &lt;xsl:copy-of select=&quot;.&quot; /&gt;\n          &lt;xsl:call-template name=&quot;randomWishlistProduct&quot;&gt;\n            &lt;xsl:with-param name=&quot;wishlist&quot; select=&quot;.&quot; /&gt;\n          &lt;/xsl:call-template&gt;\n        &lt;/wishes:wishitem&gt;\n      &lt;/xsl:for-each&gt;\n    &lt;/xsl:variable&gt;</code></pre>\n<p>Here, we&apos;ve taken what was the output of the previous iteration of the stylesheet and stuffed it into the variable <code>$random_products</code>.  Next, let&apos;s fill in the blanks and build a Remote Shopping Cart URL:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart_create_url&quot;&gt;\n      &lt;!-- Standard AWS URL --&gt;\n      &lt;xsl:text&gt;http://xml.amazon.com/onca/xml3?&lt;/xsl:text&gt;\n\n      &lt;!-- Add in the selected items --&gt;\n      &lt;xsl:for-each select=&quot;exsl:node-set($random_products)\n                            /wishes:wishitem/Details&quot;&gt;\n        &lt;xsl:text&gt;Asin.&lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;Asin&quot; /&gt;\n        &lt;xsl:text&gt;=1&amp;amp;&lt;/xsl:text&gt;\n      &lt;/xsl:for-each&gt;\n\n      &lt;!-- Wrap up with the shopping cart function and required tokens --&gt;\n      &lt;xsl:text&gt;ShoppingCart=add&amp;amp;&lt;/xsl:text&gt;\n      &lt;xsl:text&gt;f=xml&amp;amp;&lt;/xsl:text&gt;\n      &lt;xsl:text&gt;dev-t=&lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;$devtoken&quot; /&gt;\n      &lt;xsl:text&gt;&amp;amp;&lt;/xsl:text&gt;\n      &lt;xsl:text&gt;t=&lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;$associate&quot; /&gt;\n    &lt;/xsl:variable&gt;</code></pre>\n<p>Since simple XPath doesn&apos;t allow for the looping needed for multiple items, we can&apos;t just concatenate this URL together in a <code>select</code> expression like we did with the wishlist item query.  So, we use <code>xslt:foreach</code> to build this with blocks of text using the <code>xsl:text</code> element.  We iterate though the random products chosen from wishlists and add an ASIN for each to the URL with a quantity of 1. Then, we use the <code>$devtoken</code> and <code>$associate</code> variables to fill in their respective spots.</p>\n<p>Note that this could have been written without using the <code>xsl:text</code> elements like so:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart_create_url&quot;&gt;http://xml.amazon.\n    com/onca/xml3?ShoppingCart=add&amp;amp;f=xml&amp;amp;dev-t=&lt;xsl:value-of \n    select=&quot;$devtoken&quot; /&gt;&amp;amp;t=&lt;xsl:value-of select=&quot;$associate&quot; /&gt;\n    &amp;amp;&lt;xsl:for-each select=&quot;exsl:node-set($random_products)/\n    wishes:wishitem/Details&quot;&gt;Asin.&lt;xsl:value-of select=&quot;Asin&quot; /&gt;=1\n    &amp;amp;&lt;/xsl:for-each&gt;&lt;/xsl:variable&gt;</code></pre>\n<p>This removes the clutter of all the <code>xsl:text</code> elements, but it would need to be piled all on one line in order to keep undesired whitespace from getting into the URL.  I made a small attempt at wrapping this line here, but line breaks and spaces would leave us with a non-functioning shopping cart URL.  It&apos;s up to you to decide which to use--personally, I prefer the <code>xsl:text</code> clutter for the ability to add in comments and clarify things a bit.</p>\n<p>Finally, having built the shopping cart URL, let&apos;s use it to get a shopping cart and wrap things up:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart&quot;\n                  select=&quot;document($shopping_cart_create_url)&quot; /&gt;\n\n    &lt;xsl:copy-of select=&quot;$shopping_cart&quot; /&gt;\n\n&lt;/xsl:template&gt;  </code></pre>\n<p>As an aside, this part is pushing the concept of a REST web service a bit: In the REST philosophy, requests using the GET method (which is what <code>document()</code> uses) should only return existing resources and not create new resources or cause modifications to happen.  Instead, these sorts of actions should use a POST request.  But, since we&apos;ve already accepted a few rough edges and workarounds in this project so far, we won&apos;t let a point of esoterica like that stop us.  (That and, well, this is the way Amazon designed their web service, so we&apos;ll take what we can get.)</p>\n<p>Once you run this iteration of the stylesheet ([wishes-ex4.xsl][wishes_ex4]), you should get something like this XML as output:</p>\n<pre><code>&lt;ShoppingCartResponse ...&gt;\n  ...\n  &lt;ShoppingCart&gt;\n   &lt;CartId&gt;...&lt;/CartId&gt;\n   &lt;HMAC&gt;...&lt;/HMAC&gt;\n   &lt;PurchaseUrl&gt;...&lt;/PurchaseUrl&gt;\n   &lt;Items&gt;\n    &lt;Item&gt;...&lt;/item&gt;\n    &lt;Item&gt;...&lt;/item&gt;\n   &lt;/Items&gt;\n  &lt;/ShoppingCart&gt;\n  ...\n&lt;/ShoppingCartResponse&gt;</code></pre>\n<p>The AWS documentation describes the vital elements here like so:</p>\n<ul>\n<li><code>CartId</code> - The Cart ID is the unique identifier for a given shopping cart.</li>\n<li><code>HMAC</code> - The HMAC is a security token that must be passed back to Amazon Web Services for using an existing cart.</li>\n<li><code>PurchaseUrl</code> - Use the purchase URL to transfer the remote shopping cart from your application to Amazon so that your application&apos;s users may complete their purchases.&#xA0; The purchase URL merges the remote shopping cart with the Amazon.com shopping cart. </li>\n</ul>\n<p>So, in short, whenever we want to do any sort of manipulation on this Remote Shopping Cart via AWS, we&apos;ll need to remember and later supply both the <code>CartId</code> and <code>HMAC</code> found in the XML returned at its creation.  And, once we&apos;re all ready to check out, the <code>PurchaseUrl</code> points to where we&apos;ll need to browse in person.</p>\n<h3 id=\"stay-tuned\">Stay Tuned!</h3>\n<p>This concludes Part 2 of the Wish-of-the-Month Club.  Following this will be the final part, where we tie everything together and start firing off monthly emails!</p>\n<!-- links -->\n\n"
  },
  {
    "comments_archived": true,
    "date": "2004-06-16T11:42:48.000Z",
    "excerpt": "For some time now, my girlfriend and I have been accumulating things we want in wishlists on Amazon.com.  Though they have come in handy with relatives at Christmas and on birthdays, neither of us really expects to see a regular flow of gifts from them.  For the most part, they've just become holding tanks for things we intend to buy for each other or ourselves.  On one particular visit, though, the notion of a Wish-of-the-Month club popped into my head.",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "Wish-of-the-Month Club, Part 1 of 3",
    "wordpress_id": 529,
    "wordpress_slug": "wishofthemonthclub1",
    "wordpress_url": "http://www.decafbad.com/blog/?p=529",
    "year": "2004",
    "month": "06",
    "day": "16",
    "isDir": false,
    "slug": "wishofthemonthclub1",
    "postName": "2004-06-16-wishofthemonthclub1",
    "html": "<p><i>Remember that <a href=\"http://www.decafbad.com/blog/2004/05/25/i_was_a_preteen_transactor_author_wannabe_and_still_am\">I wrote a little while ago</a> about wanting to publish some articles here that I&#39;d want to read?  Well, I&#39;ve been hard at work since then to turn out the first set and I think I&#39;ve finally got something for you.  I <a href=\"http://www.decafbad.com/blog/2004/06/13/i_will_do_the_fandango\">mentioned</a> earlier this week that I was taking this seriously, so I hope it shows.  So, with many thanks to <a href=\"http://missadroit.livejournal.com\" title=\"Miss Adroit, my favorite girl in the world\">my girlfriend&#39;s</a> kind editorial help, and with some measure of anxiety, here goes...</i></p>\n<h3 id=\"introduction\">Introduction</h3>\n<p>For some time now, my girlfriend and I have been accumulating things we want in wishlists on Amazon.com.  <a href=\"http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5\">Here&#39;s mine</a> and <a href=\"http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE\">here&#39;s hers</a> - if you visit them, you can see we&#39;ve both got quite a few things listed.  Though they have come in handy with relatives at Christmas and on birthdays, neither of us really expects to see a regular flow of gifts from them.  For the most part, they&#39;ve just become holding tanks for things we intend to buy for each other or ourselves.  </p>\n<p>However, I tend to forget we have these lists except for occasional visit to Amazon when I think, &quot;Oh yeah, wishlists.  I should pick up a thing or two, there&#39;s some good stuff piled up in them.&quot;  On one particular visit, though, the notion of a Wish-of-the-Month club popped into my head: We could afford to grab at least one item for each of us from our wishlists on a monthly basis, provided that we remembered to place an order.  It&#39;d be better than signing up for a book or music club, driven by someone else&#39;s idea of what we wanted.  Unfortunately, there&#39;s that problem for busy, absentminded, and people like us: remembering to place an order.</p>\n<p>But wait, isn&#39;t this the sort of thing computers are for?  I should be able to cobble something together that would peruse our wishlists and--given some criteria like a price maximum--select an item at random for each of us and send them on their way.  With this, I could schedule a monthly run and start whittling down those lists.</p>\n<h3 id=\"gathering-tools\">Gathering Tools</h3>\n<p>Before I start working through the project itself, let&#39;s establish some assumptions and then gather some tools and materials:</p>\n<p>I&#39;m going to assume that you&#39;re using a UN*X operating system (ie. Linux, Mac OS X, etc.) and that you&#39;re reasonably familiar with getting around in a shell and editing files.  Things presented here could be adapted for Windows fairly easily, but I&#39;ll leave that as an exercise to the reader.  Also, you may need to build and install a package or two, so know-how in that regard will serve as well.  And finally: some familiarity with XML and XSLT would be useful, but you won&#39;t need to be a guru with either.</p>\n<p>Oh, and all the files I&#39;ll be introducing in this project can be downloaded from my website as a tarball:  <a href=\"http://www.decafbad.com/cvs/hacks/wishes/wishes.tar.gz?tarball=1\" title=\"All Wish-of-the-Month Club files wrapped up in a tarball\"><code>wishes.tar.gz</code></a>.  If you feel like browsing, you can see these files in my <a href=\"http://www.decafbad.com/cvs/hacks/wishes/\">CVS repository</a>.  And if you feel like checking out a copy via anonymous CVS, the username is <code>anoncvs</code> and the password is blank--email me for help, if you need it.</p>\n<p>So, how do we get a look at these wishlists?  Lately, I&#39;ve been tinkering a bit with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/XslScraper\" title=\"Scrape RSS and Atom from HTML using Tidy and XSLT\">scraping information from</a> and <a href=\"http://www.amazon.com/exec/obidos/ASIN/0596005776/0xdecafbad-20\" title=\"O&#39;Reilly&#39;s Spidering Hacks\">automating access to</a> websites.  It&#39;s a bit like a puzzle game, with all the accompanying frustrations and happy breakthroughs.  However, where most puzzle games are designed with a solution in mind, this game isn&#39;t even necessarily meant to be played depending on the intentions of website owners.</p>\n<p>Fortunately, the folks at Amazon.com have made things very friendly to tinkerers by providing an API, called <a href=\"http://www.amazon.com/gp/aws/landing.html\" title=\"Amazon Web Services\">Amazon Web Services</a> (or AWS).  You&#39;ll want to <a href=\"http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&#38;node=3434641&#38;no=3435361&#38;me=A36L942TSJ2AJA\">download</a> the AWS developer&#39;s kit, which contains a wealth of documentation and examples.  After downloading these materials, you should <a href=\"https://associates.amazon.com/exec/panama/associates/join/developer/application.html\">apply for a developer&#39;s token</a> for use with the service.  AWS provides both SOAP and REST interfaces to functionality and data at their site; personally, I prefer the HTTP-and-XML approach taken by the REST interface, so that&#39;s what we&#39;ll be using here. </p>\n<p>To handle the XML produced by AWS, we&#39;ll be using the <code>xsltproc</code> command from <a href=\"http://www.xmlsoft.org/XSLT.html\">the XML C parser and toolkit of Gnome</a>.  There are other XSLT processors--such as <a href=\"http://xml.apache.org/xalan-j/\">Xalan</a>, <a href=\"http://www.gingerall.com/charlie/ga/xml/p_sab.xml\">Sablotron</a>, and <a href=\"http://saxon.sourceforge.net/\">Saxon</a>--but I&#39;ve found <a href=\"http://www.xmlsoft.org/XSLT.html\">libxslt</a> easiest to feed and care for on the various platforms with which I tinker.  It also seems to support a very large swath of <a href=\"http://www.exslt.org/\">EXSLT extensions</a>, all of which come in very handy, yet seem to receive uneven support in other XSLT processors.  We&#39;ll be pulling a trick or two out of that bag, so its support is key.</p>\n<p>You may or may not already have <a href=\"http://www.xmlsoft.org/XSLT.html\">libsxlt</a> installed.  Depending on your variant of Linux, it might be as simple as a single package-management command or it might be a bit more complex if you need to compile from source.  For Mac OS X, I recommend using <a href=\"http://fink.sourceforge.net\">Fink</a> for your packaging needs.  Although, <a href=\"http://darwinports.opendarwin.org/\">DarwinPorts</a> is nice as well, if you&#39;re used to The BSD Way.</p>\n<p>A bonus for OS X users: Marc Liyanage has provided a great Open Source tool named <a href=\"http://www.entropy.ch:16080/software/macosx/#testxslt\">TestXSLT</a> that embeds <a href=\"http://www.xmlsoft.org/XSLT.html\">libxslt</a>, among other XSLT processors, in a slick GUI for easier use.  This might come in handy for you as things develop.</p>\n<h3 id=\"wishlists-in-xml\">Wishlists in XML</h3>\n<p>Okay, we&#39;ve got a working environment, a head start on accessing Amazon wishlists as XML, and a way to manipulate that XML using <code>xsltproc</code>.  Let&#39;s start playing.  First things first, we need to gain access to Amazon wishlists in XML form.  Reading through the <a href=\"http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&#38;node=3434641&#38;no=3435361&#38;me=A36L942TSJ2AJA\">AWS documentation</a> reveals that wish list searches are available via a URL constructed like so:</p>\n<pre><code>http://xml.amazon.com/onca/xml3?\nt=[Associates ID goes here]&amp;#38;\ndev-t=[Developer Token goes here]&amp;#38;\nWishlistSearch=[wishlist ID goes here]&amp;#38;\ntype=[lite or heavy]&amp;#38;\nf=xml</code></pre>\n<p>I received an ID of <code>0xdecafbad-20</code> when I <a href=\"http://associates.amazon.com\">signed up to be an associate</a> a few years ago.  This will ensure that I get credited for sales made via the API--which isn&#39;t as important for the present project, since I&#39;ll be buying items myself, but it&#39;ll come in handy in later projects.  Also, when I <a href=\"https://associates.amazon.com/exec/panama/associates/join/developer/application.html\">signed up for a developer&#39;s token</a>, this is what I was given: <code>D8HVH869XA0NP</code>  I&#39;m disclosing my own here for the sake of example, but you should <a href=\"https://associates.amazon.com/exec/panama/associates/join/developer/application.html\">sign up</a> and get your own.</p>\n<p>So, that fills in the first two parts of the URL.  For the purposes of this project, let&#39;s just go with the <code>lite</code> option for type.  As for the wishlist ID, let&#39;s take a look the wishlist URLs to which I linked earlier:</p>\n<pre><code>http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE\nhttp://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5</code></pre>\n<p>You can discover these wishlist URLs using <a href=\"http://www.amazon.com/gp/registry/search.html/002-7899886-3676027?%5Fencoding=UTF8&#38;type=wishlist\">Amazon&#39;s Wish List Search</a> feature, in which case a wishlist URL might appear like so:</p>\n<pre><code>http://www.amazon.com/gp/registry/registry.html/\n002-7899886-3676027?%5Fencoding=UTF8&amp;#38;\nid=35OIOYWQ9XQAE</code></pre>\n<p>In either case, there is a 13-character ID in each variety of wish list URL: this string is the wish list ID.  So, the ID for my girlfriend&#39;s wishlist is <code> 35OIOYWQ9XQAE</code> and mine is <code>1QWYI6P2JF3Q5</code>.  Given this piece of the puzzle, we can fill in the blanks to come up with the following URL for my girlfriend&#39;s wish list:</p>\n<pre><code>http://xml.amazon.com/onca/xml3?\nt=0xdecafbad-20&amp;#38;\ndev-t=D8HVH869XA0NP&amp;#38;\ntype=lite&amp;#38;\nWishlistSearch=35OIOYWQ9XQAE&amp;#38;\nf=xml</code></pre>\n<p><a href=\"http://xml.amazon.com/onca/xml3?t=0xdecafbad-20&#38;dev-t=D8HVH869XA0NP&#38;type=lite&#38;WishlistSearch=35OIOYWQ9XQAE&#38;f=xml\">Check out the XML resulting from this URL</a>--you may want to use a tool such as <code>curl</code> or <code>wget</code> instead of viewing this directly in your browser.  You&#39;ll see some XML that looks something like this:</p>\n<pre><code>&lt;ProductInfo&gt;\n...\n&lt;Details url=&quot;(some long URL)&quot;&gt;\n  &lt;Asin&gt;0262133601&lt;/Asin&gt;\n  &lt;ProductName&gt;Foundations of Statistical Natural Language Processing&lt;/ProductName&gt;\n  &lt;Catalog&gt;Book&lt;/Catalog&gt;\n  &lt;Authors&gt;\n     &lt;Author&gt;Christopher D. Manning&lt;/Author&gt;\n     &lt;Author&gt;Hinrich Sch&amp;#252;tze&lt;/Author&gt;\n  &lt;/Authors&gt;\n  &lt;ReleaseDate&gt;18 June, 1999&lt;/ReleaseDate&gt;\n  &lt;Manufacturer&gt;MIT Press&lt;/Manufacturer&gt;\n  &lt;ImageUrlSmall&gt;(another long url)&lt;/ImageUrlSmall&gt;\n  &lt;ImageUrlMedium&gt;(yet another long url)&lt;/ImageUrlMedium&gt;\n  &lt;ImageUrlLarge&gt;(one last long url)&lt;/ImageUrlLarge&gt;\n  &lt;Availability&gt;Usually ships within 24 hours&lt;/Availability&gt;\n  &lt;ListPrice&gt;$75.00&lt;/ListPrice&gt;\n  &lt;OurPrice&gt;$63.75&lt;/OurPrice&gt;\n  &lt;UsedPrice&gt;$49.99&lt;/UsedPrice&gt;\n&lt;/Details&gt;\n...\n&lt;/ProductInfo&gt;</code></pre>\n<p>Note that the <a href=\"http://www.amazon.com/exec/obidos/ASIN/0262133601/0xdecafbad-20?dev-t=D8HVH869XA0NP%26camp=2025%26link_code=xm2\">long URL</a> in the <code>Detail</code> element&#39;s <code>url</code> attribute links to the human-viewable product detail page at Amazon.  I&#39;ve also left a few other things out, such as the URLs to product images; I just thought I&#39;d edit it a bit to be friendlier to your browser at home.  There&#39;s a <a href=\"http://xml.amazon.com/schemas3/dev-lite.xsd\">schema</a> for this XML data, and the ins-and-outs are explained in the AWS documentation under &quot;Amazon Web Services Data Model&quot;.</p>\n<h3 id=\"querying-the-wishes\">Querying The Wishes</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\"><code>wishes-ex1.xsl</code></a>: The first iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\"><code>wishes.xml</code></a>: An XML document used as input with the stylesheet.</li>\n</ul>\n<p>Now that we&#39;ve got some XML from Amazon to play with, let&#39;s start tinkering with an XSLT stylesheet to process it.  In the interests of flexibility and reusability, we can parameterize a few things in XML before starting in on the stylesheet:</p>\n<pre><code>&lt;wishes xmlns=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n  &lt;maxprice&gt;15.00&lt;/maxprice&gt;\n  &lt;associate&gt;0xdecafbad-20&lt;/associate&gt;\n  &lt;devtoken&gt;D8HVH869XA0NP&lt;/devtoken&gt;\n  &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n  &lt;wishlists&gt;\n    &lt;wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishlist&gt;\n    &lt;wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishlist&gt;\n  &lt;/wishlists&gt;\n&lt;/wishes&gt;</code></pre>\n<p>Hopefully, the data here is fairly self-explanatory:  I&#39;ve established a maximum price for item selection; provided my associate ID and developer token; there&#39;s an email address to which I eventually want to send the results of all this work; and I&#39;ve made a list of wishlist IDs, each with a readable label. Given this, let&#39;s start out simple and  use this to get some data from Amazon:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xsl:stylesheet version=&quot;1.0&quot;\n            xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;\n            xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\n  &lt;xsl:output indent=&quot;yes&quot; /&gt;\n\n  &lt;!-- Grab our global settings --&gt;\n  &lt;xsl:variable name=&quot;maxprice&quot;  select=&quot;/wishes:wishes/wishes:maxprice&quot; /&gt;  \n  &lt;xsl:variable name=&quot;associate&quot; select=&quot;/wishes:wishes/wishes:associate&quot; /&gt;\n  &lt;xsl:variable name=&quot;devtoken&quot;  select=&quot;/wishes:wishes/wishes:devtoken&quot; /&gt;</code></pre>\n<p>So far so good--things start off by pulling in some of the parameters into variables.  Next, let&#39;s dig into actually querying wishlist data with a reusable template:</p>\n<pre><code>  &lt;xsl:template name=&quot;processWishlist&quot;&gt;\n    &lt;xsl:param name=&quot;wishlist&quot; /&gt;\n\n    &lt;xsl:variable name=&quot;details&quot; select=&quot;document(concat(\n        &#39;http://xml.amazon.com/onca/xml3?&#39;,\n        &#39;t=&#39;,$associate,&#39;&amp;amp;&#39;,\n        &#39;dev-t=&#39;,$devtoken,&#39;&amp;amp;&#39;,\n        &#39;WishlistSearch=&#39;,$wishlist,&#39;&amp;amp;&#39;,\n        &#39;type=lite&amp;amp;f=xml&#39;))//Details&quot; /&gt;</code></pre>\n<p>First thing into this template, we accept a parameter named <code>wishlist</code> which is expected to contain a wishlist ID string.  Next, we build an AWS URL by concatenating together the pieces we have in variables (associate ID, developer&#39;s token, and wishlist ID) using the XPath function <a href=\"http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-concat\"><code>concat()</code></a>.  Once we have this URL, we use the function <a href=\"http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-document\"><code>document()</code></a> to make a request and fetch the XML data for that URL.  From this, we select all the <code>Details</code> elements.  </p>\n<p>Then with that data, we can do some filtering on the price and availability.  We want to make sure that not only will we select items that are within our budget, but that they are available to buy in the first place:</p>\n<pre><code>    &lt;xsl:copy-of select=&quot;$details[\n      number(substring(OurPrice/text(),2)) &amp;lt; $maxprice\n      and\n      contains(Availability, &#39;Usually ships within&#39;)\n      ]&quot; /&gt;\n\n  &lt;/xsl:template&gt;</code></pre>\n<p>This code is just a little bit funky, since the price data given by Amazon contains a dollar sign, and we want to make a numerical comparison.  So, we chop the dollar sign off and convert to a number before making the comparison.  Also, there&#39;s an assumption here about what will show up in the <code>Availability</code> element: &quot;Usually ships within&quot;  Other things that might show up will declare that the item is out of stock, discontinued, or otherwise not shipping.  This might need some tweaking someday, but it seems to work for now.</p>\n<p>Taken all together, this template has the effect of a SQL SELECT statement somewhat like this:</p>\n<pre><code>SELECT * \nFROM Amazon.WishlistItems \nWHERE WishlistID = $wishlist AND \n      OurPrice &lt; $maxprice AND\n      Availability like &#39;%Usually ships within%&#39;;</code></pre>\n<p><code>document()</code> is a very useful XPath function.  It allows us to pull in XML from external files and, in our case, from external URLs via HTTP requests.  This gives us the ability to make queries against REST web services like AWS--which, among many other reasons, is why I prefer REST web services over SOAP.  (I don&#39;t even want to think about trying to access a SOAP service from XSLT.)</p>\n<p>Now, let&#39;s wrap up this first iteration of the stylesheet by trying out the query template on each of the wishlist IDs:</p>\n<pre><code>  &lt;xsl:template match=&quot;/wishes:wishes&quot;&gt;\n    &lt;xsl:for-each select=&quot;//wishes:wishlist&quot;&gt;\n      &lt;wishes:wishitem&gt;\n        &lt;xsl:copy-of select=&quot;.&quot; /&gt;\n        &lt;xsl:call-template name=&quot;processWishlist&quot;&gt;\n              &lt;xsl:with-param name=&quot;wishlist&quot; \n                              select=&quot;.&quot; /&gt;\n        &lt;/xsl:call-template&gt;\n      &lt;/wishes:wishitem&gt;\n    &lt;/xsl:for-each&gt;\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;</code></pre>\n<p>You can get a <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\">completed version of this stylesheet</a>, along with <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\">the input XML</a>, in case you haven&#39;t been cutting and pasting together a copy of your own along the way.  Try it out in a shell with:</p>\n<pre><code>$ xsltproc wishes_ex1.xsl wishes.xml</code></pre>\n<p>Alternately, you could check it out using <a href=\"http://www.entropy.ch:16080/software/macosx/#testxslt\">TestXSLT</a> under OS X.  You should get something like the following:</p>\n<pre><code>&lt;wishes:wishitem xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n    &lt;wishes:wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    ...\n&lt;/wishes:wishitem&gt;\n&lt;wishes:wishitem xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n    &lt;wishes:wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    ...\n&lt;/wishes:wishitem&gt;</code></pre>\n<p>Obviously, this example XML is much abridged, but hopefully you can get the gist:  For each wishlist ID, there is a containing <code>wishitem</code> element.  It contains a copy of the <code>wishlist</code> element from the input XML, followed by all the <code>Details</code> elements filtered and copied from the Amazon XML with the help of the <code>processWishlist</code> template.</p>\n<h3 id=\"thats-all-for-now\">That&#39;s All for Now!</h3>\n<p>And that&#39;s the end of Part 1.  Next up, we&#39;ll be delving into a few more wrinkles in the wishlist querying process, selecting random items in XSLT, and the Remote Shopping Cart interface in Amazon Web Services.  Stay tuned!</p>\n<!-- links -->\n\n<!--more-->\n<p>shortname=wishofthemonthclub1</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221082740\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://inflatus.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2c0ee9a9038c85c0510a7a5fd3f030ab&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://inflatus.net\">poepping</a>\n</div>\n<a href=\"#comment-221082740\" class=\"permalink\"><time datetime=\"2004-06-16T17:24:01\">2004-06-16T17:24:01</time></a>\n</div>\n<div class=\"content\">I was using the amazon wish list api a few months ago, and back then the wish list was out of date, and was missing the newest week or two of stuff.  You might want to check this if this is important to you.\nIn the future, you could add the feature of ordering the stuff that has a higher priority on it. :)\nCool project though. I think i'm going to go back through my old code and try it again to see if they fixed the delay.\nbtw, I miss your links of the day.</div>\n</li>\n<li class=\"comment\" id=\"comment-221082741\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.mpwilson.com/uccu/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=99b77c34a0e26fd04a058f8c2dbab290&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.mpwilson.com/uccu/\">Mad William Flint</a>\n</div>\n<a href=\"#comment-221082741\" class=\"permalink\"><time datetime=\"2004-06-16T19:40:55\">2004-06-16T19:40:55</time></a>\n</div>\n<div class=\"content\">very nice.  whipping out my emacs now...</div>\n</li>\n</ul>\n</div>\n",
    "body": "<i>Remember that [I wrote a little while ago][lasttime] about wanting to publish some articles here that I'd want to read?  Well, I've been hard at work since then to turn out the first set and I think I've finally got something for you.  I [mentioned][lasttime2] earlier this week that I was taking this seriously, so I hope it shows.  So, with many thanks to [my girlfriend's][missadroit] kind editorial help, and with some measure of anxiety, here goes...</i>\r\n\r\n### Introduction\r\n\r\nFor some time now, my girlfriend and I have been accumulating things we want in wishlists on Amazon.com.  [Here's mine][mywishlist] and [here's hers][herwishlist] - if you visit them, you can see we've both got quite a few things listed.  Though they have come in handy with relatives at Christmas and on birthdays, neither of us really expects to see a regular flow of gifts from them.  For the most part, they've just become holding tanks for things we intend to buy for each other or ourselves.  \r\n\r\nHowever, I tend to forget we have these lists except for occasional visit to Amazon when I think, \"Oh yeah, wishlists.  I should pick up a thing or two, there's some good stuff piled up in them.\"  On one particular visit, though, the notion of a Wish-of-the-Month club popped into my head: We could afford to grab at least one item for each of us from our wishlists on a monthly basis, provided that we remembered to place an order.  It'd be better than signing up for a book or music club, driven by someone else's idea of what we wanted.  Unfortunately, there's that problem for busy, absentminded, and people like us: remembering to place an order.\r\n\r\nBut wait, isn't this the sort of thing computers are for?  I should be able to cobble something together that would peruse our wishlists and--given some criteria like a price maximum--select an item at random for each of us and send them on their way.  With this, I could schedule a monthly run and start whittling down those lists.\r\n\r\n### Gathering Tools\r\n\r\nBefore I start working through the project itself, let's establish some assumptions and then gather some tools and materials:\r\n\r\nI'm going to assume that you're using a UN*X operating system (ie. Linux, Mac OS X, etc.) and that you're reasonably familiar with getting around in a shell and editing files.  Things presented here could be adapted for Windows fairly easily, but I'll leave that as an exercise to the reader.  Also, you may need to build and install a package or two, so know-how in that regard will serve as well.  And finally: some familiarity with XML and XSLT would be useful, but you won't need to be a guru with either.\r\n\r\nOh, and all the files I'll be introducing in this project can be downloaded from my website as a tarball:  [`wishes.tar.gz`][wishes.tar.gz].  If you feel like browsing, you can see these files in my [CVS repository][wishescvs].  And if you feel like checking out a copy via anonymous CVS, the username is `anoncvs` and the password is blank--email me for help, if you need it.\r\n\r\nSo, how do we get a look at these wishlists?  Lately, I've been tinkering a bit with [scraping information from][xslscraper] and [automating access to][spideringhacks] websites.  It's a bit like a puzzle game, with all the accompanying frustrations and happy breakthroughs.  However, where most puzzle games are designed with a solution in mind, this game isn't even necessarily meant to be played depending on the intentions of website owners.\r\n\r\nFortunately, the folks at Amazon.com have made things very friendly to tinkerers by providing an API, called [Amazon Web Services][amazonapi] (or AWS).  You'll want to [download][awsdownload] the AWS developer's kit, which contains a wealth of documentation and examples.  After downloading these materials, you should [apply for a developer's token][awstoken] for use with the service.  AWS provides both SOAP and REST interfaces to functionality and data at their site; personally, I prefer the HTTP-and-XML approach taken by the REST interface, so that's what we'll be using here. \r\n\r\nTo handle the XML produced by AWS, we'll be using the `xsltproc` command from [the XML C parser and toolkit of Gnome][libxslt].  There are other XSLT processors--such as [Xalan][xalan], [Sablotron][sablotron], and [Saxon][saxon]--but I've found [libxslt][libxslt] easiest to feed and care for on the various platforms with which I tinker.  It also seems to support a very large swath of [EXSLT extensions][exslt], all of which come in very handy, yet seem to receive uneven support in other XSLT processors.  We'll be pulling a trick or two out of that bag, so its support is key.\r\n\r\nYou may or may not already have [libsxlt][libxslt] installed.  Depending on your variant of Linux, it might be as simple as a single package-management command or it might be a bit more complex if you need to compile from source.  For Mac OS X, I recommend using [Fink][fink] for your packaging needs.  Although, [DarwinPorts][darwinports] is nice as well, if you're used to The BSD Way.\r\n\r\nA bonus for OS X users: Marc Liyanage has provided a great Open Source tool named [TestXSLT][testxslt] that embeds [libxslt][libxslt], among other XSLT processors, in a slick GUI for easier use.  This might come in handy for you as things develop.\r\n\r\n### Wishlists in XML\r\n\r\nOkay, we've got a working environment, a head start on accessing Amazon wishlists as XML, and a way to manipulate that XML using `xsltproc`.  Let's start playing.  First things first, we need to gain access to Amazon wishlists in XML form.  Reading through the [AWS documentation][awsdownload] reveals that wish list searches are available via a URL constructed like so:\r\n\r\n    http://xml.amazon.com/onca/xml3?\r\n    t=[Associates ID goes here]&#38;\r\n    dev-t=[Developer Token goes here]&#38;\r\n    WishlistSearch=[wishlist ID goes here]&#38;\r\n    type=[lite or heavy]&#38;\r\n    f=xml\r\n\r\nI received an ID of `0xdecafbad-20` when I [signed up to be an associate][amazonassociate] a few years ago.  This will ensure that I get credited for sales made via the API--which isn't as important for the present project, since I'll be buying items myself, but it'll come in handy in later projects.  Also, when I [signed up for a developer's token][awstoken], this is what I was given: `D8HVH869XA0NP`  I'm disclosing my own here for the sake of example, but you should [sign up][awstoken] and get your own.\r\n\r\nSo, that fills in the first two parts of the URL.  For the purposes of this project, let's just go with the `lite` option for type.  As for the wishlist ID, let's take a look the wishlist URLs to which I linked earlier:\r\n\r\n    http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE\r\n    http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5\r\n\r\nYou can discover these wishlist URLs using [Amazon's Wish List Search][wlsearch] feature, in which case a wishlist URL might appear like so:\r\n\r\n    http://www.amazon.com/gp/registry/registry.html/\r\n    002-7899886-3676027?%5Fencoding=UTF8&#38;\r\n    id=35OIOYWQ9XQAE\r\n\r\nIn either case, there is a 13-character ID in each variety of wish list URL: this string is the wish list ID.  So, the ID for my girlfriend's wishlist is ` 35OIOYWQ9XQAE` and mine is `1QWYI6P2JF3Q5`.  Given this piece of the puzzle, we can fill in the blanks to come up with the following URL for my girlfriend's wish list:\r\n\r\n    http://xml.amazon.com/onca/xml3?\r\n    t=0xdecafbad-20&#38;\r\n    dev-t=D8HVH869XA0NP&#38;\r\n    type=lite&#38;\r\n    WishlistSearch=35OIOYWQ9XQAE&#38;\r\n    f=xml\r\n\r\n[Check out the XML resulting from this URL][wlurl]--you may want to use a tool such as `curl` or `wget` instead of viewing this directly in your browser.  You'll see some XML that looks something like this:\r\n\r\n    <ProductInfo>\r\n    ...\r\n    <Details url=\"(some long URL)\">\r\n      <Asin>0262133601</Asin>\r\n      <ProductName>Foundations of Statistical Natural Language Processing</ProductName>\r\n      <Catalog>Book</Catalog>\r\n      <Authors>\r\n         <Author>Christopher D. Manning</Author>\r\n         <Author>Hinrich Sch&#252;tze</Author>\r\n      </Authors>\r\n      <ReleaseDate>18 June, 1999</ReleaseDate>\r\n      <Manufacturer>MIT Press</Manufacturer>\r\n      <ImageUrlSmall>(another long url)</ImageUrlSmall>\r\n      <ImageUrlMedium>(yet another long url)</ImageUrlMedium>\r\n      <ImageUrlLarge>(one last long url)</ImageUrlLarge>\r\n      <Availability>Usually ships within 24 hours</Availability>\r\n      <ListPrice>$75.00</ListPrice>\r\n      <OurPrice>$63.75</OurPrice>\r\n      <UsedPrice>$49.99</UsedPrice>\r\n    </Details>\r\n    ...\r\n    </ProductInfo>\r\n\r\nNote that the [long URL][detailsurl] in the `Detail` element's `url` attribute links to the human-viewable product detail page at Amazon.  I've also left a few other things out, such as the URLs to product images; I just thought I'd edit it a bit to be friendlier to your browser at home.  There's a [schema][awslite] for this XML data, and the ins-and-outs are explained in the AWS documentation under \"Amazon Web Services Data Model\".\r\n\r\n### Querying The Wishes\r\n\r\nSome ready-made files are available for this section:\r\n* [`wishes-ex1.xsl`][wishes-ex1.xsl]: The first iteration of the stylesheet in development.\r\n* [`wishes.xml`][wishes.xml]: An XML document used as input with the stylesheet.\r\n\r\nNow that we've got some XML from Amazon to play with, let's start tinkering with an XSLT stylesheet to process it.  In the interests of flexibility and reusability, we can parameterize a few things in XML before starting in on the stylesheet:\r\n\r\n    <wishes xmlns=\"http://www.decafbad.com/2004/05/wishes\">\r\n      <maxprice>15.00</maxprice>\r\n      <associate>0xdecafbad-20</associate>\r\n      <devtoken>D8HVH869XA0NP</devtoken>\r\n      <email>deus_x@pobox.com</email>\r\n      <wishlists>\r\n        <wishlist label=\"The Girl\">35OIOYWQ9XQAE</wishlist>\r\n        <wishlist label=\"Me\">1QWYI6P2JF3Q5</wishlist>\r\n      </wishlists>\r\n    </wishes>\r\n\r\nHopefully, the data here is fairly self-explanatory:  I've established a maximum price for item selection; provided my associate ID and developer token; there's an email address to which I eventually want to send the results of all this work; and I've made a list of wishlist IDs, each with a readable label. Given this, let's start out simple and  use this to get some data from Amazon:\r\n\r\n    <?xml version=\"1.0\"?>\r\n    <xsl:stylesheet version=\"1.0\"\r\n                xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\"\r\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n      <xsl:output indent=\"yes\" />\r\n\r\n      <!-- Grab our global settings -->\r\n      <xsl:variable name=\"maxprice\"  select=\"/wishes:wishes/wishes:maxprice\" />  \r\n      <xsl:variable name=\"associate\" select=\"/wishes:wishes/wishes:associate\" />\r\n      <xsl:variable name=\"devtoken\"  select=\"/wishes:wishes/wishes:devtoken\" />\r\n\r\nSo far so good--things start off by pulling in some of the parameters into variables.  Next, let's dig into actually querying wishlist data with a reusable template:\r\n\r\n      <xsl:template name=\"processWishlist\">\r\n        <xsl:param name=\"wishlist\" />\r\n\r\n        <xsl:variable name=\"details\" select=\"document(concat(\r\n            'http://xml.amazon.com/onca/xml3?',\r\n            't=',$associate,'&amp;',\r\n            'dev-t=',$devtoken,'&amp;',\r\n            'WishlistSearch=',$wishlist,'&amp;',\r\n            'type=lite&amp;f=xml'))//Details\" />\r\n\r\nFirst thing into this template, we accept a parameter named `wishlist` which is expected to contain a wishlist ID string.  Next, we build an AWS URL by concatenating together the pieces we have in variables (associate ID, developer's token, and wishlist ID) using the XPath function [`concat()`][xpconcat].  Once we have this URL, we use the function [`document()`][xpdocument] to make a request and fetch the XML data for that URL.  From this, we select all the `Details` elements.  \r\n\r\nThen with that data, we can do some filtering on the price and availability.  We want to make sure that not only will we select items that are within our budget, but that they are available to buy in the first place:\r\n\r\n        <xsl:copy-of select=\"$details[\r\n          number(substring(OurPrice/text(),2)) &lt; $maxprice\r\n          and\r\n          contains(Availability, 'Usually ships within')\r\n          ]\" />\r\n\r\n      </xsl:template>\r\n\r\nThis code is just a little bit funky, since the price data given by Amazon contains a dollar sign, and we want to make a numerical comparison.  So, we chop the dollar sign off and convert to a number before making the comparison.  Also, there's an assumption here about what will show up in the `Availability` element: \"Usually ships within\"  Other things that might show up will declare that the item is out of stock, discontinued, or otherwise not shipping.  This might need some tweaking someday, but it seems to work for now.\r\n\r\nTaken all together, this template has the effect of a SQL SELECT statement somewhat like this:\r\n\r\n    SELECT * \r\n    FROM Amazon.WishlistItems \r\n    WHERE WishlistID = $wishlist AND \r\n          OurPrice < $maxprice AND\r\n          Availability like '%Usually ships within%';\r\n\r\n`document()` is a very useful XPath function.  It allows us to pull in XML from external files and, in our case, from external URLs via HTTP requests.  This gives us the ability to make queries against REST web services like AWS--which, among many other reasons, is why I prefer REST web services over SOAP.  (I don't even want to think about trying to access a SOAP service from XSLT.)\r\n\r\nNow, let's wrap up this first iteration of the stylesheet by trying out the query template on each of the wishlist IDs:\r\n\r\n      <xsl:template match=\"/wishes:wishes\">\r\n        <xsl:for-each select=\"//wishes:wishlist\">\r\n          <wishes:wishitem>\r\n            <xsl:copy-of select=\".\" />\r\n            <xsl:call-template name=\"processWishlist\">\r\n                  <xsl:with-param name=\"wishlist\" \r\n                                  select=\".\" />\r\n            </xsl:call-template>\r\n          </wishes:wishitem>\r\n        </xsl:for-each>\r\n      </xsl:template>\r\n  \r\n    </xsl:stylesheet>\r\n\r\nYou can get a [completed version of this stylesheet][wishes-ex1.xsl], along with [the input XML][wishes.xml], in case you haven't been cutting and pasting together a copy of your own along the way.  Try it out in a shell with:\r\n\r\n    $ xsltproc wishes_ex1.xsl wishes.xml\r\n\r\nAlternately, you could check it out using [TestXSLT][testxslt] under OS X.  You should get something like the following:\r\n\r\n    <wishes:wishitem xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\">\r\n        <wishes:wishlist label=\"The Girl\">35OIOYWQ9XQAE</wishes:wishlist>\r\n        <Details ...>...</Details>\r\n        <Details ...>...</Details>\r\n        ...\r\n    </wishes:wishitem>\r\n    <wishes:wishitem xmlns:wishes=\"http://www.decafbad.com/2004/05/wishes\">\r\n        <wishes:wishlist label=\"Me\">1QWYI6P2JF3Q5</wishes:wishlist>\r\n        <Details ...>...</Details>\r\n        <Details ...>...</Details>\r\n        ...\r\n    </wishes:wishitem>\r\n\r\nObviously, this example XML is much abridged, but hopefully you can get the gist:  For each wishlist ID, there is a containing `wishitem` element.  It contains a copy of the `wishlist` element from the input XML, followed by all the `Details` elements filtered and copied from the Amazon XML with the help of the `processWishlist` template.\r\n\r\n### That's All for Now!\r\n\r\nAnd that's the end of Part 1.  Next up, we'll be delving into a few more wrinkles in the wishlist querying process, selecting random items in XSLT, and the Remote Shopping Cart interface in Amazon Web Services.  Stay tuned!\r\n\r\n<!-- links -->\r\n\r\n[missadroit]: http://missadroit.livejournal.com \"Miss Adroit, my favorite girl in the world\"\r\n[mywishlist]: http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5 \r\n[herwishlist]: http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE \r\n[amazonapi]: http://www.amazon.com/gp/aws/landing.html \"Amazon Web Services\"\r\n[libxml]: http://www.xmlsoft.org/\r\n[xalan]: http://xml.apache.org/xalan-j/\r\n[sablotron]: http://www.gingerall.com/charlie/ga/xml/p_sab.xml\r\n[saxon]: http://saxon.sourceforge.net/\r\n[exslt]: http://www.exslt.org/\r\n[libxslt]: http://www.xmlsoft.org/XSLT.html\r\n[spideringhacks]: http://www.amazon.com/exec/obidos/ASIN/0596005776/0xdecafbad-20 \"O'Reilly's Spidering Hacks\"\r\n[xslscraper]: http://www.decafbad.com/twiki/bin/view/Main/XslScraper \"Scrape RSS and Atom from HTML using Tidy and XSLT\"\r\n[awsdownload]: http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&#38;node=3434641&#38;no=3435361&#38;me=A36L942TSJ2AJA\r\n[awstoken]: https://associates.amazon.com/exec/panama/associates/join/developer/application.html\r\n[amazonassociate]: http://associates.amazon.com\r\n[wlsearch]: http://www.amazon.com/gp/registry/search.html/002-7899886-3676027?%5Fencoding=UTF8&#38;type=wishlist\r\n[wlurl]: http://xml.amazon.com/onca/xml3?t=0xdecafbad-20&#38;dev-t=D8HVH869XA0NP&#38;type=lite&#38;WishlistSearch=35OIOYWQ9XQAE&#38;f=xml\r\n[detailsurl]: http://www.amazon.com/exec/obidos/ASIN/0262133601/0xdecafbad-20?dev-t=D8HVH869XA0NP%26camp=2025%26link_code=xm2\r\n[awslite]: http://xml.amazon.com/schemas3/dev-lite.xsd\r\n[fink]: http://fink.sourceforge.net\r\n[testxslt]: http://www.entropy.ch:16080/software/macosx/#testxslt\r\n[darwinports]: http://darwinports.opendarwin.org/\r\n[curl]: http://www.decafbad.com/#TODO\r\n[wget]: http://www.decafbad.com/#TODO\r\n[xpconcat]: http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-concat\r\n[xpdocument]: http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-document\r\n[wishescvs]: http://www.decafbad.com/cvs/hacks/wishes/\r\n[wishes.tar.gz]: http://www.decafbad.com/cvs/hacks/wishes/wishes.tar.gz?tarball=1 \"All Wish-of-the-Month Club files wrapped up in a tarball\"\r\n[wishes.xml]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\r\n[wishes-ex1.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\r\n[wishes-ex2.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex2.xsl\r\n[wishes-ex3.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex3.xsl\r\n[wishes-ex4.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex4.xsl\r\n[wishes-ex5.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\r\n[wishes-ex6.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex6.xsl\r\n[random-xml]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/random-xml\r\n[wishes_html_screenshot]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg\r\n[xslt_iteration]: http://www.dpawson.co.uk/xsl/sect2/N4806.html \"Iteration in XSLT\"\r\n[xslt_recursion]: http://www-106.ibm.com/developerworks/xml/library/x-xslrecur/ \"Use recursion effectively in XSL\"\r\n[exsl_random]: http://www.exslt.org/math/functions/random/index.html\r\n[exsl_node_set]: http://www.exslt.org/exsl/functions/node-set/index.html\r\n[rand_url]: http://www.decafbad.com/2004/05/random-xml?int=1&#38;min=10&#38;max=20 \"A random integer between 10 and 20, in XML\"\r\n[xslt_result_tree_fragment]: http://www.w3.org/TR/xslt#section-Result-Tree-Fragments\r\n\r\n[email_attach_anatomy]: http://www.dpo.uab.edu/Email/attach.html \"Anatomy of an Email Attachment\"\r\n[email_mime_and_html]: http://www.abiglime.com/webmaster/articles/cgi/010698.htm \"How to encapsulate HTML in an email message\"\r\n\r\n[email_html_and_text]: http://www.wilsonweb.com/wmt5/html-email-multi.htm \"Sending HTML and Plain Text E-Mail Simultaneously\"\r\n[man_sendmail]: http://www.hmug.org/man/8/sendmail.html \"man: sendmail\"\r\n[rfc1521]: http://www.faqs.org/rfcs/rfc1521.html \"RFC 1521\"\r\n[cron1]: http://www.lysator.liu.se/~forsberg/linux/cron.html \"Doing things periodically - Using CRON\"\r\n[cron2]: http://www.itworld.com/Comp/2378/swol-0825-unix101/ \"Using cron basics\"\r\n[python_libxml]: http://xmlsoft.org/python.html \r\n[lasttime]: http://www.decafbad.com/blog/2004/05/25/i_was_a_preteen_transactor_author_wannabe_and_still_am\r\n[lasttime2]: http://www.decafbad.com/blog/2004/06/13/i_will_do_the_fandango\r\n<!--more-->\r\nshortname=wishofthemonthclub1\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221082740\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://inflatus.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2c0ee9a9038c85c0510a7a5fd3f030ab&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://inflatus.net\">poepping</a>\r\n                </div>\r\n                <a href=\"#comment-221082740\" class=\"permalink\"><time datetime=\"2004-06-16T17:24:01\">2004-06-16T17:24:01</time></a>\r\n            </div>\r\n            <div class=\"content\">I was using the amazon wish list api a few months ago, and back then the wish list was out of date, and was missing the newest week or two of stuff.  You might want to check this if this is important to you.\r\n\r\nIn the future, you could add the feature of ordering the stuff that has a higher priority on it. :)\r\n\r\nCool project though. I think i'm going to go back through my old code and try it again to see if they fixed the delay.\r\n\r\nbtw, I miss your links of the day.</div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221082741\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://www.mpwilson.com/uccu/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=99b77c34a0e26fd04a058f8c2dbab290&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://www.mpwilson.com/uccu/\">Mad William Flint</a>\r\n                </div>\r\n                <a href=\"#comment-221082741\" class=\"permalink\"><time datetime=\"2004-06-16T19:40:55\">2004-06-16T19:40:55</time></a>\r\n            </div>\r\n            <div class=\"content\">very nice.  whipping out my emacs now...</div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/06/16/wishofthemonthclub1",
    "summary": "<p><i>Remember that <a href=\"http://www.decafbad.com/blog/2004/05/25/i_was_a_preteen_transactor_author_wannabe_and_still_am\">I wrote a little while ago</a> about wanting to publish some articles here that I&apos;d want to read?  Well, I&apos;ve been hard at work since then to turn out the first set and I think I&apos;ve finally got something for you.  I <a href=\"http://www.decafbad.com/blog/2004/06/13/i_will_do_the_fandango\">mentioned</a> earlier this week that I was taking this seriously, so I hope it shows.  So, with many thanks to <a href=\"http://missadroit.livejournal.com\" title=\"Miss Adroit, my favorite girl in the world\">my girlfriend&apos;s</a> kind editorial help, and with some measure of anxiety, here goes...</i></p>\n<h3 id=\"introduction\">Introduction</h3>\n<p>For some time now, my girlfriend and I have been accumulating things we want in wishlists on Amazon.com.  <a href=\"http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5\">Here&apos;s mine</a> and <a href=\"http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE\">here&apos;s hers</a> - if you visit them, you can see we&apos;ve both got quite a few things listed.  Though they have come in handy with relatives at Christmas and on birthdays, neither of us really expects to see a regular flow of gifts from them.  For the most part, they&apos;ve just become holding tanks for things we intend to buy for each other or ourselves.  </p>\n<p>However, I tend to forget we have these lists except for occasional visit to Amazon when I think, &quot;Oh yeah, wishlists.  I should pick up a thing or two, there&apos;s some good stuff piled up in them.&quot;  On one particular visit, though, the notion of a Wish-of-the-Month club popped into my head: We could afford to grab at least one item for each of us from our wishlists on a monthly basis, provided that we remembered to place an order.  It&apos;d be better than signing up for a book or music club, driven by someone else&apos;s idea of what we wanted.  Unfortunately, there&apos;s that problem for busy, absentminded, and people like us: remembering to place an order.</p>\n<p>But wait, isn&apos;t this the sort of thing computers are for?  I should be able to cobble something together that would peruse our wishlists and--given some criteria like a price maximum--select an item at random for each of us and send them on their way.  With this, I could schedule a monthly run and start whittling down those lists.</p>\n<h3 id=\"gathering-tools\">Gathering Tools</h3>\n<p>Before I start working through the project itself, let&apos;s establish some assumptions and then gather some tools and materials:</p>\n<p>I&apos;m going to assume that you&apos;re using a UN*X operating system (ie. Linux, Mac OS X, etc.) and that you&apos;re reasonably familiar with getting around in a shell and editing files.  Things presented here could be adapted for Windows fairly easily, but I&apos;ll leave that as an exercise to the reader.  Also, you may need to build and install a package or two, so know-how in that regard will serve as well.  And finally: some familiarity with XML and XSLT would be useful, but you won&apos;t need to be a guru with either.</p>\n<p>Oh, and all the files I&apos;ll be introducing in this project can be downloaded from my website as a tarball:  <a href=\"http://www.decafbad.com/cvs/hacks/wishes/wishes.tar.gz?tarball=1\" title=\"All Wish-of-the-Month Club files wrapped up in a tarball\"><code>wishes.tar.gz</code></a>.  If you feel like browsing, you can see these files in my <a href=\"http://www.decafbad.com/cvs/hacks/wishes/\">CVS repository</a>.  And if you feel like checking out a copy via anonymous CVS, the username is <code>anoncvs</code> and the password is blank--email me for help, if you need it.</p>\n<p>So, how do we get a look at these wishlists?  Lately, I&apos;ve been tinkering a bit with <a href=\"http://www.decafbad.com/twiki/bin/view/Main/XslScraper\" title=\"Scrape RSS and Atom from HTML using Tidy and XSLT\">scraping information from</a> and <a href=\"http://www.amazon.com/exec/obidos/ASIN/0596005776/0xdecafbad-20\" title=\"O&apos;Reilly&apos;s Spidering Hacks\">automating access to</a> websites.  It&apos;s a bit like a puzzle game, with all the accompanying frustrations and happy breakthroughs.  However, where most puzzle games are designed with a solution in mind, this game isn&apos;t even necessarily meant to be played depending on the intentions of website owners.</p>\n<p>Fortunately, the folks at Amazon.com have made things very friendly to tinkerers by providing an API, called <a href=\"http://www.amazon.com/gp/aws/landing.html\" title=\"Amazon Web Services\">Amazon Web Services</a> (or AWS).  You&apos;ll want to <a href=\"http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&amp;node=3434641&amp;no=3435361&amp;me=A36L942TSJ2AJA\">download</a> the AWS developer&apos;s kit, which contains a wealth of documentation and examples.  After downloading these materials, you should <a href=\"https://associates.amazon.com/exec/panama/associates/join/developer/application.html\">apply for a developer&apos;s token</a> for use with the service.  AWS provides both SOAP and REST interfaces to functionality and data at their site; personally, I prefer the HTTP-and-XML approach taken by the REST interface, so that&apos;s what we&apos;ll be using here. </p>\n<p>To handle the XML produced by AWS, we&apos;ll be using the <code>xsltproc</code> command from <a href=\"http://www.xmlsoft.org/XSLT.html\">the XML C parser and toolkit of Gnome</a>.  There are other XSLT processors--such as <a href=\"http://xml.apache.org/xalan-j/\">Xalan</a>, <a href=\"http://www.gingerall.com/charlie/ga/xml/p_sab.xml\">Sablotron</a>, and <a href=\"http://saxon.sourceforge.net/\">Saxon</a>--but I&apos;ve found <a href=\"http://www.xmlsoft.org/XSLT.html\">libxslt</a> easiest to feed and care for on the various platforms with which I tinker.  It also seems to support a very large swath of <a href=\"http://www.exslt.org/\">EXSLT extensions</a>, all of which come in very handy, yet seem to receive uneven support in other XSLT processors.  We&apos;ll be pulling a trick or two out of that bag, so its support is key.</p>\n<p>You may or may not already have <a href=\"http://www.xmlsoft.org/XSLT.html\">libsxlt</a> installed.  Depending on your variant of Linux, it might be as simple as a single package-management command or it might be a bit more complex if you need to compile from source.  For Mac OS X, I recommend using <a href=\"http://fink.sourceforge.net\">Fink</a> for your packaging needs.  Although, <a href=\"http://darwinports.opendarwin.org/\">DarwinPorts</a> is nice as well, if you&apos;re used to The BSD Way.</p>\n<p>A bonus for OS X users: Marc Liyanage has provided a great Open Source tool named <a href=\"http://www.entropy.ch:16080/software/macosx/#testxslt\">TestXSLT</a> that embeds <a href=\"http://www.xmlsoft.org/XSLT.html\">libxslt</a>, among other XSLT processors, in a slick GUI for easier use.  This might come in handy for you as things develop.</p>\n<h3 id=\"wishlists-in-xml\">Wishlists in XML</h3>\n<p>Okay, we&apos;ve got a working environment, a head start on accessing Amazon wishlists as XML, and a way to manipulate that XML using <code>xsltproc</code>.  Let&apos;s start playing.  First things first, we need to gain access to Amazon wishlists in XML form.  Reading through the <a href=\"http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&amp;node=3434641&amp;no=3435361&amp;me=A36L942TSJ2AJA\">AWS documentation</a> reveals that wish list searches are available via a URL constructed like so:</p>\n<pre><code>http://xml.amazon.com/onca/xml3?\nt=[Associates ID goes here]&amp;#38;\ndev-t=[Developer Token goes here]&amp;#38;\nWishlistSearch=[wishlist ID goes here]&amp;#38;\ntype=[lite or heavy]&amp;#38;\nf=xml</code></pre>\n<p>I received an ID of <code>0xdecafbad-20</code> when I <a href=\"http://associates.amazon.com\">signed up to be an associate</a> a few years ago.  This will ensure that I get credited for sales made via the API--which isn&apos;t as important for the present project, since I&apos;ll be buying items myself, but it&apos;ll come in handy in later projects.  Also, when I <a href=\"https://associates.amazon.com/exec/panama/associates/join/developer/application.html\">signed up for a developer&apos;s token</a>, this is what I was given: <code>D8HVH869XA0NP</code>  I&apos;m disclosing my own here for the sake of example, but you should <a href=\"https://associates.amazon.com/exec/panama/associates/join/developer/application.html\">sign up</a> and get your own.</p>\n<p>So, that fills in the first two parts of the URL.  For the purposes of this project, let&apos;s just go with the <code>lite</code> option for type.  As for the wishlist ID, let&apos;s take a look the wishlist URLs to which I linked earlier:</p>\n<pre><code>http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE\nhttp://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5</code></pre>\n<p>You can discover these wishlist URLs using <a href=\"http://www.amazon.com/gp/registry/search.html/002-7899886-3676027?%5Fencoding=UTF8&amp;type=wishlist\">Amazon&apos;s Wish List Search</a> feature, in which case a wishlist URL might appear like so:</p>\n<pre><code>http://www.amazon.com/gp/registry/registry.html/\n002-7899886-3676027?%5Fencoding=UTF8&amp;#38;\nid=35OIOYWQ9XQAE</code></pre>\n<p>In either case, there is a 13-character ID in each variety of wish list URL: this string is the wish list ID.  So, the ID for my girlfriend&apos;s wishlist is <code> 35OIOYWQ9XQAE</code> and mine is <code>1QWYI6P2JF3Q5</code>.  Given this piece of the puzzle, we can fill in the blanks to come up with the following URL for my girlfriend&apos;s wish list:</p>\n<pre><code>http://xml.amazon.com/onca/xml3?\nt=0xdecafbad-20&amp;#38;\ndev-t=D8HVH869XA0NP&amp;#38;\ntype=lite&amp;#38;\nWishlistSearch=35OIOYWQ9XQAE&amp;#38;\nf=xml</code></pre>\n<p><a href=\"http://xml.amazon.com/onca/xml3?t=0xdecafbad-20&amp;dev-t=D8HVH869XA0NP&amp;type=lite&amp;WishlistSearch=35OIOYWQ9XQAE&amp;f=xml\">Check out the XML resulting from this URL</a>--you may want to use a tool such as <code>curl</code> or <code>wget</code> instead of viewing this directly in your browser.  You&apos;ll see some XML that looks something like this:</p>\n<pre><code>&lt;ProductInfo&gt;\n...\n&lt;Details url=&quot;(some long URL)&quot;&gt;\n  &lt;Asin&gt;0262133601&lt;/Asin&gt;\n  &lt;ProductName&gt;Foundations of Statistical Natural Language Processing&lt;/ProductName&gt;\n  &lt;Catalog&gt;Book&lt;/Catalog&gt;\n  &lt;Authors&gt;\n     &lt;Author&gt;Christopher D. Manning&lt;/Author&gt;\n     &lt;Author&gt;Hinrich Sch&amp;#252;tze&lt;/Author&gt;\n  &lt;/Authors&gt;\n  &lt;ReleaseDate&gt;18 June, 1999&lt;/ReleaseDate&gt;\n  &lt;Manufacturer&gt;MIT Press&lt;/Manufacturer&gt;\n  &lt;ImageUrlSmall&gt;(another long url)&lt;/ImageUrlSmall&gt;\n  &lt;ImageUrlMedium&gt;(yet another long url)&lt;/ImageUrlMedium&gt;\n  &lt;ImageUrlLarge&gt;(one last long url)&lt;/ImageUrlLarge&gt;\n  &lt;Availability&gt;Usually ships within 24 hours&lt;/Availability&gt;\n  &lt;ListPrice&gt;$75.00&lt;/ListPrice&gt;\n  &lt;OurPrice&gt;$63.75&lt;/OurPrice&gt;\n  &lt;UsedPrice&gt;$49.99&lt;/UsedPrice&gt;\n&lt;/Details&gt;\n...\n&lt;/ProductInfo&gt;</code></pre>\n<p>Note that the <a href=\"http://www.amazon.com/exec/obidos/ASIN/0262133601/0xdecafbad-20?dev-t=D8HVH869XA0NP%26camp=2025%26link_code=xm2\">long URL</a> in the <code>Detail</code> element&apos;s <code>url</code> attribute links to the human-viewable product detail page at Amazon.  I&apos;ve also left a few other things out, such as the URLs to product images; I just thought I&apos;d edit it a bit to be friendlier to your browser at home.  There&apos;s a <a href=\"http://xml.amazon.com/schemas3/dev-lite.xsd\">schema</a> for this XML data, and the ins-and-outs are explained in the AWS documentation under &quot;Amazon Web Services Data Model&quot;.</p>\n<h3 id=\"querying-the-wishes\">Querying The Wishes</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\"><code>wishes-ex1.xsl</code></a>: The first iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\"><code>wishes.xml</code></a>: An XML document used as input with the stylesheet.</li>\n</ul>\n<p>Now that we&apos;ve got some XML from Amazon to play with, let&apos;s start tinkering with an XSLT stylesheet to process it.  In the interests of flexibility and reusability, we can parameterize a few things in XML before starting in on the stylesheet:</p>\n<pre><code>&lt;wishes xmlns=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n  &lt;maxprice&gt;15.00&lt;/maxprice&gt;\n  &lt;associate&gt;0xdecafbad-20&lt;/associate&gt;\n  &lt;devtoken&gt;D8HVH869XA0NP&lt;/devtoken&gt;\n  &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n  &lt;wishlists&gt;\n    &lt;wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishlist&gt;\n    &lt;wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishlist&gt;\n  &lt;/wishlists&gt;\n&lt;/wishes&gt;</code></pre>\n<p>Hopefully, the data here is fairly self-explanatory:  I&apos;ve established a maximum price for item selection; provided my associate ID and developer token; there&apos;s an email address to which I eventually want to send the results of all this work; and I&apos;ve made a list of wishlist IDs, each with a readable label. Given this, let&apos;s start out simple and  use this to get some data from Amazon:</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xsl:stylesheet version=&quot;1.0&quot;\n            xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;\n            xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;&gt;\n  &lt;xsl:output indent=&quot;yes&quot; /&gt;\n\n  &lt;!-- Grab our global settings --&gt;\n  &lt;xsl:variable name=&quot;maxprice&quot;  select=&quot;/wishes:wishes/wishes:maxprice&quot; /&gt;  \n  &lt;xsl:variable name=&quot;associate&quot; select=&quot;/wishes:wishes/wishes:associate&quot; /&gt;\n  &lt;xsl:variable name=&quot;devtoken&quot;  select=&quot;/wishes:wishes/wishes:devtoken&quot; /&gt;</code></pre>\n<p>So far so good--things start off by pulling in some of the parameters into variables.  Next, let&apos;s dig into actually querying wishlist data with a reusable template:</p>\n<pre><code>  &lt;xsl:template name=&quot;processWishlist&quot;&gt;\n    &lt;xsl:param name=&quot;wishlist&quot; /&gt;\n\n    &lt;xsl:variable name=&quot;details&quot; select=&quot;document(concat(\n        &apos;http://xml.amazon.com/onca/xml3?&apos;,\n        &apos;t=&apos;,$associate,&apos;&amp;amp;&apos;,\n        &apos;dev-t=&apos;,$devtoken,&apos;&amp;amp;&apos;,\n        &apos;WishlistSearch=&apos;,$wishlist,&apos;&amp;amp;&apos;,\n        &apos;type=lite&amp;amp;f=xml&apos;))//Details&quot; /&gt;</code></pre>\n<p>First thing into this template, we accept a parameter named <code>wishlist</code> which is expected to contain a wishlist ID string.  Next, we build an AWS URL by concatenating together the pieces we have in variables (associate ID, developer&apos;s token, and wishlist ID) using the XPath function <a href=\"http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-concat\"><code>concat()</code></a>.  Once we have this URL, we use the function <a href=\"http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-document\"><code>document()</code></a> to make a request and fetch the XML data for that URL.  From this, we select all the <code>Details</code> elements.  </p>\n<p>Then with that data, we can do some filtering on the price and availability.  We want to make sure that not only will we select items that are within our budget, but that they are available to buy in the first place:</p>\n<pre><code>    &lt;xsl:copy-of select=&quot;$details[\n      number(substring(OurPrice/text(),2)) &amp;lt; $maxprice\n      and\n      contains(Availability, &apos;Usually ships within&apos;)\n      ]&quot; /&gt;\n\n  &lt;/xsl:template&gt;</code></pre>\n<p>This code is just a little bit funky, since the price data given by Amazon contains a dollar sign, and we want to make a numerical comparison.  So, we chop the dollar sign off and convert to a number before making the comparison.  Also, there&apos;s an assumption here about what will show up in the <code>Availability</code> element: &quot;Usually ships within&quot;  Other things that might show up will declare that the item is out of stock, discontinued, or otherwise not shipping.  This might need some tweaking someday, but it seems to work for now.</p>\n<p>Taken all together, this template has the effect of a SQL SELECT statement somewhat like this:</p>\n<pre><code>SELECT * \nFROM Amazon.WishlistItems \nWHERE WishlistID = $wishlist AND \n      OurPrice &lt; $maxprice AND\n      Availability like &apos;%Usually ships within%&apos;;</code></pre>\n<p><code>document()</code> is a very useful XPath function.  It allows us to pull in XML from external files and, in our case, from external URLs via HTTP requests.  This gives us the ability to make queries against REST web services like AWS--which, among many other reasons, is why I prefer REST web services over SOAP.  (I don&apos;t even want to think about trying to access a SOAP service from XSLT.)</p>\n<p>Now, let&apos;s wrap up this first iteration of the stylesheet by trying out the query template on each of the wishlist IDs:</p>\n<pre><code>  &lt;xsl:template match=&quot;/wishes:wishes&quot;&gt;\n    &lt;xsl:for-each select=&quot;//wishes:wishlist&quot;&gt;\n      &lt;wishes:wishitem&gt;\n        &lt;xsl:copy-of select=&quot;.&quot; /&gt;\n        &lt;xsl:call-template name=&quot;processWishlist&quot;&gt;\n              &lt;xsl:with-param name=&quot;wishlist&quot; \n                              select=&quot;.&quot; /&gt;\n        &lt;/xsl:call-template&gt;\n      &lt;/wishes:wishitem&gt;\n    &lt;/xsl:for-each&gt;\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;</code></pre>\n<p>You can get a <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\">completed version of this stylesheet</a>, along with <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\">the input XML</a>, in case you haven&apos;t been cutting and pasting together a copy of your own along the way.  Try it out in a shell with:</p>\n<pre><code>$ xsltproc wishes_ex1.xsl wishes.xml</code></pre>\n<p>Alternately, you could check it out using <a href=\"http://www.entropy.ch:16080/software/macosx/#testxslt\">TestXSLT</a> under OS X.  You should get something like the following:</p>\n<pre><code>&lt;wishes:wishitem xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n    &lt;wishes:wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    ...\n&lt;/wishes:wishitem&gt;\n&lt;wishes:wishitem xmlns:wishes=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n    &lt;wishes:wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishes:wishlist&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    &lt;Details ...&gt;...&lt;/Details&gt;\n    ...\n&lt;/wishes:wishitem&gt;</code></pre>\n<p>Obviously, this example XML is much abridged, but hopefully you can get the gist:  For each wishlist ID, there is a containing <code>wishitem</code> element.  It contains a copy of the <code>wishlist</code> element from the input XML, followed by all the <code>Details</code> elements filtered and copied from the Amazon XML with the help of the <code>processWishlist</code> template.</p>\n<h3 id=\"thats-all-for-now\">That&apos;s All for Now!</h3>\n<p>And that&apos;s the end of Part 1.  Next up, we&apos;ll be delving into a few more wrinkles in the wishlist querying process, selecting random items in XSLT, and the Remote Shopping Cart interface in Amazon Web Services.  Stay tuned!</p>\n<!-- links -->\n\n"
  }
]