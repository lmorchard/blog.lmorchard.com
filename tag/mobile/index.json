[
  {
    "title": "Adding Android to a multi-platform React app",
    "tags": [
      "webdev",
      "native",
      "react",
      "reactnative",
      "android",
      "ios",
      "mobile",
      "mozilla"
    ],
    "year": "2015",
    "month": "09",
    "day": "21",
    "isDir": false,
    "slug": "react-native-android",
    "date": "2015-09-21T12:00:00.000Z",
    "postName": "2015-09-21-react-native-android",
    "html": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: A couple of months back, <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/\">I wrote about a TODO app built using React\nfor web and React Native for iOS</a>. </p>\n<p>Last week, the team at Facebook \n<a href=\"https://code.facebook.com/posts/1189117404435352/\">released React Native for Android</a>. So, I circled back to add\nAndroid support and revisit how code sharing looks now.</p>\n<h2 id=\"getting-up-to-speed\">Getting up to speed</h2>\n<p>With this <a href=\"https://code.facebook.com/posts/1189117404435352/\">new release of React Native</a>, I was able to add support\nfor Android to <a href=\"https://github.com/lmorchard/react-multiplatform\">my little TODO app</a>.</p>\n<p>The first task was to <a href=\"https://github.com/lmorchard/react-multiplatform/commit/38fb7afe67f8c339b8d51c69a1f515a5a91e97c7\">shuffle directories &amp; files around and add the base\nAndroid support</a>. In general, the project layout is now cleaner.\nAssets for each platform now live in separate sub-directories.</p>\n<p>Next, to start iterating &amp; experimenting, I copied the code from the iOS app\ninto Android-specific directories. I <a href=\"https://github.com/lmorchard/react-multiplatform/commit/fd80e9859400744ac5fcffc8f7d75d6703a3856d\">only needed to make some small\ntweaks</a> to account for differences in native component sets. That got my\nbase app functionality working.</p>\n<p>Then, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/dd8b6b307c31b67fde23c6b090e7b1f1d8b0f579\">I squashed the iOS &amp; Android models together</a> when I realized that\ncode was identical between the React Native platforms. That could change in\nthe future, but there&#39;s no need for a difference right now.</p>\n<p>After sleeping on it, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/ea7abb421b7e0486b2d3de42001724343f832901\">I refactored some common mixins</a> to take advantage of\nadditional sharing opportunities I found between iOS &amp; Android views. That\nhelped to further shrink the lines of duplicated code.</p>\n<p>This added what amounts to a new category of code sharing in my project. So,\n<a href=\"https://github.com/lmorchard/react-multiplatform/commit/cdbbff72cb941fac75f68c1c91279fa780997b26\">I separated that code into its own module</a> to make the distinction easier\nto see &amp; measure.  Now, I have code shared between web and native in general,\nand code shared between the iOS and Android native platforms.</p>\n<p>Finally, in an attempt to start automating my code metrics, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/d5149768e116571d0a1a059d1ff16e1cfc45fcfd\">I added\n<code>loc-metrics.sh</code></a>.</p>\n<h2 id=\"visualizing-the-code-metrics\">Visualizing the code metrics</h2>\n<p>So, I tried drawing some Venn diagrams in my notebook. But, I&#39;m terrible at\ndrawing. That&#39;s when I remembered that SVG is a thing where I can draw by\nwriting code. So, <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial\">I spent an afternoon teaching myself some SVG</a>\nand <a href=\"https://github.com/lmorchard/react-multiplatform/commit/0014232c9858e082414e094be021170fda19aab0\">reworked my metrics shell script</a>.</p>\n<p>I&#39;m not going to bother trying to make the areas actually proportional to the\nlines of code. But, here&#39;s a rough picture of code sharing:</p>\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-overall.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-models.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-views.svg\">\n\n<p>If you can&#39;t see those images, then you&#39;ll need to find a browser that understands\nSVG until I can be bothered to convert to PNG. (Pull requests welcome!)</p>\n<h2 id=\"conclusions-revisited\">Conclusions revisited</h2>\n<p>As before, most of the models code is shared between web and both native\nplatforms. What&#39;s unique is mostly boilerplate wrapping <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/#forking-sharing-model-code-for-persistence\">the localStorage /\nasyncStorage split between web and native</a>.</p>\n<p>On the view side, however, things are a bit more spread out. In a nutshell,\nReact patterns in general allow a decent chunk of code to be shared between\nweb and native. And even more code can be shared between the iOS and Android\nplatforms.</p>\n<p>But, unique concerns in each platform - web, iOS, and Android - call for\nunique code for each case. This is not actually a failing, though: Varying the\nUX between web &amp; iOS &amp; Android is a flexibility you&#39;ll probably appreciate. </p>\n<p>In other words, use components &amp; conventions unique to each\nplatform without your app suffering from the lowest-common-denominator UX\nproblem historically found in a lot of multi-platform apps. In the case of this\nTODO app, that just boils down to trivialities like checkboxes &amp; switches &amp;\nsegmented controls. In a larger app, I&#39;d expect this concern to grow.</p>\n<p>I&#39;m being lazy and not coding up the math in percentages. This approach shared\nabout half the code from the web app, and even more than that for each of the\nnative apps. I think that&#39;s a significant advantage over writing separate\napps.</p>\n<p>Of course, <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/#conclusion\">all my caveats from the first go\naround</a> still apply: This is a very simple app. The code devoted to\ndoing interesting things versus React boilerplate is probably not at a good\nratio. Also, as more view components arise, further overlap might be found.\nAnd, hopefully, common logic would remain the primary area of growth on the\nmodel site.</p>\n<p>I think this approach toward building apps remains interesting &amp; promising. </p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nTL;DR: A couple of months back, [I wrote about a TODO app built using React\nfor web and React Native for iOS][rnpart1]. \n\nLast week, the team at Facebook \n[released React Native for Android][rnandroid]. So, I circled back to add\nAndroid support and revisit how code sharing looks now.\n\n[rnandroid]: https://code.facebook.com/posts/1189117404435352/\n[rnpart1]: http://blog.lmorchard.com/2015/07/22/react-multiplatform/\n[reactmultiplatform]: https://github.com/lmorchard/react-multiplatform\n\n## Getting up to speed\n\nWith this [new release of React Native][rnandroid], I was able to add support\nfor Android to [my little TODO app][reactmultiplatform].\n  \nThe first task was to [shuffle directories & files around and add the base\nAndroid support][c1]. In general, the project layout is now cleaner.\nAssets for each platform now live in separate sub-directories.\n\n[c1]: https://github.com/lmorchard/react-multiplatform/commit/38fb7afe67f8c339b8d51c69a1f515a5a91e97c7\n\nNext, to start iterating & experimenting, I copied the code from the iOS app\ninto Android-specific directories. I [only needed to make some small\ntweaks][c2] to account for differences in native component sets. That got my\nbase app functionality working.\n\n[c2]: https://github.com/lmorchard/react-multiplatform/commit/fd80e9859400744ac5fcffc8f7d75d6703a3856d\n\nThen, [I squashed the iOS & Android models together][c3] when I realized that\ncode was identical between the React Native platforms. That could change in\nthe future, but there's no need for a difference right now.\n\n[c3]: https://github.com/lmorchard/react-multiplatform/commit/dd8b6b307c31b67fde23c6b090e7b1f1d8b0f579\n\nAfter sleeping on it, [I refactored some common mixins][c4] to take advantage of\nadditional sharing opportunities I found between iOS & Android views. That\nhelped to further shrink the lines of duplicated code.\n\n[c4]: https://github.com/lmorchard/react-multiplatform/commit/ea7abb421b7e0486b2d3de42001724343f832901\n\nThis added what amounts to a new category of code sharing in my project. So,\n[I separated that code into its own module][c5] to make the distinction easier\nto see & measure.  Now, I have code shared between web and native in general,\nand code shared between the iOS and Android native platforms.\n\n[c5]: https://github.com/lmorchard/react-multiplatform/commit/cdbbff72cb941fac75f68c1c91279fa780997b26\n\nFinally, in an attempt to start automating my code metrics, [I added\n`loc-metrics.sh`][c6].\n\n[c6]: https://github.com/lmorchard/react-multiplatform/commit/d5149768e116571d0a1a059d1ff16e1cfc45fcfd\n\n## Visualizing the code metrics\n\nSo, I tried drawing some Venn diagrams in my notebook. But, I'm terrible at\ndrawing. That's when I remembered that SVG is a thing where I can draw by\nwriting code. So, [I spent an afternoon teaching myself some SVG][svgtutorial]\nand [reworked my metrics shell script][c7].\n\n[c7]: https://github.com/lmorchard/react-multiplatform/commit/0014232c9858e082414e094be021170fda19aab0\n[svgtutorial]: https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial\n\nI'm not going to bother trying to make the areas actually proportional to the\nlines of code. But, here's a rough picture of code sharing:\n\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-overall.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-models.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-views.svg\">\n\nIf you can't see those images, then you'll need to find a browser that understands\nSVG until I can be bothered to convert to PNG. (Pull requests welcome!)\n\n## Conclusions revisited\n\nAs before, most of the models code is shared between web and both native\nplatforms. What's unique is mostly boilerplate wrapping [the localStorage /\nasyncStorage split between web and native][storagesplit].\n\n[storagesplit]: http://blog.lmorchard.com/2015/07/22/react-multiplatform/#forking-sharing-model-code-for-persistence\n\nOn the view side, however, things are a bit more spread out. In a nutshell,\nReact patterns in general allow a decent chunk of code to be shared between\nweb and native. And even more code can be shared between the iOS and Android\nplatforms.\n\nBut, unique concerns in each platform - web, iOS, and Android - call for\nunique code for each case. This is not actually a failing, though: Varying the\nUX between web & iOS & Android is a flexibility you'll probably appreciate. \n\nIn other words, use components & conventions unique to each\nplatform without your app suffering from the lowest-common-denominator UX\nproblem historically found in a lot of multi-platform apps. In the case of this\nTODO app, that just boils down to trivialities like checkboxes & switches &\nsegmented controls. In a larger app, I'd expect this concern to grow.\n\nI'm being lazy and not coding up the math in percentages. This approach shared\nabout half the code from the web app, and even more than that for each of the\nnative apps. I think that's a significant advantage over writing separate\napps.\n\nOf course, [all my caveats from the first go\naround][caveats] still apply: This is a very simple app. The code devoted to\ndoing interesting things versus React boilerplate is probably not at a good\nratio. Also, as more view components arise, further overlap might be found.\nAnd, hopefully, common logic would remain the primary area of growth on the\nmodel site.\n\n[caveats]: http://blog.lmorchard.com/2015/07/22/react-multiplatform/#conclusion\n\nI think this approach toward building apps remains interesting & promising. \n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/09/21/react-native-android",
    "thumbnail": "/uploads/2015/react-native-android/shared-overall.svg"
  },
  {
    "title": "Experimenting with a multi-platform app using React",
    "tags": [
      "webdev",
      "native",
      "react",
      "reactnative",
      "ios",
      "mobile",
      "mozilla"
    ],
    "year": "2015",
    "month": "07",
    "day": "22",
    "isDir": false,
    "slug": "react-multiplatform",
    "date": "2015-07-22T12:00:00.000Z",
    "postName": "2015-07-22-react-multiplatform",
    "html": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: I built <a href=\"https://github.com/lmorchard/react-multiplatform/\">a toy app using React for web and native</a> to get a feel for whether this hybrid approach is worth using. I think the answer is &quot;yes&quot; - but mainly for apps whose business logic &amp; data models are more complex than their views.</p>\n<!--more-->\n\n<h2 id=\"write-slightly-more-than-once-run-manywhere\">Write slightly more than once, run manywhere</h2>\n<p>At Mozilla, one of the things we try to champion is the efficiency of writing one web app versus building many separate native apps. In practice, your mileage varies based on goals, priorities, platform capabilities, and a dozen other factors.</p>\n<p><a href=\"https://facebook.github.io/react/\">React</a> and <a href=\"https://facebook.github.io/react-native/\">React Native</a> seem to offer a middle ground: Given the shared conventions and patterns and language, it should be possible to share a lot of code between platforms while still taking advantage of native capabilities.</p>\n<p>So, I figured I&#39;d give it a shot and try measuring the common lines of code as a rough success metric.</p>\n<h2 id=\"great-another-todo-app\">Great, another Todo app</h2>\n<p>I decided to build a Todo app, with lots of inspiration and a little code borrowed from <a href=\"http://todomvc.com/\">TodoMVC</a>.</p>\n<p>A basic Todo app demands just enough user interface and data management to get an initial feel for most app frameworks. Commit to something bigger and you may end up wasting your time. Build something smaller and you won&#39;t have explored deep enough into the framework&#39;s solution space.</p>\n<p>I think I&#39;ve erred on the shallow side, but that just gives me room to improve.</p>\n<h2 id=\"what-about-flux-vs-mvc\">What about Flux vs MVC?</h2>\n<p>It&#39;s said that React provides just the V in MVC (Model-View-Controller). But, there&#39;s also <a href=\"https://facebook.github.io/flux/docs/overview.html\">this Flux notion</a>. It&#39;s billed as an alternative to MVC, and React is intended to be a part of it. That said, I haven&#39;t quite yet wrapped my head around Flux. Luckily, React is focused and useful in isolation. So, I can defer buying into the rest of the conceptual package as I learn.</p>\n<p>In fact, I didn&#39;t even really end up building a proper MVC app. The Controller role got distributed between Views &amp; Models: UI event handlers in Views modify Models directly. Views subscribe to change events from Models to update their own state.</p>\n<p>I expect that when I grok Flux better, it&#39;s this reciprocal Model/View relationship that will get broken up &amp; mediated by a Dispatcher. But, in the spirit of iterative hacking, I forged ahead with my terrible code &amp; design.</p>\n<h2 id=\"building-shared-models\">Building shared Models</h2>\n<p>For the Model layer, I took a look at <a href=\"http://ampersandjs.com/\">Ampersand.js</a>. Based originally on <a href=\"http://backbonejs.org/\">Backbone.js</a> - a library of which I&#39;m a big fan - <a href=\"http://ampersandjs.com/\">Ampersand.js</a> breaks things up into a collection of small modules that work well together. But, like <a href=\"https://facebook.github.io/react/\">React</a>, most of the modules are handy in isolation or alongside substitutions from outside of the <a href=\"http://ampersandjs.com/\">Ampersand.js</a> family.</p>\n<p>For managing a single todo item, I liked the looks of <a href=\"https://github.com/AmpersandJS/ampersand-state\">ampersand-state</a>. With it, you can build JavaScript objects with properties that can be watched for changes. This is what <a href=\"https://github.com/lmorchard/react-multiplatform/blob/master/lib/models/Todo.js\">my todo item model</a> looks like, using <a href=\"https://github.com/tastejs/todomvc/blob/master/examples/ampersand/js/models/todo.js\">TodoMVC code</a> as a starting point:</p>\n<pre><code class=\"language-javascript\">var State = require(&#39;ampersand-state&#39;);\nmodule.exports = State.extend({\n  // Properties this model will store\n  props: {\n    title: { type: &#39;string&#39;, default: &#39;&#39; },\n    completed: { type: &#39;boolean&#39;, default: false }\n  },\n  // session properties are not included when serializing.\n  session: {\n    editing: { type: &#39;boolean&#39;, default: false }\n  },\n  destroy: function () {\n    if (this.collection) {\n      this.collection.remove(this);\n    }\n  }\n});</code></pre>\n<h2 id=\"forking-the-views-by-platform\">Forking the Views by platform</h2>\n<p>This Model code works on both the web and native sides of my app. So far, so good - and pretty straightforward.</p>\n<p>However, getting down to actually rendering this data across platforms reveals where things start to vary. For example, <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/web/TodoItem.js#L34\">the JSX in the <code>render()</code> method of my web view</a> looks like this:</p>\n<pre><code class=\"language-javascript\">return (\n  &lt;li style={itemStyles.container}&gt;\n    &lt;input type=&quot;checkbox&quot;\n      style={itemStyles.completed}\n      onChange={(event) =&gt; this.handleCompletedChange(event.target.checked)}\n      checked={this.state.item.completed} /&gt;\n    {title}\n  &lt;/li&gt;\n);</code></pre>\n<p>Meanwhile, <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/ios/TodoItem.js#L42\">the JSX in the <code>render()</code> method of my iOS view</a> looks like this:</p>\n<pre><code class=\"language-javascript\">return (\n  &lt;View style={styles.todoItem}&gt;\n    &lt;SwitchIOS\n      style={styles.todoCompleted}\n      onValueChange={this.handleCompletedChange}\n      value={this.state.item.completed} /&gt;\n    {title}\n  &lt;/View&gt;\n);</code></pre>\n<p>And, if you take a longer peek at those views, you&#39;ll see some slightly more complex JSX devoted to the <code>{title}</code> placeholders where rendering changes based on whether the item is being edited.</p>\n<p>It&#39;s not radically different; it&#39;s just enough to make things interesting.</p>\n<h2 id=\"code-sharing-with-react-mixins\">Code sharing with React mixins</h2>\n<p>What you might notice about these two divergent views, though, is they both start like this:</p>\n<pre><code class=\"language-javascript\">var TodoItem = module.exports = React.createClass({\n  mixins: [Views.TodoItemCommonMixin],\n  // ...</code></pre>\n<p>It turns out that, thanks to <a href=\"https://facebook.github.io/react/docs/reusable-components.html#mixins\">React mixins</a>, I can write <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/index.js#L35\">the bulk of the View logic</a> in a shared module. Since both sides use Models based on <a href=\"https://github.com/AmpersandJS/ampersand-state\">ampersand-state</a>, this includes subscribing to Model changes:</p>\n<pre><code class=\"language-javascript\">getInitialState() {\n  return { editing: false, item: this.props.item };\n},\ncomponentDidMount() {\n  this.state.item.on(&#39;change&#39;, () =&gt; this.forceUpdate(), this);\n},\ncomponentWillUnmount() {\n  this.state.item.off(null, null, this);\n},\ncomponentWillReceiveProps(props) {\n  this.setState({ item: props.item });\n},\ncomponentDidUpdate(prevProps, prevState) {\n  if (prevState.item !== this.state.item) {\n    prevState.item.off(null, null, this);\n    this.state.item.on(&#39;change&#39;, () =&gt; this.forceUpdate(), this);\n  }\n}</code></pre>\n<p>And, since both sides use Views based on <a href=\"https://facebook.github.io/react/\">React</a>, many UI event handlers can also be shared despite the difference in platform specific JSX and view elements.</p>\n<p>(Of course, I recently learned that <a href=\"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\">React mixins are dead</a>, so I&#39;m already behind the times. But, this code works for now. I&#39;ll get around to burning that bridge when I learn more about Flux.)</p>\n<h2 id=\"forking--sharing-model-code-for-persistence\">Forking &amp; sharing Model code for persistence</h2>\n<p>For multiple todo items, <a href=\"https://github.com/AmpersandJS/ampersand-collection\">ampersand-collection</a> is handy. It manages arrays of <a href=\"https://github.com/AmpersandJS/ampersand-state\">ampersand-state</a> objects and emits events when the set changes. This is useful for keeping <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/web/TodoList.js\">list</a> <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/ios/TodoList.js\">views</a> updated.</p>\n<p><a href=\"https://github.com/AmpersandJS/ampersand-collection\">ampersand-collection</a> also offers methods for serializing &amp; deserializing the models it contains. That&#39;s just what I need, because I&#39;d like to make my todo list items persistent between sessions with the app.</p>\n<p>Apropos of that, we have some storage capabilities on each platform: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\">localStorage</a> for modern browsers, and <a href=\"https://facebook.github.io/react-native/docs/asyncstorage.html\">AsyncStorage</a> for React Native. Both allow you to store small amounts of persistent data on a device. For the purposes of this toy app, these data stores are just about right.</p>\n<p>But, these storage APIs differ. <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/web/TodoCollection.js#L14\">Using localStorage</a> looks like this:</p>\n<pre><code class=\"language-javascript\">readFromStorage: function () {\n  var existingData = localStorage[STORAGE_KEY];\n  if (existingData) {\n    this.set(JSON.parse(existingData));\n  }\n},\nwriteToStorage: function () {\n  localStorage[STORAGE_KEY] = JSON.stringify(this);\n}</code></pre>\n<p>Meanwhile, <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/ios/TodoCollection.js#L9\">using AsyncStorage</a> looks like this:</p>\n<pre><code class=\"language-javascript\">readFromStorage() {\n  AsyncStorage.getItem(STORAGE_KEY).then((existingData) =&gt; {\n    this.set(JSON.parse(existingData));\n  });\n},\nwriteToStorage() {\n  AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(this));\n}</code></pre>\n<p>If you peek at those last two links, though, you might notice they both define classes that start like this:</p>\n<pre><code class=\"language-javascript\">var TodoCollection = module.exports = BaseCollection.extend({</code></pre>\n<p>Since <a href=\"https://github.com/AmpersandJS/ampersand-collection\">ampersand-collection</a> supports class inheritance, the bulk of the logic for these collections can be housed in <a href=\"https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/TodoCollection.js#L8\">a shared superclass</a>. The subclasses just need to implement the platform-specific storage methods. A different mechanism than <a href=\"https://facebook.github.io/react/docs/reusable-components.html#mixins\">React mixins</a>, but for basically the same purpose.</p>\n<h2 id=\"sharing-by-the-numbers\">Sharing by the numbers</h2>\n<p>The main goal of this experiment is to get a feel as to whether a hybrid React approach is worth considering versus building totally separate apps for native and web platforms. The metric I decided to use for this is counting lines of code (LoC), and this is what I found:</p>\n<ul>\n<li><p>Overall, ~30% shared LoC (226 / 748).</p>\n</li>\n<li><p>For Models, ~74% shared LoC (159 / 215).</p>\n</li>\n<li><p>For Views, ~12% shared LoC (67 / 533).</p>\n</li>\n</ul>\n<p>Because I like showing my work, here&#39;s how I came up with those numbers:</p>\n<pre><code class=\"language-bash\"># Total LoC for models = 215\n$ cat lib/models/**/*.js | wc -l\n     215\n\n# ~74% common model code\n$ cat lib/models/*js | wc -l\n     159\n\n# ~12% iOS specific model code\n$ cat lib/models/ios/*js | wc -l\n      25\n\n# ~14% web specific model code\n$ cat lib/models/web/*js | wc -l\n      31\n\n# Total LoC for views = 533\n$ cat lib/views/**/*.js | wc -l\n     533\n\n# ~12% common view code\n$ cat lib/views/*js | wc -l\n      67\n\n# ~44% iOS specific view code\n$ cat lib/views/ios/*js | wc -l\n     235\n\n# ~43% web specific view code\n$ cat lib/views/web/*js | wc -l\n     231</code></pre>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Using React for both web &amp; native looks promising. However, the toy app I&#39;ve built is too simple to present an overwhemingly compelling case.</p>\n<p>What I tried to do here was get a quick feel for the shape of things and where the code multipliers can be found. Your mileage will vary on app features and code refactoring ability.</p>\n<p>In particular, this toy app&#39;s models are very simple. So, even though there&#39;s a lot of sharing, it doesn&#39;t make a big impact on the bottom line. In an app with more complex business logic, that could change favorably.</p>\n<p>On the other hand, Views between platforms will have a greater impact as they get more complex in dealing with divergent UI elements. You could paper over many platform differences with reusable components that normalize APIs &amp; usage patterns - hopefully while not squashing unique advantages of each platform. So far, this app is too simple to really expose those opportunities.</p>\n<p>And, of course, all bets are off once you&#39;ve left React for straight native development. My hunch is that there are qualitative &amp; quantitative benefits to reducing context switching. You can focus development &amp; testing efforts on JavaScript &amp; React as opposed to multiple native &amp; web toolkits (e.g. Objective-C &amp; Swift &amp; Java - oh my!). But, measuring that hunch is beyond the scope of what I tried doing here.</p>\n<p>Hopefully, I&#39;ve raised some interesting features of the terrain. But, I know this is a very shallow look at things and I&#39;m learning as I go along. Feel free to poke holes in this stuff and throw some suggestions at me!</p>\n",
    "body": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nTL;DR: I built [a toy app using React for web and native][react-multiplatform] to get a feel for whether this hybrid approach is worth using. I think the answer is \"yes\" - but mainly for apps whose business logic & data models are more complex than their views.\n\n<!--more-->\n\n## Write slightly more than once, run manywhere\n\nAt Mozilla, one of the things we try to champion is the efficiency of writing one web app versus building many separate native apps. In practice, your mileage varies based on goals, priorities, platform capabilities, and a dozen other factors.\n\n[React][] and [React Native][] seem to offer a middle ground: Given the shared conventions and patterns and language, it should be possible to share a lot of code between platforms while still taking advantage of native capabilities.\n\nSo, I figured I'd give it a shot and try measuring the common lines of code as a rough success metric.\n\n## Great, another Todo app\n\nI decided to build a Todo app, with lots of inspiration and a little code borrowed from [TodoMVC][].\n\nA basic Todo app demands just enough user interface and data management to get an initial feel for most app frameworks. Commit to something bigger and you may end up wasting your time. Build something smaller and you won't have explored deep enough into the framework's solution space.\n\nI think I've erred on the shallow side, but that just gives me room to improve.\n\n## What about Flux vs MVC?\n\nIt's said that React provides just the V in MVC (Model-View-Controller). But, there's also [this Flux notion][flux]. It's billed as an alternative to MVC, and React is intended to be a part of it. That said, I haven't quite yet wrapped my head around Flux. Luckily, React is focused and useful in isolation. So, I can defer buying into the rest of the conceptual package as I learn.\n\nIn fact, I didn't even really end up building a proper MVC app. The Controller role got distributed between Views & Models: UI event handlers in Views modify Models directly. Views subscribe to change events from Models to update their own state.\n\nI expect that when I grok Flux better, it's this reciprocal Model/View relationship that will get broken up & mediated by a Dispatcher. But, in the spirit of iterative hacking, I forged ahead with my terrible code & design.\n\n## Building shared Models\n\nFor the Model layer, I took a look at [Ampersand.js][]. Based originally on [Backbone.js][] - a library of which I'm a big fan - [Ampersand.js][] breaks things up into a collection of small modules that work well together. But, like [React][], most of the modules are handy in isolation or alongside substitutions from outside of the [Ampersand.js][] family.\n\nFor managing a single todo item, I liked the looks of [ampersand-state][]. With it, you can build JavaScript objects with properties that can be watched for changes. This is what [my todo item model][todo-model] looks like, using [TodoMVC code][todo-model-ampersand] as a starting point:\n\n```javascript\nvar State = require('ampersand-state');\nmodule.exports = State.extend({\n  // Properties this model will store\n  props: {\n    title: { type: 'string', default: '' },\n    completed: { type: 'boolean', default: false }\n  },\n  // session properties are not included when serializing.\n  session: {\n    editing: { type: 'boolean', default: false }\n  },\n  destroy: function () {\n    if (this.collection) {\n      this.collection.remove(this);\n    }\n  }\n});\n```\n\n## Forking the Views by platform\n\nThis Model code works on both the web and native sides of my app. So far, so good - and pretty straightforward.\n\nHowever, getting down to actually rendering this data across platforms reveals where things start to vary. For example, [the JSX in the `render()` method of my web view][item-web-render] looks like this:\n\n```javascript\nreturn (\n  <li style={itemStyles.container}>\n    <input type=\"checkbox\"\n      style={itemStyles.completed}\n      onChange={(event) => this.handleCompletedChange(event.target.checked)}\n      checked={this.state.item.completed} />\n    {title}\n  </li>\n);\n```\n\nMeanwhile, [the JSX in the `render()` method of my iOS view][item-ios-render] looks like this:\n\n```javascript\nreturn (\n  <View style={styles.todoItem}>\n    <SwitchIOS\n      style={styles.todoCompleted}\n      onValueChange={this.handleCompletedChange}\n      value={this.state.item.completed} />\n    {title}\n  </View>\n);\n```\n\n[item-web-render]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/web/TodoItem.js#L34\n[item-ios-render]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/ios/TodoItem.js#L42\n\nAnd, if you take a longer peek at those views, you'll see some slightly more complex JSX devoted to the `{title}` placeholders where rendering changes based on whether the item is being edited.\n\nIt's not radically different; it's just enough to make things interesting.\n\n## Code sharing with React mixins\n\nWhat you might notice about these two divergent views, though, is they both start like this:\n\n```javascript\nvar TodoItem = module.exports = React.createClass({\n  mixins: [Views.TodoItemCommonMixin],\n  // ...\n```\n\nIt turns out that, thanks to [React mixins][], I can write [the bulk of the View logic][item-shared-view] in a shared module. Since both sides use Models based on [ampersand-state][], this includes subscribing to Model changes:\n\n[React mixins]: https://facebook.github.io/react/docs/reusable-components.html#mixins\n\n```javascript\ngetInitialState() {\n  return { editing: false, item: this.props.item };\n},\ncomponentDidMount() {\n  this.state.item.on('change', () => this.forceUpdate(), this);\n},\ncomponentWillUnmount() {\n  this.state.item.off(null, null, this);\n},\ncomponentWillReceiveProps(props) {\n  this.setState({ item: props.item });\n},\ncomponentDidUpdate(prevProps, prevState) {\n  if (prevState.item !== this.state.item) {\n    prevState.item.off(null, null, this);\n    this.state.item.on('change', () => this.forceUpdate(), this);\n  }\n}\n```\n\n[item-shared-view]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/index.js#L35\n\nAnd, since both sides use Views based on [React][], many UI event handlers can also be shared despite the difference in platform specific JSX and view elements.\n\n(Of course, I recently learned that [React mixins are dead][dead-mixins], so I'm already behind the times. But, this code works for now. I'll get around to burning that bridge when I learn more about Flux.)\n\n[dead-mixins]: https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750\n\n## Forking & sharing Model code for persistence\n\nFor multiple todo items, [ampersand-collection][] is handy. It manages arrays of [ampersand-state][] objects and emits events when the set changes. This is useful for keeping [list][list-web-view] [views][list-ios-view] updated.\n\n[list-web-view]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/web/TodoList.js\n[list-ios-view]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/views/ios/TodoList.js\n\n[ampersand-collection][] also offers methods for serializing & deserializing the models it contains. That's just what I need, because I'd like to make my todo list items persistent between sessions with the app.\n\n[todo-model]: https://github.com/lmorchard/react-multiplatform/blob/master/lib/models/Todo.js\n[todo-model-ampersand]: https://github.com/tastejs/todomvc/blob/master/examples/ampersand/js/models/todo.js\n\nApropos of that, we have some storage capabilities on each platform: [localStorage][] for modern browsers, and [AsyncStorage][] for React Native. Both allow you to store small amounts of persistent data on a device. For the purposes of this toy app, these data stores are just about right.\n\nBut, these storage APIs differ. [Using localStorage][using-localstorage] looks like this:\n\n```javascript\nreadFromStorage: function () {\n  var existingData = localStorage[STORAGE_KEY];\n  if (existingData) {\n    this.set(JSON.parse(existingData));\n  }\n},\nwriteToStorage: function () {\n  localStorage[STORAGE_KEY] = JSON.stringify(this);\n}\n```\n\nMeanwhile, [using AsyncStorage][using-asyncstorage] looks like this:\n\n```javascript\nreadFromStorage() {\n  AsyncStorage.getItem(STORAGE_KEY).then((existingData) => {\n    this.set(JSON.parse(existingData));\n  });\n},\nwriteToStorage() {\n  AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(this));\n}\n```\n\nIf you peek at those last two links, though, you might notice they both define classes that start like this:\n\n```javascript\nvar TodoCollection = module.exports = BaseCollection.extend({\n```\n\nSince [ampersand-collection][] supports class inheritance, the bulk of the logic for these collections can be housed in [a shared superclass][basecollection]. The subclasses just need to implement the platform-specific storage methods. A different mechanism than [React mixins][], but for basically the same purpose.\n\n[using-localstorage]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/web/TodoCollection.js#L14\n[using-asyncstorage]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/ios/TodoCollection.js#L9\n[basecollection]: https://github.com/lmorchard/react-multiplatform/blob/3fd16fe31473f249d8a54020ef252f524dd17d70/lib/models/TodoCollection.js#L8\n\n[AsyncStorage]: https://facebook.github.io/react-native/docs/asyncstorage.html\n[localstorage]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\n\n## Sharing by the numbers\n\nThe main goal of this experiment is to get a feel as to whether a hybrid React approach is worth considering versus building totally separate apps for native and web platforms. The metric I decided to use for this is counting lines of code (LoC), and this is what I found:\n\n* Overall, ~30% shared LoC (226 / 748).\n\n* For Models, ~74% shared LoC (159 / 215).\n\n* For Views, ~12% shared LoC (67 / 533).\n\nBecause I like showing my work, here's how I came up with those numbers:\n\n```bash\n# Total LoC for models = 215\n$ cat lib/models/**/*.js | wc -l\n     215\n\n# ~74% common model code\n$ cat lib/models/*js | wc -l\n     159\n\n# ~12% iOS specific model code\n$ cat lib/models/ios/*js | wc -l\n      25\n\n# ~14% web specific model code\n$ cat lib/models/web/*js | wc -l\n      31\n\n# Total LoC for views = 533\n$ cat lib/views/**/*.js | wc -l\n     533\n\n# ~12% common view code\n$ cat lib/views/*js | wc -l\n      67\n\n# ~44% iOS specific view code\n$ cat lib/views/ios/*js | wc -l\n     235\n\n# ~43% web specific view code\n$ cat lib/views/web/*js | wc -l\n     231\n```\n\n## Conclusion\n\nUsing React for both web & native looks promising. However, the toy app I've built is too simple to present an overwhemingly compelling case.\n\nWhat I tried to do here was get a quick feel for the shape of things and where the code multipliers can be found. Your mileage will vary on app features and code refactoring ability.\n\nIn particular, this toy app's models are very simple. So, even though there's a lot of sharing, it doesn't make a big impact on the bottom line. In an app with more complex business logic, that could change favorably.\n\nOn the other hand, Views between platforms will have a greater impact as they get more complex in dealing with divergent UI elements. You could paper over many platform differences with reusable components that normalize APIs & usage patterns - hopefully while not squashing unique advantages of each platform. So far, this app is too simple to really expose those opportunities.\n\nAnd, of course, all bets are off once you've left React for straight native development. My hunch is that there are qualitative & quantitative benefits to reducing context switching. You can focus development & testing efforts on JavaScript & React as opposed to multiple native & web toolkits (e.g. Objective-C & Swift & Java - oh my!). But, measuring that hunch is beyond the scope of what I tried doing here.\n\nHopefully, I've raised some interesting features of the terrain. But, I know this is a very shallow look at things and I'm learning as I go along. Feel free to poke holes in this stuff and throw some suggestions at me!\n\n[ampersand-subcollection]: https://github.com/AmpersandJS/ampersand-subcollection\n[ampersand-collection]: https://github.com/AmpersandJS/ampersand-collection\n[ampersand-state]: https://github.com/AmpersandJS/ampersand-state\n[ampersand-view]: https://github.com/AmpersandJS/ampersand-view\n[Backbone.js]: http://backbonejs.org/\n[ampersand.js]: http://ampersandjs.com/\n[flux]: https://facebook.github.io/flux/docs/overview.html\n[TodoMVC]: http://todomvc.com/\n[react-multiplatform]: https://github.com/lmorchard/react-multiplatform/\n[react]: https://facebook.github.io/react/\n[feels-like-web]: https://code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/\n[rn-devtools]: https://facebook.github.io/react-native/docs/debugging.html#content\n[react-api]: https://facebook.github.io/react/docs/top-level-api.html\n[React Native]: https://facebook.github.io/react-native/\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/07/22/react-multiplatform",
    "summary": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: I built <a href=\"https://github.com/lmorchard/react-multiplatform/\">a toy app using React for web and native</a> to get a feel for whether this hybrid approach is worth using. I think the answer is &quot;yes&quot; - but mainly for apps whose business logic &amp; data models are more complex than their views.</p>\n"
  },
  {
    "title": "Random thoughts for 2014 Oct 27",
    "tags": [
      "daybook",
      "thoughts",
      "webdev",
      "mobile",
      "social"
    ],
    "year": "2014",
    "month": "10",
    "day": "27",
    "isDir": false,
    "slug": "thoughts",
    "date": "2014-10-27T12:00:00.000Z",
    "postName": "2014-10-27-thoughts",
    "html": "<p>TL;DR: More <a href=\"http://blog.lmorchard.com/2014/10/23/wtfomgbullets\">random stuff</a> collected and updated throughout the day.</p>\n<!--more-->\n\n<ul>\n<li><p>Hello world!</p>\n</li>\n<li><p>&quot;<a href=\"http://www.extremetech.com/extreme/134672-harvard-cracks-dna-storage-crams-700-terabytes-of-data-into-a-single-gram\">Harvard cracks DNA storage, crams 700 terabytes of data into a single\ngram</a>&quot;</p>\n<ul>\n<li><p>Can you imagine what it would be like to have a personal device that\ncould store all the data you would ever need?</p>\n</li>\n<li><p>And stored on media that&#39;s made for copying?</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Dave asks, &quot;<a href=\"http://scripting.com/2014/10/27/whatsTheBestDesktopNodejsShell.html\">What&#39;s the best desktop node.js shell?</a>&quot;</p>\n<ul>\n<li><p>Could be an odd question in the age of CPUs in pockets\n&amp; clouds and the desktop in decline.</p>\n</li>\n<li><p>But, <a href=\"http://scripting.com/davenet/1997/09/14/FractionalHorsepowerHTTPSe.html\">fractional horsepower HTTP servers</a> and <a href=\"http://scripting.com/davenet/2001/01/04/desktopWebsites.html\">desktop\nwebsites</a> are powerful notions.</p>\n<ul>\n<li><p>Back in the day, <a href=\"http://radio.userland.com/\">Radio UserLand</a> and <a href=\"http://www.disobey.com/amphetadesk/\">AmphetaDesk</a> were\nmarvels.</p>\n</li>\n<li><p>First time I realized that a web server in my\nhouse <em>just for me</em> was a good idea.</p>\n</li>\n</ul>\n</li>\n<li><p>I&#39;ve also tried to say a few things about <a href=\"http://blog.lmorchard.com/2012/07/25/aerostats-base-stations-and-the-cloud/\">aerostats and base\nstations</a>.</p>\n</li>\n<li><p><a href=\"https://github.com/rogerwang/node-webkit\">node-webkit</a> seems like something I should check out.</p>\n<ul>\n<li>It&#39;s like <a href=\"http://www.indigostar.com/perl2exe.php\">Perl2EXE</a> all over again!</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>It seems like the sizes of mobile computers are trying to find some\n<a href=\"http://en.wikipedia.org/wiki/Lagrangian_point\">Lagrange points</a> where the influences of human hand size and demand for\nscreen real estate balance.</p>\n<ul>\n<li>Yes, I&#39;m trying to talk myself into <a href=\"http://newsroom.t-mobile.com/news/t-mobile-to-bring-nexus-6-to-its-data-strong-network-this-november.htm\">buying a Nexus 6</a>.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Do we really all <em>want</em> to live in the same big room on the internet?</p>\n<ul>\n<li><p>I&#39;ve <a href=\"http://decafbad.com/recaffeinated/archives/2007/11/20/WoWEVEandDelicious.html\">long thought</a> some separation between groups can help things scale\nsocially and tech-wise.</p>\n</li>\n<li><p>Reddit gets a lot right with subreddits. Kind of a\nsilo, yet avoids a most of the problems.</p>\n</li>\n</ul>\n</li>\n</ul>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "body": "TL;DR: More [random stuff][why] collected and updated throughout the day.\r\n\r\n[why]: http://blog.lmorchard.com/2014/10/23/wtfomgbullets\r\n\r\n<!--more-->\r\n\r\n* Hello world!\r\n\r\n* \"[Harvard cracks DNA storage, crams 700 terabytes of data into a single\r\n  gram][dnadata]\"\r\n\r\n  * Can you imagine what it would be like to have a personal device that\r\n    could store all the data you would ever need?\r\n\r\n  * And stored on media that's made for copying?\r\n\r\n[dnadata]: http://www.extremetech.com/extreme/134672-harvard-cracks-dna-storage-crams-700-terabytes-of-data-into-a-single-gram\r\n\r\n* Dave asks, \"[What's the best desktop node.js shell?][nodeshell]\"\r\n\r\n  * Could be an odd question in the age of CPUs in pockets\r\n    & clouds and the desktop in decline.\r\n\r\n  * But, [fractional horsepower HTTP servers][frac] and [desktop\r\n    websites][deskweb] are powerful notions.\r\n\r\n    * Back in the day, [Radio UserLand][ruser] and [AmphetaDesk][] were\r\n      marvels.\r\n      \r\n    * First time I realized that a web server in my\r\n      house *just for me* was a good idea.\r\n\r\n  * I've also tried to say a few things about [aerostats and base\r\n    stations][aerostats].\r\n\r\n  * [node-webkit][] seems like something I should check out.\r\n\r\n    * It's like [Perl2EXE][] all over again!\r\n\r\n[perl2exe]: http://www.indigostar.com/perl2exe.php\r\n[ruser]: http://radio.userland.com/ \r\n[AmphetaDesk]: http://www.disobey.com/amphetadesk/\r\n[node-webkit]: https://github.com/rogerwang/node-webkit\r\n[aerostats]: http://blog.lmorchard.com/2012/07/25/aerostats-base-stations-and-the-cloud/  \r\n[deskweb]: http://scripting.com/davenet/2001/01/04/desktopWebsites.html\r\n[frac]: http://scripting.com/davenet/1997/09/14/FractionalHorsepowerHTTPSe.html\r\n[nodeshell]: http://scripting.com/2014/10/27/whatsTheBestDesktopNodejsShell.html\r\n\r\n* It seems like the sizes of mobile computers are trying to find some\r\n  [Lagrange points][] where the influences of human hand size and demand for\r\n  screen real estate balance.\r\n\r\n  * Yes, I'm trying to talk myself into [buying a Nexus 6][n6].\r\n\r\n[n6]: http://newsroom.t-mobile.com/news/t-mobile-to-bring-nexus-6-to-its-data-strong-network-this-november.htm\r\n\r\n* Do we really all *want* to live in the same big room on the internet?\r\n\r\n  * I've [long thought][] some separation between groups can help things scale\r\n   socially and tech-wise.\r\n\r\n  * Reddit gets a lot right with subreddits. Kind of a\r\n    silo, yet avoids a most of the problems.\r\n\r\n[long thought]: http://decafbad.com/recaffeinated/archives/2007/11/20/WoWEVEandDelicious.html\r\n[Lagrange points]: http://en.wikipedia.org/wiki/Lagrangian_point\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/10/27/thoughts",
    "summary": "<p>TL;DR: More <a href=\"http://blog.lmorchard.com/2014/10/23/wtfomgbullets\">random stuff</a> collected and updated throughout the day.</p>\n"
  },
  {
    "title": "My experience in becoming a FirefoxOS contributor",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2012/11/15/my-experience-in-becoming-a-firefoxos-contributor",
    "dsq_thread_id": [
      1107338580
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "firefoxos",
      "mobile",
      "mozilla",
      "webdev"
    ],
    "year": "2012",
    "month": "11",
    "day": "15",
    "isDir": false,
    "slug": "my-experience-in-becoming-a-firefoxos-contributor",
    "date": "2012-11-15T12:00:00.000Z",
    "postName": "2012-11-15-my-experience-in-becoming-a-firefoxos-contributor",
    "html": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\n  <p class=\"toc_title\">\n    Contents\n  </p>\n\n  <ul class=\"toc_list\">\n    <li>\n      <a href=\"#Finding_the_docs\"><span class=\"toc_number toc_depth_1\">1</span> Finding the docs</a>\n    </li>\n    <li>\n      <a href=\"#Getting_the_source\"><span class=\"toc_number toc_depth_1\">2</span> Getting the source</a>\n    </li>\n    <li>\n      <a href=\"#Running_the_project\"><span class=\"toc_number toc_depth_1\">3</span> Running the project</a>\n    </li>\n    <li>\n      <a href=\"#Breaking_things\"><span class=\"toc_number toc_depth_1\">4</span> Breaking things</a>\n    </li>\n    <li>\n      <a href=\"#Fixing_things\"><span class=\"toc_number toc_depth_1\">5</span> Fixing things</a>\n    </li>\n    <li>\n      <a href=\"#Room_for_improvement\"><span class=\"toc_number toc_depth_1\">6</span> Room for improvement</a>\n    </li>\n    <li>\n      <a href=\"#Still_digging\"><span class=\"toc_number toc_depth_1\">7</span> Still digging</a>\n    </li>\n  </ul>\n</div>\n\n<p>Back in September, <a href=\"http://blog.lmorchard.com/2012/09/17/on-the-other-end-of-a-self-imposed-death-march-project#p%5BBInCtb%5D\">I wrote that I wasn&#8217;t leaving MDN</a>. And, I&#8217;m not, really. But, it turns out that <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> needs some help to reach its first release milestones. So, some of us <a href=\"http://blog.mozilla.com/webdev/\">webdevs from around Mozilla</a> are temporarily switching our daily efforts over to slay bugs on <a href=\"https://github.com/mozilla-b2g/gaia\">Gaia</a>. That&#8217;s the layer of <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> which provides the overall system UI and core apps.</p>\n<!--more-->\n\n<p>I&#8217;m planning to return to primarily <a href=\"https://developer.mozilla.org/\">MDN</a> work in a few months &#8211; but, right now, <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> is kind of a big deal.</p>\n<p>Thus, like <a href=\"http://blog.margaretleibovic.com/post/32836884540/challenges-getting-started-with-gaia\">some of</a> my <a href=\"http://bluesock.org/~willg/blog/gaia/gaia_onboarding.html\">other</a> <a href=\"http://schalk-neethling.com/2012/10/debugging-b2g-desktop-blank-screen-on-launch-gaia/\">colleagues</a> in the past month, I&#8217;ve gone from being a fully-operational battle coder on a project with which I have years of experience, to being a total noob with no idea how to find my way to &#8220;Hello world&#8221;. It&#8217;s been awhile since I last parachuted into the middle of an open source combat zone, so I fell back to my training to get my bearings:</p>\n<ol>\n<li>Find the docs</li>\n<li>Get the source</li>\n<li>Run the project</li>\n<li>Break something, see what happens, fix it</li>\n<li>Fix a known bug, submit a patch</li>\n<li>Try to improve the process of fixing things</li>\n</ol>\n<h2 id=\"finding-the-docs\"><span id=\"Finding_the_docs\">Finding the docs</span></h2>\n<p>Oddly enough, <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS\">MDN was a good place to start for docs</a>. Though, there are FirefoxOS docs spread between <a target=\"_blank\" title=\"MDN\" href=\"https://developer.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">MDN</a>, GitHub, and <a href=\"https://wiki.mozilla.org/Gaia/Hacking\">wiki.mozilla.org</a>. And, of course, they are each in various states of freshness and truthiness. Keep your wits about you; here be dragons.</p>\n<h2 id=\"getting-the-source\"><span id=\"Getting_the_source\">Getting the source</span></h2>\n<p>Getting the source for FirefoxOS is a bit of a trick question &#8211; it depends on what you want to do, and how you want to contribute:</p>\n<ul>\n<li><a href=\"https://github.com/mozilla-b2g/B2G\">mozilla-b2g/B2G</a> is the mother of all repos. Only start there if you&#8217;re brave &amp; interested in the whole shebang. Fair warning, though: When the smoke cleared hours later, and the README was done with me, I had acquired 17G of new stuff in my dev directory. But, you&#8217;ll have ALL the things, and you can flash FirefoxOS to compatible hardware. </li>\n<li><a href=\"https://github.com/mozilla-b2g/gaia\">mozilla-b2g/gaia</a> will be the most interesting if you&#8217;re like me and hoping to contribute as a webdev. That&#8217;s chock full of <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a>, <a target=\"_blank\" title=\"CSS\" href=\"https://developer.mozilla.org/docs/Web/CSS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">CSS</a>, and <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a>. It&#8217;s also pretty much free of pesky kernel code or device drivers that hurt my brain, because I&#8217;m not prepared to work at that low a level at this point in the morning. </li>\n</ul>\n<p>There are other repos, for the <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Gonk\">Gonk</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Gecko\">Gecko</a> layers of FirefoxOS. But, for the sake of my sanity, I&#8217;m trying to avert my eyes for now.</p>\n<h2 id=\"running-the-project\"><span id=\"Running_the_project\">Running the project</span></h2>\n<p>If you don&#8217;t have a compatible mobile device (and few do), you need a <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop build. While it&#8217;s true that many apps <em>will</em> run in Firefox Nightly, and there is an emulator you can build from the <a target=\"_blank\" title=\"b2g\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">b2g</a> repo, most apps are presently problematic in Firefox Nightly, and I&#8217;ve never gotten the emulator to build successfully.</p>\n<p>You can either <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Building_the_desktop_client\">build your own B2G Desktop</a>, or <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Download_a_nightly_build\">download a nightly build</a>. I&#8217;ve done both, and generally I recommend sticking with the nightly Aurora builds.</p>\n<p>On OS X, I was able to download a nightly build and launch it with a double-click. That got things running &#8211; hooray! But, it didn&#8217;t get me productive straight away: The nightly build comes equipped with its own embedded build of Gaia, which makes it handy for trying out your own 3rd party apps but not-so-handy for hacking on Gaia itself.</p>\n<p>To improve this situation, you need to do two things:</p>\n<ol>\n<li><a href=\"https://wiki.mozilla.org/Gaia/Hacking#Nightly_Builds\">Build your own Gaia profile</a> from your own clone of <a href=\"https://github.com/mozilla-b2g/gaia\">mozilla-b2g/gaia</a>. This is pretty much just running <code>make</code> or <code>DEBUG=1 make</code> from your git clone. </li>\n<li>Run <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from a terminal <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Running_the_desktop_client\">with command line options</a> that tell it to use your new Gaia profile, rather than the built-in. </li>\n</ol>\n<p>So, at this point, I have the Gaia source and a means by which to run it on my laptop.</p>\n<h2 id=\"breaking-things\"><span id=\"Breaking_things\">Breaking things</span></h2>\n<p>After getting the project running as intended, I break something. And by that, I mean that I change a button title somewhere to &#8220;LOL BUTTS&#8221; or intentionally introduce an exception or syntax error somewhere. Then, I fix it. This is practice that exposes me to the guts of the thing; gets me into the edit/build/run cycle; shows me what it does when something goes wrong; and pushes me toward finding the tests.</p>\n<p>But, I think I picked the wrong week to step into the arena, because everything came pre-broken. There were semi-known bugs preventing nightly builds of <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from running my fresh clone of Gaia. It took me most of my first week to track down those bugs in bugzilla, find workarounds, and finally get something going. And then, it all broke again. And I found workarounds again.</p>\n<p>Eventually, I was at a point where I built my own <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from source with a particular patch from a particular bug applied, and <em>that</em> got me to the point where I could <a href=\"https://github.com/mozilla-b2g/gaia/commit/9f0129c7a5f04d58bbbe140de2b9562e3172d23c\">submit my first pull request</a> to fix a broken test.</p>\n<p>Happily, things seem to have stabilized since I started: <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop nightlies have been cooperating with bleeding-edge Gaia lately, so I&#8217;ve been able to stop building my own. So, now, when I find a combination of <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop and phone and Gaia checkout that works, I cling to that for dear life until it&#8217;s absolutely necessary for me to update one of the parts.</p>\n<p>In short, FirefoxOS is very much in flux, right now. Bring a hard hat and expect delays.</p>\n<h2 id=\"fixing-things\"><span id=\"Fixing_things\">Fixing things</span></h2>\n<p>Once I&#8217;ve broken something and then fixed it, I usually have a sense for how to get real work done. Since then, I&#8217;ve been slowly wrapping my head around <a href=\"https://github.com/mozilla-b2g/gaia/tree/master/apps/calendar\">the core Calendar app</a>, and <a href=\"https://github.com/mozilla-b2g/gaia/commits?author=lmorchard\">my bug fixes have finally started trickling in</a>.</p>\n<p>Cobbling together a reliable Gaia-hacking workflow is complicated, though:</p>\n<ul>\n<li>Some Gaia apps work in Firefox Nightly, at least partially. This is great, because Firefox has all the great tools like the <a target=\"_blank\" title=\"DOM\" href=\"https://developer.mozilla.org/docs/DOM?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">DOM</a> inspector and web console. And, for the most part, you can just save-and-refresh to see changes. </li>\n<li>All Gaia apps work in <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, usually, though sometimes there are&#8230; quirks. This is good for seeing how changes work in a closer-to-real environment. But, <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop has none of the web developer tools offered by Firefox. And, to see changes, I generally have to save, relaunch <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, then relaunch the app within the simulator. That&#8217;s pretty inconvenient.</li>\n<li>All Gaia apps work on the <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a>-supplied dev phone &#8211; which almost no one has. Well, they work more often than they do on <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop and Firefox, anyway. But, including a phone in the dev iteration loop is downright painful: As opposed to the usual webdev experience of save-and-refresh, the phone demands a save-build-flash-restart-relaunch cycle. </li>\n<li>There is one awesome thing, at least for <a href=\"https://github.com/mozilla-b2g/gaia/tree/master/apps/calendar\">the Calendar app</a>: <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Gaia_Unit_Tests\">There are unit tests which run in B2G Desktop, but are driven by a node.js controller in my shell</a>. That lets me beat up on my code &amp; logic in a &#8220;headless&#8221; context before jumping into Firefox, <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, or the phone for a fuller integration test and a manual run-through. In fact, the unit testing framework even watches for file changes and will re-run tests right after a save, complete with a Growl notification of pass/fail.</li>\n</ul>\n<h2 id=\"room-for-improvement\"><span id=\"Room_for_improvement\">Room for improvement</span></h2>\n<p>Slowly but surely, I&#8217;ve gotten my minigun barrel spun up to start firing <a href=\"http://techcrunch.com/2011/10/25/lead-bullets/\">piles of lead bullets</a> at Gaia bugs. But, it has been and continues to be a challenge. I&#8217;m hard-pressed to recommend it as a fun-time leisure project to anyone without a <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a> paycheck, or even as an off-hours interest for those who live-and-breathe Firefox. This is to be expected, since it&#8217;s not even a v1.0 project yet &#8211; but, I really, really hope things improve in the not-so-distant future.</p>\n<ul>\n<li>We need to make sure that new contributors can get quickly from cloning the source to running the code. And it should <em>always</em> work &#8211; as in big, noisy automated tests fail when it breaks. I don&#8217;t care if it works fine on the phone if I can&#8217;t hack on it, at least from a contributor perspective. </li>\n<li>We need a consistent and convenient development environment for Gaia. All day, I bounce between things that are partly broken in Firefox, partly broken in <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, and mostly working on the phone. This kills productivity and enthusiasm, all day. And, many times, no one else in the <a href=\"irc://irc.mozilla.org/gaia\">#gaia channel on IRC</a> knows what I&#8217;m on about when I say something&#8217;s broken &#8211; because everyone&#8217;s dev environment is a unique little snowflake. </li>\n<li>My ideal workflow would never leave Firefox and my editor: Consider it a variant of the Responsive Design View, and ensure all the various APIs expected on a real phone are either working properly, polyfilled, or usefully stubbed out. Then, when it&#8217;s perfect in my most comfy environment, I can try it on a phone or standalone simulator as an afterthought. The <a href=\"http://www.blueskyonmars.com/2012/11/08/r2d2b2g-is-becoming-the-firefox-os-simulator/\">upcoming built-in Firefox OS Simulator</a> (née <a href=\"https://hacks.mozilla.org/2012/10/r2d2b2g-an-experimental-prototype-firefox-os-test-environment/\">r2d2b2g</a>) looks promising, but it needs to be seamless. </li>\n</ul>\n<h2 id=\"still-digging\"><span id=\"Still_digging\">Still digging</span></h2>\n<p>Even with the challenges, and even if my contributions are small, I&#8217;m happy to have the opportunity to work on FirefoxOS. It&#8217;s a big deal; it&#8217;s the next Firefox. So, I plan to keep ramming my head against this stuff to help make it better, and I hope we can start taking time to make making it better better, too!</p>\n",
    "body": "<div id=\"toc_container\" class=\"toc_wrap_right no_bullets\">\r\n  <p class=\"toc_title\">\r\n    Contents\r\n  </p>\r\n  \r\n  <ul class=\"toc_list\">\r\n    <li>\r\n      <a href=\"#Finding_the_docs\"><span class=\"toc_number toc_depth_1\">1</span> Finding the docs</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Getting_the_source\"><span class=\"toc_number toc_depth_1\">2</span> Getting the source</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Running_the_project\"><span class=\"toc_number toc_depth_1\">3</span> Running the project</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Breaking_things\"><span class=\"toc_number toc_depth_1\">4</span> Breaking things</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Fixing_things\"><span class=\"toc_number toc_depth_1\">5</span> Fixing things</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Room_for_improvement\"><span class=\"toc_number toc_depth_1\">6</span> Room for improvement</a>\r\n    </li>\r\n    <li>\r\n      <a href=\"#Still_digging\"><span class=\"toc_number toc_depth_1\">7</span> Still digging</a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\nBack in September, [I wrote that I wasn&#8217;t leaving MDN][1]. And, I&#8217;m not, really. But, it turns out that [FirefoxOS][2] needs some help to reach its first release milestones. So, some of us [webdevs from around Mozilla][3] are temporarily switching our daily efforts over to slay bugs on [Gaia][4]. That&#8217;s the layer of [FirefoxOS][2] which provides the overall system UI and core apps.\r\n\r\n<!--more-->\r\n\r\nI&#8217;m planning to return to primarily [MDN][5] work in a few months &#8211; but, right now, [FirefoxOS][2] is kind of a big deal.\r\n\r\nThus, like [some of][6] my [other][7] [colleagues][8] in the past month, I&#8217;ve gone from being a fully-operational battle coder on a project with which I have years of experience, to being a total noob with no idea how to find my way to &#8220;Hello world&#8221;. It&#8217;s been awhile since I last parachuted into the middle of an open source combat zone, so I fell back to my training to get my bearings:\r\n\r\n1.  Find the docs\r\n2.  Get the source\r\n3.  Run the project\r\n4.  Break something, see what happens, fix it\r\n5.  Fix a known bug, submit a patch\r\n6.  Try to improve the process of fixing things\r\n\r\n## <span id=\"Finding_the_docs\">Finding the docs</span>\r\n\r\nOddly enough, [MDN was a good place to start for docs][9]. Though, there are FirefoxOS docs spread between <a target=\"_blank\" title=\"MDN\" href=\"https://developer.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">MDN</a>, GitHub, and [wiki.mozilla.org][10]. And, of course, they are each in various states of freshness and truthiness. Keep your wits about you; here be dragons.\r\n\r\n## <span id=\"Getting_the_source\">Getting the source</span>\r\n\r\nGetting the source for FirefoxOS is a bit of a trick question &#8211; it depends on what you want to do, and how you want to contribute:\r\n\r\n*   [mozilla-b2g/B2G][11] is the mother of all repos. Only start there if you&#8217;re brave & interested in the whole shebang. Fair warning, though: When the smoke cleared hours later, and the README was done with me, I had acquired 17G of new stuff in my dev directory. But, you&#8217;ll have ALL the things, and you can flash FirefoxOS to compatible hardware. \r\n*   [mozilla-b2g/gaia][4] will be the most interesting if you&#8217;re like me and hoping to contribute as a webdev. That&#8217;s chock full of <a target=\"_blank\" title=\"HTML\" href=\"https://developer.mozilla.org/docs/Web/HTML?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">HTML</a>, <a target=\"_blank\" title=\"CSS\" href=\"https://developer.mozilla.org/docs/Web/CSS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">CSS</a>, and <a target=\"_blank\" title=\"JavaScript\" href=\"https://developer.mozilla.org/docs/JavaScript?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">JavaScript</a>. It&#8217;s also pretty much free of pesky kernel code or device drivers that hurt my brain, because I&#8217;m not prepared to work at that low a level at this point in the morning. \r\n\r\nThere are other repos, for the [Gonk][12] and [Gecko][13] layers of FirefoxOS. But, for the sake of my sanity, I&#8217;m trying to avert my eyes for now.\r\n\r\n## <span id=\"Running_the_project\">Running the project</span>\r\n\r\nIf you don&#8217;t have a compatible mobile device (and few do), you need a <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop build. While it&#8217;s true that many apps *will* run in Firefox Nightly, and there is an emulator you can build from the <a target=\"_blank\" title=\"b2g\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">b2g</a> repo, most apps are presently problematic in Firefox Nightly, and I&#8217;ve never gotten the emulator to build successfully.\r\n\r\nYou can either [build your own B2G Desktop][14], or [download a nightly build][15]. I&#8217;ve done both, and generally I recommend sticking with the nightly Aurora builds.\r\n\r\nOn OS X, I was able to download a nightly build and launch it with a double-click. That got things running &#8211; hooray! But, it didn&#8217;t get me productive straight away: The nightly build comes equipped with its own embedded build of Gaia, which makes it handy for trying out your own 3rd party apps but not-so-handy for hacking on Gaia itself.\r\n\r\nTo improve this situation, you need to do two things:\r\n\r\n1.  [Build your own Gaia profile][16] from your own clone of [mozilla-b2g/gaia][4]. This is pretty much just running `make` or `DEBUG=1 make` from your git clone. \r\n2.  Run <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from a terminal [with command line options][17] that tell it to use your new Gaia profile, rather than the built-in. \r\n\r\nSo, at this point, I have the Gaia source and a means by which to run it on my laptop.\r\n\r\n## <span id=\"Breaking_things\">Breaking things</span>\r\n\r\nAfter getting the project running as intended, I break something. And by that, I mean that I change a button title somewhere to &#8220;LOL BUTTS&#8221; or intentionally introduce an exception or syntax error somewhere. Then, I fix it. This is practice that exposes me to the guts of the thing; gets me into the edit/build/run cycle; shows me what it does when something goes wrong; and pushes me toward finding the tests.\r\n\r\nBut, I think I picked the wrong week to step into the arena, because everything came pre-broken. There were semi-known bugs preventing nightly builds of <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from running my fresh clone of Gaia. It took me most of my first week to track down those bugs in bugzilla, find workarounds, and finally get something going. And then, it all broke again. And I found workarounds again.\r\n\r\nEventually, I was at a point where I built my own <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop from source with a particular patch from a particular bug applied, and *that* got me to the point where I could [submit my first pull request][18] to fix a broken test.\r\n\r\nHappily, things seem to have stabilized since I started: <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop nightlies have been cooperating with bleeding-edge Gaia lately, so I&#8217;ve been able to stop building my own. So, now, when I find a combination of <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop and phone and Gaia checkout that works, I cling to that for dear life until it&#8217;s absolutely necessary for me to update one of the parts.\r\n\r\nIn short, FirefoxOS is very much in flux, right now. Bring a hard hat and expect delays.\r\n\r\n## <span id=\"Fixing_things\">Fixing things</span>\r\n\r\nOnce I&#8217;ve broken something and then fixed it, I usually have a sense for how to get real work done. Since then, I&#8217;ve been slowly wrapping my head around [the core Calendar app][19], and [my bug fixes have finally started trickling in][20].\r\n\r\nCobbling together a reliable Gaia-hacking workflow is complicated, though:\r\n\r\n*   Some Gaia apps work in Firefox Nightly, at least partially. This is great, because Firefox has all the great tools like the <a target=\"_blank\" title=\"DOM\" href=\"https://developer.mozilla.org/docs/DOM?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">DOM</a> inspector and web console. And, for the most part, you can just save-and-refresh to see changes. \r\n*   All Gaia apps work in <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, usually, though sometimes there are&#8230; quirks. This is good for seeing how changes work in a closer-to-real environment. But, <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop has none of the web developer tools offered by Firefox. And, to see changes, I generally have to save, relaunch <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, then relaunch the app within the simulator. That&#8217;s pretty inconvenient.\r\n*   All Gaia apps work on the <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a>-supplied dev phone &#8211; which almost no one has. Well, they work more often than they do on <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop and Firefox, anyway. But, including a phone in the dev iteration loop is downright painful: As opposed to the usual webdev experience of save-and-refresh, the phone demands a save-build-flash-restart-relaunch cycle. \r\n*   There is one awesome thing, at least for [the Calendar app][19]: [There are unit tests which run in B2G Desktop, but are driven by a node.js controller in my shell][21]. That lets me beat up on my code & logic in a &#8220;headless&#8221; context before jumping into Firefox, <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, or the phone for a fuller integration test and a manual run-through. In fact, the unit testing framework even watches for file changes and will re-run tests right after a save, complete with a Growl notification of pass/fail.\r\n\r\n## <span id=\"Room_for_improvement\">Room for improvement</span>\r\n\r\nSlowly but surely, I&#8217;ve gotten my minigun barrel spun up to start firing [piles of lead bullets][22] at Gaia bugs. But, it has been and continues to be a challenge. I&#8217;m hard-pressed to recommend it as a fun-time leisure project to anyone without a <a target=\"_blank\" title=\"Mozilla\" href=\"https://www.mozilla.org/?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">Mozilla</a> paycheck, or even as an off-hours interest for those who live-and-breathe Firefox. This is to be expected, since it&#8217;s not even a v1.0 project yet &#8211; but, I really, really hope things improve in the not-so-distant future.\r\n\r\n*   We need to make sure that new contributors can get quickly from cloning the source to running the code. And it should *always* work &#8211; as in big, noisy automated tests fail when it breaks. I don&#8217;t care if it works fine on the phone if I can&#8217;t hack on it, at least from a contributor perspective. \r\n*   We need a consistent and convenient development environment for Gaia. All day, I bounce between things that are partly broken in Firefox, partly broken in <a target=\"_blank\" title=\"B2G\" href=\"https://developer.mozilla.org/docs/Mozilla/Firefox_OS?utm_source=wordpress%20blog&utm_medium=content%20link&utm_campaign=promote%20mdn\">B2G</a> Desktop, and mostly working on the phone. This kills productivity and enthusiasm, all day. And, many times, no one else in the [#gaia channel on IRC][23] knows what I&#8217;m on about when I say something&#8217;s broken &#8211; because everyone&#8217;s dev environment is a unique little snowflake. \r\n*   My ideal workflow would never leave Firefox and my editor: Consider it a variant of the Responsive Design View, and ensure all the various APIs expected on a real phone are either working properly, polyfilled, or usefully stubbed out. Then, when it&#8217;s perfect in my most comfy environment, I can try it on a phone or standalone simulator as an afterthought. The [upcoming built-in Firefox OS Simulator][24] (née [r2d2b2g][25]) looks promising, but it needs to be seamless. \r\n\r\n## <span id=\"Still_digging\">Still digging</span>\r\n\r\nEven with the challenges, and even if my contributions are small, I&#8217;m happy to have the opportunity to work on FirefoxOS. It&#8217;s a big deal; it&#8217;s the next Firefox. So, I plan to keep ramming my head against this stuff to help make it better, and I hope we can start taking time to make making it better better, too!\r\n\r\n [1]: http://blog.lmorchard.com/2012/09/17/on-the-other-end-of-a-self-imposed-death-march-project#p[BInCtb]\r\n [2]: http://www.mozilla.org/firefoxos/\r\n [3]: http://blog.mozilla.com/webdev/\r\n [4]: https://github.com/mozilla-b2g/gaia\r\n [5]: https://developer.mozilla.org/\r\n [6]: http://blog.margaretleibovic.com/post/32836884540/challenges-getting-started-with-gaia\r\n [7]: http://bluesock.org/~willg/blog/gaia/gaia_onboarding.html\r\n [8]: http://schalk-neethling.com/2012/10/debugging-b2g-desktop-blank-screen-on-launch-gaia/\r\n [9]: https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS\r\n [10]: https://wiki.mozilla.org/Gaia/Hacking\r\n [11]: https://github.com/mozilla-b2g/B2G\r\n [12]: https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Gonk\r\n [13]: https://developer.mozilla.org/en-US/docs/Gecko\r\n [14]: https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Building_the_desktop_client\r\n [15]: https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Download_a_nightly_build\r\n [16]: https://wiki.mozilla.org/Gaia/Hacking#Nightly_Builds\r\n [17]: https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Using_the_B2G_desktop_client#Running_the_desktop_client\r\n [18]: https://github.com/mozilla-b2g/gaia/commit/9f0129c7a5f04d58bbbe140de2b9562e3172d23c\r\n [19]: https://github.com/mozilla-b2g/gaia/tree/master/apps/calendar\r\n [20]: https://github.com/mozilla-b2g/gaia/commits?author=lmorchard\r\n [21]: https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Gaia_Unit_Tests\r\n [22]: http://techcrunch.com/2011/10/25/lead-bullets/\r\n [23]: irc://irc.mozilla.org/gaia\r\n [24]: http://www.blueskyonmars.com/2012/11/08/r2d2b2g-is-becoming-the-firefox-os-simulator/\r\n [25]: https://hacks.mozilla.org/2012/10/r2d2b2g-an-experimental-prototype-firefox-os-test-environment/",
    "parentPath": "../blog.lmorchard.com/posts/archives/2012",
    "path": "2012/11/15/my-experience-in-becoming-a-firefoxos-contributor",
    "summary": "\n\n<p>Back in September, <a href=\"http://blog.lmorchard.com/2012/09/17/on-the-other-end-of-a-self-imposed-death-march-project#p%5BBInCtb%5D\">I wrote that I wasn&#x2019;t leaving MDN</a>. And, I&#x2019;m not, really. But, it turns out that <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> needs some help to reach its first release milestones. So, some of us <a href=\"http://blog.mozilla.com/webdev/\">webdevs from around Mozilla</a> are temporarily switching our daily efforts over to slay bugs on <a href=\"https://github.com/mozilla-b2g/gaia\">Gaia</a>. That&#x2019;s the layer of <a href=\"http://www.mozilla.org/firefoxos/\">FirefoxOS</a> which provides the overall system UI and core apps.</p>\n"
  },
  {
    "title": "In praise of dumb pipes &#8211; or, ISPs: please don&#8217;t get smart with me!",
    "author": "lmorchard",
    "layout": "post",
    "permalink": "/2012/07/19/in-praise-of-dumb-pipes",
    "dsq_thread_id": [
      1107259181
    ],
    "categories": [
      "Uncategorized"
    ],
    "tags": [
      "carriers",
      "government",
      "mobile",
      "netneutrality",
      "politics",
      "sprint",
      "verizon"
    ],
    "year": "2012",
    "month": "07",
    "day": "19",
    "isDir": false,
    "slug": "in-praise-of-dumb-pipes",
    "date": "2012-07-19T12:00:00.000Z",
    "postName": "2012-07-19-in-praise-of-dumb-pipes",
    "html": "<p>Something I&#8217;m having trouble finding these days is a dumb pipe. I just want a dumb pipe to the internet going to my house, and to the computer in my pocket. Let me give you money for bandwidth, and then <em>butt out</em>. <!--more--></p>\n<p>Residential ISPs tend to mean cable companies. That, or telecoms who want to replace your cable company. It&#8217;s in their vertically-integrated interests to <a href=\"http://articles.latimes.com/2012/may/17/entertainment/la-et-ct-comcast-netflix-20120517\">make it harder for me to get to Netflix and easier to get to their own networked services</a>. Instead, I&#8217;d rather they focused on making it easier for me, their paying customer, to get to connect where I want and stay out of my way.</p>\n<p>Mobile ISPs tend to mean cell phone carriers. Since they subsidize devices here in the US, they&#8217;re always looking for new ways to make up that cost. So, it&#8217;s in their interest to &#8220;add value&#8221; rather than just get out of my way.</p>\n<p>Granted, I haven&#8217;t had much issue at all with Sprint, and that&#8217;s why I&#8217;ve been loyal to them for over 10 years. They could turn evil and value-addy at any minute, <a href=\"http://money.cnn.com/2012/02/08/technology/sprint_earnings/index.htm?iid=EL\">especially since they broke the bank to get the iPhone</a>, but they&#8217;ve been good to me so far. (Although, I <em>do</em> miss that <a href=\"http://community.sprint.com/baw/community/sprintblogs/blog/2011/09/15/sprint-discontinuing-sprint-premier\">Sprint Premier program they started and then couldn&#8217;t afford any more</a>. I just hope that <a href=\"http://www.brighthand.com/default.asp?newsID=17990&amp;news=Sprint+Unlimited+Data\">unlimited data isn&#8217;t next</a>.)</p>\n<p>In other news, I just activated a Chromebook on Verizon&#8217;s network. There are pay-as-you-go options for when the 100MB free per month runs out. Seems pricier than I&#8217;d like, but that&#8217;s living in the USA (see also: device subsidies). But, the logistics of that sign-up process were pretty much what I wanted: Get a device, not from a carrier and not under contract, and just hook it up to a dumb pipe.</p>\n<p>Of course, Verizon just recently asserted that the pipe I&#8217;m paying for is <a href=\"http://arstechnica.com/tech-policy/2012/07/verizon-net-neutrality-violates-our-free-speech-rights/\">their microphone and platform for free speech</a>. So, I didn&#8217;t just hook up to a dumb pipe &#8211; I hooked up to an insidiously intelligent pipe with an agenda. It will probably be at cross purposes with me, a paying customer, at some point in the future.</p>\n<p>Really, I&#8217;d just like grown-up internet at my house and in my pocket. I give you money, and you give me bandwidth. Beyond that, let&#8217;s not bother each other. There are options, here, but they tend to approach $1000&#8217;s per month. And, as far as I can tell, they don&#8217;t perform nearly as well as the kid-stuff alternatives.</p>\n<p>You know, we have dumb roads here: They let any vehicles across as long as they&#8217;re not too wide, and not so heavy that they bust up the pavement. They don&#8217;t generally charge more for certain kinds of vehicles, though I suppose that might be different on certain toll roads in the country. (We don&#8217;t really have those near where I live.) But, even then, they don&#8217;t charge differently for delivery trucks from one vendor vs another. They don&#8217;t make you use a certain kind of fuel, or tires from a specific company. They don&#8217;t give you an incentive to drive a Ford versus a Chevy.</p>\n<p>I&#8217;m willing to bet that if all our roads were privatized &#8211; <a href=\"http://en.wikipedia.org/wiki/Free-market_roads\" title=\"If you really think private roads are the ideal, tell me how they&#39;d end up different than the bandwidth stagnation we have in the USA\">a free-marketeer&#8217;s fever dream</a> &#8211; we&#8217;d have all the above in full effect.</p>\n<p>But, I haven&#8217;t the foggiest idea how to change this situation. My way of life generally depends on plentiful bandwidth, so a boycott is generally impractical because I&#8217;d pretty much have to abstain from using the entire industry. If the roads were in this shape, it&#8217;s not like I could just decide not to drive anywhere. So, government intervention seems like the only feasible way to go &#8211; get someone with a bigger stick, who ostensibly represents my interests better than the carriers, to make things change.</p>\n<p>Of course, that&#8217;s imperfect, because the people who should represent me seem more often than not to represent <em>their</em> paying customers. And, oddly enough, those customers often happen to be who <em>I&#8217;m</em> paying for a service. That&#8217;s just screwed up.</p>\n",
    "body": "Something I&#8217;m having trouble finding these days is a dumb pipe. I just want a dumb pipe to the internet going to my house, and to the computer in my pocket. Let me give you money for bandwidth, and then *butt out*. <!--more-->\r\n\r\nResidential ISPs tend to mean cable companies. That, or telecoms who want to replace your cable company. It&#8217;s in their vertically-integrated interests to [make it harder for me to get to Netflix and easier to get to their own networked services][1]. Instead, I&#8217;d rather they focused on making it easier for me, their paying customer, to get to connect where I want and stay out of my way.\r\n\r\nMobile ISPs tend to mean cell phone carriers. Since they subsidize devices here in the US, they&#8217;re always looking for new ways to make up that cost. So, it&#8217;s in their interest to &#8220;add value&#8221; rather than just get out of my way.\r\n\r\nGranted, I haven&#8217;t had much issue at all with Sprint, and that&#8217;s why I&#8217;ve been loyal to them for over 10 years. They could turn evil and value-addy at any minute, [especially since they broke the bank to get the iPhone][2], but they&#8217;ve been good to me so far. (Although, I *do* miss that [Sprint Premier program they started and then couldn&#8217;t afford any more][3]. I just hope that [unlimited data isn&#8217;t next][4].)\r\n\r\nIn other news, I just activated a Chromebook on Verizon&#8217;s network. There are pay-as-you-go options for when the 100MB free per month runs out. Seems pricier than I&#8217;d like, but that&#8217;s living in the USA (see also: device subsidies). But, the logistics of that sign-up process were pretty much what I wanted: Get a device, not from a carrier and not under contract, and just hook it up to a dumb pipe.\r\n\r\nOf course, Verizon just recently asserted that the pipe I&#8217;m paying for is [their microphone and platform for free speech][5]. So, I didn&#8217;t just hook up to a dumb pipe &#8211; I hooked up to an insidiously intelligent pipe with an agenda. It will probably be at cross purposes with me, a paying customer, at some point in the future.\r\n\r\nReally, I&#8217;d just like grown-up internet at my house and in my pocket. I give you money, and you give me bandwidth. Beyond that, let&#8217;s not bother each other. There are options, here, but they tend to approach $1000&#8217;s per month. And, as far as I can tell, they don&#8217;t perform nearly as well as the kid-stuff alternatives.\r\n\r\nYou know, we have dumb roads here: They let any vehicles across as long as they&#8217;re not too wide, and not so heavy that they bust up the pavement. They don&#8217;t generally charge more for certain kinds of vehicles, though I suppose that might be different on certain toll roads in the country. (We don&#8217;t really have those near where I live.) But, even then, they don&#8217;t charge differently for delivery trucks from one vendor vs another. They don&#8217;t make you use a certain kind of fuel, or tires from a specific company. They don&#8217;t give you an incentive to drive a Ford versus a Chevy.\r\n\r\nI&#8217;m willing to bet that if all our roads were privatized &#8211; [a free-marketeer&#8217;s fever dream][6] &#8211; we&#8217;d have all the above in full effect.\r\n\r\nBut, I haven&#8217;t the foggiest idea how to change this situation. My way of life generally depends on plentiful bandwidth, so a boycott is generally impractical because I&#8217;d pretty much have to abstain from using the entire industry. If the roads were in this shape, it&#8217;s not like I could just decide not to drive anywhere. So, government intervention seems like the only feasible way to go &#8211; get someone with a bigger stick, who ostensibly represents my interests better than the carriers, to make things change.\r\n\r\nOf course, that&#8217;s imperfect, because the people who should represent me seem more often than not to represent *their* paying customers. And, oddly enough, those customers often happen to be who *I&#8217;m* paying for a service. That&#8217;s just screwed up.\r\n\r\n [1]: http://articles.latimes.com/2012/may/17/entertainment/la-et-ct-comcast-netflix-20120517\r\n [2]: http://money.cnn.com/2012/02/08/technology/sprint_earnings/index.htm?iid=EL\r\n [3]: http://community.sprint.com/baw/community/sprintblogs/blog/2011/09/15/sprint-discontinuing-sprint-premier\r\n [4]: http://www.brighthand.com/default.asp?newsID=17990&news=Sprint+Unlimited+Data\r\n [5]: http://arstechnica.com/tech-policy/2012/07/verizon-net-neutrality-violates-our-free-speech-rights/\r\n [6]: http://en.wikipedia.org/wiki/Free-market_roads \"If you really think private roads are the ideal, tell me how they'd end up different than the bandwidth stagnation we have in the USA\"",
    "parentPath": "../blog.lmorchard.com/posts/archives/2012",
    "path": "2012/07/19/in-praise-of-dumb-pipes",
    "summary": "<p>Something I&#x2019;m having trouble finding these days is a dumb pipe. I just want a dumb pipe to the internet going to my house, and to the computer in my pocket. Let me give you money for bandwidth, and then <em>butt out</em>. </p>"
  },
  {
    "comments_archived": true,
    "date": "2007-09-21T15:36:49.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "writing",
      "mobile",
      "palmtops"
    ],
    "title": "sadness for my dead palmtop",
    "wordpress_id": 1062,
    "wordpress_slug": "sadness-for-my-dead-palmtop",
    "wordpress_url": "http://decafbad.com/blog/2007/09/21/sadness-for-my-dead-palmtop",
    "year": "2007",
    "month": "09",
    "day": "21",
    "isDir": false,
    "slug": "sadness-for-my-dead-palmtop",
    "postName": "2007-09-21-sadness-for-my-dead-palmtop",
    "html": "<p>I dug my <a href=\"http://en.wikipedia.org/wiki/Zeos\">Zeos Pocket PC</a> out of a box and apparently let out the magic smoke when I tried to plug it into a universal wall wart adapter.  The voltage and polarity were right, and I&#39;d used this adapter with this palmtop before - but this time, it literally smoked and smelled of burning plastic and works no more.  </p>\n<p>That&#39;s kind of an end of an era for me - I&#39;d bought that thing with money I&#39;d won in an Ayn Rand essay contest in High School and used it throughout College to enjoy sitting outside in sunlight with its reflective LCD screen and built-in Microsoft Works to write papers for my psychology classes and stories for my creative writing classes.  Funny what you get sentimental attachments to, albeit however slight.</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087282\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.inasnit.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=98448f231ca596089f5ff6299d22865c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.inasnit.net\">Marty</a>\n</div>\n<a href=\"#comment-221087282\" class=\"permalink\"><time datetime=\"2007-09-21T17:49:00\">2007-09-21T17:49:00</time></a>\n</div>\n<div class=\"content\"><p>Ayn Rand essay contest .. you're such a nerd ;) </p>\n<p>I remember you being the Ayn Rand fanboy.  You even convinced me to check out Atlas Shrugged.  I think I only made it like 30 pages.  I still have it - as checked out from MCHS library ;)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087284\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.elroyjetson.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4a34cf8d239b6589024fc004cfdad5b8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.elroyjetson.org\">Elroy Jetson</a>\n</div>\n<a href=\"#comment-221087284\" class=\"permalink\"><time datetime=\"2007-09-25T14:57:30\">2007-09-25T14:57:30</time></a>\n</div>\n<div class=\"content\"><p>Have you made any progress in finding a suitable replacement?  It would seem that such a useful device is incredibly rare.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "I dug my <a href=\"http://en.wikipedia.org/wiki/Zeos\">Zeos Pocket PC</a> out of a box and apparently let out the magic smoke when I tried to plug it into a universal wall wart adapter.  The voltage and polarity were right, and I'd used this adapter with this palmtop before - but this time, it literally smoked and smelled of burning plastic and works no more.  \r\n\r\nThat's kind of an end of an era for me - I'd bought that thing with money I'd won in an Ayn Rand essay contest in High School and used it throughout College to enjoy sitting outside in sunlight with its reflective LCD screen and built-in Microsoft Works to write papers for my psychology classes and stories for my creative writing classes.  Funny what you get sentimental attachments to, albeit however slight.\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087282\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.inasnit.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=98448f231ca596089f5ff6299d22865c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.inasnit.net\">Marty</a>\n                </div>\n                <a href=\"#comment-221087282\" class=\"permalink\"><time datetime=\"2007-09-21T17:49:00\">2007-09-21T17:49:00</time></a>\n            </div>\n            <div class=\"content\"><p>Ayn Rand essay contest .. you're such a nerd ;) </p>\n\n<p>I remember you being the Ayn Rand fanboy.  You even convinced me to check out Atlas Shrugged.  I think I only made it like 30 pages.  I still have it - as checked out from MCHS library ;)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087284\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.elroyjetson.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4a34cf8d239b6589024fc004cfdad5b8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.elroyjetson.org\">Elroy Jetson</a>\n                </div>\n                <a href=\"#comment-221087284\" class=\"permalink\"><time datetime=\"2007-09-25T14:57:30\">2007-09-25T14:57:30</time></a>\n            </div>\n            <div class=\"content\"><p>Have you made any progress in finding a suitable replacement?  It would seem that such a useful device is incredibly rare.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/09/21/sadness-for-my-dead-palmtop"
  },
  {
    "comments_archived": true,
    "date": "2007-08-22T03:31:26.000Z",
    "layout": "post",
    "tags": [
      "metablogging",
      "mobile",
      "twitter",
      "tags",
      "tagging"
    ],
    "title": "Sticky Tags for Twitter?",
    "wordpress_id": 1060,
    "wordpress_slug": "sticky-tags-for-twitter",
    "wordpress_url": "http://decafbad.com/blog/2007/08/21/sticky-tags-for-twitter",
    "year": "2007",
    "month": "08",
    "day": "21",
    "isDir": false,
    "slug": "sticky-tags-for-twitter",
    "postName": "2007-08-21-sticky-tags-for-twitter",
    "html": "<p>I should elaborate on what I mean by <a href=\"http://twitter.com/lmorchard/statuses/218773732\">tags in Twitter</a>, since I got a few head-scratching responses.</p>\n<p>No, fitting tags into the 140 characters for a message won't work.  And, no, tagging every tweet as you go is a horrible approach - no one will do it.  What I've thought might work, though, are <i>sticky tags</i>.</p>\n<p>Sticky tags would persist from update to update.  From the web UI, you could drop \"work\" or \"gnomedex\" or \"l:95051 beer concert somerandomband\" into an additional tags field and all tweets from then on will gain those tags until you empty the tag field.</p>\n<p>There could be shortcut commands to change or clear tags - ala \"d someone\" for direct messaging.  This would be especially useful while out and about and mobile.  Say you text \"t bus commute\" to Twitter when you get on the bus for home, then anything you might emit from then on, until you change the tags, gets tagged with \"bus\" and \"commute\".</p>\n<p>Then, you and others could follow this particular thread of tweets via <a href=\"http://twitter.com/yourname/commute\">http://twitter.com/yourname/commute</a> - or even with tag intersections ala delicious: <a href=\"http://twitter.com/yourname/commute+bus\">http://twitter.com/yourname/commute+bus</a>.</p>\n<p>Going to be at SxSW for awhile?  Drop \"sxsw\" into your sticky tags.  Maybe someday everyone who doesn't want to hear it can filter out tweets with that tag rather than stop following you altogether.</p>\n<p>Having some sticky tags can allow a bit of metadata and filtering hooks to follow you for awhile without requiring you to do or remember much.  Keeping them as free-form text strings allows some cow-pathing as people invent conventions.</p>\n<p>Think of these tags as kind of long-running <i>meta</i>-status.  </p>\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221085861\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.ecademy.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ce83a8e239c0cfce3488d3fec4d5d8de&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.ecademy.com\">Julian Bond</a>\n</div>\n<a href=\"#comment-221085861\" class=\"permalink\"><time datetime=\"2007-08-22T07:35:44\">2007-08-22T07:35:44</time></a>\n</div>\n<div class=\"content\"><p>Dave Troy's location nanoformat does this already as you've shown above. There's potential for some third party to do exactly the same thing. Invent a format like \nT:my<em>current</em>tag\nAnd then provide some UI to do something with the aggregated tags.\nThe problem with this, as with Twittervision, is the need to take a backup of the whole twitter stream to work on.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085863\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221085863\" class=\"permalink\"><time datetime=\"2007-08-22T08:25:09\">2007-08-22T08:25:09</time></a>\n</div>\n<div class=\"content\"><p>The problem with tag-as-nanoformat is that there's already enough message trying to get crammed into the 140 characters, adding more metacrap there just squishes that even further and doesn't get the stickiness to boot.</p>\n<p>I could address the second in my browser with a GreaseMonkey script, and maybe build a proxy to which I can text from my phone to manage tag stickiness there...  But, it's not just the ability to express the tags - it's also being able to filter updates incoming in the present and retrieve them later by way of tags.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085865\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c51d39fe0d256f16e0d743cde9f71cc2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">karl</a>\n</div>\n<a href=\"#comment-221085865\" class=\"permalink\"><time datetime=\"2007-08-22T09:15:17\">2007-08-22T09:15:17</time></a>\n</div>\n<div class=\"content\"><p>simpler, make every words a tag. \nThe fact that some words will become more used will be natural.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085867\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.joegrossberg.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=f288a8afe5302a16a366d5e9d34f2fec&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.joegrossberg.com\">Joe Grossberg</a>\n</div>\n<a href=\"#comment-221085867\" class=\"permalink\"><time datetime=\"2007-08-22T13:13:10\">2007-08-22T13:13:10</time></a>\n</div>\n<div class=\"content\"><p>With all due respect ... PLEASE NO. Keep it simple. That's the beauty of Twitter. No comments. No titles. No extended entries. No metadata other than username and datetime.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085868\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d7a7610cb0f02de44be3c4186f82ac3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n</div>\n<a href=\"#comment-221085868\" class=\"permalink\"><time datetime=\"2007-08-22T15:29:10\">2007-08-22T15:29:10</time></a>\n</div>\n<div class=\"content\"><p>Les, you know what I'm gonna say: WikiWordAsTag</p>\n<p>http://webseitz.fluxent.com/wiki/WikiWordAsTag</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085869\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221085869\" class=\"permalink\"><time datetime=\"2007-08-22T17:17:55\">2007-08-22T17:17:55</time></a>\n</div>\n<div class=\"content\"><p>I do agree that simplicity is the beauty of Twitter.  I don't want titles, comments, or extended entries - that's what a blog is for.  I don't want features added just for coolness sake or whatever.</p>\n<p>But, I can see a set of problems with the Twitter experience that might be helped with something that adds a bit more context - and something like tags seems like a lightweight and somewhat simple way to do it.  Making them sticky helps make them less cumbersome to use.</p>\n<p>I'd really like to be able to pick and choose the sorts of updates I receive from people I follow, across different means of receiving them.  For example, I might not want to get all of someone's random ponderings on my phone, but I'd like to get pinged when they start talking about when they're leaving for the party tonight.  If they switch to a new set of tags I'm watching for, this can happen.</p>\n<p>Or, maybe after a Hack Day London, I'd like to go back and see what the chatter was about - ie. I can <em>see</em> what went on via the hackdaylondon tag on Flickr, and I'd like something like that for Twitter.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085870\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.elroyjetson.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4a34cf8d239b6589024fc004cfdad5b8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.elroyjetson.org\">Elroy Jetson</a>\n</div>\n<a href=\"#comment-221085870\" class=\"permalink\"><time datetime=\"2007-08-22T17:48:55\">2007-08-22T17:48:55</time></a>\n</div>\n<div class=\"content\"><p>I have to agree that having tags would make it nice to filter the wheat from the chafe.  Let's face it.  Not everything someone microblogs about is important to me.  </p>\n<p>Take this post from Robert Scoble who does occasionally have something intelligent to say, but not in this case:  \"I'm done filling up Twitter and peeing in the pool for tonight. Good night!\"</p>\n<p>I don't really need this zipping in to my cell phone when I am looking for that golden nugget of information.  By tagging I could have filtered this out.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085872\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://twitter.com/zachhale\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d204ba1147a9dfb76320a8a2a4b1e5f8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://twitter.com/zachhale\">Zach Hale</a>\n</div>\n<a href=\"#comment-221085872\" class=\"permalink\"><time datetime=\"2007-08-23T01:07:36\">2007-08-23T01:07:36</time></a>\n</div>\n<div class=\"content\"><p>This idea for sticky tags seems like it may be useful for rare mass gatherings like SXSW but I can't see this to be anything more than a headache other times. Most of the time messages I post and I see others post to Twitter are random and inconsistent. In these normal circumstances having to send TWO messages to set the tags then send the tweet would be absurd.</p>\n<p>I like the idea but, for sticky tags, I can't see anything more than a conference tag to be actually useful AND easy to manage.</p>\n<p>Tagging IN the message might be useful but seems like a lot of overhead when we're already limited to 140 characters and not something I could see people actually starting to use. I don't ever wish I could filter out my friends posts. I never know what I'm interested in until I hear it -- that's the beauty of Twitter!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085873\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://laughingmeme.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=01457d1a0f0e533062cd0d1033fb4d7a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://laughingmeme.org\">kellan</a>\n</div>\n<a href=\"#comment-221085873\" class=\"permalink\"><time datetime=\"2007-08-23T01:19:03\">2007-08-23T01:19:03</time></a>\n</div>\n<div class=\"content\"><p>Because no one ever got confused by sticky tags in CVS!  :)  </p>\n<p>Though really this is the only possible version of tagging on twitter which could work, statuses tagged with inherited context.</p>\n<p>That said I think that features which need new syntax are going to appear very very slowly cf. groups.</p>\n<p>Thinking a capital A at the beginning of the line should clear all sticky tags.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085874\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://twitter.com/zachhale\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d204ba1147a9dfb76320a8a2a4b1e5f8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://twitter.com/zachhale\">Zach Hale</a>\n</div>\n<a href=\"#comment-221085874\" class=\"permalink\"><time datetime=\"2007-08-23T04:51:06\">2007-08-23T04:51:06</time></a>\n</div>\n<div class=\"content\"><p>Adding to my previous comments, I really like what <a href=\"http://decafbad.com/blog/2007/08/21/sticky-tags-for-twitter#comment-236717\" rel=\"nofollow\">karl said</a> about making every word a tag. Why not? This would allow almost infinite flexibility with how the user would like to add tags to their content.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085875\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://xiled.rss-central.net/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=750dbcc9cc192bfad37a3daa4edf139e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://xiled.rss-central.net/blog\">megalar</a>\n</div>\n<a href=\"#comment-221085875\" class=\"permalink\"><time datetime=\"2007-08-24T01:15:38\">2007-08-24T01:15:38</time></a>\n</div>\n<div class=\"content\"><p>I concur and obviously this can't be a user created convention by something in the post. The 140 character limit would require the developers to add a field to the db if regular tagging was used, which given the past db issues at twitter might be unlikely. This might be more workable with the sticky tags method.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085876\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://microformats.org/wiki/twitternanoformats\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=38ee225a74381dd88e29fedf03dec158&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://microformats.org/wiki/twitternanoformats\">Teketen</a>\n</div>\n<a href=\"#comment-221085876\" class=\"permalink\"><time datetime=\"2007-08-30T05:24:38\">2007-08-30T05:24:38</time></a>\n</div>\n<div class=\"content\"><p>Do you know nanoformats? I'm working in this for a time. For example we are using some nanoformats to construct events and then transform to microformats (http://www.txioka.net/ekitaldiak.php is an example). Tag nanoformat exist an is used to give people the oportunnity to filter information.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085879\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://vielmetti.typepad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e377f3e2140297d32460ae9a4b38ff98&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://vielmetti.typepad.com\">Edward Vielmetti</a>\n</div>\n<a href=\"#comment-221085879\" class=\"permalink\"><time datetime=\"2007-09-18T17:18:01\">2007-09-18T17:18:01</time></a>\n</div>\n<div class=\"content\"><p>@stoweboyd has been experimenting with the leading octothorpe as a tag indicator, used thusly: #tag</p>\n<p>I find that it looks kind of goofy, since I associate that character with a name of an IRC channel.  That does suggest though the use of a # namespace where you could reasonably tag something with a tag like #a2b3 and then have a way to tune into everyone who used that tag recently (a la what you can do if you are a user and someone tags a post with @username).</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221085880\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://tweetertags.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ab6f5b63751601a3a578b0fbcef784a1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://tweetertags.com\">jonoble</a>\n</div>\n<a href=\"#comment-221085880\" class=\"permalink\"><time datetime=\"2009-02-18T11:09:48\">2009-02-18T11:09:48</time></a>\n</div>\n<div class=\"content\"><p>I know this is quite an old post now, but at risk of sounding like comment spam, I wanted to mention a new Twitter app that we've recently launched which may be of interest to you - tweetertags.com lets you tag your Twitter profile, not individual tweets. The intention is to help you find, and be found by, people with similar interest on Twitter. Please check us out and we'd welcome any feedback to @tweetertags on Twitter.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<p>I should elaborate on what I mean by <a href=\"http://twitter.com/lmorchard/statuses/218773732\">tags in Twitter</a>, since I got a few head-scratching responses.</p>\r\n<p>No, fitting tags into the 140 characters for a message won't work.  And, no, tagging every tweet as you go is a horrible approach - no one will do it.  What I've thought might work, though, are <i>sticky tags</i>.</p>\r\n<p>Sticky tags would persist from update to update.  From the web UI, you could drop \"work\" or \"gnomedex\" or \"l:95051 beer concert somerandomband\" into an additional tags field and all tweets from then on will gain those tags until you empty the tag field.</p>\r\n<p>There could be shortcut commands to change or clear tags - ala \"d someone\" for direct messaging.  This would be especially useful while out and about and mobile.  Say you text \"t bus commute\" to Twitter when you get on the bus for home, then anything you might emit from then on, until you change the tags, gets tagged with \"bus\" and \"commute\".</p>\r\n<p>Then, you and others could follow this particular thread of tweets via <a href=\"http://twitter.com/yourname/commute\">http://twitter.com/yourname/commute</a> - or even with tag intersections ala delicious: <a href=\"http://twitter.com/yourname/commute+bus\">http://twitter.com/yourname/commute+bus</a>.</p>\r\n<p>Going to be at SxSW for awhile?  Drop \"sxsw\" into your sticky tags.  Maybe someday everyone who doesn't want to hear it can filter out tweets with that tag rather than stop following you altogether.</p>\r\n<p>Having some sticky tags can allow a bit of metadata and filtering hooks to follow you for awhile without requiring you to do or remember much.  Keeping them as free-form text strings allows some cow-pathing as people invent conventions.</p>\r\n<p>Think of these tags as kind of long-running <i>meta</i>-status.  </p>\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221085861\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.ecademy.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ce83a8e239c0cfce3488d3fec4d5d8de&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.ecademy.com\">Julian Bond</a>\n                </div>\n                <a href=\"#comment-221085861\" class=\"permalink\"><time datetime=\"2007-08-22T07:35:44\">2007-08-22T07:35:44</time></a>\n            </div>\n            <div class=\"content\"><p>Dave Troy's location nanoformat does this already as you've shown above. There's potential for some third party to do exactly the same thing. Invent a format like \nT:my<em>current</em>tag\nAnd then provide some UI to do something with the aggregated tags.\nThe problem with this, as with Twittervision, is the need to take a backup of the whole twitter stream to work on.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085863\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221085863\" class=\"permalink\"><time datetime=\"2007-08-22T08:25:09\">2007-08-22T08:25:09</time></a>\n            </div>\n            <div class=\"content\"><p>The problem with tag-as-nanoformat is that there's already enough message trying to get crammed into the 140 characters, adding more metacrap there just squishes that even further and doesn't get the stickiness to boot.</p>\n\n<p>I could address the second in my browser with a GreaseMonkey script, and maybe build a proxy to which I can text from my phone to manage tag stickiness there...  But, it's not just the ability to express the tags - it's also being able to filter updates incoming in the present and retrieve them later by way of tags.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085865\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c51d39fe0d256f16e0d743cde9f71cc2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">karl</a>\n                </div>\n                <a href=\"#comment-221085865\" class=\"permalink\"><time datetime=\"2007-08-22T09:15:17\">2007-08-22T09:15:17</time></a>\n            </div>\n            <div class=\"content\"><p>simpler, make every words a tag. \nThe fact that some words will become more used will be natural.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085867\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.joegrossberg.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=f288a8afe5302a16a366d5e9d34f2fec&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.joegrossberg.com\">Joe Grossberg</a>\n                </div>\n                <a href=\"#comment-221085867\" class=\"permalink\"><time datetime=\"2007-08-22T13:13:10\">2007-08-22T13:13:10</time></a>\n            </div>\n            <div class=\"content\"><p>With all due respect ... PLEASE NO. Keep it simple. That's the beauty of Twitter. No comments. No titles. No extended entries. No metadata other than username and datetime.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085868\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://webseitz.fluxent.com/wiki\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1d7a7610cb0f02de44be3c4186f82ac3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://webseitz.fluxent.com/wiki\">Bill Seitz</a>\n                </div>\n                <a href=\"#comment-221085868\" class=\"permalink\"><time datetime=\"2007-08-22T15:29:10\">2007-08-22T15:29:10</time></a>\n            </div>\n            <div class=\"content\"><p>Les, you know what I'm gonna say: WikiWordAsTag</p>\n\n<p>http://webseitz.fluxent.com/wiki/WikiWordAsTag</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085869\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221085869\" class=\"permalink\"><time datetime=\"2007-08-22T17:17:55\">2007-08-22T17:17:55</time></a>\n            </div>\n            <div class=\"content\"><p>I do agree that simplicity is the beauty of Twitter.  I don't want titles, comments, or extended entries - that's what a blog is for.  I don't want features added just for coolness sake or whatever.</p>\n\n<p>But, I can see a set of problems with the Twitter experience that might be helped with something that adds a bit more context - and something like tags seems like a lightweight and somewhat simple way to do it.  Making them sticky helps make them less cumbersome to use.</p>\n\n<p>I'd really like to be able to pick and choose the sorts of updates I receive from people I follow, across different means of receiving them.  For example, I might not want to get all of someone's random ponderings on my phone, but I'd like to get pinged when they start talking about when they're leaving for the party tonight.  If they switch to a new set of tags I'm watching for, this can happen.</p>\n\n<p>Or, maybe after a Hack Day London, I'd like to go back and see what the chatter was about - ie. I can <em>see</em> what went on via the hackdaylondon tag on Flickr, and I'd like something like that for Twitter.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085870\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.elroyjetson.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4a34cf8d239b6589024fc004cfdad5b8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.elroyjetson.org\">Elroy Jetson</a>\n                </div>\n                <a href=\"#comment-221085870\" class=\"permalink\"><time datetime=\"2007-08-22T17:48:55\">2007-08-22T17:48:55</time></a>\n            </div>\n            <div class=\"content\"><p>I have to agree that having tags would make it nice to filter the wheat from the chafe.  Let's face it.  Not everything someone microblogs about is important to me.  </p>\n\n<p>Take this post from Robert Scoble who does occasionally have something intelligent to say, but not in this case:  \"I'm done filling up Twitter and peeing in the pool for tonight. Good night!\"</p>\n\n<p>I don't really need this zipping in to my cell phone when I am looking for that golden nugget of information.  By tagging I could have filtered this out.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085872\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://twitter.com/zachhale\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d204ba1147a9dfb76320a8a2a4b1e5f8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://twitter.com/zachhale\">Zach Hale</a>\n                </div>\n                <a href=\"#comment-221085872\" class=\"permalink\"><time datetime=\"2007-08-23T01:07:36\">2007-08-23T01:07:36</time></a>\n            </div>\n            <div class=\"content\"><p>This idea for sticky tags seems like it may be useful for rare mass gatherings like SXSW but I can't see this to be anything more than a headache other times. Most of the time messages I post and I see others post to Twitter are random and inconsistent. In these normal circumstances having to send TWO messages to set the tags then send the tweet would be absurd.</p>\n\n<p>I like the idea but, for sticky tags, I can't see anything more than a conference tag to be actually useful AND easy to manage.</p>\n\n<p>Tagging IN the message might be useful but seems like a lot of overhead when we're already limited to 140 characters and not something I could see people actually starting to use. I don't ever wish I could filter out my friends posts. I never know what I'm interested in until I hear it -- that's the beauty of Twitter!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085873\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://laughingmeme.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=01457d1a0f0e533062cd0d1033fb4d7a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://laughingmeme.org\">kellan</a>\n                </div>\n                <a href=\"#comment-221085873\" class=\"permalink\"><time datetime=\"2007-08-23T01:19:03\">2007-08-23T01:19:03</time></a>\n            </div>\n            <div class=\"content\"><p>Because no one ever got confused by sticky tags in CVS!  :)  </p>\n\n<p>Though really this is the only possible version of tagging on twitter which could work, statuses tagged with inherited context.</p>\n\n<p>That said I think that features which need new syntax are going to appear very very slowly cf. groups.</p>\n\n<p>Thinking a capital A at the beginning of the line should clear all sticky tags.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085874\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://twitter.com/zachhale\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d204ba1147a9dfb76320a8a2a4b1e5f8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://twitter.com/zachhale\">Zach Hale</a>\n                </div>\n                <a href=\"#comment-221085874\" class=\"permalink\"><time datetime=\"2007-08-23T04:51:06\">2007-08-23T04:51:06</time></a>\n            </div>\n            <div class=\"content\"><p>Adding to my previous comments, I really like what <a href=\"http://decafbad.com/blog/2007/08/21/sticky-tags-for-twitter#comment-236717\" rel=\"nofollow\">karl said</a> about making every word a tag. Why not? This would allow almost infinite flexibility with how the user would like to add tags to their content.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085875\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://xiled.rss-central.net/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=750dbcc9cc192bfad37a3daa4edf139e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://xiled.rss-central.net/blog\">megalar</a>\n                </div>\n                <a href=\"#comment-221085875\" class=\"permalink\"><time datetime=\"2007-08-24T01:15:38\">2007-08-24T01:15:38</time></a>\n            </div>\n            <div class=\"content\"><p>I concur and obviously this can't be a user created convention by something in the post. The 140 character limit would require the developers to add a field to the db if regular tagging was used, which given the past db issues at twitter might be unlikely. This might be more workable with the sticky tags method.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085876\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://microformats.org/wiki/twitternanoformats\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=38ee225a74381dd88e29fedf03dec158&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://microformats.org/wiki/twitternanoformats\">Teketen</a>\n                </div>\n                <a href=\"#comment-221085876\" class=\"permalink\"><time datetime=\"2007-08-30T05:24:38\">2007-08-30T05:24:38</time></a>\n            </div>\n            <div class=\"content\"><p>Do you know nanoformats? I'm working in this for a time. For example we are using some nanoformats to construct events and then transform to microformats (http://www.txioka.net/ekitaldiak.php is an example). Tag nanoformat exist an is used to give people the oportunnity to filter information.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085879\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://vielmetti.typepad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e377f3e2140297d32460ae9a4b38ff98&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://vielmetti.typepad.com\">Edward Vielmetti</a>\n                </div>\n                <a href=\"#comment-221085879\" class=\"permalink\"><time datetime=\"2007-09-18T17:18:01\">2007-09-18T17:18:01</time></a>\n            </div>\n            <div class=\"content\"><p>@stoweboyd has been experimenting with the leading octothorpe as a tag indicator, used thusly: #tag</p>\n\n<p>I find that it looks kind of goofy, since I associate that character with a name of an IRC channel.  That does suggest though the use of a # namespace where you could reasonably tag something with a tag like #a2b3 and then have a way to tune into everyone who used that tag recently (a la what you can do if you are a user and someone tags a post with @username).</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221085880\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://tweetertags.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=ab6f5b63751601a3a578b0fbcef784a1&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://tweetertags.com\">jonoble</a>\n                </div>\n                <a href=\"#comment-221085880\" class=\"permalink\"><time datetime=\"2009-02-18T11:09:48\">2009-02-18T11:09:48</time></a>\n            </div>\n            <div class=\"content\"><p>I know this is quite an old post now, but at risk of sounding like comment spam, I wanted to mention a new Twitter app that we've recently launched which may be of interest to you - tweetertags.com lets you tag your Twitter profile, not individual tweets. The intention is to help you find, and be found by, people with similar interest on Twitter. Please check us out and we'd welcome any feedback to @tweetertags on Twitter.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/08/21/sticky-tags-for-twitter"
  },
  {
    "comments_archived": true,
    "date": "2007-01-12T16:01:54.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "apple",
      "iphone",
      "mobile"
    ],
    "title": "the iphone will not be your new mobile computer",
    "wordpress_id": 1034,
    "wordpress_slug": "the-iphone-will-not-be-your-new-mobile-computer",
    "wordpress_url": "http://decafbad.com/blog/2007/01/12/the-iphone-will-not-be-your-new-mobile-computer",
    "year": "2007",
    "month": "01",
    "day": "12",
    "isDir": false,
    "slug": "the-iphone-will-not-be-your-new-mobile-computer",
    "postName": "2007-01-12-the-iphone-will-not-be-your-new-mobile-computer",
    "html": "<blockquote cite=\"http://www.nytimes.com/2007/01/12/technology/12apple.html?ex=1326258000&en=905b9e9dd858350d&ei=5090&partner=rssuserland&emc=rss\">“We define everything that is on the phone,” he said. “You don’t want your phone to be like a PC. The last thing you want is to have loaded three apps on your phone and then you go to make a call and it doesn’t work anymore. These are more like iPods than they are like computers.”</blockquote><div class=\"quotesource\">Source: <a href=\"http://www.nytimes.com/2007/01/12/technology/12apple.html?ex=1326258000&en=905b9e9dd858350d&ei=5090&partner=rssuserland&emc=rss\">Steve Jobs Walks the Tightrope Again - New York Times</a></div>\nI understand what Apple's after here - a mobile environment is a whole lot less palatable when it's got crashes and glitches like the desktop and laptop world.  But, I have been known to [run Linux on my iPod](http://ipodlinux.org/Main_Page), so I like to crack the closed shell on devices that go in my pockets.  Hopefully the iPhone's lockdown is more of a \"keep out\" sign, rather than a sealed vault.\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090223\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.sencer.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0e94b4d4662542b91df48f0ff3b36d26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.sencer.de\">Sencer</a>\n</div>\n<a href=\"#comment-221090223\" class=\"permalink\"><time datetime=\"2007-01-12T16:11:07\">2007-01-12T16:11:07</time></a>\n</div>\n<div class=\"content\"><p>Of course there are hardware manufacturers that build smartphones which are interested in an open platform and a software eco-system. Like the greenphone (trolltech) or the FIC Neo 1973, which I am personally more excited about, because all of the phones software will be opensourced (and the first gen has a more affordable price, too). Iin fact the software of the phone is more like a platform (openmoko) that will in the long term hopefully run on all kinds of hardware, and it decidedly different than all the other platforms, because it is not restricted to a sandbox, but allows access to all the software and hardware.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090224\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bf1e672f5e54581db4e6d45b7030d286&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Steven</a>\n</div>\n<a href=\"#comment-221090224\" class=\"permalink\"><time datetime=\"2007-01-12T19:35:44\">2007-01-12T19:35:44</time></a>\n</div>\n<div class=\"content\"><p>I haven't heard of a major crisis being caused by user-installed software on (1) Symbian phones, (2) Palm phones, (3) Java phones, (4) Windows phones.  A smartphone is supposed to be a productivity device, unlike an iPod.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<blockquote cite=\"http://www.nytimes.com/2007/01/12/technology/12apple.html?ex=1326258000&en=905b9e9dd858350d&ei=5090&partner=rssuserland&emc=rss\">“We define everything that is on the phone,” he said. “You don’t want your phone to be like a PC. The last thing you want is to have loaded three apps on your phone and then you go to make a call and it doesn’t work anymore. These are more like iPods than they are like computers.”</blockquote><div class=\"quotesource\">Source: <a href=\"http://www.nytimes.com/2007/01/12/technology/12apple.html?ex=1326258000&en=905b9e9dd858350d&ei=5090&partner=rssuserland&emc=rss\">Steve Jobs Walks the Tightrope Again - New York Times</a></div>\r\nI understand what Apple's after here - a mobile environment is a whole lot less palatable when it's got crashes and glitches like the desktop and laptop world.  But, I have been known to [run Linux on my iPod](http://ipodlinux.org/Main_Page), so I like to crack the closed shell on devices that go in my pockets.  Hopefully the iPhone's lockdown is more of a \"keep out\" sign, rather than a sealed vault.\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221090223\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.sencer.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0e94b4d4662542b91df48f0ff3b36d26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.sencer.de\">Sencer</a>\n                </div>\n                <a href=\"#comment-221090223\" class=\"permalink\"><time datetime=\"2007-01-12T16:11:07\">2007-01-12T16:11:07</time></a>\n            </div>\n            <div class=\"content\"><p>Of course there are hardware manufacturers that build smartphones which are interested in an open platform and a software eco-system. Like the greenphone (trolltech) or the FIC Neo 1973, which I am personally more excited about, because all of the phones software will be opensourced (and the first gen has a more affordable price, too). Iin fact the software of the phone is more like a platform (openmoko) that will in the long term hopefully run on all kinds of hardware, and it decidedly different than all the other platforms, because it is not restricted to a sandbox, but allows access to all the software and hardware.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090224\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bf1e672f5e54581db4e6d45b7030d286&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Steven</a>\n                </div>\n                <a href=\"#comment-221090224\" class=\"permalink\"><time datetime=\"2007-01-12T19:35:44\">2007-01-12T19:35:44</time></a>\n            </div>\n            <div class=\"content\"><p>I haven't heard of a major crisis being caused by user-installed software on (1) Symbian phones, (2) Palm phones, (3) Java phones, (4) Windows phones.  A smartphone is supposed to be a productivity device, unlike an iPod.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/01/12/the-iphone-will-not-be-your-new-mobile-computer"
  }
]