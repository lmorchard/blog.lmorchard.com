[
  {
    "comments_archived": true,
    "date": "2009-07-15T15:26:40.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "firefox",
      "js",
      "outliners",
      "outlining",
      "javascript",
      "dhtml",
      "eventdelegation",
      "entries",
      "mozilla",
      "draganddrop"
    ],
    "title": "HTML5 drag and drop in Firefox 3.5",
    "wordpress_id": 1793,
    "wordpress_slug": "html5-drag-and-drop",
    "wordpress_url": "http://decafbad.com/blog/?p=1793",
    "year": "2009",
    "month": "07",
    "day": "15",
    "isDir": false,
    "slug": "html5-drag-and-drop",
    "postName": "2009-07-15-html5-drag-and-drop",
    "html": "<p><i>\nOh hey, look! It's another blog post—and this one\n<a href=\"http://hacks.mozilla.org/2009/07/html5-drag-and-drop/\">is cross-posted on hacks.mozilla.com</a>.\nI won't say this is the start of a renewed blogging habit, but let's see what happens.\n</i></p>\n\n<style type=\"text/css\">\ndl { margin-left: 2em; }\ndd { margin-left: 2em; margin-bottom: 0.25em; }\n</style>\n<div id=\"introduction\">\n    <p>\n        Drag and drop is one of the most fundamental interactions\n        afforded by graphical user interfaces.  In one gesture, it\n        allows users to pair the selection of an object with the\n        execution of an action, often including a second object in the\n        operation.  It's a simple yet powerful UI concept used to\n        support copying, list reordering, deletion (ala the Trash / Recycle Bin),\n        and even the creation of link relationships.\n    </p><p>\n        Since it's so fundamental, offering drag and drop in web\n        applications has been a no-brainer ever since browsers first\n        offered mouse events in DHTML.  But, although\n        <code>mousedown</code>, <code>mousemove</code>, and\n        <code>mouseup</code> made it possible, the implementation has been\n        limited to the bounds of the browser window.  Additionally,\n        since these events refer only to the object being dragged,\n        there's a challenge to find the subject of the drop when\n        the interaction is completed.\n    </p><p>\n\n<pre><code>    Of course, that doesn&#39;t prevent most modern JavaScript\n    frameworks from abstracting away most of the problems and\n    throwing in some flourishes while they&#39;re at it.  But, wouldn&#39;t\n    it be nice if browsers offered first-class support for drag and\n    drop, and maybe even extended it beyond the window sandbox?\n&lt;/p&gt;&lt;p&gt;\n    As it turns out, this very wish is answered by the HTML 5 specification \n    &lt;a target=&quot;_new&quot; href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#dnd&quot;&gt;section on new drag-and-drop events&lt;/a&gt;, and \n    &lt;a target=&quot;_new&quot; href=&quot;https://developer.mozilla.org/En/DragDrop/Drag_and_Drop&quot;&gt;Firefox 3.5 includes an implementation&lt;/a&gt; of those events.\n&lt;/p&gt;&lt;p&gt;\n    If you want to jump straight to the code, I&#39;ve put together \n    &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html&quot;&gt;some simple demos&lt;/a&gt; \n    of the new events.  \n&lt;/p&gt;&lt;p&gt;\n\n    I&#39;ve even scratched an itch of my own and\n    built &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/outline.html&quot;&gt;the beginnings of an outline editor&lt;/a&gt;,\n    where every draggable element is also a drop target—of which\n    there could be dozens to hundreds in a complex document, something\n    that gave me some minor hair-tearing moments in the past\n    while trying to make do with plain old mouse events.\n&lt;/p&gt;&lt;p&gt;\n    And, all the above can be downloaded or cloned from \n    &lt;a href=&quot;http://github.com/lmorchard/fx35-drag-and-drop&quot;&gt;a GitHub repository&lt;/a&gt;\n    I&#39;ve created especially for this article—which continues after the jump.\n&lt;/p&gt;</code></pre>\n</div>\n\n<!--more-->\n\n<div id=\"events\">\n\n<pre><code>&lt;h2&gt;The New Drag and Drop Events&lt;/h2&gt;\n&lt;p&gt;\n    So, with no further ado, here are the new drag and drop events,\n    in roughly the order you might expect to see them fired:\n&lt;/p&gt;\n&lt;dl&gt;\n    &lt;dt&gt;&lt;code&gt;dragstart&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        A drag has been initiated, with the dragged element as the\n        event target.\n    &lt;/dd&gt;\n\n    &lt;dt&gt;&lt;code&gt;drag&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        The mouse has moved, with the dragged element as the event target.\n    &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;dragenter&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        The dragged element has been moved into a drop listener,\n        with the drop listener element as the event target.\n    &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;dragover&lt;/code&gt;&lt;/dt&gt;\n\n    &lt;dd&gt;\n        The dragged element has been moved over a drop listener,\n        with the drop listener element as the event target.  Since\n        the default behavior is to cancel drops, returning\n        &lt;code&gt;false&lt;/code&gt; or calling &lt;code&gt;preventDefault()&lt;/code&gt; in\n        the event handler indicates that a drop is allowed here.\n    &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;dragleave&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        The dragged element has been moved out of a drop listener,\n        with the drop listener element as the event target.\n    &lt;/dd&gt;\n\n    &lt;dt&gt;&lt;code&gt;drop&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        The dragged element has been successfully dropped on a drop\n        listener, with the drop listener element as the event\n        target.\n    &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;dragend&lt;/code&gt;&lt;/dt&gt;\n    &lt;dd&gt;\n        A drag has been ended, successfully or not, with the\n        dragged element as the event target.\n    &lt;/dd&gt;\n&lt;/dl&gt;\n\n&lt;p&gt;\n    Like the mouse events of yore, listeners can be attached to\n    elements using &lt;code&gt;addEventListener()&lt;/code&gt; \n    directly or by way of your favorite JS library.  \n&lt;/p&gt;&lt;p&gt;\n    Consider the following example using jQuery, \n    &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#newschool&quot;&gt;also available as a live demo&lt;/a&gt;:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<div id=\"newschool\">\n    <div class=\"dragme\">Drag me!</div>\n    <div class=\"drophere\">Drop here!</div>\n</div>\n\n<script type=\"text/javascript\">\n    $(document).ready(function() {\n        $('#newschool .dragme')\n            .attr('draggable', 'true')\n            .bind('dragstart', function(ev) {\n                var dt = ev.originalEvent.dataTransfer;\n                dt.setData(\"Text\", \"Dropped in zone!\");\n                return true;\n            })\n            .bind('dragend', function(ev) {\n                return false;\n            });\n        $('#newschool .drophere')\n            .bind('dragenter', function(ev) {\n                $(ev.target).addClass('dragover');\n                return false;\n            })\n            .bind('dragleave', function(ev) {\n                $(ev.target).removeClass('dragover');\n                return false;\n            })\n            .bind('dragover', function(ev) {\n                return false;\n            })\n            .bind('drop', function(ev) {\n                var dt = ev.originalEvent.dataTransfer;\n                alert(dt.getData('Text'));\n                return false;\n            });\n    });\n</script>\n<pre><code>&lt;/pre&gt;\n&lt;p&gt;\n    Thanks to the new events and jQuery, this example is both short\n    and simple—but it packs in a lot of functionality, as the rest\n    of this article will explain.  \n&lt;/p&gt;&lt;p&gt;\n    Before moving on, there are at least three things about the above\n    code that are worth mentioning:\n&lt;/p&gt;\n&lt;ul&gt;\n    &lt;li&gt;\n\n        &lt;p&gt;\n            Drop targets are enabled by virtue of having\n            listeners for drop events.  But, \n            &lt;a target=&quot;_new&quot; href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#drag-and-drop-processing-model&quot;&gt;per the HTML 5 spec&lt;/a&gt;,\n            draggable elements need an\n            attribute of &lt;code&gt;draggable=&quot;true&quot;&lt;/code&gt;, set either in\n            markup or in JavaScript.  \n        &lt;/p&gt;\n        &lt;p&gt;\n            Thus, &lt;code&gt;$(&#39;#newschool&amp;nbsp;.dragme&#39;).attr(&#39;draggable&#39;, &#39;true&#39;)&lt;/code&gt;.\n        &lt;/p&gt;\n\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;p&gt;\n            The original DOM event (as opposed to jQuery&#39;s event\n            wrapper) offers a property called &lt;code&gt;dataTransfer&lt;/code&gt;.\n            Beyond just manipulating elements, the new drag and drop\n            events accomodate the transmission of user-definable data\n            during the course of the interaction.  \n        &lt;/p&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;p&gt;\n\n            Since these are first-class events, you can apply \n            &lt;a target=&quot;_new&quot; href=&quot;http://icant.co.uk/sandbox/eventdelegation/&quot;&gt;the technique of Event Delegation&lt;/a&gt;.\n        &lt;/p&gt;&lt;p&gt;\n            What&#39;s that?  Well, imagine you have a list of 1000\n            list items—as part of a deeply-nested outline document,\n            for instance.  Rather than needing to attach listeners\n            or otherwise fiddle with all 1000 items, simply attach\n            a listener to the parent node (eg. the\n            &lt;code&gt;&lt;ul&gt;&lt;/code&gt; element) and all events from\n            the children will propagate up to the single parent listener.\n            As a bonus, all new child elements added after page\n            load will enjoy the same benefits.\n        &lt;/p&gt;&lt;p&gt;\n            &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#delegated&quot;&gt;Check out this demo&lt;/a&gt;, \n            and \n            &lt;a target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/js/drag-delegated.js&quot;&gt;the associated JS code&lt;/a&gt; \n            to see more about these events and Event Delegation.\n        &lt;/p&gt;\n\n    &lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n</div>\n\n<div id=\"datatransfer\">\n    <h2>Using dataTransfer</h2>\n    <p>\n        As mentioned in the last section, the new drag and drop events\n        let you send data along with a dragged element.  But, it's even\n        better than that:  Your drop targets can receive data\n        transferred by content objects dragged into the window from \n        other browser windows, and even <i>other applications</i>.\n    </p><p>\n\n<pre><code>    Since the example is a bit longer,  \n    &lt;a target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#data_transfer&quot;&gt;check out the live demo&lt;/a&gt;\n    and \n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/js/drag-datatransfer.js&quot;&gt;associated code&lt;/a&gt;\n    to get an idea of what&#39;s possible with &lt;code&gt;dataTransfer&lt;/code&gt;.\n&lt;/p&gt;&lt;p&gt;\n    In a nutshell, the stars of this show are the\n    &lt;code&gt;setData()&lt;/code&gt; and &lt;code&gt;getData()&lt;/code&gt; methods of\n    the &lt;code&gt;dataTransfer&lt;/code&gt; property exposed by the Event object.\n&lt;/p&gt;\n\n&lt;p&gt;\n    The &lt;code&gt;setData()&lt;/code&gt; method is typically called in the \n    &lt;code&gt;dragstart&lt;/code&gt; listener, loading &lt;code&gt;dataTransfer&lt;/code&gt;\n    up with one or more strings of content with associated\n    &lt;a href=&quot;https://developer.mozilla.org/En/DragDrop/Recommended_Drag_Types#link&quot;&gt;recommended content types&lt;/a&gt;.\n&lt;/p&gt;\n\n&lt;p&gt;\n    For illustration, here&#39;s a quick snippet from the example code:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;<br>dt.setData(&#39;text/plain&#39;, $(&#39;#logo&#39;).parent().text());\ndt.setData(&#39;text/html&#39;, $(&#39;#logo&#39;).parent().html());\ndt.setData(&#39;text/uri-list&#39;, $(&#39;#logo&#39;)[0].src);\n    </pre>\n    </p><p>\n        On the other end, <code>getData()</code> allows you to query\n        for content by type (eg. <code>text/html</code> followed by\n        <code>text/plain</code>).  This, in turn, allows you to decide\n        on acceptable content types at the time of the\n        <code>drop</code> event or even during <code>dragover</code></p>\n<pre><code>    to offer feedback for unacceptable types during the drag.\n&lt;/p&gt;&lt;p&gt;\n    Here&#39;s another example from the receiving end of the example code:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;<br>$(&#39;.content_url .content&#39;).text(dt.getData(&#39;text/uri-list&#39;));\n$(&#39;.content_text .content&#39;).text(dt.getData(&#39;text/plain&#39;));\n$(&#39;.content_html .content&#39;).html(dt.getData(&#39;text/html&#39;));\n    </pre>\n    <p>\n        Where <code>dataTransfer</code> really shines, though, is that\n        it allows your drop targets to receive content from \n        sources outside your defined draggable elements and even from\n        outside the browser altogether.  Firefox accepts such drags, \n        and attempts to populate <code>dataTransfer</code> with\n        appropriate content types extracted from the external object.\n    </p><p></p>\n<pre><code>    Thus, you could select some text in a word processor window and\n    drop it into one of your elements, and at least expect to find\n    it available as &lt;code&gt;text/plain&lt;/code&gt; content.  \n&lt;/p&gt;&lt;p&gt;\n    You can also select content in \n    another browser window, and expect to see &lt;code&gt;text/html&lt;/code&gt;\n    appear in your events.  Check out the \n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/outline.html&quot;&gt;outline editing demo&lt;/a&gt;\n    and see what happens when you try dragging various elements \n    (eg. images, tables, and lists) and highlighted content from\n    other windows onto the items there.\n&lt;/p&gt;</code></pre>\n</div>\n\n<div id=\"dragfeedback\">\n    <h2>Using Drag Feedback Images</h2>\n    <p>\n       An important aspect of the drag and drop interaction is a\n       representation of the thing being dragged.  By default in\n       Firefox, this is a \"ghost\" image of the dragged element itself.  But,\n       the <code>dataTransfer</code> property of the original Event\n       object exposes the method <code>setDragImage()</code> for use\n       in customizing this representation.\n    </p><p>\n\n<pre><code>    There&#39;s\n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#feedback_image&quot;&gt;a live demo&lt;/a&gt; of this feature, as well as\n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/js/drag-feedback-images.js&quot;&gt;associated JS code&lt;/a&gt; \n    available.  The gist, however, is sketched out in these code snippets:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;    </p>\n<p>dt.setDragImage( $(&#39;#feedback_image h2&#39;)[0], 0, 0);</p>\n<p>dt.setDragImage( $(&#39;#logo&#39;)[0], 32, 32); </p>\n<p>var canvas = document.createElement(&quot;canvas&quot;);\ncanvas.width = canvas.height = 50;</p>\n<p>var ctx = canvas.getContext(&quot;2d&quot;);\nctx.lineWidth = 8;\nctx.moveTo(25,0);\nctx.lineTo(50, 50);\nctx.lineTo(0, 50);\nctx.lineTo(25, 0);\nctx.stroke();</p>\n<p>dt.setDragImage(canvas, 25, 25);\n    </pre>\n    <p>\n        You can supply a DOM node as the first parameter to \n        <code>setDragImage()</code>, which includes everything from\n        text to images to <code>canvas</code> elements.  The\n        second two parameters indicate at what left and top offset\n        the mouse should appear in the image while dragging.\n    </p><p></p>\n<pre><code>    For example, since the &lt;code&gt;#logo&lt;/code&gt; image is 64x64,\n    the parameters in the second &lt;code&gt;setDragImage()&lt;/code&gt;\n    method places the mouse right in the center of the image.\n    On the other hand, the first call positions the feedback\n    image such that the mouse rests in the upper left corner.\n&lt;/p&gt;&lt;p&gt;\n&lt;/p&gt;</code></pre>\n</div>\n\n<div id=\"dragfeedback\">\n\n<pre><code>&lt;h2&gt;Using Drop Effects&lt;/h2&gt;\n&lt;p&gt;\n    As mentioned at the start of this article, the drag and drop\n    interaction has been used to support actions such as copying,\n    moving, and linking.  Accordingly, the HTML 5 specification \n    accomodates these operations in the form of the \n    &lt;code&gt;effectAllowed&lt;/code&gt; and &lt;code&gt;dropEffect&lt;/code&gt;\n    properties exposed by the Event object.\n&lt;/p&gt;\n&lt;p&gt;\n\n    For a quick fix, check out the\n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#drag_effects&quot;&gt;a live demo&lt;/a&gt; \n    of this feature, as well as the\n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/js/drag-effects.js&quot;&gt;associated JS code&lt;/a&gt;.\n&lt;/p&gt;&lt;p&gt;\n    The basic idea is that the &lt;code&gt;dragstart&lt;/code&gt; event\n    listener can set a value for &lt;code&gt;effectAllowed&lt;/code&gt; like so:\n&lt;/p&gt;\n\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;\nswitch (ev.target.id) {\n    case &#39;effectdrag0&#39;: dt.effectAllowed = &#39;copy&#39;; break;\n    case &#39;effectdrag1&#39;: dt.effectAllowed = &#39;move&#39;; break;\n    case &#39;effectdrag2&#39;: dt.effectAllowed = &#39;link&#39;; break;\n    case &#39;effectdrag3&#39;: dt.effectAllowed = &#39;all&#39;; break;\n    case &#39;effectdrag4&#39;: dt.effectAllowed = &#39;none&#39;; break;\n}\n    </pre>\n    <p>The choices available for this property include the following:</p>\n    <dl> \n        <dt><code>none</code></dt><dd>no operation is permitted </dd>\n        <dt><code>copy</code></dt><dd>copy only </dd></p>\n<pre><code>    &lt;dt&gt;&lt;code&gt;move&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;move only &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;link&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;link only &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;copyMove&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;copy or move only &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;copyLink&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;copy or link only &lt;/dd&gt;\n    &lt;dt&gt;&lt;code&gt;linkMove&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;link or move only &lt;/dd&gt;\n\n    &lt;dt&gt;&lt;code&gt;all&lt;/code&gt;&lt;/dt&gt;&lt;dd&gt;copy, move, or link &lt;/dd&gt;\n&lt;/dl&gt;\n&lt;p&gt;\n    On the other end, the &lt;code&gt;dragover&lt;/code&gt; event listener \n    can set the value of the\n    &lt;code&gt;dropEffect&lt;/code&gt; property to indicate the expected effect\n    invoked on a successful drop.  If the value does\n    not match up with &lt;code&gt;effectAllowed&lt;/code&gt;, the drop will\n    be considered cancelled on completion.\n&lt;/p&gt;&lt;p&gt;\n\n    In the \n    &lt;a target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html#drag_effects&quot;&gt;a live demo&lt;/a&gt;,\n    you should be able to see that only elements with matching\n    effects can be dropped into the appropriate drop zones.  This\n    is accomplished with code like the following:\n&lt;/p&gt;\n&lt;pre lang=&quot;javascript&quot; line=&quot;1&quot;&gt;</code></pre>\n<p>var dt = ev.originalEvent.dataTransfer;\nswitch (ev.target.id) {\n    case &#39;effectdrop0&#39;: dt.dropEffect = &#39;copy&#39;; break;\n    case &#39;effectdrop1&#39;: dt.dropEffect = &#39;move&#39;; break;\n    case &#39;effectdrop2&#39;: dt.dropEffect = &#39;link&#39;; break;\n    case &#39;effectdrop3&#39;: dt.dropEffect = &#39;all&#39;; break;\n    case &#39;effectdrop4&#39;: dt.dropEffect = &#39;none&#39;; break;\n}\n    </pre>\n    <p>\n        Although the OS itself can provide some feedback, you \n        can also use these properties to update your own visible \n        feedback, both on the dragged element and on the drop zone\n        itself.\n    </p></p>\n</div>\n\n<div id=\"conclusion\">\n    <h2>Conclusion</h2>\n    <p>\n        The new first-class drag and drop events in HTML5 and Firefox\n        make supporting this form of UI interaction simple, concise,\n        and powerful in the browser.  But beyond the new simplicity of\n        these events, the ability to transfer content between\n        applications opens brand new avenues for web-based applications\n        and collaboration with desktop software in general.\n    </p><p>\n    </p><p>\n    </p>\n</div>\n\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221090962\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://lmframework.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=03dc722b1852367f02b0b21f02b10675&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://lmframework.com\">David Semeria</a>\n</div>\n<a href=\"#comment-221090962\" class=\"permalink\"><time datetime=\"2009-07-16T17:56:52\">2009-07-16T17:56:52</time></a>\n</div>\n<div class=\"content\"><p>Wow - thanks for a great introduction to D+D in HTML 5, I'm really looking forward to giving it a thorough road test. </p>\n<p>The key part of the implementation are the target listeners, because, as I'm sure you're aware, onmouseover would historically never fire over the target element because the dragged item would always 'cover it up'. BTW, my proposed solution was to add an 'event transparency' property, which would have made the dragged item invisible from the point of view of selected events, eg onmouseover.</p>\n<p>This implementation is going to take a lot of pain away. You have no idea how many hoops I had to jump through to get a fully generic D+D implementation working without these new calls.</p>\n<p>If you're interested, you can see it working here: http://lmframework.com/page.php?id=vd_twig_short_2</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090964\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cee7ac3f63d7e8c1367e170bec302c14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Alex</a>\n</div>\n<a href=\"#comment-221090964\" class=\"permalink\"><time datetime=\"2009-07-17T00:13:23\">2009-07-17T00:13:23</time></a>\n</div>\n<div class=\"content\"><p>Hey,</p>\n<p>Looks great and useful article.  For dragging from external applications (such as the Desktop) is a normal webpage able to get the data from the drop?  I was just playing with it and seem to always get what seems to be a security error with getData or mozGetDataAt.  However, the documentation seems to state that on drop that data should be made available to the page.  Likewise, in the same way an image can be dragged off the page onto the desktop, can an arbitrary element be dragged onto the desktop with whatever file content to be saved?  Thanks for the help.</p>\n<p>Alex</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090966\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://paulisageek.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b3bb70a4bace7f9bd49f48b149ab95f9&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://paulisageek.com/\">Paul Tarjan</a>\n</div>\n<a href=\"#comment-221090966\" class=\"permalink\"><time datetime=\"2009-07-17T04:52:54\">2009-07-17T04:52:54</time></a>\n</div>\n<div class=\"content\"><p>Very nice, I didn't know that FF 3.5 actually had this implemented. Time to start playing :)</p>\n<p>Also, how did you do your code posts? Was it just pasting in HTML or do you have a better setup?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090967\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=066d1e75c9b938053ee6b3d48b1c0f6a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Animal</a>\n</div>\n<a href=\"#comment-221090967\" class=\"permalink\"><time datetime=\"2009-07-17T14:35:21\">2009-07-17T14:35:21</time></a>\n</div>\n<div class=\"content\"><p>Seems pretty pointless pressing ahead with this when you just can't write a web app to use it. There's no support. All a bunch of whizzy fun I'm sure, but sod-all use.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090969\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221090969\" class=\"permalink\"><time datetime=\"2009-07-17T16:23:10\">2009-07-17T16:23:10</time></a>\n</div>\n<div class=\"content\"><p>@Animal: Why can't you write a web app to use it?  It's in the HTML5 spec, works in Fx3.5 and Safari 4 / WebKit.  It doesn't have universal support yet, or course, but new standards never do.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090970\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.crearedesign.co.uk\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=87bf21798e390d9043dda7240c1b60f7&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.crearedesign.co.uk\">paul</a>\n</div>\n<a href=\"#comment-221090970\" class=\"permalink\"><time datetime=\"2009-07-21T08:08:26\">2009-07-21T08:08:26</time></a>\n</div>\n<div class=\"content\"><p>very nice indeed! i like this, it has definitely opened up new avenues for interaction without using flash. but it will take time before people upgrade to the new browser. a lot of people who browse the web wont realise what the technology will bring and will use their current browser because it does the job!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090971\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=04de859cfd6ef0b75e4ea3cbea143190&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Joel</a>\n</div>\n<a href=\"#comment-221090971\" class=\"permalink\"><time datetime=\"2009-07-21T14:36:04\">2009-07-21T14:36:04</time></a>\n</div>\n<div class=\"content\"><p>Excellent demos of the new features.</p>\n<p>When using a feedback image on a zoomed in page, should the image not also be scaled up automatically?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090973\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"https://bugzilla.mozilla.org/show_bug.cgi?id=41708\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6d3bf986abdbb431991c3b02eb6e2335&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"https://bugzilla.mozilla.org/show_bug.cgi?id=41708\">RenegadeX</a>\n</div>\n<a href=\"#comment-221090973\" class=\"permalink\"><time datetime=\"2009-07-22T04:13:46\">2009-07-22T04:13:46</time></a>\n</div>\n<div class=\"content\"><p>Dragging &amp; dropping <em>is</em> as you say, a \"one of the most fundamental interations\" that users of computer graphical interfaces have come to know, and expect.</p>\n<p>It therefore completes dumbfounds me how it is that we <em>still</em> can not natively drag &amp; scroll (&amp; then drop) in Firefox. We can only drag &amp; drop an item within the currently visible portion of a Firefox webpage or tab, no further up, no further down.</p>\n<p>That is should be limited makes absolutely no sense. Microsoft built the function into their Windows 3.x (file) Explorer, and then when visual browsers came along, naturally carried it through into Internet Explorer. </p>\n<p>Firefox Bug 41708, \"Should be able to scroll in the viewport while dragging\" was opened in June, 2000 (yes, 9 years ago!) and remains open, and is disregarded by Firefox developers as little more than a trivial little annoyance, and therefore is and should be treated as a low-importance 'enhancement' rather than as the 'standard feature' it should really be.</p>\n<p>If it weren't for the extension 'DragToScroll', which has been around for 3-1/2 years now (not updated in a long time but still works if you override version compatibility), I would have dumped Firefox and switched to a different browser (Maxthon 3, most likely).</p>\n<p>So, I'm wondering (and hoping) -- does the new HTML5 drag and drop specification include anything that if implemented properly would make it possible to scroll &amp; drag?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090974\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221090974\" class=\"permalink\"><time datetime=\"2009-07-22T13:57:42\">2009-07-22T13:57:42</time></a>\n</div>\n<div class=\"content\"><p>@RenegadeX: Ugh.  I don't work on the browser itself, but I noticed that unexpected behavior on drag &amp; drop.  The window really should scroll when you get toward the top or bottom while dragging - and, in fact, most pre-HTML5 JS frameworks do that in their own drag &amp; drop abstractions.  </p>\n<p>Until / unless Firefox gets this fixed, the same sort of auto-scrolling could be hacked in to HTML5 drag and drop.  Not perfect, but it's doable.  That is, in the drag event, you can check if the mouse is near the upper or lower edge of the viewport - and if so, start scrolling appropriately. That's pretty much how the JS frameworks do it with old-school D&D</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090975\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.copperbot.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=df48b2c2a3a2be51b1e15f10c5fb05da&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.copperbot.net\">CopperBot</a>\n</div>\n<a href=\"#comment-221090975\" class=\"permalink\"><time datetime=\"2009-07-23T21:41:07\">2009-07-23T21:41:07</time></a>\n</div>\n<div class=\"content\"><p>Very cool article! Thanks for sharing. HTML5 really is going to change everything about how we use and develop for the web. Pretty awesome!</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090976\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.AmnesiaGames.cl\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=14ad888c23e28c85c222a73b6c633570&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.AmnesiaGames.cl\">Alexos</a>\n</div>\n<a href=\"#comment-221090976\" class=\"permalink\"><time datetime=\"2009-07-26T05:05:44\">2009-07-26T05:05:44</time></a>\n</div>\n<div class=\"content\"><p>Hi, would DD work for uploading files? How can I display a progress bar?\nThanks! \nI've been looking for that several days, and found only applets which I can't use in my proyect :-)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090977\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.sjlwebdesign.co.uk\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=185cd965e0e8ccd15df2f90977cbeaf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.sjlwebdesign.co.uk\">Sam</a>\n</div>\n<a href=\"#comment-221090977\" class=\"permalink\"><time datetime=\"2009-07-28T13:54:26\">2009-07-28T13:54:26</time></a>\n</div>\n<div class=\"content\"><p>Looks fantastic, going to try it out now (once I have upgraded my FF)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090978\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.dankantor.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=60fc8331f617fc905fd682bc4f41ce8d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.dankantor.com\">Dan Kantor</a>\n</div>\n<a href=\"#comment-221090978\" class=\"permalink\"><time datetime=\"2009-07-30T03:10:25\">2009-07-30T03:10:25</time></a>\n</div>\n<div class=\"content\"><p>Looks like effectAllowed and dropEffect are not working for FF 3.5 on the Mac. I see effects on Windows and Safari 4 on Mac. I've been playing around with adding borders to the drop target, but the + icon for copy really helps a lot. Hopefully Mozilla will fix this next update.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090979\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.thecssninja.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8677c9f7c0f6d947bf318c1430d00bfd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.thecssninja.com/\">Ryan</a>\n</div>\n<a href=\"#comment-221090979\" class=\"permalink\"><time datetime=\"2009-09-01T02:33:06\">2009-09-01T02:33:06</time></a>\n</div>\n<div class=\"content\"><p>Great article it's good to see developments in this area. I wrote an article on the further extensions Firefox 3.6 has done with the dataTransfer method by adding the file attribute so you can access local files and upload them without the need for file inputs. http://www.thecssninja.com/javascript/drag-and-drop-upload</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090982\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1ed4bbef573bfc014d32356d53103ca2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">phil swenson</a>\n</div>\n<a href=\"#comment-221090982\" class=\"permalink\"><time datetime=\"2009-09-03T22:58:36\">2009-09-03T22:58:36</time></a>\n</div>\n<div class=\"content\"><p>Why not a first class WYSIWYG rich text editor with copy from clipboard image support?  </p>\n<p><em>NO ONE</em> has built a decent text editor in JavaScript - At least not that I've seen.  And browsers don't allow image paste for reasons I don't understand.  </p>\n<p>And by decent I mean just like you'd get in textmate or another editor.  Have the standard text editor features everyone expects:  tab, select indent/select unindent, resize image, home, end, duplicate line, delete line, styling, etc.</p>\n<p>would push the browser to the next level in killing the desktop.  non-techies hate wikis.  They want a real editor.  I do too actually.... would be great for forums, bug tracking system (imagine pasting screen shots in line with your bug desc), email, etc.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090983\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=deed51cddc830e162557b8f01383a057&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Jean-Denis</a>\n</div>\n<a href=\"#comment-221090983\" class=\"permalink\"><time datetime=\"2009-09-04T00:23:39\">2009-09-04T00:23:39</time></a>\n</div>\n<div class=\"content\"><p>Francisco Tomalski wrote up a nice piece on HTML 5 drag'n drop at http://www.alertdebugging.com/2009/08/16/on-html-5-drag-and-drop/</p>\n<p>where he uncovers that the proposed standard is partially broken. Any comment on his piece?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090984\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://html5tutorial.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3876e030a3fc69a8b59a8c55829fb510&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://html5tutorial.net/\">Lisa</a>\n</div>\n<a href=\"#comment-221090984\" class=\"permalink\"><time datetime=\"2009-09-09T07:33:08\">2009-09-09T07:33:08</time></a>\n</div>\n<div class=\"content\"><p>This is a great move forward no more relying on 3rd party apps and extensions to play video or audio, i have been reading up on HTML 5 at the <a href=\"http://html5tutorial.net/\" title=\"HTML tutorials\" rel=\"nofollow\">HTML 5 Tutorials</a> website, i am now playing around with one of the free templates and was wondering how to embed audio, so thanks a lot, great information, lets hope more people lean towards HTML 5 and SOON!!!</p>\n<p>The drag and drop feature i did not notice was already working in FF 3.5, i was told to get Safari to see HTML 5 in action. Thanks for a great post</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090985\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.useragentman.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=9a579fa051b35266678735c8a3751771&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.useragentman.com\">Zoltan Hawryluk</a>\n</div>\n<a href=\"#comment-221090985\" class=\"permalink\"><time datetime=\"2010-01-11T15:14:48\">2010-01-11T15:14:48</time></a>\n</div>\n<div class=\"content\"><p>A million thank yous!  This article was great introduction to HTML5 D+D.  With it, I was able to extend it to other browsers.  It was a little painful at first because the browser implementations diverge in significant, but manageable ways.</p>\n<p>If you are interested, check out my article at http://www.useragentman.com/blog/2010/01/10/cross-browser-html5-drag-and-drop/ if you are interested in my results.</p>\n<p>I noticed you haven't blogged in a while - I hope you haven't stopped totally and continue to share with the webdev community.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221090986\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.lingua-franka.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e65f416e42c12571ba1c86ae2dadd99f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.lingua-franka.com\">Raul</a>\n</div>\n<a href=\"#comment-221090986\" class=\"permalink\"><time datetime=\"2011-04-26T23:56:02\">2011-04-26T23:56:02</time></a>\n</div>\n<div class=\"content\"><p>Hi, Leslie. I've just come across a problem that's driving me nuts. I'm not fully comfortable with D&amp;D, but managed to move a crosshairs image over a map to very precisely controlled positions. It worked great on FF 3.6 and FF 4. After a couple of days of successful testing, the image suddenly refused to de dropped after being dragged (it rather flew back to its previous position). Do you know if there is a bug in FF that might cause this? </p>\n<p>BTW, during the programming process I updated Firebug, which also is getting a little cranky.</p>\n<p>Thanks for your prompt answer, Raul</p></div>\n</li>\n<li class=\"comment\" id=\"comment-324410737\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://disqus.com/api/users/avatars/google-4014af7ac4ea5d00df95bef4503b78dd.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Alexander Plutov</a>\n</div>\n<a href=\"#comment-324410737\" class=\"permalink\"><time datetime=\"2011-10-01T11:51:12\">2011-10-01T11:51:12</time></a>\n</div>\n<div class=\"content\">Good post about Drag & Drop http://plutov.by/post/html5_drag_and_drop</div>\n</li>\n</ul>\n</div>\n",
    "body": "<p><i>\r\nOh hey, look! It's another blog post—and this one\r\n<a href=\"http://hacks.mozilla.org/2009/07/html5-drag-and-drop/\">is cross-posted on hacks.mozilla.com</a>.\r\nI won't say this is the start of a renewed blogging habit, but let's see what happens.\r\n</i></p>\r\n\r\n<style type=\"text/css\">\r\ndl { margin-left: 2em; }\r\ndd { margin-left: 2em; margin-bottom: 0.25em; }\r\n</style>\r\n<div id=\"introduction\">\r\n    <p>\r\n        Drag and drop is one of the most fundamental interactions\r\n        afforded by graphical user interfaces.  In one gesture, it\r\n        allows users to pair the selection of an object with the\r\n        execution of an action, often including a second object in the\r\n        operation.  It's a simple yet powerful UI concept used to\r\n        support copying, list reordering, deletion (ala the Trash / Recycle Bin),\r\n        and even the creation of link relationships.\r\n    </p><p>\r\n        Since it's so fundamental, offering drag and drop in web\r\n        applications has been a no-brainer ever since browsers first\r\n        offered mouse events in DHTML.  But, although\r\n        <code>mousedown</code>, <code>mousemove</code>, and\r\n        <code>mouseup</code> made it possible, the implementation has been\r\n        limited to the bounds of the browser window.  Additionally,\r\n        since these events refer only to the object being dragged,\r\n        there's a challenge to find the subject of the drop when\r\n        the interaction is completed.\r\n    </p><p>\r\n\r\n        Of course, that doesn't prevent most modern JavaScript\r\n        frameworks from abstracting away most of the problems and\r\n        throwing in some flourishes while they're at it.  But, wouldn't\r\n        it be nice if browsers offered first-class support for drag and\r\n        drop, and maybe even extended it beyond the window sandbox?\r\n    </p><p>\r\n        As it turns out, this very wish is answered by the HTML 5 specification \r\n        <a target=\"_new\" href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#dnd\">section on new drag-and-drop events</a>, and \r\n        <a target=\"_new\" href=\"https://developer.mozilla.org/En/DragDrop/Drag_and_Drop\">Firefox 3.5 includes an implementation</a> of those events.\r\n    </p><p>\r\n        If you want to jump straight to the code, I've put together \r\n        <a target=\"_new\" target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html\">some simple demos</a> \r\n        of the new events.  \r\n    </p><p>\r\n\r\n        I've even scratched an itch of my own and\r\n        built <a target=\"_new\" target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/outline.html\">the beginnings of an outline editor</a>,\r\n        where every draggable element is also a drop target—of which\r\n        there could be dozens to hundreds in a complex document, something\r\n        that gave me some minor hair-tearing moments in the past\r\n        while trying to make do with plain old mouse events.\r\n    </p><p>\r\n        And, all the above can be downloaded or cloned from \r\n        <a href=\"http://github.com/lmorchard/fx35-drag-and-drop\">a GitHub repository</a>\r\n        I've created especially for this article—which continues after the jump.\r\n    </p>\r\n</div>\r\n\r\n<!--more-->\r\n\r\n<div id=\"events\">\r\n\r\n    <h2>The New Drag and Drop Events</h2>\r\n    <p>\r\n        So, with no further ado, here are the new drag and drop events,\r\n        in roughly the order you might expect to see them fired:\r\n    </p>\r\n    <dl>\r\n        <dt><code>dragstart</code></dt>\r\n        <dd>\r\n            A drag has been initiated, with the dragged element as the\r\n            event target.\r\n        </dd>\r\n\r\n        <dt><code>drag</code></dt>\r\n        <dd>\r\n            The mouse has moved, with the dragged element as the event target.\r\n        </dd>\r\n        <dt><code>dragenter</code></dt>\r\n        <dd>\r\n            The dragged element has been moved into a drop listener,\r\n            with the drop listener element as the event target.\r\n        </dd>\r\n        <dt><code>dragover</code></dt>\r\n\r\n        <dd>\r\n            The dragged element has been moved over a drop listener,\r\n            with the drop listener element as the event target.  Since\r\n            the default behavior is to cancel drops, returning\r\n            <code>false</code> or calling <code>preventDefault()</code> in\r\n            the event handler indicates that a drop is allowed here.\r\n        </dd>\r\n        <dt><code>dragleave</code></dt>\r\n        <dd>\r\n            The dragged element has been moved out of a drop listener,\r\n            with the drop listener element as the event target.\r\n        </dd>\r\n\r\n        <dt><code>drop</code></dt>\r\n        <dd>\r\n            The dragged element has been successfully dropped on a drop\r\n            listener, with the drop listener element as the event\r\n            target.\r\n        </dd>\r\n        <dt><code>dragend</code></dt>\r\n        <dd>\r\n            A drag has been ended, successfully or not, with the\r\n            dragged element as the event target.\r\n        </dd>\r\n    </dl>\r\n\r\n    <p>\r\n        Like the mouse events of yore, listeners can be attached to\r\n        elements using <code>addEventListener()</code> \r\n        directly or by way of your favorite JS library.  \r\n    </p><p>\r\n        Consider the following example using jQuery, \r\n        <a target=\"_new\" target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#newschool\">also available as a live demo</a>:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\n<div id=\"newschool\">\r\n    <div class=\"dragme\">Drag me!</div>\r\n    <div class=\"drophere\">Drop here!</div>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n    $(document).ready(function() {\r\n        $('#newschool .dragme')\r\n            .attr('draggable', 'true')\r\n            .bind('dragstart', function(ev) {\r\n                var dt = ev.originalEvent.dataTransfer;\r\n                dt.setData(\"Text\", \"Dropped in zone!\");\r\n                return true;\r\n            })\r\n            .bind('dragend', function(ev) {\r\n                return false;\r\n            });\r\n        $('#newschool .drophere')\r\n            .bind('dragenter', function(ev) {\r\n                $(ev.target).addClass('dragover');\r\n                return false;\r\n            })\r\n            .bind('dragleave', function(ev) {\r\n                $(ev.target).removeClass('dragover');\r\n                return false;\r\n            })\r\n            .bind('dragover', function(ev) {\r\n                return false;\r\n            })\r\n            .bind('drop', function(ev) {\r\n                var dt = ev.originalEvent.dataTransfer;\r\n                alert(dt.getData('Text'));\r\n                return false;\r\n            });\r\n    });\r\n</script>\r\n    </pre>\r\n    <p>\r\n        Thanks to the new events and jQuery, this example is both short\r\n        and simple—but it packs in a lot of functionality, as the rest\r\n        of this article will explain.  \r\n    </p><p>\r\n        Before moving on, there are at least three things about the above\r\n        code that are worth mentioning:\r\n    </p>\r\n    <ul>\r\n        <li>\r\n\r\n            <p>\r\n                Drop targets are enabled by virtue of having\r\n                listeners for drop events.  But, \r\n                <a target=\"_new\" href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#drag-and-drop-processing-model\">per the HTML 5 spec</a>,\r\n                draggable elements need an\r\n                attribute of <code>draggable=\"true\"</code>, set either in\r\n                markup or in JavaScript.  \r\n            </p>\r\n            <p>\r\n                Thus, <code>$('#newschool&nbsp;.dragme').attr('draggable', 'true')</code>.\r\n            </p>\r\n\r\n        </li>\r\n        <li>\r\n            <p>\r\n                The original DOM event (as opposed to jQuery's event\r\n                wrapper) offers a property called <code>dataTransfer</code>.\r\n                Beyond just manipulating elements, the new drag and drop\r\n                events accomodate the transmission of user-definable data\r\n                during the course of the interaction.  \r\n            </p>\r\n        </li>\r\n        <li>\r\n            <p>\r\n\r\n                Since these are first-class events, you can apply \r\n                <a target=\"_new\" href=\"http://icant.co.uk/sandbox/eventdelegation/\">the technique of Event Delegation</a>.\r\n            </p><p>\r\n                What's that?  Well, imagine you have a list of 1000\r\n                list items—as part of a deeply-nested outline document,\r\n                for instance.  Rather than needing to attach listeners\r\n                or otherwise fiddle with all 1000 items, simply attach\r\n                a listener to the parent node (eg. the\r\n                <code><ul></code> element) and all events from\r\n                the children will propagate up to the single parent listener.\r\n                As a bonus, all new child elements added after page\r\n                load will enjoy the same benefits.\r\n            </p><p>\r\n                <a target=\"_new\" target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#delegated\">Check out this demo</a>, \r\n                and \r\n                <a target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/js/drag-delegated.js\">the associated JS code</a> \r\n                to see more about these events and Event Delegation.\r\n            </p>\r\n\r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n<div id=\"datatransfer\">\r\n    <h2>Using dataTransfer</h2>\r\n    <p>\r\n        As mentioned in the last section, the new drag and drop events\r\n        let you send data along with a dragged element.  But, it's even\r\n        better than that:  Your drop targets can receive data\r\n        transferred by content objects dragged into the window from \r\n        other browser windows, and even <i>other applications</i>.\r\n    </p><p>\r\n\r\n        Since the example is a bit longer,  \r\n        <a target=\"_new\" target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#data_transfer\">check out the live demo</a>\r\n        and \r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/js/drag-datatransfer.js\">associated code</a>\r\n        to get an idea of what's possible with <code>dataTransfer</code>.\r\n    </p><p>\r\n        In a nutshell, the stars of this show are the\r\n        <code>setData()</code> and <code>getData()</code> methods of\r\n        the <code>dataTransfer</code> property exposed by the Event object.\r\n    </p>\r\n\r\n    <p>\r\n        The <code>setData()</code> method is typically called in the \r\n        <code>dragstart</code> listener, loading <code>dataTransfer</code>\r\n        up with one or more strings of content with associated\r\n        <a href=\"https://developer.mozilla.org/En/DragDrop/Recommended_Drag_Types#link\">recommended content types</a>.\r\n    </p>\r\n\r\n    <p>\r\n        For illustration, here's a quick snippet from the example code:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;    \r\ndt.setData('text/plain', $('#logo').parent().text());\r\ndt.setData('text/html', $('#logo').parent().html());\r\ndt.setData('text/uri-list', $('#logo')[0].src);\r\n    </pre>\r\n    </p><p>\r\n        On the other end, <code>getData()</code> allows you to query\r\n        for content by type (eg. <code>text/html</code> followed by\r\n        <code>text/plain</code>).  This, in turn, allows you to decide\r\n        on acceptable content types at the time of the\r\n        <code>drop</code> event or even during <code>dragover</code>\r\n\r\n        to offer feedback for unacceptable types during the drag.\r\n    </p><p>\r\n        Here's another example from the receiving end of the example code:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;    \r\n$('.content_url .content').text(dt.getData('text/uri-list'));\r\n$('.content_text .content').text(dt.getData('text/plain'));\r\n$('.content_html .content').html(dt.getData('text/html'));\r\n    </pre>\r\n    <p>\r\n        Where <code>dataTransfer</code> really shines, though, is that\r\n        it allows your drop targets to receive content from \r\n        sources outside your defined draggable elements and even from\r\n        outside the browser altogether.  Firefox accepts such drags, \r\n        and attempts to populate <code>dataTransfer</code> with\r\n        appropriate content types extracted from the external object.\r\n    </p><p>\r\n\r\n        Thus, you could select some text in a word processor window and\r\n        drop it into one of your elements, and at least expect to find\r\n        it available as <code>text/plain</code> content.  \r\n    </p><p>\r\n        You can also select content in \r\n        another browser window, and expect to see <code>text/html</code>\r\n        appear in your events.  Check out the \r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/outline.html\">outline editing demo</a>\r\n        and see what happens when you try dragging various elements \r\n        (eg. images, tables, and lists) and highlighted content from\r\n        other windows onto the items there.\r\n    </p>\r\n\r\n</div>\r\n\r\n<div id=\"dragfeedback\">\r\n    <h2>Using Drag Feedback Images</h2>\r\n    <p>\r\n       An important aspect of the drag and drop interaction is a\r\n       representation of the thing being dragged.  By default in\r\n       Firefox, this is a \"ghost\" image of the dragged element itself.  But,\r\n       the <code>dataTransfer</code> property of the original Event\r\n       object exposes the method <code>setDragImage()</code> for use\r\n       in customizing this representation.\r\n    </p><p>\r\n\r\n        There's\r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#feedback_image\">a live demo</a> of this feature, as well as\r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/js/drag-feedback-images.js\">associated JS code</a> \r\n        available.  The gist, however, is sketched out in these code snippets:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;    \r\n\r\ndt.setDragImage( $('#feedback_image h2')[0], 0, 0);\r\n\r\ndt.setDragImage( $('#logo')[0], 32, 32); \r\n\r\nvar canvas = document.createElement(\"canvas\");\r\ncanvas.width = canvas.height = 50;\r\n\r\nvar ctx = canvas.getContext(\"2d\");\r\nctx.lineWidth = 8;\r\nctx.moveTo(25,0);\r\nctx.lineTo(50, 50);\r\nctx.lineTo(0, 50);\r\nctx.lineTo(25, 0);\r\nctx.stroke();\r\n\r\ndt.setDragImage(canvas, 25, 25);\r\n    </pre>\r\n    <p>\r\n        You can supply a DOM node as the first parameter to \r\n        <code>setDragImage()</code>, which includes everything from\r\n        text to images to <code>canvas</code> elements.  The\r\n        second two parameters indicate at what left and top offset\r\n        the mouse should appear in the image while dragging.\r\n    </p><p>\r\n\r\n        For example, since the <code>#logo</code> image is 64x64,\r\n        the parameters in the second <code>setDragImage()</code>\r\n        method places the mouse right in the center of the image.\r\n        On the other hand, the first call positions the feedback\r\n        image such that the mouse rests in the upper left corner.\r\n    </p><p>\r\n    </p>\r\n</div>\r\n\r\n<div id=\"dragfeedback\">\r\n\r\n    <h2>Using Drop Effects</h2>\r\n    <p>\r\n        As mentioned at the start of this article, the drag and drop\r\n        interaction has been used to support actions such as copying,\r\n        moving, and linking.  Accordingly, the HTML 5 specification \r\n        accomodates these operations in the form of the \r\n        <code>effectAllowed</code> and <code>dropEffect</code>\r\n        properties exposed by the Event object.\r\n    </p>\r\n    <p>\r\n\r\n        For a quick fix, check out the\r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#drag_effects\">a live demo</a> \r\n        of this feature, as well as the\r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/js/drag-effects.js\">associated JS code</a>.\r\n    </p><p>\r\n        The basic idea is that the <code>dragstart</code> event\r\n        listener can set a value for <code>effectAllowed</code> like so:\r\n    </p>\r\n\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;\r\nswitch (ev.target.id) {\r\n    case 'effectdrag0': dt.effectAllowed = 'copy'; break;\r\n    case 'effectdrag1': dt.effectAllowed = 'move'; break;\r\n    case 'effectdrag2': dt.effectAllowed = 'link'; break;\r\n    case 'effectdrag3': dt.effectAllowed = 'all'; break;\r\n    case 'effectdrag4': dt.effectAllowed = 'none'; break;\r\n}\r\n    </pre>\r\n    <p>The choices available for this property include the following:</p>\r\n    <dl> \r\n        <dt><code>none</code></dt><dd>no operation is permitted </dd>\r\n        <dt><code>copy</code></dt><dd>copy only </dd>\r\n\r\n        <dt><code>move</code></dt><dd>move only </dd>\r\n        <dt><code>link</code></dt><dd>link only </dd>\r\n        <dt><code>copyMove</code></dt><dd>copy or move only </dd>\r\n        <dt><code>copyLink</code></dt><dd>copy or link only </dd>\r\n        <dt><code>linkMove</code></dt><dd>link or move only </dd>\r\n\r\n        <dt><code>all</code></dt><dd>copy, move, or link </dd>\r\n    </dl>\r\n    <p>\r\n        On the other end, the <code>dragover</code> event listener \r\n        can set the value of the\r\n        <code>dropEffect</code> property to indicate the expected effect\r\n        invoked on a successful drop.  If the value does\r\n        not match up with <code>effectAllowed</code>, the drop will\r\n        be considered cancelled on completion.\r\n    </p><p>\r\n\r\n        In the \r\n        <a target=\"_new\" href=\"http://decafbad.com/2009/07/drag-and-drop/api-demos.html#drag_effects\">a live demo</a>,\r\n        you should be able to see that only elements with matching\r\n        effects can be dropped into the appropriate drop zones.  This\r\n        is accomplished with code like the following:\r\n    </p>\r\n    <pre lang=\"javascript\" line=\"1\">\r\nvar dt = ev.originalEvent.dataTransfer;\r\nswitch (ev.target.id) {\r\n    case 'effectdrop0': dt.dropEffect = 'copy'; break;\r\n    case 'effectdrop1': dt.dropEffect = 'move'; break;\r\n    case 'effectdrop2': dt.dropEffect = 'link'; break;\r\n    case 'effectdrop3': dt.dropEffect = 'all'; break;\r\n    case 'effectdrop4': dt.dropEffect = 'none'; break;\r\n}\r\n    </pre>\r\n    <p>\r\n        Although the OS itself can provide some feedback, you \r\n        can also use these properties to update your own visible \r\n        feedback, both on the dragged element and on the drop zone\r\n        itself.\r\n    </p>\r\n\r\n</div>\r\n\r\n<div id=\"conclusion\">\r\n    <h2>Conclusion</h2>\r\n    <p>\r\n        The new first-class drag and drop events in HTML5 and Firefox\r\n        make supporting this form of UI interaction simple, concise,\r\n        and powerful in the browser.  But beyond the new simplicity of\r\n        these events, the ability to transfer content between\r\n        applications opens brand new avenues for web-based applications\r\n        and collaboration with desktop software in general.\r\n    </p><p>\r\n    </p><p>\r\n    </p>\r\n</div>\r\n\r\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221090962\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://lmframework.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=03dc722b1852367f02b0b21f02b10675&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://lmframework.com\">David Semeria</a>\n                </div>\n                <a href=\"#comment-221090962\" class=\"permalink\"><time datetime=\"2009-07-16T17:56:52\">2009-07-16T17:56:52</time></a>\n            </div>\n            <div class=\"content\"><p>Wow - thanks for a great introduction to D+D in HTML 5, I'm really looking forward to giving it a thorough road test. </p>\n\n<p>The key part of the implementation are the target listeners, because, as I'm sure you're aware, onmouseover would historically never fire over the target element because the dragged item would always 'cover it up'. BTW, my proposed solution was to add an 'event transparency' property, which would have made the dragged item invisible from the point of view of selected events, eg onmouseover.</p>\n\n<p>This implementation is going to take a lot of pain away. You have no idea how many hoops I had to jump through to get a fully generic D+D implementation working without these new calls.</p>\n\n<p>If you're interested, you can see it working here: http://lmframework.com/page.php?id=vd_twig_short_2</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090964\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=cee7ac3f63d7e8c1367e170bec302c14&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Alex</a>\n                </div>\n                <a href=\"#comment-221090964\" class=\"permalink\"><time datetime=\"2009-07-17T00:13:23\">2009-07-17T00:13:23</time></a>\n            </div>\n            <div class=\"content\"><p>Hey,</p>\n\n<p>Looks great and useful article.  For dragging from external applications (such as the Desktop) is a normal webpage able to get the data from the drop?  I was just playing with it and seem to always get what seems to be a security error with getData or mozGetDataAt.  However, the documentation seems to state that on drop that data should be made available to the page.  Likewise, in the same way an image can be dragged off the page onto the desktop, can an arbitrary element be dragged onto the desktop with whatever file content to be saved?  Thanks for the help.</p>\n\n<p>Alex</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090966\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://paulisageek.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=b3bb70a4bace7f9bd49f48b149ab95f9&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://paulisageek.com/\">Paul Tarjan</a>\n                </div>\n                <a href=\"#comment-221090966\" class=\"permalink\"><time datetime=\"2009-07-17T04:52:54\">2009-07-17T04:52:54</time></a>\n            </div>\n            <div class=\"content\"><p>Very nice, I didn't know that FF 3.5 actually had this implemented. Time to start playing :)</p>\n\n<p>Also, how did you do your code posts? Was it just pasting in HTML or do you have a better setup?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090967\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=066d1e75c9b938053ee6b3d48b1c0f6a&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Animal</a>\n                </div>\n                <a href=\"#comment-221090967\" class=\"permalink\"><time datetime=\"2009-07-17T14:35:21\">2009-07-17T14:35:21</time></a>\n            </div>\n            <div class=\"content\"><p>Seems pretty pointless pressing ahead with this when you just can't write a web app to use it. There's no support. All a bunch of whizzy fun I'm sure, but sod-all use.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090969\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221090969\" class=\"permalink\"><time datetime=\"2009-07-17T16:23:10\">2009-07-17T16:23:10</time></a>\n            </div>\n            <div class=\"content\"><p>@Animal: Why can't you write a web app to use it?  It's in the HTML5 spec, works in Fx3.5 and Safari 4 / WebKit.  It doesn't have universal support yet, or course, but new standards never do.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090970\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.crearedesign.co.uk\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=87bf21798e390d9043dda7240c1b60f7&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.crearedesign.co.uk\">paul</a>\n                </div>\n                <a href=\"#comment-221090970\" class=\"permalink\"><time datetime=\"2009-07-21T08:08:26\">2009-07-21T08:08:26</time></a>\n            </div>\n            <div class=\"content\"><p>very nice indeed! i like this, it has definitely opened up new avenues for interaction without using flash. but it will take time before people upgrade to the new browser. a lot of people who browse the web wont realise what the technology will bring and will use their current browser because it does the job!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090971\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=04de859cfd6ef0b75e4ea3cbea143190&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Joel</a>\n                </div>\n                <a href=\"#comment-221090971\" class=\"permalink\"><time datetime=\"2009-07-21T14:36:04\">2009-07-21T14:36:04</time></a>\n            </div>\n            <div class=\"content\"><p>Excellent demos of the new features.</p>\n\n<p>When using a feedback image on a zoomed in page, should the image not also be scaled up automatically?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090973\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=41708\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=6d3bf986abdbb431991c3b02eb6e2335&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=41708\">RenegadeX</a>\n                </div>\n                <a href=\"#comment-221090973\" class=\"permalink\"><time datetime=\"2009-07-22T04:13:46\">2009-07-22T04:13:46</time></a>\n            </div>\n            <div class=\"content\"><p>Dragging &amp; dropping <em>is</em> as you say, a \"one of the most fundamental interations\" that users of computer graphical interfaces have come to know, and expect.</p>\n\n<p>It therefore completes dumbfounds me how it is that we <em>still</em> can not natively drag &amp; scroll (&amp; then drop) in Firefox. We can only drag &amp; drop an item within the currently visible portion of a Firefox webpage or tab, no further up, no further down.</p>\n\n<p>That is should be limited makes absolutely no sense. Microsoft built the function into their Windows 3.x (file) Explorer, and then when visual browsers came along, naturally carried it through into Internet Explorer. </p>\n\n<p>Firefox Bug 41708, \"Should be able to scroll in the viewport while dragging\" was opened in June, 2000 (yes, 9 years ago!) and remains open, and is disregarded by Firefox developers as little more than a trivial little annoyance, and therefore is and should be treated as a low-importance 'enhancement' rather than as the 'standard feature' it should really be.</p>\n\n<p>If it weren't for the extension 'DragToScroll', which has been around for 3-1/2 years now (not updated in a long time but still works if you override version compatibility), I would have dumped Firefox and switched to a different browser (Maxthon 3, most likely).</p>\n\n<p>So, I'm wondering (and hoping) -- does the new HTML5 drag and drop specification include anything that if implemented properly would make it possible to scroll &amp; drag?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090974\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221090974\" class=\"permalink\"><time datetime=\"2009-07-22T13:57:42\">2009-07-22T13:57:42</time></a>\n            </div>\n            <div class=\"content\"><p>@RenegadeX: Ugh.  I don't work on the browser itself, but I noticed that unexpected behavior on drag &amp; drop.  The window really should scroll when you get toward the top or bottom while dragging - and, in fact, most pre-HTML5 JS frameworks do that in their own drag &amp; drop abstractions.  </p>\n\n<p>Until / unless Firefox gets this fixed, the same sort of auto-scrolling could be hacked in to HTML5 drag and drop.  Not perfect, but it's doable.  That is, in the drag event, you can check if the mouse is near the upper or lower edge of the viewport - and if so, start scrolling appropriately. That's pretty much how the JS frameworks do it with old-school D&D</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090975\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.copperbot.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=df48b2c2a3a2be51b1e15f10c5fb05da&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.copperbot.net\">CopperBot</a>\n                </div>\n                <a href=\"#comment-221090975\" class=\"permalink\"><time datetime=\"2009-07-23T21:41:07\">2009-07-23T21:41:07</time></a>\n            </div>\n            <div class=\"content\"><p>Very cool article! Thanks for sharing. HTML5 really is going to change everything about how we use and develop for the web. Pretty awesome!</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090976\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.AmnesiaGames.cl\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=14ad888c23e28c85c222a73b6c633570&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.AmnesiaGames.cl\">Alexos</a>\n                </div>\n                <a href=\"#comment-221090976\" class=\"permalink\"><time datetime=\"2009-07-26T05:05:44\">2009-07-26T05:05:44</time></a>\n            </div>\n            <div class=\"content\"><p>Hi, would DD work for uploading files? How can I display a progress bar?\nThanks! \nI've been looking for that several days, and found only applets which I can't use in my proyect :-)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090977\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.sjlwebdesign.co.uk\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=185cd965e0e8ccd15df2f90977cbeaf3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.sjlwebdesign.co.uk\">Sam</a>\n                </div>\n                <a href=\"#comment-221090977\" class=\"permalink\"><time datetime=\"2009-07-28T13:54:26\">2009-07-28T13:54:26</time></a>\n            </div>\n            <div class=\"content\"><p>Looks fantastic, going to try it out now (once I have upgraded my FF)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090978\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.dankantor.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=60fc8331f617fc905fd682bc4f41ce8d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.dankantor.com\">Dan Kantor</a>\n                </div>\n                <a href=\"#comment-221090978\" class=\"permalink\"><time datetime=\"2009-07-30T03:10:25\">2009-07-30T03:10:25</time></a>\n            </div>\n            <div class=\"content\"><p>Looks like effectAllowed and dropEffect are not working for FF 3.5 on the Mac. I see effects on Windows and Safari 4 on Mac. I've been playing around with adding borders to the drop target, but the + icon for copy really helps a lot. Hopefully Mozilla will fix this next update.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090979\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.thecssninja.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8677c9f7c0f6d947bf318c1430d00bfd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.thecssninja.com/\">Ryan</a>\n                </div>\n                <a href=\"#comment-221090979\" class=\"permalink\"><time datetime=\"2009-09-01T02:33:06\">2009-09-01T02:33:06</time></a>\n            </div>\n            <div class=\"content\"><p>Great article it's good to see developments in this area. I wrote an article on the further extensions Firefox 3.6 has done with the dataTransfer method by adding the file attribute so you can access local files and upload them without the need for file inputs. http://www.thecssninja.com/javascript/drag-and-drop-upload</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090982\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=1ed4bbef573bfc014d32356d53103ca2&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">phil swenson</a>\n                </div>\n                <a href=\"#comment-221090982\" class=\"permalink\"><time datetime=\"2009-09-03T22:58:36\">2009-09-03T22:58:36</time></a>\n            </div>\n            <div class=\"content\"><p>Why not a first class WYSIWYG rich text editor with copy from clipboard image support?  </p>\n\n<p><em>NO ONE</em> has built a decent text editor in JavaScript - At least not that I've seen.  And browsers don't allow image paste for reasons I don't understand.  </p>\n\n<p>And by decent I mean just like you'd get in textmate or another editor.  Have the standard text editor features everyone expects:  tab, select indent/select unindent, resize image, home, end, duplicate line, delete line, styling, etc.</p>\n\n<p>would push the browser to the next level in killing the desktop.  non-techies hate wikis.  They want a real editor.  I do too actually.... would be great for forums, bug tracking system (imagine pasting screen shots in line with your bug desc), email, etc.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090983\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=deed51cddc830e162557b8f01383a057&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Jean-Denis</a>\n                </div>\n                <a href=\"#comment-221090983\" class=\"permalink\"><time datetime=\"2009-09-04T00:23:39\">2009-09-04T00:23:39</time></a>\n            </div>\n            <div class=\"content\"><p>Francisco Tomalski wrote up a nice piece on HTML 5 drag'n drop at http://www.alertdebugging.com/2009/08/16/on-html-5-drag-and-drop/</p>\n\n<p>where he uncovers that the proposed standard is partially broken. Any comment on his piece?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090984\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://html5tutorial.net/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=3876e030a3fc69a8b59a8c55829fb510&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://html5tutorial.net/\">Lisa</a>\n                </div>\n                <a href=\"#comment-221090984\" class=\"permalink\"><time datetime=\"2009-09-09T07:33:08\">2009-09-09T07:33:08</time></a>\n            </div>\n            <div class=\"content\"><p>This is a great move forward no more relying on 3rd party apps and extensions to play video or audio, i have been reading up on HTML 5 at the <a href=\"http://html5tutorial.net/\" title=\"HTML tutorials\" rel=\"nofollow\">HTML 5 Tutorials</a> website, i am now playing around with one of the free templates and was wondering how to embed audio, so thanks a lot, great information, lets hope more people lean towards HTML 5 and SOON!!!</p>\n\n<p>The drag and drop feature i did not notice was already working in FF 3.5, i was told to get Safari to see HTML 5 in action. Thanks for a great post</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090985\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.useragentman.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=9a579fa051b35266678735c8a3751771&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.useragentman.com\">Zoltan Hawryluk</a>\n                </div>\n                <a href=\"#comment-221090985\" class=\"permalink\"><time datetime=\"2010-01-11T15:14:48\">2010-01-11T15:14:48</time></a>\n            </div>\n            <div class=\"content\"><p>A million thank yous!  This article was great introduction to HTML5 D+D.  With it, I was able to extend it to other browsers.  It was a little painful at first because the browser implementations diverge in significant, but manageable ways.</p>\n\n<p>If you are interested, check out my article at http://www.useragentman.com/blog/2010/01/10/cross-browser-html5-drag-and-drop/ if you are interested in my results.</p>\n\n<p>I noticed you haven't blogged in a while - I hope you haven't stopped totally and continue to share with the webdev community.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221090986\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.lingua-franka.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e65f416e42c12571ba1c86ae2dadd99f&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.lingua-franka.com\">Raul</a>\n                </div>\n                <a href=\"#comment-221090986\" class=\"permalink\"><time datetime=\"2011-04-26T23:56:02\">2011-04-26T23:56:02</time></a>\n            </div>\n            <div class=\"content\"><p>Hi, Leslie. I've just come across a problem that's driving me nuts. I'm not fully comfortable with D&amp;D, but managed to move a crosshairs image over a map to very precisely controlled positions. It worked great on FF 3.6 and FF 4. After a couple of days of successful testing, the image suddenly refused to de dropped after being dragged (it rather flew back to its previous position). Do you know if there is a bug in FF that might cause this? </p>\n\n<p>BTW, during the programming process I updated Firebug, which also is getting a little cranky.</p>\n\n<p>Thanks for your prompt answer, Raul</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-324410737\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://disqus.com/api/users/avatars/google-4014af7ac4ea5d00df95bef4503b78dd.jpg\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Alexander Plutov</a>\n                </div>\n                <a href=\"#comment-324410737\" class=\"permalink\"><time datetime=\"2011-10-01T11:51:12\">2011-10-01T11:51:12</time></a>\n            </div>\n            <div class=\"content\">Good post about Drag & Drop http://plutov.by/post/html5_drag_and_drop</div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2009",
    "path": "2009/07/15/html5-drag-and-drop",
    "summary": "<p><i>\nOh hey, look! It&apos;s another blog post&#x2014;and this one\n<a href=\"http://hacks.mozilla.org/2009/07/html5-drag-and-drop/\">is cross-posted on hacks.mozilla.com</a>.\nI won&apos;t say this is the start of a renewed blogging habit, but let&apos;s see what happens.\n</i></p>\n\n<style type=\"text/css\">\ndl { margin-left: 2em; }\ndd { margin-left: 2em; margin-bottom: 0.25em; }\n</style>\n<div id=\"introduction\">\n    <p>\n        Drag and drop is one of the most fundamental interactions\n        afforded by graphical user interfaces.  In one gesture, it\n        allows users to pair the selection of an object with the\n        execution of an action, often including a second object in the\n        operation.  It&apos;s a simple yet powerful UI concept used to\n        support copying, list reordering, deletion (ala the Trash / Recycle Bin),\n        and even the creation of link relationships.\n    </p><p>\n        Since it&apos;s so fundamental, offering drag and drop in web\n        applications has been a no-brainer ever since browsers first\n        offered mouse events in DHTML.  But, although\n        <code>mousedown</code>, <code>mousemove</code>, and\n        <code>mouseup</code> made it possible, the implementation has been\n        limited to the bounds of the browser window.  Additionally,\n        since these events refer only to the object being dragged,\n        there&apos;s a challenge to find the subject of the drop when\n        the interaction is completed.\n    </p><p>\n\n</p><pre><code>    Of course, that doesn&apos;t prevent most modern JavaScript\n    frameworks from abstracting away most of the problems and\n    throwing in some flourishes while they&apos;re at it.  But, wouldn&apos;t\n    it be nice if browsers offered first-class support for drag and\n    drop, and maybe even extended it beyond the window sandbox?\n&lt;/p&gt;&lt;p&gt;\n    As it turns out, this very wish is answered by the HTML 5 specification \n    &lt;a target=&quot;_new&quot; href=&quot;http://www.whatwg.org/specs/web-apps/current-work/multipage/editing.html#dnd&quot;&gt;section on new drag-and-drop events&lt;/a&gt;, and \n    &lt;a target=&quot;_new&quot; href=&quot;https://developer.mozilla.org/En/DragDrop/Drag_and_Drop&quot;&gt;Firefox 3.5 includes an implementation&lt;/a&gt; of those events.\n&lt;/p&gt;&lt;p&gt;\n    If you want to jump straight to the code, I&apos;ve put together \n    &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/api-demos.html&quot;&gt;some simple demos&lt;/a&gt; \n    of the new events.  \n&lt;/p&gt;&lt;p&gt;\n\n    I&apos;ve even scratched an itch of my own and\n    built &lt;a target=&quot;_new&quot; target=&quot;_new&quot; target=&quot;_new&quot; href=&quot;http://decafbad.com/2009/07/drag-and-drop/outline.html&quot;&gt;the beginnings of an outline editor&lt;/a&gt;,\n    where every draggable element is also a drop target&#x2014;of which\n    there could be dozens to hundreds in a complex document, something\n    that gave me some minor hair-tearing moments in the past\n    while trying to make do with plain old mouse events.\n&lt;/p&gt;&lt;p&gt;\n    And, all the above can be downloaded or cloned from \n    &lt;a href=&quot;http://github.com/lmorchard/fx35-drag-and-drop&quot;&gt;a GitHub repository&lt;/a&gt;\n    I&apos;ve created especially for this article&#x2014;which continues after the jump.\n&lt;/p&gt;</code></pre>\n</div>\n\n"
  },
  {
    "comments_archived": true,
    "date": "2006-11-15T08:07:12.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "php",
      "outliners",
      "outlining",
      "xoxooutliner",
      "xsl",
      "xoxo",
      "xml",
      "opml"
    ],
    "title": "XoxoOutliner and further outline addressing adventures",
    "wordpress_id": 1019,
    "wordpress_slug": "xoxooutliner-and-further-outline-addressing-adventures",
    "wordpress_url": "http://decafbad.com/blog/2006/11/15/xoxooutliner-and-further-outline-addressing-adventures",
    "year": "2006",
    "month": "11",
    "day": "15",
    "isDir": false,
    "slug": "xoxooutliner-and-further-outline-addressing-adventures",
    "postName": "2006-11-15-xoxooutliner-and-further-outline-addressing-adventures",
    "html": "<p><a href=\"http://decafbad.com/trac/changeset/779\">Revised the addressing code a bit</a>, adding a few new kinds of addresses and getting ready to support sub-outline <em>updates</em>.  That is, fetch a sub-branch of an outline and then later post a change to that sub-branch using the same address.  Needs more thought - ie. what happens if things move between fetch and update? - but here are a few more samples:</p>\n<ul>\n<li>First is a straight linear index counting down from the top of the outline:<ul>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;index:4?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;index:4?format=xoxo</a></li>\n</ul>\n</li>\n<li>Second is a navigation of outline structure, alternating numbers and letters:<ul>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;level:3c4?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;level:3c4?format=xoxo</a></li>\n</ul>\n</li>\n</ul>\n<p>That&#39;s all for now.  In my next round of enthusiasm, I may try stealing <a href=\"http://blogs.opml.org/tommorris/2006/11/11#opathAToolToPopulariseAConcept\">Tom Morris&#39; Opath idea</a>...</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087323\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://vdm.cc/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a4dae25fe0faeec4f9ff1ad769a52b36&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://vdm.cc/\">Vincent D Murphy</a>\n</div>\n<a href=\"#comment-221087323\" class=\"permalink\"><time datetime=\"2006-11-18T20:52:07\">2006-11-18T20:52:07</time></a>\n</div>\n<div class=\"content\"><p>I think (and said as much on Tom Morris' site) that a fragment identifier would be a better solution, in which case Opath would be a fragment identifier syntax for OPML and XOXO. At least it would be the best solution from a REST/web architecture point of view..</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087325\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221087325\" class=\"permalink\"><time datetime=\"2006-11-18T21:40:41\">2006-11-18T21:40:41</time></a>\n</div>\n<div class=\"content\"><p>One reason I didn't use the #identifier URI syntax for suboutlines is because some gymnastics need to be done to get the hash through to the server from a browser.  Otherwise, it gets treated as an in-page anchor.  The semicolon syntax seems to work well for a set of path-segment parameters, and follows the standard (if I've read it correctly).  </p>\n<p>In either case, it works for me, and should be just fine in a REST context - the suboutline syntax here should always identify a single parent outline node as a resource, and will eventually work for GET / PUT / POST / DELETE.</p>\n<p>Now I just need to implement a solution for the <a href=\"http://www.w3.org/1999/04/Editing/01\" rel=\"nofollow\">Lost Update Problem</a>.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087328\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.dynamiclist.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=09eb19f1e84a7aaa63c86bd48c4d0f3d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.dynamiclist.com/\">Michael Poremba</a>\n</div>\n<a href=\"#comment-221087328\" class=\"permalink\"><time datetime=\"2008-09-18T23:45:56\">2008-09-18T23:45:56</time></a>\n</div>\n<div class=\"content\"><p>Wondering if you ever completed your online outliner? Check out dynamiclist.com, a functioning but incomlete project I launched back in 2001. The editor is rich and works well. Been thinking of reviving now that all major browsers support the contentEditable tag.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "[Revised the addressing code a bit][rev], adding a few new kinds of addresses and getting ready to support sub-outline *updates*.  That is, fetch a sub-branch of an outline and then later post a change to that sub-branch using the same address.  Needs more thought - ie. what happens if things move between fetch and update? - but here are a few more samples:\r\n\r\n* First is a straight linear index counting down from the top of the outline:\r\n   * [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;index:4?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;index:4?format=xoxo)\r\n* Second is a navigation of outline structure, alternating numbers and letters:\r\n   * [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;level:3c4?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;level:3c4?format=xoxo)\r\n\r\nThat's all for now.  In my next round of enthusiasm, I may try stealing [Tom Morris' Opath idea][opath]...\r\n\r\n[rev]: http://decafbad.com/trac/changeset/779\r\n[opath]: http://blogs.opml.org/tommorris/2006/11/11#opathAToolToPopulariseAConcept\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087323\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://vdm.cc/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a4dae25fe0faeec4f9ff1ad769a52b36&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://vdm.cc/\">Vincent D Murphy</a>\n                </div>\n                <a href=\"#comment-221087323\" class=\"permalink\"><time datetime=\"2006-11-18T20:52:07\">2006-11-18T20:52:07</time></a>\n            </div>\n            <div class=\"content\"><p>I think (and said as much on Tom Morris' site) that a fragment identifier would be a better solution, in which case Opath would be a fragment identifier syntax for OPML and XOXO. At least it would be the best solution from a REST/web architecture point of view..</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087325\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221087325\" class=\"permalink\"><time datetime=\"2006-11-18T21:40:41\">2006-11-18T21:40:41</time></a>\n            </div>\n            <div class=\"content\"><p>One reason I didn't use the #identifier URI syntax for suboutlines is because some gymnastics need to be done to get the hash through to the server from a browser.  Otherwise, it gets treated as an in-page anchor.  The semicolon syntax seems to work well for a set of path-segment parameters, and follows the standard (if I've read it correctly).  </p>\n\n<p>In either case, it works for me, and should be just fine in a REST context - the suboutline syntax here should always identify a single parent outline node as a resource, and will eventually work for GET / PUT / POST / DELETE.</p>\n\n<p>Now I just need to implement a solution for the <a href=\"http://www.w3.org/1999/04/Editing/01\" rel=\"nofollow\">Lost Update Problem</a>.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087328\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.dynamiclist.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=09eb19f1e84a7aaa63c86bd48c4d0f3d&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.dynamiclist.com/\">Michael Poremba</a>\n                </div>\n                <a href=\"#comment-221087328\" class=\"permalink\"><time datetime=\"2008-09-18T23:45:56\">2008-09-18T23:45:56</time></a>\n            </div>\n            <div class=\"content\"><p>Wondering if you ever completed your online outliner? Check out dynamiclist.com, a functioning but incomlete project I launched back in 2001. The editor is rich and works well. Been thinking of reviving now that all major browsers support the contentEditable tag.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/15/xoxooutliner-and-further-outline-addressing-adventures"
  },
  {
    "comments_archived": true,
    "date": "2006-11-13T09:34:02.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "webdev",
      "php",
      "outlining",
      "xoxooutliner",
      "xsl",
      "xoxo",
      "xml"
    ],
    "title": "XoxoOutliner and suboutline addressing",
    "wordpress_id": 1018,
    "wordpress_slug": "xoxooutliner-and-suboutline-addressing",
    "wordpress_url": "http://decafbad.com/blog/2006/11/13/xoxooutliner-and-suboutline-addressing",
    "year": "2006",
    "month": "11",
    "day": "13",
    "isDir": false,
    "slug": "xoxooutliner-and-suboutline-addressing",
    "postName": "2006-11-13-xoxooutliner-and-suboutline-addressing",
    "html": "<p>Here&#39;s a feature I <a href=\"http://decafbad.com/trac/changeset/776\">just hacked together</a> for <a href=\"http://decafbad.com/trac/wiki/XoxoOutliner\">XoxoOutliner</a> and plan to refine further:</p>\n<ul>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;text:Features?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;text:Features?format=xoxo</a></li>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;id:native?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;id:native?format=xoxo</a></li>\n<li><a href=\"http://decafbad.com/2006/11/XoxoOutliner/outlines/README;contains:Implement?format=xoxo\">http://decafbad.com/2006/11/XoxoOutliner/outlines/README;contains:Implement?format=xoxo</a></li>\n</ul>\n<p>Not entirely sure that this is how I want this to work, but these three URLs demonstrate the ability to address and fetch subsets of outlines.  I&#39;m hoping this will be a basis for selective transclusion in other outlines, or maybe even in a sidebar of a blog.  (Which, depending on the blog software, might be built from outlines anyway.)</p>\n",
    "body": "Here's a feature I [just hacked together][ha] for [XoxoOutliner][xo] and plan to refine further:\r\n\r\n[ha]: http://decafbad.com/trac/changeset/776\r\n[xo]: http://decafbad.com/trac/wiki/XoxoOutliner\r\n\r\n* [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;text:Features?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;text:Features?format=xoxo)\r\n* [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;id:native?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;id:native?format=xoxo)\r\n* [http://decafbad.com/2006/11/XoxoOutliner/outlines/README;contains:Implement?format=xoxo](http://decafbad.com/2006/11/XoxoOutliner/outlines/README;contains:Implement?format=xoxo)\r\n\r\nNot entirely sure that this is how I want this to work, but these three URLs demonstrate the ability to address and fetch subsets of outlines.  I'm hoping this will be a basis for selective transclusion in other outlines, or maybe even in a sidebar of a blog.  (Which, depending on the blog software, might be built from outlines anyway.)\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/11/13/xoxooutliner-and-suboutline-addressing"
  },
  {
    "comments_archived": true,
    "date": "2006-10-31T21:46:40.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "js",
      "outliners",
      "outlining",
      "javascript",
      "dhtml",
      "yui"
    ],
    "title": "Event Delegation based DHTML Drag and Drop?",
    "wordpress_id": 1011,
    "wordpress_slug": "event-delegation-based-dhtml-drag-and-drop",
    "wordpress_url": "http://decafbad.com/blog/2006/10/31/event-delegation-based-dhtml-drag-and-drop",
    "year": "2006",
    "month": "10",
    "day": "31",
    "isDir": false,
    "slug": "event-delegation-based-dhtml-drag-and-drop",
    "postName": "2006-10-31-event-delegation-based-dhtml-drag-and-drop",
    "html": "<p>So, as the urge to tinker rises again, I&#39;ve started playing with <a href=\"http://developer.yahoo.com/yui/\">YUI</a> and cracked open some <a href=\"http://decafbad.com/trac/wiki/XoxoOutliner\">XoxoOutliner</a> code again.  One of the things that struck me like a bolt from the blue recently is the notion of <a href=\"http://icant.co.uk/sandbox/eventdelegation/\">event delegation</a>.  For the most part, I&#39;ve treated event bubbling as a nuisance, except for where it came in handy in keyboard input handling.  But avoiding the need to individually track events on every list element on the page via instantiated objects and methods is <em>hot</em> and <em>forehead-slappingly obvious</em> once you&#39;ve seen it working.  Just implement one set of event handlers on the outline root element (ie. UL or OL), and do the right thing as events come in from the list child elements.</p>\n<p>Thus, while I can do outline node expand/collapse with ease, my goal is to implement an <a href=\"http://icant.co.uk/sandbox/eventdelegation/\">event delegation</a> based approach to dragging outline nodes around.  Apropos of that, I&#39;ve been poking at <a href=\"http://yuiblog.com/sandbox/yui/v0114/examples/event/delegation.php\">how event delegation it works in YUI</a>.  While there&#39;s nothing much special about it in general, I&#39;ve run into a bit of a snag when it comes to drag-and-drop.</p>\n<p>See, YUI comes with a <a href=\"http://developer.yahoo.com/yui/dragdrop/\">rather nice drag-and-drop abstraction</a> that I&#39;d like to use.  That abstraction, however, requires the instantiation of lots of little objects - one per outline node.  Definitely not delegation-based: The problem is that I&#39;ll be adding and removing outline nodes at whim throughout the lifetime of the page, which would require lots of care to ensure that I&#39;m maintaining drag-and-drop wrapper objects.  I&#39;ve done that a bit in <a href=\"http://decafbad.com/trac/wiki/XoxoOutliner\">XoxoOutliner</a>; it sucks.</p>\n<p>So, I was able to build part of a delegation-based drag tracker from scratch.  I&#39;m sad to lose the other niceties that the YUI DnD offers, but it works.  The problem now, though, is the <em>drop</em> part of the equation.  I can drag elements around the page until my heart&#39;s content, but I can never quite tell in what context I&#39;ve dropped it.</p>\n<p>I poured through the source code for the YUI DnD implementation, as well as the implementation of a few other JS frameworks&#39; DnD offerings.  The general solution seems to be calculating and caching the page coordinate regions for each element relevant in the drop operation.  In my case, that usually includes every outline node on the page.  That&#39;s easy when you have lots of little objects instantiated - you just iterate through them and match up regions with the coordinates where the drag stopped.  But, part of my win with event delegation was that I don&#39;t have to maintain a pile of objects.</p>\n<p>Oh yeah, and did I mention that I don&#39;t assign IDs to all the little list items making up my outline?  And that I don&#39;t particularly feel like doing so?  That also throws a monkey wrench in the YUI DnD paradigm.</p>\n<p>The only idea I have so far is that I need to at least build a cache mapping regions to outline nodes, and keep it fairly well maintained.  That should be lighterweight than a fleet of DOM event wrappers, but still annoying.  I could trigger a cache refresh when a drag first starts, but that will probably drag down UI response.  I could trigger it whenever the outline changes, but that&#39;s just moving the burden.  And then, who knows how I&#39;ll map ID-less elements to their respective regions, while ensuring I stay clear of memory leaks.  That&#39;s still semi-voodoo to me, and I feel ashamed of that.</p>\n<p>Eh, maybe it won&#39;t be as bad as I think.  But, to anyone who understands what I just spewed:  Any ideas?</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221083066\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2d870e8df3af0d62fa636b336b17cd60&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Nick</a>\n</div>\n<a href=\"#comment-221083066\" class=\"permalink\"><time datetime=\"2006-11-01T00:19:27\">2006-11-01T00:19:27</time></a>\n</div>\n<div class=\"content\"><p>You know, Marty and I were talking tonight about how some of your posts make NO sense to us.  She even said \"it's like he's talking another fucking language\".</p>\n<p>Damn Programmers!!</p>\n<p>--nick</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083067\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://gandrew.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=de0d80e531fef9095048375a247d1149&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://gandrew.com\">Gareth Andrew</a>\n</div>\n<a href=\"#comment-221083067\" class=\"permalink\"><time datetime=\"2006-11-01T18:57:21\">2006-11-01T18:57:21</time></a>\n</div>\n<div class=\"content\"><p>I'm sure I've missed something obvious - why can't you simply use the same event delegation approach on the mouseUp event?  getTarget should return the node you've dropped on, what else do you need?</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083074\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221083074\" class=\"permalink\"><time datetime=\"2006-11-01T19:18:52\">2006-11-01T19:18:52</time></a>\n</div>\n<div class=\"content\"><p>Gareth: Yup, the issue I have with the mouseUp is that getTarget gives me what was under the mouse when I let go of the button - namely, the element I've been dragging around, not the element under the thing being dragged.  In addition, for user feedback <em>during</em> the drag (ie. at mouseMove time), I want to know what's under the dragged element - so I can highlight the potential landing spot, etc.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083075\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.fluffy.co.uk/stediting/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a660afb8f1f22ce1b03ad3b532aa05b5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.fluffy.co.uk/stediting/\">Ben</a>\n</div>\n<a href=\"#comment-221083075\" class=\"permalink\"><time datetime=\"2006-11-02T13:10:53\">2006-11-02T13:10:53</time></a>\n</div>\n<div class=\"content\"><p>I presume the problem is that, given a point on the screen, you want to find exactly what DOM element is beneath it.</p>\n<p>I found a solution for this in my proof-of-concept structured editor http://www.fluffy.co.uk/stediting/ -- you need to know where the mouse was clicked to insert the caret.</p>\n<p>It might be a start anyway.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083078\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\">misuba</a>\n</div>\n<a href=\"#comment-221083078\" class=\"permalink\"><time datetime=\"2006-11-06T02:40:19\">2006-11-06T02:40:19</time></a>\n</div>\n<div class=\"content\"><p>I think the dragdrop stuff in scriptaculous would get you most of this... at least, it is good about draggable elements having handles you can specify (e.g. child elements of the thing you want to drag), and flexible about what sorts of targets you can land on.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083084\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.decafbad.com\">l.m.orchard</a>\n</div>\n<a href=\"#comment-221083084\" class=\"permalink\"><time datetime=\"2006-11-06T19:06:03\">2006-11-06T19:06:03</time></a>\n</div>\n<div class=\"content\"><p>misuba: Nope, the Scriptaculous approach gives me problems too.  The first is that I don't like Prototype, unless they've stopped messing with Object.prototype since I last checked.  The second is that DnD in Scriptaculous involves juggling lots of little objects ilke most other DnD implementations I've found.  When I have an outline of 100's to 1000's of items, that really blows.  I think I've got an approach working now that's significantly lighter weight.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083085\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.gibberish.com\">misuba</a>\n</div>\n<a href=\"#comment-221083085\" class=\"permalink\"><time datetime=\"2006-11-06T22:26:55\">2006-11-06T22:26:55</time></a>\n</div>\n<div class=\"content\"><p>I'm interested to see your approach. (FWIW, Proto hasn't touched Object.prototype for a couple of versions now.)</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083086\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://javascriptmvc.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=10b3282aac613831755e42ac74acbc41&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://javascriptmvc.com\">Justin Meyer</a>\n</div>\n<a href=\"#comment-221083086\" class=\"permalink\"><time datetime=\"2008-05-31T07:43:52\">2008-05-31T07:43:52</time></a>\n</div>\n<div class=\"content\"><p>I am working on the exact same issue for JavaScriptMVC.  If you haven't seen JavaScriptMVC, check out its trunk.  In the controller2 plugin, you'll find a really nice event delegation library.</p>\n<p>I've only thought of 1 way to do event delegation drops.  It's crazy, but it might work.</p>\n<p>First, style Drags so their z-Index is LOWER than the Drops.  You want your mouse to hit the droppable areas.</p>\n<p>Once a droppable is moused over by dragging a drag to it, it creates a transparent element in the exact same position as the Droppable.  It also lowers the droppable z-Index.  This gives the appearance that the draggable is over the droppable.</p>\n<p>To simulate movement, the transparent droppable's mouseovers are sent to the draggable.</p>\n<p>On mousing out of the transparent Droppable, it sets everything back to normal.</p>\n<p>I haven't tried this yet.  The biggest issue I see is that when you grab a draggable in the middle, half of it will be behind the droppable until the mouseover happens.  This isn't ideal, but maybe there is something that can be done about that.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221083088\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8f18d2579d5c8f2fb2a79c09a9234e6e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Batiste</a>\n</div>\n<a href=\"#comment-221083088\" class=\"permalink\"><time datetime=\"2009-01-20T10:06:54\">2009-01-20T10:06:54</time></a>\n</div>\n<div class=\"content\"><p>A jQuery solution for Drag and Drop with event delegation :</p>\n<p>http://batiste.dosimple.ch/blog/posts/2008-05-18-1/jquery-drag-and-drop-and-resize-event-delegation.html</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "So, as the urge to tinker rises again, I've started playing with [YUI][] and cracked open some [XoxoOutliner][] code again.  One of the things that struck me like a bolt from the blue recently is the notion of [event delegation][ed].  For the most part, I've treated event bubbling as a nuisance, except for where it came in handy in keyboard input handling.  But avoiding the need to individually track events on every list element on the page via instantiated objects and methods is *hot* and *forehead-slappingly obvious* once you've seen it working.  Just implement one set of event handlers on the outline root element (ie. UL or OL), and do the right thing as events come in from the list child elements.\r\n\r\nThus, while I can do outline node expand/collapse with ease, my goal is to implement an [event delegation][ed] based approach to dragging outline nodes around.  Apropos of that, I've been poking at [how event delegation it works in YUI][edy].  While there's nothing much special about it in general, I've run into a bit of a snag when it comes to drag-and-drop.\r\n\r\nSee, YUI comes with a [rather nice drag-and-drop abstraction][yuidd] that I'd like to use.  That abstraction, however, requires the instantiation of lots of little objects - one per outline node.  Definitely not delegation-based: The problem is that I'll be adding and removing outline nodes at whim throughout the lifetime of the page, which would require lots of care to ensure that I'm maintaining drag-and-drop wrapper objects.  I've done that a bit in [XoxoOutliner][]; it sucks.\r\n\r\nSo, I was able to build part of a delegation-based drag tracker from scratch.  I'm sad to lose the other niceties that the YUI DnD offers, but it works.  The problem now, though, is the *drop* part of the equation.  I can drag elements around the page until my heart's content, but I can never quite tell in what context I've dropped it.\r\n\r\nI poured through the source code for the YUI DnD implementation, as well as the implementation of a few other JS frameworks' DnD offerings.  The general solution seems to be calculating and caching the page coordinate regions for each element relevant in the drop operation.  In my case, that usually includes every outline node on the page.  That's easy when you have lots of little objects instantiated - you just iterate through them and match up regions with the coordinates where the drag stopped.  But, part of my win with event delegation was that I don't have to maintain a pile of objects.\r\n\r\nOh yeah, and did I mention that I don't assign IDs to all the little list items making up my outline?  And that I don't particularly feel like doing so?  That also throws a monkey wrench in the YUI DnD paradigm.\r\n\r\nThe only idea I have so far is that I need to at least build a cache mapping regions to outline nodes, and keep it fairly well maintained.  That should be lighterweight than a fleet of DOM event wrappers, but still annoying.  I could trigger a cache refresh when a drag first starts, but that will probably drag down UI response.  I could trigger it whenever the outline changes, but that's just moving the burden.  And then, who knows how I'll map ID-less elements to their respective regions, while ensuring I stay clear of memory leaks.  That's still semi-voodoo to me, and I feel ashamed of that.\r\n\r\nEh, maybe it won't be as bad as I think.  But, to anyone who understands what I just spewed:  Any ideas?\r\n\r\n[yui]: http://developer.yahoo.com/yui/\r\n[xoxooutliner]: http://decafbad.com/trac/wiki/XoxoOutliner\r\n[ed]: http://icant.co.uk/sandbox/eventdelegation/\r\n[edy]: http://yuiblog.com/sandbox/yui/v0114/examples/event/delegation.php\r\n[yuidd]: http://developer.yahoo.com/yui/dragdrop/\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221083066\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2d870e8df3af0d62fa636b336b17cd60&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Nick</a>\n                </div>\n                <a href=\"#comment-221083066\" class=\"permalink\"><time datetime=\"2006-11-01T00:19:27\">2006-11-01T00:19:27</time></a>\n            </div>\n            <div class=\"content\"><p>You know, Marty and I were talking tonight about how some of your posts make NO sense to us.  She even said \"it's like he's talking another fucking language\".</p>\n\n<p>Damn Programmers!!</p>\n\n<p>--nick</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083067\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://gandrew.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=de0d80e531fef9095048375a247d1149&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://gandrew.com\">Gareth Andrew</a>\n                </div>\n                <a href=\"#comment-221083067\" class=\"permalink\"><time datetime=\"2006-11-01T18:57:21\">2006-11-01T18:57:21</time></a>\n            </div>\n            <div class=\"content\"><p>I'm sure I've missed something obvious - why can't you simply use the same event delegation approach on the mouseUp event?  getTarget should return the node you've dropped on, what else do you need?</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083074\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221083074\" class=\"permalink\"><time datetime=\"2006-11-01T19:18:52\">2006-11-01T19:18:52</time></a>\n            </div>\n            <div class=\"content\"><p>Gareth: Yup, the issue I have with the mouseUp is that getTarget gives me what was under the mouse when I let go of the button - namely, the element I've been dragging around, not the element under the thing being dragged.  In addition, for user feedback <em>during</em> the drag (ie. at mouseMove time), I want to know what's under the dragged element - so I can highlight the potential landing spot, etc.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083075\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.fluffy.co.uk/stediting/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a660afb8f1f22ce1b03ad3b532aa05b5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.fluffy.co.uk/stediting/\">Ben</a>\n                </div>\n                <a href=\"#comment-221083075\" class=\"permalink\"><time datetime=\"2006-11-02T13:10:53\">2006-11-02T13:10:53</time></a>\n            </div>\n            <div class=\"content\"><p>I presume the problem is that, given a point on the screen, you want to find exactly what DOM element is beneath it.</p>\n\n<p>I found a solution for this in my proof-of-concept structured editor http://www.fluffy.co.uk/stediting/ -- you need to know where the mouse was clicked to insert the caret.</p>\n\n<p>It might be a start anyway.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083078\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\">misuba</a>\n                </div>\n                <a href=\"#comment-221083078\" class=\"permalink\"><time datetime=\"2006-11-06T02:40:19\">2006-11-06T02:40:19</time></a>\n            </div>\n            <div class=\"content\"><p>I think the dragdrop stuff in scriptaculous would get you most of this... at least, it is good about draggable elements having handles you can specify (e.g. child elements of the thing you want to drag), and flexible about what sorts of targets you can land on.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083084\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2377f34a68801b861c3e54e1301f0dce&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.decafbad.com\">l.m.orchard</a>\n                </div>\n                <a href=\"#comment-221083084\" class=\"permalink\"><time datetime=\"2006-11-06T19:06:03\">2006-11-06T19:06:03</time></a>\n            </div>\n            <div class=\"content\"><p>misuba: Nope, the Scriptaculous approach gives me problems too.  The first is that I don't like Prototype, unless they've stopped messing with Object.prototype since I last checked.  The second is that DnD in Scriptaculous involves juggling lots of little objects ilke most other DnD implementations I've found.  When I have an outline of 100's to 1000's of items, that really blows.  I think I've got an approach working now that's significantly lighter weight.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083085\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d78a376f93e23dd093abe8d280198ebd&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.gibberish.com\">misuba</a>\n                </div>\n                <a href=\"#comment-221083085\" class=\"permalink\"><time datetime=\"2006-11-06T22:26:55\">2006-11-06T22:26:55</time></a>\n            </div>\n            <div class=\"content\"><p>I'm interested to see your approach. (FWIW, Proto hasn't touched Object.prototype for a couple of versions now.)</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083086\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://javascriptmvc.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=10b3282aac613831755e42ac74acbc41&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://javascriptmvc.com\">Justin Meyer</a>\n                </div>\n                <a href=\"#comment-221083086\" class=\"permalink\"><time datetime=\"2008-05-31T07:43:52\">2008-05-31T07:43:52</time></a>\n            </div>\n            <div class=\"content\"><p>I am working on the exact same issue for JavaScriptMVC.  If you haven't seen JavaScriptMVC, check out its trunk.  In the controller2 plugin, you'll find a really nice event delegation library.</p>\n\n<p>I've only thought of 1 way to do event delegation drops.  It's crazy, but it might work.</p>\n\n<p>First, style Drags so their z-Index is LOWER than the Drops.  You want your mouse to hit the droppable areas.</p>\n\n<p>Once a droppable is moused over by dragging a drag to it, it creates a transparent element in the exact same position as the Droppable.  It also lowers the droppable z-Index.  This gives the appearance that the draggable is over the droppable.</p>\n\n<p>To simulate movement, the transparent droppable's mouseovers are sent to the draggable.</p>\n\n<p>On mousing out of the transparent Droppable, it sets everything back to normal.</p>\n\n<p>I haven't tried this yet.  The biggest issue I see is that when you grab a draggable in the middle, half of it will be behind the droppable until the mouseover happens.  This isn't ideal, but maybe there is something that can be done about that.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221083088\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8f18d2579d5c8f2fb2a79c09a9234e6e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Batiste</a>\n                </div>\n                <a href=\"#comment-221083088\" class=\"permalink\"><time datetime=\"2009-01-20T10:06:54\">2009-01-20T10:06:54</time></a>\n            </div>\n            <div class=\"content\"><p>A jQuery solution for Drag and Drop with event delegation :</p>\n\n<p>http://batiste.dosimple.ch/blog/posts/2008-05-18-1/jquery-drag-and-drop-and-resize-event-delegation.html</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2006",
    "path": "2006/10/31/event-delegation-based-dhtml-drag-and-drop"
  }
]