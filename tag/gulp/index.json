[
  {
    "title": "Firefox Test Pilot: The Flattening",
    "tags": [
      "mozilla",
      "testpilot",
      "webdev",
      "django",
      "gulp"
    ],
    "thumbnail": "/blog.lmorchard.com/uploads/2016/tp-flat.png",
    "year": "2016",
    "month": "09",
    "day": "26",
    "isDir": false,
    "slug": "testpilot-static",
    "date": "2016-09-26T12:00:00.000Z",
    "postName": "2016-09-26-testpilot-static",
    "html": "<p><strong>TL;DR</strong>: Firefox Test Pilot is becoming a statically-generated site from content in flat files. We&#39;re moving away from Django and PostgreSQL, and it&#39;s been a bit of a journey.</p>\n<!--more-->\n\n<img class=\"fullwidth\" src=\"/uploads/2016/tp-header.png\" />\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>I&#39;ve been working on <a href=\"https://testpilot.firefox.com/\">Firefox Test Pilot</a> for over a year, but I haven&#39;t written about it here before now. Mostly because I&#39;ve been busy and lazy and <a href=\"/2016/08/31/yak-shaving-habits/\">busily shaving yaks</a>.</p>\n<p>But, there have been big things afoot lately, and I figured they were worth writing about - if only because they&#39;re invisible, behind-the-scenes things that nonetheless took a lot of work to accomplish.</p>\n<h2 id=\"be-prepared---but-for-what\">Be prepared - but for what?</h2>\n<p>When we started building Test Pilot last summer, we based the server-side on Django &amp; PostgreSQL. We had assumptions about the future: </p>\n<ul>\n<li><p>We&#39;d need to collect measurements from experiments. </p>\n</li>\n<li><p>We thought experiments would need some active server-side resources provided by the mothership.</p>\n</li>\n<li><p>We&#39;d need to manage user profiles &amp; preferences, so we required sign-in with a Firefox Account. </p>\n</li>\n</ul>\n<p>A year later, these assumptions didn&#39;t quite pan out: </p>\n<ul>\n<li><p>Rather than reinvent the wheel by collecting &amp; analyzing measurements ourselves, we took advantage of Google Analytics and the efforts of <a href=\"https://wiki.mozilla.org/Telemetry\">the Firefox Telemetry team</a>.</p>\n</li>\n<li><p>We found it&#39;s best to stay out of the way of teams building Test Pilot experiments - let them manage their own services as necessary, rather than be tied to the delivery cadence of the core project.</p>\n</li>\n<li><p>The sign-in requirement turned away many potential users. But, we didn&#39;t need accounts to facilitate experiment participation anyway. Our metrics are anonymous and a Firefox add-on manages opt-in.</p>\n<p>Accounts ended up being private data we had to keep secure, but only used for email notifications. We have better ways to manage email subscriptions across Mozilla - so one less wheel to reinvent!</p>\n</li>\n</ul>\n<h2 id=\"didnt-need-that-server-anyway\">Didn&#39;t need that server anyway</h2>\n<p>There was just one last reason to use Django &amp; PostgreSQL on Test Pilot: A web-based content management system to update the site without heavyweight server deployments &amp; database migrations. </p>\n<p>But, wait a minute: If the other reasons for a server dropped away - why do we need complex deployments?</p>\n<p>Furthermore, why maintain content <a href=\"https://indieweb.org/database-antipattern\">in a database</a> at all?</p>\n<p>The whole Test Pilot team knows their way around text editors and GitHub - so let&#39;s make that our CMS. We can <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\">bake the whole site</a> from <a href=\"https://github.com/mozilla/testpilot/tree/master/content-src/experiments\">flat files</a>. Deployment is <a href=\"https://github.com/mozilla/testpilot/blob/master/docs/development/deployment.md#producing-a-static-build\">running a build script</a> and <a href=\"https://github.com/mozilla/testpilot/blob/master/circle.yml#L71\">uploading the result</a> to a web server. We get revision control &amp; collaboration along with the rest of the project. And as a security bonus, we stop shipping the tools to change the site along with the deployed site itself.</p>\n<p>None of this is revolutionary. Aaron Swartz&#39;s &quot;<a href=\"http://www.aaronsw.com/weblog/000404\">Bake, Don&#39;t Fry</a>&quot; is over 14 years old: Why fry up a new web page for every visit when you can pre-bake the whole site ahead of time? I used <a href=\"http://blosxom.sourceforge.net/\">Bloxsom</a> back in the day and <a href=\"https://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">Gulp bakes this blog now</a>. Static site generators <a href=\"https://www.staticgen.com/\">are numerous &amp; popular</a> - GitHub itself offers <a href=\"https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/\">GitHub Pages</a> powered by <a href=\"https://github.com/jekyll/jekyll\">Jekyll</a>.</p>\n<p>It sounds obvious in retrospect, but it took awhile to realize our site could be stripped down to so little. We assumed we needed all those moving parts - or would need them someday. But, it appears that we can get away with being nearly serverless. And if someday a feature requires more, we can stand up some loosely-coupled microservices - or better yet, find that another team at Mozilla has already solved the problem.</p>\n<h2 id=\"the-show-must-go-on\">The show must go on</h2>\n<p>But, having realized all of this, we couldn&#39;t just burn down the site and start over. Because we&#39;re working on a vehicle in motion, we&#39;ve been doing this in increments over the summer: </p>\n<ul>\n<li><p>A couple of months ago, <a href=\"https://github.com/mozilla/testpilot/issues/1035\">we removed the Firefox Accounts requirement</a> and then <a href=\"https://github.com/mozilla/testpilot/issues/1034\">deleted the user data</a> once we were sure we weren&#39;t going back.</p>\n</li>\n<li><p>We switched data sources for displaying the number of folks participating in experiments from our own Django API to <a href=\"https://github.com/mozilla/testpilot/issues/1039\">a Telemetry-based resource</a>.</p>\n</li>\n<li><p>I wrote a task to <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L22\">import content from the current Django API</a>. Then, I wrote <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L16\">a task to generate JSON</a> from those imported files - a direct static replacement for the Django API.</p>\n</li>\n<li><p>Next, I implemented <a href=\"https://github.com/mozilla/testpilot/blob/master/testpilot/experiments/views.py#L50\">a feature flag in Django</a> to substitute static JSON for content from the database. Thus, we can start managing content in YAML now, maintaining our current infrastructure until we work out a new stripped-down deployment process.</p>\n</li>\n<li><p>Soon, we&#39;ll be able to update the site by pushing to the appropriate branch on GitHub. We&#39;ve got <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\">tasks to generate stub pages</a> for all the front end app routes. We&#39;re also looking into enforcing a requirement to <a href=\"http://micropipes.com/blog//2016/08/31/signing-your-commits-on-github-with-a-gpg-key/\">sign our commits and tags</a> on the way to release.</p>\n</li>\n<li><p>After that, <a href=\"https://github.com/mozilla/testpilot/issues/1306\">we plan to go even further with static site generation</a>. Test Pilot is currently a single page app that pulls content from JSON. But, we can do better by pre-rendering those HTML pages in our build process ahead of time.</p>\n</li>\n</ul>\n<h2 id=\"whats-next\">What&#39;s next?</h2>\n<p>There&#39;s a funny thing about all of this: If we&#39;re successful, no one visiting the site should notice anything different. We&#39;re developing some new features &amp; experiments - but all this work to rid our infrastructure of Django &amp; PostgreSQL should ideally be a non-event for anyone visiting the site. This is the least glamorous sort of work one occasionally has to do on a software project - change everything, but don&#39;t break anything.</p>\n<p>The real benefit will be that we&#39;re able to do a lot of things faster and more easily. For instance, there are now fewer places that need changes to display a new piece of information on a page. We don&#39;t have to monitor as many third-party dependencies - <a href=\"https://github.com/mozilla/testpilot/issues/1116\">which we weren&#39;t doing very well to begin with</a>.</p>\n<p>Our development stack shrinks from Docker containers with Django &amp; PostgreSQL &amp; Node.js - down to just Node.js v6.2.0. <a href=\"https://github.com/mozilla/testpilot/blob/master/docs/development/quickstart.md\">The whole system has gotten simpler and more direct</a>.</p>\n<p>But, wait, there&#39;s more: Along with totally changing our server-side infrastructure, <a href=\"https://github.com/mozilla/testpilot/issues/1307\">we&#39;ve also rewritten the front end of the site to switch from Ampersand to React &amp; Redux</a>. It should make static site generation easier. It&#39;s also eased development on a handful of new features in the past week or so.</p>\n<p>It&#39;s a big deal - and another thing that, in retrospect, seems more obvious now than it did a year ago. But, I&#39;m going to save writing about that for my next post.</p>\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "body": "**TL;DR**: Firefox Test Pilot is becoming a statically-generated site from content in flat files. We're moving away from Django and PostgreSQL, and it's been a bit of a journey.\n\n<!--more-->\n\n<img class=\"fullwidth\" src=\"/uploads/2016/tp-header.png\" />\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nI've been working on [Firefox Test Pilot][testpilot] for over a year, but I haven't written about it here before now. Mostly because I've been busy and lazy and [busily shaving yaks](/2016/08/31/yak-shaving-habits/).\n\nBut, there have been big things afoot lately, and I figured they were worth writing about - if only because they're invisible, behind-the-scenes things that nonetheless took a lot of work to accomplish.\n\n## Be prepared - but for what?\n\nWhen we started building Test Pilot last summer, we based the server-side on Django & PostgreSQL. We had assumptions about the future: \n\n* We'd need to collect measurements from experiments. \n\n* We thought experiments would need some active server-side resources provided by the mothership.\n\n* We'd need to manage user profiles & preferences, so we required sign-in with a Firefox Account. \n\nA year later, these assumptions didn't quite pan out: \n\n* Rather than reinvent the wheel by collecting & analyzing measurements ourselves, we took advantage of Google Analytics and the efforts of [the Firefox Telemetry team][telemetry].\n\n* We found it's best to stay out of the way of teams building Test Pilot experiments - let them manage their own services as necessary, rather than be tied to the delivery cadence of the core project.\n\n* The sign-in requirement turned away many potential users. But, we didn't need accounts to facilitate experiment participation anyway. Our metrics are anonymous and a Firefox add-on manages opt-in.\n  \n  Accounts ended up being private data we had to keep secure, but only used for email notifications. We have better ways to manage email subscriptions across Mozilla - so one less wheel to reinvent!\n\n## Didn't need that server anyway\n\nThere was just one last reason to use Django & PostgreSQL on Test Pilot: A web-based content management system to update the site without heavyweight server deployments & database migrations. \n\nBut, wait a minute: If the other reasons for a server dropped away - why do we need complex deployments?\n\nFurthermore, why maintain content [in a database][database] at all?\n\nThe whole Test Pilot team knows their way around text editors and GitHub - so let's make that our CMS. We can [bake the whole site][sitebake] from [flat files][]. Deployment is [running a build script][buildscript] and [uploading the result][uploadweb] to a web server. We get revision control & collaboration along with the rest of the project. And as a security bonus, we stop shipping the tools to change the site along with the deployed site itself.\n\nNone of this is revolutionary. Aaron Swartz's \"[Bake, Don't Fry][baked]\" is over 14 years old: Why fry up a new web page for every visit when you can pre-bake the whole site ahead of time? I used [Bloxsom][] back in the day and [Gulp bakes this blog now][gulp]. Static site generators [are numerous & popular][staticgen] - GitHub itself offers [GitHub Pages][pages] powered by [Jekyll][].\n\nIt sounds obvious in retrospect, but it took awhile to realize our site could be stripped down to so little. We assumed we needed all those moving parts - or would need them someday. But, it appears that we can get away with being nearly serverless. And if someday a feature requires more, we can stand up some loosely-coupled microservices - or better yet, find that another team at Mozilla has already solved the problem.\n\n## The show must go on\n\nBut, having realized all of this, we couldn't just burn down the site and start over. Because we're working on a vehicle in motion, we've been doing this in increments over the summer: \n\n* A couple of months ago, [we removed the Firefox Accounts requirement][fxareq] and then [deleted the user data][deletedata] once we were sure we weren't going back.\n\n* We switched data sources for displaying the number of folks participating in experiments from our own Django API to [a Telemetry-based resource][counts].\n\n* I wrote a task to [import content from the current Django API][import]. Then, I wrote [a task to generate JSON][generatejson] from those imported files - a direct static replacement for the Django API.\n\n* Next, I implemented [a feature flag in Django][featureflag] to substitute static JSON for content from the database. Thus, we can start managing content in YAML now, maintaining our current infrastructure until we work out a new stripped-down deployment process.\n\n* Soon, we'll be able to update the site by pushing to the appropriate branch on GitHub. We've got [tasks to generate stub pages][stubs] for all the front end app routes. We're also looking into enforcing a requirement to [sign our commits and tags][signreq] on the way to release.\n\n* After that, [we plan to go even further with static site generation][staticsite]. Test Pilot is currently a single page app that pulls content from JSON. But, we can do better by pre-rendering those HTML pages in our build process ahead of time.\n\n## What's next?\n\nThere's a funny thing about all of this: If we're successful, no one visiting the site should notice anything different. We're developing some new features & experiments - but all this work to rid our infrastructure of Django & PostgreSQL should ideally be a non-event for anyone visiting the site. This is the least glamorous sort of work one occasionally has to do on a software project - change everything, but don't break anything.\n\nThe real benefit will be that we're able to do a lot of things faster and more easily. For instance, there are now fewer places that need changes to display a new piece of information on a page. We don't have to monitor as many third-party dependencies - [which we weren't doing very well to begin with][dependencies].\n\nOur development stack shrinks from Docker containers with Django & PostgreSQL & Node.js - down to just Node.js v6.2.0. [The whole system has gotten simpler and more direct][quickstart].\n\nBut, wait, there's more: Along with totally changing our server-side infrastructure, [we've also rewritten the front end of the site to switch from Ampersand to React & Redux][reactrewrite]. It should make static site generation easier. It's also eased development on a handful of new features in the past week or so.\n\nIt's a big deal - and another thing that, in retrospect, seems more obvious now than it did a year ago. But, I'm going to save writing about that for my next post.\n\n[dependencies]: https://github.com/mozilla/testpilot/issues/1116\n[quickstart]: https://github.com/mozilla/testpilot/blob/master/docs/development/quickstart.md\n[testpilot]: https://testpilot.firefox.com/\n[buildscript]: https://github.com/mozilla/testpilot/blob/master/docs/development/deployment.md#producing-a-static-build\n[uploadweb]: https://github.com/mozilla/testpilot/blob/master/circle.yml#L71\n[sitebake]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\n[stubs]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\n[signreq]: http://micropipes.com/blog//2016/08/31/signing-your-commits-on-github-with-a-gpg-key/\n[reactrewrite]: https://github.com/mozilla/testpilot/issues/1307\n[staticsite]: https://github.com/mozilla/testpilot/issues/1306\n[featureflag]: https://github.com/mozilla/testpilot/blob/master/testpilot/experiments/views.py#L50\n[generatejson]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L16\n[import]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L22\n[counts]: https://github.com/mozilla/testpilot/issues/1039\n[deletedata]: https://github.com/mozilla/testpilot/issues/1034\n[fxareq]: https://github.com/mozilla/testpilot/issues/1035\n[flat files]: https://github.com/mozilla/testpilot/tree/master/content-src/experiments\n[telemetry]: https://wiki.mozilla.org/Telemetry\n[gulp]: https://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\n[bloxsom]: http://blosxom.sourceforge.net/\n[jekyll]: https://github.com/jekyll/jekyll\n[pages]: https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/\n[baked]: http://www.aaronsw.com/weblog/000404\n[database]: https://indieweb.org/database-antipattern\n[staticgen]: https://www.staticgen.com/\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/09/26/testpilot-static",
    "summary": "<p><strong>TL;DR</strong>: Firefox Test Pilot is becoming a statically-generated site from content in flat files. We&apos;re moving away from Django and PostgreSQL, and it&apos;s been a bit of a journey.</p>\n",
    "prevPostPath": "2016/11/11/heartbroken",
    "nextPostPath": "2016/09/11/poke-the-mongo"
  },
  {
    "title": "Continual Blogployment",
    "tags": [
      "metablogging",
      "webdev",
      "js",
      "gulp",
      "github",
      "travis",
      "s3",
      "amazon",
      "devops"
    ],
    "year": "2015",
    "month": "10",
    "day": "22",
    "isDir": false,
    "slug": "blogging-via-travis",
    "date": "2015-10-22T12:00:00.000Z",
    "postName": "2015-10-22-blogging-via-travis",
    "html": "<p>Ever since <a href=\"http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">I switched this blog over to a Gulp-based toolchain</a> - <em>holy crap, 2 years ago</em> - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. </p>\n<!--more-->\n\n<p>Just to test the cloud machinery I&#39;m (ab)using here, I&#39;m writing this post as a new commit on GitHub in a browser. When I get done and commit this, Travis CI will fire up, install my node-based blog code and build all the content. Assuming that goes well, my code on Travis will then publish any changes in the content to Amazon S3. And, voila, I will have blogged via the magic of cheap cloud infrastructure.</p>\n<p>Up until now, I&#39;ve been doing this all from my laptop: Write a post in Vim, commit to git, build &amp; deploy from my local machine. I&#39;d push to GitHub to work in the open and have a handy backup. But from here on, the push to GitHub will actually make the magic happen!</p>\n<p>If you&#39;re curious about the plumbing, <a href=\"https://github.com/lmorchard/blog.lmorchard.com/compare/5992311ade7acc0e9dbeb0352ac4097c687be1a5...10149c0e520f7e75536535ff563dfe42aa30b960\">the changes in my recent commits</a> can tell the exact story. But, what I did in a nutshell is this:</p>\n<ul>\n<li><a href=\"https://github.com/lmorchard/blog.lmorchard.com/commit/4c029ab9a6d3f5869cee02b7265e0ad41908a8c4\">Switched to using environment vars to configure AWS credentials for S3 publishing</a>.</li>\n<li>Used <a href=\"http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables\"><code>travis secure</code></a> to supply credentials in encrypted environment vars.</li>\n<li>Started <a href=\"https://github.com/lmorchard/blog.lmorchard.com/commit/4b525710760ad70c0d83d910585e7bd9ddd80583\">maintaining a copy of file hashes on the site</a> so that <a href=\"https://www.npmjs.com/package/gulp-awspublish\">gulp-awspublish</a> will only publish changes.</li>\n<li>Composed a <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/.travis.yml\">.travis.yml</a> to build &amp; deploy everything.</li>\n</ul>\n<p>And, if you&#39;re reading this post, then that means everything worked when I hit the &quot;Commit new file&quot; button! (And, if you&#39;re reading <em>this</em> sentence, then I was able to update this post, too!)</p>\n",
    "body": "Ever since [I switched this blog over to a Gulp-based toolchain][gulp-blog] - *holy crap, 2 years ago* - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. \n\n<!--more-->\n\nJust to test the cloud machinery I'm (ab)using here, I'm writing this post as a new commit on GitHub in a browser. When I get done and commit this, Travis CI will fire up, install my node-based blog code and build all the content. Assuming that goes well, my code on Travis will then publish any changes in the content to Amazon S3. And, voila, I will have blogged via the magic of cheap cloud infrastructure.\n\nUp until now, I've been doing this all from my laptop: Write a post in Vim, commit to git, build & deploy from my local machine. I'd push to GitHub to work in the open and have a handy backup. But from here on, the push to GitHub will actually make the magic happen!\n\nIf you're curious about the plumbing, [the changes in my recent commits][recent-commits] can tell the exact story. But, what I did in a nutshell is this:\n\n* [Switched to using environment vars to configure AWS credentials for S3 publishing][env-config].\n* Used [`travis secure`][travis-secure] to supply credentials in encrypted environment vars.\n* Started [maintaining a copy of file hashes on the site][hash-stash] so that [gulp-awspublish][] will only publish changes.\n* Composed a [.travis.yml][travis-yml] to build & deploy everything.\n\nAnd, if you're reading this post, then that means everything worked when I hit the \"Commit new file\" button! (And, if you're reading *this* sentence, then I was able to update this post, too!)\n\n[env-config]: https://github.com/lmorchard/blog.lmorchard.com/commit/4c029ab9a6d3f5869cee02b7265e0ad41908a8c4\n[gulp-awspublish]: https://www.npmjs.com/package/gulp-awspublish\n[hash-stash]: https://github.com/lmorchard/blog.lmorchard.com/commit/4b525710760ad70c0d83d910585e7bd9ddd80583\n[travis-yml]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/.travis.yml\n[travis-secure]: http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables\n[recent-commits]: https://github.com/lmorchard/blog.lmorchard.com/compare/5992311ade7acc0e9dbeb0352ac4097c687be1a5...10149c0e520f7e75536535ff563dfe42aa30b960\n[gulp-blog]: http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/10/22/blogging-via-travis",
    "summary": "<p>Ever since <a href=\"http://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">I switched this blog over to a Gulp-based toolchain</a> - <em>holy crap, 2 years ago</em> - I had a TODO to wire this thing up for continual deployment. Well, today I finally did it. </p>\n",
    "prevPostPath": "2015/10/28/catbearcoin",
    "nextPostPath": "2015/10/18/being-nice-at-alterconf"
  },
  {
    "title": "Playing with a node.js app project layout",
    "tags": [
      "nodejs",
      "webdev",
      "javascript",
      "gulp",
      "heroku"
    ],
    "year": "2014",
    "month": "10",
    "day": "23",
    "isDir": false,
    "slug": "node-project-layout",
    "date": "2014-10-23T12:00:00.000Z",
    "postName": "2014-10-23-node-project-layout",
    "html": "<p>I&#39;m pleased with <a href=\"https://github.com/lmorchard/toothub/tree/913c4d326ea5a424087899a103301323d46d8086\">this project layout</a> for a node.js-based web client /\nserver app.</p>\n<!--more-->\n\n<pre><code class=\"language-bash\">➜  toothub git:(master) ✗ tree\n├── Procfile\n├── README.md\n├── app.json\n├── bin\n│   └── toothub\n├── config.json-dist\n├── htdocs\n│   ├── css\n│   │   └── main.styl\n│   └── index.html\n├── lib\n│   ├── cli\n│   │   ├── index.js\n│   │   └── server.js\n│   ├── client\n│   │   └── index.js\n│   ├── models\n│   │   ├── Item.js\n│   │   └── index.js\n│   └── server\n│       ├── index.js\n│       └── static.js\n├── package.json\n└── test\n    └── test-index.js</code></pre>\n<p><a href=\"http://browserify.org/\">Browserify</a> lets me share a lot of code between client &amp; server, using the same\nconventions.  Though, I have to be careful not to pile too much into the\nclient-side JS bundle. It&#39;s really easy to inflate that.</p>\n<p>The <a href=\"https://www.npmjs.org/package/require-dir\">require-dir</a> module lets me do <a href=\"https://github.com/lmorchard/feeder2/tree/9d02e216e4d4e47351a69eece8bece67d2fed550/lib/cli\">some lazy things</a> to break up my\ncode into more submodules - at least on the server side. It&#39;s a little thing,\nbut I really like it. I first saw it over in <a href=\"http://viget.com/extend/gulp-browserify-starter-faq\">this Gulp + Browserify starter\nkit</a>.</p>\n<p>Thanks to the <a href=\"https://blog.heroku.com/archives/2014/8/7/heroku-button\">Heroku Button</a>, this thing is cake to get running\nsomewhere <em>out there</em>. Free Heroku is like the Raspberry PI of the cloud. I&#39;m\nstarting to think that anyone who&#39;s into indiewebish self-hosting concepts\nshould really be taking a look at this.</p>\n<p>I&#39;ve also been really into <a href=\"http://gulpjs.com/\">Gulp</a> recently, but so far I don&#39;t need it here.\nI&#39;m gratuitously wasting memory and cycles by processing resources on the fly\nthrough the app server rather than generating as static assets. Maybe I&#39;ll\nchange my mind on that after I&#39;ve tinkered for awhile.</p>\n<p>Anyway, now I guess I should actually start making this thing do stuff.</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "body": "I'm pleased with [this project layout][layout] for a node.js-based web client /\r\nserver app.\r\n\r\n<!--more-->\r\n\r\n```bash\r\n➜  toothub git:(master) ✗ tree\r\n├── Procfile\r\n├── README.md\r\n├── app.json\r\n├── bin\r\n│   └── toothub\r\n├── config.json-dist\r\n├── htdocs\r\n│   ├── css\r\n│   │   └── main.styl\r\n│   └── index.html\r\n├── lib\r\n│   ├── cli\r\n│   │   ├── index.js\r\n│   │   └── server.js\r\n│   ├── client\r\n│   │   └── index.js\r\n│   ├── models\r\n│   │   ├── Item.js\r\n│   │   └── index.js\r\n│   └── server\r\n│       ├── index.js\r\n│       └── static.js\r\n├── package.json\r\n└── test\r\n    └── test-index.js\r\n```\r\n\r\n[Browserify][] lets me share a lot of code between client & server, using the same\r\nconventions.  Though, I have to be careful not to pile too much into the\r\nclient-side JS bundle. It's really easy to inflate that.\r\n\r\n[Browserify]: http://browserify.org/\r\n\r\nThe [require-dir][] module lets me do [some lazy things][lazy] to break up my\r\ncode into more submodules - at least on the server side. It's a little thing,\r\nbut I really like it. I first saw it over in [this Gulp + Browserify starter\r\nkit][starterkit].\r\n\r\n[starterkit]: http://viget.com/extend/gulp-browserify-starter-faq\r\n[require-dir]: https://www.npmjs.org/package/require-dir\r\n[lazy]: https://github.com/lmorchard/feeder2/tree/9d02e216e4d4e47351a69eece8bece67d2fed550/lib/cli\r\n\r\nThanks to the [Heroku Button][], this thing is cake to get running\r\nsomewhere *out there*. Free Heroku is like the Raspberry PI of the cloud. I'm\r\nstarting to think that anyone who's into indiewebish self-hosting concepts\r\nshould really be taking a look at this.\r\n\r\n[Heroku Button]: https://blog.heroku.com/archives/2014/8/7/heroku-button\r\n\r\nI've also been really into [Gulp][] recently, but so far I don't need it here.\r\nI'm gratuitously wasting memory and cycles by processing resources on the fly\r\nthrough the app server rather than generating as static assets. Maybe I'll\r\nchange my mind on that after I've tinkered for awhile.\r\n\r\n[gulp]: http://gulpjs.com/\r\n[layout]: https://github.com/lmorchard/toothub/tree/913c4d326ea5a424087899a103301323d46d8086\r\n\r\nAnyway, now I guess I should actually start making this thing do stuff.\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/10/23/node-project-layout",
    "summary": "<p>I&apos;m pleased with <a href=\"https://github.com/lmorchard/toothub/tree/913c4d326ea5a424087899a103301323d46d8086\">this project layout</a> for a node.js-based web client /\nserver app.</p>\n",
    "prevPostPath": "2014/10/27/thoughts",
    "nextPostPath": "2014/10/23/thoughts"
  },
  {
    "title": "Static blog generation with Gulp and S3",
    "tags": [
      "metablogging",
      "webdev",
      "js",
      "gulp",
      "jekyll",
      "wordpress"
    ],
    "year": "2014",
    "month": "10",
    "day": "20",
    "isDir": false,
    "slug": "static-blog-generation-with-gulp",
    "date": "2014-10-20T12:00:00.000Z",
    "postName": "2014-10-20-static-blog-generation-with-gulp",
    "html": "<p>I&#39;ve long agreed that many sites, like blogs, are better <a href=\"http://www.aaronsw.com/weblog/000404\">baked than\nfried</a>. It makes for web hosting that&#39;s cheaper to run and simpler to\nmaintain. I&#39;ve also often thought that <a href=\"https://indiewebcamp.com/database-antipattern\">using a database can be an\nanti-pattern</a> for managing content. But, what I&#39;ve also found is\nthat baked sites often yield a poor writing environment. That said, I think\nI&#39;m going to give it another try, because I think I might have found a new\napproach that works for me.</p>\n<!--more-->\n\n<h2 id=\"from-wordpress-to-jekyll-to-wordpress\">From WordPress to Jekyll to WordPress</h2>\n<p><a href=\"http://decafbad.com/blog/2011/06/08/moved-to-jekyll/\">As I&#39;ve mentioned before</a>, I&#39;ve flirted with a variety of\nplatforms for putting stuff from my brain on the web. But, the last time I\nswitched away from WordPress to Jekyll, I ended up switching right back again.</p>\n<p>Jekyll <a href=\"http://blog.lmorchard.com/2012/06/16/blogging-like-a-blogger/\">took <em>way</em> too long</a> to generate my site and its 1150 posts, and I\ncouldn&#39;t figure out how to speed that up for previewing drafts without moving\nfiles around.  I tried a few different external tools like\n<a href=\"http://25.io/mou/\">Mou</a> and <a href=\"http://marked2app.com/\">Marked</a>, but the process\nnever clicked. I&#39;ve also never quite gotten along with Ruby, so I didn&#39;t go\nfar with scratching my own itches on Jekyll.</p>\n<p>On the other hand, WordPress has a nicer writing experience. But, it&#39;s clunky\nin other ways. I&#39;m always worried about all that PHP code sitting around\nfrying up page views, hoping no one figures out how to get at the publishing\nmachinery. I&#39;m also less interested in hacking on PHP for fun, these days.</p>\n<h2 id=\"gulp-is-great\">Gulp is great</h2>\n<p>The place where I&#39;ve been having a lot of hacking fun over the past few years\nis in node.js. So, when I was thinking about trying static hosting for\nmy blog again, I started looking into node.js-based Jekyll clones.</p>\n<p>But then, it occurred to me that <a href=\"http://gulpjs.com/\">Gulp</a> would be a fine tool for the job. In\na nutshell, like unix tools pipe character streams between tools, Gulp pipes\nstreams of files between small utility functions. All I had to do was build up\na small collection of file processing functions and glue them together. </p>\n<h2 id=\"copying-riokis-homework\">Copying Rioki&#39;s homework</h2>\n<p>As it happens, <a href=\"http://www.rioki.org/2014/06/09/jekyll-to-gulp.html\">someone else had already started that work for me</a>! The\ncore of it, handling the posts, looks something <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L34\">like this</a>:</p>\n<pre><code class=\"language-javascript\">function posts (path) {\n  return gulp.src(path)\n    .pipe(frontMatter({property: &#39;page&#39;, remove: true}))\n    .pipe(taskUtils.filename2date())\n    .pipe(marked())\n    .pipe(taskUtils.summarize(&#39;&lt;!--more--&gt;&#39;))\n    .pipe(rename(taskUtils.postNameToDatePath))\n    .pipe(taskUtils.applyTemplate(&#39;design/layouts/post.html&#39;))\n    .pipe(gulp.dest(&#39;build&#39;));\n}</code></pre>\n<p>Pretty clean &amp; straightforward, at least to my eyes.</p>\n<p>Starting from <a href=\"https://github.com/rioki/www.rioki.org/blob/master/gulpfile.js\">Rioki&#39;s gulpfile.js</a>, I hacked and iterated until I had\na <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js\">gulpfile.js</a> of my own, split into <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L34\">a directory of small task\nmodules</a>.  At this point, I&#39;ve got a bunch of in-memory post indexes,\ndate &amp; tag based archive pages, RSS feeds, and a handful of other templated\npages. I can push all the content to an Amazon S3 bucket <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js#L32\">with one\ncommand</a>. </p>\n<p>Oh, and building the whole site only takes around 30 seconds. Still, that&#39;s\nnot fast enough for running previews while writing. So, I&#39;ve broken things up so \n<a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L13\">new &amp; draft posts lead to quick rebuilds when their files change</a> - and I even <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L29\">trigger a LiveReload\nservice</a>\nthat keeps a browser tab updated as I make changes in Vim.</p>\n<p>And, best of all, I understand how the whole thing works. This stuff feels\nnicely maintainable and fun to expand in the future as a\n<a href=\"https://www.stephencovey.com/7habits/7habits-habit7.php\">saw-sharpening</a> / yak-shaving opportunity. I might even take a shot\nat spinning off all the code from the content and release it as a standalone\nmodule installable from <a href=\"http://npmjs.org\">NPM</a> in case anyone else wants to\ntry it out.</p>\n<h2 id=\"from-wordpress-and-jekyll-to-gulp\">From WordPress and Jekyll to Gulp</h2>\n<p>I found <a href=\"https://github.com/benbalter/wordpress-to-jekyll-exporter\">a WordPress-to-Jekyll exporter plugin</a>. It\ngenerates a nice zip file download right from the site admin. That let me\ndump the 50 posts I&#39;ve accumulated since the last switch.</p>\n<p>And, a great thing about the YAML-and-markdown file format used by Jekyll is\nthat I was able to merge my posts from both decafbad.com and\nblog.lmorchard.com just by copying them into the same directory. So, I&#39;m\nthinking that I&#39;ll revive my old blog by squashing it right on into the\nnew, and set up a handful of redirects to unify the whole mess.</p>\n<h2 id=\"amazon-s3-deployment\">Amazon S3 deployment</h2>\n<p><a href=\"http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\">Hosting a static website on Amazon S3</a> is cheap and fast and low\nmaintenance. And, a module called <a href=\"https://github.com/pgherveou/gulp-awspublish\">gulp-awspublish</a> can handle pushing this\nwhole site to S3 <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js#L32\">really easily</a>.</p>\n<p>Turns out I generate around 4750 files, between all the posts and tags and dates. \nIt takes about 30 minutes to upload the first time. But, <a href=\"https://github.com/pgherveou/gulp-awspublish\">gulp-awspublish</a>\nkeeps track of MD5 hashes. So, next time I generate and upload, it skips all the\npages that haven&#39;t changed. That&#39;s just a handful of files, if\nall I&#39;m doing is publishing one new post.</p>\n<p>It also seems like this module uploads one file at a time. I wonder if I might\nhack it to queue up a few dozen or so in parallel to speed things up? I doubt\nthat uploading thousands of files was the original use case, so it might do\nwith some tweaking.</p>\n<h2 id=\"page-sections-loaded-via-ajax\">Page sections loaded via AJAX</h2>\n<p>I&#39;ve got a simple template for this new blog, and I hope to keep it that way.\nBut, there&#39;s a lot of stuff in that sidebar. Well, I decided to tweak a few\nthings and suddenly I had 4750 files to upload to S3.</p>\n<p>Just because the site is statically published doesn&#39;t mean some parts\ncan&#39;t be dynamic with the help of the client. Rather than put up wth\nregenerating &amp; uploading all the things in the future, I yanked the sidebar\nout of almost every page and generated it as <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/design/sidebar.html\">a separate resource</a>.</p>\n<p>Then, with <a href=\"https://github.com/lmorchard/blog.lmorchard.com/blob/master/design/js/main.js\">a tiny bit of jQuery magic</a>, I load that sidebar into\nthe page via AJAX. That shrank the size of the site overall, and it&#39;s so fast\nand cacheable that I never see any difference.</p>\n<p>I think this will be one of the little keys to maintaining the site: Try to\nextract any common element used throughout the site, and push it into a\ndynamically loaded asset. Not everything can be done that way, but I think\nplenty can.</p>\n<h2 id=\"disqus-and-comment-archival\">Disqus and comment archival</h2>\n<p>I&#39;m also back to using Disqus for comments. They&#39;ve got a great service, and\nthey&#39;re not a roach motel. They have a great API, and I even wrote a Python\nscript for decafbad.com that <a href=\"https://github.com/lmorchard/blog.decafbad.com/blob/master/_bin/archive_disqus_comments.py\">archives comments from closed\nthreads</a> right into the blog post itself.</p>\n<p>At some point, I need to get that working again and maybe transliterate it\nover to node.js. </p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>I&#39;ve got some more I&#39;d like to do with this stuff, but the main next steps are\nthese:</p>\n<ul>\n<li>Write more often</li>\n<li>Write more consistently</li>\n</ul>\n<p>Of course, having skimmed through my posts over the years on this blog, I&#39;d\nestimate about 25% of the whole thing is me grousing out loud about the long\nstretches I spend neglecting this place. </p>\n<p>So, who knows? Maybe you&#39;ll see my\nnext post show up sometime next June!</p>\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "body": "I've long agreed that many sites, like blogs, are better [baked than\r\nfried][bake]. It makes for web hosting that's cheaper to run and simpler to\r\nmaintain. I've also often thought that [using a database can be an\r\nanti-pattern][antidatabase] for managing content. But, what I've also found is\r\nthat baked sites often yield a poor writing environment. That said, I think\r\nI'm going to give it another try, because I think I might have found a new\r\napproach that works for me.\r\n\r\n<!--more-->\r\n\r\n## From WordPress to Jekyll to WordPress\r\n\r\n[As I've mentioned before][platforms], I've flirted with a variety of\r\nplatforms for putting stuff from my brain on the web. But, the last time I\r\nswitched away from WordPress to Jekyll, I ended up switching right back again.\r\n\r\nJekyll [took *way* too long][jekyllslow] to generate my site and its 1150 posts, and I\r\ncouldn't figure out how to speed that up for previewing drafts without moving\r\nfiles around.  I tried a few different external tools like\r\n[Mou](http://25.io/mou/) and [Marked](http://marked2app.com/), but the process\r\nnever clicked. I've also never quite gotten along with Ruby, so I didn't go\r\nfar with scratching my own itches on Jekyll.\r\n\r\n[jekyllslow]: http://blog.lmorchard.com/2012/06/16/blogging-like-a-blogger/\r\n\r\nOn the other hand, WordPress has a nicer writing experience. But, it's clunky\r\nin other ways. I'm always worried about all that PHP code sitting around\r\nfrying up page views, hoping no one figures out how to get at the publishing\r\nmachinery. I'm also less interested in hacking on PHP for fun, these days.\r\n\r\n## Gulp is great\r\n\r\nThe place where I've been having a lot of hacking fun over the past few years\r\nis in node.js. So, when I was thinking about trying static hosting for\r\nmy blog again, I started looking into node.js-based Jekyll clones.\r\n\r\nBut then, it occurred to me that [Gulp][] would be a fine tool for the job. In\r\na nutshell, like unix tools pipe character streams between tools, Gulp pipes\r\nstreams of files between small utility functions. All I had to do was build up\r\na small collection of file processing functions and glue them together. \r\n\r\n## Copying Rioki's homework\r\n\r\nAs it happens, [someone else had already started that work for me][rioki]! The\r\ncore of it, handling the posts, looks something [like this][tasks]:\r\n\r\n```javascript\r\nfunction posts (path) {\r\n  return gulp.src(path)\r\n    .pipe(frontMatter({property: 'page', remove: true}))\r\n    .pipe(taskUtils.filename2date())\r\n    .pipe(marked())\r\n    .pipe(taskUtils.summarize('<!--more-->'))\r\n    .pipe(rename(taskUtils.postNameToDatePath))\r\n    .pipe(taskUtils.applyTemplate('design/layouts/post.html'))\r\n    .pipe(gulp.dest('build'));\r\n}\r\n```\r\n\r\nPretty clean & straightforward, at least to my eyes.\r\n\r\nStarting from [Rioki's gulpfile.js][rioki2], I hacked and iterated until I had\r\na [gulpfile.js][] of my own, split into [a directory of small task\r\nmodules][tasks].  At this point, I've got a bunch of in-memory post indexes,\r\ndate & tag based archive pages, RSS feeds, and a handful of other templated\r\npages. I can push all the content to an Amazon S3 bucket [with one\r\ncommand][deploy]. \r\n\r\n[deploy]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js#L32\r\n[tasks]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L34\r\n[gulpfile.js]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/gulpfile.js\r\n\r\nOh, and building the whole site only takes around 30 seconds. Still, that's\r\nnot fast enough for running previews while writing. So, I've broken things up so \r\n[new & draft posts lead to quick rebuilds when their files change](https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L13) - and I even [trigger a LiveReload\r\nservice](https://github.com/lmorchard/blog.lmorchard.com/blob/master/lib/tasks/posts.js#L29)\r\nthat keeps a browser tab updated as I make changes in Vim.\r\n\r\nAnd, best of all, I understand how the whole thing works. This stuff feels\r\nnicely maintainable and fun to expand in the future as a\r\n[saw-sharpening][sharpen] / yak-shaving opportunity. I might even take a shot\r\nat spinning off all the code from the content and release it as a standalone\r\nmodule installable from [NPM](http://npmjs.org) in case anyone else wants to\r\ntry it out.\r\n\r\n## From WordPress and Jekyll to Gulp\r\n\r\nI found [a WordPress-to-Jekyll exporter plugin][exporter]. It\r\ngenerates a nice zip file download right from the site admin. That let me\r\ndump the 50 posts I've accumulated since the last switch.\r\n\r\nAnd, a great thing about the YAML-and-markdown file format used by Jekyll is\r\nthat I was able to merge my posts from both decafbad.com and\r\nblog.lmorchard.com just by copying them into the same directory. So, I'm\r\nthinking that I'll revive my old blog by squashing it right on into the\r\nnew, and set up a handful of redirects to unify the whole mess.\r\n\r\n## Amazon S3 deployment\r\n\r\n[Hosting a static website on Amazon S3][static] is cheap and fast and low\r\nmaintenance. And, a module called [gulp-awspublish][] can handle pushing this\r\nwhole site to S3 [really easily][deploy].\r\n\r\n[static]: http://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html\r\n\r\nTurns out I generate around 4750 files, between all the posts and tags and dates. \r\nIt takes about 30 minutes to upload the first time. But, [gulp-awspublish][]\r\nkeeps track of MD5 hashes. So, next time I generate and upload, it skips all the\r\npages that haven't changed. That's just a handful of files, if\r\nall I'm doing is publishing one new post.\r\n\r\nIt also seems like this module uploads one file at a time. I wonder if I might\r\nhack it to queue up a few dozen or so in parallel to speed things up? I doubt\r\nthat uploading thousands of files was the original use case, so it might do\r\nwith some tweaking.\r\n\r\n[gulp-awspublish]: https://github.com/pgherveou/gulp-awspublish\r\n\r\n## Page sections loaded via AJAX\r\n\r\nI've got a simple template for this new blog, and I hope to keep it that way.\r\nBut, there's a lot of stuff in that sidebar. Well, I decided to tweak a few\r\nthings and suddenly I had 4750 files to upload to S3.\r\n\r\nJust because the site is statically published doesn't mean some parts\r\ncan't be dynamic with the help of the client. Rather than put up wth\r\nregenerating & uploading all the things in the future, I yanked the sidebar\r\nout of almost every page and generated it as [a separate resource][sidebar].\r\n\r\nThen, with [a tiny bit of jQuery magic][sidebarajax], I load that sidebar into\r\nthe page via AJAX. That shrank the size of the site overall, and it's so fast\r\nand cacheable that I never see any difference.\r\n\r\nI think this will be one of the little keys to maintaining the site: Try to\r\nextract any common element used throughout the site, and push it into a\r\ndynamically loaded asset. Not everything can be done that way, but I think\r\nplenty can.\r\n\r\n[sidebar]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/design/sidebar.html\r\n[sidebarajax]: https://github.com/lmorchard/blog.lmorchard.com/blob/master/design/js/main.js\r\n\r\n## Disqus and comment archival\r\n\r\nI'm also back to using Disqus for comments. They've got a great service, and\r\nthey're not a roach motel. They have a great API, and I even wrote a Python\r\nscript for decafbad.com that [archives comments from closed\r\nthreads][commentarchiver] right into the blog post itself.\r\n\r\n[commentarchiver]: https://github.com/lmorchard/blog.decafbad.com/blob/master/_bin/archive_disqus_comments.py\r\n\r\nAt some point, I need to get that working again and maybe transliterate it\r\nover to node.js. \r\n\r\n## Next steps\r\n\r\nI've got some more I'd like to do with this stuff, but the main next steps are\r\nthese:\r\n\r\n* Write more often\r\n* Write more consistently\r\n\r\nOf course, having skimmed through my posts over the years on this blog, I'd\r\nestimate about 25% of the whole thing is me grousing out loud about the long\r\nstretches I spend neglecting this place. \r\n\r\nSo, who knows? Maybe you'll see my\r\nnext post show up sometime next June!\r\n\r\n[bake]: http://www.aaronsw.com/weblog/000404\r\n[rioki]: http://www.rioki.org/2014/06/09/jekyll-to-gulp.html\r\n[antidatabase]: https://indiewebcamp.com/database-antipattern\r\n[exporter]: https://github.com/benbalter/wordpress-to-jekyll-exporter\r\n[platforms]: http://decafbad.com/blog/2011/06/08/moved-to-jekyll/\r\n\r\n[gulp]: http://gulpjs.com/\r\n[enthusiasm]: http://decafbad.com/blog/2006/05/26/confessions-of-a-serial-enthusiast\r\n[sharpen]: https://www.stephencovey.com/7habits/7habits-habit7.php\r\n[rioki2]: https://github.com/rioki/www.rioki.org/blob/master/gulpfile.js\r\n\r\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2014",
    "path": "2014/10/20/static-blog-generation-with-gulp",
    "summary": "<p>I&apos;ve long agreed that many sites, like blogs, are better <a href=\"http://www.aaronsw.com/weblog/000404\">baked than\nfried</a>. It makes for web hosting that&apos;s cheaper to run and simpler to\nmaintain. I&apos;ve also often thought that <a href=\"https://indiewebcamp.com/database-antipattern\">using a database can be an\nanti-pattern</a> for managing content. But, what I&apos;ve also found is\nthat baked sites often yield a poor writing environment. That said, I think\nI&apos;m going to give it another try, because I think I might have found a new\napproach that works for me.</p>\n",
    "prevPostPath": "2014/10/23/wtfomgbullets",
    "nextPostPath": "2014/10/11/tootr-1"
  }
]