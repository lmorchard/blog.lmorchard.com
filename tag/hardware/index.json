[
  {
    "title": "SIO2Pi = Atari 800 + Raspberry Pi",
    "tags": [
      "diy",
      "hardware",
      "retro",
      "atari",
      "atari800",
      "raspi"
    ],
    "year": "2018",
    "month": "03",
    "day": "01",
    "isDir": true,
    "slug": "sio2pi",
    "date": "2018-03-01T12:00:00.000Z",
    "postName": "2018-03-01-sio2pi",
    "html": "<p><strong>TL;DR</strong>: The first computer I programmed was an Atari 800. I&#39;m using a Raspberry Pi Zero W and a simple serial voltage conversion circuit to load disk images from the internet onto my Atari 800.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p><a href=\"https://blog.lmorchard.com/2003/06/13/newly-digital/\">I’ve written before about my first contact with computers</a>. But, man, I wrote that back in 2003. Long enough to make the itself post a retro artifact. The passage of time is weird.</p>\n<p>If you don&#39;t care to follow me down memory lane so much, go ahead and <a href=\"#hacking-the-sio-port\">skip on down to where I start building the gadget</a>.</p>\n<h2 id=\"atari-was-my-first-love\">Atari was my first love</h2>\n<p>To recap: I was a problematic kid - hyperactive and easily bored. I recall literally climbing the walls by way of the classroom curtains. At some point, the principal decided I needed a challenge. He plonked me down in front of an Atari 800 and a stack of books.</p>\n<p>I burned through those books and fell in love with computers. Typed in programs &amp; games. Found out how old I’d be in The Year 2000 - which, back then, was The Future. I learned how programming worked. Computers expanded to fill my head, gave outlet to my spastic energy. </p>\n<p>The problem was that I only had one hour per day with the machine at school. We didn’t have a computer at home. That didn’t keep me from picking up every computer book I could get my hands on at <a href=\"http://www.scholastic.com/bookfairs/\">the book fair</a> when it came through, though. I’d read through the programs and try to figure out how they worked while I waited until I could get some time at a keyboard to type them in.</p>\n<p><img src=\"image_0.jpg\" alt=\"Some of the programming books I still have from when I was a kid\"></p>\n<p>I even remember playing with a <a href=\"https://en.wikipedia.org/wiki/Lite-Brite\">Lite Brite</a> and trying to work out how to translate those pictures to Atari graphics. That frustrated me, of course, because <a href=\"https://jenn.glitch.me/a-post-of-utmost-hexellence/\">those old-school Lite Brites had a hexagonal layout of pegs rather than a square grid</a> that could directly translate to pixels.</p>\n<h2 id=\"but-then-commodore\">But, then, Commodore</h2>\n<p>That Christmas - or maybe the next - I got a Commodore 64 under the tree. My story with computers accelerated, because I had the thing all to myself in my bedroom. I left Atari behind, learned about the <a href=\"https://en.wikipedia.org/wiki/MOS_Technology_SID\">SID</a> chip but never explored the <a href=\"https://en.wikipedia.org/wiki/POKEY\">POKEY</a>.</p>\n<p><img src=\"image_1.jpg\" alt=\"Here&#39;s me opening a C64 for Christmas\"></p>\n<h2 id=\"the-computer-lab-in-my-office\">The computer lab in my office</h2>\n<p>Decades later, I hit up eBay for an Atari 800. I found one at a decent price - complete with an <a href=\"http://www.atarimuseum.com/computers/8bits/xl/xlperipherals/atari1050.html\">Atari 1050</a> floppy, <a href=\"http://www.atarimuseum.com/computers/8BITS/XL/xlperipherals/1010.html\">1010 cassette drive</a>, and a pile of disks and tapes and cartridges. I played with it a little, but mostly it sat as <a href=\"https://www.flickr.com/photos/deusx/8445963080/\">an office decoration</a> for a few years.</p>\n<p>This year, I decided to do something with all my old machines. I’ve got a small collection in my home office: Commodore 64, Amiga 1200, Apple IIe, and Atari 800 - all personal touchstones. But, as it happens, floppies and cassettes and rubber belts decay. I discovered that some of this stuff stopped working over the years.</p>\n<p><img src=\"image_2.jpg\" alt=\"I have a table in my office set up with C64, Atari 800, and Apple IIe\"></p>\n<h2 id=\"hacking-the-sio-port\">Hacking the SIO port</h2>\n<p>The core machines still work, though. And, thanks to the internet and folks generous with their time &amp; efforts, enormous archives of software for these systems can be accessed in seconds. But, how do you get this software into these archaic systems?</p>\n<p>I thought bridging the gap would be hard. But, a bit of cheap modern kit can twiddle the signals on an old-school input/output port such that an antique thinks it’s talking to something of its own vintage. Single-board computers and microcontrollers are capable enough to pretend to be almost anything to these old machines.</p>\n<img class=\"inset wide right\" alt=\"Pinout of Atari AIO port with legend\" src=\"image_3.gif\" />\n\n<p>That brings me to the <a href=\"https://en.wikipedia.org/wiki/Atari_SIO\">SIO port</a> on the Atari 800. Where most 80s computers had a handful of parallel &amp; serial ports of proprietary &amp; standard flavors - the Atari 8-bit computers had just this one port for talking to disks, cassettes, printers, modems, or whatever.  If that sounds familiar, the <a href=\"https://en.wikipedia.org/wiki/Atari_SIO\">SIO port</a> could be considered a predecessor to our modern USB port. Oddly enough, <a href=\"https://en.wikipedia.org/wiki/Joseph_C._Decuir\">Joseph C. Decuir</a> worked on both technologies, so I think the similarity is more than coincidental.</p>\n<p>In my idle googling on how to get new data piped into my old Atari, I found this 2013 post on AtariAge entitled &quot;<a href=\"http://atariage.com/forums/topic/209010-sio2pi-raspberry-pi-as-a-floppy/\">SIO2PI -&gt; Raspberry Pi as a floppy</a>&quot; by <a href=\"http://atariage.com/forums/user/29824-themontezuma/\">TheMontezuma</a>. </p>\n<p>In that post is a simple circuit: It used a logic level voltage converter, a diode, a Raspberry Pi, and some wires. I didn’t <em>really</em> know all that much about voltage levels and serial ports before this, but this seems handy for all kinds of things and well within my ability to build.</p>\n<p><img src=\"image_4.jpg\" alt=\"Rough schematic of connecting a Raspberry Pi to the SIO port\"></p>\n<p>Of course, there’s something ludicrous about using a Raspberry Pi for this. <a href=\"https://github.com/retropie/retropie-setup/wiki/Atari-800-and-5200\">That little thing can emulate an entire Atari 800 on its own</a>. You could hollow out the guts of the old computer, drop in the Pi, and with some clever wiring you’d probably never know the difference from the outside. <a href=\"https://makezine.com/2013/03/18/raspberry-pi-gives-amiga-a-new-life/\">Some people actually do that with classic computers like the Amiga</a>. </p>\n<p>But, I really wanted to get this particular machine up and running. And, overpowered as it might be for the task, a Raspberry Pi Zero W is also hilariously inexpensive.</p>\n<h2 id=\"building-the-sio2pi\">Building the SIO2Pi</h2>\n<p>So, I went shopping and picked up some parts:</p>\n<ul>\n<li><p><a href=\"http://a.co/j79Bk4z\">CanaKit Raspberry Pi Zero W (Wireless) Starter Kit with Official Case</a></p>\n</li>\n<li><p><a href=\"http://a.co/0Uo3bnl\">Logic Level Converter Bi-directional Shifter Module for Arduino</a></p>\n</li>\n<li><p><a href=\"http://a.co/4arTjGe\">Rectifier Diode Assorted Kit</a></p>\n</li>\n<li><p><a href=\"http://a.co/70wjtGE\">Breadboard jumpers in ribbon cable form</a></p>\n</li>\n<li><p><a href=\"http://a.co/70wjtGE\">Mini breadboards</a></p>\n</li>\n</ul>\n<p>I had a spare SIO cable that I cut in half for the project. I could have tried getting <a href=\"https://www.thingiverse.com/thing:1831769\">a new SIO connector 3D printed</a> - and I still might - but I knew this cable already worked. And, I was impatient. My first prototype came together on a little breadboard.</p>\n<p><img src=\"image_5.jpg\" alt=\"First SIO2Pi prototype on a breadboard\"></p>\n<p><img src=\"image_6.jpg\" alt=\"The prototype connected to my Atari 800\"></p>\n<p>My first attempt at using the thing was a failure. But, I did more reading into <a href=\"https://www.raspberrypi.org/documentation/configuration/uart.md\">how to configure the Raspberry Pi’s serial UART</a>. Two needful things came up:</p>\n<ul>\n<li><p>Disabling the out-of-box Bluetooth module</p>\n</li>\n<li><p>Disabling the service running a console on the serial port</p>\n</li>\n</ul>\n<p>So, heads up if you try this - make sure to properly set up the Pi&#39;s UART for use with the circuit. Things will either not work at all - or have strange corruption issues as a Linux login console tries to output along with floppy disk data.</p>\n<h2 id=\"loading-disks-with-the-sio2pi\">Loading disks with the SIO2Pi</h2>\n<p>After that, <a href=\"https://github.com/TheMontezuma/SIO2BSD\">sio2bsd</a> started working and my little rig piped images of Atari floppy disks downloaded from <a href=\"http://ftp.pigwa.net/\">ftp.pigwa.net</a> into my old computer as if they were the real thing.</p>\n<iframe class=\"lazyload\" width=\"560\" height=\"315\" data-src=\"https://www.youtube.com/embed/9j6Yy0ZjAK4?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n<p><img src=\"image_7.jpg\" alt=\"Voice of Silence music disk loaded up\"></p>\n<p>Oh and since we&#39;re living in The Future <a href=\"https://archive.org/details/a8b_Voice_of_Silence_1996_Taquart_pl\">and the Internet Archive is an awesome place</a> - you can try emulating what I loaded for real, right in your browser. I&#39;ve had these songs stuck in my head for like a week.</p>\n<iframe class=\"lazyload\" data-src=\"https://archive.org/embed/a8b_Voice_of_Silence_1996_Taquart_pl\" width=\"560\" height=\"384\" frameborder=\"0\" webkitallowfullscreen=\"true\" mozallowfullscreen=\"true\" allowfullscreen></iframe>\n\n<p>I’ve only spent a couple of hours with this stuff so far, so I’d totally welcome some suggestions for more things to check out. I knew there were games, but I was never aware of a demoscene or music packs on the Atari 8-bit computers. I’m also starting to learn a bit about the differences between members of the old Atari 8-bit family - insofar as not everything runs on the Atari 800.</p>\n<p>But, I&#39;ve also got an <a href=\"http://www.atarimuseum.com/computers/8bits/1200xl/1200xl.html\">Atari 1200XL</a> and an <a href=\"http://www.atarimuseum.com/computers/8bits/xe/65xe/65xe.html\">Atari 65XE</a> in the basement that I might try playing with next. I did lay hands on a 1200XL as a kid, but I was already onto Commodore by the time the 65XE arrived. It&#39;ll be interesting to see what runs on those things.</p>\n<h2 id=\"the-sio2pi-is-a-modem-too\">The SIO2Pi is a &quot;modem&quot; too!</h2>\n<p>Then, I discovered that I could run <a href=\"https://github.com/FozzTexx/tcpser\">tcpser</a> on the Raspberry PI - and suddenly my pretend disk drive was a pretend modem. I could &quot;dial out&quot; to the internet and explore <a href=\"http://bbs.retrobattlestations.com/\">a neo-retro world of BBSes</a> I’d never had a chance to experience back in the day on an Atari.</p>\n<p><img src=\"image_8.jpg\" alt=\"Loading BOB Term\"></p>\n<p><img src=\"image_9.jpg\" alt=\"&quot;Calling&quot; Level 29 BBS from my Atari 800\"></p>\n<h2 id=\"kitten-proofing-the-sio2pi\">Kitten-proofing the SIO2Pi</h2>\n<p>The little breadboard rig worked pretty well. But, the next morning, I found most of the wires pulled free thanks to a curious kitten. So, I decided to clean things up and make them more permanent with a <a href=\"https://www.adafruit.com/product/3203\">Perma Proto Bonnet Mini Kit</a>, a <a href=\"https://www.adafruit.com/product/2104\">16-pin IDC breakout helper</a>, and <a href=\"http://a.co/4IZlqkb\">some 30AWG wire</a> from Adafruit.</p>\n<p><img src=\"image_10.jpg\" alt=\"Next prototype of SIO2Pi soldered together on a Perma Proto Bonnet\"></p>\n<p>Even though there are only 5 pins needed between the Pi and the SIO port, soldering up all the pins to headers means I never have to remember what gets plugged into where. It&#39;s also good soldering practice. There are also 3 unused pins on the header - because SIO is 13 pins but the IDC breakout was convenient enough to use as-is and just ignore the extra connections.</p>\n<p>I managed to solder all the SIO cable wires onto header pins as a makeshift male connector to the SIO2Pi Bonnet. It ended up being a mess, often melting the plastic frame of the header, and I had to redo it at least once. But, it works. I’m also considering adding a female header to the other end of the SIO cable I chopped in half, if only to make it easier to join the two halves back into a working cable if I ever need it.</p>\n<p><img src=\"image_11.jpg\" alt=\"Amateurish job of soldering cable wires to header pins\"></p>\n<p>The finished product sits nicely on top of the Atari 800.</p>\n<p><img src=\"image_12.jpg\" alt=\"The SIO2Pi sitting atop the Atari 800\"></p>\n<p>The wires might be too thick, but I’m considering some <a href=\"http://a.co/4ptrVtJ\">IEC ribbon cable connectors</a> to crimp one onto the end of these wires and replace my rough soldering job. That might be cleaner and fit more naturally into how this sits on my desk, without bending all the wires awkwardly.</p>\n<img alt=\"The whole Atari 800 and SIO2Pi setup sitting on my table\" src=\"image_13.jpg\" id=\"thumbnail\" />\n\n<h2 id=\"next-steps\">Next steps</h2>\n<p>This setup works well enough. The main drawback is that I have to ssh into the Raspberry Pi and run sio2bsd manually to make it available for loading. And, if I want to switch to using it as a modem from a term program, I have to kill sio2bsd and start up tcpser.</p>\n<p><strong>Adding a display or web interface:</strong> The Raspberry Pi isn’t hooked up to a monitor - and I don’t really want to devote one to it. I could add some kind of small touchscreen or text display. It would also be nice to have a web interface I could hit from my phone. Maybe use that to select disk images and switch into terminal mode, do all the process management of sio2bsd and tcpser in the background with node.js. So, there’s a project for the future.</p>\n<p><strong>Using an ESP8266:</strong> I&#39;m toying with the idea of exploring whether an ESP8266 - or some other small board - would be up to snuff for this project. <a href=\"https://blog.lmorchard.com/2018/02/08/pumpkin/\">I had fun using one to build my wifi pumpkin</a>, so it could be fun for this too. That would take me learning a lot more about the SIO data protocols, though. Luckily, I have <a href=\"https://github.com/TheMontezuma/SIO2BSD\">the source code for sio2bsd</a>, so I have a starting point. But, the key to this SIO2Pi project was that I basically just glued things together and they worked without me entirely understanding the parts.</p>\n<p><strong>Calling more BBSes &amp; writing my own stuff:</strong> Beyond just digging into old software, I’m not sure where I’m going with this stuff next. I’ll probably keep calling some BBSes. I’ve also got a kind of masochistic notion to fetch some old computer magazines and try some of the type-in programs for old time’s sake. Maybe I’ll poke around with exploring the hardware and writing my own games. I haven&#39;t tried it, but it seems like this rig should be able to <em>save</em> to disk images, too.</p>\n<p><strong>A better case:</strong> I could also explore 3D printing a case that combines all this stuff into a tidy little module with an SIO socket (or two for daisy chaining) rather than using a butchered old cable. I&#39;ve also read about folks embedding this kind of hardware directly into the old computer - but I like this stuff to be easily reversible &amp; non-destructive, so I probably won&#39;t try that.</p>\n<p>Or, you know, maybe I’ll move on from this <a href=\"https://blog.lmorchard.com/2006/05/26/confessions-of-a-serial-enthusiast/\">serial enthusiasm</a> and let it hang out in my office for a few more years. Either way, it’s been a quick &amp; fun project to revive this old machine and get a look a some new-to-me software that I never had a chance to see back in the day.</p>\n",
    "body": "**TL;DR**: The first computer I programmed was an Atari 800. I'm using a Raspberry Pi Zero W and a simple serial voltage conversion circuit to load disk images from the internet onto my Atari 800.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n[I’ve written before about my first contact with computers](https://blog.lmorchard.com/2003/06/13/newly-digital/). But, man, I wrote that back in 2003. Long enough to make the itself post a retro artifact. The passage of time is weird.\n\nIf you don't care to follow me down memory lane so much, go ahead and [skip on down to where I start building the gadget](#hacking-the-sio-port).\n\n## Atari was my first love\n\nTo recap: I was a problematic kid - hyperactive and easily bored. I recall literally climbing the walls by way of the classroom curtains. At some point, the principal decided I needed a challenge. He plonked me down in front of an Atari 800 and a stack of books.\n\nI burned through those books and fell in love with computers. Typed in programs & games. Found out how old I’d be in The Year 2000 - which, back then, was The Future. I learned how programming worked. Computers expanded to fill my head, gave outlet to my spastic energy. \n\nThe problem was that I only had one hour per day with the machine at school. We didn’t have a computer at home. That didn’t keep me from picking up every computer book I could get my hands on at [the book fair](http://www.scholastic.com/bookfairs/) when it came through, though. I’d read through the programs and try to figure out how they worked while I waited until I could get some time at a keyboard to type them in.\n\n![Some of the programming books I still have from when I was a kid](image_0.jpg)\n\nI even remember playing with a [Lite Brite](https://en.wikipedia.org/wiki/Lite-Brite) and trying to work out how to translate those pictures to Atari graphics. That frustrated me, of course, because [those old-school Lite Brites had a hexagonal layout of pegs rather than a square grid](https://jenn.glitch.me/a-post-of-utmost-hexellence/) that could directly translate to pixels.\n\n## But, then, Commodore\n\nThat Christmas - or maybe the next - I got a Commodore 64 under the tree. My story with computers accelerated, because I had the thing all to myself in my bedroom. I left Atari behind, learned about the [SID](https://en.wikipedia.org/wiki/MOS_Technology_SID) chip but never explored the [POKEY](https://en.wikipedia.org/wiki/POKEY).\n\n![Here's me opening a C64 for Christmas](image_1.jpg)\n\n## The computer lab in my office\n\nDecades later, I hit up eBay for an Atari 800. I found one at a decent price - complete with an [Atari 1050](http://www.atarimuseum.com/computers/8bits/xl/xlperipherals/atari1050.html) floppy, [1010 cassette drive](http://www.atarimuseum.com/computers/8BITS/XL/xlperipherals/1010.html), and a pile of disks and tapes and cartridges. I played with it a little, but mostly it sat as [an office decoration](https://www.flickr.com/photos/deusx/8445963080/) for a few years.\n\nThis year, I decided to do something with all my old machines. I’ve got a small collection in my home office: Commodore 64, Amiga 1200, Apple IIe, and Atari 800 - all personal touchstones. But, as it happens, floppies and cassettes and rubber belts decay. I discovered that some of this stuff stopped working over the years.\n\n![I have a table in my office set up with C64, Atari 800, and Apple IIe](image_2.jpg)\n\n## Hacking the SIO port\n\nThe core machines still work, though. And, thanks to the internet and folks generous with their time & efforts, enormous archives of software for these systems can be accessed in seconds. But, how do you get this software into these archaic systems?\n\nI thought bridging the gap would be hard. But, a bit of cheap modern kit can twiddle the signals on an old-school input/output port such that an antique thinks it’s talking to something of its own vintage. Single-board computers and microcontrollers are capable enough to pretend to be almost anything to these old machines.\n\n<img class=\"inset wide right\" alt=\"Pinout of Atari AIO port with legend\" src=\"image_3.gif\" />\n\nThat brings me to the [SIO port](https://en.wikipedia.org/wiki/Atari_SIO) on the Atari 800. Where most 80s computers had a handful of parallel & serial ports of proprietary & standard flavors - the Atari 8-bit computers had just this one port for talking to disks, cassettes, printers, modems, or whatever.  If that sounds familiar, the [SIO port](https://en.wikipedia.org/wiki/Atari_SIO) could be considered a predecessor to our modern USB port. Oddly enough, [Joseph C. Decuir](https://en.wikipedia.org/wiki/Joseph_C._Decuir) worked on both technologies, so I think the similarity is more than coincidental.\n\nIn my idle googling on how to get new data piped into my old Atari, I found this 2013 post on AtariAge entitled \"[SIO2PI -> Raspberry Pi as a floppy](http://atariage.com/forums/topic/209010-sio2pi-raspberry-pi-as-a-floppy/)\" by [TheMontezuma](http://atariage.com/forums/user/29824-themontezuma/). \n\nIn that post is a simple circuit: It used a logic level voltage converter, a diode, a Raspberry Pi, and some wires. I didn’t *really* know all that much about voltage levels and serial ports before this, but this seems handy for all kinds of things and well within my ability to build.\n\n![Rough schematic of connecting a Raspberry Pi to the SIO port](image_4.jpg)\n\nOf course, there’s something ludicrous about using a Raspberry Pi for this. [That little thing can emulate an entire Atari 800 on its own](https://github.com/retropie/retropie-setup/wiki/Atari-800-and-5200). You could hollow out the guts of the old computer, drop in the Pi, and with some clever wiring you’d probably never know the difference from the outside. [Some people actually do that with classic computers like the Amiga](https://makezine.com/2013/03/18/raspberry-pi-gives-amiga-a-new-life/). \n\nBut, I really wanted to get this particular machine up and running. And, overpowered as it might be for the task, a Raspberry Pi Zero W is also hilariously inexpensive.\n\n## Building the SIO2Pi\n\nSo, I went shopping and picked up some parts:\n\n* [CanaKit Raspberry Pi Zero W (Wireless) Starter Kit with Official Case](http://a.co/j79Bk4z)\n\n* [Logic Level Converter Bi-directional Shifter Module for Arduino](http://a.co/0Uo3bnl)\n\n* [Rectifier Diode Assorted Kit](http://a.co/4arTjGe)\n\n* [Breadboard jumpers in ribbon cable form](http://a.co/70wjtGE)\n\n* [Mini breadboards](http://a.co/70wjtGE)\n\nI had a spare SIO cable that I cut in half for the project. I could have tried getting [a new SIO connector 3D printed](https://www.thingiverse.com/thing:1831769) - and I still might - but I knew this cable already worked. And, I was impatient. My first prototype came together on a little breadboard.\n\n![First SIO2Pi prototype on a breadboard](image_5.jpg)\n\n![The prototype connected to my Atari 800](image_6.jpg)\n\nMy first attempt at using the thing was a failure. But, I did more reading into [how to configure the Raspberry Pi’s serial UART](https://www.raspberrypi.org/documentation/configuration/uart.md). Two needful things came up:\n\n* Disabling the out-of-box Bluetooth module\n\n* Disabling the service running a console on the serial port\n\nSo, heads up if you try this - make sure to properly set up the Pi's UART for use with the circuit. Things will either not work at all - or have strange corruption issues as a Linux login console tries to output along with floppy disk data.\n\n## Loading disks with the SIO2Pi\n\nAfter that, [sio2bsd](https://github.com/TheMontezuma/SIO2BSD) started working and my little rig piped images of Atari floppy disks downloaded from [ftp.pigwa.net](http://ftp.pigwa.net/) into my old computer as if they were the real thing.\n\n<iframe class=\"lazyload\" width=\"560\" height=\"315\" data-src=\"https://www.youtube.com/embed/9j6Yy0ZjAK4?rel=0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n\n![Voice of Silence music disk loaded up](image_7.jpg)\n\nOh and since we're living in The Future [and the Internet Archive is an awesome place](https://archive.org/details/a8b_Voice_of_Silence_1996_Taquart_pl) - you can try emulating what I loaded for real, right in your browser. I've had these songs stuck in my head for like a week.\n\n<iframe class=\"lazyload\" data-src=\"https://archive.org/embed/a8b_Voice_of_Silence_1996_Taquart_pl\" width=\"560\" height=\"384\" frameborder=\"0\" webkitallowfullscreen=\"true\" mozallowfullscreen=\"true\" allowfullscreen></iframe>\n\nI’ve only spent a couple of hours with this stuff so far, so I’d totally welcome some suggestions for more things to check out. I knew there were games, but I was never aware of a demoscene or music packs on the Atari 8-bit computers. I’m also starting to learn a bit about the differences between members of the old Atari 8-bit family - insofar as not everything runs on the Atari 800.\n\nBut, I've also got an [Atari 1200XL](http://www.atarimuseum.com/computers/8bits/1200xl/1200xl.html) and an [Atari 65XE](http://www.atarimuseum.com/computers/8bits/xe/65xe/65xe.html) in the basement that I might try playing with next. I did lay hands on a 1200XL as a kid, but I was already onto Commodore by the time the 65XE arrived. It'll be interesting to see what runs on those things.\n\n## The SIO2Pi is a \"modem\" too!\n\nThen, I discovered that I could run [tcpser](https://github.com/FozzTexx/tcpser) on the Raspberry PI - and suddenly my pretend disk drive was a pretend modem. I could \"dial out\" to the internet and explore [a neo-retro world of BBSes](http://bbs.retrobattlestations.com/) I’d never had a chance to experience back in the day on an Atari.\n\n![Loading BOB Term](image_8.jpg)\n\n![\"Calling\" Level 29 BBS from my Atari 800](image_9.jpg)\n\n## Kitten-proofing the SIO2Pi\n\nThe little breadboard rig worked pretty well. But, the next morning, I found most of the wires pulled free thanks to a curious kitten. So, I decided to clean things up and make them more permanent with a [Perma Proto Bonnet Mini Kit](https://www.adafruit.com/product/3203), a [16-pin IDC breakout helper](https://www.adafruit.com/product/2104), and [some 30AWG wire](http://a.co/4IZlqkb) from Adafruit.\n\n![Next prototype of SIO2Pi soldered together on a Perma Proto Bonnet](image_10.jpg)\n\nEven though there are only 5 pins needed between the Pi and the SIO port, soldering up all the pins to headers means I never have to remember what gets plugged into where. It's also good soldering practice. There are also 3 unused pins on the header - because SIO is 13 pins but the IDC breakout was convenient enough to use as-is and just ignore the extra connections.\n\nI managed to solder all the SIO cable wires onto header pins as a makeshift male connector to the SIO2Pi Bonnet. It ended up being a mess, often melting the plastic frame of the header, and I had to redo it at least once. But, it works. I’m also considering adding a female header to the other end of the SIO cable I chopped in half, if only to make it easier to join the two halves back into a working cable if I ever need it.\n\n![Amateurish job of soldering cable wires to header pins](image_11.jpg)\n\nThe finished product sits nicely on top of the Atari 800.\n\n![The SIO2Pi sitting atop the Atari 800](image_12.jpg)\n\nThe wires might be too thick, but I’m considering some [IEC ribbon cable connectors](http://a.co/4ptrVtJ) to crimp one onto the end of these wires and replace my rough soldering job. That might be cleaner and fit more naturally into how this sits on my desk, without bending all the wires awkwardly.\n\n<img alt=\"The whole Atari 800 and SIO2Pi setup sitting on my table\" src=\"image_13.jpg\" id=\"thumbnail\" />\n\n## Next steps\n\nThis setup works well enough. The main drawback is that I have to ssh into the Raspberry Pi and run sio2bsd manually to make it available for loading. And, if I want to switch to using it as a modem from a term program, I have to kill sio2bsd and start up tcpser.\n\n**Adding a display or web interface:** The Raspberry Pi isn’t hooked up to a monitor - and I don’t really want to devote one to it. I could add some kind of small touchscreen or text display. It would also be nice to have a web interface I could hit from my phone. Maybe use that to select disk images and switch into terminal mode, do all the process management of sio2bsd and tcpser in the background with node.js. So, there’s a project for the future.\n\n**Using an ESP8266:** I'm toying with the idea of exploring whether an ESP8266 - or some other small board - would be up to snuff for this project. [I had fun using one to build my wifi pumpkin](https://blog.lmorchard.com/2018/02/08/pumpkin/), so it could be fun for this too. That would take me learning a lot more about the SIO data protocols, though. Luckily, I have [the source code for sio2bsd](https://github.com/TheMontezuma/SIO2BSD), so I have a starting point. But, the key to this SIO2Pi project was that I basically just glued things together and they worked without me entirely understanding the parts.\n\n**Calling more BBSes & writing my own stuff:** Beyond just digging into old software, I’m not sure where I’m going with this stuff next. I’ll probably keep calling some BBSes. I’ve also got a kind of masochistic notion to fetch some old computer magazines and try some of the type-in programs for old time’s sake. Maybe I’ll poke around with exploring the hardware and writing my own games. I haven't tried it, but it seems like this rig should be able to *save* to disk images, too.\n\n**A better case:** I could also explore 3D printing a case that combines all this stuff into a tidy little module with an SIO socket (or two for daisy chaining) rather than using a butchered old cable. I've also read about folks embedding this kind of hardware directly into the old computer - but I like this stuff to be easily reversible & non-destructive, so I probably won't try that.\n\nOr, you know, maybe I’ll move on from this [serial enthusiasm](https://blog.lmorchard.com/2006/05/26/confessions-of-a-serial-enthusiast/) and let it hang out in my office for a few more years. Either way, it’s been a quick & fun project to revive this old machine and get a look a some new-to-me software that I never had a chance to see back in the day.\n\n[modeline]: # ( vim: set wrap linebreak nolist wrapmargin=5 syntax=markdown textwidth=78 formatoptions-=t: )\n[modeline]: # ( vim: set wrap linebreak nolist wrapmargin=5 syntax=markdown textwidth=78 formatoptions-=t: )\n",
    "parentPath": "../blog.lmorchard.com/posts/2018-03-01-sio2pi",
    "path": "2018/03/01/sio2pi",
    "thumbnail": "/blog.lmorchard.com/2018/03/01/sio2pi/image_13.jpg",
    "summary": "<p><strong>TL;DR</strong>: The first computer I programmed was an Atari 800. I&apos;m using a Raspberry Pi Zero W and a simple serial voltage conversion circuit to load disk images from the internet onto my Atari 800.</p>\n"
  },
  {
    "title": "I Made a WiFi Pumpkin",
    "tags": [
      "diy",
      "hardware",
      "halloween",
      "esp8266",
      "iot"
    ],
    "year": "2018",
    "month": "02",
    "day": "08",
    "isDir": true,
    "slug": "pumpkin",
    "date": "2018-02-08T12:00:00.000Z",
    "postName": "2018-02-08-pumpkin",
    "html": "<p><strong>TL;DR</strong>: I made a wifi pumpkin using an ESP8266 with LED matrix eyes and mouth.\nI added a web-based remote control for my phone using websockets. It was fun!</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>A few years ago, <a href=\"https://twitter.com/lmorchard/status/651958618800177152\">I decided</a> to use some LED matrices to make animated\neyes for a jack-o&#39;-lantern. Not terribly original, but it sounded fun.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Considering getting some LED matrices to make animated eyes &amp; mouth for a jack-o-lantern. Seems like it could be a fun project or a disaster</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/651958618800177152?ref_src=twsrc%5Etfw\">October 8, 2015</a></blockquote>\n\n<h2 id=\"v10-2015\">v1.0 (2015)</h2>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/21954391310/in/datetaken/\" title=\"LED matrix on a Raspberry PI\"><img class=\"inset wide left\" src=\"raspi.jpg\" alt=\"LED matrix on a Raspberry PI\"></a></p>\n<p>My first thought was to use a Raspberry Pi.  It was easy to get an LED matrix\nworking in Python. And, I had a notion to build some kind of remote control\nover wifi. But, it felt like overkill to stuff a whole Linux computer\ninto a gourd. (<a href=\"http://strangehorizons.com/non-fiction/articles/installing-linux-on-a-dead-badger-users-notes/\">A dead badger might work</a>, but this was not that kind\nof project.)</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/21994112010/in/datetaken/\" title=\"LED eyes for Pumpkin\"><img class=\"inset wide left\" src=\"arduino.jpg\" alt=\"LED eyes for Pumpkin\"></a></p>\n<p>That&#39;s when I remembered the Arduino Uno I had stashed in a drawer.  I found\n<a href=\"https://mjanyst.weebly.com/arduino-pumpkin-eyes.html\">this guy&#39;s project</a>, which confirmed I wasn&#39;t the first to try\nthis. But it was nice to start from <a href=\"https://github.com/michaltj/LedEyes/blob/master/LedEyes.ino\">someone else&#39;s code</a>. </p>\n<p>I had a brief go at scripting some animations, which resulted\nin an <a href=\"https://github.com/lmorchard/arduino-sketches/blob/master/googly_eyes/googly_eyes.ino\">over-engineered little sketch</a> that helped me \nexercise my rusty C skills.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/22453913015/in/datetaken/\" title=\"NES pad eyes for Pumpkin\"><img class=\"inset wide left\" src=\"nespad1.jpg\" alt=\"NES pad eyes for Pumpkin\"></a></p>\n<p>From there, I discovered an <a href=\"https://github.com/joshmarinacci/nespad-arduino\">NESPad library</a> that made <a href=\"https://github.com/lmorchard/arduino-sketches/blob/master/nespad_eyes/nespad_eyes.ino\">hooking up a\ncontroller</a> simple. It&#39;s just <a href=\"https://www.allaboutcircuits.com/projects/nes-controller-interface-with-an-arduino-uno/\">a serial interface\npowered by a shift register</a> - pre-teen me would have been impressed that I\nfinally learned how so many buttons worked with so few pins.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/22463866250/in/datetaken/\" title=\"Pumpkin, candy, NES pad\"><img class=\"inset wide left\" src=\"orig-real-pumpkin-3.jpg\" /></a></p>\n<p>When Halloween arrived, I hustled to get it done before dusk: I carved some\nquick square holes for eyes, nose, and mouth - let&#39;s say it&#39;s an 8-bit thing. </p>\n<p>I bundled up the electronics with plastic wrap and crammed the mess into\nthe pumpkin. I strapped the LED matrices in with picture\nwire. The results weren&#39;t too bad in the dark. \nTrick-or-treaters seemed entertained by my cyborg pumpkin buddy as I handed out\ncandy!</p>\n<p>Not long after Halloween, the gourd went downhill fast. Pumpkins are\nnot a good choice of long-term project enclosure. I put it off as long as I could, but\nfinally I had to put on some gloves to rescue my parts from the slimy\nmess. Those parts went in a box and went untouched for the next year. \n<br style=\"clear:both\"></p>\n<h2 id=\"v20-2016\">v2.0 (2016)</h2>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30331621951/in/datetaken/\" title=\"Pumpkin 2.0\"><img class=\"inset wide right\" src=\"pumpkin2-1.jpg\" /></a></p>\n<p>As Halloween approached again, I wanted to give the project another go. I\nfound a foam pumpkin at Target that seemed realistic. A little time at\n<a href=\"https://www.i3detroit.org/\">the local maker space</a> with my Swiss Army knife, and I had a freshly carved\nsynthetic jack-&#39;o-lantern. </p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30380916606/in/datetaken/\" title=\"Pumpkin 2.0\"><img class=\"inset wide right\" src=\"pumpkin2-2.jpg\" /></a></p>\n<p>Rather than glue things together, I just used some gaffer tape inside to hold\nthe eyes in place. I&#39;d planned to add some more LED matrices to give it a mouth,\nbut never quite got around to it. The little guy seems a bit creepy with just a\npair of eyes, though.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30380883136/in/datetaken/\" title=\"Pumpkin 2.0 NES connection\"><img class=\"inset wide right\" src=\"nes-connection.jpg\" alt=\"Pumpkin 2.0 NES connection\"></a></p>\n<p>With a house move in the works, my ambition ran out fast that year. I\ndidn&#39;t make any code changes, but I did have to do some reverse engineering.</p>\n<p>Because, of course, I hadn&#39;t left myself good notes and some of the wires had\ncome undone over the past year.  My poor NES controller was looking sad with\nwires just kind of crammed into it.  But, it still worked.</p>\n<p>I refreshed the thing just enough to make it live to see another day. We\ndidn&#39;t hand out candy that year, though, so the thing just decorated my office\nfor awhile. <br style=\"clear:both\"></p>\n<h2 id=\"v30-2017\">v3.0 (2017)</h2>\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37852469272/in/datetaken/\" title=\"Pumpkin meets hot glue\"><img class=\"inset wide right\" src=\"hot-glue.jpg\" alt=\"Pumpkin meets hot glue\"></a>\n-->\n\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031281868/in/datetaken/\" title=\"20171022_203806\"><img id=\"thumbnail\" class=\"inset wide left\" src=\"pumpkin.jpg\" alt=\"20171022_203806\"></a></p>\n<p>Another Halloween and I felt an urge to get more ambitious: I’d picked up that\nArduino at a Maker Faire back in 2011, pretty far from state of the art these \ndays. </p>\n<p>I’d been reading about the <a href=\"https://www.espressif.com/en/products/hardware/esp8266ex/overview\">ESP8266</a> -\na cheap and tiny WiFi module that had been repurposed for\nmore tinkery things.  In fact, I read that you could even flash unmodified\nArduino sketches onto the thing.</p>\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031428708/in/datetaken/\" title=\"Creepy pumpkin eyes\"><img class=\"inset wide left\" src=\"creepy.jpg\" alt=\"Creepy pumpkin eyes\"></a>\n-->\n\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626526390/in/datetaken/\" title=\"20171019_233614\"><img class=\"inset wide left\" src=\"interior.jpg\" alt=\"20171019_233614\"></a></p>\n<p>So, I ordered <a href=\"http://a.co/8zPcmQ5\">an ESP8266 dev board</a> and four more <a href=\"http://a.co/3Mc3qZZ\">8x8 LED\nmatrices</a> for a mouth.\nIt took me an hour to <a href=\"https://github.com/lmorchard/arduino-sketches/blob/master/nodemcu/nespad_eyes/nespad_eyes.ino\">port my old Arduino sketch over</a>,\nincluding the time to set up the dev stack. The eyes came alive on\nthe new hardware in very short order. Another hour and I had the\nmouth animating.</p>\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37852235042/in/datetaken/\" title=\"20171017_005235\"><img class=\"inset wide left\" src=\"mouth.jpg\" alt=\"20171017_005235\"></a>\n-->\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37173755914/in/datetaken/\" title=\"20171021_230802\"><img class=\"inset wide left\" src=\"missing-column.jpg\" alt=\"20171021_230802\"></a>\n-->\n\n<p>A bit more carving, and I was ready to install the mouth. I switched\nfrom gaffer tape to hot glue to make things more permanent. Alas, somehow I\ndamaged a column of LEDs in the process. But, oh well: I just gave it fangs.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626516700/in/datetaken/\" title=\"20171019_233504\"><img class=\"inset wide left\" src=\"plugs.jpg\" alt=\"20171019_233504\"></a></p>\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626520570/in/datetaken/\" title=\"20171019_233530\"><img class=\"inset wide wide left\" src=\"plugged-in.jpg\" alt=\"20171019_233530\"></a>\n-->\n\n<p>To tidy the whole thing up, I bought extension cables for USB power and the NES\ngamepad. I hacked those up and hot glued them into the back of the pumpkin. </p>\n<p>When I was done, I had no cables trailing out from the inside of the thing. And, I could\nstop shoving bare wires into the end of an NES pad. And, if I wanted to go\ncompletely wireless, I could drop a USB power bank into the top and just\nconnect it from inside.\n<br style=\"clear:both\"></p>\n<h2 id=\"v40-2017\">v4.0 (2017)</h2>\n<p>But, speaking of completely wireless: Back at the start, I&#39;d\nconsidered using a Raspberry Pi.  Given a USB wifi adapter, I could have\nwritten a little web app to use as a remote control for the pumpkin. I still\nwanted to make that happen.</p>\n<p>I knew this ESP8266 thing was handy, but I didn&#39;t realize just how handy until I did some more research. I found an interesting set of libraries to glue together:</p>\n<ul>\n<li><a href=\"https://github.com/esp8266/Arduino\">ESP8266 Arduino core</a> - this let me port my sketch over mostly unmodified</li>\n<li><a href=\"http://esp8266.github.io/Arduino/versions/2.0.0/doc/filesystem.html\">SPIFFS</a> - offers an onboard filesystem in flash memory</li>\n<li><a href=\"https://github.com/esp8266/Arduino/tree/master/libraries/ESP8266WebServer\">ESP8266WebServer</a> - an embedded webserver that <a href=\"https://github.com/esp8266/Arduino/tree/master/libraries/ESP8266WebServer/examples/FSBrowser\">serves up static files from SPIFFS</a> and lets me handle some URL routes with C code</li>\n<li><a href=\"https://github.com/Links2004/arduinoWebSockets\">arduinoWebsockets</a> - websockets server and client libraries</li>\n<li><a href=\"https://github.com/tzapu/WiFiManager\">WiFiManager</a> - code to fire up an temporary Access Point with a captive web portal to bootstrap wifi configuration - great for a device with no screen or keyboard</li>\n</ul>\n<p>Long story short, I used all the above to produce this masterpiece:</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031282388/in/datetaken/\" title=\"Screenshot_20171023-004211\"><img class=\"fullwidth\" src=\"controls.jpg\" alt=\"Screenshot_20171023-004211\"></a></p>\n<p>What you&#39;re looking at is the wifi remote control for my pumpkin. The big yellow square is a virtual touchpad - dragging my finger across it moves the eyeballs. Tapping &quot;Blink&quot; makes the eyes blink, while &quot;Talk&quot; makes the mouth open &amp; close.</p>\n<p>It&#39;s a little web page loaded up from the onboard file system. It connects back to a websocket server that <a href=\"https://github.com/lmorchard/arduino-sketches/blob/master/nodemcu/nespad_eyes/nespad_eyes.ino#L324\">accepts a bunch of little commands</a> - which, oddly enough, map directly to NES pad buttons so I could be lazy and just reuse all the same code paths.</p>\n<p>Building this went way easier than I expected. Sure, it&#39;s embarassing code that anyone sensible would shred in a code review. But, it was fun hacking and works pretty much like I hoped it would. In particular, I was surprised at how responsive it ended up being. Without any optimization, it follows my taps and drags without noticible lag.</p>\n<p>So, for another year, I sat next to an animated glowing pumpkin while I handed\nout candy. But this time, I played amateur ventriloquist and had the thing\ntalking to kids while I prodded at my cell phone. Pretty awkward and nerdy, but\nI think some folks appreciated it. They humored me, at least.</p>\n<h2 id=\"v50-whats-next\">v5.0? What&#39;s next?</h2>\n<p>A few months later, this project is lying fallow. It’s on display in my office, where I can watch the semi-random idle gibbering whenever I like. And though I haven&#39;t gotten back to any ESP8266 tinkering since October, I&#39;m still kind of musing over what I could hack together next.</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37885815451/in/datetaken/\" title=\"20171023_144656\"><img class=\"fullwidth\" src=\"in-office.jpg\" alt=\"20171023_144656\"></a></p>\n<p>It feels weird to say it, but this project might be done: this pumpkin seems pretty close to my original idea. </p>\n<p>I’ve mused about maybe building some sort of voice assistant into it: talk to the pumpkin, control things around the house, hear about the weather, order it to fire candy into kids’ bags with tiny trebuchets - who knows?</p>\n<p>I could upgrade from LED matrices to <a href=\"https://learn.adafruit.com/animated-electronic-eyes-using-teensy-3-1/overview\">full-blown OLED screens</a>. Though, if I did that, I&#39;ve got a notion to build myself a replica of 790 from Lexx. I&#39;d probably regret it, but he seems more my kind of personal assistant than current offerings like Alexa or Siri:</p>\n<div style=\"position: relative; padding-bottom: 56.25%;\">\n  <iframe class=\"lazyload\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"\" data-src=\"https://www.youtube.com/embed/s8d1mfLa5Vk\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe>\n</div>\n\n<p>I&#39;ve also been thinking bigger: Like, what if I turned my <em>house</em> into an animated character? Combine some <a href=\"https://www.itead.cc/sonoff-wifi-wireless-switch.html\">ESP8266&#39;s with AC relays</a> and orchestrate strings of holiday lights into something animated? I could be <em>that</em> guy on the block!</p>\n<p>Anyway, let me know what you think!</p>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "body": "**TL;DR**: I made a wifi pumpkin using an ESP8266 with LED matrix eyes and mouth.\nI added a web-based remote control for my phone using websockets. It was fun!\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nA few years ago, [I decided][pumpkintweet] to use some LED matrices to make animated\neyes for a jack-o'-lantern. Not terribly original, but it sounded fun.\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Considering getting some LED matrices to make animated eyes &amp; mouth for a jack-o-lantern. Seems like it could be a fun project or a disaster</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/651958618800177152?ref_src=twsrc%5Etfw\">October 8, 2015</a></blockquote>\n\n[pumpkintweet]: https://twitter.com/lmorchard/status/651958618800177152\n\n## v1.0 (2015)\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/21954391310/in/datetaken/\" title=\"LED matrix on a Raspberry PI\"><img class=\"inset wide left\" src=\"raspi.jpg\" alt=\"LED matrix on a Raspberry PI\"></a>\n\nMy first thought was to use a Raspberry Pi.  It was easy to get an LED matrix\nworking in Python. And, I had a notion to build some kind of remote control\nover wifi. But, it felt like overkill to stuff a whole Linux computer\ninto a gourd. ([A dead badger might work][badger], but this was not that kind\nof project.)\n\n[badger]: http://strangehorizons.com/non-fiction/articles/installing-linux-on-a-dead-badger-users-notes/\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/21994112010/in/datetaken/\" title=\"LED eyes for Pumpkin\"><img class=\"inset wide left\" src=\"arduino.jpg\" alt=\"LED eyes for Pumpkin\"></a>\n\nThat's when I remembered the Arduino Uno I had stashed in a drawer.  I found\n[this guy's project][otherpump], which confirmed I wasn't the first to try\nthis. But it was nice to start from [someone else's code][workingcode]. \n\n[workingcode]: https://github.com/michaltj/LedEyes/blob/master/LedEyes.ino\n[otherpump]:  https://mjanyst.weebly.com/arduino-pumpkin-eyes.html\n\nI had a brief go at scripting some animations, which resulted\nin an [over-engineered little sketch][overengineered] that helped me \nexercise my rusty C skills.\n\n[overengineered]: https://github.com/lmorchard/arduino-sketches/blob/master/googly_eyes/googly_eyes.ino\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/22453913015/in/datetaken/\" title=\"NES pad eyes for Pumpkin\"><img class=\"inset wide left\" src=\"nespad1.jpg\" alt=\"NES pad eyes for Pumpkin\"></a>\n\nFrom there, I discovered an [NESPad library][] that made [hooking up a\ncontroller][hookingup] simple. It's just [a serial interface\npowered by a shift register][neshow] - pre-teen me would have been impressed that I\nfinally learned how so many buttons worked with so few pins.\n\n[neshow]: https://www.allaboutcircuits.com/projects/nes-controller-interface-with-an-arduino-uno/\n[hookingup]: https://github.com/lmorchard/arduino-sketches/blob/master/nespad_eyes/nespad_eyes.ino\n[nespad library]: https://github.com/joshmarinacci/nespad-arduino \n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/22463866250/in/datetaken/\" title=\"Pumpkin, candy, NES pad\"><img class=\"inset wide left\" src=\"orig-real-pumpkin-3.jpg\" /></a>\n\nWhen Halloween arrived, I hustled to get it done before dusk: I carved some\nquick square holes for eyes, nose, and mouth - let's say it's an 8-bit thing. \n\nI bundled up the electronics with plastic wrap and crammed the mess into\nthe pumpkin. I strapped the LED matrices in with picture\nwire. The results weren't too bad in the dark. \nTrick-or-treaters seemed entertained by my cyborg pumpkin buddy as I handed out\ncandy!\n\nNot long after Halloween, the gourd went downhill fast. Pumpkins are\nnot a good choice of long-term project enclosure. I put it off as long as I could, but\nfinally I had to put on some gloves to rescue my parts from the slimy\nmess. Those parts went in a box and went untouched for the next year. \n<br style=\"clear:both\">\n\n## v2.0 (2016)\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30331621951/in/datetaken/\" title=\"Pumpkin 2.0\"><img class=\"inset wide right\" src=\"pumpkin2-1.jpg\" /></a>\n\nAs Halloween approached again, I wanted to give the project another go. I\nfound a foam pumpkin at Target that seemed realistic. A little time at\n[the local maker space][i3] with my Swiss Army knife, and I had a freshly carved\nsynthetic jack-'o-lantern. \n\n[i3]: https://www.i3detroit.org/\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30380916606/in/datetaken/\" title=\"Pumpkin 2.0\"><img class=\"inset wide right\" src=\"pumpkin2-2.jpg\" /></a>\n\nRather than glue things together, I just used some gaffer tape inside to hold\nthe eyes in place. I'd planned to add some more LED matrices to give it a mouth,\nbut never quite got around to it. The little guy seems a bit creepy with just a\npair of eyes, though.\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/30380883136/in/datetaken/\" title=\"Pumpkin 2.0 NES connection\"><img class=\"inset wide right\" src=\"nes-connection.jpg\" alt=\"Pumpkin 2.0 NES connection\"></a>\n\nWith a house move in the works, my ambition ran out fast that year. I\ndidn't make any code changes, but I did have to do some reverse engineering.\n\nBecause, of course, I hadn't left myself good notes and some of the wires had\ncome undone over the past year.  My poor NES controller was looking sad with\nwires just kind of crammed into it.  But, it still worked.\n\nI refreshed the thing just enough to make it live to see another day. We\ndidn't hand out candy that year, though, so the thing just decorated my office\nfor awhile. <br style=\"clear:both\">\n\n## v3.0 (2017)\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37852469272/in/datetaken/\" title=\"Pumpkin meets hot glue\"><img class=\"inset wide right\" src=\"hot-glue.jpg\" alt=\"Pumpkin meets hot glue\"></a>\n-->\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031281868/in/datetaken/\" title=\"20171022_203806\"><img id=\"thumbnail\" class=\"inset wide left\" src=\"pumpkin.jpg\" alt=\"20171022_203806\"></a>\n\nAnother Halloween and I felt an urge to get more ambitious: I’d picked up that\nArduino at a Maker Faire back in 2011, pretty far from state of the art these \ndays. \n\nI’d been reading about the [ESP8266][] -\na cheap and tiny WiFi module that had been repurposed for\nmore tinkery things.  In fact, I read that you could even flash unmodified\nArduino sketches onto the thing.\n\n[esp8266]: https://www.espressif.com/en/products/hardware/esp8266ex/overview\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031428708/in/datetaken/\" title=\"Creepy pumpkin eyes\"><img class=\"inset wide left\" src=\"creepy.jpg\" alt=\"Creepy pumpkin eyes\"></a>\n-->\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626526390/in/datetaken/\" title=\"20171019_233614\"><img class=\"inset wide left\" src=\"interior.jpg\" alt=\"20171019_233614\"></a>\n\nSo, I ordered [an ESP8266 dev board][nodemcu] and four more [8x8 LED\nmatrices][matrix] for a mouth.\nIt took me an hour to [port my old Arduino sketch over][ported],\nincluding the time to set up the dev stack. The eyes came alive on\nthe new hardware in very short order. Another hour and I had the\nmouth animating.\n\n[nodemcu]: http://a.co/8zPcmQ5 \n[matrix]: http://a.co/3Mc3qZZ\n[ported]: https://github.com/lmorchard/arduino-sketches/blob/master/nodemcu/nespad_eyes/nespad_eyes.ino\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37852235042/in/datetaken/\" title=\"20171017_005235\"><img class=\"inset wide left\" src=\"mouth.jpg\" alt=\"20171017_005235\"></a>\n-->\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37173755914/in/datetaken/\" title=\"20171021_230802\"><img class=\"inset wide left\" src=\"missing-column.jpg\" alt=\"20171021_230802\"></a>\n-->\n\nA bit more carving, and I was ready to install the mouth. I switched\nfrom gaffer tape to hot glue to make things more permanent. Alas, somehow I\ndamaged a column of LEDs in the process. But, oh well: I just gave it fangs.\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626516700/in/datetaken/\" title=\"20171019_233504\"><img class=\"inset wide left\" src=\"plugs.jpg\" alt=\"20171019_233504\"></a>\n\n<!--\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37626520570/in/datetaken/\" title=\"20171019_233530\"><img class=\"inset wide wide left\" src=\"plugged-in.jpg\" alt=\"20171019_233530\"></a>\n-->\n\nTo tidy the whole thing up, I bought extension cables for USB power and the NES\ngamepad. I hacked those up and hot glued them into the back of the pumpkin. \n\nWhen I was done, I had no cables trailing out from the inside of the thing. And, I could\nstop shoving bare wires into the end of an NES pad. And, if I wanted to go\ncompletely wireless, I could drop a USB power bank into the top and just\nconnect it from inside.\n<br style=\"clear:both\">\n\n## v4.0 (2017)\n\nBut, speaking of completely wireless: Back at the start, I'd\nconsidered using a Raspberry Pi.  Given a USB wifi adapter, I could have\nwritten a little web app to use as a remote control for the pumpkin. I still\nwanted to make that happen.\n\nI knew this ESP8266 thing was handy, but I didn't realize just how handy until I did some more research. I found an interesting set of libraries to glue together:\n\n* [ESP8266 Arduino core][espcore] - this let me port my sketch over mostly unmodified\n* [SPIFFS][] - offers an onboard filesystem in flash memory\n* [ESP8266WebServer][] - an embedded webserver that [serves up static files from SPIFFS][servestatic] and lets me handle some URL routes with C code\n* [arduinoWebsockets][] - websockets server and client libraries\n* [WiFiManager][] - code to fire up an temporary Access Point with a captive web portal to bootstrap wifi configuration - great for a device with no screen or keyboard\n\n[espcore]: https://github.com/esp8266/Arduino\n[SPIFFS]:http://esp8266.github.io/Arduino/versions/2.0.0/doc/filesystem.html \n[servestatic]: https://github.com/esp8266/Arduino/tree/master/libraries/ESP8266WebServer/examples/FSBrowser \n[arduinoWebsockets]: https://github.com/Links2004/arduinoWebSockets\n[ESP8266WebServer]: https://github.com/esp8266/Arduino/tree/master/libraries/ESP8266WebServer\n[WiFiManager]: https://github.com/tzapu/WiFiManager\n\nLong story short, I used all the above to produce this masterpiece:\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/24031282388/in/datetaken/\" title=\"Screenshot_20171023-004211\"><img class=\"fullwidth\" src=\"controls.jpg\" alt=\"Screenshot_20171023-004211\"></a>\n\nWhat you're looking at is the wifi remote control for my pumpkin. The big yellow square is a virtual touchpad - dragging my finger across it moves the eyeballs. Tapping \"Blink\" makes the eyes blink, while \"Talk\" makes the mouth open & close.\n\nIt's a little web page loaded up from the onboard file system. It connects back to a websocket server that [accepts a bunch of little commands][wscmds] - which, oddly enough, map directly to NES pad buttons so I could be lazy and just reuse all the same code paths.\n\n[wscmds]: https://github.com/lmorchard/arduino-sketches/blob/master/nodemcu/nespad_eyes/nespad_eyes.ino#L324 \n\nBuilding this went way easier than I expected. Sure, it's embarassing code that anyone sensible would shred in a code review. But, it was fun hacking and works pretty much like I hoped it would. In particular, I was surprised at how responsive it ended up being. Without any optimization, it follows my taps and drags without noticible lag.\n\nSo, for another year, I sat next to an animated glowing pumpkin while I handed\nout candy. But this time, I played amateur ventriloquist and had the thing\ntalking to kids while I prodded at my cell phone. Pretty awkward and nerdy, but\nI think some folks appreciated it. They humored me, at least.\n\n## v5.0? What's next?\n\nA few months later, this project is lying fallow. It’s on display in my office, where I can watch the semi-random idle gibbering whenever I like. And though I haven't gotten back to any ESP8266 tinkering since October, I'm still kind of musing over what I could hack together next.\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/37885815451/in/datetaken/\" title=\"20171023_144656\"><img class=\"fullwidth\" src=\"in-office.jpg\" alt=\"20171023_144656\"></a>\n\nIt feels weird to say it, but this project might be done: this pumpkin seems pretty close to my original idea. \n\nI’ve mused about maybe building some sort of voice assistant into it: talk to the pumpkin, control things around the house, hear about the weather, order it to fire candy into kids’ bags with tiny trebuchets - who knows?\n\nI could upgrade from LED matrices to [full-blown OLED screens][oled]. Though, if I did that, I've got a notion to build myself a replica of 790 from Lexx. I'd probably regret it, but he seems more my kind of personal assistant than current offerings like Alexa or Siri:\n\n<div style=\"position: relative; padding-bottom: 56.25%;\">\n  <iframe class=\"lazyload\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src=\"\" data-src=\"https://www.youtube.com/embed/s8d1mfLa5Vk\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen></iframe>\n</div>\n\n[oled]: https://learn.adafruit.com/animated-electronic-eyes-using-teensy-3-1/overview\n\nI've also been thinking bigger: Like, what if I turned my *house* into an animated character? Combine some [ESP8266's with AC relays][sonoff] and orchestrate strings of holiday lights into something animated? I could be *that* guy on the block!\n\nAnyway, let me know what you think!\n\n[sonoff]: https://www.itead.cc/sonoff-wifi-wireless-switch.html\n\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "parentPath": "../blog.lmorchard.com/posts/2018-02-08-pumpkin",
    "path": "2018/02/08/pumpkin",
    "thumbnail": "/blog.lmorchard.com/2018/02/08/pumpkin/pumpkin.jpg",
    "summary": "<p><strong>TL;DR</strong>: I made a wifi pumpkin using an ESP8266 with LED matrix eyes and mouth.\nI added a web-based remote control for my phone using websockets. It was fun!</p>\n"
  },
  {
    "title": "Making of the GameChord",
    "tags": [
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "thumbnail": "/blog.lmorchard.com/uploads/2016/gamechord/thumbnail.jpg",
    "year": "2016",
    "month": "08",
    "day": "29",
    "isDir": false,
    "slug": "gamechord",
    "date": "2016-08-29T12:00:00.000Z",
    "postName": "2016-08-29-gamechord",
    "html": "<p><strong>TL;DR</strong>: I made a USB keypad that&#39;s good for gaming and typing entirely with\none hand.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>So, remember back in February when I said that <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">keyboard hacking seems like\nfun</a>?  Well, I\nfinished this GameChord thing back in July after about 5 months of occasional\nwork. But, I&#39;ve been too busy <a href=\"https://twitter.com/lmorchard/status/770771394816729088\">drinking booze\nand playing video games</a> \nto get my butt in a chair and write about it.</p>\n<p>Let&#39;s see if I can fix that now...</p>\n<h2 id=\"the-design\">The design</h2>\n<p><a href=\"http://www.keyboard-layout-editor.com/##@_name=gamechord&amp;author=lmorchard;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@_r:35&amp;rx:2.5&amp;ry:3.5&amp;y:-1&amp;x:1;&amp;=a&amp;=b&amp;=c\"><img class=\"inset left\"\nsrc=\"/uploads/2016/gamechord/keyboard-layout.png\"></a></p>\n<p>I started doodling with key layouts and <a href=\"http://www.keyboard-layout-editor.com/##@_name=gamechord&amp;author=lmorchard;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@_r:35&amp;rx:2.5&amp;ry:3.5&amp;y:-1&amp;x:1;&amp;=a&amp;=b&amp;=c\">came up with\nthis</a>. Only 18 switches, but enough for gaming. At the\ntime, I was putting a lot of hours into Elite\nDangerous, so this felt promising as a spaceship control pad.<br><a href=\"https://www.flickr.com/photos/deusx/24872268889/\"><img class=\"inset right\" src=\"/uploads/2016/gamechord/paper-planning.jpg\"></a></p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24781232904/in/datetaken-public/\"><img class=\"inset right\" src=\"/uploads/2016/gamechord/cats-happen.jpg\"></a></p>\n<p>Over on <a href=\"http://builder.swillkb.com/\">builder.swillkb.com</a>, I plonked in the JSON from <a href=\"http://www.keyboard-layout-editor.com/##@_name=gamechord&amp;author=lmorchard;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@_r:35&amp;rx:2.5&amp;ry:3.5&amp;y:-1&amp;x:1;&amp;=a&amp;=b&amp;=c\">Keyboard\nLayout Editor</a> and came up with some SVG files that printed\nup nicely.</p>\n<p>That gave me a paper mockup of a mounting plate for key switches. I had some\nclear keycaps, so I dropped them onto the paper to get a sense for how it\nwould feel under my hand.</p>\n<p>Of course, cats happen - so those keycaps didn&#39;t stay put for very long. But,\nthat&#39;s okay. Nothing wandered off too far, and I got what I needed from\nthe mess on my desk.</p>\n<h2 id=\"making-the-case\">Making the case</h2>\n<p>Back when <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">I first started thinking about building a\nkeyboard</a>, I\nassumed I&#39;d send off whatever design files I came up with to a place\nlike <a href=\"https://www.ponoko.com/\">Ponoko</a> and get the mounting plate made for me.</p>\n<p>Prices at those places were just a bit higher than I liked, though. I also\nsuspected things wouldn&#39;t work with my first attempt. I wanted to be able\nto iterate without it taking days or weeks to learn from my mistakes\nand refine.</p>\n<p>That&#39;s when I remembered <a href=\"https://i3detroit.org\">i3Detroit</a> was just down the road. I&#39;d been\nmeaning to get over there for a couple of years: Among other things, the space\nhas <a href=\"https://www.i3detroit.org/wiki/Category:Laser_Cutter\">nice laser cutters</a> that I really wish I&#39;d used <a href=\"http://blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/\">back when\nI butchered some plastic to make a terrible PC monitor case</a>. </p>\n<p>A month or so later, I&#39;d gotten through the new member onboarding process\nand a few training sessions with the laser cutter. I had some\nacrylic sheets still on hand, so I gave my design a shot:</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/25839524664/\" title=\"Cutting a keyboard mounting plate on a laser cutter\"><img src=\"https://c1.staticflickr.com/2/1506/25839524664_3250860a23_c.jpg\" width=\"800\" height=\"450\" alt=\"Cutting a keyboard mounting plate on a laser cutter\"></a></p>\n<p>Pretty sure I had the power too high and the speed too low for the run\nin this video. But, the result was not too bad for a first attempt.  I had a\nfew dozen Cherry MX Clear switches to play with, so I snapped them into the\nplate and put on the keycaps I&#39;d used in the paper mockup earlier:</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/clear-keycaps.jpg\">\n\n<p>Still lots of work ahead, but I was feeling pretty accomplished after taking\nthis little glamour shot. I even took it into an <a href=\"https://i3detroit.org\">i3Detroit</a> member meeting\nfor show &amp; tell.</p>\n<h2 id=\"re-making-the-case\">Re-making the case</h2>\n<p>At this point, I&#39;d already heard the term &quot;kerf&quot;. Like a saw blade, the laser\nhas a width that destroys material while cutting. You want that on the\n<em>inside</em> edge of something like a key switch mounting hole, in order to keep\nthe dimensions correct. Unlike a blade, the laser is a cylindrical\nbeam that passes through a lens to form <a href=\"http://www.buildlog.net/blog/2013/05/why-are-my-laser-cut-edges-not-straight/\">something like an\nhourglass</a>. So, the\nkerf&#39;s shape depends on the lens focal length and the conical section that\nintersects with the material.</p>\n<p>Well, I didn&#39;t account for the kerf well enough in my first plate. All the key\nswitches were wobbly. Some would just fall out if I flipped\nthe thing over. Time for some of those iterations I\nfigured I&#39;d have to end up doing.</p>\n<img class=\"inset wide right\" src=\"/uploads/2016/gamechord/kerf-is-real.jpg\">\n\n<p>I know the saying is &quot;measure twice, cut once&quot; - but in this case it was\neasier to measure by cutting! I tried mounting holes with a sampling of kerf\nwidths until I found one that matched the key switch tolerances. Not so snug\nthat it cracked the plate, but not so loose that it wiggled or fell out. </p>\n<p>Once I found a good laser focus and figured out the kerf, I\nattacked another sheet of acrylic with the laser to produce another\niteration of the case.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/26975072884/\"><img class=\"fullwidth\" src=\"/uploads/2016/gamechord/glamour-shot.jpg\"></a></p>\n<p>Two changes you might notice: I added slots to glue in some socket\nheaders, so I could unplug or replace the Teensy without soldering. I also found some\n<a href=\"http://dro.ps/b/x3g0KCy\">relegendable keycaps</a> on Massdrop - they have little removable covers that\ntake 14mm paper squares. I figured that would come in handy for crazy\nkey layouts I might come up with.</p>\n<h2 id=\"wiring-up-the-key-matrix\">Wiring up the key matrix</h2>\n<p>I haven&#39;t learned how to design circuit boards yet, so I figured I&#39;d just\nhandwire this <a href=\"https://www.youtube.com/watch?v=MrokZ1afnVg\">like I saw in the video</a>. Only 18 switches, so\nhow bad could it be?\nTurns out, it&#39;s rather annoying. Interesting exercise with my terrible old\nRadio Shack soldering iron. </p>\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/matrix-wired-up.jpg\">\n\n\n<p>I think I&#39;d much rather get over that PCB fabrication hurdle for when I try\nscaling this up to a 60% keyboard like my HHKB.</p>\n<p>The technique here involves first building up rows of diodes across the\nright-hand pin of every key switch. The diodes serve to prevent <a href=\"https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\">ghosting when\nmultiple keys are pressed</a>. </p>\n<p>Then, I stripped sections of wires to\nrun as columns down the left-hand pin of the switches. </p>\n<p>The remaining\ninsulation ensures the column wires don&#39;t short against the row diodes.</p>\n<h2 id=\"wiring-up-the-teensy\">Wiring up the Teensy</h2>\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/teensy-wired-up.jpg\">\n\n<p>This matrix gives me 4 rows (counting the thumb switches) and 5 columns - or 9\nI/O pins to scan 18 switches.</p>\n<p>Except for <a href=\"https://geekhack.org/index.php?topic=72804.0\">magical PD6</a> - which is hardwired to an onboard LED - just\nabout every pin is fair game on the Teensy for rows or columns. </p>\n<p>So, I tried to pick a set that would be easiest to route wires. Since this\ncase is transparent, I wanted to keep things visually interesting with\ndifferent colored wires and a neat shape to the runs.</p>\n<p>Of course, I botched things a bit and marred the acrylic by splashing\nsolder and slipping with the iron a few times. But, maybe no one will really\nnotice.</p>\n<p>If I had to do this over again - and I <em>still</em> hadn&#39;t learned how to make a\nPCB - I&#39;d probably try using something thinner like <a href=\"https://www.adafruit.com/product/1446\">30AWG repair\nwire</a>. That seems like it would thread through the spaces much\nbetter, which would be even more important for a board with many more\nswitches. </p>\n<h2 style=\"clear: both\">Programming the Teensy</h2>\n\n<p>I based <a href=\"https://github.com/lmorchard/gamechord\">the GameChord firmware</a> on the great <a href=\"https://github.com/tmk/tmk_keyboard\">tmk\nfirmware</a> that seems popular on mech keyboard forums.</p>\n<p>Building <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/matrix.c\">the matrix</a> was easy: The firmware scans through rows (DF0, DF1,\nDF4, and DF5) by pulling each low in turn. The columns (DB4, DB5, DB6, DF7,\nand DF6) are set as &quot;active low&quot; pins - which means keys pressed in the\ncurrent scan row get connected to ground and read as signals. So,\nI wrote the functions to manipulate &amp; read the appropriate row &amp; column pins,\nrespectively. </p>\n<p>It was almost <em>too</em> easy:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Holy crap. My attempt at setting up firmware for my newly wired DIY keypad worked first time. How does this happen. <a href=\"https://t.co/xWESzku4Lp\">https://t.co/xWESzku4Lp</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/746518856328372225\">June 25, 2016</a></blockquote>\n\n<p>From there, I built <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_plain.c\">a dead simple key map</a> with just enough\nkeys to play <a href=\"https://playoverwatch.com/en-us/\">Overwatch</a>:</p>\n<pre><code class=\"language-c\">#include &quot;keymap_common.h&quot;\n\nconst uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    KEYMAP( ESC,   1,    2,    3,    T, \\\n            TAB,   Q,    W,    E,    R, \\\n           LSFT,   A,    S,    D,    F, \\\n             NO,  NO, LCTL,  SPC,    C),\n};\nconst uint16_t PROGMEM fn_actions[] = {};</code></pre>\n<p>I got it all working and had myself a nice evening of pushing carts and taking\nobjectives.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/test-run-on-gaming-station.jpg\">\n\n<h2 id=\"going-crazy-with-chording\">Going crazy with chording</h2>\n<p>I had all these <a href=\"http://dro.ps/b/x3g0KCy\">relegendable keycaps</a> and this crazy flexible <a href=\"https://github.com/tmk/tmk_keyboard\">tmk\nfirmware</a> - so I decided to try implementing <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c\">a complex and fully impractical\nkeymap based on chords with the thumb keys</a>.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/finished-key-legends.jpg\">\n\n<p>Given two thumb keys in combination, I can get 4 layers out of the other 15\nkeys - for a total of 60 keys. The firmware also <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c#L43\">lets me distinguish\nbetween keys held or just tapped</a>, which gives me a few more layers or\nmodifier keys.</p>\n<p>Long story short, I can get most of the functionality of a regular keyboard\nout of just one hand. All I have to do is just get used to putting my left\nhand through some very awkward and uncomfortable contortions until I get up to\nfull typing speed!</p>\n<p><a href=\"http://blog.lmorchard.com/2016/02/05/steam-controller/\">As I&#39;ve written before</a>, I do really like odd input devices.\nBut, this got old fast. This isn&#39;t so much a practical peripheral as a thing I\ndid because I could. It gave me an excuse to explore the firmware more\nand to use Inkscape to design some legends for my nifty keycaps.</p>\n<h2 id=\"showing-it-off\">Showing it off</h2>\n<p>And just to wrap things up, this happened:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I even have a project out in the <a href=\"https://twitter.com/i3Detroit\">@i3Detroit</a> tent at <a href=\"https://twitter.com/hashtag/MakerFaireDetroit?src=hash\">#MakerFaireDetroit</a> ! <a href=\"https://t.co/v0goD3DCBk\">pic.twitter.com/v0goD3DCBk</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/759400946514427904\">July 30, 2016</a></blockquote>\n\n<p>This was the first summer I went to <a href=\"http://www.makerfairedetroit.com/\">Maker Faire Detroit</a> as a Maker. I\nhelped for a bit at the <a href=\"https://i3detroit.org\">i3Detroit</a> tent, mainly just standing and smiling\nat the front table as folks walked in. But, I had my little keyboard out there\non a table, with a project card and everything.</p>\n<p>It and I were only there for a handful of hours, but it&#39;s pretty satisfying to\nhave actually gotten this thing done!</p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I made a USB keypad that's good for gaming and typing entirely with\none hand.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nSo, remember back in February when I said that [keyboard hacking seems like\nfun][keyboardhacking]?  Well, I\nfinished this GameChord thing back in July after about 5 months of occasional\nwork. But, I've been too busy [drinking booze\nand playing video games](https://twitter.com/lmorchard/status/770771394816729088) \nto get my butt in a chair and write about it.\n\nLet's see if I can fix that now...\n\n[keyboardhacking]: http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\n\n## The design\n\n[<img class=\"inset left\"\nsrc=\"/uploads/2016/gamechord/keyboard-layout.png\">][layoutpermalink]\n\nI started doodling with key layouts and [came up with\nthis][layoutpermalink]. Only 18 switches, but enough for gaming. At the\ntime, I was putting a lot of hours into Elite\nDangerous, so this felt promising as a spaceship control pad.  \n[<img class=\"inset right\" src=\"/uploads/2016/gamechord/paper-planning.jpg\">](https://www.flickr.com/photos/deusx/24872268889/)\n\n[<img class=\"inset right\" src=\"/uploads/2016/gamechord/cats-happen.jpg\">](https://www.flickr.com/photos/deusx/24781232904/in/datetaken-public/)\n\nOver on [builder.swillkb.com][builder], I plonked in the JSON from [Keyboard\nLayout Editor][layoutpermalink] and came up with some SVG files that printed\nup nicely.\n\nThat gave me a paper mockup of a mounting plate for key switches. I had some\nclear keycaps, so I dropped them onto the paper to get a sense for how it\nwould feel under my hand.\n\nOf course, cats happen - so those keycaps didn't stay put for very long. But,\nthat's okay. Nothing wandered off too far, and I got what I needed from\nthe mess on my desk.\n\n[builder]: http://builder.swillkb.com/\n\n## Making the case\n\nBack when [I first started thinking about building a\nkeyboard][keyboardhacking], I\nassumed I'd send off whatever design files I came up with to a place\nlike [Ponoko](https://www.ponoko.com/) and get the mounting plate made for me.\n\nPrices at those places were just a bit higher than I liked, though. I also\nsuspected things wouldn't work with my first attempt. I wanted to be able\nto iterate without it taking days or weeks to learn from my mistakes\nand refine.\n\nThat's when I remembered [i3Detroit][] was just down the road. I'd been\nmeaning to get over there for a couple of years: Among other things, the space\nhas [nice laser cutters][lasercutters] that I really wish I'd used [back when\nI butchered some plastic to make a terrible PC monitor case][monitorcase]. \n\n[lasercutters]: https://www.i3detroit.org/wiki/Category:Laser_Cutter\n[monitorcase]: http://blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/\n[i3Detroit]: https://i3detroit.org\n\nA month or so later, I'd gotten through the new member onboarding process\nand a few training sessions with the laser cutter. I had some\nacrylic sheets still on hand, so I gave my design a shot:\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/25839524664/\" title=\"Cutting a keyboard mounting plate on a laser cutter\"><img src=\"https://c1.staticflickr.com/2/1506/25839524664_3250860a23_c.jpg\" width=\"800\" height=\"450\" alt=\"Cutting a keyboard mounting plate on a laser cutter\"></a>\n\nPretty sure I had the power too high and the speed too low for the run\nin this video. But, the result was not too bad for a first attempt.  I had a\nfew dozen Cherry MX Clear switches to play with, so I snapped them into the\nplate and put on the keycaps I'd used in the paper mockup earlier:\n\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/clear-keycaps.jpg\">\n\nStill lots of work ahead, but I was feeling pretty accomplished after taking\nthis little glamour shot. I even took it into an [i3Detroit][] member meeting\nfor show & tell.\n\n## Re-making the case\n\nAt this point, I'd already heard the term \"kerf\". Like a saw blade, the laser\nhas a width that destroys material while cutting. You want that on the\n*inside* edge of something like a key switch mounting hole, in order to keep\nthe dimensions correct. Unlike a blade, the laser is a cylindrical\nbeam that passes through a lens to form [something like an\nhourglass][beamshape]. So, the\nkerf's shape depends on the lens focal length and the conical section that\nintersects with the material.\n\n[beamshape]: http://www.buildlog.net/blog/2013/05/why-are-my-laser-cut-edges-not-straight/\n\nWell, I didn't account for the kerf well enough in my first plate. All the key\nswitches were wobbly. Some would just fall out if I flipped\nthe thing over. Time for some of those iterations I\nfigured I'd have to end up doing.\n\n<img class=\"inset wide right\" src=\"/uploads/2016/gamechord/kerf-is-real.jpg\">\n\nI know the saying is \"measure twice, cut once\" - but in this case it was\neasier to measure by cutting! I tried mounting holes with a sampling of kerf\nwidths until I found one that matched the key switch tolerances. Not so snug\nthat it cracked the plate, but not so loose that it wiggled or fell out. \n\nOnce I found a good laser focus and figured out the kerf, I\nattacked another sheet of acrylic with the laser to produce another\niteration of the case.\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/glamour-shot.jpg\">](https://www.flickr.com/photos/deusx/26975072884/)\n\nTwo changes you might notice: I added slots to glue in some socket\nheaders, so I could unplug or replace the Teensy without soldering. I also found some\n[relegendable keycaps][] on Massdrop - they have little removable covers that\ntake 14mm paper squares. I figured that would come in handy for crazy\nkey layouts I might come up with.\n\n[relegendable keycaps]: http://dro.ps/b/x3g0KCy\n\n## Wiring up the key matrix\n\nI haven't learned how to design circuit boards yet, so I figured I'd just\nhandwire this [like I saw in the video][handwirevideo]. Only 18 switches, so\nhow bad could it be?\nTurns out, it's rather annoying. Interesting exercise with my terrible old\nRadio Shack soldering iron. \n\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/matrix-wired-up.jpg\">\n\n\nI think I'd much rather get over that PCB fabrication hurdle for when I try\nscaling this up to a 60% keyboard like my HHKB.\n\nThe technique here involves first building up rows of diodes across the\nright-hand pin of every key switch. The diodes serve to prevent [ghosting when\nmultiple keys are pressed][ghosting]. \n\nThen, I stripped sections of wires to\nrun as columns down the left-hand pin of the switches. \n\nThe remaining\ninsulation ensures the column wires don't short against the row diodes.\n\n[handwirevideo]: https://www.youtube.com/watch?v=MrokZ1afnVg\n[ghosting]: https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\n\n## Wiring up the Teensy\n\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/teensy-wired-up.jpg\">\n\nThis matrix gives me 4 rows (counting the thumb switches) and 5 columns - or 9\nI/O pins to scan 18 switches.\n\nExcept for [magical PD6][pd6] - which is hardwired to an onboard LED - just\nabout every pin is fair game on the Teensy for rows or columns. \n\nSo, I tried to pick a set that would be easiest to route wires. Since this\ncase is transparent, I wanted to keep things visually interesting with\ndifferent colored wires and a neat shape to the runs.\n\nOf course, I botched things a bit and marred the acrylic by splashing\nsolder and slipping with the iron a few times. But, maybe no one will really\nnotice.\n\nIf I had to do this over again - and I *still* hadn't learned how to make a\nPCB - I'd probably try using something thinner like [30AWG repair\nwire][30awg]. That seems like it would thread through the spaces much\nbetter, which would be even more important for a board with many more\nswitches. \n\n[30awg]: https://www.adafruit.com/product/1446\n\n[pd6]: https://geekhack.org/index.php?topic=72804.0\n\n<h2 style=\"clear: both\">Programming the Teensy</h2>\n\nI based [the GameChord firmware][gamechordfirmware] on the great [tmk\nfirmware][] that seems popular on mech keyboard forums.\n\nBuilding [the matrix][] was easy: The firmware scans through rows (DF0, DF1,\nDF4, and DF5) by pulling each low in turn. The columns (DB4, DB5, DB6, DF7,\nand DF6) are set as \"active low\" pins - which means keys pressed in the\ncurrent scan row get connected to ground and read as signals. So,\nI wrote the functions to manipulate & read the appropriate row & column pins,\nrespectively. \n\nIt was almost *too* easy:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Holy crap. My attempt at setting up firmware for my newly wired DIY keypad worked first time. How does this happen. <a href=\"https://t.co/xWESzku4Lp\">https://t.co/xWESzku4Lp</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/746518856328372225\">June 25, 2016</a></blockquote>\n\nFrom there, I built [a dead simple key map][plainmap] with just enough\nkeys to play [Overwatch][]:\n\n```c\n#include \"keymap_common.h\"\n\nconst uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    KEYMAP( ESC,   1,    2,    3,    T, \\\n            TAB,   Q,    W,    E,    R, \\\n           LSFT,   A,    S,    D,    F, \\\n             NO,  NO, LCTL,  SPC,    C),\n};\nconst uint16_t PROGMEM fn_actions[] = {};\n```\n\nI got it all working and had myself a nice evening of pushing carts and taking\nobjectives.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/test-run-on-gaming-station.jpg\">\n\n[the matrix]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/matrix.c\n[plainmap]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_plain.c\n[gamechordfirmware]: https://github.com/lmorchard/gamechord\n[tmk firmware]: https://github.com/tmk/tmk_keyboard\n[overwatch]: https://playoverwatch.com/en-us/\n\n## Going crazy with chording\n\nI had all these [relegendable keycaps][] and this crazy flexible [tmk\nfirmware][] - so I decided to try implementing [a complex and fully impractical\nkeymap based on chords with the thumb keys][halfqwerty].\n\n[halfqwerty]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c\n\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/finished-key-legends.jpg\">\n\nGiven two thumb keys in combination, I can get 4 layers out of the other 15\nkeys - for a total of 60 keys. The firmware also [lets me distinguish\nbetween keys held or just tapped][taps], which gives me a few more layers or\nmodifier keys.\n\n[taps]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c#L43\n\nLong story short, I can get most of the functionality of a regular keyboard\nout of just one hand. All I have to do is just get used to putting my left\nhand through some very awkward and uncomfortable contortions until I get up to\nfull typing speed!\n\n[As I've written before][steamcontroller], I do really like odd input devices.\nBut, this got old fast. This isn't so much a practical peripheral as a thing I\ndid because I could. It gave me an excuse to explore the firmware more\nand to use Inkscape to design some legends for my nifty keycaps.\n\n[steamcontroller]: http://blog.lmorchard.com/2016/02/05/steam-controller/\n\n## Showing it off\n\nAnd just to wrap things up, this happened:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I even have a project out in the <a href=\"https://twitter.com/i3Detroit\">@i3Detroit</a> tent at <a href=\"https://twitter.com/hashtag/MakerFaireDetroit?src=hash\">#MakerFaireDetroit</a> ! <a href=\"https://t.co/v0goD3DCBk\">pic.twitter.com/v0goD3DCBk</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/759400946514427904\">July 30, 2016</a></blockquote>\n\nThis was the first summer I went to [Maker Faire Detroit][] as a Maker. I\nhelped for a bit at the [i3Detroit][] tent, mainly just standing and smiling\nat the front table as folks walked in. But, I had my little keyboard out there\non a table, with a project card and everything.\n\nIt and I were only there for a handful of hours, but it's pretty satisfying to\nhave actually gotten this thing done!\n\n[maker faire detroit]: http://www.makerfairedetroit.com/\n[laservideo]: https://www.flickr.com/photos/deusx/25839524664/\n[layoutpermalink]: http://www.keyboard-layout-editor.com/##@_name=gamechord&author=lmorchard;&@=1&=2&=3&=4&=5;&@=1&=2&=3&=4&=5;&@=1&=2&=3&=4&=5;&@_r:35&rx:2.5&ry:3.5&y:-1&x:1;&=a&=b&=c\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/08/29/gamechord",
    "summary": "<p><strong>TL;DR</strong>: I made a USB keypad that&apos;s good for gaming and typing entirely with\none hand.</p>\n"
  },
  {
    "title": "Building a USB controller for an IBM Model M",
    "tags": [
      "modelm",
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "year": "2016",
    "month": "02",
    "day": "21",
    "isDir": false,
    "slug": "modelm-controller",
    "date": "2016-02-21T12:00:00.000Z",
    "postName": "2016-02-21-modelm-controller",
    "html": "<p><strong>TL;DR</strong>: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>In my <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">previous post</a>, I wrote about my initial forays into\nkeyboard hacking. I got my hands on a few IBM Model M keyboards, and built a\nPS/2-to-USB converter with a <a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a> so I could use it with my\nMacBook Pro after remapping some keys via the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK keyboard firmware</a>.</p>\n<p>That was a pretty rewarding little hack. But, then, I found <a href=\"https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\">Lawrence Wu&#39;s\nnotes</a> on replacing the original controller inside the IBM\nModel M.  In a nutshell, it turns out you can find ribbon connectors that work\nwith the Model M membrane layers and fit on a breadboard. That makes it easy\nto build - and reversible if I decide to return the keyboard to its original\nstate.</p>\n<h2 id=\"initial-prototype\">Initial Prototype</h2>\n<p>So, I ordered a few of the <a href=\"http://www.mouser.com/ProductDetail/TE-Connectivity/6-520315-6/?qs=sGAEpiMZZMvYKGyZxp8jxkA16bSpREuh\">16-pin ribbon connectors from Mouser</a>\nand a <a href=\"https://www.pjrc.com/store/teensypp.html\">Teensy 2.0++</a>. My first stab at wiring things up was\npretty simple:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24987051026/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k\" title=\"Original prototype for replacement IBM Model M keyboard controller\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24987051026_0d0b1ac2a9_z.jpg\" alt=\"Original prototype for replacement IBM Model M keyboard controller\"></a></p>\n<p>The <a href=\"https://www.pjrc.com/store/teensypp.html\">Teensy 2.0++</a> has 20 pins per side, and I needed 16 for the\nfirst ribbon. So, it was convenient to just plonk both onto the breadboard and\ntake advantage of the built-in conductors. That&#39;s also why I upgraded from a\n<a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a>: I needed more pins. The second ribbon needed\n8 pins, so I cut some lengths of <a href=\"http://amzn.to/1oCuCJ1\">hook-up wire</a> to keep things neat\nand ran the connections over.</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24684318539/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"5.5mm nut driver needed for opening IBM Model M keyboards\"><img class=\"inset wide right\" src=\"/uploads/2016/modelm-controller/24684318539_4dde739235_n.jpg\" alt=\"5.5mm nut driver needed for opening IBM Model M keyboards\"></a></p>\n<h2 id=\"driving-me-nuts\">Driving Me Nuts</h2>\n<p>Then, I wanted to get inside the keyboard to start tinkering. As it turns out,\nopening up an IBM Model M is annoying: None of the tools I had on hand could\ndo it. </p>\n<p>The case is assembled using screws with 5.5mm nut heads, rather than\nsomething like a Phillips-head screw. And, the screws are down in deep wells\ntoo narrow to fit any of the socket wrench heads I had on hand.</p>\n<p>So, I had to order <a href=\"http://amzn.to/1RgjN8k\">a 5.5mm nut driver</a> with a very slim head.\nReading <a href=\"http://www.amazon.com/Dynamite-2803-Nut-Driver-5-5mm/product-reviews/B000BQ4XP6/ref=cm_cr_dp_see_all_summary?ie=UTF8&amp;showViewpoints=1&amp;sortBy=helpful\">the reviews</a>, I can see I&#39;m not alone in this.</p>\n<p>While that made its way to my house, I&#39;d read that <a href=\"https://deskthority.net/workshop-f7/model-m-disassembly-t1960.html#p34013\">some folks used a lighter\nand a pen</a> to form a makeshift nut driver. That was a terrible\nidea, but it worked. In hindsight, I really should have just waited for the\ndriver to show up. But, I was determined to get the thing open while I had\ntime to play with it.</p>\n<h2 id=\"the-original-controller\">The Original Controller</h2>\n<p>And, once open, this is the board I found inside:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/25046846995/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M original controller board\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/25046846995_c8dab2484c_z.jpg\" alt=\"IBM Model M original controller board\"></a></p>\n<p>I should have taken a picture of it in place, but oh well. The board has a\ngrounding strap that was screwed down to the steel plate under the keys.\nBeyond that, it just fit into plastic brackets in the case and wasn&#39;t\notherwise fastened down. And, in a weird coincidence, the board was almost the\nexact same dimensions as my breadboard. Maybe these things are standard sizes?</p>\n<h2 id=\"mapping-the-membranes\">Mapping the Membranes</h2>\n<p>With the keyboard membrane ribbons free from the original board, I hooked them up to\nmy prototype. From there, I wanted to start making the keys send the right\nsignals. There are three parts to this:</p>\n<ol>\n<li>Mapping Teensy pins to a 16 x 8 switch matrix</li>\n<li>Mapping the 16 x 8 switch matrix to physical key locations</li>\n<li>Mapping physical key locations to USB key codes</li>\n</ol>\n<p>To accomplish #1, <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/matrix.c#L163\">I set up pins in the firmware</a>. The way this works is\nthat the rows are set to input and the columns are set to output. By pulsing a\ncurrent for each column in turn and reading the rows, you can build up a\nmatrix of switch state where the circuit is completed. This is called\n<a href=\"https://www.massdrop.com/article/introduction-to-keyboard-programming\">scanning the keyboard</a>. There are problems in this process - <a href=\"http://blog.komar.be/how-to-make-a-keyboard-the-matrix/\">like\nghosting</a> - but I&#39;ll skip describing them for now.</p>\n<p>To double check that I had my matrix working, I threw together an initial\nkeymap and set every key to emit &quot;1&quot;.  I tapped each key and saw a &quot;1&quot; in my\nnotepad. Hooray, it worked! At least, electrically speaking.</p>\n<p>For step #2, I started googling for IBM Model M membrane matrix maps. Surely\nsomeone had done this before! Well, <a href=\"https://deskthority.net/workshop-f7/universal-model-m-controller-t9820.html#p207736\">it turns out someone had</a>.\nDeskthority user <a href=\"https://deskthority.net/idollar-u6930/\">idollar</a> had traced all the wires and annotated the\nmembranes with row &amp; column numbers in marker:</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9298.jpg\">\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9300.jpg\">\n\n<p>Just to be clear: These two are not my photos. I stand on the shoulders of\n<a href=\"https://deskthority.net/idollar-u6930/\">forum giants</a>. But, after awhile, I couldn&#39;t really read the\nhandwriting and started making mistakes. </p>\n<p>That&#39;s when I remembered <a href=\"https://github.com/tmk/tmk_keyboard#magic-commands\">the matrix debug mode in TMK</a>: After\nconfiguring just enough keys to enable it, I could just watch the debug\noutput to tell me the rows &amp; columns as I hit other keys.</p>\n<p>Thus equipped, I spent a Sunday morning over coffee mapping the keyboard:\nMethodically pressing keys, noting rows &amp; columns, and building up <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L34\">the KEYMAP\nmacro</a> that converts symbols for physical keys to logical matrix\npositions. Along the way, I also built up <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L54\">the initial\nkeymap</a> using that macro to assign keycodes to the physical\nkeys.</p>\n<h2 id=\"fitting-the-prototype\">Fitting the Prototype</h2>\n<p>After that, I had an initial stab at steps #2 &amp; #3 - the keyboard was pretty\nmuch working and I could start typing practically with it. But, because I was\nhacking on this from the couch, it was all super-awkward holding things\ntogether in my lap.</p>\n<p>I should mention that these ribbon connectors have short, fragile leads.\nThey&#39;re really meant for soldering into a PCB. They snap into the breadboard,\nbut just barely. They spring free at the slightest pressure - you know, like\nhooking up ribbons and moving the keyboard around. And, whenever I reinsert\nthem, invariably one pin or another gets bent up and then snaps off after the\n4th or 5th realignment. I&#39;m really glad I bought extras, because I&#39;m down to\nmy last two that still work.</p>\n<p>So, I got tired of things falling apart and started positioning my breadboard\ninto the case. Everything fit physically, but the parts were all in the wrong\nplace. With a sigh, I pulled everything out of the board, rewired it, and\nreassigned all the pins:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24742861610/in/dateposted-public/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24742861610_8c3c931768_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a></p>\n<p>That put the ribbon connectors in the right spots for the keyboard membranes\nto connect, as well as room for a USB connector I bought to loop around without\ntoo much bend. Oh, and I slightly rewired things again, because I discovered\nI&#39;d connected all the LEDs backward:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24945773791/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24945773791_b208614dd7_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a></p>\n<h2 id=\"my-keyboard-is-haunted\">My Keyboard is Haunted</h2>\n<p>After all the rewiring and reassigned pins, I fired things up again. This\ntime, I started getting mysterious spontaneous keystrokes. I thought it might\nbe a grounding issue with static electricity, because I could usually make it\nhappen by waving my hands over the keyboard. While a <a href=\"https://en.wikipedia.org/wiki/Theremin\">theremin</a>\nkeyboard might be fun, that&#39;s not actually what I was going for here.</p>\n<p>So, I ran a wire from the steel plate to the GND pin on the Teensy. That\ndidn&#39;t fix it.</p>\n<p>Finally, I realized that one of my new pins in use was D6 - and\nD6 is hardwired to an LED on the Teensy board. And, it so happens that LEDs\ncan do weird things when hooked up as an input - <a href=\"http://www.analog.com/library/analogdialogue/archives/48-08/raq_108.html\">such as detecting\nlight</a>. You know, maybe like the changing light from waving my\nhands over the keyboard.</p>\n<p>Thus, I was able to exorcise my keyboard ghost by bending up the pin at D6 to\ndisconnect it from the breadboard. Then, I ran a jumper over to D1 and\n<a href=\"https://github.com/lmorchard/tmk_keyboard/commit/f5b31e9d320d494a4d3fc75db614883b7225d332\">switched the pin assignments in the firmware</a>. No more spontaneous\nkeypresses.</p>\n<h2 id=\"secrets-of-2kro-matrices\">Secrets of 2KRO Matrices</h2>\n<p>After typing a bit, I realized I couldn&#39;t get certain key combinations to work -\nShift-T, for example.</p>\n<p>Now, I know that the IBM Model M isn&#39;t <a href=\"https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\">an NKRO keyboard</a>. That is, you\ncannot press any arbitrary combination of keys together. But, of course, a\nkeyboard is useless if you can&#39;t press at least <em>some</em> keys together - like, say,\nShift and T. In fact, I&#39;ve read that the IBM Model M is described as 2KRO -\ni.e. two-key rollover.</p>\n<p>So, I knew that the original controller supported Shift-T. Looking in the\nmatrix debug output, I noticed that I couldn&#39;t press any 2 keys in the same\nrow together - that included Left Shift and T.</p>\n<p>Scratching my head, I noticed that the membrane matrix had some interesting\nproperties: Pretty much all the modifier keys were in different columns than\nthe other keys I wanted to press along with them. So, my problem might be\nsolved by rotating the matrix - that is, <a href=\"https://github.com/lmorchard/tmk_keyboard/commit/afc4d0f23be23e8c69bc1dfbe127898a7fe82db7\">turning rows into columns and columns\ninto rows</a>.</p>\n<p>I don&#39;t entirely have my head wrapped around the design of the Model M\nmembrane layout, but I think this is part of it: After I rotated the matrix,\nthere are 8 columns per row. As far as I can tell, only one key can be pressed\nper row - so that means any given key has 7 others that cannot be pressed at\nthe same time. Practical key rollover, then, is implemented by putting keys\nyou&#39;re likely to press together in different rows.</p>\n<p>For example, modifiers like Left Shift and Right Shift share a row, and so\ncannot be pressed together. But, Left Shift &amp; T are found in different rows\nand can work together. However, some of the letters in the QWER &amp; ASDF cluster\nshare rows, so that can be trouble for gaming - directional keypresses and\nsuchlike might cancel each other out in the heat of the keymashing moment.\nBut, since this keyboard harkens to an era where keys were more for typing\nwords than for controlling games, the tradeoff makes sense.</p>\n<h2 id=\"the-result\">The Result</h2>\n<p><a data-flickr-embed=\"true\" data-header=\"false\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24422592514/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz\" title=\"IBM Model M keyboard with USB controller\"><img class=\"inset wide right\" id=\"thumbnail\" src=\"/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg\" alt=\"IBM Model M keyboard with USB controller\"></a></p>\n<p>So, after all the above and a few more random adventures in C programming,\nthis IBM Model M keyboard is now sitting on my desk with a USB cable plugged\ninto it.</p>\n<p>I ordered <a href=\"http://www.pckeyboard.com/page/category/Buttons\">some custom replacement keycaps from Unicomp</a> to reflect\nsome of the remapped keys I implemented - i.e. media control, Command (⌘),\nCaps Lock replaced by Ctrl. </p>\n<p>I&#39;ve been having some clicky-clacky fun with this thing, and it&#39;s been easy to\nreconfigure &amp; reflash along the way as needed. Experience with <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a> to\nconfigure my previous project really came in handy.</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24959916191/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M with USB controller upgrade\"><img class=\"inset wide left\" src=\"/uploads/2016/modelm-controller/24959916191_bfe3246ded_z.jpg\" alt=\"IBM Model M with USB controller upgrade\"></a></p>\n<p>The one part that could be considered irreversible with this project is that I\nended up drilling two small holes in the back to secure the USB port. I&#39;m just\nslightly sad about that. But, I guess if I ever sell this thing on eBay, I&#39;ll\ntry talking up the benefits of the new USB controller.</p>\n<p>But, otherwise, if I wanted to undo all this work, I could just open it back\nup and plonk the original controller back in. I&#39;ve currently got that board\nsitting in an anti-static bag in a drawer, taking a rest after decades of\nservice.\n<br style=\"clear: both\"></p>\n<h2 id=\"next-steps\">Next Steps</h2>\n<h3 id=\"breadboard-to-pcb\">Breadboard to PCB</h3>\n<p>Like I mentioned before, those ribbon connectors are fragile and meant to be\nsoldered to a PCB. I&#39;d also like to learn how to design PCBs, so this seems\nlike a super easy project to start with. The only things needed are places to\nsolder the connectors, a socket for a Teensy, and traces connecting everything\nproperly. I wouldn&#39;t even need to learn SMD soldering yet!</p>\n<h3 id=\"bluetooth\">Bluetooth</h3>\n<p>I saw <a href=\"https://learn.adafruit.com/convert-your-model-m-keyboard-to-bluetooth-with-bluefruit-ez-key-hid/overview\">a project on Adafruit to add Bluetooth support to an IBM Model\nM</a>. But, that was using the original controller board and\nconverting from PS/2. With my controller, I could hook a Bluetooth module\ndirectly up to Teensy pins and talk to it from <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a>. That should be\ninteresting.</p>\n<h3 id=\"alphanumeric-display\">Alphanumeric Display</h3>\n<p>I noticed that a backlit alphanumeric LCD display is pretty much the exact\ndimensions of the Num Lock / Scroll Lock / Caps Lock LED area on the keyboard\ncase. It would definitely be a destructive change, but it might be kind of\ncool to replace that section with a text readout. I&#39;m not really sure what it\nwould display, but it could be a fun little project like a retro-DIY version\nof <a href=\"http://amzn.to/1TuflVD\">a Logitech G15 keyboard</a>.</p>\n<h3 id=\"reset-button\">Reset button</h3>\n<p>Flashing the Teensy firmware usually requires pushing a button on the board.\nThere are also a couple of pins on the board that do the same when shorted, so\nI threaded some wires out of the case to do that. It&#39;s ugly.</p>\n<p>The <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a> firmware also supports a key combination that does the same thing,\nwhich would let me just toss the wires. But, after once or twice where I\nlocked the firmware and had to reopen the case, I don&#39;t think I can totally go\nwithout a reset button.</p>\n<p>So, I&#39;m considering where and how to mount an external reset / programming\nbutton that doesn&#39;t require any more holes to be drilled or anything else\ndestructive.</p>\n<h3 id=\"60-model-m\">60% Model M</h3>\n<p>On the topic of destructive changes: <a href=\"https://geekhack.org/index.php?action=profile;u=3412\">hasu</a>, the author of the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a>\nfirmware, <a href=\"https://geekhack.org/index.php?action=profile;u=3412\">literally carved up</a> an IBM Model M keyboard and <a href=\"https://geekhack.org/index.php?topic=29483.0\">reduced it\nto a 60% layout</a> more comparable to a Happy Hacking Keyboard.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/yROEN.jpg\">\n\n<p>That project took a bit of work reconstituting the membrane using copper tape\nand conductive ink, as well as work to join the plastic bits back together.\nBut, the electronics end up being simpler after discarding piles of keys.\nI know it would be a certain kind of sacriledge to Model M lovers, but I might\nattempt it once I get tired of just how huge this keyboard is on my desk.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This was a pretty fun project, and a bit of a step up from the PS/2 converter\nI just built. I learned a bit about the innards of this keyboard, and I&#39;ve got\nsome decent next steps to pursue in the future. All of this feels like it&#39;s\ngiving me some good foundational know-how for when I finally get all the parts\ntogether to try building my own DIY keyboard from the ground up.</p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nIn my [previous post][keyboard-hacking], I wrote about my initial forays into\nkeyboard hacking. I got my hands on a few IBM Model M keyboards, and built a\nPS/2-to-USB converter with a [Teensy 2.0][teensy] so I could use it with my\nMacBook Pro after remapping some keys via the [TMK keyboard firmware][tmk].\n\nThat was a pretty rewarding little hack. But, then, I found [Lawrence Wu's\nnotes][original-notes] on replacing the original controller inside the IBM\nModel M.  In a nutshell, it turns out you can find ribbon connectors that work\nwith the Model M membrane layers and fit on a breadboard. That makes it easy\nto build - and reversible if I decide to return the keyboard to its original\nstate.\n\n## Initial Prototype\n\nSo, I ordered a few of the [16-pin ribbon connectors from Mouser][connector]\nand a [Teensy 2.0++][teensy-plus]. My first stab at wiring things up was\npretty simple:\n\n[connector]: http://www.mouser.com/ProductDetail/TE-Connectivity/6-520315-6/?qs=sGAEpiMZZMvYKGyZxp8jxkA16bSpREuh\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24987051026/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k\" title=\"Original prototype for replacement IBM Model M keyboard controller\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24987051026_0d0b1ac2a9_z.jpg\" alt=\"Original prototype for replacement IBM Model M keyboard controller\"></a>\n\nThe [Teensy 2.0++][teensy-plus] has 20 pins per side, and I needed 16 for the\nfirst ribbon. So, it was convenient to just plonk both onto the breadboard and\ntake advantage of the built-in conductors. That's also why I upgraded from a\n[Teensy 2.0][teensy]: I needed more pins. The second ribbon needed\n8 pins, so I cut some lengths of [hook-up wire][hookup] to keep things neat\nand ran the connections over.\n\n[tmk]: https://geekhack.org/index.php?topic=41989.0\n[hookup]: http://amzn.to/1oCuCJ1\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24684318539/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"5.5mm nut driver needed for opening IBM Model M keyboards\"><img class=\"inset wide right\" src=\"/uploads/2016/modelm-controller/24684318539_4dde739235_n.jpg\" alt=\"5.5mm nut driver needed for opening IBM Model M keyboards\"></a>\n\n## Driving Me Nuts\n\nThen, I wanted to get inside the keyboard to start tinkering. As it turns out,\nopening up an IBM Model M is annoying: None of the tools I had on hand could\ndo it. \n  \nThe case is assembled using screws with 5.5mm nut heads, rather than\nsomething like a Phillips-head screw. And, the screws are down in deep wells\ntoo narrow to fit any of the socket wrench heads I had on hand.\n\nSo, I had to order [a 5.5mm nut driver][nut-driver] with a very slim head.\nReading [the reviews][reviews], I can see I'm not alone in this.\n\nWhile that made its way to my house, I'd read that [some folks used a lighter\nand a pen][driver-hack] to form a makeshift nut driver. That was a terrible\nidea, but it worked. In hindsight, I really should have just waited for the\ndriver to show up. But, I was determined to get the thing open while I had\ntime to play with it.\n\n[reviews]: http://www.amazon.com/Dynamite-2803-Nut-Driver-5-5mm/product-reviews/B000BQ4XP6/ref=cm_cr_dp_see_all_summary?ie=UTF8&showViewpoints=1&sortBy=helpful\n[driver-hack]: https://deskthority.net/workshop-f7/model-m-disassembly-t1960.html#p34013\n\n## The Original Controller\n\nAnd, once open, this is the board I found inside:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/25046846995/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M original controller board\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/25046846995_c8dab2484c_z.jpg\" alt=\"IBM Model M original controller board\"></a>\n\nI should have taken a picture of it in place, but oh well. The board has a\ngrounding strap that was screwed down to the steel plate under the keys.\nBeyond that, it just fit into plastic brackets in the case and wasn't\notherwise fastened down. And, in a weird coincidence, the board was almost the\nexact same dimensions as my breadboard. Maybe these things are standard sizes?\n\n## Mapping the Membranes\n\nWith the keyboard membrane ribbons free from the original board, I hooked them up to\nmy prototype. From there, I wanted to start making the keys send the right\nsignals. There are three parts to this:\n\n1. Mapping Teensy pins to a 16 x 8 switch matrix\n2. Mapping the 16 x 8 switch matrix to physical key locations\n3. Mapping physical key locations to USB key codes\n\nTo accomplish #1, [I set up pins in the firmware][pins]. The way this works is\nthat the rows are set to input and the columns are set to output. By pulsing a\ncurrent for each column in turn and reading the rows, you can build up a\nmatrix of switch state where the circuit is completed. This is called\n[scanning the keyboard][scanning]. There are problems in this process - [like\nghosting][ghosting] - but I'll skip describing them for now.\n\n[scanning]: https://www.massdrop.com/article/introduction-to-keyboard-programming\n[ghosting]: http://blog.komar.be/how-to-make-a-keyboard-the-matrix/\n\nTo double check that I had my matrix working, I threw together an initial\nkeymap and set every key to emit \"1\".  I tapped each key and saw a \"1\" in my\nnotepad. Hooray, it worked! At least, electrically speaking.\n\n[pins]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/matrix.c#L163\n\nFor step #2, I started googling for IBM Model M membrane matrix maps. Surely\nsomeone had done this before! Well, [it turns out someone had][matrix-map].\nDeskthority user [idollar][] had traced all the wires and annotated the\nmembranes with row & column numbers in marker:\n\n[idollar]: https://deskthority.net/idollar-u6930/\n[matrix-map]: https://deskthority.net/workshop-f7/universal-model-m-controller-t9820.html#p207736\n\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9298.jpg\">\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9300.jpg\">\n\nJust to be clear: These two are not my photos. I stand on the shoulders of\n[forum giants][idollar]. But, after awhile, I couldn't really read the\nhandwriting and started making mistakes. \n\nThat's when I remembered [the matrix debug mode in TMK][matrix-debug]: After\nconfiguring just enough keys to enable it, I could just watch the debug\noutput to tell me the rows & columns as I hit other keys.\n\n[matrix-debug]: https://github.com/tmk/tmk_keyboard#magic-commands\n\nThus equipped, I spent a Sunday morning over coffee mapping the keyboard:\nMethodically pressing keys, noting rows & columns, and building up [the KEYMAP\nmacro][keymap-macro] that converts symbols for physical keys to logical matrix\npositions. Along the way, I also built up [the initial\nkeymap][keymap-plain] using that macro to assign keycodes to the physical\nkeys.\n\n[keymap-macro]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L34\n[keymap-plain]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L54\n\n## Fitting the Prototype\n\nAfter that, I had an initial stab at steps #2 & #3 - the keyboard was pretty\nmuch working and I could start typing practically with it. But, because I was\nhacking on this from the couch, it was all super-awkward holding things\ntogether in my lap.\n\nI should mention that these ribbon connectors have short, fragile leads.\nThey're really meant for soldering into a PCB. They snap into the breadboard,\nbut just barely. They spring free at the slightest pressure - you know, like\nhooking up ribbons and moving the keyboard around. And, whenever I reinsert\nthem, invariably one pin or another gets bent up and then snaps off after the\n4th or 5th realignment. I'm really glad I bought extras, because I'm down to\nmy last two that still work.\n\nSo, I got tired of things falling apart and started positioning my breadboard\ninto the case. Everything fit physically, but the parts were all in the wrong\nplace. With a sigh, I pulled everything out of the board, rewired it, and\nreassigned all the pins:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24742861610/in/dateposted-public/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24742861610_8c3c931768_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a>\n\nThat put the ribbon connectors in the right spots for the keyboard membranes\nto connect, as well as room for a USB connector I bought to loop around without\ntoo much bend. Oh, and I slightly rewired things again, because I discovered\nI'd connected all the LEDs backward:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24945773791/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24945773791_b208614dd7_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a>\n\n## My Keyboard is Haunted\n\nAfter all the rewiring and reassigned pins, I fired things up again. This\ntime, I started getting mysterious spontaneous keystrokes. I thought it might\nbe a grounding issue with static electricity, because I could usually make it\nhappen by waving my hands over the keyboard. While a [theremin][]\nkeyboard might be fun, that's not actually what I was going for here.\n\n[theremin]: https://en.wikipedia.org/wiki/Theremin\n\nSo, I ran a wire from the steel plate to the GND pin on the Teensy. That\ndidn't fix it.\n\nFinally, I realized that one of my new pins in use was D6 - and\nD6 is hardwired to an LED on the Teensy board. And, it so happens that LEDs\ncan do weird things when hooked up as an input - [such as detecting\nlight][photodiode]. You know, maybe like the changing light from waving my\nhands over the keyboard.\n\nThus, I was able to exorcise my keyboard ghost by bending up the pin at D6 to\ndisconnect it from the breadboard. Then, I ran a jumper over to D1 and\n[switched the pin assignments in the firmware][d0-pin]. No more spontaneous\nkeypresses.\n\n[photodiode]: http://www.analog.com/library/analogdialogue/archives/48-08/raq_108.html\n[d0-pin]: https://github.com/lmorchard/tmk_keyboard/commit/f5b31e9d320d494a4d3fc75db614883b7225d332\n\n## Secrets of 2KRO Matrices\n\nAfter typing a bit, I realized I couldn't get certain key combinations to work -\nShift-T, for example.\n\nNow, I know that the IBM Model M isn't [an NKRO keyboard][nkro]. That is, you\ncannot press any arbitrary combination of keys together. But, of course, a\nkeyboard is useless if you can't press at least *some* keys together - like, say,\nShift and T. In fact, I've read that the IBM Model M is described as 2KRO -\ni.e. two-key rollover.\n\nSo, I knew that the original controller supported Shift-T. Looking in the\nmatrix debug output, I noticed that I couldn't press any 2 keys in the same\nrow together - that included Left Shift and T.\n\nScratching my head, I noticed that the membrane matrix had some interesting\nproperties: Pretty much all the modifier keys were in different columns than\nthe other keys I wanted to press along with them. So, my problem might be\nsolved by rotating the matrix - that is, [turning rows into columns and columns\ninto rows][matrix-swap].\n\nI don't entirely have my head wrapped around the design of the Model M\nmembrane layout, but I think this is part of it: After I rotated the matrix,\nthere are 8 columns per row. As far as I can tell, only one key can be pressed\nper row - so that means any given key has 7 others that cannot be pressed at\nthe same time. Practical key rollover, then, is implemented by putting keys\nyou're likely to press together in different rows.\n\nFor example, modifiers like Left Shift and Right Shift share a row, and so\ncannot be pressed together. But, Left Shift & T are found in different rows\nand can work together. However, some of the letters in the QWER & ASDF cluster\nshare rows, so that can be trouble for gaming - directional keypresses and\nsuchlike might cancel each other out in the heat of the keymashing moment.\nBut, since this keyboard harkens to an era where keys were more for typing\nwords than for controlling games, the tradeoff makes sense.\n\n[nkro]: https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\n[matrix-swap]: https://github.com/lmorchard/tmk_keyboard/commit/afc4d0f23be23e8c69bc1dfbe127898a7fe82db7\n\n## The Result\n\n<a data-flickr-embed=\"true\" data-header=\"false\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24422592514/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz\" title=\"IBM Model M keyboard with USB controller\"><img class=\"inset wide right\" id=\"thumbnail\" src=\"/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg\" alt=\"IBM Model M keyboard with USB controller\"></a>\n\nSo, after all the above and a few more random adventures in C programming,\nthis IBM Model M keyboard is now sitting on my desk with a USB cable plugged\ninto it.\n\nI ordered [some custom replacement keycaps from Unicomp][unicomp] to reflect\nsome of the remapped keys I implemented - i.e. media control, Command (⌘),\nCaps Lock replaced by Ctrl. \n\nI've been having some clicky-clacky fun with this thing, and it's been easy to\nreconfigure & reflash along the way as needed. Experience with [TMK][] to\nconfigure my previous project really came in handy.\n\n[unicomp]: http://www.pckeyboard.com/page/category/Buttons\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24959916191/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M with USB controller upgrade\"><img class=\"inset wide left\" src=\"/uploads/2016/modelm-controller/24959916191_bfe3246ded_z.jpg\" alt=\"IBM Model M with USB controller upgrade\"></a>\n\nThe one part that could be considered irreversible with this project is that I\nended up drilling two small holes in the back to secure the USB port. I'm just\nslightly sad about that. But, I guess if I ever sell this thing on eBay, I'll\ntry talking up the benefits of the new USB controller.\n\nBut, otherwise, if I wanted to undo all this work, I could just open it back\nup and plonk the original controller back in. I've currently got that board\nsitting in an anti-static bag in a drawer, taking a rest after decades of\nservice.\n<br style=\"clear: both\">\n\n[teensy]: https://www.pjrc.com/store/teensy.html\n[teensy-plus]: https://www.pjrc.com/store/teensypp.html\n[nut-driver]: http://amzn.to/1RgjN8k\n[keyboard-hacking]: http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\n[original-notes]: https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\n[photo-tag]: https://www.flickr.com/photos/tags/modelmcontroller\n\n## Next Steps\n\n### Breadboard to PCB\n\nLike I mentioned before, those ribbon connectors are fragile and meant to be\nsoldered to a PCB. I'd also like to learn how to design PCBs, so this seems\nlike a super easy project to start with. The only things needed are places to\nsolder the connectors, a socket for a Teensy, and traces connecting everything\nproperly. I wouldn't even need to learn SMD soldering yet!\n\n### Bluetooth\n\nI saw [a project on Adafruit to add Bluetooth support to an IBM Model\nM][Adafruit-Bluetooth]. But, that was using the original controller board and\nconverting from PS/2. With my controller, I could hook a Bluetooth module\ndirectly up to Teensy pins and talk to it from [TMK][]. That should be\ninteresting.\n\n[adafruit-bluetooth]: https://learn.adafruit.com/convert-your-model-m-keyboard-to-bluetooth-with-bluefruit-ez-key-hid/overview\n\n### Alphanumeric Display\n\nI noticed that a backlit alphanumeric LCD display is pretty much the exact\ndimensions of the Num Lock / Scroll Lock / Caps Lock LED area on the keyboard\ncase. It would definitely be a destructive change, but it might be kind of\ncool to replace that section with a text readout. I'm not really sure what it\nwould display, but it could be a fun little project like a retro-DIY version\nof [a Logitech G15 keyboard][g15].\n\n[g15]: http://amzn.to/1TuflVD\n\n### Reset button\n\nFlashing the Teensy firmware usually requires pushing a button on the board.\nThere are also a couple of pins on the board that do the same when shorted, so\nI threaded some wires out of the case to do that. It's ugly.\n\nThe [TMK][] firmware also supports a key combination that does the same thing,\nwhich would let me just toss the wires. But, after once or twice where I\nlocked the firmware and had to reopen the case, I don't think I can totally go\nwithout a reset button.\n\nSo, I'm considering where and how to mount an external reset / programming\nbutton that doesn't require any more holes to be drilled or anything else\ndestructive.\n\n### 60% Model M\n\nOn the topic of destructive changes: [hasu][], the author of the [TMK][]\nfirmware, [literally carved up][hbkb2] an IBM Model M keyboard and [reduced it\nto a 60% layout][hbkb] more comparable to a Happy Hacking Keyboard.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/yROEN.jpg\">\n\n[hasu]: https://geekhack.org/index.php?action=profile;u=3412\n[hbkb]: https://geekhack.org/index.php?topic=29483.0\n[hbkb2]: https://geekhack.org/index.php?action=profile;u=3412\n\nThat project took a bit of work reconstituting the membrane using copper tape\nand conductive ink, as well as work to join the plastic bits back together.\nBut, the electronics end up being simpler after discarding piles of keys.\nI know it would be a certain kind of sacriledge to Model M lovers, but I might\nattempt it once I get tired of just how huge this keyboard is on my desk.\n\n## Conclusion\n\nThis was a pretty fun project, and a bit of a step up from the PS/2 converter\nI just built. I learned a bit about the innards of this keyboard, and I've got\nsome decent next steps to pursue in the future. All of this feels like it's\ngiving me some good foundational know-how for when I finally get all the parts\ntogether to try building my own DIY keyboard from the ground up.\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/21/modelm-controller",
    "thumbnail": "/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg",
    "summary": "<p><strong>TL;DR</strong>: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.</p>\n"
  },
  {
    "title": "Keyboard hacking seems like fun",
    "tags": [
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "year": "2016",
    "month": "02",
    "day": "06",
    "isDir": false,
    "slug": "keyboard-hacking",
    "date": "2016-02-06T12:00:00.000Z",
    "postName": "2016-02-06-keyboard-hacking",
    "html": "<p><strong>TL;DR</strong>: I think I&#39;ve caught the DIY keyboard hacking bug, and I&#39;ll probably\nend up building something weird.</p>\n<!--more-->\n\n<p>I love tinkering and I love keyboards. But, I&#39;d never really tinkered with my\nkeyboards - at least, not beyond <a href=\"http://blog.lmorchard.com/2006/07/31/i-heart-my-filthy-happy-hacking-keyboard/\">disassembling &amp; cleaning them</a>.\nI&#39;d seen a smattering of crowdfunded projects over the years like the\n<a href=\"https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/\">ErgoDox</a> and <a href=\"http://shop.keyboard.io/\">Keyboardio</a>. But, those seemed like complex design\n&amp; manufacturing efforts - not like, you know, something I&#39;d do for fun.</p>\n<p>But then, last summer, I ran across <a href=\"https://www.massdrop.com/\">Massdrop</a> and saw the <a href=\"https://www.massdrop.com/buy/infinity-keyboard-kit\">Infinity 60%\nKeyboard Kit</a>. From there, I ran across &quot;<a href=\"https://www.massdrop.com/article/introduction-to-keyboard-programming\">Introduction to Keyboard\nProgramming</a>&quot; and some rusty gears turned over in my brain. I\ndiscovered <a href=\"https://geekhack.org/\">geekhack</a> and <a href=\"https://deskthority.net/\">Deskthority</a> and fell down a dangerous\nrabbit hole of <a href=\"https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\">switches</a> and <a href=\"https://geekhack.org/index.php?board=80.0\">caps</a>, <a href=\"https://geekhack.org/index.php?topic=47133\">layouts</a> and <a href=\"https://deskthority.net/workshop-f7/thkb-tiny-hacking-keyboard-40-t6455.html\">plates</a>,\n<a href=\"https://www.pjrc.com/teensy/\">microcontrollers</a> and <a href=\"https://geekhack.org/index.php?topic=41989.0\">firmware</a>.</p>\n<p>Turns out there are a bunch of folks doing this stuff as a hobby, along with a\nniche industry to support it.</p>\n<p>After a few months of absorbing information and spectating on projects in\nforums, it occurred to me that this did in fact seem like something I&#39;d have\nfun doing. But, rather than just dive in, I decided to start small:</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24832952956/\"><img class=\"fullwidth\" id=\"thumbnail\" src=\"/uploads/2016/teensy-ps2-adapter/minikey.jpg\"></a></p>\n<p>Last weekend, I ran to my local <a href=\"http://www.microcenter.com/site/stores/madison-heights.aspx\">Micro Center</a> and picked up a <a href=\"https://www.pjrc.com/teensy/\">Teensy\n2.0</a>. That seems to be the microcontroller board a lot of keyboard\nprojects have been using, so I figured getting acquainted with it would be\nhandy. After the traditional &quot;hello world&quot; project of <a href=\"https://www.pjrc.com/teensy/tutorial.html\">getting an LED to\nblink</a>, I wired up a pile of buttons on a breadboard and <a href=\"https://www.pjrc.com/teensy/td_keyboard.html\">built the\nfirmware to my first DIY USB keyboard</a>.</p>\n<p>Okay, so it was just a tutorial and no special effort on my part. But, the\nprocess was super easy, so the hacking possibilities started piling up in my\nhead.</p>\n<p>Then, I discovered the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK keyboard firmware</a> on the\n<a href=\"https://geekhack.org/\">geekhack</a> forums. Basically, all the software work had been done for me.\nThe TMK firmware is a ready-made pile of code for translating from basically any\nmatrix of switches or wire protocol to USB HID keyboard codes - complete with\nsupport for flexible key maps, mouse control, function-key layers, macros, and\na bunch of other things. </p>\n<p>My little 10-key breadboard toy wasn&#39;t all that practical. But, I discovered\nthat the TMK firmware also supported building keyboard <em>converters</em>. Of\nparticular interest was the <a href=\"https://github.com/tmk/tmk_keyboard/blob/master/converter/ps2_usb/README.md\">PS/2 to USB keyboard converter</a>, since I\njust happen to have a pile of older PS/2 keyboards lying around doing nothing.</p>\n<p>The converter only took 4 wires, so I sacrificed a PS/2 cable from the back of\na drawer and came up with this:</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24832952956/\"><img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/adapter.jpg\"></a></p>\n<p>Coincidentally, the day after I built this, I got some IBM Model M keyboards\nfrom <a href=\"https://nuxx.net/blog/\">a friend</a> of mine. I&#39;ve been wanting to fill my office with the\nsound of buckling springs for awhile, now. </p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24685464831/\"><img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/modelm.jpg\"></a></p>\n<p>This is all hooked up to a modern MacBook Pro, but the IBM Model M is\ndecidedly lacking in <a href=\"https://en.wikipedia.org/wiki/Command_key\">Command (⌘) keys</a>. So, the DIY converter\nproved its worth immediately. </p>\n<p>I put together <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/lmo-model-mac/converter/ps2_usb/keymap_modelmac.c\">my own simple keymap</a> and spent a day with it,\ntweaking as I went.  I set up <a href=\"https://github.com/alloy/kicker\">a file watcher</a> to rebuild the\nfirmware whenever I changed the source. Along with that, the <a href=\"https://www.pjrc.com/teensy/loader.html\">Teensy\nLoader</a> has an &quot;auto&quot; mode which reprograms the Teensy whenever I hit\nthe reset button. </p>\n<p>At this point, I&#39;ve replaced the Caps Lock key with Control and changed Alt keys\nto Command keys.  Then, I turned the Print Screen / Caps Lock / Pause trio\ninto volume control keys. After that, F10, F11, and F12 were pressed into\nservice as previous, next, &amp; pause buttons for music. It was all a bit fiddly,\nbut it&#39;s the kind of thing I enjoy.</p>\n<p>Overall, this all feels like a nice intro into a new hobby. Next, I&#39;m\nconsidering <a href=\"https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\">replacing the IBM Model M keyboard controller</a>\naltogether, which will embed the Teensy right in the case. </p>\n<p>After that, I&#39;m tempted to turn my screwdriver on that other keyboard on my\ndesk - the Happy Hacking Keyboard Professional. There&#39;s a <a href=\"https://geekhack.org/index.php?topic=12047.0\">Teensy-based\nalternative controller</a> option for it, also using the TMK firmware.</p>\n<p>Once I feel comfortable with all that, it might be time to build something of\nmy own! <a href=\"http://www.keyboard-layout-editor.com/##@_name=noisy%20fat%20hacker%20keyboard&amp;author=lmorchard&amp;switchMount=cherry&amp;switchBrand=cherry&amp;plate:true%3B&amp;@=Esc&amp;=!%0A1&amp;=%2F@%0A2&amp;=%23%0A3&amp;=$%0A4&amp;=%25%0A5&amp;=%5E%0A6&amp;=%2F&amp;%0A7&amp;=*%0A8&amp;=%28%0A9&amp;=%29%0A0&amp;=%2F_%0A-&amp;=+%0A%2F=&amp;=%7C%0A%5C&amp;=~%0A%60&amp;_x:0.25%3B&amp;=Insert&amp;=Home&amp;=PgUp%3B&amp;@_w:1.5%3B&amp;=Tab&amp;=Q&amp;=W&amp;=E&amp;=R&amp;=T&amp;=Y&amp;=U&amp;=I&amp;=O&amp;=P&amp;=%7B%0A%5B&amp;=%7D%0A%5D&amp;_a:0&amp;w:1.5%3B&amp;=Delete%0A%0A%0A%0ABS&amp;_x:0.25&amp;a:4%3B&amp;=Delete&amp;=End&amp;=PgDn%3B&amp;@_w:1.75%3B&amp;=Control&amp;=A&amp;=S&amp;=D&amp;=F&amp;=G&amp;=H&amp;=J&amp;=K&amp;=L&amp;=%2F:%0A%2F%3B&amp;=%22%0A%27&amp;_w:2.25%3B&amp;=Enter&amp;_x:0.25%3B&amp;=Op1&amp;=Op2&amp;=Op3%3B&amp;@_w:2.25%3B&amp;=Shift&amp;=Z&amp;=X&amp;=C&amp;=V&amp;=B&amp;=N&amp;=M&amp;=%3C%0A,&amp;=%3E%0A.&amp;=%3F%0A%2F%2F&amp;_w:2.75%3B&amp;=Shift&amp;_x:1.25%3B&amp;=%E2%86%91%3B&amp;@_w:1.25%3B&amp;=Fn&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-logo-apple-outline%27%3E%3C%2F%2Fi%3E&amp;_a:7&amp;w:6.25%3B&amp;=&amp;_a:4&amp;w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-logo-apple%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-Hamburger-Menu%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=Fn&amp;_x:0.25%3B&amp;=%E2%86%90&amp;=%E2%86%93&amp;=%E2%86%92\">I&#39;ve got a 75-key layout I&#39;m mulling over.</a> If I end up liking\nthat, I can get a case &amp; mounting plate <a href=\"http://builder.swillkb.com/\">designed</a> &amp;\n<a href=\"https://www.ponoko.com/\">fabricated</a>. Then, I can buy all the <a href=\"https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\">switches</a> and\n<a href=\"http://amzn.to/1UUHUu8\">diodes</a>. And last, but not least, I&#39;ll have to design a circuit board &amp;\n<a href=\"https://oshpark.com/\">get that fabricated</a>.</p>\n<p>Or, if I really want to go for that handcrafted artisan experience - which I\njust might, because I&#39;m a glutton for punishment - I&#39;ve got something like\nthis in my future:</p>\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/MrokZ1afnVg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I think I've caught the DIY keyboard hacking bug, and I'll probably\nend up building something weird.\n\n<!--more-->\n\nI love tinkering and I love keyboards. But, I'd never really tinkered with my\nkeyboards - at least, not beyond [disassembling & cleaning them][hhkbclean].\nI'd seen a smattering of crowdfunded projects over the years like the\n[ErgoDox][] and [Keyboardio][]. But, those seemed like complex design\n& manufacturing efforts - not like, you know, something I'd do for fun.\n\nBut then, last summer, I ran across [Massdrop][] and saw the [Infinity 60%\nKeyboard Kit][infinity60]. From there, I ran across \"[Introduction to Keyboard\nProgramming][kbprog]\" and some rusty gears turned over in my brain. I\ndiscovered [geekhack][] and [Deskthority][] and fell down a dangerous\nrabbit hole of [switches][] and [caps][], [layouts][] and [plates][],\n[microcontrollers][teensy] and [firmware][].\n\nTurns out there are a bunch of folks doing this stuff as a hobby, along with a\nniche industry to support it.\n\nAfter a few months of absorbing information and spectating on projects in\nforums, it occurred to me that this did in fact seem like something I'd have\nfun doing. But, rather than just dive in, I decided to start small:\n\n[kits]: http://www.geekhackers.org/products/jd40-jdcarpe-s-40-keyboard-kit-sorbothane-titanium-all-profits-go-to-the-nathan-j-walters-foundation-rip-smallfry\n[firmware]: https://geekhack.org/index.php?topic=41989.0\n[teensy]: https://www.pjrc.com/teensy/\n[plates]: https://deskthority.net/workshop-f7/thkb-tiny-hacking-keyboard-40-t6455.html\n[layouts]: https://geekhack.org/index.php?topic=47133\n[caps]: https://geekhack.org/index.php?board=80.0\n[switches]: https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\n[Deskthority]: https://deskthority.net/\n[geekhack]: https://geekhack.org/\n[infinity60]: https://www.massdrop.com/buy/infinity-keyboard-kit\n[keyboardio]: http://shop.keyboard.io/\n[ergodox]: https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/\n[key64]: http://www.key64.org/\n[hhkbclean]: http://blog.lmorchard.com/2006/07/31/i-heart-my-filthy-happy-hacking-keyboard/\n[kbprog]: https://www.massdrop.com/article/introduction-to-keyboard-programming\n[massdrop]: https://www.massdrop.com/\n\n[<img class=\"fullwidth\" id=\"thumbnail\" src=\"/uploads/2016/teensy-ps2-adapter/minikey.jpg\">](https://www.flickr.com/photos/deusx/24832952956/)\n\nLast weekend, I ran to my local [Micro Center][] and picked up a [Teensy\n2.0][teensy]. That seems to be the microcontroller board a lot of keyboard\nprojects have been using, so I figured getting acquainted with it would be\nhandy. After the traditional \"hello world\" project of [getting an LED to\nblink][blinky], I wired up a pile of buttons on a breadboard and [built the\nfirmware to my first DIY USB keyboard][keyboardtut].\n\nOkay, so it was just a tutorial and no special effort on my part. But, the\nprocess was super easy, so the hacking possibilities started piling up in my\nhead.\n\nThen, I discovered the [TMK keyboard firmware][firmware] on the\n[geekhack][] forums. Basically, all the software work had been done for me.\nThe TMK firmware is a ready-made pile of code for translating from basically any\nmatrix of switches or wire protocol to USB HID keyboard codes - complete with\nsupport for flexible key maps, mouse control, function-key layers, macros, and\na bunch of other things. \n\nMy little 10-key breadboard toy wasn't all that practical. But, I discovered\nthat the TMK firmware also supported building keyboard *converters*. Of\nparticular interest was the [PS/2 to USB keyboard converter][ps2usb], since I\njust happen to have a pile of older PS/2 keyboards lying around doing nothing.\n\nThe converter only took 4 wires, so I sacrificed a PS/2 cable from the back of\na drawer and came up with this:\n\n[ps2usb]: https://github.com/tmk/tmk_keyboard/blob/master/converter/ps2_usb/README.md\n[keyboardtut]: https://www.pjrc.com/teensy/td_keyboard.html\n[blinky]: https://www.pjrc.com/teensy/tutorial.html\n[micro center]: http://www.microcenter.com/site/stores/madison-heights.aspx\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/adapter.jpg\">](https://www.flickr.com/photos/deusx/24832952956/)\n\nCoincidentally, the day after I built this, I got some IBM Model M keyboards\nfrom [a friend][nuxx] of mine. I've been wanting to fill my office with the\nsound of buckling springs for awhile, now. \n\n[nuxx]: https://nuxx.net/blog/\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/modelm.jpg\">](https://www.flickr.com/photos/deusx/24685464831/)\n\nThis is all hooked up to a modern MacBook Pro, but the IBM Model M is\ndecidedly lacking in [Command (⌘) keys][command]. So, the DIY converter\nproved its worth immediately. \n\nI put together [my own simple keymap][lmotmk] and spent a day with it,\ntweaking as I went.  I set up [a file watcher][kicker] to rebuild the\nfirmware whenever I changed the source. Along with that, the [Teensy\nLoader][loader] has an \"auto\" mode which reprograms the Teensy whenever I hit\nthe reset button. \n\nAt this point, I've replaced the Caps Lock key with Control and changed Alt keys\nto Command keys.  Then, I turned the Print Screen / Caps Lock / Pause trio\ninto volume control keys. After that, F10, F11, and F12 were pressed into\nservice as previous, next, & pause buttons for music. It was all a bit fiddly,\nbut it's the kind of thing I enjoy.\n\nOverall, this all feels like a nice intro into a new hobby. Next, I'm\nconsidering [replacing the IBM Model M keyboard controller][ibmcontrol]\naltogether, which will embed the Teensy right in the case. \n\nAfter that, I'm tempted to turn my screwdriver on that other keyboard on my\ndesk - the Happy Hacking Keyboard Professional. There's a [Teensy-based\nalternative controller][hhkbalt] option for it, also using the TMK firmware.\n\nOnce I feel comfortable with all that, it might be time to build something of\nmy own! [I've got a 75-key layout I'm mulling over.][nfhkb] If I end up liking\nthat, I can get a case & mounting plate [designed][platebuilder] &\n[fabricated][ponoko]. Then, I can buy all the [switches][switches] and\n[diodes][]. And last, but not least, I'll have to design a circuit board &\n[get that fabricated][oshpark].\n\nOr, if I really want to go for that handcrafted artisan experience - which I\njust might, because I'm a glutton for punishment - I've got something like\nthis in my future:\n\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/MrokZ1afnVg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n[oshpark]: https://oshpark.com/\n[diodes]: http://amzn.to/1UUHUu8\n[ponoko]: https://www.ponoko.com/\n[platebuilder]: http://builder.swillkb.com/\n[hhkbalt]: https://geekhack.org/index.php?topic=12047.0\n[ibmcontrol]: https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\n[kicker]: https://github.com/alloy/kicker\n[loader]: https://www.pjrc.com/teensy/loader.html\n[lmotmk]: https://github.com/lmorchard/tmk_keyboard/blob/lmo-model-mac/converter/ps2_usb/keymap_modelmac.c\n[command]: https://en.wikipedia.org/wiki/Command_key\n[nfhkb]: http://www.keyboard-layout-editor.com/##@_name=noisy%20fat%20hacker%20keyboard&author=lmorchard&switchMount=cherry&switchBrand=cherry&plate:true%3B&@=Esc&=!%0A1&=%2F@%0A2&=%23%0A3&=$%0A4&=%25%0A5&=^%0A6&=%2F&%0A7&=*%0A8&=%28%0A9&=%29%0A0&=%2F_%0A-&=+%0A%2F=&=|%0A\\&=~%0A%60&_x:0.25%3B&=Insert&=Home&=PgUp%3B&@_w:1.5%3B&=Tab&=Q&=W&=E&=R&=T&=Y&=U&=I&=O&=P&={%0A[&=}%0A]&_a:0&w:1.5%3B&=Delete%0A%0A%0A%0ABS&_x:0.25&a:4%3B&=Delete&=End&=PgDn%3B&@_w:1.75%3B&=Control&=A&=S&=D&=F&=G&=H&=J&=K&=L&=%2F:%0A%2F%3B&=%22%0A%27&_w:2.25%3B&=Enter&_x:0.25%3B&=Op1&=Op2&=Op3%3B&@_w:2.25%3B&=Shift&=Z&=X&=C&=V&=B&=N&=M&=%3C%0A,&=%3E%0A.&=%3F%0A%2F%2F&_w:2.75%3B&=Shift&_x:1.25%3B&=%E2%86%91%3B&@_w:1.25%3B&=Fn&_w:1.25%3B&=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-logo-apple-outline%27%3E%3C%2F%2Fi%3E&_a:7&w:6.25%3B&=&_a:4&w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-logo-apple%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-Hamburger-Menu%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=Fn&_x:0.25%3B&=%E2%86%90&=%E2%86%93&=%E2%86%92\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/06/keyboard-hacking",
    "thumbnail": "/uploads/2016/teensy-ps2-adapter/minikey.jpg",
    "summary": "<p><strong>TL;DR</strong>: I think I&apos;ve caught the DIY keyboard hacking bug, and I&apos;ll probably\nend up building something weird.</p>\n"
  },
  {
    "title": "Review: Steam Controller",
    "tags": [
      "reviews",
      "gaming",
      "steam",
      "hardware"
    ],
    "year": "2016",
    "month": "02",
    "day": "05",
    "isDir": false,
    "slug": "steam-controller",
    "date": "2016-02-05T12:00:00.000Z",
    "postName": "2016-02-05-steam-controller",
    "html": "<p><strong>TL;DR</strong>: The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is an odd little duck. But, I&#39;m rooting\nfor it.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p><a href=\"https://www.flickr.com/photos/deusx/24726637531/in/dateposted/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/hhkb.jpg\"></a></p>\n<p>I&#39;ve long been a fan of unusual input devices, the more fiddly the better. </p>\n<p>It&#39;s been a little over 15 years since I last used a standard 104-key keyboard\non a PC, having been a <a href=\"http://amzn.to/1nQbo26\">Happy Hacking Keyboard</a> enthusiast ever since I\nfirst <a href=\"http://www.linuxjournal.com/article/3147\">read about it in Linux Journal</a>. </p>\n<p>And, as the gaming world has invested in <a href=\"http://icrontic.com/article/a4tech-v3-bloody-gun3-gaming-mouse-review\">increasingly complex gaming mice</a> over\nthe years, I&#39;ve been solidly in the trackball camp since the late 1990&#39;s when\nI played hours &amp; hours of Quake 2 and Unreal Tournament. </p>\n<p><a href=\"http://vgjunk.tumblr.com/post/63391681929/john-romero-wants-you-to-buy-a-mad-catz-panther-xl\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/panther-xl.jpg\"></a></p>\n<p>The <a href=\"http://assassin3d.squarespace.com/history-panther-xl/\">Mad Catz Panther XL</a> trackball-and-joystick combo\nwas my favorite for flight &amp; space sims like Freespace. I used a <a href=\"http://amzn.to/1nQby9D:\">Microsoft\nSidewinder Strategic Commander</a> to play Everquest one-handed. (The\nother hand was for tinkering with <a href=\"https://github.com/brainiac/showeq\">ShowEQ</a> on a nearby Linux machine, of course.)</p>\n<p>More recently, when I was playing a space trucker in EVE Online, I would often\nride a recumbent exercise bike and use a <a href=\"http://amzn.to/1NKn0bq\">One Finger Mouse</a> with my\nlaptop to align and warp between stations.</p>\n<p>Given all the above, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> looked completely relevant to my\ninterests when <a href=\"http://kotaku.com/valve-announces-the-steam-controller-a-new-way-to-cont-1411558137\">it was announced</a> way back in 2013. </p>\n<p>Fast forward to November 2015, and after many prototypes &amp; tweaks, <a href=\"http://www.theverge.com/2015/11/10/9705234/valve-steam-machines-controller-link-launch\">it finally\narrived</a>. I managed to wait a month or so, watching for red flags\nin early reviews. But, of course, I gave in and had it in time for my\ntraditional end-of-year holiday gaming binge. <br style=\"clear: both\"></p>\n<h2 id=\"ergonomics\">Ergonomics</h2>\n<img class=\"inset left\" src=\"/uploads/2016/steam-controller/couch-pc.jpg\">\n\n<p>At <a href=\"http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/\">my couch PC</a>, I use an Xbox 360 controller whenever I can. I don&#39;t\nwant to clutter the living room with big weird joysticks &amp; such.</p>\n<p>Besides that, having my hands in a neutral position in my lap seems to\nhelp quite a lot with keeping wrist pain at bay after a day in my office\nalready spent with trackball and keyboard. But, not every game supports a\ncontroller out of the box.</p>\n<p>So, it seemed really promising when I read Valve&#39;s claims that the <a href=\"http://amzn.to/1nQzE4f\">Steam\nController</a> would work with &quot;<a href=\"http://store.steampowered.com/app/353370/\">games from all genres</a>&quot;\nincluding titles typically bound to a keyboard and mouse.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24524584120\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/all-3-controllers.jpg\"></a></p>\n<p>Now that I&#39;ve got the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> in my hands, it makes my Xbox 360\ncontroller feel tiny. It reminds me a little of the original Xbox controller.\nThough, it&#39;s really unfair to take that comparison too far - I mean, that\nthing was bigger than some actual game consoles.</p>\n<p>The Xbox 360 handles taper down into rounded points that cover a third of my\npalm. But, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> bulges out at the bottoms and covers about\nhalf of my palm.  </p>\n<p>It&#39;s like the difference between a small chicken egg\nand a jumbo.  (Sorry, I&#39;ve been cooking today.) And where my fingers curl\ninward toward my palm with the 360 controller, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> has\nthem pointing more toward my chest to accomodate the thicker grips.\n<br style=\"clear: both\"></p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24206620773/in/datetaken/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/360-hands.jpg\"></a>\n<a href=\"https://www.flickr.com/photos/deusx/24740006121/in/datetaken/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/sc-hands.jpg\"></a></p>\n<p>(And, this is where I realize I was never destined to be a <a href=\"https://www.youtube.com/watch?v=PZxX3-rJoNI\">hand model</a>.)</p>\n<p>The Xbox 360 controller feels like curved handlebars between\nmy palms and the last three fingers, leaving just my index fingers and thumbs\nfree to move. It could be that I&#39;ve gotten used to it over the years, but the\ndesign of this controller feels like it naturally falls into my relaxed\nhands after I&#39;ve flopped them lazily into my lap. </p>\n<p>The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a>, though, seems to call for a more tense grip that I\ncan feel in my shoulders &amp; wrists after awhile. </p>\n<p>To keep things stable as I play, I find myself using some arm muscle &amp; elbow\npressure to wedge it between the bony first knuckles of my index fingers and\nthe bases of my thumbs.  Except for a little stabilization from my pinkies and\nring fingers, this leaves the rest of my fingers free to reach the thumbpads\nand buttons. <br style=\"clear: both\"></p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24726646081/in/dateposted-public/\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/sides.jpg\"></a>\n<a href=\"https://www.flickr.com/photos/deusx/24702264542/in/dateposted-public/\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/backs.jpg\"></a></p>\n<p>The face of the Xbox 360 controller follows a convex curve. When relaxed, my\nextended thumbs arch over that curve, their pads resting on the left stick and\nright button cluster.</p>\n<p>The face of the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is concave, almost the inverse of the\nother controller. My bent thumbs hover over a pair of circular trackpads,\nwhich are far better controlled with strokes from thumb tips than by swiping or\nrolling flat thumb pads across them.</p>\n<p>Overall, I can&#39;t say I&#39;m entirely comfortable with the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> in\nmy hands. That worries me a little after years of being unkind to my wrists.\nI&#39;m still adjusting my grip on the thing, though. Maybe I&#39;ll get used to it. \nAfter all, I spent years with the first NES gamepad - and it was no ergonomic\nmarvel.\n<br style=\"clear: both\"></p>\n<h2 id=\"hardware\">Hardware</h2>\n<p>In terms of input hardware, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> offers interesting\nimprovements over my trusty old Xbox 360 controller.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24525157630/in/photostream/\"><img id=\"thumbnail\" class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-top.jpg\"></a></p>\n<p>On the front, there&#39;s the &quot;Valve&quot; button flanked by a back &amp; start buttons.\nThere&#39;s also an analog clicky joystick and an X/Y/A/B button cluster. </p>\n<p>But, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a>&#39;s special sauce is the pair of trackpads at the\ntop of the controller. More detail about those when I get to writing about the\nsoftware.</p>\n<p>Beneath these trackpads are the <a href=\"http://www.precisionmicrodrives.com/vibrating-vibrator-vibration-motors/linear-resonant-actuator-lra-haptic-vibration-motors\">linear resonant actuators</a> used for haptic\nfeedback. Interestingly, I haven&#39;t found any games that can use these haptic actuators\nto generate in-game vibration. They seem limited to haptics for controller\nmodes, so far.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24820691505/in/dateposted/\"><img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back.jpg\"></a></p>\n<p>On the back, there&#39;s a pair of shoulder buttons and analog triggers that bottom\nout in clicks like a GameCube controller. Along the handgrips lie two more wide buttons under the\nmiddle &amp; ring fingers.  The plate for those buttons doubles as the battery\ndoor, and one AA battery hides inside each of the handgrips.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24727371301/in/dateposted/\"><img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back-open.jpg\"></a></p>\n<p>On the inside, there are gyro and accelerometer sensors to detect motion and\norientation of the controller. </p>\n<p>If you want to see more of the innards, \nconsult the folks at <a href=\"https://www.ifixit.com/\">iFixit</a>. They did <a href=\"https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\">a great job of documenting their Steam\nController teardown</a>, saving me from feeling like I\nshould open mine up for the sake of this post.</p>\n<p>(But, who am I kidding? I&#39;ll open it up at some point, because that&#39;s\nwhat I do with all my toys.)</p>\n<p>As for power, the controller can run tethered via a micro-USB cable, or\nwirelessly using an included a USB dongle and a pair of AA batteries. </p>\n<p>You can use rechargeables,\nbut the controller itself does not charge them while plugged in. I&#39;d like to\nsee Valve come up with a rechargeable pack at some point.\n<br style=\"clear: both\"></p>\n<h2 id=\"software\">Software</h2>\n<p>The physical design and laundry list of sensors is vaguely interesting. But,\nwhat really makes the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> shine - and sometimes stink - is\nthe software. And, that software is Steam in Big Picture Mode.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/big-picture-home.jpg\">\n\n<p>The only way to configure the Controller is via Big Picture mode.\nAnd, as far as I can tell, launching games (even non-Steam games) via Big\nPicture is the only way to load game-specific configurations. </p>\n<p>I understand that this thing was designed to be paired with a Steam Machine\nand played on a TV. But, I don&#39;t play in front of a TV - and I doubt many PC\ngamers do. I find Big Picture Mode clunky and occasionally crashy. A few\ntimes, the controller has gone non-responsive or got loaded with the wrong\nconfiguration. </p>\n<p>After <a href=\"http://store.steampowered.com/controller/update/dec15\">the firmware update in December</a>, my configuration changes\nare often reverted &amp; lost. Sometimes the Big Picture interface offers up\ndelays &amp; progress animations with no explanation of what&#39;s happening. I&#39;m\nhoping I can troll the forums for some fixes, but having to do that is a bit\ndisappointing.</p>\n<p>It&#39;s early days yet, so things could get better with future patches. Valve\nshows every indication that they plan to support this device for the long\nhaul.  Still, I&#39;d love it if Valve (or the community) released an &quot;expert&quot;\nconfiguration tool as a straightforward desktop Windows application.  Just let\nme quickly assign bindings in a solid, ugly, utilitarian interface and let me\nmanually save &amp; load configurations.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config.png\">\n\n<p>The awkwardness is frustrating, because configuration is the whole reason the\ncontroller exists: I put up with the annoying UI because the result is\ninteresting. With a little tweaking, it really can generate whatever inputs are\nneeded for any game I want to play.</p>\n<p>Except for the Valve button, there are 17 other buttons on the device available\nto generate any combination of keyboard &amp; mouse signals. That includes the\nclicky trackpads &amp; joystick - and I&#39;m counting the analog triggers twice,\nbecause you can set different inputs for both partial and full pulls.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/trackpad-config.png\">\n\n<p>And then, there are the trackpads: In a nutshell, either trackpad can be\nconfigured as a mouse, an analog joystick, a digital d-pad, a cluster of\nbuttons, or to summon up overlay menus triggering arbitrary inputs. There are 9\ndifferent modes covering slightly different simulations of these devices. Each\nmode comes with its own control panel offering an array of sliders, variants,\nand advanced settings.</p>\n<p>For button input, there are ways to define segments of the trackpad as virtual\nbuttons activated on touch or by clicking down the pad.  Joystick input comes\nin a few subtly different flavors I haven&#39;t yet fully explored. </p>\n<p>I&#39;ve also not played much with touch menus. These consist of Steam-generated\noverlays offering up to 16 buttons plus an alternate layer of 16 more.\nBetween both trackpads, this can add up to 64 different virtual buttons\ntriggering whatever keyboard, mouse, or gamepad combinations I&#39;d like.</p>\n<p>For pointer input, there&#39;s a mouse mode similar to a laptop trackpad, with\nvarious acceleration and sensitivity settings. To my personal delight, there&#39;s\na trackball mode: the pad signals momentum through haptic rasping that\ntrails off after your thumb has lifted from a swipe - and it stops immediately\nwhen your thumb returns to the pad. </p>\n<p>You can also enable scroll wheel inputs via the raised outer edges of the\ntrackpads. It feels like to the old click-wheel iPods. </p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config-import.png\">\n\n<p>If all this sounds overwhelming, Steam offers ready-made crowdsourced\nconfigurations.  These are created by game developers, Valve, and shared by\nthe community at large. This means that I don&#39;t have to wait for all the\ndevelopers in the world to get around to supporting this particular weird\ncontroller. Ideally, as time goes on, control schemes will arrive that hit a\nsweet spot for every game.</p>\n<p>Valve has certainly thrown a lot at the wall here. We&#39;ll see how much sticks.\nIt certainly scratches my itch for a fiddly input device, in any case.</p>\n<h2 id=\"compatibility\">Compatibility</h2>\n<p>In a nutshell, if it accepts mouse, keyboard, joystick, or gamepad - the\n<a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> works. In this, the marketing is correct and it does what\nit says on the tin.  The more pressing issue is whether the Controller is\ncompatible with <em>me</em> as an interface to <em>the games I like</em>.</p>\n<p>Of course, it should be noted that I&#39;m by no means a pro gamer. I&#39;m\nthe filthiest of casuals - whatever that means after playing video games avidly\nfor 30 years. I&#39;m in it for fun, couldn&#39;t care less about being competitive.</p>\n<p>I&#39;ve had the most luck in mouse-and-keyboard games like the ponderously-paced\n<a href=\"http://www.failbettergames.com/sunless/\">Sunless Sea</a> and even in the more frenetic <a href=\"http://us.battle.net/d3/en/\">Diablo III</a>. Of course, at\ntimes, I lose track of the pointer in Diablo when I&#39;m spazzing out with my\nthumb and flinging it around between targets and running away to kite things.\nThat seems to get better as I turn down acceleration and play with\nsensitivity. The newer Mouse Regions mode looks interesting, too, as it\nprovides a direct screen-to-trackpad map rather than mouse or trackball style\ninput. </p>\n<p>For what it&#39;s worth, <a href=\"http://kotaku.com/how-league-of-legends-enables-toxicity-1693572469\">I don&#39;t play a lot of MOBAs lately</a>, but I\ncan imagine the dynamics are similar to Diablo.</p>\n<p>I also played a bit of <a href=\"http://store.steampowered.com/app/440/\">Team Fortress 2</a>. As promised, I was able to use\na trackpad for steering &amp; coarse aiming and then tilt the controller itself to\nrefine my aim. Like many things with this device, it takes a bit of getting\nused to and kind of turns it into a new game. Fun-ish, but I&#39;m not great at it\nyet.</p>\n<p><a href=\"http://store.steampowered.com/app/252950/\">Rocket League</a> worked out pretty well - in that I was equally terrible both\nwith the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> and the Xbox 360 controller. I had a lot of fun\nand never felt like I could blame the controller. Again, I&#39;m just a filthy\ncasual.</p>\n<p>I didn&#39;t have as much luck with <a href=\"http://store.steampowered.com/app/323040/\">Laserlife</a>, a surreal rhythm game in the\ntradition of Rez where you guide twin laser trails through targets with analog\nsticks. Ideally, I should be able to use the two trackpads as analog sticks.\nBut, I did a lot better going back to the physical sticks on my Xbox 360\ncontroller. I think the spring resistance in the physical joysticks helped cue\nme into its position. </p>\n<p>The issue seems similar to how I rarely get along with on-screen\ncontrols in smartphone games. But, these trackpads have an advantage\nover virtual glass joysticks - i.e. tactile cues like their surface curve,\nraised edges, and the embossed d-pad shape. I&#39;d like to see if I can find\nworkable settings, because twin-stick shooters are one of my favorite genres.</p>\n<p><a href=\"https://www.elitedangerous.com/\">Elite Dangerous</a> offers a kind of bottomless pit of customization.  It&#39;s a\nwork in progress translating my mouse-and-keyboard controls to a comfortable\nscheme on the Controller. For example, it was stupid fun tying pitch and roll\nto the motion sensors and flying the controller around like a model spaceship.\n(I made zoomy-whoosh-pew-pew noises, too.) I&#39;ve seen other control schemes use\nthe gyro for looking around the cockpit, which is actually used to summon up\nvarious ship panels via gaze. This won&#39;t replace <a href=\"https://www.youtube.com/watch?v=AvAI3l0v62E\">a super-immersive HOTAS &amp;\nhead tracking setup</a>, but I think I can get it to an enjoyable\npoint.</p>\n<p>Overall, I&#39;ve had decent luck with the games I play. Where things\nhaven&#39;t quite worked out, I have a hunch that there&#39;s a workable control\nscheme somewhere inside the giant bag of options on offer. I&#39;ve seen some\nfolks describe the process a bit like getting accustomed to a new keyboard\nlayout like Dvorak. That&#39;s oddly interesting to me, so I&#39;m going to keep\npoking at it.</p>\n<h2 id=\"hackability\">Hackability</h2>\n<p>The Controller is a USB HID composite device - in other words, It <em>is</em> a mouse\n<em>and</em> a keyboard <em>and</em> a joystick <em>and</em> a gamepad, as far as USB is concerned.</p>\n<p>I&#39;ve gotten the sense that Steam does <em>something</em> with the Controller input,\nbut I&#39;m not sure if it analgous to things like <a href=\"http://joytokey.net/en/\">JoyToKey</a> or <a href=\"https://autohotkey.com/\">AutoHotKey</a>\nto translate things on the PC side. My guess is that it leans most heavily on\nprocessing in the controller itself to emit standard USB messages to\nachieve maximum compatibility in games.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24639522001/in/dateposted-public/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/teensy-keyboard.jpg\"></a></p>\n<p>Considering the things found in the <a href=\"https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\">iFixit teardown</a>,\nI&#39;m not seeing any particularly exotic parts. Valve stated early on that &quot;<a href=\"http://hackaday.com/2013/10/01/steam-controller-open-and-hackable/\">the\nSteam Controller was designed from the ground up to be hackable</a>&quot;.</p>\n<p>For example, from <a href=\"https://www.reddit.com/r/SteamControllerMods/comments/3p6d26/some_details_on_the_chips_in_the_controller_and/\">a Reddit thread</a>, I\nlearned that the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is built around the <a href=\"http://www.arm.com/products/processors/cortex-m/cortex-m0.php\">ARM\nCortex-M0</a>. That&#39;s similar to the <a href=\"http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php\">ARM Cortex-M0+</a>\nused in the <a href=\"https://www.pjrc.com/store/teensylc.html\">Teensy LC</a>. </p>\n<p>This is interesting, because I&#39;ve been reading up on how to build a custom\nkeyboard. (You know, as one does.) In the course of that, I&#39;ve been\nacquainting myself with the <a href=\"https://www.pjrc.com/teensy/\">Teensy line of USB development boards</a>.</p>\n<p>Lately, I&#39;ve been playing with the <a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a>. That seems to be\npopular in the DIY community for how easy it makes implementing \nUSB devices.  Granted, that&#39;s a different microcontroller (an <a href=\"http://www.atmel.com/devices/atmega32u4.aspx\">Atmel\nATmega32u4</a>), but I&#39;m hoping that general experience with things like the\nTeensy family of dev boards can eventually translate to some personal fun and\nsome community firmware to explore the potential of the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a>.</p>\n<p>As it is, someone&#39;s already figured out how to <a href=\"https://steamcommunity.com/app/353370/discussions/0/494632506573267894/\">play music through the haptic\nactuators</a> and they released the <a href=\"https://gitlab.com/Pilatomic/SteamControllerSinger\">source\ncode</a>.  That&#39;s more a function of decoding the \nprotocol from PC to Controller than messing around with the microcontrollers,\nbut it&#39;s still pretty cool.</p>\n<p>It would be great if Valve released more docs &amp; code around this thing. I\ncan understand that there might be some pressure to keep the Steam hardware &amp;\nsoftware ecosystem cohesive. But, for a weird little device like this, I\nimagine they&#39;d only get more sales by fully opening everything up and letting\nthe tinkering world pave the way for more uses - and maybe fix a few bugs for\nthem as clever folks scratch their own itches.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is an odd little duck. It&#39;s a bit awkward to hold\nand the software is not great. But, software can be fixed and the controls &amp;\nsensors onboard have so much great potential for PC gaming. </p>\n<p>This is clearly not a mature, finished product - which is disappointing,\nbecause I paid money for it - but I&#39;m really rooting for it. And I&#39;ve already\nused it for dozens of hours in games, so it&#39;s obviously worked for me in many\ncapacities. I&#39;m really hoping that Valve follows through on their promises to\nopen things up for tinkering - because it might be the thing that ultimately\nredeems the whole project.</p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: The [Steam Controller][] is an odd little duck. But, I'm rooting\nfor it.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/hhkb.jpg\">](https://www.flickr.com/photos/deusx/24726637531/in/dateposted/)\n\nI've long been a fan of unusual input devices, the more fiddly the better. \n\nIt's been a little over 15 years since I last used a standard 104-key keyboard\non a PC, having been a [Happy Hacking Keyboard][hhkb] enthusiast ever since I\nfirst [read about it in Linux Journal][hhkb-review]. \n\n[hhkb-review]: http://www.linuxjournal.com/article/3147\n[hhkb]: http://amzn.to/1nQbo26\n\nAnd, as the gaming world has invested in [increasingly complex gaming mice][gamingmice] over\nthe years, I've been solidly in the trackball camp since the late 1990's when\nI played hours & hours of Quake 2 and Unreal Tournament. \n\n[gamingmice]: http://icrontic.com/article/a4tech-v3-bloody-gun3-gaming-mouse-review\n\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/panther-xl.jpg\">](http://vgjunk.tumblr.com/post/63391681929/john-romero-wants-you-to-buy-a-mad-catz-panther-xl)\n\nThe [Mad Catz Panther XL][pantherxl] trackball-and-joystick combo\nwas my favorite for flight & space sims like Freespace. I used a [Microsoft\nSidewinder Strategic Commander][msssc] to play Everquest one-handed. (The\nother hand was for tinkering with [ShowEQ][] on a nearby Linux machine, of course.)\n\n[showeq]: https://github.com/brainiac/showeq\n\nMore recently, when I was playing a space trucker in EVE Online, I would often\nride a recumbent exercise bike and use a [One Finger Mouse][ofm] with my\nlaptop to align and warp between stations.\n\n[msssc]: http://amzn.to/1nQby9D:\n[pantherxl]: http://assassin3d.squarespace.com/history-panther-xl/ \n[ofm]: http://amzn.to/1NKn0bq\n\nGiven all the above, the [Steam Controller][] looked completely relevant to my\ninterests when [it was announced][scannounce] way back in 2013. \n\nFast forward to November 2015, and after many prototypes & tweaks, [it finally\narrived][screleased]. I managed to wait a month or so, watching for red flags\nin early reviews. But, of course, I gave in and had it in time for my\ntraditional end-of-year holiday gaming binge. <br style=\"clear: both\">\n\n[scannounce]: http://kotaku.com/valve-announces-the-steam-controller-a-new-way-to-cont-1411558137\n[screleased]: http://www.theverge.com/2015/11/10/9705234/valve-steam-machines-controller-link-launch\n[Steam Controller]: http://amzn.to/1nQzE4f\n\n## Ergonomics\n\n<img class=\"inset left\" src=\"/uploads/2016/steam-controller/couch-pc.jpg\">\n\nAt [my couch PC][couchpc], I use an Xbox 360 controller whenever I can. I don't\nwant to clutter the living room with big weird joysticks & such.\n\n[couchpc]: http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/\n\nBesides that, having my hands in a neutral position in my lap seems to\nhelp quite a lot with keeping wrist pain at bay after a day in my office\nalready spent with trackball and keyboard. But, not every game supports a\ncontroller out of the box.\n\nSo, it seemed really promising when I read Valve's claims that the [Steam\nController][] would work with \"[games from all genres][steamhardware]\"\nincluding titles typically bound to a keyboard and mouse.\n\n[steamhardware]: http://store.steampowered.com/app/353370/\n\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/all-3-controllers.jpg\">](https://www.flickr.com/photos/deusx/24524584120)\n\nNow that I've got the [Steam Controller][] in my hands, it makes my Xbox 360\ncontroller feel tiny. It reminds me a little of the original Xbox controller.\nThough, it's really unfair to take that comparison too far - I mean, that\nthing was bigger than some actual game consoles.\n\nThe Xbox 360 handles taper down into rounded points that cover a third of my\npalm. But, the [Steam Controller][] bulges out at the bottoms and covers about\nhalf of my palm.  \n\nIt's like the difference between a small chicken egg\nand a jumbo.  (Sorry, I've been cooking today.) And where my fingers curl\ninward toward my palm with the 360 controller, the [Steam Controller][] has\nthem pointing more toward my chest to accomodate the thicker grips.\n<br style=\"clear: both\">\n\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/360-hands.jpg\">](https://www.flickr.com/photos/deusx/24206620773/in/datetaken/)\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/sc-hands.jpg\">](https://www.flickr.com/photos/deusx/24740006121/in/datetaken/)\n\n(And, this is where I realize I was never destined to be a [hand model][].)\n\n[hand model]: https://www.youtube.com/watch?v=PZxX3-rJoNI\n\nThe Xbox 360 controller feels like curved handlebars between\nmy palms and the last three fingers, leaving just my index fingers and thumbs\nfree to move. It could be that I've gotten used to it over the years, but the\ndesign of this controller feels like it naturally falls into my relaxed\nhands after I've flopped them lazily into my lap. \n\nThe [Steam Controller][], though, seems to call for a more tense grip that I\ncan feel in my shoulders & wrists after awhile. \n\nTo keep things stable as I play, I find myself using some arm muscle & elbow\npressure to wedge it between the bony first knuckles of my index fingers and\nthe bases of my thumbs.  Except for a little stabilization from my pinkies and\nring fingers, this leaves the rest of my fingers free to reach the thumbpads\nand buttons. <br style=\"clear: both\">\n\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/sides.jpg\">](https://www.flickr.com/photos/deusx/24726646081/in/dateposted-public/)\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/backs.jpg\">](https://www.flickr.com/photos/deusx/24702264542/in/dateposted-public/)\n\nThe face of the Xbox 360 controller follows a convex curve. When relaxed, my\nextended thumbs arch over that curve, their pads resting on the left stick and\nright button cluster.\n\nThe face of the [Steam Controller][] is concave, almost the inverse of the\nother controller. My bent thumbs hover over a pair of circular trackpads,\nwhich are far better controlled with strokes from thumb tips than by swiping or\nrolling flat thumb pads across them.\n\n[dpbone]: https://en.wikipedia.org/wiki/Phalanx_bone#Distal_phalanx\n\nOverall, I can't say I'm entirely comfortable with the [Steam Controller][] in\nmy hands. That worries me a little after years of being unkind to my wrists.\nI'm still adjusting my grip on the thing, though. Maybe I'll get used to it. \nAfter all, I spent years with the first NES gamepad - and it was no ergonomic\nmarvel.\n<br style=\"clear: both\">\n\n## Hardware\n\nIn terms of input hardware, the [Steam Controller][] offers interesting\nimprovements over my trusty old Xbox 360 controller.\n\n[<img id=\"thumbnail\" class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-top.jpg\">](https://www.flickr.com/photos/deusx/24525157630/in/photostream/)\n\nOn the front, there's the \"Valve\" button flanked by a back & start buttons.\nThere's also an analog clicky joystick and an X/Y/A/B button cluster. \n\nBut, the [Steam Controller][]'s special sauce is the pair of trackpads at the\ntop of the controller. More detail about those when I get to writing about the\nsoftware.\n\nBeneath these trackpads are the [linear resonant actuators][lra] used for haptic\nfeedback. Interestingly, I haven't found any games that can use these haptic actuators\nto generate in-game vibration. They seem limited to haptics for controller\nmodes, so far.\n\n[lra]: http://www.precisionmicrodrives.com/vibrating-vibrator-vibration-motors/linear-resonant-actuator-lra-haptic-vibration-motors\n\n[<img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back.jpg\">](https://www.flickr.com/photos/deusx/24820691505/in/dateposted/)\n\nOn the back, there's a pair of shoulder buttons and analog triggers that bottom\nout in clicks like a GameCube controller. Along the handgrips lie two more wide buttons under the\nmiddle & ring fingers.  The plate for those buttons doubles as the battery\ndoor, and one AA battery hides inside each of the handgrips.\n\n[<img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back-open.jpg\">](https://www.flickr.com/photos/deusx/24727371301/in/dateposted/)\n\nOn the inside, there are gyro and accelerometer sensors to detect motion and\norientation of the controller. \n\nIf you want to see more of the innards, \nconsult the folks at [iFixit][]. They did [a great job of documenting their Steam\nController teardown][teardown], saving me from feeling like I\nshould open mine up for the sake of this post.\n\n(But, who am I kidding? I'll open it up at some point, because that's\nwhat I do with all my toys.)\n\nAs for power, the controller can run tethered via a micro-USB cable, or\nwirelessly using an included a USB dongle and a pair of AA batteries. \n\nYou can use rechargeables,\nbut the controller itself does not charge them while plugged in. I'd like to\nsee Valve come up with a rechargeable pack at some point.\n<br style=\"clear: both\">\n\n[teardown]: https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\n[ifixit]: https://www.ifixit.com/\n\n## Software\n\nThe physical design and laundry list of sensors is vaguely interesting. But,\nwhat really makes the [Steam Controller][] shine - and sometimes stink - is\nthe software. And, that software is Steam in Big Picture Mode.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/big-picture-home.jpg\">\n\nThe only way to configure the Controller is via Big Picture mode.\nAnd, as far as I can tell, launching games (even non-Steam games) via Big\nPicture is the only way to load game-specific configurations. \n\nI understand that this thing was designed to be paired with a Steam Machine\nand played on a TV. But, I don't play in front of a TV - and I doubt many PC\ngamers do. I find Big Picture Mode clunky and occasionally crashy. A few\ntimes, the controller has gone non-responsive or got loaded with the wrong\nconfiguration. \n\nAfter [the firmware update in December][scdecpatch], my configuration changes\nare often reverted & lost. Sometimes the Big Picture interface offers up\ndelays & progress animations with no explanation of what's happening. I'm\nhoping I can troll the forums for some fixes, but having to do that is a bit\ndisappointing.\n\n[scdecpatch]: http://store.steampowered.com/controller/update/dec15\n\nIt's early days yet, so things could get better with future patches. Valve\nshows every indication that they plan to support this device for the long\nhaul.  Still, I'd love it if Valve (or the community) released an \"expert\"\nconfiguration tool as a straightforward desktop Windows application.  Just let\nme quickly assign bindings in a solid, ugly, utilitarian interface and let me\nmanually save & load configurations.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config.png\">\n\nThe awkwardness is frustrating, because configuration is the whole reason the\ncontroller exists: I put up with the annoying UI because the result is\ninteresting. With a little tweaking, it really can generate whatever inputs are\nneeded for any game I want to play.\n\nExcept for the Valve button, there are 17 other buttons on the device available\nto generate any combination of keyboard & mouse signals. That includes the\nclicky trackpads & joystick - and I'm counting the analog triggers twice,\nbecause you can set different inputs for both partial and full pulls.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/trackpad-config.png\">\n\nAnd then, there are the trackpads: In a nutshell, either trackpad can be\nconfigured as a mouse, an analog joystick, a digital d-pad, a cluster of\nbuttons, or to summon up overlay menus triggering arbitrary inputs. There are 9\ndifferent modes covering slightly different simulations of these devices. Each\nmode comes with its own control panel offering an array of sliders, variants,\nand advanced settings.\n\nFor button input, there are ways to define segments of the trackpad as virtual\nbuttons activated on touch or by clicking down the pad.  Joystick input comes\nin a few subtly different flavors I haven't yet fully explored. \n\nI've also not played much with touch menus. These consist of Steam-generated\noverlays offering up to 16 buttons plus an alternate layer of 16 more.\nBetween both trackpads, this can add up to 64 different virtual buttons\ntriggering whatever keyboard, mouse, or gamepad combinations I'd like.\n\nFor pointer input, there's a mouse mode similar to a laptop trackpad, with\nvarious acceleration and sensitivity settings. To my personal delight, there's\na trackball mode: the pad signals momentum through haptic rasping that\ntrails off after your thumb has lifted from a swipe - and it stops immediately\nwhen your thumb returns to the pad. \n\nYou can also enable scroll wheel inputs via the raised outer edges of the\ntrackpads. It feels like to the old click-wheel iPods. \n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config-import.png\">\n\nIf all this sounds overwhelming, Steam offers ready-made crowdsourced\nconfigurations.  These are created by game developers, Valve, and shared by\nthe community at large. This means that I don't have to wait for all the\ndevelopers in the world to get around to supporting this particular weird\ncontroller. Ideally, as time goes on, control schemes will arrive that hit a\nsweet spot for every game.\n\nValve has certainly thrown a lot at the wall here. We'll see how much sticks.\nIt certainly scratches my itch for a fiddly input device, in any case.\n\n## Compatibility\n\nIn a nutshell, if it accepts mouse, keyboard, joystick, or gamepad - the\n[Steam Controller][] works. In this, the marketing is correct and it does what\nit says on the tin.  The more pressing issue is whether the Controller is\ncompatible with *me* as an interface to *the games I like*.\n\nOf course, it should be noted that I'm by no means a pro gamer. I'm\nthe filthiest of casuals - whatever that means after playing video games avidly\nfor 30 years. I'm in it for fun, couldn't care less about being competitive.\n\nI've had the most luck in mouse-and-keyboard games like the ponderously-paced\n[Sunless Sea][] and even in the more frenetic [Diablo III][]. Of course, at\ntimes, I lose track of the pointer in Diablo when I'm spazzing out with my\nthumb and flinging it around between targets and running away to kite things.\nThat seems to get better as I turn down acceleration and play with\nsensitivity. The newer Mouse Regions mode looks interesting, too, as it\nprovides a direct screen-to-trackpad map rather than mouse or trackball style\ninput. \n\nFor what it's worth, [I don't play a lot of MOBAs lately][mobatoxic], but I\ncan imagine the dynamics are similar to Diablo.\n\n[mobatoxic]: http://kotaku.com/how-league-of-legends-enables-toxicity-1693572469\n\nI also played a bit of [Team Fortress 2][tf2]. As promised, I was able to use\na trackpad for steering & coarse aiming and then tilt the controller itself to\nrefine my aim. Like many things with this device, it takes a bit of getting\nused to and kind of turns it into a new game. Fun-ish, but I'm not great at it\nyet.\n\n[tf2]: http://store.steampowered.com/app/440/\n\n[Rocket League][] worked out pretty well - in that I was equally terrible both\nwith the [Steam Controller][] and the Xbox 360 controller. I had a lot of fun\nand never felt like I could blame the controller. Again, I'm just a filthy\ncasual.\n\nI didn't have as much luck with [Laserlife][], a surreal rhythm game in the\ntradition of Rez where you guide twin laser trails through targets with analog\nsticks. Ideally, I should be able to use the two trackpads as analog sticks.\nBut, I did a lot better going back to the physical sticks on my Xbox 360\ncontroller. I think the spring resistance in the physical joysticks helped cue\nme into its position. \n\nThe issue seems similar to how I rarely get along with on-screen\ncontrols in smartphone games. But, these trackpads have an advantage\nover virtual glass joysticks - i.e. tactile cues like their surface curve,\nraised edges, and the embossed d-pad shape. I'd like to see if I can find\nworkable settings, because twin-stick shooters are one of my favorite genres.\n\n[Elite Dangerous][] offers a kind of bottomless pit of customization.  It's a\nwork in progress translating my mouse-and-keyboard controls to a comfortable\nscheme on the Controller. For example, it was stupid fun tying pitch and roll\nto the motion sensors and flying the controller around like a model spaceship.\n(I made zoomy-whoosh-pew-pew noises, too.) I've seen other control schemes use\nthe gyro for looking around the cockpit, which is actually used to summon up\nvarious ship panels via gaze. This won't replace [a super-immersive HOTAS &\nhead tracking setup][eliteimmersive], but I think I can get it to an enjoyable\npoint.\n\n[eliteimmersive]: https://www.youtube.com/watch?v=AvAI3l0v62E\n[Sunless Sea]: http://www.failbettergames.com/sunless/\n[Diablo III]: http://us.battle.net/d3/en/\n[Laserlife]: http://store.steampowered.com/app/323040/\n[Rocket League]: http://store.steampowered.com/app/252950/\n[Elite Dangerous]: https://www.elitedangerous.com/\n \nOverall, I've had decent luck with the games I play. Where things\nhaven't quite worked out, I have a hunch that there's a workable control\nscheme somewhere inside the giant bag of options on offer. I've seen some\nfolks describe the process a bit like getting accustomed to a new keyboard\nlayout like Dvorak. That's oddly interesting to me, so I'm going to keep\npoking at it.\n\n## Hackability\n\nThe Controller is a USB HID composite device - in other words, It *is* a mouse\n*and* a keyboard *and* a joystick *and* a gamepad, as far as USB is concerned.\n\nI've gotten the sense that Steam does *something* with the Controller input,\nbut I'm not sure if it analgous to things like [JoyToKey][] or [AutoHotKey][]\nto translate things on the PC side. My guess is that it leans most heavily on\nprocessing in the controller itself to emit standard USB messages to\nachieve maximum compatibility in games.\n\n[JoyToKey]: http://joytokey.net/en/\n[AutoHotKey]: https://autohotkey.com/\n\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/teensy-keyboard.jpg\">](https://www.flickr.com/photos/deusx/24639522001/in/dateposted-public/)\n\nConsidering the things found in the [iFixit teardown][teardown],\nI'm not seeing any particularly exotic parts. Valve stated early on that \"[the\nSteam Controller was designed from the ground up to be hackable][schackable]\".\n\nFor example, from [a Reddit thread][reddit-chips], I\nlearned that the [Steam Controller][] is built around the [ARM\nCortex-M0][cortex-m0]. That's similar to the [ARM Cortex-M0+][cortex-m0-plus]\nused in the [Teensy LC][teensylc]. \n\nThis is interesting, because I've been reading up on how to build a custom\nkeyboard. (You know, as one does.) In the course of that, I've been\nacquainting myself with the [Teensy line of USB development boards][teensy].\n\nLately, I've been playing with the [Teensy 2.0][teensy20]. That seems to be\npopular in the DIY community for how easy it makes implementing \nUSB devices.  Granted, that's a different microcontroller (an [Atmel\nATmega32u4][ATmega32u4]), but I'm hoping that general experience with things like the\nTeensy family of dev boards can eventually translate to some personal fun and\nsome community firmware to explore the potential of the [Steam Controller][].\n\nAs it is, someone's already figured out how to [play music through the haptic\nactuators][hapticmusic] and they released the [source\ncode][hapticmusicsource].  That's more a function of decoding the \nprotocol from PC to Controller than messing around with the microcontrollers,\nbut it's still pretty cool.\n\nIt would be great if Valve released more docs & code around this thing. I\ncan understand that there might be some pressure to keep the Steam hardware &\nsoftware ecosystem cohesive. But, for a weird little device like this, I\nimagine they'd only get more sales by fully opening everything up and letting\nthe tinkering world pave the way for more uses - and maybe fix a few bugs for\nthem as clever folks scratch their own itches.\n\n[ATmega32u4]: http://www.atmel.com/devices/atmega32u4.aspx\n[schackable]: http://hackaday.com/2013/10/01/steam-controller-open-and-hackable/\n[teensylc]: https://www.pjrc.com/store/teensylc.html\n[teensy]: https://www.pjrc.com/teensy/\n[teensy20]: https://www.pjrc.com/store/teensy.html\n[teardown]: https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\n[cortex-m0-plus]: http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php\n[cortex-m0]: http://www.arm.com/products/processors/cortex-m/cortex-m0.php\n\n[reddit-chips]: https://www.reddit.com/r/SteamControllerMods/comments/3p6d26/some_details_on_the_chips_in_the_controller_and/\n\n[hapticmusic]: https://steamcommunity.com/app/353370/discussions/0/494632506573267894/\n[hapticmusicsource]: https://gitlab.com/Pilatomic/SteamControllerSinger\n\n## Conclusion\n\nThe [Steam Controller][] is an odd little duck. It's a bit awkward to hold\nand the software is not great. But, software can be fixed and the controls &\nsensors onboard have so much great potential for PC gaming. \n\nThis is clearly not a mature, finished product - which is disappointing,\nbecause I paid money for it - but I'm really rooting for it. And I've already\nused it for dozens of hours in games, so it's obviously worked for me in many\ncapacities. I'm really hoping that Valve follows through on their promises to\nopen things up for tinkering - because it might be the thing that ultimately\nredeems the whole project.\n\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/05/steam-controller",
    "thumbnail": "/uploads/2016/steam-controller/sc-top.jpg",
    "summary": "<p><strong>TL;DR</strong>: The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is an odd little duck. But, I&apos;m rooting\nfor it.</p>\n"
  },
  {
    "comments_archived": true,
    "date": "2008-10-19T16:07:19.000Z",
    "layout": "post",
    "tags": [
      "apple",
      "hardware",
      "entries",
      "laptops",
      "personalcomputers",
      "pcs",
      "sustainability"
    ],
    "title": "Upgrades versus Antiques",
    "wordpress_id": 1407,
    "wordpress_slug": "upgrades-versus-antiques",
    "wordpress_url": "http://decafbad.com/blog/?p=1407",
    "year": "2008",
    "month": "10",
    "day": "19",
    "isDir": false,
    "slug": "upgrades-versus-antiques",
    "postName": "2008-10-19-upgrades-versus-antiques",
    "html": "<p>From <a href=\"http://greenmonk.net/?p=111\">Greenmonk: The Blog - Cherish The AIR? Just because you can doesn’t mean you should</a>:</p>\n<blockquote>\n<p>...the core idea that should be upheld by companies like Apple should be about making things better and less often. Making things that will be able to evolve, be upgraded, be adaptable, hackable and more fun to use for longer so that as a customer I don’t think that I’m buying version 3.4 of something that will only be as good as it’s last press release. I want to buy “the” quintessential Apple product and cherish it for years, like people would cherish a vintage car.</p>\n</blockquote>\n<p>From <a href=\"http://describe.blogspot.com/2008/10/upgrade-treadmill-is-wearing-us-out.html\">De-Scribed: The upgrade treadmill is wearing us out</a>:</p>\n<blockquote>\n<p>Replace &quot;quintessential Apple product&quot; with pretty much &quot;any product&quot; (use your imagination) and you start to get at a shift in both attitude and culture that would solve a lot of problems. Get off the upgrade treadmill. There are already too many others.</p>\n</blockquote>\n<p>When&#39;s the last time you upgraded your watch to one with a more reliable chronometer?  Bought a new pen with a better ink formulation or superior delivery mechanism?  You may, of course, <a href=\"http://delicious.com/deusx/pens\">be an exception</a>—but there are a lot of other personal artifacts that have reached similar plateaus for most, where the classic vintage version is every bit as useful as the modern iteration.</p>\n<p>I keep wondering when personal computers will hit a flat spot in Moore&#39;s Law.  Or, failing that, <a href=\"http://www.amazon.com/Invisible-Computer-Products-Information-Appliances/dp/0262640414/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1224345788&amp;sr=1-1&amp;tag=0xdecafbad01-20\">when the capabilities and usability of such a machine meet and surpass any reasonable owner&#39;s practical demands to the point where fashion and style become the selling features</a>.  I think we&#39;re almost there—actually, we&#39;re probably there now for most people who aren&#39;t me.</p>\n<p>Beyond the constantly growing demands of gaming, it seems like most personal computers now can do most of what anyone wants them to do.  Even for me, this last-gen MacBook Pro feels like the best computer I&#39;ve owned to date, and strangely enough I&#39;m hesitant to think about upgrades for awhile this time.  I like the product design, performance is very good, and I&#39;ve got the memory maxed out to the point where I can run several copies of Windows in Parallels—which, itself, I think is a very weird requirement, yet still satisfied by this machine.</p>\n<p>Storage media can hold amazing amounts of personal photos and video, and will reach near-incomprehensible levels pretty soon.  Screen resolution is just about at a point where most people don&#39;t care if it gets better, and the same goes for sound.  Barring any sort of Moore&#39;s Law for finding new uses for personal computers that require significantly more power, demands for functionality will likely be completely met by even the lowest end laptop soon.</p>\n<p>So, how long until the first new personal computer arrives that turns out to be the old beater I still use 15 years from now, or sell to a kid down the block who just got his web learner&#39;s permit?</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087999\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://ciarang.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=18910207650685d4592d9a6a71528180&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://ciarang.com/\">CiaranG</a>\n</div>\n<a href=\"#comment-221087999\" class=\"permalink\"><time datetime=\"2008-10-19T18:15:41\">2008-10-19T18:15:41</time></a>\n</div>\n<div class=\"content\"><p>For the most part, I'm already there.</p>\n<p>I have several PCs around the house in daily use that are at least 8 years old. Drives may have been upgraded and RAM added here and there, but essentially they're still the same. Some run Win2K (there's something that hit a sweet spot and only got worse thereafter) while others run up-to-date Ubuntu or Debian. Whichever, they're perfectly usable for web browsing, document editing, email, and even development.</p>\n<p>I'm not claiming my daily workhorse laptop is quite such an antique, but it must be a couple of years old and I have no urge to upgrade it yet.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088001\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://urbanmainframe.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c3f301cac17525e5175c5c35ca2b6fa4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://urbanmainframe.com/\">Jonathan M. Hollin</a>\n</div>\n<a href=\"#comment-221088001\" class=\"permalink\"><time datetime=\"2008-10-19T19:24:15\">2008-10-19T19:24:15</time></a>\n</div>\n<div class=\"content\"><p>I'm running a Power Mac G5 that's a few years old now but, with the latest OS and software revisions, is still perfectly adequate for my computing needs. Sure, I'd love to upgrade to a top-of-the-line Mac Pro but I simply can't justify the expense when the G5 is such a great \"antique\".</p>\n<p>I also still use my Apple MessagePad 2100 every day. It's an extremely reliable and well-featured PDA and I see no need to replace it.</p>\n<p>Finally we have an old P4 PC running XP. It's real slow but the kids use it for homework and web browsing and it'll stay for while yet.</p>\n<p>So I agree, we may have reached that sweet spot already.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088005\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bbb1c69b64019a3df907c3545186f907&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Sean Conner</a>\n</div>\n<a href=\"#comment-221088005\" class=\"permalink\"><time datetime=\"2008-10-19T20:39:50\">2008-10-19T20:39:50</time></a>\n</div>\n<div class=\"content\"><p>I'm just now upgrading my main desktop from a 12 year old AMD-586 (150MHz, 32M RAM, something like 17G drive space) to a dual-core P4 with a gig of RAM and 150G of drive space (I think---it's large compared to what I'm used to).  </p>\n<p>Why haven't I upgraded before?  Because the AMD system met my needs for that long.  I do mostly C development, and it's been a good workhorse for all that time.  And now that computers have pretty much settled down, my new machine should be good for at least a decade if not more.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088006\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://grendelkhan.livejournal.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7f315a0acbe30c75636e3a1d47ca8f82&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://grendelkhan.livejournal.com\">grendelkhan</a>\n</div>\n<a href=\"#comment-221088006\" class=\"permalink\"><time datetime=\"2008-10-20T15:51:43\">2008-10-20T15:51:43</time></a>\n</div>\n<div class=\"content\"><p>The problem with screen resolution isn't so much about DPI as it is about size--this is why HDTV is, in its own way, the wrong idea. Users are far more liable to pick a larger display as being more high-quality than they are to pick a higher-resolution display.</p>\n<p>Apart from that, I think we'll see a lot more throwing away of the various hacks and optimization that let us do what we wanted on lesser hardware. Smooth video playback is a solved problem? Let's funnel low-quality video through a proprietary browser plugin that chews so much CPU that you can't watch it even in a tiny window without skipping and juddering! Mmm, Flash. You make me party like it's 1999. Of course, using something like youtube-dl and playing the video with a dedicated player works fine. Perhaps the Flash folks are part of a massive conspiracy to keep us juicing up our hardware, eh?</p>\n<p>I do think that some components can't be reasonably manufactured to last for fifteen years of continuous use, like power supplies and hard drives, but that's more of a corner case.</p>\n<p>And if you'd like to consider a field moving from a tradition of finely-manufactured heirloom objects that you could leave to your grandkids, to the upgrade treadmill of the eighteen-month semiconductor manufacturing cycle, consider photography. Yes, the marginal cost of a digital photo is nil, but instead of buying new film, you have to buy a new camera every year or two. <a href=\"http://www.luminous-landscape.com/essays/enough-already.shtml\" rel=\"nofollow\">People who work in the field have written on this.</a></p>\n<p>I have a (roughly?) five year old DSLR, and I can't tell if it feels ancient because I'm used to electronics aging like that, or because it was one of the first non-professional (i.e., affordable by mere mortals) models. If I could afford it, I'd have probably bought a new one by now.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221088009\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://williamtozier.com/slurry\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4c08a99da7938c3ce0aeb6580c731070&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://williamtozier.com/slurry\">Bill Tozier</a>\n</div>\n<a href=\"#comment-221088009\" class=\"permalink\"><time datetime=\"2008-10-21T12:32:27\">2008-10-21T12:32:27</time></a>\n</div>\n<div class=\"content\"><p>Unlike pens and watches, computers (\"computing infrastructure\") are still expanding to fill cultural niches, still breaking out into the wave of creative destruction. Phones and computers and smart dust and sensor-laden clothes are all still vying for resources like weed species colonizing an empty continent.</p>\n<p>But like weed species, they have limited lifetimes. They're depending on <a href=\"http://en.wikipedia.org/wiki/K-selection\" rel=\"nofollow\">r-selection</a>, still. Not K-selection, which is what you want. I expect r-selection is part of the marketing culture surrounding all this tech.</p>\n<p>And now I think about it, I wonder if maybe it works the other way around: you can't \"market\" something that's long-lived, especially something you interact with communicatively and increasingly like a peer (unlike your pen or your watch).</p>\n<p>I think it's time for a new shade tree in the back yard. That cow is looking kindof slow compared to these new cows they have, maybe we should replace it. I was thinking of a new left hand; what do you think of yours?</p>\n<p>That'll be the real Andy Clark moment, by the way. And the counterpoint to the one you're waiting for.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "From [Greenmonk: The Blog - Cherish The AIR? Just because you can doesn’t mean you should](http://greenmonk.net/?p=111):\r\n\r\n> ...the core idea that should be upheld by companies like Apple should be about making things better and less often. Making things that will be able to evolve, be upgraded, be adaptable, hackable and more fun to use for longer so that as a customer I don’t think that I’m buying version 3.4 of something that will only be as good as it’s last press release. I want to buy “the” quintessential Apple product and cherish it for years, like people would cherish a vintage car.\r\n\r\nFrom [De-Scribed: The upgrade treadmill is wearing us out](http://describe.blogspot.com/2008/10/upgrade-treadmill-is-wearing-us-out.html):\r\n\r\n> Replace \"quintessential Apple product\" with pretty much \"any product\" (use your imagination) and you start to get at a shift in both attitude and culture that would solve a lot of problems. Get off the upgrade treadmill. There are already too many others.\r\n\r\nWhen's the last time you upgraded your watch to one with a more reliable chronometer?  Bought a new pen with a better ink formulation or superior delivery mechanism?  You may, of course, [be an exception][pens]—but there are a lot of other personal artifacts that have reached similar plateaus for most, where the classic vintage version is every bit as useful as the modern iteration.\r\n\r\nI keep wondering when personal computers will hit a flat spot in Moore's Law.  Or, failing that, [when the capabilities and usability of such a machine meet and surpass any reasonable owner's practical demands to the point where fashion and style become the selling features][invis].  I think we're almost there—actually, we're probably there now for most people who aren't me.\r\n\r\nBeyond the constantly growing demands of gaming, it seems like most personal computers now can do most of what anyone wants them to do.  Even for me, this last-gen MacBook Pro feels like the best computer I've owned to date, and strangely enough I'm hesitant to think about upgrades for awhile this time.  I like the product design, performance is very good, and I've got the memory maxed out to the point where I can run several copies of Windows in Parallels—which, itself, I think is a very weird requirement, yet still satisfied by this machine.\r\n\r\nStorage media can hold amazing amounts of personal photos and video, and will reach near-incomprehensible levels pretty soon.  Screen resolution is just about at a point where most people don't care if it gets better, and the same goes for sound.  Barring any sort of Moore's Law for finding new uses for personal computers that require significantly more power, demands for functionality will likely be completely met by even the lowest end laptop soon.\r\n\r\nSo, how long until the first new personal computer arrives that turns out to be the old beater I still use 15 years from now, or sell to a kid down the block who just got his web learner's permit?\r\n\r\n[pens]: http://delicious.com/deusx/pens\r\n[invis]: http://www.amazon.com/Invisible-Computer-Products-Information-Appliances/dp/0262640414/ref=sr_1_1?ie=UTF8&s=books&qid=1224345788&sr=1-1&tag=0xdecafbad01-20\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087999\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://ciarang.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=18910207650685d4592d9a6a71528180&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://ciarang.com/\">CiaranG</a>\n                </div>\n                <a href=\"#comment-221087999\" class=\"permalink\"><time datetime=\"2008-10-19T18:15:41\">2008-10-19T18:15:41</time></a>\n            </div>\n            <div class=\"content\"><p>For the most part, I'm already there.</p>\n\n<p>I have several PCs around the house in daily use that are at least 8 years old. Drives may have been upgraded and RAM added here and there, but essentially they're still the same. Some run Win2K (there's something that hit a sweet spot and only got worse thereafter) while others run up-to-date Ubuntu or Debian. Whichever, they're perfectly usable for web browsing, document editing, email, and even development.</p>\n\n<p>I'm not claiming my daily workhorse laptop is quite such an antique, but it must be a couple of years old and I have no urge to upgrade it yet.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088001\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://urbanmainframe.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=c3f301cac17525e5175c5c35ca2b6fa4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://urbanmainframe.com/\">Jonathan M. Hollin</a>\n                </div>\n                <a href=\"#comment-221088001\" class=\"permalink\"><time datetime=\"2008-10-19T19:24:15\">2008-10-19T19:24:15</time></a>\n            </div>\n            <div class=\"content\"><p>I'm running a Power Mac G5 that's a few years old now but, with the latest OS and software revisions, is still perfectly adequate for my computing needs. Sure, I'd love to upgrade to a top-of-the-line Mac Pro but I simply can't justify the expense when the G5 is such a great \"antique\".</p>\n\n<p>I also still use my Apple MessagePad 2100 every day. It's an extremely reliable and well-featured PDA and I see no need to replace it.</p>\n\n<p>Finally we have an old P4 PC running XP. It's real slow but the kids use it for homework and web browsing and it'll stay for while yet.</p>\n\n<p>So I agree, we may have reached that sweet spot already.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088005\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=bbb1c69b64019a3df907c3545186f907&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Sean Conner</a>\n                </div>\n                <a href=\"#comment-221088005\" class=\"permalink\"><time datetime=\"2008-10-19T20:39:50\">2008-10-19T20:39:50</time></a>\n            </div>\n            <div class=\"content\"><p>I'm just now upgrading my main desktop from a 12 year old AMD-586 (150MHz, 32M RAM, something like 17G drive space) to a dual-core P4 with a gig of RAM and 150G of drive space (I think---it's large compared to what I'm used to).  </p>\n\n<p>Why haven't I upgraded before?  Because the AMD system met my needs for that long.  I do mostly C development, and it's been a good workhorse for all that time.  And now that computers have pretty much settled down, my new machine should be good for at least a decade if not more.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088006\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://grendelkhan.livejournal.com\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7f315a0acbe30c75636e3a1d47ca8f82&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://grendelkhan.livejournal.com\">grendelkhan</a>\n                </div>\n                <a href=\"#comment-221088006\" class=\"permalink\"><time datetime=\"2008-10-20T15:51:43\">2008-10-20T15:51:43</time></a>\n            </div>\n            <div class=\"content\"><p>The problem with screen resolution isn't so much about DPI as it is about size--this is why HDTV is, in its own way, the wrong idea. Users are far more liable to pick a larger display as being more high-quality than they are to pick a higher-resolution display.</p>\n\n<p>Apart from that, I think we'll see a lot more throwing away of the various hacks and optimization that let us do what we wanted on lesser hardware. Smooth video playback is a solved problem? Let's funnel low-quality video through a proprietary browser plugin that chews so much CPU that you can't watch it even in a tiny window without skipping and juddering! Mmm, Flash. You make me party like it's 1999. Of course, using something like youtube-dl and playing the video with a dedicated player works fine. Perhaps the Flash folks are part of a massive conspiracy to keep us juicing up our hardware, eh?</p>\n\n<p>I do think that some components can't be reasonably manufactured to last for fifteen years of continuous use, like power supplies and hard drives, but that's more of a corner case.</p>\n\n<p>And if you'd like to consider a field moving from a tradition of finely-manufactured heirloom objects that you could leave to your grandkids, to the upgrade treadmill of the eighteen-month semiconductor manufacturing cycle, consider photography. Yes, the marginal cost of a digital photo is nil, but instead of buying new film, you have to buy a new camera every year or two. <a href=\"http://www.luminous-landscape.com/essays/enough-already.shtml\" rel=\"nofollow\">People who work in the field have written on this.</a></p>\n\n<p>I have a (roughly?) five year old DSLR, and I can't tell if it feels ancient because I'm used to electronics aging like that, or because it was one of the first non-professional (i.e., affordable by mere mortals) models. If I could afford it, I'd have probably bought a new one by now.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221088009\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://williamtozier.com/slurry\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4c08a99da7938c3ce0aeb6580c731070&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://williamtozier.com/slurry\">Bill Tozier</a>\n                </div>\n                <a href=\"#comment-221088009\" class=\"permalink\"><time datetime=\"2008-10-21T12:32:27\">2008-10-21T12:32:27</time></a>\n            </div>\n            <div class=\"content\"><p>Unlike pens and watches, computers (\"computing infrastructure\") are still expanding to fill cultural niches, still breaking out into the wave of creative destruction. Phones and computers and smart dust and sensor-laden clothes are all still vying for resources like weed species colonizing an empty continent.</p>\n\n<p>But like weed species, they have limited lifetimes. They're depending on <a href=\"http://en.wikipedia.org/wiki/K-selection\" rel=\"nofollow\">r-selection</a>, still. Not K-selection, which is what you want. I expect r-selection is part of the marketing culture surrounding all this tech.</p>\n\n<p>And now I think about it, I wonder if maybe it works the other way around: you can't \"market\" something that's long-lived, especially something you interact with communicatively and increasingly like a peer (unlike your pen or your watch).</p>\n\n<p>I think it's time for a new shade tree in the back yard. That cow is looking kindof slow compared to these new cows they have, maybe we should replace it. I was thinking of a new left hand; what do you think of yours?</p>\n\n<p>That'll be the real Andy Clark moment, by the way. And the counterpoint to the one you're waiting for.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2008",
    "path": "2008/10/19/upgrades-versus-antiques"
  },
  {
    "comments_archived": true,
    "date": "2005-10-06T10:54:42.000Z",
    "layout": "post",
    "tags": [
      "asides",
      "hacking",
      "apple",
      "grumble",
      "repair",
      "hardware",
      "powerbook"
    ],
    "title": "No user serviceable fans",
    "wordpress_id": 719,
    "wordpress_slug": "no-user-serviceable-fans",
    "wordpress_url": "http://decafbad.com/blog/?p=719",
    "year": "2005",
    "month": "10",
    "day": "06",
    "isDir": false,
    "slug": "no-user-serviceable-fans",
    "postName": "2005-10-06-no-user-serviceable-fans",
    "html": "<p>Grr.  Last night, My PowerBook suddenly started making the oscillating, growling noise of a fan with built up crud rattling against the blades.  I&#39;d thought it was the hard drive at first, knowing my luck, but I narrowed down the sound to the fans in the back and could make the sound go away by cutting back CPU usage.</p>\n<p>Normally, as with all the other machines I have, I&#39;d open the sucker up and clean that out with a q-tip or cotton ball.  However, this is still under AppleCare for another year or so, and I doubt they&#39;d look kindly on me pawing around inside this thing yet.  But, I really don&#39;t want to part with it for most of a week, just so they can ship it to someone with a more official screwdriver and Apple-branded cotton swabs.</p>\n<!-- tags: apple powerbook hacking hardware repair grumble -->\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087696\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://beesbuzz.biz/\">fluffy</a>\n</div>\n<a href=\"#comment-221087696\" class=\"permalink\"><time datetime=\"2005-10-06T13:15:13\">2005-10-06T13:15:13</time></a>\n</div>\n<div class=\"content\"><p>Apple's official policy is that opening a system up and servicing it yourself doesn't void the warranty as long as you don't break it.  At least that's the case on desktops and the Mini, and I'd imagine it extends to laptops as well.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087698\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://surgery-graphics.med.umich.edu/~matt/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8a2c338adf6431af67212b801254b8b3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://surgery-graphics.med.umich.edu/~matt/blog/\">M. Quirk</a>\n</div>\n<a href=\"#comment-221087698\" class=\"permalink\"><time datetime=\"2005-10-06T14:58:01\">2005-10-06T14:58:01</time></a>\n</div>\n<div class=\"content\"><p>Also, if it's a minor thing, they can probably do it on-site at either the Learning Center in Ann Arbor, or at the Apple Store in in Novi's 12 Oaks mall.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087699\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a0b2cd180486bba1c863fad0811bb479&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Andy</a>\n</div>\n<a href=\"#comment-221087699\" class=\"permalink\"><time datetime=\"2005-10-24T06:06:23\">2005-10-24T06:06:23</time></a>\n</div>\n<div class=\"content\"><p>Go to Office Depot and get yourself some air in a can.  They call it cleaning duster.  The stuff is great for blowing junk out of tight places.  You can even freeze stuff with it if you tip the can just right.</p>\n<p>It's ozen friendly!</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "Grr.  Last night, My PowerBook suddenly started making the oscillating, growling noise of a fan with built up crud rattling against the blades.  I'd thought it was the hard drive at first, knowing my luck, but I narrowed down the sound to the fans in the back and could make the sound go away by cutting back CPU usage.\r\n\r\nNormally, as with all the other machines I have, I'd open the sucker up and clean that out with a q-tip or cotton ball.  However, this is still under AppleCare for another year or so, and I doubt they'd look kindly on me pawing around inside this thing yet.  But, I really don't want to part with it for most of a week, just so they can ship it to someone with a more official screwdriver and Apple-branded cotton swabs.\r\n\r\n<!-- tags: apple powerbook hacking hardware repair grumble -->\r\n\r\n<div id=\"comments\" class=\"comments archived-comments\">\r\n            <h3>Archived Comments</h3>\r\n            \r\n        <ul class=\"comments\">\r\n            \r\n        <li class=\"comment\" id=\"comment-221087696\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://beesbuzz.biz/\"><img src=\"http://disqus.com/api/users/avatars/plaidfluff.jpg\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://beesbuzz.biz/\">fluffy</a>\r\n                </div>\r\n                <a href=\"#comment-221087696\" class=\"permalink\"><time datetime=\"2005-10-06T13:15:13\">2005-10-06T13:15:13</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Apple's official policy is that opening a system up and servicing it yourself doesn't void the warranty as long as you don't break it.  At least that's the case on desktops and the Mini, and I'd imagine it extends to laptops as well.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087698\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"http://surgery-graphics.med.umich.edu/~matt/blog/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=8a2c338adf6431af67212b801254b8b3&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"http://surgery-graphics.med.umich.edu/~matt/blog/\">M. Quirk</a>\r\n                </div>\r\n                <a href=\"#comment-221087698\" class=\"permalink\"><time datetime=\"2005-10-06T14:58:01\">2005-10-06T14:58:01</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Also, if it's a minor thing, they can probably do it on-site at either the Learning Center in Ann Arbor, or at the Apple Store in in Novi's 12 Oaks mall.</p></div>\r\n            \r\n        </li>\r\n    \r\n        <li class=\"comment\" id=\"comment-221087699\">\r\n            <div class=\"meta\">\r\n                <div class=\"author\">\r\n                    <a class=\"avatar image\" rel=\"nofollow\" \r\n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a0b2cd180486bba1c863fad0811bb479&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\r\n                    <a class=\"avatar name\" rel=\"nofollow\" \r\n                       href=\"\">Andy</a>\r\n                </div>\r\n                <a href=\"#comment-221087699\" class=\"permalink\"><time datetime=\"2005-10-24T06:06:23\">2005-10-24T06:06:23</time></a>\r\n            </div>\r\n            <div class=\"content\"><p>Go to Office Depot and get yourself some air in a can.  They call it cleaning duster.  The stuff is great for blowing junk out of tight places.  You can even freeze stuff with it if you tip the can just right.</p>\r\n\r\n<p>It's ozen friendly!</p></div>\r\n            \r\n        </li>\r\n    \r\n        </ul>\r\n    \r\n        </div>\r\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2005",
    "path": "2005/10/06/no-user-serviceable-fans"
  }
]