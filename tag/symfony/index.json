[
  {
    "comments_archived": true,
    "date": "2007-07-23T14:37:33.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "php",
      "zend",
      "symfony",
      "curmudgeons",
      "cakephp",
      "openid",
      "codeigniter"
    ],
    "title": "A Curmudgeon Playing with the CodeIgniter Framework and OpenID",
    "wordpress_id": 1059,
    "wordpress_slug": "a-curmudgeon-playing-with-the-codeigniter-framework-and-openid",
    "wordpress_url": "http://decafbad.com/blog/2007/07/23/a-curmudgeon-playing-with-the-codeigniter-framework-and-openid",
    "year": "2007",
    "month": "07",
    "day": "23",
    "isDir": false,
    "slug": "a-curmudgeon-playing-with-the-codeigniter-framework-and-openid",
    "postName": "2007-07-23-a-curmudgeon-playing-with-the-codeigniter-framework-and-openid",
    "html": "<p>One bit of hackery I did this weekend was to explore the <a href=\"http://codeigniter.com/\">CodeIgniter PHP framework</a>, which is even less magic yet more glued-together out of the box than the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  Also, very much less magic than <a href=\"http://cakephp.org/\">CakePHP</a> and barely in the same universe as <a href=\"http://www.symfony-project.com/\">Symfony</a>.  I think I may have found my sweet spot of simplicity and comprehensible magic.</p>\n<p><a href=\"http://codeigniter.com/\">CodeIgniter</a> has is a PHP 4 / 5 framework that provides a lightweight Model / View / Controller arrangement with URL routing and a useful but minimal constellation of utility classes and helpers.  The view templates are in PHP, with just a bit of pre-processing.  The controllers are plain-old PHP classes whose methods are called via simple URL routes.</p>\n<p>The <a href=\"http://codeigniter.com/user_guide/general/models.html\">model layer of CodeIgniter</a>, however, is the weakest part of the trio - which I actually like a lot.  It's not a magical ORM - instead it's just a simple superclass from which to derive, mostly there to suggest that a separate model is a good thing to write.  The DB abstraction classes just make the job of writing SQL statements easier and don't pretend that there's no impedance mismatch between objects and relational tables.</p>\n<p>The depth of code in <a href=\"http://codeigniter.com/\">CodeIgniter</a> is shallow enough that I felt I was able to get into developing quickly while still taking side trips through the framework methods I was calling and get at least a glance at what being taken care of for me.  <a href=\"http://codeigniter.com/forums/viewthread/50715/\">There's always danger in magic</a>, but this stuff doesn't really get out of hand.</p>\n<p>To doodle around with an idea, I threw together a layout decorator class to support the sort of nested templates I'm used to from <a href=\"http://www.symfony-project.com/\">Symfony</a>.  Out of the box, <a href=\"http://codeigniter.com/user_guide/general/views.html\">CI views</a> are simple, offering facilities for calling sub-templates and \"partials\" but not directly providing conventions for such.  My first swatches of code add a bit of that.</p>\n<p>After playing around with layouts, the next thing I did was to use <a href=\"http://codeigniter.com/user_guide/libraries/sessions.html\">CI sessions</a> and the <a href=\"http://www.openidenabled.com/openid/libraries/php\">PHP OpenID Library</a> to develop both an auth producer and consumer.  <a href=\"http://codeigniter.com/\">CodeIgniter</a> doesn't come with a ready-made user auth system, though it does come with <a href=\"http://codeigniter.com/user_guide/libraries/sessions.html\">its own implementation of sessions</a> using encrypted browser cookies to replace PHP's native sessions - another feature I really like.</p>\n<p>Kind of odd - but on the same toy app I can sign up for local accounts, sign into other sites with OpenID URLs based on local accounts, and sign into my <a href=\"http://codeigniter.com/\">CI</a> app with external OpenID identities.</p>\n<p>The wild bit is that I can even sign in locally with one OpenID URL, then use the newly created local profile to get a second OpenID URL to sign in somewhere else.  Seems interesting yet possibly dangerous.  I mostly just glued the right parts together and got the Auth_OpenID black-box modules working - now that I have an operational OpenID system, I need to study it further.</p>\n<p>The next thing I want to do is work more on profile managment, offer some of the <a href=\"http://openid.net/specs/openid-simple-registration-extension-1_1-01.html\">OpenID Simple Registration</a> fields, and look into <a href=\"http://drnicwilliams.com/2007/07/20/one-app-one-user-account-and-multiple-openids/\">supporting multiple auth IDs linked to the same user profile</a>.</p>\n<p>It might also be fun to do something like \"<a href=\"http://simonwillison.net/2007/Jul/13/\">catalogue the sites that a user logs into and automatically construct a homepage</a>.\"  Overall, I've got some vague notional ideas to build a personal status collector and maybe some federated social networking and messaging stuff.  But, one hack at a time.</p>\n<p>Hopefully, I'll get this code I've got so far into better shape and commit to my SVN repository.  Sooner than later, otherwise it'll never get off my dev box.</p>\n\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221087156\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n</div>\n<a href=\"#comment-221087156\" class=\"permalink\"><time datetime=\"2007-07-24T01:34:03\">2007-07-24T01:34:03</time></a>\n</div>\n<div class=\"content\"><p>Hmm, a system that treats its own OpenIDs just like any other OpenID and considers them foreign credentials for which it creates a new account seemsâ€¦ weird. It seems it should recognize its own OpenIDs and map them back to the corresponding username.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087158\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.elroyjetson.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4a34cf8d239b6589024fc004cfdad5b8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.elroyjetson.org\">Elroy Jetson</a>\n</div>\n<a href=\"#comment-221087158\" class=\"permalink\"><time datetime=\"2007-08-24T20:51:24\">2007-08-24T20:51:24</time></a>\n</div>\n<div class=\"content\"><p>Thanks for pointing this framework out.  Some how it had slipped through my fingers.</p>\n<p>I have tried them all and was (maybe still am) close to dumping php for ruby and the rails framework.</p>\n<p>Once I started digging into rails all the php frameworks just seemed like awkward teenagers that have to do everything their own way just to prove that they are different.</p>\n<p>codeIgniter is small.  Simple to setup and, so far anyway, seems about as elegant as you are going to get using php.</p></div>\n</li>\n<li class=\"comment\" id=\"comment-221087159\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7b2554252993cc349aa4671cdc751985&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"\">Cody Ray</a>\n</div>\n<a href=\"#comment-221087159\" class=\"permalink\"><time datetime=\"2008-06-03T21:30:09\">2008-06-03T21:30:09</time></a>\n</div>\n<div class=\"content\"><p>Did you ever put this into your SVN? I can't seem to find it through Trac.</p></div>\n</li>\n</ul>\n</div>\n",
    "body": "<p>One bit of hackery I did this weekend was to explore the <a href=\"http://codeigniter.com/\">CodeIgniter PHP framework</a>, which is even less magic yet more glued-together out of the box than the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  Also, very much less magic than <a href=\"http://cakephp.org/\">CakePHP</a> and barely in the same universe as <a href=\"http://www.symfony-project.com/\">Symfony</a>.  I think I may have found my sweet spot of simplicity and comprehensible magic.</p>\r\n<p><a href=\"http://codeigniter.com/\">CodeIgniter</a> has is a PHP 4 / 5 framework that provides a lightweight Model / View / Controller arrangement with URL routing and a useful but minimal constellation of utility classes and helpers.  The view templates are in PHP, with just a bit of pre-processing.  The controllers are plain-old PHP classes whose methods are called via simple URL routes.</p>\r\n<p>The <a href=\"http://codeigniter.com/user_guide/general/models.html\">model layer of CodeIgniter</a>, however, is the weakest part of the trio - which I actually like a lot.  It's not a magical ORM - instead it's just a simple superclass from which to derive, mostly there to suggest that a separate model is a good thing to write.  The DB abstraction classes just make the job of writing SQL statements easier and don't pretend that there's no impedance mismatch between objects and relational tables.</p>\r\n<p>The depth of code in <a href=\"http://codeigniter.com/\">CodeIgniter</a> is shallow enough that I felt I was able to get into developing quickly while still taking side trips through the framework methods I was calling and get at least a glance at what being taken care of for me.  <a href=\"http://codeigniter.com/forums/viewthread/50715/\">There's always danger in magic</a>, but this stuff doesn't really get out of hand.</p>\r\n<p>To doodle around with an idea, I threw together a layout decorator class to support the sort of nested templates I'm used to from <a href=\"http://www.symfony-project.com/\">Symfony</a>.  Out of the box, <a href=\"http://codeigniter.com/user_guide/general/views.html\">CI views</a> are simple, offering facilities for calling sub-templates and \"partials\" but not directly providing conventions for such.  My first swatches of code add a bit of that.</p>\r\n<p>After playing around with layouts, the next thing I did was to use <a href=\"http://codeigniter.com/user_guide/libraries/sessions.html\">CI sessions</a> and the <a href=\"http://www.openidenabled.com/openid/libraries/php\">PHP OpenID Library</a> to develop both an auth producer and consumer.  <a href=\"http://codeigniter.com/\">CodeIgniter</a> doesn't come with a ready-made user auth system, though it does come with <a href=\"http://codeigniter.com/user_guide/libraries/sessions.html\">its own implementation of sessions</a> using encrypted browser cookies to replace PHP's native sessions - another feature I really like.</p>\r\n<p>Kind of odd - but on the same toy app I can sign up for local accounts, sign into other sites with OpenID URLs based on local accounts, and sign into my <a href=\"http://codeigniter.com/\">CI</a> app with external OpenID identities.</p>\r\n<p>The wild bit is that I can even sign in locally with one OpenID URL, then use the newly created local profile to get a second OpenID URL to sign in somewhere else.  Seems interesting yet possibly dangerous.  I mostly just glued the right parts together and got the Auth_OpenID black-box modules working - now that I have an operational OpenID system, I need to study it further.</p>\r\n<p>The next thing I want to do is work more on profile managment, offer some of the <a href=\"http://openid.net/specs/openid-simple-registration-extension-1_1-01.html\">OpenID Simple Registration</a> fields, and look into <a href=\"http://drnicwilliams.com/2007/07/20/one-app-one-user-account-and-multiple-openids/\">supporting multiple auth IDs linked to the same user profile</a>.</p>\r\n<p>It might also be fun to do something like \"<a href=\"http://simonwillison.net/2007/Jul/13/\">catalogue the sites that a user logs into and automatically construct a homepage</a>.\"  Overall, I've got some vague notional ideas to build a personal status collector and maybe some federated social networking and messaging stuff.  But, one hack at a time.</p>\r\n<p>Hopefully, I'll get this code I've got so far into better shape and commit to my SVN repository.  Sooner than later, otherwise it'll never get off my dev box.</p>\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221087156\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=e17949267bbfe21a0fadf1bbf00592b4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://plasmasturm.org/\">Aristotle Pagaltzis</a>\n                </div>\n                <a href=\"#comment-221087156\" class=\"permalink\"><time datetime=\"2007-07-24T01:34:03\">2007-07-24T01:34:03</time></a>\n            </div>\n            <div class=\"content\"><p>Hmm, a system that treats its own OpenIDs just like any other OpenID and considers them foreign credentials for which it creates a new account seemsâ€¦ weird. It seems it should recognize its own OpenIDs and map them back to the corresponding username.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087158\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.elroyjetson.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=4a34cf8d239b6589024fc004cfdad5b8&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.elroyjetson.org\">Elroy Jetson</a>\n                </div>\n                <a href=\"#comment-221087158\" class=\"permalink\"><time datetime=\"2007-08-24T20:51:24\">2007-08-24T20:51:24</time></a>\n            </div>\n            <div class=\"content\"><p>Thanks for pointing this framework out.  Some how it had slipped through my fingers.</p>\n\n<p>I have tried them all and was (maybe still am) close to dumping php for ruby and the rails framework.</p>\n\n<p>Once I started digging into rails all the php frameworks just seemed like awkward teenagers that have to do everything their own way just to prove that they are different.</p>\n\n<p>codeIgniter is small.  Simple to setup and, so far anyway, seems about as elegant as you are going to get using php.</p></div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221087159\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=7b2554252993cc349aa4671cdc751985&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"\">Cody Ray</a>\n                </div>\n                <a href=\"#comment-221087159\" class=\"permalink\"><time datetime=\"2008-06-03T21:30:09\">2008-06-03T21:30:09</time></a>\n            </div>\n            <div class=\"content\"><p>Did you ever put this into your SVN? I can't seem to find it through Trac.</p></div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/07/23/a-curmudgeon-playing-with-the-codeigniter-framework-and-openid"
  },
  {
    "comments_archived": true,
    "date": "2007-07-09T20:21:41.000Z",
    "layout": "post",
    "tags": [
      "webdev",
      "php",
      "zend",
      "symfony",
      "frameworks",
      "django",
      "python",
      "curmudgeons"
    ],
    "title": "A Curmudgeon Playing with the Zend Framework",
    "wordpress_id": 1058,
    "wordpress_slug": "a-curmudgeon-playing-with-the-zend-framework",
    "wordpress_url": "http://decafbad.com/blog/2007/07/09/a-curmudgeon-playing-with-the-zend-framework",
    "year": "2007",
    "month": "07",
    "day": "09",
    "isDir": false,
    "slug": "a-curmudgeon-playing-with-the-zend-framework",
    "postName": "2007-07-09-a-curmudgeon-playing-with-the-zend-framework",
    "html": "<p>Because it's been awhile since I last surveyed the landscape, I played around a bit with web frameworks this weekend.  Mainly, I tried getting something simple working with the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  After intermittent play and much studying of documentation between Saturday and Sunday, I got to \"hello world.\"</p>\n<p>Unlike other web frameworks of late, Zend Framework doesn't come with any magical CLI tools to build out directory trees and / or generate code.  Being somewhat suspicious and curmudgeonly about that sort of magic to begin with, this actually struck me as an attractive thing about ZF.  In fact, what I really liked about ZF at first glance is that it's less of a monolithic <b>system</b> and more of a bucket of parts from a single source that fit together decently.</p>\n<p>And, all my favorite parts are there:  Among other things there's <a href=\"http://framework.zend.com/manual/en/zend.config.html\">config</a>, <a href=\"http://framework.zend.com/manual/en/zend.log.html\">logging</a>, <a href=\"http://framework.zend.com/manual/en/zend.controller.html\">a front controller</a> with <a href=\"http://framework.zend.com/manual/en/zend.controller.router.html\">URL routing</a>, template-system agnostic <a href=\"http://framework.zend.com/manual/en/zend.view.html\">view support</a>, and somewhat non-magical <a href=\"http://framework.zend.com/manual/en/zend.db.html\">DB / model support</a>.</p>\n<p>These were all things I'd grabbed from <a href=\"http://pear.php.net/\">PEAR</a> for <a href=\"http://decafbad.com/svn/trunk/Cuckoo/lib/MiniFramework.php\">my more recent PHP mini-framework</a> play, but I figured there should be some benefit from finding them in a unified collection like the Zend Framework.</p>\n<p>The experience was somewhat similar to rolling my own, though.  I stumbled through some docs and eventually found some blog entries and a tutorial.  It's all very loosely-coupled and somewhat DIY, which is actually what I wanted.  The experience has left me wondering if I really <b>should</b> have wanted it, but I'm guessing it'll go easier from here on out.</p>\n<p>In the meantime, though, I feel like I have a decent grasp on what all those loosely-coupled parts are doing.  I've skimmed through code, traced wires, broken things and watched the errors.</p>\n<p>See, my problem with a lot of modern magic-imbued web frameworks is that I have a deep distrust of what they're doing.  They come with a lot of moving parts doing things that I don't see - and when I do finally see them, I tend to run into decisions with which I disagree.  I see abstraction where I think the gritty concrete needs to be left bare.  I often see lots of astronaut acrobatics that just have to be burning tons of cycles.  I see further acrobatics done to compensate, unrolling loops and pre-parsing config files - which requires further layers of magical tools to generate code and caches.</p>\n<p>Too many moving parts wherein assumptions can hide, later to bite me when we're hundreds of miles into the post-launch desert and trying to fight scaling fires or develop a new feature with some weird angles to it.</p>\n<p>For example, consider <a href=\"http://www.symfony-project.com/\">Symfony</a> for PHP.  Their configuration system runs PHP code that results in YAML.  Parsing that YAML, along with cascading layers of other generated YAML, then drives a PHP code generation stage, composing all the static code necessary to bootstrap the framework with each request.  There's an amazing amount of flexibility exposed by that system, and it's quite clever -&nbsp;but my curmudgeonly side catches whiffs of insanity.</p>\n<p>Maybe that's really the issue -&nbsp;I've been doing this stuff long enough to have written my own one of everything, so I've got my own opinions and I like to have a grasp on everything.  I've written front controllers, templating systems, and model abstraction layers.  I've worked in a half-dozen or so languages doing all the above.  I don't yet accept that web app development has <a href=\"http://mengwong.livejournal.com/38969.html\">passed the da Vinci point</a> -&nbsp;a single developer should be able to grasp the structure of a web framework in mind without getting lost in too many fractal branchings.</p>\n<p>Anyway, I'm rambling like an old grouch, but I think I've reached my point.  Hopefully more actual experimentation soon.</p>\n",
    "body": "<p>Because it's been awhile since I last surveyed the landscape, I played around a bit with web frameworks this weekend.  Mainly, I tried getting something simple working with the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  After intermittent play and much studying of documentation between Saturday and Sunday, I got to \"hello world.\"</p>\r\n<p>Unlike other web frameworks of late, Zend Framework doesn't come with any magical CLI tools to build out directory trees and / or generate code.  Being somewhat suspicious and curmudgeonly about that sort of magic to begin with, this actually struck me as an attractive thing about ZF.  In fact, what I really liked about ZF at first glance is that it's less of a monolithic <b>system</b> and more of a bucket of parts from a single source that fit together decently.</p>\r\n<p>And, all my favorite parts are there:  Among other things there's <a href=\"http://framework.zend.com/manual/en/zend.config.html\">config</a>, <a href=\"http://framework.zend.com/manual/en/zend.log.html\">logging</a>, <a href=\"http://framework.zend.com/manual/en/zend.controller.html\">a front controller</a> with <a href=\"http://framework.zend.com/manual/en/zend.controller.router.html\">URL routing</a>, template-system agnostic <a href=\"http://framework.zend.com/manual/en/zend.view.html\">view support</a>, and somewhat non-magical <a href=\"http://framework.zend.com/manual/en/zend.db.html\">DB / model support</a>.</p>\r\n<p>These were all things I'd grabbed from <a href=\"http://pear.php.net/\">PEAR</a> for <a href=\"http://decafbad.com/svn/trunk/Cuckoo/lib/MiniFramework.php\">my more recent PHP mini-framework</a> play, but I figured there should be some benefit from finding them in a unified collection like the Zend Framework.</p>\r\n<p>The experience was somewhat similar to rolling my own, though.  I stumbled through some docs and eventually found some blog entries and a tutorial.  It's all very loosely-coupled and somewhat DIY, which is actually what I wanted.  The experience has left me wondering if I really <b>should</b> have wanted it, but I'm guessing it'll go easier from here on out.</p>\r\n<p>In the meantime, though, I feel like I have a decent grasp on what all those loosely-coupled parts are doing.  I've skimmed through code, traced wires, broken things and watched the errors.</p>\r\n<p>See, my problem with a lot of modern magic-imbued web frameworks is that I have a deep distrust of what they're doing.  They come with a lot of moving parts doing things that I don't see - and when I do finally see them, I tend to run into decisions with which I disagree.  I see abstraction where I think the gritty concrete needs to be left bare.  I often see lots of astronaut acrobatics that just have to be burning tons of cycles.  I see further acrobatics done to compensate, unrolling loops and pre-parsing config files - which requires further layers of magical tools to generate code and caches.</p>\r\n<p>Too many moving parts wherein assumptions can hide, later to bite me when we're hundreds of miles into the post-launch desert and trying to fight scaling fires or develop a new feature with some weird angles to it.</p>\r\n<p>For example, consider <a href=\"http://www.symfony-project.com/\">Symfony</a> for PHP.  Their configuration system runs PHP code that results in YAML.  Parsing that YAML, along with cascading layers of other generated YAML, then drives a PHP code generation stage, composing all the static code necessary to bootstrap the framework with each request.  There's an amazing amount of flexibility exposed by that system, and it's quite clever -&nbsp;but my curmudgeonly side catches whiffs of insanity.</p>\r\n<p>Maybe that's really the issue -&nbsp;I've been doing this stuff long enough to have written my own one of everything, so I've got my own opinions and I like to have a grasp on everything.  I've written front controllers, templating systems, and model abstraction layers.  I've worked in a half-dozen or so languages doing all the above.  I don't yet accept that web app development has <a href=\"http://mengwong.livejournal.com/38969.html\">passed the da Vinci point</a> -&nbsp;a single developer should be able to grasp the structure of a web framework in mind without getting lost in too many fractal branchings.</p>\r\n<p>Anyway, I'm rambling like an old grouch, but I think I've reached my point.  Hopefully more actual experimentation soon.</p>\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2007",
    "path": "2007/07/09/a-curmudgeon-playing-with-the-zend-framework"
  }
]