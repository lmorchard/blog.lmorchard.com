{"comments_archived":true,"date":"2007-07-09T00:00:00.000Z","layout":"post","tags":["webdev","php","zend","symfony","frameworks","django","python","curmudgeons"],"title":"A Curmudgeon Playing with the Zend Framework","wordpress_id":1058,"wordpress_slug":"a-curmudgeon-playing-with-the-zend-framework","wordpress_url":"http://decafbad.com/blog/2007/07/09/a-curmudgeon-playing-with-the-zend-framework","url":"/2007/07/09/a-curmudgeon-playing-with-the-zend-framework/","path":"2007/07/09/a-curmudgeon-playing-with-the-zend-framework","content":"<p>Because it&#39;s been awhile since I last surveyed the landscape, I played around a bit with web frameworks this weekend.  Mainly, I tried getting something simple working with the <a href=\"http://framework.zend.com/\">Zend Framework</a>.  After intermittent play and much studying of documentation between Saturday and Sunday, I got to &quot;hello world.&quot;</p>\n<p>Unlike other web frameworks of late, Zend Framework doesn&#39;t come with any magical CLI tools to build out directory trees and / or generate code.  Being somewhat suspicious and curmudgeonly about that sort of magic to begin with, this actually struck me as an attractive thing about ZF.  In fact, what I really liked about ZF at first glance is that it&#39;s less of a monolithic <b>system</b> and more of a bucket of parts from a single source that fit together decently.</p>\n<p>And, all my favorite parts are there:  Among other things there&#39;s <a href=\"http://framework.zend.com/manual/en/zend.config.html\">config</a>, <a href=\"http://framework.zend.com/manual/en/zend.log.html\">logging</a>, <a href=\"http://framework.zend.com/manual/en/zend.controller.html\">a front controller</a> with <a href=\"http://framework.zend.com/manual/en/zend.controller.router.html\">URL routing</a>, template-system agnostic <a href=\"http://framework.zend.com/manual/en/zend.view.html\">view support</a>, and somewhat non-magical <a href=\"http://framework.zend.com/manual/en/zend.db.html\">DB / model support</a>.</p>\n<p>These were all things I&#39;d grabbed from <a href=\"http://pear.php.net/\">PEAR</a> for <a href=\"http://decafbad.com/svn/trunk/Cuckoo/lib/MiniFramework.php\">my more recent PHP mini-framework</a> play, but I figured there should be some benefit from finding them in a unified collection like the Zend Framework.</p>\n<p>The experience was somewhat similar to rolling my own, though.  I stumbled through some docs and eventually found some blog entries and a tutorial.  It&#39;s all very loosely-coupled and somewhat DIY, which is actually what I wanted.  The experience has left me wondering if I really <b>should</b> have wanted it, but I&#39;m guessing it&#39;ll go easier from here on out.</p>\n<p>In the meantime, though, I feel like I have a decent grasp on what all those loosely-coupled parts are doing.  I&#39;ve skimmed through code, traced wires, broken things and watched the errors.</p>\n<p>See, my problem with a lot of modern magic-imbued web frameworks is that I have a deep distrust of what they&#39;re doing.  They come with a lot of moving parts doing things that I don&#39;t see - and when I do finally see them, I tend to run into decisions with which I disagree.  I see abstraction where I think the gritty concrete needs to be left bare.  I often see lots of astronaut acrobatics that just have to be burning tons of cycles.  I see further acrobatics done to compensate, unrolling loops and pre-parsing config files - which requires further layers of magical tools to generate code and caches.</p>\n<p>Too many moving parts wherein assumptions can hide, later to bite me when we&#39;re hundreds of miles into the post-launch desert and trying to fight scaling fires or develop a new feature with some weird angles to it.</p>\n<p>For example, consider <a href=\"http://www.symfony-project.com/\">Symfony</a> for PHP.  Their configuration system runs PHP code that results in YAML.  Parsing that YAML, along with cascading layers of other generated YAML, then drives a PHP code generation stage, composing all the static code necessary to bootstrap the framework with each request.  There&#39;s an amazing amount of flexibility exposed by that system, and it&#39;s quite clever -&nbsp;but my curmudgeonly side catches whiffs of insanity.</p>\n<p>Maybe that&#39;s really the issue -&nbsp;I&#39;ve been doing this stuff long enough to have written my own one of everything, so I&#39;ve got my own opinions and I like to have a grasp on everything.  I&#39;ve written front controllers, templating systems, and model abstraction layers.  I&#39;ve worked in a half-dozen or so languages doing all the above.  I don&#39;t yet accept that web app development has <a href=\"http://mengwong.livejournal.com/38969.html\">passed the da Vinci point</a> -&nbsp;a single developer should be able to grasp the structure of a web framework in mind without getting lost in too many fractal branchings.</p>\n<p>Anyway, I&#39;m rambling like an old grouch, but I think I&#39;ve reached my point.  Hopefully more actual experimentation soon.</p>\n"}