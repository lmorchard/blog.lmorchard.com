[
  {
    "title": "The day the web shrugged?",
    "tags": [
      "adblock",
      "advertising",
      "internet",
      "tracking",
      "privacy",
      "adtech",
      "safari"
    ],
    "year": "2015",
    "month": "09",
    "day": "21",
    "isDir": false,
    "slug": "blocked",
    "date": "2015-09-21T12:00:00.000Z",
    "postName": "2015-09-21-blocked",
    "html": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n\n<p>With iOS9, Apple just went and did it. <a href=\"https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewInSafari/Articles/Safari_9.html#//apple_ref/doc/uid/TP40014305-CH9-SW8\">They opened up the ability to implement\ncontent blocking extensions for Safari</a>.</p>\n<p><a href=\"http://gizmodo.com/5150498/50-of-the-most-insane-things-never-seen-on-google-street-view/\"><img id=\"thumbnail\" class=\"lazyload\" style=\"width: 400px\" src=\"/uploads/2015/blocked/damnyoualltohell.png\"></a></p>\n<h2 id=\"who-did-what-now\">Who did what now?</h2>\n<p>To hear some folks tell it, Apple just blew up the web. Those maniacs! In\nreality, Apple haven&#39;t blocked anything themselves.  Rather, they\nopened up the <em>capability</em> to block. It&#39;s up to app developers to decide what\nto block. From there, it&#39;s up to users to decide whether &amp; what app to\ninstall.</p>\n<p>There&#39;s a lot of choice to go around: If this is a nuclear strike, many\nhands happily turned their keys in the launch silos. It&#39;s a big nasty veto\nagainst the current state of affairs on the web.</p>\n<div class=\"pullquote right\">\nTrue to form, Apple didn't invent the content blocker. **They made\nthe tech more accessible.**\n</div>\n\n<h2 id=\"apple-didnt-start-this\">Apple didn&#39;t start this</h2>\n<p>Let&#39;s not pretend this is some sinister battle between corporate entities as\nan excuse to ignore or continue to discount the people in the middle.</p>\n<p>While Apple does do lots of things I dislike, <a href=\"http://www.informationweek.com/it-life/tim-cook-customers-not-companies-should-control-their-data/d/d-id/1320684\">they tend to champion user\nexperience for their many paying customers</a> - i.e. mainly the\nfolks who buy hardware.  In other words, none of this would be possible if\nthere weren&#39;t already people asking for it.</p>\n<p>Apple opening the door to\ncontent blockers that improve the user experience on the mobile web makes\nperfect sense. So does Apple&#39;s News app, considering that it serves to exploit\nthe opportunities offered by the self-inflicted wounds evident on today&#39;s\ntracking and ad laden web sites. (Of course, even there, <a href=\"https://twitter.com/khoi/status/645226687685337088\">the experience\nstill has wrinkles in need of ironing</a>.)</p>\n<p>We&#39;ve had things like <a href=\"https://adblockplus.org/\">Adblock Plus</a> for years. But, practically speaking,\nthat&#39;s been an obscure convenience reserved for folks in the know. True to\nform, Apple didn&#39;t invent the content blocker. They made the tech more\naccessible. If this whole thing is a master stroke by Apple to stab at any\ncompetitor&#39;s heart, the blade was gladly thrust by the disgruntled masses\nassumed until now to be <a href=\"http://blog.lmorchard.com/2014/10/08/microblogging-like-its-2002/#Free_as_in_Lunch\">a passive compost heap</a>.</p>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Going after Apple on this wave of ad block news is a red herring. This is user choice. Hi. I&#39;m blocking your code on my computer. Negotiate.</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/645015287713124352\">September 18, 2015</a></blockquote>\n\n<h2 id=\"babies-bathwater-and-ultimatums\">Babies, bathwater, and ultimatums</h2>\n<p>While the shock may be understandable, publishers facing reduced revenues do\nthemselves no favors with panicked reactions to these content blocking\nextensions. </p>\n<p><a href=\"http://fortune.com/2015/09/18/dear-apple-i-may-rob-your-store/\">Proposing theft from an Apple Store</a>, for example, is just stupid.</p>\n<p>Branding ad-block users as thieves also earns little sympathy. Especially not\nwhen the surveillance-driven infrastructure of delivering unwelcome messages\ngrows daily - all while user-owned data &amp; attention &amp; computing resources are\ntaken for granted. I&#39;m sure to some folks - for right or wrong - the score\nfeels even.</p>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">The reckoning is coming for an ad industry that grew reckless with user&#39;s bandwidth, privacy, CPU, and attention. About time.</p>&mdash; DHH (@dhh) <a href=\"https://twitter.com/dhh/status/644517154046410752\">September 17, 2015</a></blockquote>\n\n<p>Claiming that some ad networks are the &quot;good guys&quot; is a too-subtle point\nwhen the crowds are looking to throw the bums out. That said, I do think\nmaking the distinction clear and aligning with user choice will be crucial\nfor the future.</p>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Sorry <a href=\"https://twitter.com/gruber\">@gruber</a> they just want to block all ads, seeing all as garbage. <a href=\"http://t.co/jsq5UdVqo5\">http://t.co/jsq5UdVqo5</a> <a href=\"http://t.co/21Vcksj4jA\">pic.twitter.com/21Vcksj4jA</a></p>&mdash; Danny Sullivan (@dannysullivan) <a href=\"https://twitter.com/dannysullivan/status/645634044558884864\">September 20, 2015</a></blockquote>\n\n<p>Then, there&#39;s this proposition: <a href=\"http://www.theverge.com/2015/9/17/9338963/welcome-to-hell-apple-vs-google-vs-facebook-and-the-slow-death-of-the-web\">Accept surveillance &amp; marketing - <em>or face the\ndeath of the web you love</em>.</a> </p>\n<p>Given the presumption - and frankly, the\narrogance - behind that stark ultimatum, it&#39;s no surprise that &quot;Tough, adapt or\ndie!&quot; is the response from many. Seriously? Those are the only\nchoices? Frankly, this strikes me as a failure of imagination. And, possibly\n<a href=\"https://blog.growth.supply/content-used-to-be-king-now-its-the-joker-d40703c18c73\">an overestimation of value</a> versus the price of the hassle.</p>\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/IVXJmfd3cmg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n<h2 id=\"who-knew-they-could-talk\">Who knew they could talk?</h2>\n<p>Yes, I understand that today&#39;s ad-funded model has been insanely successful.\nTurnkey services have empowered lots of folks to do their thing without\nworrying about inventory or implementation or influence. Frankly, even my own\nemployer Mozilla has benefited - and me along with it by way of a regular paycheck. </p>\n<p>Still, this ad-supported web was built on quiet acceptance by an audience who\nnever gave consent except by default. These are shaky foundations:\n<a href=\"http://blog.lmorchard.com/2015/08/07/web-awesome/#users-have-leverage\">Browsers weren&#39;t really written to make computers do things their owners\ndon&#39;t want</a>. So, refusal has long been possible. <a href=\"http://www.adweek.com/news/technology/ad-networks-beware-firefox-block-third-party-cookies-147513\">And defaults\ncan change</a>. If this spike of consumer revolt grows &amp; deepens,\nacceptance can evaporate and all the finger-wagging in the world won&#39;t un-pop\nthe bubble.</p>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Reminder: the ad debate is a proxy war for people&#39;s right to own and control a general purpose computer.</p>&mdash; mhoye (@mhoye) <a href=\"https://twitter.com/mhoye/status/645014642075435008\">September 18, 2015</a></blockquote>\n\n<p>No, I think digging out of this mess will require some thought &amp; creativity -\nafter first accepting the possibility that the old model might actually\ncollapse. Have some empathy &amp; listen: If your users are\nblocking your ads, maybe stop treating them like livestock and ask what&#39;s up. </p>\n<p>This <em>could</em> be the first round in a negotiation ends up with a better deal\nfor everyone involved. <strong>Who knows?</strong> This opening salvo of\nblock-all-the-things could be a first crude spastic kick from stakeholders\nwho were rarely asked or given seats at the table until they took them\njust now. </p>\n<p>Or, I guess lot of us could just be jerks who want something for nothing\nand that&#39;s why we can&#39;t have nice things. I hope that&#39;s not the case.</p>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Then&#10;Users: Please DoNotTrack me&#10;AdTech+Publishers: Screw you&#10;&#10;Now &#10;AdTech+Publishers: Please DoNotAdBlock me &#10;Users: Screw you</p>&mdash; Kontra (@counternotions) <a href=\"https://twitter.com/counternotions/status/645598372166893568\">September 20, 2015</a></blockquote>\n\n<h2 id=\"to-be-continued\">To be continued</h2>\n<p>I&#39;ve got a few ideas. They&#39;re terrible, or else I&#39;d already be a\nbillionaire. In the interests of keeping this short, I&#39;ll save them for \nanother blog post. Either way, I suspect that shaking the web out of comfy\nad-supported complacency could just possibly lead to interesting things -\nprovided we get the the finger pointing &amp; wagging out of our systems and get\ndown to facing the challenge.</p>\n<p>Or, this could all blow over, and things will be back to business as usual\nin no time at all. Best not to rely on that, though.</p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "body": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n\nWith iOS9, Apple just went and did it. [They opened up the ability to implement\ncontent blocking extensions for Safari][contentblocking].\n\n[contentblocking]: https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewInSafari/Articles/Safari_9.html#//apple_ref/doc/uid/TP40014305-CH9-SW8\n\n[<img id=\"thumbnail\" class=\"lazyload\" style=\"width: 400px\" src=\"/uploads/2015/blocked/damnyoualltohell.png\">](http://gizmodo.com/5150498/50-of-the-most-insane-things-never-seen-on-google-street-view/)\n\n## Who did what now?\n\nTo hear some folks tell it, Apple just blew up the web. Those maniacs! In\nreality, Apple haven't blocked anything themselves.  Rather, they\nopened up the *capability* to block. It's up to app developers to decide what\nto block. From there, it's up to users to decide whether & what app to\ninstall.\n\nThere's a lot of choice to go around: If this is a nuclear strike, many\nhands happily turned their keys in the launch silos. It's a big nasty veto\nagainst the current state of affairs on the web.\n\n<div class=\"pullquote right\">\nTrue to form, Apple didn't invent the content blocker. **They made\nthe tech more accessible.**\n</div>\n\n## Apple didn't start this\n\nLet's not pretend this is some sinister battle between corporate entities as\nan excuse to ignore or continue to discount the people in the middle.\n\nWhile Apple does do lots of things I dislike, [they tend to champion user\nexperience for their many paying customers][applecustomers] - i.e. mainly the\nfolks who buy hardware.  In other words, none of this would be possible if\nthere weren't already people asking for it.\n\n[applecustomers]: http://www.informationweek.com/it-life/tim-cook-customers-not-companies-should-control-their-data/d/d-id/1320684\n\nApple opening the door to\ncontent blockers that improve the user experience on the mobile web makes\nperfect sense. So does Apple's News app, considering that it serves to exploit\nthe opportunities offered by the self-inflicted wounds evident on today's\ntracking and ad laden web sites. (Of course, even there, [the experience\nstill has wrinkles in need of ironing][applenewsnyt].)\n\n[applenewsnyt]: https://twitter.com/khoi/status/645226687685337088\n\nWe've had things like [Adblock Plus][] for years. But, practically speaking,\nthat's been an obscure convenience reserved for folks in the know. True to\nform, Apple didn't invent the content blocker. They made the tech more\naccessible. If this whole thing is a master stroke by Apple to stab at any\ncompetitor's heart, the blade was gladly thrust by the disgruntled masses\nassumed until now to be [a passive compost heap][compost].\n\n[adblock plus]: https://adblockplus.org/\n[compost]: http://blog.lmorchard.com/2014/10/08/microblogging-like-its-2002/#Free_as_in_Lunch\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Going after Apple on this wave of ad block news is a red herring. This is user choice. Hi. I&#39;m blocking your code on my computer. Negotiate.</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/645015287713124352\">September 18, 2015</a></blockquote>\n\n## Babies, bathwater, and ultimatums\n\nWhile the shock may be understandable, publishers facing reduced revenues do\nthemselves no favors with panicked reactions to these content blocking\nextensions. \n\n[Proposing theft from an Apple Store][robapple], for example, is just stupid.\n\nBranding ad-block users as thieves also earns little sympathy. Especially not\nwhen the surveillance-driven infrastructure of delivering unwelcome messages\ngrows daily - all while user-owned data & attention & computing resources are\ntaken for granted. I'm sure to some folks - for right or wrong - the score\nfeels even.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">The reckoning is coming for an ad industry that grew reckless with user&#39;s bandwidth, privacy, CPU, and attention. About time.</p>&mdash; DHH (@dhh) <a href=\"https://twitter.com/dhh/status/644517154046410752\">September 17, 2015</a></blockquote>\n\nClaiming that some ad networks are the \"good guys\" is a too-subtle point\nwhen the crowds are looking to throw the bums out. That said, I do think\nmaking the distinction clear and aligning with user choice will be crucial\nfor the future.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Sorry <a href=\"https://twitter.com/gruber\">@gruber</a> they just want to block all ads, seeing all as garbage. <a href=\"http://t.co/jsq5UdVqo5\">http://t.co/jsq5UdVqo5</a> <a href=\"http://t.co/21Vcksj4jA\">pic.twitter.com/21Vcksj4jA</a></p>&mdash; Danny Sullivan (@dannysullivan) <a href=\"https://twitter.com/dannysullivan/status/645634044558884864\">September 20, 2015</a></blockquote>\n\n[robapple]: http://fortune.com/2015/09/18/dear-apple-i-may-rob-your-store/\n\nThen, there's this proposition: [Accept surveillance & marketing - *or face the\ndeath of the web you love*.][webdeath] \n\nGiven the presumption - and frankly, the\narrogance - behind that stark ultimatum, it's no surprise that \"Tough, adapt or\ndie!\" is the response from many. Seriously? Those are the only\nchoices? Frankly, this strikes me as a failure of imagination. And, possibly\n[an overestimation of value][contentvalue] versus the price of the hassle.\n\n[contentvalue]: https://blog.growth.supply/content-used-to-be-king-now-its-the-joker-d40703c18c73\n[webdeath]: http://www.theverge.com/2015/9/17/9338963/welcome-to-hell-apple-vs-google-vs-facebook-and-the-slow-death-of-the-web\n\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/IVXJmfd3cmg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n## Who knew they could talk?\n\nYes, I understand that today's ad-funded model has been insanely successful.\nTurnkey services have empowered lots of folks to do their thing without\nworrying about inventory or implementation or influence. Frankly, even my own\nemployer Mozilla has benefited - and me along with it by way of a regular paycheck. \n\nStill, this ad-supported web was built on quiet acceptance by an audience who\nnever gave consent except by default. These are shaky foundations:\n[Browsers weren't really written to make computers do things their owners\ndon't want][browserchoice]. So, refusal has long been possible. [And defaults\ncan change][mozillacookies]. If this spike of consumer revolt grows & deepens,\nacceptance can evaporate and all the finger-wagging in the world won't un-pop\nthe bubble.\n\n[browserchoice]: http://blog.lmorchard.com/2015/08/07/web-awesome/#users-have-leverage\n[mozillacookies]: http://www.adweek.com/news/technology/ad-networks-beware-firefox-block-third-party-cookies-147513 \n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Reminder: the ad debate is a proxy war for people&#39;s right to own and control a general purpose computer.</p>&mdash; mhoye (@mhoye) <a href=\"https://twitter.com/mhoye/status/645014642075435008\">September 18, 2015</a></blockquote>\n\nNo, I think digging out of this mess will require some thought & creativity -\nafter first accepting the possibility that the old model might actually\ncollapse. Have some empathy & listen: If your users are\nblocking your ads, maybe stop treating them like livestock and ask what's up. \n\nThis *could* be the first round in a negotiation ends up with a better deal\nfor everyone involved. **Who knows?** This opening salvo of\nblock-all-the-things could be a first crude spastic kick from stakeholders\nwho were rarely asked or given seats at the table until they took them\njust now. \n\nOr, I guess lot of us could just be jerks who want something for nothing\nand that's why we can't have nice things. I hope that's not the case.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">Then&#10;Users: Please DoNotTrack me&#10;AdTech+Publishers: Screw you&#10;&#10;Now &#10;AdTech+Publishers: Please DoNotAdBlock me &#10;Users: Screw you</p>&mdash; Kontra (@counternotions) <a href=\"https://twitter.com/counternotions/status/645598372166893568\">September 20, 2015</a></blockquote>\n\n## To be continued\n\nI've got a few ideas. They're terrible, or else I'd already be a\nbillionaire. In the interests of keeping this short, I'll save them for \nanother blog post. Either way, I suspect that shaking the web out of comfy\nad-supported complacency could just possibly lead to interesting things -\nprovided we get the the finger pointing & wagging out of our systems and get\ndown to facing the challenge.\n\nOr, this could all blow over, and things will be back to business as usual\nin no time at all. Best not to rely on that, though.\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap wm=5 syntax=mkd textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/09/21/blocked",
    "thumbnail": "https://lmorchard.github.io/uploads/2015/blocked/damnyoualltohell.png"
  },
  {
    "title": "Adding Android to a multi-platform React app",
    "tags": [
      "webdev",
      "native",
      "react",
      "reactnative",
      "android",
      "ios",
      "mobile",
      "mozilla"
    ],
    "year": "2015",
    "month": "09",
    "day": "21",
    "isDir": false,
    "slug": "react-native-android",
    "date": "2015-09-21T12:00:00.000Z",
    "postName": "2015-09-21-react-native-android",
    "html": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: A couple of months back, <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/\">I wrote about a TODO app built using React\nfor web and React Native for iOS</a>. </p>\n<p>Last week, the team at Facebook \n<a href=\"https://code.facebook.com/posts/1189117404435352/\">released React Native for Android</a>. So, I circled back to add\nAndroid support and revisit how code sharing looks now.</p>\n<h2 id=\"getting-up-to-speed\">Getting up to speed</h2>\n<p>With this <a href=\"https://code.facebook.com/posts/1189117404435352/\">new release of React Native</a>, I was able to add support\nfor Android to <a href=\"https://github.com/lmorchard/react-multiplatform\">my little TODO app</a>.</p>\n<p>The first task was to <a href=\"https://github.com/lmorchard/react-multiplatform/commit/38fb7afe67f8c339b8d51c69a1f515a5a91e97c7\">shuffle directories &amp; files around and add the base\nAndroid support</a>. In general, the project layout is now cleaner.\nAssets for each platform now live in separate sub-directories.</p>\n<p>Next, to start iterating &amp; experimenting, I copied the code from the iOS app\ninto Android-specific directories. I <a href=\"https://github.com/lmorchard/react-multiplatform/commit/fd80e9859400744ac5fcffc8f7d75d6703a3856d\">only needed to make some small\ntweaks</a> to account for differences in native component sets. That got my\nbase app functionality working.</p>\n<p>Then, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/dd8b6b307c31b67fde23c6b090e7b1f1d8b0f579\">I squashed the iOS &amp; Android models together</a> when I realized that\ncode was identical between the React Native platforms. That could change in\nthe future, but there&#39;s no need for a difference right now.</p>\n<p>After sleeping on it, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/ea7abb421b7e0486b2d3de42001724343f832901\">I refactored some common mixins</a> to take advantage of\nadditional sharing opportunities I found between iOS &amp; Android views. That\nhelped to further shrink the lines of duplicated code.</p>\n<p>This added what amounts to a new category of code sharing in my project. So,\n<a href=\"https://github.com/lmorchard/react-multiplatform/commit/cdbbff72cb941fac75f68c1c91279fa780997b26\">I separated that code into its own module</a> to make the distinction easier\nto see &amp; measure.  Now, I have code shared between web and native in general,\nand code shared between the iOS and Android native platforms.</p>\n<p>Finally, in an attempt to start automating my code metrics, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/d5149768e116571d0a1a059d1ff16e1cfc45fcfd\">I added\n<code>loc-metrics.sh</code></a>.</p>\n<h2 id=\"visualizing-the-code-metrics\">Visualizing the code metrics</h2>\n<p>So, I tried drawing some Venn diagrams in my notebook. But, I&#39;m terrible at\ndrawing. That&#39;s when I remembered that SVG is a thing where I can draw by\nwriting code. So, <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial\">I spent an afternoon teaching myself some SVG</a>\nand <a href=\"https://github.com/lmorchard/react-multiplatform/commit/0014232c9858e082414e094be021170fda19aab0\">reworked my metrics shell script</a>.</p>\n<p>I&#39;m not going to bother trying to make the areas actually proportional to the\nlines of code. But, here&#39;s a rough picture of code sharing:</p>\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-overall.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-models.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-views.svg\">\n\n<p>If you can&#39;t see those images, then you&#39;ll need to find a browser that understands\nSVG until I can be bothered to convert to PNG. (Pull requests welcome!)</p>\n<h2 id=\"conclusions-revisited\">Conclusions revisited</h2>\n<p>As before, most of the models code is shared between web and both native\nplatforms. What&#39;s unique is mostly boilerplate wrapping <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/#forking-sharing-model-code-for-persistence\">the localStorage /\nasyncStorage split between web and native</a>.</p>\n<p>On the view side, however, things are a bit more spread out. In a nutshell,\nReact patterns in general allow a decent chunk of code to be shared between\nweb and native. And even more code can be shared between the iOS and Android\nplatforms.</p>\n<p>But, unique concerns in each platform - web, iOS, and Android - call for\nunique code for each case. This is not actually a failing, though: Varying the\nUX between web &amp; iOS &amp; Android is a flexibility you&#39;ll probably appreciate. </p>\n<p>In other words, use components &amp; conventions unique to each\nplatform without your app suffering from the lowest-common-denominator UX\nproblem historically found in a lot of multi-platform apps. In the case of this\nTODO app, that just boils down to trivialities like checkboxes &amp; switches &amp;\nsegmented controls. In a larger app, I&#39;d expect this concern to grow.</p>\n<p>I&#39;m being lazy and not coding up the math in percentages. This approach shared\nabout half the code from the web app, and even more than that for each of the\nnative apps. I think that&#39;s a significant advantage over writing separate\napps.</p>\n<p>Of course, <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/#conclusion\">all my caveats from the first go\naround</a> still apply: This is a very simple app. The code devoted to\ndoing interesting things versus React boilerplate is probably not at a good\nratio. Also, as more view components arise, further overlap might be found.\nAnd, hopefully, common logic would remain the primary area of growth on the\nmodel site.</p>\n<p>I think this approach toward building apps remains interesting &amp; promising. </p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nTL;DR: A couple of months back, [I wrote about a TODO app built using React\nfor web and React Native for iOS][rnpart1]. \n\nLast week, the team at Facebook \n[released React Native for Android][rnandroid]. So, I circled back to add\nAndroid support and revisit how code sharing looks now.\n\n[rnandroid]: https://code.facebook.com/posts/1189117404435352/\n[rnpart1]: http://blog.lmorchard.com/2015/07/22/react-multiplatform/\n[reactmultiplatform]: https://github.com/lmorchard/react-multiplatform\n\n## Getting up to speed\n\nWith this [new release of React Native][rnandroid], I was able to add support\nfor Android to [my little TODO app][reactmultiplatform].\n  \nThe first task was to [shuffle directories & files around and add the base\nAndroid support][c1]. In general, the project layout is now cleaner.\nAssets for each platform now live in separate sub-directories.\n\n[c1]: https://github.com/lmorchard/react-multiplatform/commit/38fb7afe67f8c339b8d51c69a1f515a5a91e97c7\n\nNext, to start iterating & experimenting, I copied the code from the iOS app\ninto Android-specific directories. I [only needed to make some small\ntweaks][c2] to account for differences in native component sets. That got my\nbase app functionality working.\n\n[c2]: https://github.com/lmorchard/react-multiplatform/commit/fd80e9859400744ac5fcffc8f7d75d6703a3856d\n\nThen, [I squashed the iOS & Android models together][c3] when I realized that\ncode was identical between the React Native platforms. That could change in\nthe future, but there's no need for a difference right now.\n\n[c3]: https://github.com/lmorchard/react-multiplatform/commit/dd8b6b307c31b67fde23c6b090e7b1f1d8b0f579\n\nAfter sleeping on it, [I refactored some common mixins][c4] to take advantage of\nadditional sharing opportunities I found between iOS & Android views. That\nhelped to further shrink the lines of duplicated code.\n\n[c4]: https://github.com/lmorchard/react-multiplatform/commit/ea7abb421b7e0486b2d3de42001724343f832901\n\nThis added what amounts to a new category of code sharing in my project. So,\n[I separated that code into its own module][c5] to make the distinction easier\nto see & measure.  Now, I have code shared between web and native in general,\nand code shared between the iOS and Android native platforms.\n\n[c5]: https://github.com/lmorchard/react-multiplatform/commit/cdbbff72cb941fac75f68c1c91279fa780997b26\n\nFinally, in an attempt to start automating my code metrics, [I added\n`loc-metrics.sh`][c6].\n\n[c6]: https://github.com/lmorchard/react-multiplatform/commit/d5149768e116571d0a1a059d1ff16e1cfc45fcfd\n\n## Visualizing the code metrics\n\nSo, I tried drawing some Venn diagrams in my notebook. But, I'm terrible at\ndrawing. That's when I remembered that SVG is a thing where I can draw by\nwriting code. So, [I spent an afternoon teaching myself some SVG][svgtutorial]\nand [reworked my metrics shell script][c7].\n\n[c7]: https://github.com/lmorchard/react-multiplatform/commit/0014232c9858e082414e094be021170fda19aab0\n[svgtutorial]: https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial\n\nI'm not going to bother trying to make the areas actually proportional to the\nlines of code. But, here's a rough picture of code sharing:\n\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-overall.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-models.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-views.svg\">\n\nIf you can't see those images, then you'll need to find a browser that understands\nSVG until I can be bothered to convert to PNG. (Pull requests welcome!)\n\n## Conclusions revisited\n\nAs before, most of the models code is shared between web and both native\nplatforms. What's unique is mostly boilerplate wrapping [the localStorage /\nasyncStorage split between web and native][storagesplit].\n\n[storagesplit]: http://blog.lmorchard.com/2015/07/22/react-multiplatform/#forking-sharing-model-code-for-persistence\n\nOn the view side, however, things are a bit more spread out. In a nutshell,\nReact patterns in general allow a decent chunk of code to be shared between\nweb and native. And even more code can be shared between the iOS and Android\nplatforms.\n\nBut, unique concerns in each platform - web, iOS, and Android - call for\nunique code for each case. This is not actually a failing, though: Varying the\nUX between web & iOS & Android is a flexibility you'll probably appreciate. \n\nIn other words, use components & conventions unique to each\nplatform without your app suffering from the lowest-common-denominator UX\nproblem historically found in a lot of multi-platform apps. In the case of this\nTODO app, that just boils down to trivialities like checkboxes & switches &\nsegmented controls. In a larger app, I'd expect this concern to grow.\n\nI'm being lazy and not coding up the math in percentages. This approach shared\nabout half the code from the web app, and even more than that for each of the\nnative apps. I think that's a significant advantage over writing separate\napps.\n\nOf course, [all my caveats from the first go\naround][caveats] still apply: This is a very simple app. The code devoted to\ndoing interesting things versus React boilerplate is probably not at a good\nratio. Also, as more view components arise, further overlap might be found.\nAnd, hopefully, common logic would remain the primary area of growth on the\nmodel site.\n\n[caveats]: http://blog.lmorchard.com/2015/07/22/react-multiplatform/#conclusion\n\nI think this approach toward building apps remains interesting & promising. \n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2015",
    "path": "2015/09/21/react-native-android",
    "thumbnail": "https://lmorchard.github.io/uploads/2015/react-native-android/shared-overall.svg"
  }
]