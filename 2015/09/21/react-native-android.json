{"title":"Adding Android to a multi-platform React app","tags":["webdev","native","react","reactnative","android","ios","mobile","mozilla"],"date":"2015-09-21T00:00:00.000Z","url":"/2015/09/21/react-native-android/","thumbnail":"/uploads/2015/react-native-android/shared-overall.svg","path":"2015/09/21/react-native-android","content":"<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>TL;DR: A couple of months back, <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/\">I wrote about a TODO app built using React\nfor web and React Native for iOS</a>. </p>\n<p>Last week, the team at Facebook \n<a href=\"https://code.facebook.com/posts/1189117404435352/\">released React Native for Android</a>. So, I circled back to add\nAndroid support and revisit how code sharing looks now.</p>\n<h2 id=\"getting-up-to-speed\">Getting up to speed</h2>\n<p>With this <a href=\"https://code.facebook.com/posts/1189117404435352/\">new release of React Native</a>, I was able to add support\nfor Android to <a href=\"https://github.com/lmorchard/react-multiplatform\">my little TODO app</a>.</p>\n<p>The first task was to <a href=\"https://github.com/lmorchard/react-multiplatform/commit/38fb7afe67f8c339b8d51c69a1f515a5a91e97c7\">shuffle directories &amp; files around and add the base\nAndroid support</a>. In general, the project layout is now cleaner.\nAssets for each platform now live in separate sub-directories.</p>\n<p>Next, to start iterating &amp; experimenting, I copied the code from the iOS app\ninto Android-specific directories. I <a href=\"https://github.com/lmorchard/react-multiplatform/commit/fd80e9859400744ac5fcffc8f7d75d6703a3856d\">only needed to make some small\ntweaks</a> to account for differences in native component sets. That got my\nbase app functionality working.</p>\n<p>Then, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/dd8b6b307c31b67fde23c6b090e7b1f1d8b0f579\">I squashed the iOS &amp; Android models together</a> when I realized that\ncode was identical between the React Native platforms. That could change in\nthe future, but there&#39;s no need for a difference right now.</p>\n<p>After sleeping on it, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/ea7abb421b7e0486b2d3de42001724343f832901\">I refactored some common mixins</a> to take advantage of\nadditional sharing opportunities I found between iOS &amp; Android views. That\nhelped to further shrink the lines of duplicated code.</p>\n<p>This added what amounts to a new category of code sharing in my project. So,\n<a href=\"https://github.com/lmorchard/react-multiplatform/commit/cdbbff72cb941fac75f68c1c91279fa780997b26\">I separated that code into its own module</a> to make the distinction easier\nto see &amp; measure.  Now, I have code shared between web and native in general,\nand code shared between the iOS and Android native platforms.</p>\n<p>Finally, in an attempt to start automating my code metrics, <a href=\"https://github.com/lmorchard/react-multiplatform/commit/d5149768e116571d0a1a059d1ff16e1cfc45fcfd\">I added\n<code>loc-metrics.sh</code></a>.</p>\n<h2 id=\"visualizing-the-code-metrics\">Visualizing the code metrics</h2>\n<p>So, I tried drawing some Venn diagrams in my notebook. But, I&#39;m terrible at\ndrawing. That&#39;s when I remembered that SVG is a thing where I can draw by\nwriting code. So, <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial\">I spent an afternoon teaching myself some SVG</a>\nand <a href=\"https://github.com/lmorchard/react-multiplatform/commit/0014232c9858e082414e094be021170fda19aab0\">reworked my metrics shell script</a>.</p>\n<p>I&#39;m not going to bother trying to make the areas actually proportional to the\nlines of code. But, here&#39;s a rough picture of code sharing:</p>\n<p><img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-overall.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-models.svg\">\n<img style=\"width: 240px\" src=\"/uploads/2015/react-native-android/shared-views.svg\"></p>\n<p>If you can&#39;t see those images, then you&#39;ll need to find a browser that understands\nSVG until I can be bothered to convert to PNG. (Pull requests welcome!)</p>\n<h2 id=\"conclusions-revisited\">Conclusions revisited</h2>\n<p>As before, most of the models code is shared between web and both native\nplatforms. What&#39;s unique is mostly boilerplate wrapping <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/#forking-sharing-model-code-for-persistence\">the localStorage /\nasyncStorage split between web and native</a>.</p>\n<p>On the view side, however, things are a bit more spread out. In a nutshell,\nReact patterns in general allow a decent chunk of code to be shared between\nweb and native. And even more code can be shared between the iOS and Android\nplatforms.</p>\n<p>But, unique concerns in each platform - web, iOS, and Android - call for\nunique code for each case. This is not actually a failing, though: Varying the\nUX between web &amp; iOS &amp; Android is a flexibility you&#39;ll probably appreciate. </p>\n<p>In other words, use components &amp; conventions unique to each\nplatform without your app suffering from the lowest-common-denominator UX\nproblem historically found in a lot of multi-platform apps. In the case of this\nTODO app, that just boils down to trivialities like checkboxes &amp; switches &amp;\nsegmented controls. In a larger app, I&#39;d expect this concern to grow.</p>\n<p>I&#39;m being lazy and not coding up the math in percentages. This approach shared\nabout half the code from the web app, and even more than that for each of the\nnative apps. I think that&#39;s a significant advantage over writing separate\napps.</p>\n<p>Of course, <a href=\"http://blog.lmorchard.com/2015/07/22/react-multiplatform/#conclusion\">all my caveats from the first go\naround</a> still apply: This is a very simple app. The code devoted to\ndoing interesting things versus React boilerplate is probably not at a good\nratio. Also, as more view components arise, further overlap might be found.\nAnd, hopefully, common logic would remain the primary area of growth on the\nmodel site.</p>\n<p>I think this approach toward building apps remains interesting &amp; promising. </p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n"}