[
  {
    "comments_archived": true,
    "date": "2004-07-30T03:22:32.000Z",
    "layout": "post",
    "title": "Kibo Kibo Kibo",
    "wordpress_id": 535,
    "wordpress_slug": "kibo-kibo-kibo",
    "wordpress_url": "http://www.decafbad.com/blog/?p=535",
    "year": "2004",
    "month": "07",
    "day": "29",
    "isDir": false,
    "slug": "kibo-kibo-kibo",
    "postName": "2004-07-29-kibo-kibo-kibo",
    "html": "<!--more-->\n<p>A tiny bit of a <a href=\"http://rc3.org/cgi-bin/less.pl?arg=6418\">post from Rafe Colburn</a> today reminds me:  Thanks to sites like <a href=\"http://www.technorati.com/\">Technorati</a> and <a href=\"http://www.feedster.com/\">Feedster</a>, along with maybe some Google-scraping (careful though, since <a href=\"http://www.internetnews.com/ec-news/article.php/3334651\">Google hates scrapers</a>), we can all now egosurf and be <a href=\"http://c2.com/cgi/wiki?JamesKiboParry\">Kibo</a> potentials.  </p>\n<p>I, for one, would welcome a <a href=\"http://en.wikipedia.org/wiki/Kibo\">Kibo</a> of blogs, because it would be a hell of a lot more amusing than comment spam.</p>\n",
    "body": "<!--more-->\r\nA tiny bit of a [post from Rafe Colburn][rc3] today reminds me:  Thanks to sites like [Technorati][technorati] and [Feedster][feedster], along with maybe some Google-scraping (careful though, since [Google hates scrapers][noscrape]), we can all now egosurf and be [Kibo][kibo] potentials.  \r\n\r\nI, for one, would welcome a [Kibo][kibo2] of blogs, because it would be a hell of a lot more amusing than comment spam.\r\n\r\n[feedster]: http://www.feedster.com/\r\n[technorati]: http://www.technorati.com/\r\n[rc3]: http://rc3.org/cgi-bin/less.pl?arg=6418\r\n[kibo]: http://c2.com/cgi/wiki?JamesKiboParry\r\n[kibo2]: http://en.wikipedia.org/wiki/Kibo\r\n[noscrape]: http://www.internetnews.com/ec-news/article.php/3334651\r\n[newsxml]: http://nick.typepad.com/blog/2004/05/google_groups_2.html\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/07/30/kibo-kibo-kibo"
  },
  {
    "comments_archived": true,
    "date": "2004-07-22T05:03:27.000Z",
    "excerpt": "Something that has annoyed me for awhile is that Cmd-Click is what my X11 on OS X has been using by default to simulate a right-click.",
    "layout": "post",
    "title": "Use Control-Click for button3 in Apple's X11",
    "wordpress_id": 534,
    "wordpress_slug": "use-control-click-for-button3-in-apples-x11",
    "wordpress_url": "http://www.decafbad.com/blog/?p=534",
    "year": "2004",
    "month": "07",
    "day": "22",
    "isDir": false,
    "slug": "use-control-click-for-button3-in-apples-x11",
    "postName": "2004-07-22-use-control-click-for-button3-in-apples-x11",
    "html": "<p>Popping in for a quick note.  Something that has annoyed me for awhile is that Cmd-Click is what my X11 on OS X has been using by default to simulate a right-click.  What I just found out is that I can do this:</p>\n<pre><code>defaults write com.apple.x11 fake_button2 option\ndefaults write com.apple.x11 fake_button3 control</code></pre>\n<p>Running <code>man Xquartz</code> in a terminal does wonders.</p>\n",
    "body": "Popping in for a quick note.  Something that has annoyed me for awhile is that Cmd-Click is what my X11 on OS X has been using by default to simulate a right-click.  What I just found out is that I can do this:\r\n\r\n    defaults write com.apple.x11 fake_button2 option\r\n    defaults write com.apple.x11 fake_button3 control\r\n\r\nRunning `man Xquartz` in a terminal does wonders.\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/07/22/use-control-click-for-button3-in-apples-x11"
  },
  {
    "comments_archived": true,
    "date": "2004-07-15T02:32:55.000Z",
    "excerpt": "Mostly I think I'm just in a funk.",
    "layout": "post",
    "title": "Dork Funk",
    "wordpress_id": 533,
    "wordpress_slug": "dork-funk",
    "wordpress_url": "http://www.decafbad.com/blog/?p=533",
    "year": "2004",
    "month": "07",
    "day": "14",
    "isDir": false,
    "slug": "dork-funk",
    "postName": "2004-07-14-dork-funk",
    "html": "<p>I&#39;ve been feeling a strange tangle of writer&#39;s block and identity crisis lately, not to dramatize overmuch.  I&#39;m not really all that sure I&#39;m a blogger anymore, if I ever was.</p>\n<p>As I&#39;ve written before, I slurp down a large amount of reading from sources various and sundry, but it seems like it&#39;s been a long time since last I felt like tapping out a few paragraphs and hitting the post button.  Maybe this is <a href=\"http://www.wired.com/news/culture/0,1284,64088,00.html\">blogger burnout</a>, but I haven&#39;t been <a href=\"http://rc3.org/cgi-bin/less.pl?arg=6366\">burning all that bright</a> here for quite some time. </p>\n<p>Pretty much all of the micro-blogging I might do--you know, your basic &quot;<em>Hey, check this out!</em>&quot;--has been channeled into del.icio.us and the link blog.  So that leaves me trying to think of <em>Grander Things</em> about which to write.  I feel like there&#39;re a lot of neat ideas floating around in my head, and I could probably be writing about them, but it often seems like someone somewhere else is writing so much more interestingly about things than I ever could.</p>\n<p>Maybe this is a paralysis brought on by just plain reading too damn many feeds.  I know the comparison is not quite apt, but I was reminded of Matt Webb&#39;s excellent <a href=\"http://upsideclown.com/2003_05_29.shtml\">&quot;Extelligence&quot;</a>:  All my thoughts can pretty much already be found out there in the ether, so it feels like I&#39;m already spread out in the web&#39;s distributed intelligence.  Who needs me to rewrite it or rethink with this particular head?</p>\n<p>And, you know, I occasionally feel the urge to toss in with some rant on politics (because you may have <a href=\"http://del.icio.us/deusx/politics\">noticed</a> my top link blog category) or the latest flamewar happening somewhere--but I&#39;ve been restraining myself because, again, someone somewhere else has mostly written up opinions extremely close to my own and &#39;nuff said.</p>\n<p>That, and I just don&#39;t get any jollies out of being a flame warrior.  In a fight, I&#39;d rather drown out the screaming with jokes and the mental equivalent of random balloon animals.  In the end, if there&#39;s nothing really at stake other than a few microns of ego and a census of pinhead-dancing angels, I&#39;d rather <a href=\"http://www.decafbad.com/blog/2004/06/14/info_freako_or_whos_already_past_arguing_about_syndication_formats\">move along</a>.</p>\n<p>So then, what the hell&#39;s a blog for anyway, if not for <a href=\"http://www.decafbad.com/blog/2002/05/07/oooadb\">ant trails</a> and flamewars?</p>\n<p>Well, I wrote about <a href=\"http://www.decafbad.com/blog/2004/05/25/i_was_a_preteen_transactor_author_wannabe_and_still_am\">what I really want to do here</a>.  Mostly I think I&#39;m just in a funk.  I&#39;m in a job with which I&#39;m not entirely enthused or enamored--but hey it pays the bills pretty well and sticks neither cathode nor anode into my soul to power its potato-clock science projects.  (Which <em>can</em> be fun, given the right potato clock.)  Still, though, I&#39;ve got this heavy urge to <em>do things</em> and <em>make stuff</em>, and I&#39;ve intended to make this the place to channel these urges.  Because, to the extent that I&#39;m not learning new things and tinkering and building and being productive, I start feeling useless and unworthy.</p>\n<p>Again, not trying to dramatize overmuch.  I&#39;m not quite sure why, but I&#39;ve dropped into this vicious circle wherein I don&#39;t get much done and don&#39;t start much of anything--and so feel further incapable of doing or starting much in the future.  </p>\n<p>Yeah, it&#39;s a funk, I think.  And the only reason I&#39;m writing here at length about it is because I want to write <em>something</em>, even it it&#39;s only concerning about how I&#39;ve not been writing about anything.  I do this a lot in my moleskine, when I can&#39;t really think of anything grand about which to make a journal entry, but I feel like <em>something</em> might float up if I just keep myself writing in it on a regular basis.  And usually, things do float up eventually.</p>\n<p>Of course, the other thing is that I don&#39;t much intend to fill this space with the sort of inane personal material I used to write on my LiveJournal--but hell, I don&#39;t even write that stuff there anymore either.  I guess what I need to do is just lay off myself: it&#39;s really not a condemnation of my worth as a dork that I don&#39;t churn out entries here and elsewhere at a high daily rate.  </p>\n<p>So anyway, I guess that&#39;s somewhat off my chest and about to be posted.  Thanks to all 2.5 of my readers who waded through all this.  :)</p>\n<div id=\"comments\" class=\"comments archived-comments\"><h3>Archived Comments</h3>\n<ul class=\"comments\">\n<li class=\"comment\" id=\"comment-221084567\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://rasterweb.net/raster/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=db0fab74bcb564ebb09295498b892fb6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://rasterweb.net/raster/\">Pete Prodoehl</a>\n</div>\n<a href=\"#comment-221084567\" class=\"permalink\"><time datetime=\"2004-07-14T22:51:25\">2004-07-14T22:51:25</time></a>\n</div>\n<div class=\"content\">2.5 eh, must be double my readership, and I keep going...\nSeriously, I came across the \"Info Freako, or who's already past arguing about syndication formats?\" post again, and it made me think, because you came up with some great ideas (that I'd like to steal!) Creativity is like that, sometime it works, sometimes it just ain't there.\nTake a break, and when the inspiration hits, go with it. Or not, it's up to you. I just think you've fallen into the trap (again) of not living up to some sort of expectations with your writing...</div>\n</li>\n<li class=\"comment\" id=\"comment-221084569\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://cubanlinks.org/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5441ca4708065da7e0467e1470c49653&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://cubanlinks.org/blog\">Carter</a>\n</div>\n<a href=\"#comment-221084569\" class=\"permalink\"><time datetime=\"2004-07-14T23:08:30\">2004-07-14T23:08:30</time></a>\n</div>\n<div class=\"content\">I know this isn't exactly along the lines of what you're mired in, but I'm feeling the same way about the blogging tool that powers my site.\nI started working on it to a) teach myself new skills and b) allow me flexibility that other tools didn't offer (at the time).  Now, as all the other tools are maturing, I'm caught up in a feature-race that I don't have time to win, and my interest has subsided.  \nPersonally, I'm just waiting for a flash of inspiration.  They always come at the most unlikely time, just gotta be patient.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084571\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://weblog.burningbird.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0f24e3bc8f78f9b196d3ec27b0191a25&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://weblog.burningbird.net\">Shelley</a>\n</div>\n<a href=\"#comment-221084571\" class=\"permalink\"><time datetime=\"2004-07-14T23:12:44\">2004-07-14T23:12:44</time></a>\n</div>\n<div class=\"content\">So, do I get a half or a whole all my own of that 2.5?\nI can understand what you're saying and you should do what feels right for you. But I've always appreciated your humor, and you're calm amidst the flames. \nHowever, if it isn't fun, don't do it. Or stop until it feels like fun again.\nOr invent a fourth syndication format -- that will get things lively....</div>\n</li>\n<li class=\"comment\" id=\"comment-221084574\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://andrew.blog-city.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=141919b27b8080f193e98d05f9622805&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://andrew.blog-city.com/\">Andrew</a>\n</div>\n<a href=\"#comment-221084574\" class=\"permalink\"><time datetime=\"2004-07-15T00:13:30\">2004-07-15T00:13:30</time></a>\n</div>\n<div class=\"content\">Yeah, I can relate to that, not only regarding the job but also about not knowing what to write and whether it's worth all the trouble. I haven't been blogging for long, so my experience might not count for much, but what I do to keep my motivation high is write series of entries. That way, I have a main topic and I can write smaller entries more frequently. And since my job isn't that great either, I'm currently writing about how I would have done things better if I had had the chance (not to mention the foresight :-).</div>\n</li>\n<li class=\"comment\" id=\"comment-221084576\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://cpe000103c34069-cm014300001653.cpe.net.cable.rogers.com/weblogs/ben/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=871196de9b27ed994c30428eed59073c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://cpe000103c34069-cm014300001653.cpe.net.cable.rogers.com/weblogs/ben/\">Gnomon</a>\n</div>\n<a href=\"#comment-221084576\" class=\"permalink\"><time datetime=\"2004-07-15T00:26:19\">2004-07-15T00:26:19</time></a>\n</div>\n<div class=\"content\">I know /exactly/ what you mean. I haven't posted anything in almost three weeks now, for various reasons. At first I felt bad about it, then I rationalized that nobody really wants to hear my angsty whinging, and eventually I just didn't have anything to say that would improve the silence.\nI find that I can't stay away, though. I've got at least two dozen thoughts, ideas, stories and neat discoveries that have been rattling around in my head with nowhere to go. Eventually I'll have to put them up just to exorcize them from my short-term memory.\nI'm looking forward to that time (which I anticipate will be pretty soon) in both your case and mine. Between now and then, though, don't worry about it. It don't mean a thing, after all, if it ain't got that swing. Wait until it comes naturally.\n(and I loved your Wishlist series of articles, in passing. They were terrific, easily fit for publication)</div>\n</li>\n<li class=\"comment\" id=\"comment-221084579\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.tgr.com/weblog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d51b43d778e026f0af45279965055337&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.tgr.com/weblog\">peterb</a>\n</div>\n<a href=\"#comment-221084579\" class=\"permalink\"><time datetime=\"2004-07-15T00:28:14\">2004-07-15T00:28:14</time></a>\n</div>\n<div class=\"content\">I think it's important to have a set of rules for what you're going to write about in a given forum.  I also, personally, think it's equally important to think of it as \"writing\" rather than \"blogging.\"  I have a link on my site (look for \"philosophy\" in the sidebar) that lists my rules.  The number one rule is \"no blogging about blogging.\"  (Obviously, I don't hold myself to that rule when commenting in someone else's weblog)\nmeta-blogging, blogging about blogging, and link blogging all have one thing in common:  they are all intensely boring activities that only the obsessive-compulsive could enjoy.  I've seen you when you're writing something real.  You're better than that.  Write about real things.  If you have nothing to say, then don't say anything for a while.  It's not the end of the world if the site is quiet for a while.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084583\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.sencer.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0e94b4d4662542b91df48f0ff3b36d26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.sencer.de\">Sencer</a>\n</div>\n<a href=\"#comment-221084583\" class=\"permalink\"><time datetime=\"2004-07-15T02:26:06\">2004-07-15T02:26:06</time></a>\n</div>\n<div class=\"content\">A  centi-pede walks with a hundred legs. A frog, who was a philosopher, saw the centipede; he looked at and watched him and became very troubled. It is so difficult to walk even with four legs, but this centipede was walking with one hundred legs - this is a miricle! How did the centipede decide which leg to move first, and then witch one next and tham which one after that? And one hundred legs! So the frog stopped the centipede and asked him a question: \" I'm a philosopher am I am puzzled by you. A problem has arisen which I cannot solve. How do you walk? How do you manage it all? It seems impossible.\"\nThe centipede said: \" I have been walking all my life, but I have not thought about it. Now that you ask, I will think about it and than I will tell you.\"\nFor the first time thought entered the centipede's consciousness. Really, the frog was right - which leg should be moved first? The centipede stood there for a few minutes, couldn't movewobbled, sand felt down. And he said to the frog: \"Please don't ask another centipede this question I have been walking my whole life and it was never a problem, and now you have killed me completely! I cannot move. A hundred legs to move! How can I manage?\"\n;)</div>\n</li>\n<li class=\"comment\" id=\"comment-221084586\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://jcwinnie.biz/wordpress/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=53313cda2dc9e876a17be4772e67880e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://jcwinnie.biz/wordpress/\">jcwinnie</a>\n</div>\n<a href=\"#comment-221084586\" class=\"permalink\"><time datetime=\"2004-07-15T16:28:22\">2004-07-15T16:28:22</time></a>\n</div>\n<div class=\"content\">Yeah, I, too, wondered where Les got 2.5; he must have subtracted for kooks first.\n\"I resemble that remark.\"\n\"No I don't.\"\n\"Yes, I do.\"\n\"No, I don't.\"\n\"...\"</div>\n</li>\n<li class=\"comment\" id=\"comment-221084588\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.ensight.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=490d926d48cdd8ab8349fe6206c02da4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.ensight.org\">Jeremy C. Wright</a>\n</div>\n<a href=\"#comment-221084588\" class=\"permalink\"><time datetime=\"2004-07-27T19:45:28\">2004-07-27T19:45:28</time></a>\n</div>\n<div class=\"content\">I've had some thoughts on this over the last year and a bit of blogging.\nWhy Blog? http://www.ensight.org/archives/2004/04/25/why_blog_zat_is_ze_qwestion.html\nBlogging Plateaus: http://www.ensight.org/archives/2003/12/08/blogging_pressure.html\nFeel free to erase this comment, I couldn't quickly find your email to just email this to you.</div>\n</li>\n<li class=\"comment\" id=\"comment-221084591\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://weblogs.asp.net/jtobler/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2feb06e9f49404f568ea00547a8ac5d5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://weblogs.asp.net/jtobler/\">John Tobler</a>\n</div>\n<a href=\"#comment-221084591\" class=\"permalink\"><time datetime=\"2004-08-14T08:37:12\">2004-08-14T08:37:12</time></a>\n</div>\n<div class=\"content\">Some time ago, your blog caught my attention -- one out of thousands -- and I added it to my rather large blogroll.  My blogroll is one way I try to tap into the flow from that open ten inch informational water main we are supposed to take our sips from, these days.  \nThere was something different and significant in your choices of material and your presentation of technical ideas.  Actually, I put your blog on my top level and looked forward to your new material.  I admit to wondering what was up with you, because I have noticed the obvious dropoff in your posts. So, I do want to let you know that your contributions to the technical blogging aether have at least influenced one senior software architect.\nBlogging, to me, is an opportunity for which a great many people in the past would have given an arm or leg.  To be able to self-publish?  Not to have to wait in line only to be told that your thoughts are not \"commercially acceptable at this time?\"  No incompetent editors or rejection slips?  No censors?  Hmmmmmm.  What is that worth to an active, creative mind?\nAs with any art, the deepest problems come in finding something of worth to say.  Craft without content, technique without point, writing without meaning, playing sounds without feeling the music, blogging without inspiration -- these dull both the art and the creator.\nWhen you have nothing to say, don't blog.  Write or read or think in private to explore the endless well of ideas that will teach you what you, uniquely, should -- and will want to -- communicate.  If blogging is not an art that helps you achieve meaningful contact with other fellow humans, then I suggest finding another art that will.  We humans have a great many arts from which to choose!\nDefinitely, do not feel imposed upon to blog.  This is one possible method to change input into output, adding the value of your mind, heart, and soul in the process.\nMy final advice comes from Zen:\n\"When hungry, eat; when blungry, blog!\"\nPS  Now that you have inspired me to think through this, I'm going to post my answer on my own blog (http://weblogs.asp.net/jtobler/archive/2004/08/14/214728.aspx).  See?  Uour blogging does affect someone.\nThanks!</div>\n</li>\n<li class=\"comment\" id=\"comment-221084595\">\n<div class=\"meta\">\n<div class=\"author\">\n<a class=\"avatar image\" rel=\"nofollow\" \nhref=\"http://www.livejournal.com/users/marnina/635.html\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a12247c13048526fcbb21a599f9ce945&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n<a class=\"avatar name\" rel=\"nofollow\" \nhref=\"http://www.livejournal.com/users/marnina/635.html\">Marnina</a>\n</div>\n<a href=\"#comment-221084595\" class=\"permalink\"><time datetime=\"2004-08-28T18:52:00\">2004-08-28T18:52:00</time></a>\n</div>\n<div class=\"content\">Thanks for the centipede story. I took it off your site and used it in an entry on moral philosophy I made this morning.\nhttp://www.livejournal.com/users/marnina/635.html</div>\n</li>\n</ul>\n</div>\n",
    "body": "I've been feeling a strange tangle of writer's block and identity crisis lately, not to dramatize overmuch.  I'm not really all that sure I'm a blogger anymore, if I ever was.\r\n\r\nAs I've written before, I slurp down a large amount of reading from sources various and sundry, but it seems like it's been a long time since last I felt like tapping out a few paragraphs and hitting the post button.  Maybe this is [blogger burnout][burnout], but I haven't been [burning all that bright][rafe] here for quite some time. \r\n\r\nPretty much all of the micro-blogging I might do--you know, your basic \"_Hey, check this out!_\"--has been channeled into del.icio.us and the link blog.  So that leaves me trying to think of _Grander Things_ about which to write.  I feel like there're a lot of neat ideas floating around in my head, and I could probably be writing about them, but it often seems like someone somewhere else is writing so much more interestingly about things than I ever could.\r\n\r\nMaybe this is a paralysis brought on by just plain reading too damn many feeds.  I know the comparison is not quite apt, but I was reminded of Matt Webb's excellent [\"Extelligence\"][extelligence]:  All my thoughts can pretty much already be found out there in the ether, so it feels like I'm already spread out in the web's distributed intelligence.  Who needs me to rewrite it or rethink with this particular head?\r\n\r\nAnd, you know, I occasionally feel the urge to toss in with some rant on politics (because you may have [noticed][politics] my top link blog category) or the latest flamewar happening somewhere--but I've been restraining myself because, again, someone somewhere else has mostly written up opinions extremely close to my own and 'nuff said.\r\n\r\nThat, and I just don't get any jollies out of being a flame warrior.  In a fight, I'd rather drown out the screaming with jokes and the mental equivalent of random balloon animals.  In the end, if there's nothing really at stake other than a few microns of ego and a census of pinhead-dancing angels, I'd rather [move along][infofreako].\r\n\r\nSo then, what the hell's a blog for anyway, if not for [ant trails][trails] and flamewars?\r\n\r\nWell, I wrote about [what I really want to do here][wanttodo].  Mostly I think I'm just in a funk.  I'm in a job with which I'm not entirely enthused or enamored--but hey it pays the bills pretty well and sticks neither cathode nor anode into my soul to power its potato-clock science projects.  (Which *can* be fun, given the right potato clock.)  Still, though, I've got this heavy urge to *do things* and *make stuff*, and I've intended to make this the place to channel these urges.  Because, to the extent that I'm not learning new things and tinkering and building and being productive, I start feeling useless and unworthy.\r\n\r\nAgain, not trying to dramatize overmuch.  I'm not quite sure why, but I've dropped into this vicious circle wherein I don't get much done and don't start much of anything--and so feel further incapable of doing or starting much in the future.  \r\n\r\nYeah, it's a funk, I think.  And the only reason I'm writing here at length about it is because I want to write *something*, even it it's only concerning about how I've not been writing about anything.  I do this a lot in my moleskine, when I can't really think of anything grand about which to make a journal entry, but I feel like *something* might float up if I just keep myself writing in it on a regular basis.  And usually, things do float up eventually.\r\n\r\nOf course, the other thing is that I don't much intend to fill this space with the sort of inane personal material I used to write on my LiveJournal--but hell, I don't even write that stuff there anymore either.  I guess what I need to do is just lay off myself: it's really not a condemnation of my worth as a dork that I don't churn out entries here and elsewhere at a high daily rate.  \r\n\r\nSo anyway, I guess that's somewhat off my chest and about to be posted.  Thanks to all 2.5 of my readers who waded through all this.  :)\r\n\r\n[wanttodo]: http://www.decafbad.com/blog/2004/05/25/i_was_a_preteen_transactor_author_wannabe_and_still_am\r\n[politics]: http://del.icio.us/deusx/politics\r\n[map]: http://kevan.org/extispicious.cgi?name=deusx \r\n[trails]: http://www.decafbad.com/blog/2002/05/07/oooadb\r\n[infofreako]: http://www.decafbad.com/blog/2004/06/14/info_freako_or_whos_already_past_arguing_about_syndication_formats\r\n[extelligence]: http://upsideclown.com/2003_05_29.shtml\r\n[burnout]: http://www.wired.com/news/culture/0,1284,64088,00.html\r\n[rafe]: http://rc3.org/cgi-bin/less.pl?arg=6366\n\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n            \n        <ul class=\"comments\">\n            \n        <li class=\"comment\" id=\"comment-221084567\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://rasterweb.net/raster/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=db0fab74bcb564ebb09295498b892fb6&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://rasterweb.net/raster/\">Pete Prodoehl</a>\n                </div>\n                <a href=\"#comment-221084567\" class=\"permalink\"><time datetime=\"2004-07-14T22:51:25\">2004-07-14T22:51:25</time></a>\n            </div>\n            <div class=\"content\">2.5 eh, must be double my readership, and I keep going...\n\nSeriously, I came across the \"Info Freako, or who's already past arguing about syndication formats?\" post again, and it made me think, because you came up with some great ideas (that I'd like to steal!) Creativity is like that, sometime it works, sometimes it just ain't there.\n\nTake a break, and when the inspiration hits, go with it. Or not, it's up to you. I just think you've fallen into the trap (again) of not living up to some sort of expectations with your writing...</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084569\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://cubanlinks.org/blog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=5441ca4708065da7e0467e1470c49653&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://cubanlinks.org/blog\">Carter</a>\n                </div>\n                <a href=\"#comment-221084569\" class=\"permalink\"><time datetime=\"2004-07-14T23:08:30\">2004-07-14T23:08:30</time></a>\n            </div>\n            <div class=\"content\">I know this isn't exactly along the lines of what you're mired in, but I'm feeling the same way about the blogging tool that powers my site.\n\nI started working on it to a) teach myself new skills and b) allow me flexibility that other tools didn't offer (at the time).  Now, as all the other tools are maturing, I'm caught up in a feature-race that I don't have time to win, and my interest has subsided.  \n\nPersonally, I'm just waiting for a flash of inspiration.  They always come at the most unlikely time, just gotta be patient.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084571\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://weblog.burningbird.net\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0f24e3bc8f78f9b196d3ec27b0191a25&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://weblog.burningbird.net\">Shelley</a>\n                </div>\n                <a href=\"#comment-221084571\" class=\"permalink\"><time datetime=\"2004-07-14T23:12:44\">2004-07-14T23:12:44</time></a>\n            </div>\n            <div class=\"content\">So, do I get a half or a whole all my own of that 2.5?\n\nI can understand what you're saying and you should do what feels right for you. But I've always appreciated your humor, and you're calm amidst the flames. \n\nHowever, if it isn't fun, don't do it. Or stop until it feels like fun again.\n\nOr invent a fourth syndication format -- that will get things lively....</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084574\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://andrew.blog-city.com/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=141919b27b8080f193e98d05f9622805&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://andrew.blog-city.com/\">Andrew</a>\n                </div>\n                <a href=\"#comment-221084574\" class=\"permalink\"><time datetime=\"2004-07-15T00:13:30\">2004-07-15T00:13:30</time></a>\n            </div>\n            <div class=\"content\">Yeah, I can relate to that, not only regarding the job but also about not knowing what to write and whether it's worth all the trouble. I haven't been blogging for long, so my experience might not count for much, but what I do to keep my motivation high is write series of entries. That way, I have a main topic and I can write smaller entries more frequently. And since my job isn't that great either, I'm currently writing about how I would have done things better if I had had the chance (not to mention the foresight :-).</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084576\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://cpe000103c34069-cm014300001653.cpe.net.cable.rogers.com/weblogs/ben/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=871196de9b27ed994c30428eed59073c&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://cpe000103c34069-cm014300001653.cpe.net.cable.rogers.com/weblogs/ben/\">Gnomon</a>\n                </div>\n                <a href=\"#comment-221084576\" class=\"permalink\"><time datetime=\"2004-07-15T00:26:19\">2004-07-15T00:26:19</time></a>\n            </div>\n            <div class=\"content\">I know /exactly/ what you mean. I haven't posted anything in almost three weeks now, for various reasons. At first I felt bad about it, then I rationalized that nobody really wants to hear my angsty whinging, and eventually I just didn't have anything to say that would improve the silence.\n\nI find that I can't stay away, though. I've got at least two dozen thoughts, ideas, stories and neat discoveries that have been rattling around in my head with nowhere to go. Eventually I'll have to put them up just to exorcize them from my short-term memory.\n\nI'm looking forward to that time (which I anticipate will be pretty soon) in both your case and mine. Between now and then, though, don't worry about it. It don't mean a thing, after all, if it ain't got that swing. Wait until it comes naturally.\n\n(and I loved your Wishlist series of articles, in passing. They were terrific, easily fit for publication)</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084579\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.tgr.com/weblog\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=d51b43d778e026f0af45279965055337&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.tgr.com/weblog\">peterb</a>\n                </div>\n                <a href=\"#comment-221084579\" class=\"permalink\"><time datetime=\"2004-07-15T00:28:14\">2004-07-15T00:28:14</time></a>\n            </div>\n            <div class=\"content\">I think it's important to have a set of rules for what you're going to write about in a given forum.  I also, personally, think it's equally important to think of it as \"writing\" rather than \"blogging.\"  I have a link on my site (look for \"philosophy\" in the sidebar) that lists my rules.  The number one rule is \"no blogging about blogging.\"  (Obviously, I don't hold myself to that rule when commenting in someone else's weblog)\n\nmeta-blogging, blogging about blogging, and link blogging all have one thing in common:  they are all intensely boring activities that only the obsessive-compulsive could enjoy.  I've seen you when you're writing something real.  You're better than that.  Write about real things.  If you have nothing to say, then don't say anything for a while.  It's not the end of the world if the site is quiet for a while.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084583\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.sencer.de\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=0e94b4d4662542b91df48f0ff3b36d26&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.sencer.de\">Sencer</a>\n                </div>\n                <a href=\"#comment-221084583\" class=\"permalink\"><time datetime=\"2004-07-15T02:26:06\">2004-07-15T02:26:06</time></a>\n            </div>\n            <div class=\"content\">A  centi-pede walks with a hundred legs. A frog, who was a philosopher, saw the centipede; he looked at and watched him and became very troubled. It is so difficult to walk even with four legs, but this centipede was walking with one hundred legs - this is a miricle! How did the centipede decide which leg to move first, and then witch one next and tham which one after that? And one hundred legs! So the frog stopped the centipede and asked him a question: \" I'm a philosopher am I am puzzled by you. A problem has arisen which I cannot solve. How do you walk? How do you manage it all? It seems impossible.\"\n\nThe centipede said: \" I have been walking all my life, but I have not thought about it. Now that you ask, I will think about it and than I will tell you.\"\n\nFor the first time thought entered the centipede's consciousness. Really, the frog was right - which leg should be moved first? The centipede stood there for a few minutes, couldn't movewobbled, sand felt down. And he said to the frog: \"Please don't ask another centipede this question I have been walking my whole life and it was never a problem, and now you have killed me completely! I cannot move. A hundred legs to move! How can I manage?\"\n\n\n;)</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084586\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://jcwinnie.biz/wordpress/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=53313cda2dc9e876a17be4772e67880e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://jcwinnie.biz/wordpress/\">jcwinnie</a>\n                </div>\n                <a href=\"#comment-221084586\" class=\"permalink\"><time datetime=\"2004-07-15T16:28:22\">2004-07-15T16:28:22</time></a>\n            </div>\n            <div class=\"content\">Yeah, I, too, wondered where Les got 2.5; he must have subtracted for kooks first.\n\n\"I resemble that remark.\"\n\n\"No I don't.\"\n\n\"Yes, I do.\"\n\n\"No, I don't.\"\n\n\"...\"</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084588\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.ensight.org\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=490d926d48cdd8ab8349fe6206c02da4&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.ensight.org\">Jeremy C. Wright</a>\n                </div>\n                <a href=\"#comment-221084588\" class=\"permalink\"><time datetime=\"2004-07-27T19:45:28\">2004-07-27T19:45:28</time></a>\n            </div>\n            <div class=\"content\">I've had some thoughts on this over the last year and a bit of blogging.\n\nWhy Blog? http://www.ensight.org/archives/2004/04/25/why_blog_zat_is_ze_qwestion.html\nBlogging Plateaus: http://www.ensight.org/archives/2003/12/08/blogging_pressure.html\n\nFeel free to erase this comment, I couldn't quickly find your email to just email this to you.</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084591\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://weblogs.asp.net/jtobler/\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=2feb06e9f49404f568ea00547a8ac5d5&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://weblogs.asp.net/jtobler/\">John Tobler</a>\n                </div>\n                <a href=\"#comment-221084591\" class=\"permalink\"><time datetime=\"2004-08-14T08:37:12\">2004-08-14T08:37:12</time></a>\n            </div>\n            <div class=\"content\">Some time ago, your blog caught my attention -- one out of thousands -- and I added it to my rather large blogroll.  My blogroll is one way I try to tap into the flow from that open ten inch informational water main we are supposed to take our sips from, these days.  \n\nThere was something different and significant in your choices of material and your presentation of technical ideas.  Actually, I put your blog on my top level and looked forward to your new material.  I admit to wondering what was up with you, because I have noticed the obvious dropoff in your posts. So, I do want to let you know that your contributions to the technical blogging aether have at least influenced one senior software architect.\n\nBlogging, to me, is an opportunity for which a great many people in the past would have given an arm or leg.  To be able to self-publish?  Not to have to wait in line only to be told that your thoughts are not \"commercially acceptable at this time?\"  No incompetent editors or rejection slips?  No censors?  Hmmmmmm.  What is that worth to an active, creative mind?\n\nAs with any art, the deepest problems come in finding something of worth to say.  Craft without content, technique without point, writing without meaning, playing sounds without feeling the music, blogging without inspiration -- these dull both the art and the creator.\n\nWhen you have nothing to say, don't blog.  Write or read or think in private to explore the endless well of ideas that will teach you what you, uniquely, should -- and will want to -- communicate.  If blogging is not an art that helps you achieve meaningful contact with other fellow humans, then I suggest finding another art that will.  We humans have a great many arts from which to choose!\n\nDefinitely, do not feel imposed upon to blog.  This is one possible method to change input into output, adding the value of your mind, heart, and soul in the process.\n\nMy final advice comes from Zen:\n\n\"When hungry, eat; when blungry, blog!\"\n\n\n\nPS  Now that you have inspired me to think through this, I'm going to post my answer on my own blog (http://weblogs.asp.net/jtobler/archive/2004/08/14/214728.aspx).  See?  Uour blogging does affect someone.\n\nThanks!</div>\n            \n        </li>\n    \n        <li class=\"comment\" id=\"comment-221084595\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://www.livejournal.com/users/marnina/635.html\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=a12247c13048526fcbb21a599f9ce945&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://www.livejournal.com/users/marnina/635.html\">Marnina</a>\n                </div>\n                <a href=\"#comment-221084595\" class=\"permalink\"><time datetime=\"2004-08-28T18:52:00\">2004-08-28T18:52:00</time></a>\n            </div>\n            <div class=\"content\">Thanks for the centipede story. I took it off your site and used it in an entry on moral philosophy I made this morning.\n\nhttp://www.livejournal.com/users/marnina/635.html</div>\n            \n        </li>\n    \n        </ul>\n    \n        </div>\n    ",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/07/15/dork-funk"
  },
  {
    "comments_archived": true,
    "date": "2004-07-06T21:05:45.000Z",
    "excerpt": "This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts one and two.",
    "layout": "post",
    "tags": [
      "hacks",
      "xml"
    ],
    "title": "Wish-of-the-Month Club, Part 3 of 3",
    "wordpress_id": 532,
    "wordpress_slug": "wishofthemonthclub3",
    "wordpress_url": "http://www.decafbad.com/blog/?p=532",
    "year": "2004",
    "month": "07",
    "day": "06",
    "isDir": false,
    "slug": "wishofthemonthclub3",
    "postName": "2004-07-06-wishofthemonthclub3",
    "html": "<p><i>This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">one</a> and <a href=\"http://www.decafbad.com/blog/2004/06/27/wishofthemonthclub2\">two</a>.</i></p>\n<h3 id=\"presenting-the-results\">Presenting the Results</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\"><code>wishes-ex5.xsl</code></a>: The fifth iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.html\"><code>wishes.html</code></a>: Sample output in HTML</li>\n</ul>\n<p>We&#39;ve finally gotten together all the bits of information we need--wishlists have been queried; random items have been selected; and a shopping cart has been prepared.  Now we just have to present the selections and a link to check out with the shopping cart.</p>\n<p>First, locate the following line toward the end of the stylesheet as we left it in the last section:</p>\n<pre><code>    &lt;xsl:copy-of select=&quot;$shopping_cart&quot; /&gt;</code></pre>\n<p>Delete this, and let&#39;s replace it by building some HTML:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart_purchase_url&quot; \n                  select=&quot;exsl:node-set($shopping_cart)//PurchaseUrl&quot; /&gt;\n\n    &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n      &lt;head&gt;&lt;title&gt;Wishlist Shopping Cart&lt;/title&gt;\\&lt;/head&gt;\n      &lt;body&gt;\n        &lt;p class=&quot;title&quot;&gt;\n          Here are your wishlist items\n          &lt;a href=&quot;{$shopping_cart_purchase_url}&quot;&gt;\n            &lt;img src=&quot;http://g-images.amazon.com/images/G/01/detail/shoppingcart-header-02.gif&quot; /&gt;\n          &lt;/a&gt; \n          items:\n        &lt;/p&gt;</code></pre>\n<p>We&#39;re using the <code>exsl:note-set</code> function again to access the contents of <code>$shopping_cart</code> with an XPath expression.  We pluck out the value of the <code>PurchaseUrl</code> in the shopping cart and place it in the variable <code>shopping_cart_purchase_url</code>.  Then, after a bit of HTML preamble, we borrow a shopping cart icon from Amazon itself to construct a link to which we can browse later to purchase the selected items.  This HTML is very simple so far; it&#39;s likely too simple, so eventually you may like to toss some CSS in here to improve the looks of things.  But, I&#39;ll leave that as an exercise for the reader.  </p>\n<p>Next, let&#39;s build a display of the items selected by iterating first through the wishlists:</p>\n<pre><code>        &lt;xsl:for-each select=&quot;exsl:node-set($random_products)/wishes:wishitem&quot;&gt;\n          &lt;div class=&quot;Detail&quot;&gt;\n\n            &lt;p class=&quot;wishlistLabel&quot;&gt;\n              &lt;xsl:value-of select=&quot;wishes:wishlist/@label&quot; /&gt;\n            &lt;/p&gt;</code></pre>\n<p>This begins a block for each wishlist, starting off with a paragraph containing the label we gave each wishlist.  Next, let&#39;s include a few details about the product chosen.  Again, all of the bits of data included for each product are described in the AWS documentation in the <em>Overview</em> under <em>Amazon Web Services Data Model</em>.  Checking that out, we can see that the data includes a URL to images of several sizes representing the product.  Let&#39;s include the medium-sized image as a link to the product&#39;s detail page:</p>\n<pre><code>            &lt;p class=&quot;Product&quot;&gt;\n              &lt;a href=&quot;{Details/@url}&quot;&gt;\n                &lt;img src=&quot;{Details/ImageUrlMedium}&quot; /&gt;\n              &lt;/a&gt;\n              &lt;br /&gt;</code></pre>\n<p>We can also include the product&#39;s name as a link:</p>\n<pre><code>              &lt;span class=&quot;ProductName&quot;&gt;\n                &lt;a href=&quot;{Details/@url}&quot;&gt;\n                  &lt;xsl:value-of select=&quot;Details/ProductName&quot; /&gt;\n                &lt;/a&gt;\n              &lt;/span&gt;\n              &lt;br /&gt;</code></pre>\n<p>And, it would be nice to provide a listing of people involved in creating the product (ie. the artists and/or authors):</p>\n<pre><code>          &lt;xsl:for-each select=&quot;./Details/Artists/Artist | \n                                ./Details/Authors/Author&quot;&gt;\n            &lt;span class=&quot;Author&quot;&gt;by &lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/span&gt;&lt;br /&gt;\n          &lt;/xsl:for-each&gt;</code></pre>\n<p>Note that here, the XPath selecting the data is just a bit more involved, since this information can be found in both <code>Artist</code> and <code>Author</code> elements.  In another case, we might care to make a distinction, but it really isn&#39;t all that important for this project.  The data model also provides an indication of from which catalog this product came, as well as its date of release.  Let&#39;s include that for good measure:</p>\n<pre><code>          (\n          &lt;xsl:value-of select=&quot;Details/Catalog&quot; /&gt; -\n          &lt;span class=&quot;ReleaseDate&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/ReleaseDate&quot; /&gt;\n          &lt;/span&gt;\n          )\n          &lt;br /&gt;\n        &lt;/p&gt;</code></pre>\n<p>Another thing that would be nice to know is how much this thing costs--we&#39;ve got this information provided in the XML data as well, so let&#39;s include it:</p>\n<pre><code>        &lt;p&gt;\n          &lt;span class=&quot;PriceLabel&quot;&gt;List Price:&lt;/span&gt; \n          &lt;span class=&quot;ListPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/ListPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n\n          &lt;span class=&quot;PriceLabel&quot;&gt;Our Price:&lt;/span&gt;\n          &lt;span class=&quot;OurPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/OurPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n\n          &lt;span class=&quot;PriceLabel&quot;&gt;Used Price:&lt;/span&gt; \n          &lt;span class=&quot;UsedPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/UsedPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n        &lt;/p&gt;</code></pre>\n<p>Something to note about these prices, too, is that although the used price is listed, the shopping cart will contain new items from Amazon&#39;s shelves.  You might want to compare these prices though, and make a change to the shopping cart when you get there, if a used item is acceptable.  (Another good reason for manual intervention in our Wish-of-the-Month club.)</p>\n<p>Oh yeah, and we should include one other bit of information:</p>\n<pre><code>        &lt;p&gt;(&lt;xsl:value-of select=&quot;Details/Availability&quot; /&gt;)&lt;/p&gt;</code></pre>\n<p>This tells us whether or not this item can actually be bought, at present.  Although we used this data earlier to try to filter out unavailable items, we should still display this information just in case we missed something.</p>\n<p>Finally, let&#39;s clean up and finish the HTML:</p>\n<pre><code>      &lt;/div&gt;\n    &lt;/xsl:for-each&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>Running this stylesheet (<a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\">wishes-ex5.xsl</a>) should give you a page that looks something like this in a browser:</p>\n<p><img src=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg\" alt=\"Wishlist HTML screenshot\"></p>\n<h3 id=\"scheduling-monthly-emails\">Scheduling Monthly Emails</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex6.xsl\"><code>wishes-ex6.xsl</code></a>: The sixth (and final) iteration of the stylesheet in development.</li>\n</ul>\n<p>That HTML we&#39;re producing is fine, but what we really want to do is get it delivered to us.  We could set up a scheduled run that would periodically generate a page for us to visit, but the whole point of this is laziness.  How about firing off an email with this content?  There are two things to help us with this: <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> shows us how to construct email messages with a variety of content types; and <a href=\"http://www.hmug.org/man/8/sendmail.html\" title=\"man: sendmail\"><code>sendmail</code></a> will let us send these messages out.  And then, with the help of <code>cron</code>, we can fire up this process every month.</p>\n<p>Along with producing XML, XSLT can also construct plain text output--which is just what we need to create MIME email messages.  <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> doesn&#39;t make for the most thrilling reading, but there are a few articles to be found that summarize things (such as <a href=\"http://www.abiglime.com/webmaster/articles/cgi/010698.htm\" title=\"How to encapsulate HTML in an email message\">this article</a> and <a href=\"http://www.wilsonweb.com/wmt5/html-email-multi.htm\" title=\"Sending HTML and Plain Text E-Mail Simultaneously\">this article</a>).   To make a long story short, a basic shell for an email message using MIME to include an HTML part and a plain text part looks something like this:</p>\n<pre><code>To: someone@example.org\nSubject: Some useful email subject\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=&quot;theBoundaryString&quot;\n\n--theBoundaryString\nContent-Type: text/plain\n\nSome plain text representation goes here...\n\n--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: &quot;http://www.decafbad.com/&quot;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n    &lt;p&gt;Some HTML representation goes here...&lt;/p&gt;\n&lt;/html&gt;\n\n--theBoundaryString--</code></pre>\n<p>I&#39;ve snuck in the idea of providing both an HTML version (which we&#39;ve already done) and a new plain text version.  Depending on your email program and your preferences, one type might be more useful than the other.  In any case, it&#39;s not all that hard to offer both here.  To start sending these email messages, though, we&#39;ll need an email address.  So, add that as an element in <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\">wishes.xml</a>:</p>\n<pre><code>&lt;wishes xmlns=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n  &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n  &lt;maxprice&gt;15.00&lt;/maxprice&gt;\n  &lt;associate&gt;0xdecafbad-20&lt;/associate&gt;\n  &lt;devtoken&gt;D8HVH869XA0NP&lt;/devtoken&gt;\n  &lt;wishlists&gt;\n    &lt;wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishlist&gt;\n    &lt;wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishlist&gt;\n  &lt;/wishlists&gt;\n&lt;/wishes&gt;</code></pre>\n<p>Let&#39;s extract this data into a global variable near the start of the stylesheet:</p>\n<pre><code>  &lt;xsl:variable name=&quot;email_to&quot;  select=&quot;/wishes:wishes/wishes:email&quot; /&gt;</code></pre>\n<p>Start editing the final template of the stylesheet, inserting before the start of HTML content:</p>\n<pre><code>    &lt;!-- Eat all the line breaks generated so far --&gt;\n    &lt;xsl:text&gt;To: &lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;$email_to&quot; /&gt;   \nSubject: 0xDECAFBAD&#39;s Amazon Wish-of-the-Month Club\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=&quot;theBoundaryString&quot;</code></pre>\n<p>This is the header for the email.  Up until now, we&#39;ve been generating XML with the stylesheet and haven&#39;t cared very much about any extra whitespace or line breaks which might sneak into the output.  However, in an email header, whitespace is important since a blank line is what&#39;s used to separate the headers from the body of the email message.  So, any stray blank lines will cause what we might have meant to be headers to be interpreted as part of the message instead.  Producing the first header in the email with <code>xsl:text</code> tags causes the XSL processor to throw away any leading whitespace which would have appeared before the first header.</p>\n<p>Other than this little twist, the email header looks pretty much like the shell.  We fill in the <code>To</code> address from the global variable <code>$email_to</code> and define a <code>Subject</code> line.  The <code>MIME-Version</code> and <code>Content-Type</code> headers are what enable us to include both text and HTML versions in one email.</p>\n<p>Now we can start into one of the parts:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/plain</code></pre>\n<p>This begins the plain text section of the email, using the <em>boundary string</em> as defined in the headers to delinieate the section&#39;s beginning.  The section can also have its own set of headers, of which we use only one: <code>Content-Type</code>.  Moving along, let&#39;s work on the text content itself.</p>\n<pre><code>Here are your wishlist items:\n\n&lt;xsl:value-of select=&quot;$shopping_cart_purchase_url&quot; /&gt;&lt;xsl:text&gt;\n&lt;/xsl:text&gt;</code></pre>\n<p>No shopping cart image here, but this includes the human-viewable URL which leads to a shopping cart on Amazon.com.  The usage of <code>xsl:text</code> here forces a line break where there otherwise wouldn&#39;t have been one with the usage of <code>xsl:value-of</code>.  Now, let&#39;s iterate through each of the wishlists and list out the product details:</p>\n<pre><code>&lt;xsl:for-each select=&quot;exsl:node-set($random_products)/wishes:wishitem&quot;&gt;\n---------------------------------------------------------------------------\n&lt;xsl:value-of select=&quot;wishes:wishlist/@label&quot; \n       disable-output-escaping=&quot;yes&quot; /&gt;\n---------------------------------------------------------------------------\n\n&lt;xsl:value-of select=&quot;Details/ProductName&quot; \n       disable-output-escaping=&quot;yes&quot; /&gt;\n\n&lt;xsl:for-each select=&quot;./Details/Artists/Artist | \n                      ./Details/Authors/Author&quot;&gt;\nby &lt;xsl:value-of select=&quot;.&quot;  \n   disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;/xsl:for-each&gt;\n\nCatalog:      &lt;xsl:value-of select=&quot;Details/Catalog&quot; \n   disable-output-escaping=&quot;yes&quot; /&gt;\nReleased:     &lt;xsl:value-of select=&quot;Details/ReleaseDate&quot; \n   disable-output-escaping=&quot;yes&quot; /&gt;\n\nList Price:   &lt;xsl:value-of select=&quot;Details/ListPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \nOur  Price:   &lt;xsl:value-of select=&quot;Details/UsedPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \nUsed Price:   &lt;xsl:value-of select=&quot;Details/OurPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \n\nAvailability: &lt;xsl:value-of select=&quot;Details/Availability&quot;  \n       disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;xsl:text&gt;\n\n&lt;/xsl:text&gt;\n&lt;xsl:value-of select=&quot;Details/@url&quot;  \n       disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n\n&lt;/xsl:for-each&gt;</code></pre>\n<p>Most everything in this stretch should look very similar to the HTML version we just finished.  The biggest difference is that every bit of information pulled in using <code>xsl:value-of</code> is done using the <code>disable-output-escaping</code> option.  When this is <code>yes</code>, things like ampersands are no longer escaped for valid XML output.  Since this bit of the email is plain text, we don&#39;t want to see <code>&amp;amp;</code> in album titles, so this will cause ampersands to appear unmolested.</p>\n<p>That&#39;s the plain text version finished.  Now let&#39;s create the HTML version:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: &quot;http://www.decafbad.com/2004/05/wishes&quot;</code></pre>\n<p>The boundary string appears again, signifying the end of the plain text section and the start of the HTML section.  Headers appear here which specify that what follows is HTML; that it&#39;s encoded in 7-bit characters; that it should be included in the message display itself (rather than presented as an attachment to be saved); and that all relative URLs which might appear in the HTML should be treated as having a base URL as specified.  This last part allows HTML in email to refer to images and other pages on another site without making all the URLs absolute.</p>\n<p>We don&#39;t need to make any modifications to the HTML as we built it in the last iteration of the stylesheet, so we can just include it unchanged:</p>\n<pre><code>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n...\n&lt;/html&gt;\n\n--theBoundaryString--</code></pre>\n<p>This final appearance of the boundary string is bracketed on both sides by dashes, which indicates the end of the final section of the document.  We should be ready to try this in combination with <code>sendmail</code> in a shell:</p>\n<pre><code>$ xsltproc wishes-ex6.xsl wishes.xml | sendmail -it</code></pre>\n<p>If everything has worked correctly, there should be an email arriving in your mailbox sometime soon.  (Or in my inbox, if you followed the directions literally and didn&#39;t supply your own email address.)  The options supplied to <code>sendmail</code> are fairly basic: </p>\n<ul>\n<li><code>-i</code> causes lines consisting solely of <code>.</code> <em>not</em> to be treated as an end-of-input signal.</li>\n<li><code>-t</code> causes <code>sendmail</code> to look in the message headers (ie. <code>To:</code>) for a list of recipients.</li>\n</ul>\n<p>If you don&#39;t happen to have have <code>sendmail</code> available, you might want to look into what local mail programs you have available which can accept the output from the stylesheet.</p>\n<p>Once you have this working, the final task is to schedule its monthly execution with your local <code>cron</code> installation.  If you haven&#39;t played with <code>cron</code> before, there are many resources and tutorials available (<a href=\"http://www.lysator.liu.se/~forsberg/linux/cron.html\" title=\"Doing things periodically - Using CRON\">here&#39;s one</a> and <a href=\"http://www.itworld.com/Comp/2378/swol-0825-unix101/\" title=\"Using cron basics\">here&#39;s another</a>).  You should add something like the following to your user account&#39;s <code>crontab</code>:</p>\n<pre><code>0 0 * 1 *  (cd /your/working/path; xsltproc wishes.xsl wishes.xml | sendmail -it)</code></pre>\n<p>The &quot;<code>0 0 * 1 *</code>&quot; indicates to <code>cron</code> that this set of commands should be run at midnight on the first of every months.  Note also that <code>/your/working/path</code> should be replaced by the path to where you&#39;ve been working during this project.  And finally, I&#39;ve renamed the final iteration of the stylesheet file to simply <code>wishes.xsl</code>.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>So that&#39;s it--we have an XSL stylesheet which queries Amazon Web Services for products contained in multiple wishlists; selects a random item from each; prepares a shopping cart containing those items; and finally generates an email message containing both plain text and HTML presentations of the shopping cart and selected items.</p>\n<p>Though this implementation serves the purpose I wrote about at the start of this article, there are definitely many areas where this can be improved upon or expanded:</p>\n<ul>\n<li><p>Many people think Amazon is an evil company for their use of patents.  I can&#39;t say that I&#39;m entirely happy with them for this myself, but their AWS offering is just too nice to resist tinkering with.  It might be interesting to investigate other retailers&#39; wishlist offerings, where they exist, and to see how this idea might be made to work with other (or even multiple) retailers.  Even better, come up with your own wishlist system, and a cross-retailer shopping cart.</p>\n</li>\n<li><p>I chose XSLT as the implementation technology because I thought it would be more natural to deal with Amazon&#39;s XML this way.  There are, admittedly, a few awkward parts in the resulting stylesheet however.  Sometimes it&#39;s good to see a project like this through, just to get a sense for where things do go awkward with a technology or my understanding of it.  It could be interesting to transliterate this into a scripting language like Python or Perl, perhaps using the <a href=\"http://xmlsoft.org/python.html\">libxml bindings</a> to do so.</p>\n</li>\n<li><p>The error and failure handling in this implementation are all but non-existent.  Should anything unexpected happen while dealing with Amazon Web Services, the results aren&#39;t likely to be very pretty.  You may want to consider improving in this area.  One instance I identified was to report when the sanity limit was hit in looping through wishlist pages, versus an actual end of pages.</p>\n</li>\n<li><p>If you play around with making more wishlist queries using the techniques here, you might want to consider caching the full set of data pulled in by the multiple-page calls to AWS, in order to prevent hammering Amazon&#39;s servers with repeated requests for the same data, likely unchanged.</p>\n</li>\n<li><p>I still don&#39;t know why <code>exsl:random</code> doesn&#39;t work for me.  Although I thought using a web service for random numbers was intereting, it would be very nice if I didn&#39;t have to use it.</p>\n</li>\n<li><p>The HTML presentation could certainly use some good CSS to make it more attractive.</p>\n</li>\n</ul>\n<p>Feel free to send me any suggestions, criticisms, or complaints related to this article!</p>\n<!--more-->\n<p>shortname=wishofthemonthclub3</p>\n",
    "body": "<i>This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts [one][part1] and [two][part2].</i>\r\n\r\n### Presenting the Results\r\n\r\nSome ready-made files are available for this section:\r\n* [`wishes-ex5.xsl`][wishes-ex5.xsl]: The fifth iteration of the stylesheet in development.\r\n* [`wishes.html`][wishes.html]: Sample output in HTML\r\n\r\nWe've finally gotten together all the bits of information we need--wishlists have been queried; random items have been selected; and a shopping cart has been prepared.  Now we just have to present the selections and a link to check out with the shopping cart.\r\n\r\nFirst, locate the following line toward the end of the stylesheet as we left it in the last section:\r\n\r\n        <xsl:copy-of select=\"$shopping_cart\" />\r\n\r\nDelete this, and let's replace it by building some HTML:\r\n\r\n        <xsl:variable name=\"shopping_cart_purchase_url\" \r\n                      select=\"exsl:node-set($shopping_cart)//PurchaseUrl\" />\r\n        \r\n        <html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n          <head><title>Wishlist Shopping Cart</title>\\</head>\r\n          <body>\r\n            <p class=\"title\">\r\n              Here are your wishlist items\r\n              <a href=\"{$shopping_cart_purchase_url}\">\r\n                <img src=\"http://g-images.amazon.com/images/G/01/detail/shoppingcart-header-02.gif\" />\r\n              </a> \r\n              items:\r\n            </p>\r\n\r\nWe're using the `exsl:note-set` function again to access the contents of `$shopping_cart` with an XPath expression.  We pluck out the value of the `PurchaseUrl` in the shopping cart and place it in the variable `shopping_cart_purchase_url`.  Then, after a bit of HTML preamble, we borrow a shopping cart icon from Amazon itself to construct a link to which we can browse later to purchase the selected items.  This HTML is very simple so far; it's likely too simple, so eventually you may like to toss some CSS in here to improve the looks of things.  But, I'll leave that as an exercise for the reader.  \r\n\r\nNext, let's build a display of the items selected by iterating first through the wishlists:\r\n        \r\n            <xsl:for-each select=\"exsl:node-set($random_products)/wishes:wishitem\">\r\n              <div class=\"Detail\">\r\n\r\n                <p class=\"wishlistLabel\">\r\n                  <xsl:value-of select=\"wishes:wishlist/@label\" />\r\n                </p>\r\n\r\nThis begins a block for each wishlist, starting off with a paragraph containing the label we gave each wishlist.  Next, let's include a few details about the product chosen.  Again, all of the bits of data included for each product are described in the AWS documentation in the *Overview* under *Amazon Web Services Data Model*.  Checking that out, we can see that the data includes a URL to images of several sizes representing the product.  Let's include the medium-sized image as a link to the product's detail page:\r\n\r\n                <p class=\"Product\">\r\n                  <a href=\"{Details/@url}\">\r\n                    <img src=\"{Details/ImageUrlMedium}\" />\r\n                  </a>\r\n                  <br />\r\n\r\nWe can also include the product's name as a link:\r\n\r\n                  <span class=\"ProductName\">\r\n                    <a href=\"{Details/@url}\">\r\n                      <xsl:value-of select=\"Details/ProductName\" />\r\n                    </a>\r\n                  </span>\r\n                  <br />\r\n\r\nAnd, it would be nice to provide a listing of people involved in creating the product (ie. the artists and/or authors):\r\n\r\n              <xsl:for-each select=\"./Details/Artists/Artist | \r\n                                    ./Details/Authors/Author\">\r\n                <span class=\"Author\">by <xsl:value-of select=\".\" /></span><br />\r\n              </xsl:for-each>\r\n\r\nNote that here, the XPath selecting the data is just a bit more involved, since this information can be found in both `Artist` and `Author` elements.  In another case, we might care to make a distinction, but it really isn't all that important for this project.  The data model also provides an indication of from which catalog this product came, as well as its date of release.  Let's include that for good measure:\r\n              \r\n              (\r\n              <xsl:value-of select=\"Details/Catalog\" /> -\r\n              <span class=\"ReleaseDate\">\r\n                <xsl:value-of select=\"Details/ReleaseDate\" />\r\n              </span>\r\n              )\r\n              <br />\r\n            </p>\r\n\r\nAnother thing that would be nice to know is how much this thing costs--we've got this information provided in the XML data as well, so let's include it:\r\n            \r\n            <p>\r\n              <span class=\"PriceLabel\">List Price:</span> \r\n              <span class=\"ListPrice\">\r\n                <xsl:value-of select=\"Details/ListPrice\" />\r\n              </span>\r\n              <br />\r\n              \r\n              <span class=\"PriceLabel\">Our Price:</span>\r\n              <span class=\"OurPrice\">\r\n                <xsl:value-of select=\"Details/OurPrice\" />\r\n              </span>\r\n              <br />\r\n\r\n              <span class=\"PriceLabel\">Used Price:</span> \r\n              <span class=\"UsedPrice\">\r\n                <xsl:value-of select=\"Details/UsedPrice\" />\r\n              </span>\r\n              <br />\r\n            </p>\r\n\r\nSomething to note about these prices, too, is that although the used price is listed, the shopping cart will contain new items from Amazon's shelves.  You might want to compare these prices though, and make a change to the shopping cart when you get there, if a used item is acceptable.  (Another good reason for manual intervention in our Wish-of-the-Month club.)\r\n\r\nOh yeah, and we should include one other bit of information:\r\n            \r\n            <p>(<xsl:value-of select=\"Details/Availability\" />)</p>\r\n\r\nThis tells us whether or not this item can actually be bought, at present.  Although we used this data earlier to try to filter out unavailable items, we should still display this information just in case we missed something.\r\n\r\nFinally, let's clean up and finish the HTML:\r\n            \r\n          </div>\r\n        </xsl:for-each>\r\n        \r\n      </body>\r\n    </html>\r\n\r\nRunning this stylesheet ([wishes-ex5.xsl][wishes-ex5.xsl]) should give you a page that looks something like this in a browser:\r\n\r\n![Wishlist HTML screenshot][wishes_html_screenshot]\r\n\r\n### Scheduling Monthly Emails\r\n\r\nSome ready-made files are available for this section:\r\n* [`wishes-ex6.xsl`][wishes-ex6.xsl]: The sixth (and final) iteration of the stylesheet in development.\r\n\r\nThat HTML we're producing is fine, but what we really want to do is get it delivered to us.  We could set up a scheduled run that would periodically generate a page for us to visit, but the whole point of this is laziness.  How about firing off an email with this content?  There are two things to help us with this: [RFC 1521][rfc1521] shows us how to construct email messages with a variety of content types; and [`sendmail`][man_sendmail] will let us send these messages out.  And then, with the help of `cron`, we can fire up this process every month.\r\n\r\nAlong with producing XML, XSLT can also construct plain text output--which is just what we need to create MIME email messages.  [RFC 1521][rfc1521] doesn't make for the most thrilling reading, but there are a few articles to be found that summarize things (such as [this article][email_mime_and_html] and [this article][email_html_and_text]).   To make a long story short, a basic shell for an email message using MIME to include an HTML part and a plain text part looks something like this:\r\n\r\n    To: someone@example.org\r\n    Subject: Some useful email subject\r\n    MIME-Version: 1.0\r\n    Content-Type: multipart/alternative; boundary=\"theBoundaryString\"\r\n\r\n    --theBoundaryString\r\n    Content-Type: text/plain\r\n\r\n    Some plain text representation goes here...\r\n\r\n    --theBoundaryString\r\n    Content-Type: text/html\r\n    Content-Transfer-Encoding: 7bit\r\n    Content-Disposition: inline\r\n    Content-Base: \"http://www.decafbad.com/\"\r\n\r\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n        <p>Some HTML representation goes here...</p>\r\n    </html>\r\n\r\n    --theBoundaryString--\r\n\r\nI've snuck in the idea of providing both an HTML version (which we've already done) and a new plain text version.  Depending on your email program and your preferences, one type might be more useful than the other.  In any case, it's not all that hard to offer both here.  To start sending these email messages, though, we'll need an email address.  So, add that as an element in [wishes.xml][wishes.xml]:\r\n\r\n    <wishes xmlns=\"http://www.decafbad.com/2004/05/wishes\">\r\n      <email>deus_x@pobox.com</email>\r\n      <maxprice>15.00</maxprice>\r\n      <associate>0xdecafbad-20</associate>\r\n      <devtoken>D8HVH869XA0NP</devtoken>\r\n      <wishlists>\r\n        <wishlist label=\"Me\">1QWYI6P2JF3Q5</wishlist>\r\n        <wishlist label=\"The Girl\">35OIOYWQ9XQAE</wishlist>\r\n      </wishlists>\r\n    </wishes>\r\n\r\nLet's extract this data into a global variable near the start of the stylesheet:\r\n\r\n      <xsl:variable name=\"email_to\"  select=\"/wishes:wishes/wishes:email\" />\r\n\r\nStart editing the final template of the stylesheet, inserting before the start of HTML content:\r\n\r\n        <!-- Eat all the line breaks generated so far -->\r\n        <xsl:text>To: </xsl:text><xsl:value-of select=\"$email_to\" />   \r\n    Subject: 0xDECAFBAD's Amazon Wish-of-the-Month Club\r\n    MIME-Version: 1.0\r\n    Content-Type: multipart/alternative; boundary=\"theBoundaryString\"\r\n\r\nThis is the header for the email.  Up until now, we've been generating XML with the stylesheet and haven't cared very much about any extra whitespace or line breaks which might sneak into the output.  However, in an email header, whitespace is important since a blank line is what's used to separate the headers from the body of the email message.  So, any stray blank lines will cause what we might have meant to be headers to be interpreted as part of the message instead.  Producing the first header in the email with `xsl:text` tags causes the XSL processor to throw away any leading whitespace which would have appeared before the first header.\r\n\r\nOther than this little twist, the email header looks pretty much like the shell.  We fill in the `To` address from the global variable `$email_to` and define a `Subject` line.  The `MIME-Version` and `Content-Type` headers are what enable us to include both text and HTML versions in one email.\r\n\r\nNow we can start into one of the parts:\r\n\r\n    --theBoundaryString\r\n    Content-Type: text/plain\r\n\r\nThis begins the plain text section of the email, using the *boundary string* as defined in the headers to delinieate the section's beginning.  The section can also have its own set of headers, of which we use only one: `Content-Type`.  Moving along, let's work on the text content itself.\r\n\r\n    Here are your wishlist items:\r\n\r\n    <xsl:value-of select=\"$shopping_cart_purchase_url\" /><xsl:text>\r\n    </xsl:text>\r\n\r\nNo shopping cart image here, but this includes the human-viewable URL which leads to a shopping cart on Amazon.com.  The usage of `xsl:text` here forces a line break where there otherwise wouldn't have been one with the usage of `xsl:value-of`.  Now, let's iterate through each of the wishlists and list out the product details:\r\n\r\n    <xsl:for-each select=\"exsl:node-set($random_products)/wishes:wishitem\">\r\n    ---------------------------------------------------------------------------\r\n    <xsl:value-of select=\"wishes:wishlist/@label\" \r\n           disable-output-escaping=\"yes\" />\r\n    ---------------------------------------------------------------------------\r\n\r\n    <xsl:value-of select=\"Details/ProductName\" \r\n           disable-output-escaping=\"yes\" />\r\n\r\n    <xsl:for-each select=\"./Details/Artists/Artist | \r\n                          ./Details/Authors/Author\">\r\n    by <xsl:value-of select=\".\"  \r\n       disable-output-escaping=\"yes\"/>\r\n    </xsl:for-each>\r\n\r\n    Catalog:      <xsl:value-of select=\"Details/Catalog\" \r\n       disable-output-escaping=\"yes\" />\r\n    Released:     <xsl:value-of select=\"Details/ReleaseDate\" \r\n       disable-output-escaping=\"yes\" />\r\n\r\n    List Price:   <xsl:value-of select=\"Details/ListPrice\"  \r\n         disable-output-escaping=\"yes\"/> \r\n    Our  Price:   <xsl:value-of select=\"Details/UsedPrice\"  \r\n         disable-output-escaping=\"yes\"/> \r\n    Used Price:   <xsl:value-of select=\"Details/OurPrice\"  \r\n         disable-output-escaping=\"yes\"/> \r\n            \r\n    Availability: <xsl:value-of select=\"Details/Availability\"  \r\n           disable-output-escaping=\"yes\"/>\r\n    <xsl:text>\r\n\r\n    </xsl:text>\r\n    <xsl:value-of select=\"Details/@url\"  \r\n           disable-output-escaping=\"yes\"/>\r\n    <xsl:text>\r\n    </xsl:text>\r\n\r\n    </xsl:for-each>\r\n\r\nMost everything in this stretch should look very similar to the HTML version we just finished.  The biggest difference is that every bit of information pulled in using `xsl:value-of` is done using the `disable-output-escaping` option.  When this is `yes`, things like ampersands are no longer escaped for valid XML output.  Since this bit of the email is plain text, we don't want to see `&amp;` in album titles, so this will cause ampersands to appear unmolested.\r\n\r\nThat's the plain text version finished.  Now let's create the HTML version:\r\n\r\n    --theBoundaryString\r\n    Content-Type: text/html\r\n    Content-Transfer-Encoding: 7bit\r\n    Content-Disposition: inline\r\n    Content-Base: \"http://www.decafbad.com/2004/05/wishes\"\r\n\r\nThe boundary string appears again, signifying the end of the plain text section and the start of the HTML section.  Headers appear here which specify that what follows is HTML; that it's encoded in 7-bit characters; that it should be included in the message display itself (rather than presented as an attachment to be saved); and that all relative URLs which might appear in the HTML should be treated as having a base URL as specified.  This last part allows HTML in email to refer to images and other pages on another site without making all the URLs absolute.\r\n\r\nWe don't need to make any modifications to the HTML as we built it in the last iteration of the stylesheet, so we can just include it unchanged:\r\n\r\n    <html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n    ...\r\n    </html>\r\n\r\n    --theBoundaryString--\r\n    \r\nThis final appearance of the boundary string is bracketed on both sides by dashes, which indicates the end of the final section of the document.  We should be ready to try this in combination with `sendmail` in a shell:\r\n\r\n    $ xsltproc wishes-ex6.xsl wishes.xml | sendmail -it\r\n\r\nIf everything has worked correctly, there should be an email arriving in your mailbox sometime soon.  (Or in my inbox, if you followed the directions literally and didn't supply your own email address.)  The options supplied to `sendmail` are fairly basic: \r\n\r\n* `-i` causes lines consisting solely of `.` *not* to be treated as an end-of-input signal.\r\n* `-t` causes `sendmail` to look in the message headers (ie. `To:`) for a list of recipients.\r\n\r\nIf you don't happen to have have `sendmail` available, you might want to look into what local mail programs you have available which can accept the output from the stylesheet.\r\n\r\nOnce you have this working, the final task is to schedule its monthly execution with your local `cron` installation.  If you haven't played with `cron` before, there are many resources and tutorials available ([here's one][cron1] and [here's another][cron2]).  You should add something like the following to your user account's `crontab`:\r\n\r\n    0 0 * 1 *  (cd /your/working/path; xsltproc wishes.xsl wishes.xml | sendmail -it)\r\n\r\nThe \"`0 0 * 1 *`\" indicates to `cron` that this set of commands should be run at midnight on the first of every months.  Note also that `/your/working/path` should be replaced by the path to where you've been working during this project.  And finally, I've renamed the final iteration of the stylesheet file to simply `wishes.xsl`.\r\n\r\n### Conclusion\r\n\r\nSo that's it--we have an XSL stylesheet which queries Amazon Web Services for products contained in multiple wishlists; selects a random item from each; prepares a shopping cart containing those items; and finally generates an email message containing both plain text and HTML presentations of the shopping cart and selected items.\r\n\r\nThough this implementation serves the purpose I wrote about at the start of this article, there are definitely many areas where this can be improved upon or expanded:\r\n\r\n* Many people think Amazon is an evil company for their use of patents.  I can't say that I'm entirely happy with them for this myself, but their AWS offering is just too nice to resist tinkering with.  It might be interesting to investigate other retailers' wishlist offerings, where they exist, and to see how this idea might be made to work with other (or even multiple) retailers.  Even better, come up with your own wishlist system, and a cross-retailer shopping cart.\r\n\r\n* I chose XSLT as the implementation technology because I thought it would be more natural to deal with Amazon's XML this way.  There are, admittedly, a few awkward parts in the resulting stylesheet however.  Sometimes it's good to see a project like this through, just to get a sense for where things do go awkward with a technology or my understanding of it.  It could be interesting to transliterate this into a scripting language like Python or Perl, perhaps using the [libxml bindings][python_libxml] to do so.\r\n\r\n* The error and failure handling in this implementation are all but non-existent.  Should anything unexpected happen while dealing with Amazon Web Services, the results aren't likely to be very pretty.  You may want to consider improving in this area.  One instance I identified was to report when the sanity limit was hit in looping through wishlist pages, versus an actual end of pages.\r\n\r\n* If you play around with making more wishlist queries using the techniques here, you might want to consider caching the full set of data pulled in by the multiple-page calls to AWS, in order to prevent hammering Amazon's servers with repeated requests for the same data, likely unchanged.\r\n\r\n* I still don't know why `exsl:random` doesn't work for me.  Although I thought using a web service for random numbers was intereting, it would be very nice if I didn't have to use it.\r\n\r\n* The HTML presentation could certainly use some good CSS to make it more attractive.\r\n\r\nFeel free to send me any suggestions, criticisms, or complaints related to this article!\r\n\r\n[missadroit]: http://missadroit.livejournal.com \"Miss Adroit, my favorite girl in the world\"\r\n[mywishlist]: http://www.amazon.com/exec/obidos/registry/1QWYI6P2JF3Q5 \"Buy me something, will ya?\"\r\n[herwishlist]: http://www.amazon.com/exec/obidos/registry/35OIOYWQ9XQAE \"Buy her something, will ya?\"\r\n[amazonapi]: http://www.amazon.com/gp/aws/landing.html \"Amazon Web Services\"\r\n[libxml]: http://www.xmlsoft.org/\r\n[xalan]: http://xml.apache.org/xalan-j/\r\n[sablotron]: http://www.gingerall.com/charlie/ga/xml/p_sab.xml\r\n[saxon]: http://saxon.sourceforge.net/\r\n[exslt]: http://www.exslt.org/\r\n[libxslt]: http://www.xmlsoft.org/XSLT.html\r\n[spideringhacks]: http://www.amazon.com/exec/obidos/ASIN/0596005776/0xdecafbad-20 \"O'Reilly's Spidering Hacks\"\r\n[xslscraper]: http://www.decafbad.com/twiki/bin/view/Main/XslScraper \"Scrape RSS and Atom from HTML using Tidy and XSLT\"\r\n[awsdownload]: http://www.amazon.com/gp/browse.html/ref=sc_fe_c_2/002-7899886-3676027?%5Fencoding=UTF8&#38;node=3434641&#38;no=3435361&#38;me=A36L942TSJ2AJA\r\n[awstoken]: https://associates.amazon.com/exec/panama/associates/join/developer/application.html\r\n[amazonassociate]: http://associates.amazon.com\r\n[wlsearch]: http://www.amazon.com/gp/registry/search.html/002-7899886-3676027?%5Fencoding=UTF8&#38;type=wishlist\r\n[wlurl]: http://xml.amazon.com/onca/xml3?t=0xdecafbad-20&#38;dev-t=D8HVH869XA0NP&#38;type=lite&#38;WishlistSearch=35OIOYWQ9XQAE&#38;f=xml\r\n[detailsurl]: http://www.amazon.com/exec/obidos/ASIN/0262133601/0xdecafbad-20?dev-t=D8HVH869XA0NP%26camp=2025%26link_code=xm2\r\n[awslite]: http://xml.amazon.com/schemas3/dev-lite.xsd\r\n[fink]: http://fink.sourceforge.net\r\n[testxslt]: http://www.entropy.ch:16080/software/macosx/#testxslt\r\n[darwinports]: http://darwinports.opendarwin.org/\r\n[curl]: http://www.decafbad.com/#TODO\r\n[wget]: http://www.decafbad.com/#TODO\r\n[xpconcat]: http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-concat\r\n[xpdocument]: http://www.w3.org/TR/2002/WD-xquery-operators-20020816/#func-document\r\n[wishescvs]: http://www.decafbad.com/cvs/hacks/wishes/\r\n[wishes.tar.gz]: http://www.decafbad.com/cvs/hacks/wishes/wishes.tar.gz?tarball=1 \"All Wish-of-the-Month Club files wrapped up in a tarball\"\r\n[wishes.xml]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\r\n[wishes.html]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.html\r\n[wishes-ex1.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex1.xsl\r\n[wishes-ex2.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex2.xsl\r\n[wishes-ex3.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex3.xsl\r\n[wishes-ex4.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex4.xsl\r\n[wishes-ex5.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\r\n[wishes-ex6.xsl]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex6.xsl\r\n[random-xml]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/random-xml\r\n[wishes_html_screenshot]: http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg\r\n[xslt_iteration]: http://www.dpawson.co.uk/xsl/sect2/N4806.html \"Iteration in XSLT\"\r\n[xslt_recursion]: http://www-106.ibm.com/developerworks/xml/library/x-xslrecur/ \"Use recursion effectively in XSL\"\r\n[exsl_random]: http://www.exslt.org/math/functions/random/index.html\r\n[exsl_node_set]: http://www.exslt.org/exsl/functions/node-set/index.html\r\n[rand_url]: http://www.decafbad.com/2004/05/random-xml?int=1&#38;min=10&#38;max=20 \"A random integer between 10 and 20, in XML\"\r\n[xslt_result_tree_fragment]: http://www.w3.org/TR/xslt#section-Result-Tree-Fragments\r\n\r\n[email_attach_anatomy]: http://www.dpo.uab.edu/Email/attach.html \"Anatomy of an Email Attachment\"\r\n[email_mime_and_html]: http://www.abiglime.com/webmaster/articles/cgi/010698.htm \"How to encapsulate HTML in an email message\"\r\n\r\n[email_html_and_text]: http://www.wilsonweb.com/wmt5/html-email-multi.htm \"Sending HTML and Plain Text E-Mail Simultaneously\"\r\n[man_sendmail]: http://www.hmug.org/man/8/sendmail.html \"man: sendmail\"\r\n[rfc1521]: http://www.faqs.org/rfcs/rfc1521.html \"RFC 1521\"\r\n[cron1]: http://www.lysator.liu.se/~forsberg/linux/cron.html \"Doing things periodically - Using CRON\"\r\n[cron2]: http://www.itworld.com/Comp/2378/swol-0825-unix101/ \"Using cron basics\"\r\n[python_libxml]: http://xmlsoft.org/python.html \r\n[part2]: http://www.decafbad.com/blog/2004/06/27/wishofthemonthclub2\r\n[part1]: http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\r\n<!--more-->\r\nshortname=wishofthemonthclub3\r\n",
    "parentPath": "../blog.lmorchard.com/posts/archives/2004",
    "path": "2004/07/06/wishofthemonthclub3",
    "thumbnail": "http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg",
    "summary": "<p><i>This is the exciting conclusion of the Wish-of-the-Month Club.  Before continuing on, you may want to catch up with parts <a href=\"http://www.decafbad.com/blog/2004/06/16/wishofthemonthclub1\">one</a> and <a href=\"http://www.decafbad.com/blog/2004/06/27/wishofthemonthclub2\">two</a>.</i></p>\n<h3 id=\"presenting-the-results\">Presenting the Results</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\"><code>wishes-ex5.xsl</code></a>: The fifth iteration of the stylesheet in development.</li>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.html\"><code>wishes.html</code></a>: Sample output in HTML</li>\n</ul>\n<p>We&apos;ve finally gotten together all the bits of information we need--wishlists have been queried; random items have been selected; and a shopping cart has been prepared.  Now we just have to present the selections and a link to check out with the shopping cart.</p>\n<p>First, locate the following line toward the end of the stylesheet as we left it in the last section:</p>\n<pre><code>    &lt;xsl:copy-of select=&quot;$shopping_cart&quot; /&gt;</code></pre>\n<p>Delete this, and let&apos;s replace it by building some HTML:</p>\n<pre><code>    &lt;xsl:variable name=&quot;shopping_cart_purchase_url&quot; \n                  select=&quot;exsl:node-set($shopping_cart)//PurchaseUrl&quot; /&gt;\n\n    &lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n      &lt;head&gt;&lt;title&gt;Wishlist Shopping Cart&lt;/title&gt;\\&lt;/head&gt;\n      &lt;body&gt;\n        &lt;p class=&quot;title&quot;&gt;\n          Here are your wishlist items\n          &lt;a href=&quot;{$shopping_cart_purchase_url}&quot;&gt;\n            &lt;img src=&quot;http://g-images.amazon.com/images/G/01/detail/shoppingcart-header-02.gif&quot; /&gt;\n          &lt;/a&gt; \n          items:\n        &lt;/p&gt;</code></pre>\n<p>We&apos;re using the <code>exsl:note-set</code> function again to access the contents of <code>$shopping_cart</code> with an XPath expression.  We pluck out the value of the <code>PurchaseUrl</code> in the shopping cart and place it in the variable <code>shopping_cart_purchase_url</code>.  Then, after a bit of HTML preamble, we borrow a shopping cart icon from Amazon itself to construct a link to which we can browse later to purchase the selected items.  This HTML is very simple so far; it&apos;s likely too simple, so eventually you may like to toss some CSS in here to improve the looks of things.  But, I&apos;ll leave that as an exercise for the reader.  </p>\n<p>Next, let&apos;s build a display of the items selected by iterating first through the wishlists:</p>\n<pre><code>        &lt;xsl:for-each select=&quot;exsl:node-set($random_products)/wishes:wishitem&quot;&gt;\n          &lt;div class=&quot;Detail&quot;&gt;\n\n            &lt;p class=&quot;wishlistLabel&quot;&gt;\n              &lt;xsl:value-of select=&quot;wishes:wishlist/@label&quot; /&gt;\n            &lt;/p&gt;</code></pre>\n<p>This begins a block for each wishlist, starting off with a paragraph containing the label we gave each wishlist.  Next, let&apos;s include a few details about the product chosen.  Again, all of the bits of data included for each product are described in the AWS documentation in the <em>Overview</em> under <em>Amazon Web Services Data Model</em>.  Checking that out, we can see that the data includes a URL to images of several sizes representing the product.  Let&apos;s include the medium-sized image as a link to the product&apos;s detail page:</p>\n<pre><code>            &lt;p class=&quot;Product&quot;&gt;\n              &lt;a href=&quot;{Details/@url}&quot;&gt;\n                &lt;img src=&quot;{Details/ImageUrlMedium}&quot; /&gt;\n              &lt;/a&gt;\n              &lt;br /&gt;</code></pre>\n<p>We can also include the product&apos;s name as a link:</p>\n<pre><code>              &lt;span class=&quot;ProductName&quot;&gt;\n                &lt;a href=&quot;{Details/@url}&quot;&gt;\n                  &lt;xsl:value-of select=&quot;Details/ProductName&quot; /&gt;\n                &lt;/a&gt;\n              &lt;/span&gt;\n              &lt;br /&gt;</code></pre>\n<p>And, it would be nice to provide a listing of people involved in creating the product (ie. the artists and/or authors):</p>\n<pre><code>          &lt;xsl:for-each select=&quot;./Details/Artists/Artist | \n                                ./Details/Authors/Author&quot;&gt;\n            &lt;span class=&quot;Author&quot;&gt;by &lt;xsl:value-of select=&quot;.&quot; /&gt;&lt;/span&gt;&lt;br /&gt;\n          &lt;/xsl:for-each&gt;</code></pre>\n<p>Note that here, the XPath selecting the data is just a bit more involved, since this information can be found in both <code>Artist</code> and <code>Author</code> elements.  In another case, we might care to make a distinction, but it really isn&apos;t all that important for this project.  The data model also provides an indication of from which catalog this product came, as well as its date of release.  Let&apos;s include that for good measure:</p>\n<pre><code>          (\n          &lt;xsl:value-of select=&quot;Details/Catalog&quot; /&gt; -\n          &lt;span class=&quot;ReleaseDate&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/ReleaseDate&quot; /&gt;\n          &lt;/span&gt;\n          )\n          &lt;br /&gt;\n        &lt;/p&gt;</code></pre>\n<p>Another thing that would be nice to know is how much this thing costs--we&apos;ve got this information provided in the XML data as well, so let&apos;s include it:</p>\n<pre><code>        &lt;p&gt;\n          &lt;span class=&quot;PriceLabel&quot;&gt;List Price:&lt;/span&gt; \n          &lt;span class=&quot;ListPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/ListPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n\n          &lt;span class=&quot;PriceLabel&quot;&gt;Our Price:&lt;/span&gt;\n          &lt;span class=&quot;OurPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/OurPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n\n          &lt;span class=&quot;PriceLabel&quot;&gt;Used Price:&lt;/span&gt; \n          &lt;span class=&quot;UsedPrice&quot;&gt;\n            &lt;xsl:value-of select=&quot;Details/UsedPrice&quot; /&gt;\n          &lt;/span&gt;\n          &lt;br /&gt;\n        &lt;/p&gt;</code></pre>\n<p>Something to note about these prices, too, is that although the used price is listed, the shopping cart will contain new items from Amazon&apos;s shelves.  You might want to compare these prices though, and make a change to the shopping cart when you get there, if a used item is acceptable.  (Another good reason for manual intervention in our Wish-of-the-Month club.)</p>\n<p>Oh yeah, and we should include one other bit of information:</p>\n<pre><code>        &lt;p&gt;(&lt;xsl:value-of select=&quot;Details/Availability&quot; /&gt;)&lt;/p&gt;</code></pre>\n<p>This tells us whether or not this item can actually be bought, at present.  Although we used this data earlier to try to filter out unavailable items, we should still display this information just in case we missed something.</p>\n<p>Finally, let&apos;s clean up and finish the HTML:</p>\n<pre><code>      &lt;/div&gt;\n    &lt;/xsl:for-each&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>Running this stylesheet (<a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex5.xsl\">wishes-ex5.xsl</a>) should give you a page that looks something like this in a browser:</p>\n<p><img src=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.jpg\" alt=\"Wishlist HTML screenshot\"></p>\n<h3 id=\"scheduling-monthly-emails\">Scheduling Monthly Emails</h3>\n<p>Some ready-made files are available for this section:</p>\n<ul>\n<li><a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes-ex6.xsl\"><code>wishes-ex6.xsl</code></a>: The sixth (and final) iteration of the stylesheet in development.</li>\n</ul>\n<p>That HTML we&apos;re producing is fine, but what we really want to do is get it delivered to us.  We could set up a scheduled run that would periodically generate a page for us to visit, but the whole point of this is laziness.  How about firing off an email with this content?  There are two things to help us with this: <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> shows us how to construct email messages with a variety of content types; and <a href=\"http://www.hmug.org/man/8/sendmail.html\" title=\"man: sendmail\"><code>sendmail</code></a> will let us send these messages out.  And then, with the help of <code>cron</code>, we can fire up this process every month.</p>\n<p>Along with producing XML, XSLT can also construct plain text output--which is just what we need to create MIME email messages.  <a href=\"http://www.faqs.org/rfcs/rfc1521.html\" title=\"RFC 1521\">RFC 1521</a> doesn&apos;t make for the most thrilling reading, but there are a few articles to be found that summarize things (such as <a href=\"http://www.abiglime.com/webmaster/articles/cgi/010698.htm\" title=\"How to encapsulate HTML in an email message\">this article</a> and <a href=\"http://www.wilsonweb.com/wmt5/html-email-multi.htm\" title=\"Sending HTML and Plain Text E-Mail Simultaneously\">this article</a>).   To make a long story short, a basic shell for an email message using MIME to include an HTML part and a plain text part looks something like this:</p>\n<pre><code>To: someone@example.org\nSubject: Some useful email subject\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=&quot;theBoundaryString&quot;\n\n--theBoundaryString\nContent-Type: text/plain\n\nSome plain text representation goes here...\n\n--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: &quot;http://www.decafbad.com/&quot;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n    &lt;p&gt;Some HTML representation goes here...&lt;/p&gt;\n&lt;/html&gt;\n\n--theBoundaryString--</code></pre>\n<p>I&apos;ve snuck in the idea of providing both an HTML version (which we&apos;ve already done) and a new plain text version.  Depending on your email program and your preferences, one type might be more useful than the other.  In any case, it&apos;s not all that hard to offer both here.  To start sending these email messages, though, we&apos;ll need an email address.  So, add that as an element in <a href=\"http://www.decafbad.com/cvs/*checkout*/hacks/wishes/wishes.xml\">wishes.xml</a>:</p>\n<pre><code>&lt;wishes xmlns=&quot;http://www.decafbad.com/2004/05/wishes&quot;&gt;\n  &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n  &lt;maxprice&gt;15.00&lt;/maxprice&gt;\n  &lt;associate&gt;0xdecafbad-20&lt;/associate&gt;\n  &lt;devtoken&gt;D8HVH869XA0NP&lt;/devtoken&gt;\n  &lt;wishlists&gt;\n    &lt;wishlist label=&quot;Me&quot;&gt;1QWYI6P2JF3Q5&lt;/wishlist&gt;\n    &lt;wishlist label=&quot;The Girl&quot;&gt;35OIOYWQ9XQAE&lt;/wishlist&gt;\n  &lt;/wishlists&gt;\n&lt;/wishes&gt;</code></pre>\n<p>Let&apos;s extract this data into a global variable near the start of the stylesheet:</p>\n<pre><code>  &lt;xsl:variable name=&quot;email_to&quot;  select=&quot;/wishes:wishes/wishes:email&quot; /&gt;</code></pre>\n<p>Start editing the final template of the stylesheet, inserting before the start of HTML content:</p>\n<pre><code>    &lt;!-- Eat all the line breaks generated so far --&gt;\n    &lt;xsl:text&gt;To: &lt;/xsl:text&gt;&lt;xsl:value-of select=&quot;$email_to&quot; /&gt;   \nSubject: 0xDECAFBAD&apos;s Amazon Wish-of-the-Month Club\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=&quot;theBoundaryString&quot;</code></pre>\n<p>This is the header for the email.  Up until now, we&apos;ve been generating XML with the stylesheet and haven&apos;t cared very much about any extra whitespace or line breaks which might sneak into the output.  However, in an email header, whitespace is important since a blank line is what&apos;s used to separate the headers from the body of the email message.  So, any stray blank lines will cause what we might have meant to be headers to be interpreted as part of the message instead.  Producing the first header in the email with <code>xsl:text</code> tags causes the XSL processor to throw away any leading whitespace which would have appeared before the first header.</p>\n<p>Other than this little twist, the email header looks pretty much like the shell.  We fill in the <code>To</code> address from the global variable <code>$email_to</code> and define a <code>Subject</code> line.  The <code>MIME-Version</code> and <code>Content-Type</code> headers are what enable us to include both text and HTML versions in one email.</p>\n<p>Now we can start into one of the parts:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/plain</code></pre>\n<p>This begins the plain text section of the email, using the <em>boundary string</em> as defined in the headers to delinieate the section&apos;s beginning.  The section can also have its own set of headers, of which we use only one: <code>Content-Type</code>.  Moving along, let&apos;s work on the text content itself.</p>\n<pre><code>Here are your wishlist items:\n\n&lt;xsl:value-of select=&quot;$shopping_cart_purchase_url&quot; /&gt;&lt;xsl:text&gt;\n&lt;/xsl:text&gt;</code></pre>\n<p>No shopping cart image here, but this includes the human-viewable URL which leads to a shopping cart on Amazon.com.  The usage of <code>xsl:text</code> here forces a line break where there otherwise wouldn&apos;t have been one with the usage of <code>xsl:value-of</code>.  Now, let&apos;s iterate through each of the wishlists and list out the product details:</p>\n<pre><code>&lt;xsl:for-each select=&quot;exsl:node-set($random_products)/wishes:wishitem&quot;&gt;\n---------------------------------------------------------------------------\n&lt;xsl:value-of select=&quot;wishes:wishlist/@label&quot; \n       disable-output-escaping=&quot;yes&quot; /&gt;\n---------------------------------------------------------------------------\n\n&lt;xsl:value-of select=&quot;Details/ProductName&quot; \n       disable-output-escaping=&quot;yes&quot; /&gt;\n\n&lt;xsl:for-each select=&quot;./Details/Artists/Artist | \n                      ./Details/Authors/Author&quot;&gt;\nby &lt;xsl:value-of select=&quot;.&quot;  \n   disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;/xsl:for-each&gt;\n\nCatalog:      &lt;xsl:value-of select=&quot;Details/Catalog&quot; \n   disable-output-escaping=&quot;yes&quot; /&gt;\nReleased:     &lt;xsl:value-of select=&quot;Details/ReleaseDate&quot; \n   disable-output-escaping=&quot;yes&quot; /&gt;\n\nList Price:   &lt;xsl:value-of select=&quot;Details/ListPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \nOur  Price:   &lt;xsl:value-of select=&quot;Details/UsedPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \nUsed Price:   &lt;xsl:value-of select=&quot;Details/OurPrice&quot;  \n     disable-output-escaping=&quot;yes&quot;/&gt; \n\nAvailability: &lt;xsl:value-of select=&quot;Details/Availability&quot;  \n       disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;xsl:text&gt;\n\n&lt;/xsl:text&gt;\n&lt;xsl:value-of select=&quot;Details/@url&quot;  \n       disable-output-escaping=&quot;yes&quot;/&gt;\n&lt;xsl:text&gt;\n&lt;/xsl:text&gt;\n\n&lt;/xsl:for-each&gt;</code></pre>\n<p>Most everything in this stretch should look very similar to the HTML version we just finished.  The biggest difference is that every bit of information pulled in using <code>xsl:value-of</code> is done using the <code>disable-output-escaping</code> option.  When this is <code>yes</code>, things like ampersands are no longer escaped for valid XML output.  Since this bit of the email is plain text, we don&apos;t want to see <code>&amp;amp;</code> in album titles, so this will cause ampersands to appear unmolested.</p>\n<p>That&apos;s the plain text version finished.  Now let&apos;s create the HTML version:</p>\n<pre><code>--theBoundaryString\nContent-Type: text/html\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\nContent-Base: &quot;http://www.decafbad.com/2004/05/wishes&quot;</code></pre>\n<p>The boundary string appears again, signifying the end of the plain text section and the start of the HTML section.  Headers appear here which specify that what follows is HTML; that it&apos;s encoded in 7-bit characters; that it should be included in the message display itself (rather than presented as an attachment to be saved); and that all relative URLs which might appear in the HTML should be treated as having a base URL as specified.  This last part allows HTML in email to refer to images and other pages on another site without making all the URLs absolute.</p>\n<p>We don&apos;t need to make any modifications to the HTML as we built it in the last iteration of the stylesheet, so we can just include it unchanged:</p>\n<pre><code>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n...\n&lt;/html&gt;\n\n--theBoundaryString--</code></pre>\n<p>This final appearance of the boundary string is bracketed on both sides by dashes, which indicates the end of the final section of the document.  We should be ready to try this in combination with <code>sendmail</code> in a shell:</p>\n<pre><code>$ xsltproc wishes-ex6.xsl wishes.xml | sendmail -it</code></pre>\n<p>If everything has worked correctly, there should be an email arriving in your mailbox sometime soon.  (Or in my inbox, if you followed the directions literally and didn&apos;t supply your own email address.)  The options supplied to <code>sendmail</code> are fairly basic: </p>\n<ul>\n<li><code>-i</code> causes lines consisting solely of <code>.</code> <em>not</em> to be treated as an end-of-input signal.</li>\n<li><code>-t</code> causes <code>sendmail</code> to look in the message headers (ie. <code>To:</code>) for a list of recipients.</li>\n</ul>\n<p>If you don&apos;t happen to have have <code>sendmail</code> available, you might want to look into what local mail programs you have available which can accept the output from the stylesheet.</p>\n<p>Once you have this working, the final task is to schedule its monthly execution with your local <code>cron</code> installation.  If you haven&apos;t played with <code>cron</code> before, there are many resources and tutorials available (<a href=\"http://www.lysator.liu.se/~forsberg/linux/cron.html\" title=\"Doing things periodically - Using CRON\">here&apos;s one</a> and <a href=\"http://www.itworld.com/Comp/2378/swol-0825-unix101/\" title=\"Using cron basics\">here&apos;s another</a>).  You should add something like the following to your user account&apos;s <code>crontab</code>:</p>\n<pre><code>0 0 * 1 *  (cd /your/working/path; xsltproc wishes.xsl wishes.xml | sendmail -it)</code></pre>\n<p>The &quot;<code>0 0 * 1 *</code>&quot; indicates to <code>cron</code> that this set of commands should be run at midnight on the first of every months.  Note also that <code>/your/working/path</code> should be replaced by the path to where you&apos;ve been working during this project.  And finally, I&apos;ve renamed the final iteration of the stylesheet file to simply <code>wishes.xsl</code>.</p>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>So that&apos;s it--we have an XSL stylesheet which queries Amazon Web Services for products contained in multiple wishlists; selects a random item from each; prepares a shopping cart containing those items; and finally generates an email message containing both plain text and HTML presentations of the shopping cart and selected items.</p>\n<p>Though this implementation serves the purpose I wrote about at the start of this article, there are definitely many areas where this can be improved upon or expanded:</p>\n<ul>\n<li><p>Many people think Amazon is an evil company for their use of patents.  I can&apos;t say that I&apos;m entirely happy with them for this myself, but their AWS offering is just too nice to resist tinkering with.  It might be interesting to investigate other retailers&apos; wishlist offerings, where they exist, and to see how this idea might be made to work with other (or even multiple) retailers.  Even better, come up with your own wishlist system, and a cross-retailer shopping cart.</p>\n</li>\n<li><p>I chose XSLT as the implementation technology because I thought it would be more natural to deal with Amazon&apos;s XML this way.  There are, admittedly, a few awkward parts in the resulting stylesheet however.  Sometimes it&apos;s good to see a project like this through, just to get a sense for where things do go awkward with a technology or my understanding of it.  It could be interesting to transliterate this into a scripting language like Python or Perl, perhaps using the <a href=\"http://xmlsoft.org/python.html\">libxml bindings</a> to do so.</p>\n</li>\n<li><p>The error and failure handling in this implementation are all but non-existent.  Should anything unexpected happen while dealing with Amazon Web Services, the results aren&apos;t likely to be very pretty.  You may want to consider improving in this area.  One instance I identified was to report when the sanity limit was hit in looping through wishlist pages, versus an actual end of pages.</p>\n</li>\n<li><p>If you play around with making more wishlist queries using the techniques here, you might want to consider caching the full set of data pulled in by the multiple-page calls to AWS, in order to prevent hammering Amazon&apos;s servers with repeated requests for the same data, likely unchanged.</p>\n</li>\n<li><p>I still don&apos;t know why <code>exsl:random</code> doesn&apos;t work for me.  Although I thought using a web service for random numbers was intereting, it would be very nice if I didn&apos;t have to use it.</p>\n</li>\n<li><p>The HTML presentation could certainly use some good CSS to make it more attractive.</p>\n</li>\n</ul>\n<p>Feel free to send me any suggestions, criticisms, or complaints related to this article!</p>\n"
  }
]