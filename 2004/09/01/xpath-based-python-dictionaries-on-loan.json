{"comments_archived":true,"date":"2004-09-01T00:00:00.000Z","excerpt":"But, while I'm in the process of wheel reinvention, how about I\nborrow Kimbro's idea?  I just threw together a quick class called XPathDict,\nbased on libxml2.","layout":"post","tags":["hacks","xml"],"title":"XPath based Python dictionaries, on loan","wordpress_id":544,"wordpress_slug":"xpath-based-python-dictionaries-on-loan","wordpress_url":"http://www.decafbad.com/blog/?p=544","url":"/2004/09/01/xpath-based-python-dictionaries-on-loan/","path":"2004/09/01/xpath-based-python-dictionaries-on-loan","content":"<p>So <a href=\"http://www.xmldatabases.org/WK/blog\">Kimbro Staken</a> posted this nifty idea to build <a href=\"http://www.xmldatabases.org/WK/blog/1964_XPath_based_Python_Dictionaries.item\">XPath based Python dictionaries</a> to access XML data as a part of his incredibly nifty <a href=\"http://www.syncato.org/\">Syncato</a> microcontent management system.  Eventually, I&#39;ve really got to break down and get that thing built and running on my server and my laptop-- it really seems like I&#39;m reinventing so many wheels by not basing <a href=\"http://www.decafbad.com/cvs/dbagg3/\"><code>dbagg3</code></a> on it.</p>\n<p>But, while I&#39;m in the process of wheel reinvention, how about I borrow Kimbro&#39;s idea?  I just threw together <a href=\"http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/xmlutils.py\">a quick class called XPathDict</a>, based on <a href=\"http://www.xmlsoft.org/\">libxml2</a>.  It works a little something like this:</p>\n<pre><code>feed_xd = XPathDict(file=&quot;sample-atom.xml&quot;)\nfor entry_node in feed_xd.nodes(&quot;//atom:entry&quot;):\n    entry = XPathDict(doc=entry_node.doc, node=entry_node)\n    print &quot;Title: &quot; % entry[&#39;atom:title&#39;]\n    if &#39;atom:author&#39; in entry:\n        print &quot;Author: &quot; % entry[&#39;atom:author/atom:name&#39;]\n\nxml = &quot;&quot;&quot;\n   &lt;dbagg3:user xmlns=&quot;http://purl.org/atom/ns#&quot; \n            xmlns:dbagg3=&quot;http://decafbad.com/2004/07/dbagg3/&quot;&gt;\n        &lt;name&gt;deusx&lt;/name&gt;\n        &lt;email&gt;deus_x@pobox.com&lt;/email&gt;\n        &lt;url&gt;http://www.decafbad.com/&lt;/url&gt;\n        &lt;dbagg3:prefs&gt;\n            &lt;dbagg3:pref name=&quot;foo&quot;&gt;bar&lt;/dbagg3:pref&gt;\n        &lt;/dbagg3:prefs&gt;\n   &lt;/dbagg3:author&gt;\n&quot;&quot;&quot;\n\nmap = (\n    (&#39;userName&#39;,  &#39;a:name&#39;),\n    (&#39;userEmail&#39;, &#39;a:email&#39;),\n    (&#39;fooPref&#39;,   &quot;dbagg3:prefs/dbagg3:pref[@name=&#39;foo&#39;]&quot;)\n)\n\nxd = XPathDict(xml=xml)\nxd.cd(&quot;/dbagg3:user&quot;)\nprint xd.extract(map)\n\n#    {&#39;userName&#39;  : &#39;deusx&#39;, \n#     &#39;userEmail&#39; : &#39;deus_x@pobox.com&#39;, \n#     &#39;fooPref&#39;   : &#39;bar&#39;}\n</code></pre><p>There isn&#39;t any spectacular code behind all this, and the idea <em>was</em> Kimbro&#39;s, but it&#39;s working.  It&#39;s also incredibly convenient, especially with the little XML-to-dict extraction map method I whipped up.  This would take a bit more work to pry it out of its current context, such as turning the hardcoded namespaces into an option, among other things.  But, <a href=\"http://www.decafbad.com/cvs/*checkout*/dbagg3/lib/dbagg3/xmlutils.py\">here&#39;s the code</a> for you to peruse.</p>\n<p>(I got hooked early on subverting in-built language constructs from perl&#39;s <code>tie</code> facilities, and C++&#39;s operator overloading.  Now I&#39;m loving Python&#39;s <a href=\"http://diveintopython.org/object_oriented_framework/special_class_methods2.html\">special class methods</a>.  Someday, maybe, I&#39;ll actually get down to doing some work in LISP and wrap my head around some <em>real</em> language subversion.)</p>\n<p>Anyway, while this is neither quite <a href=\"http://dev2dev.bea.com/products/wlworkshop/articles/JSchneider_XML.jsp\">Native XML Scripting</a> nor XML as <a href=\"http://www.xmldatabases.org/WK/blog/663?t=item\">a native language construct</a>, it&#39;s getting there.</p>\n<div id=\"comments\" class=\"comments archived-comments\">\n            <h3>Archived Comments</h3>\n\n        <ul class=\"comments\">\n\n        <li class=\"comment\" id=\"comment-221090556\">\n            <div class=\"meta\">\n                <div class=\"author\">\n                    <a class=\"avatar image\" rel=\"nofollow\" \n                       href=\"http://naeblis.cx\"><img src=\"http://www.gravatar.com/avatar.php?gravatar_id=abfc88b96ae18c85ba7aac3bded2ec5e&amp;size=32&amp;default=http://mediacdn.disqus.com/1320279820/images/noavatar32.png\"/></a>\n                    <a class=\"avatar name\" rel=\"nofollow\" \n                       href=\"http://naeblis.cx\">Ryan Tomayko</a>\n                </div>\n                <a href=\"#comment-221090556\" class=\"permalink\"><time datetime=\"2004-09-01T17:29:27\">2004-09-01T17:29:27</time></a>\n            </div>\n            <div class=\"content\">Funny that. I also have one that has survived a couple of failed apps. I have a hard time dropping it to be honest and just keep lugging it around to each new project. \n\n<a href=\"http://naeblis.cx/cvs/percolator/xb/lib/xpdm.py?rev=HEAD&amp;content-type=text/vnd.viewcvs-markup\">http://naeblis.cx/cvs/percolator/xb/lib/xpdm.py?rev=HEAD&amp;content-type=text/vnd.viewcvs-markup</a>\n\nIt has some pretty big issues. Among other things, creating nodes with namespace support is a little.. ermmm.. not there. But it does a lot of things well like garbage collecting xmlDoc instances (freeDoc), copying nodesets between documents, encoding things when they need to be, etc.\n\nAnyway, I wonder if maybe we all might benefit by teaming up on this and try to define what a complete xpathish wrapper atop libxml2 should look like. And really, why limit it to libxml2? I&#39;m of the opinion that the value here is an interface that embraces xpath. The fact that it&#39;s running on top of the blazingly fast libxml2 is nice but coding against the XMLTRAMP like interface is the value for me.\n\nSo let me see if I can get some time together to whip up a quick comparison of the three implementations. I&#39;ll shoot that over to you and Kimbro and we can go from there. If these seem to work best as backyard APIs we like to keep close to us, we&#39;ll drop it. However, I think there&#39;s a good chance that we can all benefit by combining our efforts.</div>\n\n<pre><code>    &lt;/li&gt;\n\n    &lt;/ul&gt;\n\n    &lt;/div&gt;\n</code></pre>"}