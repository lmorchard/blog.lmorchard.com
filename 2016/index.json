[
  {
    "title": "Heartbroken",
    "tags": [
      "life",
      "politics",
      "metablogging",
      "cmc"
    ],
    "year": "2016",
    "month": "11",
    "day": "11",
    "isDir": false,
    "slug": "heartbroken",
    "date": "2016-11-11T12:00:00.000Z",
    "postName": "2016-11-11-heartbroken",
    "html": "<p><strong>TL;DR</strong>: My heart is broken. Less shitposting. More thinking. Hopefully something productive, soon.</p>\n<!--more-->\n\n<img class=\"fullwidth\" src=\"/uploads/2016/heartbroken.jpg\" id=\"thumbnail\" title=\"my wife drew me this\" />\n\n<p>My heart is broken. My last tweet before going to bed on election night was this:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">This is a fucking terrible night to be a humanist. Just gutted. No humor, no whimsy, no faith. All rage &amp; despair &amp; loathing &amp; shame.</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/796228402948833280\">November 9, 2016</a></blockquote>\n\n<p>My last Facebook post was to share this tweet:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">“Never underestimate the power of stupid people in large groups.” <br>― George Carlin</p>&mdash; Justin Maxwell (@303) <a href=\"https://twitter.com/303/status/796245867376218112\">November 9, 2016</a></blockquote>\n\n<p>After that, I decided to take a break from posting anything. I’ve tried not to look very much. I unfollowed a relative after seeing a string of posts that struck me as ugly and gloating. They struck me rather personally and had me fuming. Then, I noticed another relative whom I thought followed me no longer did. Did some post of mine in the recent past much have had a similar effect on them? Probably.</p>\n<p>Since then, I’ve been thinking about why I post anything anywhere. This popped into my head:</p>\n<blockquote>\n<p>Is it true?</p>\n</blockquote>\n<blockquote>\n<p>Is it necessary?</p>\n</blockquote>\n<blockquote>\n<p>Is it kind?</p>\n</blockquote>\n<p>I don’t remember where I picked that up - probably attributed to whomever sounded wisest at the time the meme was slapped together. Whatever the source, I’ve asked myself those three questions each time I’ve been tempted to break my social media fast over the past few days.</p>\n<p>And, so far, I haven’t liked the answers.</p>\n<p><strong>Is it true?</strong> I like to think I’m well read &amp; informed. Ideally, what I write &amp; share are things on which I’ve done homework to be sure they’re not hoaxes or hyperbolic trolls. In all honesty, I’ve posted plenty of knee-jerk hot takes.</p>\n<p><strong>Is it necessary?</strong> It’s cathartic to hop madly and jab a finger at something infuriating or unfair. Is that sufficient? I can’t say if I’ve swayed anyone or fixed anything with tweet storms or sharing streaks. I get likes &amp; shares &amp; nodding heads, but that’s just bonding with folks who already agree.</p>\n<p><strong>Is it kind?</strong> I’d like to think that helping expose new information &amp; perspectives is kind. I’d like to think that shining a light on things going wrong is kind. But, maybe it’s not always kind. Maybe sometimes it’s received as a bewildering assault of meanness. You know, I&#39;m having particular trouble with the kindness question just now.</p>\n<p>I’ve been alternating between numb and feeling all the things. I’ve been trying to work. I’ve been crying a lot. I talk with my amazing wife, but I don’t want to turn the firehose on her.</p>\n<p>Frankly, all I want to do right now is channel this white-hot primal scream of rage &amp; despair &amp; loathing &amp; shame into every outlet I have available. That’s not much different from some of what I’ve already been doing, except by intensity. I can’t identify any desirable outcome beyond catharsis. Well, if that’s all, I can just roar into a pillow and leave the world less to listen to.</p>\n<p>So, I’ve denied myself this self-soothing habit of posting garbage on the internet because I just can’t trust myself and haven’t envisioned pride in what I’d do. But, in doing that, I’ve also cut off what I tend to consider a support system. It might just be a bubble of people I barely know clicking little hearts and thumbs, but it’s often been an ambient comfort to me.</p>\n<p>I’ve got notes on a post about social anxiety I’ve been meaning to write. If I had it published, I’d point to the part where I talk about how - from the days of dial-up BBSes to IRC to blogs to ten years of Twitter - computer mediated communication has been most of what serves as a social life for me. Having the computer in the middle eases what I usually find so hard to abide in meeting people face-to-face.</p>\n<p>I should work on changing that in my life. Again, if I had that social anxiety post written, I’d point to the bit where I’m rather stymied on how to improve things. I’ve been taking swings at the problem for close to 41 years. (Maybe I should write that post next.)</p>\n<p>If I actually post this, it’s because I decided it had good-enough answers to those three questions. I don’t have a conclusion to write. I’m not sure what to do next. Less shitposting. More thinking. Hopefully something more productive soon.</p>\n<p>In the meantime, I made a mixtape while I was fasting. Maybe you&#39;ll like it:</p>\n<iframe src=\"https://embed.spotify.com/?uri=spotify%3Auser%3Almorchard%3Aplaylist%3A6VAci6bT2I9fnE2sZLYJA3\" width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\"></iframe>\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "body": "**TL;DR**: My heart is broken. Less shitposting. More thinking. Hopefully something productive, soon.\n\n<!--more-->\n\n<img class=\"fullwidth\" src=\"/uploads/2016/heartbroken.jpg\" id=\"thumbnail\" title=\"my wife drew me this\" />\n\nMy heart is broken. My last tweet before going to bed on election night was this:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">This is a fucking terrible night to be a humanist. Just gutted. No humor, no whimsy, no faith. All rage &amp; despair &amp; loathing &amp; shame.</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/796228402948833280\">November 9, 2016</a></blockquote>\n\nMy last Facebook post was to share this tweet:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">“Never underestimate the power of stupid people in large groups.” <br>― George Carlin</p>&mdash; Justin Maxwell (@303) <a href=\"https://twitter.com/303/status/796245867376218112\">November 9, 2016</a></blockquote>\n\nAfter that, I decided to take a break from posting anything. I’ve tried not to look very much. I unfollowed a relative after seeing a string of posts that struck me as ugly and gloating. They struck me rather personally and had me fuming. Then, I noticed another relative whom I thought followed me no longer did. Did some post of mine in the recent past much have had a similar effect on them? Probably.\n\nSince then, I’ve been thinking about why I post anything anywhere. This popped into my head:\n\n> Is it true?\n\n> Is it necessary?\n\n> Is it kind?\n\nI don’t remember where I picked that up - probably attributed to whomever sounded wisest at the time the meme was slapped together. Whatever the source, I’ve asked myself those three questions each time I’ve been tempted to break my social media fast over the past few days.\n\nAnd, so far, I haven’t liked the answers.\n\n**Is it true?** I like to think I’m well read & informed. Ideally, what I write & share are things on which I’ve done homework to be sure they’re not hoaxes or hyperbolic trolls. In all honesty, I’ve posted plenty of knee-jerk hot takes.\n\n**Is it necessary?** It’s cathartic to hop madly and jab a finger at something infuriating or unfair. Is that sufficient? I can’t say if I’ve swayed anyone or fixed anything with tweet storms or sharing streaks. I get likes & shares & nodding heads, but that’s just bonding with folks who already agree.\n\n**Is it kind?** I’d like to think that helping expose new information & perspectives is kind. I’d like to think that shining a light on things going wrong is kind. But, maybe it’s not always kind. Maybe sometimes it’s received as a bewildering assault of meanness. You know, I'm having particular trouble with the kindness question just now.\n\nI’ve been alternating between numb and feeling all the things. I’ve been trying to work. I’ve been crying a lot. I talk with my amazing wife, but I don’t want to turn the firehose on her.\n\nFrankly, all I want to do right now is channel this white-hot primal scream of rage & despair & loathing & shame into every outlet I have available. That’s not much different from some of what I’ve already been doing, except by intensity. I can’t identify any desirable outcome beyond catharsis. Well, if that’s all, I can just roar into a pillow and leave the world less to listen to.\n\nSo, I’ve denied myself this self-soothing habit of posting garbage on the internet because I just can’t trust myself and haven’t envisioned pride in what I’d do. But, in doing that, I’ve also cut off what I tend to consider a support system. It might just be a bubble of people I barely know clicking little hearts and thumbs, but it’s often been an ambient comfort to me.\n\nI’ve got notes on a post about social anxiety I’ve been meaning to write. If I had it published, I’d point to the part where I talk about how - from the days of dial-up BBSes to IRC to blogs to ten years of Twitter - computer mediated communication has been most of what serves as a social life for me. Having the computer in the middle eases what I usually find so hard to abide in meeting people face-to-face.\n\nI should work on changing that in my life. Again, if I had that social anxiety post written, I’d point to the bit where I’m rather stymied on how to improve things. I’ve been taking swings at the problem for close to 41 years. (Maybe I should write that post next.)\n\nIf I actually post this, it’s because I decided it had good-enough answers to those three questions. I don’t have a conclusion to write. I’m not sure what to do next. Less shitposting. More thinking. Hopefully something more productive soon.\n\nIn the meantime, I made a mixtape while I was fasting. Maybe you'll like it:\n\n<iframe src=\"https://embed.spotify.com/?uri=spotify%3Auser%3Almorchard%3Aplaylist%3A6VAci6bT2I9fnE2sZLYJA3\" width=\"300\" height=\"380\" frameborder=\"0\" allowtransparency=\"true\"></iframe>\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/11/11/heartbroken",
    "thumbnail": "/uploads/2016/heartbroken.jpg",
    "summary": "<p><strong>TL;DR</strong>: My heart is broken. Less shitposting. More thinking. Hopefully something productive, soon.</p>\n"
  },
  {
    "title": "Firefox Test Pilot: The Flattening",
    "tags": [
      "mozilla",
      "testpilot",
      "webdev",
      "django",
      "gulp"
    ],
    "thumbnail": "/blog.lmorchard.com/uploads/2016/tp-flat.png",
    "year": "2016",
    "month": "09",
    "day": "26",
    "isDir": false,
    "slug": "testpilot-static",
    "date": "2016-09-26T12:00:00.000Z",
    "postName": "2016-09-26-testpilot-static",
    "html": "<p><strong>TL;DR</strong>: Firefox Test Pilot is becoming a statically-generated site from content in flat files. We&#39;re moving away from Django and PostgreSQL, and it&#39;s been a bit of a journey.</p>\n<!--more-->\n\n<img class=\"fullwidth\" src=\"/uploads/2016/tp-header.png\" />\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>I&#39;ve been working on <a href=\"https://testpilot.firefox.com/\">Firefox Test Pilot</a> for over a year, but I haven&#39;t written about it here before now. Mostly because I&#39;ve been busy and lazy and <a href=\"/2016/08/31/yak-shaving-habits/\">busily shaving yaks</a>.</p>\n<p>But, there have been big things afoot lately, and I figured they were worth writing about - if only because they&#39;re invisible, behind-the-scenes things that nonetheless took a lot of work to accomplish.</p>\n<h2 id=\"be-prepared---but-for-what\">Be prepared - but for what?</h2>\n<p>When we started building Test Pilot last summer, we based the server-side on Django &amp; PostgreSQL. We had assumptions about the future: </p>\n<ul>\n<li><p>We&#39;d need to collect measurements from experiments. </p>\n</li>\n<li><p>We thought experiments would need some active server-side resources provided by the mothership.</p>\n</li>\n<li><p>We&#39;d need to manage user profiles &amp; preferences, so we required sign-in with a Firefox Account. </p>\n</li>\n</ul>\n<p>A year later, these assumptions didn&#39;t quite pan out: </p>\n<ul>\n<li><p>Rather than reinvent the wheel by collecting &amp; analyzing measurements ourselves, we took advantage of Google Analytics and the efforts of <a href=\"https://wiki.mozilla.org/Telemetry\">the Firefox Telemetry team</a>.</p>\n</li>\n<li><p>We found it&#39;s best to stay out of the way of teams building Test Pilot experiments - let them manage their own services as necessary, rather than be tied to the delivery cadence of the core project.</p>\n</li>\n<li><p>The sign-in requirement turned away many potential users. But, we didn&#39;t need accounts to facilitate experiment participation anyway. Our metrics are anonymous and a Firefox add-on manages opt-in.</p>\n<p>Accounts ended up being private data we had to keep secure, but only used for email notifications. We have better ways to manage email subscriptions across Mozilla - so one less wheel to reinvent!</p>\n</li>\n</ul>\n<h2 id=\"didnt-need-that-server-anyway\">Didn&#39;t need that server anyway</h2>\n<p>There was just one last reason to use Django &amp; PostgreSQL on Test Pilot: A web-based content management system to update the site without heavyweight server deployments &amp; database migrations. </p>\n<p>But, wait a minute: If the other reasons for a server dropped away - why do we need complex deployments?</p>\n<p>Furthermore, why maintain content <a href=\"https://indieweb.org/database-antipattern\">in a database</a> at all?</p>\n<p>The whole Test Pilot team knows their way around text editors and GitHub - so let&#39;s make that our CMS. We can <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\">bake the whole site</a> from <a href=\"https://github.com/mozilla/testpilot/tree/master/content-src/experiments\">flat files</a>. Deployment is <a href=\"https://github.com/mozilla/testpilot/blob/master/docs/development/deployment.md#producing-a-static-build\">running a build script</a> and <a href=\"https://github.com/mozilla/testpilot/blob/master/circle.yml#L71\">uploading the result</a> to a web server. We get revision control &amp; collaboration along with the rest of the project. And as a security bonus, we stop shipping the tools to change the site along with the deployed site itself.</p>\n<p>None of this is revolutionary. Aaron Swartz&#39;s &quot;<a href=\"http://www.aaronsw.com/weblog/000404\">Bake, Don&#39;t Fry</a>&quot; is over 14 years old: Why fry up a new web page for every visit when you can pre-bake the whole site ahead of time? I used <a href=\"http://blosxom.sourceforge.net/\">Bloxsom</a> back in the day and <a href=\"https://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\">Gulp bakes this blog now</a>. Static site generators <a href=\"https://www.staticgen.com/\">are numerous &amp; popular</a> - GitHub itself offers <a href=\"https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/\">GitHub Pages</a> powered by <a href=\"https://github.com/jekyll/jekyll\">Jekyll</a>.</p>\n<p>It sounds obvious in retrospect, but it took awhile to realize our site could be stripped down to so little. We assumed we needed all those moving parts - or would need them someday. But, it appears that we can get away with being nearly serverless. And if someday a feature requires more, we can stand up some loosely-coupled microservices - or better yet, find that another team at Mozilla has already solved the problem.</p>\n<h2 id=\"the-show-must-go-on\">The show must go on</h2>\n<p>But, having realized all of this, we couldn&#39;t just burn down the site and start over. Because we&#39;re working on a vehicle in motion, we&#39;ve been doing this in increments over the summer: </p>\n<ul>\n<li><p>A couple of months ago, <a href=\"https://github.com/mozilla/testpilot/issues/1035\">we removed the Firefox Accounts requirement</a> and then <a href=\"https://github.com/mozilla/testpilot/issues/1034\">deleted the user data</a> once we were sure we weren&#39;t going back.</p>\n</li>\n<li><p>We switched data sources for displaying the number of folks participating in experiments from our own Django API to <a href=\"https://github.com/mozilla/testpilot/issues/1039\">a Telemetry-based resource</a>.</p>\n</li>\n<li><p>I wrote a task to <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L22\">import content from the current Django API</a>. Then, I wrote <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L16\">a task to generate JSON</a> from those imported files - a direct static replacement for the Django API.</p>\n</li>\n<li><p>Next, I implemented <a href=\"https://github.com/mozilla/testpilot/blob/master/testpilot/experiments/views.py#L50\">a feature flag in Django</a> to substitute static JSON for content from the database. Thus, we can start managing content in YAML now, maintaining our current infrastructure until we work out a new stripped-down deployment process.</p>\n</li>\n<li><p>Soon, we&#39;ll be able to update the site by pushing to the appropriate branch on GitHub. We&#39;ve got <a href=\"https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\">tasks to generate stub pages</a> for all the front end app routes. We&#39;re also looking into enforcing a requirement to <a href=\"http://micropipes.com/blog//2016/08/31/signing-your-commits-on-github-with-a-gpg-key/\">sign our commits and tags</a> on the way to release.</p>\n</li>\n<li><p>After that, <a href=\"https://github.com/mozilla/testpilot/issues/1306\">we plan to go even further with static site generation</a>. Test Pilot is currently a single page app that pulls content from JSON. But, we can do better by pre-rendering those HTML pages in our build process ahead of time.</p>\n</li>\n</ul>\n<h2 id=\"whats-next\">What&#39;s next?</h2>\n<p>There&#39;s a funny thing about all of this: If we&#39;re successful, no one visiting the site should notice anything different. We&#39;re developing some new features &amp; experiments - but all this work to rid our infrastructure of Django &amp; PostgreSQL should ideally be a non-event for anyone visiting the site. This is the least glamorous sort of work one occasionally has to do on a software project - change everything, but don&#39;t break anything.</p>\n<p>The real benefit will be that we&#39;re able to do a lot of things faster and more easily. For instance, there are now fewer places that need changes to display a new piece of information on a page. We don&#39;t have to monitor as many third-party dependencies - <a href=\"https://github.com/mozilla/testpilot/issues/1116\">which we weren&#39;t doing very well to begin with</a>.</p>\n<p>Our development stack shrinks from Docker containers with Django &amp; PostgreSQL &amp; Node.js - down to just Node.js v6.2.0. <a href=\"https://github.com/mozilla/testpilot/blob/master/docs/development/quickstart.md\">The whole system has gotten simpler and more direct</a>.</p>\n<p>But, wait, there&#39;s more: Along with totally changing our server-side infrastructure, <a href=\"https://github.com/mozilla/testpilot/issues/1307\">we&#39;ve also rewritten the front end of the site to switch from Ampersand to React &amp; Redux</a>. It should make static site generation easier. It&#39;s also eased development on a handful of new features in the past week or so.</p>\n<p>It&#39;s a big deal - and another thing that, in retrospect, seems more obvious now than it did a year ago. But, I&#39;m going to save writing about that for my next post.</p>\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "body": "**TL;DR**: Firefox Test Pilot is becoming a statically-generated site from content in flat files. We're moving away from Django and PostgreSQL, and it's been a bit of a journey.\n\n<!--more-->\n\n<img class=\"fullwidth\" src=\"/uploads/2016/tp-header.png\" />\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nI've been working on [Firefox Test Pilot][testpilot] for over a year, but I haven't written about it here before now. Mostly because I've been busy and lazy and [busily shaving yaks](/2016/08/31/yak-shaving-habits/).\n\nBut, there have been big things afoot lately, and I figured they were worth writing about - if only because they're invisible, behind-the-scenes things that nonetheless took a lot of work to accomplish.\n\n## Be prepared - but for what?\n\nWhen we started building Test Pilot last summer, we based the server-side on Django & PostgreSQL. We had assumptions about the future: \n\n* We'd need to collect measurements from experiments. \n\n* We thought experiments would need some active server-side resources provided by the mothership.\n\n* We'd need to manage user profiles & preferences, so we required sign-in with a Firefox Account. \n\nA year later, these assumptions didn't quite pan out: \n\n* Rather than reinvent the wheel by collecting & analyzing measurements ourselves, we took advantage of Google Analytics and the efforts of [the Firefox Telemetry team][telemetry].\n\n* We found it's best to stay out of the way of teams building Test Pilot experiments - let them manage their own services as necessary, rather than be tied to the delivery cadence of the core project.\n\n* The sign-in requirement turned away many potential users. But, we didn't need accounts to facilitate experiment participation anyway. Our metrics are anonymous and a Firefox add-on manages opt-in.\n  \n  Accounts ended up being private data we had to keep secure, but only used for email notifications. We have better ways to manage email subscriptions across Mozilla - so one less wheel to reinvent!\n\n## Didn't need that server anyway\n\nThere was just one last reason to use Django & PostgreSQL on Test Pilot: A web-based content management system to update the site without heavyweight server deployments & database migrations. \n\nBut, wait a minute: If the other reasons for a server dropped away - why do we need complex deployments?\n\nFurthermore, why maintain content [in a database][database] at all?\n\nThe whole Test Pilot team knows their way around text editors and GitHub - so let's make that our CMS. We can [bake the whole site][sitebake] from [flat files][]. Deployment is [running a build script][buildscript] and [uploading the result][uploadweb] to a web server. We get revision control & collaboration along with the rest of the project. And as a security bonus, we stop shipping the tools to change the site along with the deployed site itself.\n\nNone of this is revolutionary. Aaron Swartz's \"[Bake, Don't Fry][baked]\" is over 14 years old: Why fry up a new web page for every visit when you can pre-bake the whole site ahead of time? I used [Bloxsom][] back in the day and [Gulp bakes this blog now][gulp]. Static site generators [are numerous & popular][staticgen] - GitHub itself offers [GitHub Pages][pages] powered by [Jekyll][].\n\nIt sounds obvious in retrospect, but it took awhile to realize our site could be stripped down to so little. We assumed we needed all those moving parts - or would need them someday. But, it appears that we can get away with being nearly serverless. And if someday a feature requires more, we can stand up some loosely-coupled microservices - or better yet, find that another team at Mozilla has already solved the problem.\n\n## The show must go on\n\nBut, having realized all of this, we couldn't just burn down the site and start over. Because we're working on a vehicle in motion, we've been doing this in increments over the summer: \n\n* A couple of months ago, [we removed the Firefox Accounts requirement][fxareq] and then [deleted the user data][deletedata] once we were sure we weren't going back.\n\n* We switched data sources for displaying the number of folks participating in experiments from our own Django API to [a Telemetry-based resource][counts].\n\n* I wrote a task to [import content from the current Django API][import]. Then, I wrote [a task to generate JSON][generatejson] from those imported files - a direct static replacement for the Django API.\n\n* Next, I implemented [a feature flag in Django][featureflag] to substitute static JSON for content from the database. Thus, we can start managing content in YAML now, maintaining our current infrastructure until we work out a new stripped-down deployment process.\n\n* Soon, we'll be able to update the site by pushing to the appropriate branch on GitHub. We've got [tasks to generate stub pages][stubs] for all the front end app routes. We're also looking into enforcing a requirement to [sign our commits and tags][signreq] on the way to release.\n\n* After that, [we plan to go even further with static site generation][staticsite]. Test Pilot is currently a single page app that pulls content from JSON. But, we can do better by pre-rendering those HTML pages in our build process ahead of time.\n\n## What's next?\n\nThere's a funny thing about all of this: If we're successful, no one visiting the site should notice anything different. We're developing some new features & experiments - but all this work to rid our infrastructure of Django & PostgreSQL should ideally be a non-event for anyone visiting the site. This is the least glamorous sort of work one occasionally has to do on a software project - change everything, but don't break anything.\n\nThe real benefit will be that we're able to do a lot of things faster and more easily. For instance, there are now fewer places that need changes to display a new piece of information on a page. We don't have to monitor as many third-party dependencies - [which we weren't doing very well to begin with][dependencies].\n\nOur development stack shrinks from Docker containers with Django & PostgreSQL & Node.js - down to just Node.js v6.2.0. [The whole system has gotten simpler and more direct][quickstart].\n\nBut, wait, there's more: Along with totally changing our server-side infrastructure, [we've also rewritten the front end of the site to switch from Ampersand to React & Redux][reactrewrite]. It should make static site generation easier. It's also eased development on a handful of new features in the past week or so.\n\nIt's a big deal - and another thing that, in retrospect, seems more obvious now than it did a year ago. But, I'm going to save writing about that for my next post.\n\n[dependencies]: https://github.com/mozilla/testpilot/issues/1116\n[quickstart]: https://github.com/mozilla/testpilot/blob/master/docs/development/quickstart.md\n[testpilot]: https://testpilot.firefox.com/\n[buildscript]: https://github.com/mozilla/testpilot/blob/master/docs/development/deployment.md#producing-a-static-build\n[uploadweb]: https://github.com/mozilla/testpilot/blob/master/circle.yml#L71\n[sitebake]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\n[stubs]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/pages.js\n[signreq]: http://micropipes.com/blog//2016/08/31/signing-your-commits-on-github-with-a-gpg-key/\n[reactrewrite]: https://github.com/mozilla/testpilot/issues/1307\n[staticsite]: https://github.com/mozilla/testpilot/issues/1306\n[featureflag]: https://github.com/mozilla/testpilot/blob/master/testpilot/experiments/views.py#L50\n[generatejson]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L16\n[import]: https://github.com/mozilla/testpilot/blob/master/frontend/tasks/content.js#L22\n[counts]: https://github.com/mozilla/testpilot/issues/1039\n[deletedata]: https://github.com/mozilla/testpilot/issues/1034\n[fxareq]: https://github.com/mozilla/testpilot/issues/1035\n[flat files]: https://github.com/mozilla/testpilot/tree/master/content-src/experiments\n[telemetry]: https://wiki.mozilla.org/Telemetry\n[gulp]: https://blog.lmorchard.com/2014/10/20/static-blog-generation-with-gulp/\n[bloxsom]: http://blosxom.sourceforge.net/\n[jekyll]: https://github.com/jekyll/jekyll\n[pages]: https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/\n[baked]: http://www.aaronsw.com/weblog/000404\n[database]: https://indieweb.org/database-antipattern\n[staticgen]: https://www.staticgen.com/\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/09/26/testpilot-static",
    "summary": "<p><strong>TL;DR</strong>: Firefox Test Pilot is becoming a statically-generated site from content in flat files. We&apos;re moving away from Django and PostgreSQL, and it&apos;s been a bit of a journey.</p>\n"
  },
  {
    "title": "Poking the Mongo on Pico-8",
    "tags": [
      "gaming",
      "pico8",
      "lua",
      "pokethemongo"
    ],
    "thumbnail": "/blog.lmorchard.com/uploads/2016/poke-the-mongo/poke-the-mongo.p8.png",
    "year": "2016",
    "month": "09",
    "day": "11",
    "isDir": false,
    "slug": "poke-the-mongo",
    "date": "2016-09-11T12:00:00.000Z",
    "postName": "2016-09-11-poke-the-mongo",
    "html": "<p><strong>TL;DR</strong>: I started writing a video game for a fantasy console. The future is weird.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<h2 id=\"enter-the-pocketchip\">Enter the PocketC.H.I.P.</h2>\n<p><a href=\"http://www.lexaloffle.com/pico-8.php\">Pico-8</a> has been out for a few years. With it, folks have been making fun neo-retro games - and of course I&#39;ve got a soft spot for that genre. </p>\n<p>But, I never really fell down the Pico-8 rabbit hole until this arrived:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Oh hey! My <a href=\"https://twitter.com/hashtag/pocketchip?src=hash\">#pocketchip</a> just showed up! <a href=\"https://t.co/5HxB2mzCPw\">pic.twitter.com/5HxB2mzCPw</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/766350094555750400\">August 18, 2016</a></blockquote>\n\n<p><a href=\"http://boingboing.net/2016/05/04/tiny-8-bit-console-designed-f.html\">I read about the PocketC.H.I.P. back in May</a>. I was sold on the idea of real hardware for a fantasy game console - a Raspberry PI turned GameBoy. I pre-ordered and then mostly forgot about it. Fast forward three months and I&#39;ve got the thing in my hands.</p>\n<p>While I do want to write up an in-depth look at the PocketC.H.I.P., for now I&#39;m going to focus on this Pico-8 thing that&#39;s grabbed me in the past few weeks.</p>\n<p>But, like my old Commodore 64, PocketC.H.I.P. is a gateway drug: It doesn&#39;t just play games - it comes with a full Pico-8 installation: Tools for code, sprites, maps, sounds, and music. In past visits to the Pico-8 scene, using just the web player, the significance of this hadn&#39;t quite dawned on me. </p>\n<h2 id=\"view-source\">View Source</h2>\n<img class=\"lazyload inset right\" data-src=\"/uploads/2016/poke-the-mongo/PICO-8_21.gif\" />\n\n<p>With the full package, you can hit <kbd>Esc</kbd> on any running cartridge and tinker with the source - <strong>not entirely unlike View Source and Developer Tools on the Web</strong>. And, <a href=\"/2015/08/07/web-awesome/\">you know I&#39;m a fan of that</a>.</p>\n<p>Or, to strum my nostalgia strings, it&#39;s like when I would pour over listings in 1980s computer magazines to see how those games worked. In fact, there have even been a few issues of a <a href=\"https://sectordub.itch.io/pico-8-fanzine-1\">Pico-8 Zine</a> with code and interviews. </p>\n<p>After I&#39;d poked at a dozen-odd carts and browsed through the zines, I thought I should give it a go myself. I didn&#39;t know much Lua, but it&#39;s an easy language to pick up. Simpler than JavaScript, <a href=\"https://twitter.com/lmorchard/status/766870582856081409\">but it beats revisiting BASIC</a> - even my old favorite <a href=\"https://en.wikipedia.org/wiki/Simons%27_BASIC\">Simons&#39; BASIC</a>, which has a surprising amount in common with this modern day system. </p>\n<p>I also decided to be masochistic by coding directly on the PocketC.H.I.P. Later, when my fingers vetoed further typing on metal domes, I plugged in a USB keyboard. As things got more complex, I broke down and bought the main edition of Pico-8 to move to a bigger screen. It&#39;s not Free Software or even Free-as-in-Beer. But, <a href=\"http://www.lexaloffle.com/pico-8.php#getpico8\">it&#39;s only US$14.99</a>. That single purchase gave me access to versions for my PC, Mac, and Linux machines. </p>\n<p>(There&#39;s even a Raspberry PI version - which gives me ideas for building a Pico-8 multicade machine. But, that&#39;s a story for another post.)</p>\n<p>On my PC, I discovered <code>.p8</code> cartridges are just text files I can edit in Vim! With that revelation, <a href=\"https://github.com/lmorchard/Pico-8-Carts\">I created a GitHub repo</a> and started saving my work there. Things have come a long way since I only had a tape drive to work with on my C64!</p>\n<p>A couple of days later, I had a promising start:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Just in case I don&#39;t work on it any further, here&#39;s Poke the Mongo v0.1! <a href=\"https://t.co/Qgn0p2ZCep\">https://t.co/Qgn0p2ZCep</a> <a href=\"https://t.co/rGtP6UCf5p\">pic.twitter.com/rGtP6UCf5p</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/767604122388279296\">August 22, 2016</a></blockquote>\n\n<h2 id=\"share-and-enjoy\">Share and enjoy!</h2>\n<p>There are a few more things I discovered in composing that tweet:</p>\n<ol>\n<li><p>Pico-8 has easy built-in video recording that renders animated GIFs to my desktop. <kbd>F3</kbd> to start, <kbd>F4</kbd> to save - and I&#39;m ready to tweet little moments while I hack.</p>\n</li>\n<li><p>Pico-8 cartridges can be exported as images. <img class=\"inset right\" style=\"width: inherit\" src=\"/uploads/2016/poke-the-mongo/poke-the-mongo.p8.png\" /> The code for my game is encoded in that PNG with <a href=\"https://twitter.com/lexaloffle/status/611581098900897793\">a steganography technique that subtly tweaks pixel color bits</a>. As long as no intermediaries corrupt the hidden encoding, I can share this game cartridge by uploading the image.</p>\n</li>\n<li><p>Apropos of that, Lexaloffle has forums - a BBS - where folks post &amp; discuss their Pico-8 carts. <a href=\"http://www.lexaloffle.com/bbs/?tid=4111\">You can find mine over here</a>!</p>\n</li>\n<li><p>Inside Pico-8 is a mode called &quot;Splore&quot; which connects to the Lexaloffle BBS to let you browse uploaded carts from the console. So, when I uploaded my game, it was instantly available to everyone else with Pico-8!</p>\n</li>\n</ol>\n<p>Pico-8 is game making as a social activity, and the system has all the batteries included.</p>\n<h2 id=\"game-making-is-a-fun-game\">Game making is a fun game</h2>\n<p>As I tinkered, it occurred to me that Pico-8 is less a serious game development system and more a game about making games. Through intentional constraints &amp; platform quirks, it offers offer creative hooks &amp; puzzles.</p>\n<p>The constraints mean it&#39;s not as easy to get lost in options or feel overwhelmed. For example, <a href=\"https://neko250.github.io/pico8-api/\">here&#39;s a Pico-8 API cheatsheet</a> - it&#39;s pretty much all I&#39;ve needed! It&#39;s also hard to build anything huge, so there&#39;s less of a compulsion to go beyond doodles or a few specific game mechanics. I can make something derpy but good enough and move on without stressing about my artistic skills.</p>\n<p>But also, some folks have found ways to really push the boundaries of the system - and that is a puzzle in itself. It&#39;s great to get a fresh dose of that old school awe from seeing a clever hack make the machine do something it wasn&#39;t meant to do. It&#39;s akin to seeing someone pull off some nasty moves in game streams where I know just enough to realize what&#39;s happening.</p>\n<p>I&#39;m nowhere near that level of Pico-8 mastery, but it could be interesting to dive into some of the things I&#39;ve learned so far. But, I&#39;ll save that for yet another post.</p>\n<h2 id=\"play-my-game\">Play my game!</h2>\n<p>Pico-8 games can also be exported to HTML5 and JavaScript. This embedded web player consists of the game code and an Emscripten-compiled version of the Pico-8 engine. So, <a href=\"/2015/08/07/web-awesome/\">because the web is awesome</a>, even if Pico-8 goes away this copy of my game will continue working long after:</p>\n<iframe class=\"lazyload\" style=\"width: 100%; height: 420px\" scrolling=\"no\" frameborder=\"0\" allowfullscreen data-src=\"/uploads/2016/poke-the-mongo/pokethemongo.html\"></iframe>\n\n<p>I&#39;ve also read that the folks behind Pico-8 aren&#39;t particularly hostile to others cloning the system - which has lead to things like <a href=\"https://github.com/picolove/picolove\">PICOLOVE</a>, an independent implementation of the Pico-8 APIs for another Lua-based game system. I&#39;ve seen a few folks leverage that to get their games running on Android, so I&#39;ll have to check that out at some point.</p>\n<p>Anyway, I&#39;ve got a few more things to add, but I think this game is getting pretty close to where I want it to be. It&#39;s all gone much faster than I expected, so I&#39;m looking forward to trying more ideas. </p>\n<p>Until then, let me know how you like Poke the Mongo, and I&#39;ll follow up with a more in-depth look at how I made this thing!</p>\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t textwidth=78: -->\n",
    "body": "**TL;DR**: I started writing a video game for a fantasy console. The future is weird.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n## Enter the PocketC.H.I.P.\n\n[Pico-8][] has been out for a few years. With it, folks have been making fun neo-retro games - and of course I've got a soft spot for that genre. \n\n[Pico-8]: http://www.lexaloffle.com/pico-8.php\n\nBut, I never really fell down the Pico-8 rabbit hole until this arrived:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Oh hey! My <a href=\"https://twitter.com/hashtag/pocketchip?src=hash\">#pocketchip</a> just showed up! <a href=\"https://t.co/5HxB2mzCPw\">pic.twitter.com/5HxB2mzCPw</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/766350094555750400\">August 18, 2016</a></blockquote>\n\n[I read about the PocketC.H.I.P. back in May](http://boingboing.net/2016/05/04/tiny-8-bit-console-designed-f.html). I was sold on the idea of real hardware for a fantasy game console - a Raspberry PI turned GameBoy. I pre-ordered and then mostly forgot about it. Fast forward three months and I've got the thing in my hands.\n\nWhile I do want to write up an in-depth look at the PocketC.H.I.P., for now I'm going to focus on this Pico-8 thing that's grabbed me in the past few weeks.\n\nBut, like my old Commodore 64, PocketC.H.I.P. is a gateway drug: It doesn't just play games - it comes with a full Pico-8 installation: Tools for code, sprites, maps, sounds, and music. In past visits to the Pico-8 scene, using just the web player, the significance of this hadn't quite dawned on me. \n\n## View Source\n\n<img class=\"lazyload inset right\" data-src=\"/uploads/2016/poke-the-mongo/PICO-8_21.gif\" />\n\nWith the full package, you can hit <kbd>Esc</kbd> on any running cartridge and tinker with the source - **not entirely unlike View Source and Developer Tools on the Web**. And, [you know I'm a fan of that](/2015/08/07/web-awesome/).\n\nOr, to strum my nostalgia strings, it's like when I would pour over listings in 1980s computer magazines to see how those games worked. In fact, there have even been a few issues of a [Pico-8 Zine](https://sectordub.itch.io/pico-8-fanzine-1) with code and interviews. \n\nAfter I'd poked at a dozen-odd carts and browsed through the zines, I thought I should give it a go myself. I didn't know much Lua, but it's an easy language to pick up. Simpler than JavaScript, [but it beats revisiting BASIC][BASICtweet] - even my old favorite [Simons' BASIC](https://en.wikipedia.org/wiki/Simons%27_BASIC), which has a surprising amount in common with this modern day system. \n\nI also decided to be masochistic by coding directly on the PocketC.H.I.P. Later, when my fingers vetoed further typing on metal domes, I plugged in a USB keyboard. As things got more complex, I broke down and bought the main edition of Pico-8 to move to a bigger screen. It's not Free Software or even Free-as-in-Beer. But, [it's only US$14.99](http://www.lexaloffle.com/pico-8.php#getpico8). That single purchase gave me access to versions for my PC, Mac, and Linux machines. \n\n(There's even a Raspberry PI version - which gives me ideas for building a Pico-8 multicade machine. But, that's a story for another post.)\n\nOn my PC, I discovered `.p8` cartridges are just text files I can edit in Vim! With that revelation, [I created a GitHub repo][p8repo] and started saving my work there. Things have come a long way since I only had a tape drive to work with on my C64!\n\n[BASICtweet]: https://twitter.com/lmorchard/status/766870582856081409\n[p8repo]: https://github.com/lmorchard/Pico-8-Carts\n\nA couple of days later, I had a promising start:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Just in case I don&#39;t work on it any further, here&#39;s Poke the Mongo v0.1! <a href=\"https://t.co/Qgn0p2ZCep\">https://t.co/Qgn0p2ZCep</a> <a href=\"https://t.co/rGtP6UCf5p\">pic.twitter.com/rGtP6UCf5p</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/767604122388279296\">August 22, 2016</a></blockquote>\n\n## Share and enjoy!\n\nThere are a few more things I discovered in composing that tweet:\n\n1. Pico-8 has easy built-in video recording that renders animated GIFs to my desktop. <kbd>F3</kbd> to start, <kbd>F4</kbd> to save - and I'm ready to tweet little moments while I hack.\n\n1. Pico-8 cartridges can be exported as images. <img class=\"inset right\" style=\"width: inherit\" src=\"/uploads/2016/poke-the-mongo/poke-the-mongo.p8.png\" /> The code for my game is encoded in that PNG with [a steganography technique that subtly tweaks pixel color bits](https://twitter.com/lexaloffle/status/611581098900897793). As long as no intermediaries corrupt the hidden encoding, I can share this game cartridge by uploading the image.\n\n1. Apropos of that, Lexaloffle has forums - a BBS - where folks post & discuss their Pico-8 carts. [You can find mine over here][mongobbs]!\n\n1. Inside Pico-8 is a mode called \"Splore\" which connects to the Lexaloffle BBS to let you browse uploaded carts from the console. So, when I uploaded my game, it was instantly available to everyone else with Pico-8!\n\nPico-8 is game making as a social activity, and the system has all the batteries included.\n\n## Game making is a fun game\n\nAs I tinkered, it occurred to me that Pico-8 is less a serious game development system and more a game about making games. Through intentional constraints & platform quirks, it offers offer creative hooks & puzzles.\n\nThe constraints mean it's not as easy to get lost in options or feel overwhelmed. For example, [here's a Pico-8 API cheatsheet](https://neko250.github.io/pico8-api/) - it's pretty much all I've needed! It's also hard to build anything huge, so there's less of a compulsion to go beyond doodles or a few specific game mechanics. I can make something derpy but good enough and move on without stressing about my artistic skills.\n\nBut also, some folks have found ways to really push the boundaries of the system - and that is a puzzle in itself. It's great to get a fresh dose of that old school awe from seeing a clever hack make the machine do something it wasn't meant to do. It's akin to seeing someone pull off some nasty moves in game streams where I know just enough to realize what's happening.\n\nI'm nowhere near that level of Pico-8 mastery, but it could be interesting to dive into some of the things I've learned so far. But, I'll save that for yet another post.\n\n## Play my game!\n\nPico-8 games can also be exported to HTML5 and JavaScript. This embedded web player consists of the game code and an Emscripten-compiled version of the Pico-8 engine. So, [because the web is awesome][webawesome], even if Pico-8 goes away this copy of my game will continue working long after:\n\n<iframe class=\"lazyload\" style=\"width: 100%; height: 420px\" scrolling=\"no\" frameborder=\"0\" allowfullscreen data-src=\"/uploads/2016/poke-the-mongo/pokethemongo.html\"></iframe>\n\nI've also read that the folks behind Pico-8 aren't particularly hostile to others cloning the system - which has lead to things like [PICOLOVE](https://github.com/picolove/picolove), an independent implementation of the Pico-8 APIs for another Lua-based game system. I've seen a few folks leverage that to get their games running on Android, so I'll have to check that out at some point.\n\nAnyway, I've got a few more things to add, but I think this game is getting pretty close to where I want it to be. It's all gone much faster than I expected, so I'm looking forward to trying more ideas. \n\nUntil then, let me know how you like Poke the Mongo, and I'll follow up with a more in-depth look at how I made this thing!\n\n[webawesome]: /2015/08/07/web-awesome/\n[mongobbs]: http://www.lexaloffle.com/bbs/?tid=4111\n\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown formatoptions-=t textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/09/11/poke-the-mongo",
    "summary": "<p><strong>TL;DR</strong>: I started writing a video game for a fantasy console. The future is weird.</p>\n"
  },
  {
    "title": "On the Yak Shaving Habits of a Writer",
    "tags": [
      "writing",
      "procrastination",
      "insanity",
      "yaks"
    ],
    "thumbnail": "/blog.lmorchard.com/uploads/2016/shaven-yak.jpg",
    "year": "2016",
    "month": "08",
    "day": "31",
    "isDir": false,
    "slug": "yak-shaving-habits",
    "date": "2016-08-31T12:00:00.000Z",
    "postName": "2016-08-31-yak-shaving-habits",
    "html": "<p><strong>TL;DR</strong>: Writing is apparently so important to me that I procrastinate like crazy rather than risk failing at it.</p>\n<!--more-->\n\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/28744583274/in/datetaken/\" title=\"The shaven yak\"><img src=\"https://c3.staticflickr.com/9/8339/28744583274_3736faf0d9_c.jpg\" class=\"fullwidth\" alt=\"The shaven yak\"></a></p>\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>In composing this, I fully recognize the danger of disappearing up my own backside. The thing is, I want to write more. And, it was pretty cool I managed to get something posted last night. But, the process of doing so ended up way more convoluted than it should have been. So, I want to share the story and invite public ridicule.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">So I told myself that I should do some writing tonight, but now that it&#39;s tonight all I want to do is drink booze and play video games.</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/770771394816729088\">August 30, 2016</a></blockquote>\n\n<p>It started with yesterday morning&#39;s journal pages. I told myself it was a good night to get this done. I made plans to start working on it after dinner.  I cooked dinner. I ate dinner and had a beer. I sat down on the couch... and all I wanted to do was anything else but write.</p>\n<h2 id=\"recursive-yak-shaving\">Recursive yak shaving</h2>\n<p>Let&#39;s see, what did I do instead? I&#39;d mused in my journal that I needed a different venue to get myself into the ritual mindset to write. I write my daily pages at the kitchen island over breakfast. That&#39;s a way easier environment for focusing on that task than my workaday desk with my laptop and all that entails.</p>\n<p>So, that means I went to the kitchen island with notebook &amp; pen and started writing, right? Nope. </p>\n<p>I went to the basement to dig out an old laptop. I wanted something to write a blog post with fewer distractions. I dug up a ChromeBook, a MacBook, and an Android tablet with a keyboard. Surely one of those things would be handy for writing! (Why I didn&#39;t also dig up <a href=\"http://www.tankraider.com/DOSPALMTOP/prolinearps1000.html\">my old 80x24 DOS palmtop from 1993</a>, I&#39;m not sure. That thing&#39;s nifty and I used to write with it back in college!)</p>\n<div class=\"pullquote right\">\nSo, that means I went to the kitchen island with notebook & pen and started writing, right? Nope. \n</div>\n\n<p>On the way out of the basement, I noticed the unassembled comic book boxes I&#39;d been meaning to put together. So, I put them together. I considered reorganizing some comics from their 20+ year old boxes into the new ones. But, no, I decided: That was too far off task. I&#39;ll get to that later.</p>\n<p>Continuing on, I considered my Tempest arcade machine. The screen&#39;s still not working on that thing, and I&#39;ve been meaning to fix it most of the last year. I moved to pop open the back, but stopped. Again, too far off task!</p>\n<p>I made it upstairs with the laptops and the tablet. I got to the kitchen and plugged things in to charge. The tablet wouldn&#39;t get past the boot-up screen. Okay, forget the tablet. The MacBook booted into... Ubuntu Linux? I forgot I did that with this machine. I forgot my password. Wi-fi didn&#39;t work. Deal with that later. </p>\n<p>The ChromeBook booted up fine. But, for some reason, I suddenly decided it needed to have <a href=\"https://github.com/dnschneid/crouton\">Crouton</a> and Ubuntu installed. You know, so I could run git &amp; node &amp; gulp to preview my blog post and publish when I was done. So, I started on that. <a href=\"https://github.com/dnschneid/crouton\">Crouton</a>&#39;s nifty and it was up &amp; running with less fuss than I expected. I got all my tools installed, and had my blog building before I knew it.</p>\n<p>Then, around 10pm, I moved back to the couch and my Windows PC. I opened up a text editor, a shell running my blog, and a browser for previews - all of which, mind you, I&#39;ve had set up and working fine on that Windows machine for the past year at least. I put on headphones and started <a href=\"https://open.spotify.com/album/16MILExMR5RIvzTIII2YnH\">Killing Joke</a> on Spotify. I assembled photos and drafted the blog post for GameChord. Finally, around 3am, I published it. Then, I went to bed.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Finally wrote about GameChord, the little 1-handed keypad I made this summer <a href=\"https://t.co/fUCv6o5M6l\">https://t.co/fUCv6o5M6l</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/770881246020800512\">August 31, 2016</a></blockquote>\n\n<p>So, umm, yeah. Did you notice that I never used the tablet, the MacBook, or the ChromeBook at any point? The comic books didn&#39;t come in handy, either.</p>\n<h2 id=\"building-high-pedestals\">Building high pedestals</h2>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/28511732042/in/datetaken-public/\" title=\"20160728_200320\"><img src=\"https://c3.staticflickr.com/9/8782/28511732042_815448af85.jpg\" alt=\"20160728_200320\" class=\"inset wide right\"></a></p>\n<p>Recently, <a href=\"https://www.flickr.com/photos/deusx/28511732042/in/datetaken-public/\">I built worktables out of 2x4s and plywood</a>. It was my first time really working with wood since shop class in High School. But, I did it: Found plans. Found a lumberyard. Got lumber &amp; tools. Picked a weekend and got super sweaty in the garage making lots of mistakes with wood. I produced a pair of crude but solid worktables.</p>\n<p>Building GameChord was similar: I started researching &amp; tinkering until I had something working. I even managed to get myself out of the house to talk to actual people and join up as a member at <a href=\"https://i3detroit.org/\">i3Detroit</a>. No small measure of social terror involved, there. It took me a few months, but I managed to move the project along to completion.</p>\n<p>But, somehow, the notion of writing drives me to insane <a href=\"http://www.catb.org/~esr/jargon/html/Y/yak-shaving.html\">yak shaving</a> diversions in the basement. </p>\n<p>This morning, back at the kitchen island, I had a post-mortem over coffee. What I managed to wring out of myself is that I&#39;ve stuck writing up on a scary high pedestal.</p>\n<p>If I don&#39;t make another table or keyboard, that&#39;s cool: I&#39;ve never considered myself <strong>A Woodworker</strong> or <strong>A Keyboard Maker</strong>. Those things aren&#39;t as crucial to my self-image, I guess. For as long as I can remember, though, I&#39;ve wanted to be <strong>A Writer</strong>. The trouble is that actually engaging in the process of writing means I might discover that, you know, I might be <strong>Not A Writer</strong>.</p>\n<h2 id=\"how-to-get-past-this\">How to get past this?</h2>\n<p>The funny thing is that I <em>have</em> written a bunch. I really like words. I&#39;ve been told I&#39;m good at it. <a href=\"http://amzn.to/2bW4moK\">A book publisher even paid me for it, more than once!</a></p>\n<p>I also know I produce some terrible stuff. But, writers I admire have admitted the same. The key is to just keep writing and get better. Clean up the junk in editing.</p>\n<p>What to do, then, to stop all the procrastination &amp; avoidance?</p>\n<p>The best answer I have is nothing clever: Write more. No lifehacks. Just get over myself and write more. Be a writer by writing and let the failure wash over me. Then write some more - maybe even write about feeling like a failure. Write embarassing things and invite ridicule. Disappear up my own backside and turn inside out. (Wait, that last one sounds unpleasant. I should edit that out.)</p>\n<p>Anyway, I guess I don&#39;t really have a conclusion. Do you, dear reader, have any better advice? I&#39;d like to hear it.</p>\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: Writing is apparently so important to me that I procrastinate like crazy rather than risk failing at it.\n\n<!--more-->\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/28744583274/in/datetaken/\" title=\"The shaven yak\"><img src=\"https://c3.staticflickr.com/9/8339/28744583274_3736faf0d9_c.jpg\" class=\"fullwidth\" alt=\"The shaven yak\"></a>\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nIn composing this, I fully recognize the danger of disappearing up my own backside. The thing is, I want to write more. And, it was pretty cool I managed to get something posted last night. But, the process of doing so ended up way more convoluted than it should have been. So, I want to share the story and invite public ridicule.\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">So I told myself that I should do some writing tonight, but now that it&#39;s tonight all I want to do is drink booze and play video games.</p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/770771394816729088\">August 30, 2016</a></blockquote>\n\nIt started with yesterday morning's journal pages. I told myself it was a good night to get this done. I made plans to start working on it after dinner.  I cooked dinner. I ate dinner and had a beer. I sat down on the couch... and all I wanted to do was anything else but write.\n\n## Recursive yak shaving\n\nLet's see, what did I do instead? I'd mused in my journal that I needed a different venue to get myself into the ritual mindset to write. I write my daily pages at the kitchen island over breakfast. That's a way easier environment for focusing on that task than my workaday desk with my laptop and all that entails.\n\nSo, that means I went to the kitchen island with notebook & pen and started writing, right? Nope. \n\nI went to the basement to dig out an old laptop. I wanted something to write a blog post with fewer distractions. I dug up a ChromeBook, a MacBook, and an Android tablet with a keyboard. Surely one of those things would be handy for writing! (Why I didn't also dig up [my old 80x24 DOS palmtop from 1993](http://www.tankraider.com/DOSPALMTOP/prolinearps1000.html), I'm not sure. That thing's nifty and I used to write with it back in college!)\n\n<div class=\"pullquote right\">\nSo, that means I went to the kitchen island with notebook & pen and started writing, right? Nope. \n</div>\n\nOn the way out of the basement, I noticed the unassembled comic book boxes I'd been meaning to put together. So, I put them together. I considered reorganizing some comics from their 20+ year old boxes into the new ones. But, no, I decided: That was too far off task. I'll get to that later.\n\nContinuing on, I considered my Tempest arcade machine. The screen's still not working on that thing, and I've been meaning to fix it most of the last year. I moved to pop open the back, but stopped. Again, too far off task!\n\nI made it upstairs with the laptops and the tablet. I got to the kitchen and plugged things in to charge. The tablet wouldn't get past the boot-up screen. Okay, forget the tablet. The MacBook booted into... Ubuntu Linux? I forgot I did that with this machine. I forgot my password. Wi-fi didn't work. Deal with that later. \n\nThe ChromeBook booted up fine. But, for some reason, I suddenly decided it needed to have [Crouton][] and Ubuntu installed. You know, so I could run git & node & gulp to preview my blog post and publish when I was done. So, I started on that. [Crouton][]'s nifty and it was up & running with less fuss than I expected. I got all my tools installed, and had my blog building before I knew it.\n\nThen, around 10pm, I moved back to the couch and my Windows PC. I opened up a text editor, a shell running my blog, and a browser for previews - all of which, mind you, I've had set up and working fine on that Windows machine for the past year at least. I put on headphones and started [Killing Joke][] on Spotify. I assembled photos and drafted the blog post for GameChord. Finally, around 3am, I published it. Then, I went to bed.\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Finally wrote about GameChord, the little 1-handed keypad I made this summer <a href=\"https://t.co/fUCv6o5M6l\">https://t.co/fUCv6o5M6l</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/770881246020800512\">August 31, 2016</a></blockquote>\n\n[killing joke]: https://open.spotify.com/album/16MILExMR5RIvzTIII2YnH\n\nSo, umm, yeah. Did you notice that I never used the tablet, the MacBook, or the ChromeBook at any point? The comic books didn't come in handy, either.\n\n## Building high pedestals\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/28511732042/in/datetaken-public/\" title=\"20160728_200320\"><img src=\"https://c3.staticflickr.com/9/8782/28511732042_815448af85.jpg\" alt=\"20160728_200320\" class=\"inset wide right\"></a>\n\nRecently, [I built worktables out of 2x4s and plywood][worktables]. It was my first time really working with wood since shop class in High School. But, I did it: Found plans. Found a lumberyard. Got lumber & tools. Picked a weekend and got super sweaty in the garage making lots of mistakes with wood. I produced a pair of crude but solid worktables.\n\n[worktables]: https://www.flickr.com/photos/deusx/28511732042/in/datetaken-public/\n\nBuilding GameChord was similar: I started researching & tinkering until I had something working. I even managed to get myself out of the house to talk to actual people and join up as a member at [i3Detroit][]. No small measure of social terror involved, there. It took me a few months, but I managed to move the project along to completion.\n\nBut, somehow, the notion of writing drives me to insane [yak shaving][] diversions in the basement. \n\nThis morning, back at the kitchen island, I had a post-mortem over coffee. What I managed to wring out of myself is that I've stuck writing up on a scary high pedestal.\n\nIf I don't make another table or keyboard, that's cool: I've never considered myself **A Woodworker** or **A Keyboard Maker**. Those things aren't as crucial to my self-image, I guess. For as long as I can remember, though, I've wanted to be **A Writer**. The trouble is that actually engaging in the process of writing means I might discover that, you know, I might be **Not A Writer**.\n\n## How to get past this?\n\nThe funny thing is that I *have* written a bunch. I really like words. I've been told I'm good at it. [A book publisher even paid me for it, more than once!](http://amzn.to/2bW4moK)\n\nI also know I produce some terrible stuff. But, writers I admire have admitted the same. The key is to just keep writing and get better. Clean up the junk in editing.\n\nWhat to do, then, to stop all the procrastination & avoidance?\n\nThe best answer I have is nothing clever: Write more. No lifehacks. Just get over myself and write more. Be a writer by writing and let the failure wash over me. Then write some more - maybe even write about feeling like a failure. Write embarassing things and invite ridicule. Disappear up my own backside and turn inside out. (Wait, that last one sounds unpleasant. I should edit that out.)\n\nAnyway, I guess I don't really have a conclusion. Do you, dear reader, have any better advice? I'd like to hear it.\n\n[i3Detroit]: https://i3detroit.org/\n[Crouton]: https://github.com/dnschneid/crouton\n[yak shaving]: http://www.catb.org/~esr/jargon/html/Y/yak-shaving.html\n\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap linebreak nolist wrapmargin=0 textwidth=0 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/08/31/yak-shaving-habits",
    "summary": "<p><strong>TL;DR</strong>: Writing is apparently so important to me that I procrastinate like crazy rather than risk failing at it.</p>\n"
  },
  {
    "title": "Making of the GameChord",
    "tags": [
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "thumbnail": "/blog.lmorchard.com/uploads/2016/gamechord/thumbnail.jpg",
    "year": "2016",
    "month": "08",
    "day": "29",
    "isDir": false,
    "slug": "gamechord",
    "date": "2016-08-29T12:00:00.000Z",
    "postName": "2016-08-29-gamechord",
    "html": "<p><strong>TL;DR</strong>: I made a USB keypad that&#39;s good for gaming and typing entirely with\none hand.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>So, remember back in February when I said that <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">keyboard hacking seems like\nfun</a>?  Well, I\nfinished this GameChord thing back in July after about 5 months of occasional\nwork. But, I&#39;ve been too busy <a href=\"https://twitter.com/lmorchard/status/770771394816729088\">drinking booze\nand playing video games</a> \nto get my butt in a chair and write about it.</p>\n<p>Let&#39;s see if I can fix that now...</p>\n<h2 id=\"the-design\">The design</h2>\n<p><a href=\"http://www.keyboard-layout-editor.com/##@_name=gamechord&amp;author=lmorchard;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@_r:35&amp;rx:2.5&amp;ry:3.5&amp;y:-1&amp;x:1;&amp;=a&amp;=b&amp;=c\"><img class=\"inset left\"\nsrc=\"/uploads/2016/gamechord/keyboard-layout.png\"></a></p>\n<p>I started doodling with key layouts and <a href=\"http://www.keyboard-layout-editor.com/##@_name=gamechord&amp;author=lmorchard;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@_r:35&amp;rx:2.5&amp;ry:3.5&amp;y:-1&amp;x:1;&amp;=a&amp;=b&amp;=c\">came up with\nthis</a>. Only 18 switches, but enough for gaming. At the\ntime, I was putting a lot of hours into Elite\nDangerous, so this felt promising as a spaceship control pad.<br><a href=\"https://www.flickr.com/photos/deusx/24872268889/\"><img class=\"inset right\" src=\"/uploads/2016/gamechord/paper-planning.jpg\"></a></p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24781232904/in/datetaken-public/\"><img class=\"inset right\" src=\"/uploads/2016/gamechord/cats-happen.jpg\"></a></p>\n<p>Over on <a href=\"http://builder.swillkb.com/\">builder.swillkb.com</a>, I plonked in the JSON from <a href=\"http://www.keyboard-layout-editor.com/##@_name=gamechord&amp;author=lmorchard;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@=1&amp;=2&amp;=3&amp;=4&amp;=5;&amp;@_r:35&amp;rx:2.5&amp;ry:3.5&amp;y:-1&amp;x:1;&amp;=a&amp;=b&amp;=c\">Keyboard\nLayout Editor</a> and came up with some SVG files that printed\nup nicely.</p>\n<p>That gave me a paper mockup of a mounting plate for key switches. I had some\nclear keycaps, so I dropped them onto the paper to get a sense for how it\nwould feel under my hand.</p>\n<p>Of course, cats happen - so those keycaps didn&#39;t stay put for very long. But,\nthat&#39;s okay. Nothing wandered off too far, and I got what I needed from\nthe mess on my desk.</p>\n<h2 id=\"making-the-case\">Making the case</h2>\n<p>Back when <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">I first started thinking about building a\nkeyboard</a>, I\nassumed I&#39;d send off whatever design files I came up with to a place\nlike <a href=\"https://www.ponoko.com/\">Ponoko</a> and get the mounting plate made for me.</p>\n<p>Prices at those places were just a bit higher than I liked, though. I also\nsuspected things wouldn&#39;t work with my first attempt. I wanted to be able\nto iterate without it taking days or weeks to learn from my mistakes\nand refine.</p>\n<p>That&#39;s when I remembered <a href=\"https://i3detroit.org\">i3Detroit</a> was just down the road. I&#39;d been\nmeaning to get over there for a couple of years: Among other things, the space\nhas <a href=\"https://www.i3detroit.org/wiki/Category:Laser_Cutter\">nice laser cutters</a> that I really wish I&#39;d used <a href=\"http://blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/\">back when\nI butchered some plastic to make a terrible PC monitor case</a>. </p>\n<p>A month or so later, I&#39;d gotten through the new member onboarding process\nand a few training sessions with the laser cutter. I had some\nacrylic sheets still on hand, so I gave my design a shot:</p>\n<p><a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/25839524664/\" title=\"Cutting a keyboard mounting plate on a laser cutter\"><img src=\"https://c1.staticflickr.com/2/1506/25839524664_3250860a23_c.jpg\" width=\"800\" height=\"450\" alt=\"Cutting a keyboard mounting plate on a laser cutter\"></a></p>\n<p>Pretty sure I had the power too high and the speed too low for the run\nin this video. But, the result was not too bad for a first attempt.  I had a\nfew dozen Cherry MX Clear switches to play with, so I snapped them into the\nplate and put on the keycaps I&#39;d used in the paper mockup earlier:</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/clear-keycaps.jpg\">\n\n<p>Still lots of work ahead, but I was feeling pretty accomplished after taking\nthis little glamour shot. I even took it into an <a href=\"https://i3detroit.org\">i3Detroit</a> member meeting\nfor show &amp; tell.</p>\n<h2 id=\"re-making-the-case\">Re-making the case</h2>\n<p>At this point, I&#39;d already heard the term &quot;kerf&quot;. Like a saw blade, the laser\nhas a width that destroys material while cutting. You want that on the\n<em>inside</em> edge of something like a key switch mounting hole, in order to keep\nthe dimensions correct. Unlike a blade, the laser is a cylindrical\nbeam that passes through a lens to form <a href=\"http://www.buildlog.net/blog/2013/05/why-are-my-laser-cut-edges-not-straight/\">something like an\nhourglass</a>. So, the\nkerf&#39;s shape depends on the lens focal length and the conical section that\nintersects with the material.</p>\n<p>Well, I didn&#39;t account for the kerf well enough in my first plate. All the key\nswitches were wobbly. Some would just fall out if I flipped\nthe thing over. Time for some of those iterations I\nfigured I&#39;d have to end up doing.</p>\n<img class=\"inset wide right\" src=\"/uploads/2016/gamechord/kerf-is-real.jpg\">\n\n<p>I know the saying is &quot;measure twice, cut once&quot; - but in this case it was\neasier to measure by cutting! I tried mounting holes with a sampling of kerf\nwidths until I found one that matched the key switch tolerances. Not so snug\nthat it cracked the plate, but not so loose that it wiggled or fell out. </p>\n<p>Once I found a good laser focus and figured out the kerf, I\nattacked another sheet of acrylic with the laser to produce another\niteration of the case.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/26975072884/\"><img class=\"fullwidth\" src=\"/uploads/2016/gamechord/glamour-shot.jpg\"></a></p>\n<p>Two changes you might notice: I added slots to glue in some socket\nheaders, so I could unplug or replace the Teensy without soldering. I also found some\n<a href=\"http://dro.ps/b/x3g0KCy\">relegendable keycaps</a> on Massdrop - they have little removable covers that\ntake 14mm paper squares. I figured that would come in handy for crazy\nkey layouts I might come up with.</p>\n<h2 id=\"wiring-up-the-key-matrix\">Wiring up the key matrix</h2>\n<p>I haven&#39;t learned how to design circuit boards yet, so I figured I&#39;d just\nhandwire this <a href=\"https://www.youtube.com/watch?v=MrokZ1afnVg\">like I saw in the video</a>. Only 18 switches, so\nhow bad could it be?\nTurns out, it&#39;s rather annoying. Interesting exercise with my terrible old\nRadio Shack soldering iron. </p>\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/matrix-wired-up.jpg\">\n\n\n<p>I think I&#39;d much rather get over that PCB fabrication hurdle for when I try\nscaling this up to a 60% keyboard like my HHKB.</p>\n<p>The technique here involves first building up rows of diodes across the\nright-hand pin of every key switch. The diodes serve to prevent <a href=\"https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\">ghosting when\nmultiple keys are pressed</a>. </p>\n<p>Then, I stripped sections of wires to\nrun as columns down the left-hand pin of the switches. </p>\n<p>The remaining\ninsulation ensures the column wires don&#39;t short against the row diodes.</p>\n<h2 id=\"wiring-up-the-teensy\">Wiring up the Teensy</h2>\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/teensy-wired-up.jpg\">\n\n<p>This matrix gives me 4 rows (counting the thumb switches) and 5 columns - or 9\nI/O pins to scan 18 switches.</p>\n<p>Except for <a href=\"https://geekhack.org/index.php?topic=72804.0\">magical PD6</a> - which is hardwired to an onboard LED - just\nabout every pin is fair game on the Teensy for rows or columns. </p>\n<p>So, I tried to pick a set that would be easiest to route wires. Since this\ncase is transparent, I wanted to keep things visually interesting with\ndifferent colored wires and a neat shape to the runs.</p>\n<p>Of course, I botched things a bit and marred the acrylic by splashing\nsolder and slipping with the iron a few times. But, maybe no one will really\nnotice.</p>\n<p>If I had to do this over again - and I <em>still</em> hadn&#39;t learned how to make a\nPCB - I&#39;d probably try using something thinner like <a href=\"https://www.adafruit.com/product/1446\">30AWG repair\nwire</a>. That seems like it would thread through the spaces much\nbetter, which would be even more important for a board with many more\nswitches. </p>\n<h2 style=\"clear: both\">Programming the Teensy</h2>\n\n<p>I based <a href=\"https://github.com/lmorchard/gamechord\">the GameChord firmware</a> on the great <a href=\"https://github.com/tmk/tmk_keyboard\">tmk\nfirmware</a> that seems popular on mech keyboard forums.</p>\n<p>Building <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/matrix.c\">the matrix</a> was easy: The firmware scans through rows (DF0, DF1,\nDF4, and DF5) by pulling each low in turn. The columns (DB4, DB5, DB6, DF7,\nand DF6) are set as &quot;active low&quot; pins - which means keys pressed in the\ncurrent scan row get connected to ground and read as signals. So,\nI wrote the functions to manipulate &amp; read the appropriate row &amp; column pins,\nrespectively. </p>\n<p>It was almost <em>too</em> easy:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Holy crap. My attempt at setting up firmware for my newly wired DIY keypad worked first time. How does this happen. <a href=\"https://t.co/xWESzku4Lp\">https://t.co/xWESzku4Lp</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/746518856328372225\">June 25, 2016</a></blockquote>\n\n<p>From there, I built <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_plain.c\">a dead simple key map</a> with just enough\nkeys to play <a href=\"https://playoverwatch.com/en-us/\">Overwatch</a>:</p>\n<pre><code class=\"language-c\">#include &quot;keymap_common.h&quot;\n\nconst uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    KEYMAP( ESC,   1,    2,    3,    T, \\\n            TAB,   Q,    W,    E,    R, \\\n           LSFT,   A,    S,    D,    F, \\\n             NO,  NO, LCTL,  SPC,    C),\n};\nconst uint16_t PROGMEM fn_actions[] = {};</code></pre>\n<p>I got it all working and had myself a nice evening of pushing carts and taking\nobjectives.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/test-run-on-gaming-station.jpg\">\n\n<h2 id=\"going-crazy-with-chording\">Going crazy with chording</h2>\n<p>I had all these <a href=\"http://dro.ps/b/x3g0KCy\">relegendable keycaps</a> and this crazy flexible <a href=\"https://github.com/tmk/tmk_keyboard\">tmk\nfirmware</a> - so I decided to try implementing <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c\">a complex and fully impractical\nkeymap based on chords with the thumb keys</a>.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/finished-key-legends.jpg\">\n\n<p>Given two thumb keys in combination, I can get 4 layers out of the other 15\nkeys - for a total of 60 keys. The firmware also <a href=\"https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c#L43\">lets me distinguish\nbetween keys held or just tapped</a>, which gives me a few more layers or\nmodifier keys.</p>\n<p>Long story short, I can get most of the functionality of a regular keyboard\nout of just one hand. All I have to do is just get used to putting my left\nhand through some very awkward and uncomfortable contortions until I get up to\nfull typing speed!</p>\n<p><a href=\"http://blog.lmorchard.com/2016/02/05/steam-controller/\">As I&#39;ve written before</a>, I do really like odd input devices.\nBut, this got old fast. This isn&#39;t so much a practical peripheral as a thing I\ndid because I could. It gave me an excuse to explore the firmware more\nand to use Inkscape to design some legends for my nifty keycaps.</p>\n<h2 id=\"showing-it-off\">Showing it off</h2>\n<p>And just to wrap things up, this happened:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I even have a project out in the <a href=\"https://twitter.com/i3Detroit\">@i3Detroit</a> tent at <a href=\"https://twitter.com/hashtag/MakerFaireDetroit?src=hash\">#MakerFaireDetroit</a> ! <a href=\"https://t.co/v0goD3DCBk\">pic.twitter.com/v0goD3DCBk</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/759400946514427904\">July 30, 2016</a></blockquote>\n\n<p>This was the first summer I went to <a href=\"http://www.makerfairedetroit.com/\">Maker Faire Detroit</a> as a Maker. I\nhelped for a bit at the <a href=\"https://i3detroit.org\">i3Detroit</a> tent, mainly just standing and smiling\nat the front table as folks walked in. But, I had my little keyboard out there\non a table, with a project card and everything.</p>\n<p>It and I were only there for a handful of hours, but it&#39;s pretty satisfying to\nhave actually gotten this thing done!</p>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I made a USB keypad that's good for gaming and typing entirely with\none hand.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nSo, remember back in February when I said that [keyboard hacking seems like\nfun][keyboardhacking]?  Well, I\nfinished this GameChord thing back in July after about 5 months of occasional\nwork. But, I've been too busy [drinking booze\nand playing video games](https://twitter.com/lmorchard/status/770771394816729088) \nto get my butt in a chair and write about it.\n\nLet's see if I can fix that now...\n\n[keyboardhacking]: http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\n\n## The design\n\n[<img class=\"inset left\"\nsrc=\"/uploads/2016/gamechord/keyboard-layout.png\">][layoutpermalink]\n\nI started doodling with key layouts and [came up with\nthis][layoutpermalink]. Only 18 switches, but enough for gaming. At the\ntime, I was putting a lot of hours into Elite\nDangerous, so this felt promising as a spaceship control pad.  \n[<img class=\"inset right\" src=\"/uploads/2016/gamechord/paper-planning.jpg\">](https://www.flickr.com/photos/deusx/24872268889/)\n\n[<img class=\"inset right\" src=\"/uploads/2016/gamechord/cats-happen.jpg\">](https://www.flickr.com/photos/deusx/24781232904/in/datetaken-public/)\n\nOver on [builder.swillkb.com][builder], I plonked in the JSON from [Keyboard\nLayout Editor][layoutpermalink] and came up with some SVG files that printed\nup nicely.\n\nThat gave me a paper mockup of a mounting plate for key switches. I had some\nclear keycaps, so I dropped them onto the paper to get a sense for how it\nwould feel under my hand.\n\nOf course, cats happen - so those keycaps didn't stay put for very long. But,\nthat's okay. Nothing wandered off too far, and I got what I needed from\nthe mess on my desk.\n\n[builder]: http://builder.swillkb.com/\n\n## Making the case\n\nBack when [I first started thinking about building a\nkeyboard][keyboardhacking], I\nassumed I'd send off whatever design files I came up with to a place\nlike [Ponoko](https://www.ponoko.com/) and get the mounting plate made for me.\n\nPrices at those places were just a bit higher than I liked, though. I also\nsuspected things wouldn't work with my first attempt. I wanted to be able\nto iterate without it taking days or weeks to learn from my mistakes\nand refine.\n\nThat's when I remembered [i3Detroit][] was just down the road. I'd been\nmeaning to get over there for a couple of years: Among other things, the space\nhas [nice laser cutters][lasercutters] that I really wish I'd used [back when\nI butchered some plastic to make a terrible PC monitor case][monitorcase]. \n\n[lasercutters]: https://www.i3detroit.org/wiki/Category:Laser_Cutter\n[monitorcase]: http://blog.lmorchard.com/2013/02/10/building-my-couch-computing-station/\n[i3Detroit]: https://i3detroit.org\n\nA month or so later, I'd gotten through the new member onboarding process\nand a few training sessions with the laser cutter. I had some\nacrylic sheets still on hand, so I gave my design a shot:\n\n<a data-flickr-embed=\"true\"  href=\"https://www.flickr.com/photos/deusx/25839524664/\" title=\"Cutting a keyboard mounting plate on a laser cutter\"><img src=\"https://c1.staticflickr.com/2/1506/25839524664_3250860a23_c.jpg\" width=\"800\" height=\"450\" alt=\"Cutting a keyboard mounting plate on a laser cutter\"></a>\n\nPretty sure I had the power too high and the speed too low for the run\nin this video. But, the result was not too bad for a first attempt.  I had a\nfew dozen Cherry MX Clear switches to play with, so I snapped them into the\nplate and put on the keycaps I'd used in the paper mockup earlier:\n\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/clear-keycaps.jpg\">\n\nStill lots of work ahead, but I was feeling pretty accomplished after taking\nthis little glamour shot. I even took it into an [i3Detroit][] member meeting\nfor show & tell.\n\n## Re-making the case\n\nAt this point, I'd already heard the term \"kerf\". Like a saw blade, the laser\nhas a width that destroys material while cutting. You want that on the\n*inside* edge of something like a key switch mounting hole, in order to keep\nthe dimensions correct. Unlike a blade, the laser is a cylindrical\nbeam that passes through a lens to form [something like an\nhourglass][beamshape]. So, the\nkerf's shape depends on the lens focal length and the conical section that\nintersects with the material.\n\n[beamshape]: http://www.buildlog.net/blog/2013/05/why-are-my-laser-cut-edges-not-straight/\n\nWell, I didn't account for the kerf well enough in my first plate. All the key\nswitches were wobbly. Some would just fall out if I flipped\nthe thing over. Time for some of those iterations I\nfigured I'd have to end up doing.\n\n<img class=\"inset wide right\" src=\"/uploads/2016/gamechord/kerf-is-real.jpg\">\n\nI know the saying is \"measure twice, cut once\" - but in this case it was\neasier to measure by cutting! I tried mounting holes with a sampling of kerf\nwidths until I found one that matched the key switch tolerances. Not so snug\nthat it cracked the plate, but not so loose that it wiggled or fell out. \n\nOnce I found a good laser focus and figured out the kerf, I\nattacked another sheet of acrylic with the laser to produce another\niteration of the case.\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/glamour-shot.jpg\">](https://www.flickr.com/photos/deusx/26975072884/)\n\nTwo changes you might notice: I added slots to glue in some socket\nheaders, so I could unplug or replace the Teensy without soldering. I also found some\n[relegendable keycaps][] on Massdrop - they have little removable covers that\ntake 14mm paper squares. I figured that would come in handy for crazy\nkey layouts I might come up with.\n\n[relegendable keycaps]: http://dro.ps/b/x3g0KCy\n\n## Wiring up the key matrix\n\nI haven't learned how to design circuit boards yet, so I figured I'd just\nhandwire this [like I saw in the video][handwirevideo]. Only 18 switches, so\nhow bad could it be?\nTurns out, it's rather annoying. Interesting exercise with my terrible old\nRadio Shack soldering iron. \n\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/matrix-wired-up.jpg\">\n\n\nI think I'd much rather get over that PCB fabrication hurdle for when I try\nscaling this up to a 60% keyboard like my HHKB.\n\nThe technique here involves first building up rows of diodes across the\nright-hand pin of every key switch. The diodes serve to prevent [ghosting when\nmultiple keys are pressed][ghosting]. \n\nThen, I stripped sections of wires to\nrun as columns down the left-hand pin of the switches. \n\nThe remaining\ninsulation ensures the column wires don't short against the row diodes.\n\n[handwirevideo]: https://www.youtube.com/watch?v=MrokZ1afnVg\n[ghosting]: https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\n\n## Wiring up the Teensy\n\n<img class=\"inset wide left\" src=\"/uploads/2016/gamechord/teensy-wired-up.jpg\">\n\nThis matrix gives me 4 rows (counting the thumb switches) and 5 columns - or 9\nI/O pins to scan 18 switches.\n\nExcept for [magical PD6][pd6] - which is hardwired to an onboard LED - just\nabout every pin is fair game on the Teensy for rows or columns. \n\nSo, I tried to pick a set that would be easiest to route wires. Since this\ncase is transparent, I wanted to keep things visually interesting with\ndifferent colored wires and a neat shape to the runs.\n\nOf course, I botched things a bit and marred the acrylic by splashing\nsolder and slipping with the iron a few times. But, maybe no one will really\nnotice.\n\nIf I had to do this over again - and I *still* hadn't learned how to make a\nPCB - I'd probably try using something thinner like [30AWG repair\nwire][30awg]. That seems like it would thread through the spaces much\nbetter, which would be even more important for a board with many more\nswitches. \n\n[30awg]: https://www.adafruit.com/product/1446\n\n[pd6]: https://geekhack.org/index.php?topic=72804.0\n\n<h2 style=\"clear: both\">Programming the Teensy</h2>\n\nI based [the GameChord firmware][gamechordfirmware] on the great [tmk\nfirmware][] that seems popular on mech keyboard forums.\n\nBuilding [the matrix][] was easy: The firmware scans through rows (DF0, DF1,\nDF4, and DF5) by pulling each low in turn. The columns (DB4, DB5, DB6, DF7,\nand DF6) are set as \"active low\" pins - which means keys pressed in the\ncurrent scan row get connected to ground and read as signals. So,\nI wrote the functions to manipulate & read the appropriate row & column pins,\nrespectively. \n\nIt was almost *too* easy:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Holy crap. My attempt at setting up firmware for my newly wired DIY keypad worked first time. How does this happen. <a href=\"https://t.co/xWESzku4Lp\">https://t.co/xWESzku4Lp</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/746518856328372225\">June 25, 2016</a></blockquote>\n\nFrom there, I built [a dead simple key map][plainmap] with just enough\nkeys to play [Overwatch][]:\n\n```c\n#include \"keymap_common.h\"\n\nconst uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {\n    KEYMAP( ESC,   1,    2,    3,    T, \\\n            TAB,   Q,    W,    E,    R, \\\n           LSFT,   A,    S,    D,    F, \\\n             NO,  NO, LCTL,  SPC,    C),\n};\nconst uint16_t PROGMEM fn_actions[] = {};\n```\n\nI got it all working and had myself a nice evening of pushing carts and taking\nobjectives.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/test-run-on-gaming-station.jpg\">\n\n[the matrix]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/matrix.c\n[plainmap]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_plain.c\n[gamechordfirmware]: https://github.com/lmorchard/gamechord\n[tmk firmware]: https://github.com/tmk/tmk_keyboard\n[overwatch]: https://playoverwatch.com/en-us/\n\n## Going crazy with chording\n\nI had all these [relegendable keycaps][] and this crazy flexible [tmk\nfirmware][] - so I decided to try implementing [a complex and fully impractical\nkeymap based on chords with the thumb keys][halfqwerty].\n\n[halfqwerty]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c\n\n<img class=\"fullwidth\" src=\"/uploads/2016/gamechord/finished-key-legends.jpg\">\n\nGiven two thumb keys in combination, I can get 4 layers out of the other 15\nkeys - for a total of 60 keys. The firmware also [lets me distinguish\nbetween keys held or just tapped][taps], which gives me a few more layers or\nmodifier keys.\n\n[taps]: https://github.com/lmorchard/gamechord/blob/863295d2cbdbc7052a25e989a77c3448796e67a6/keymap_halfqwerty.c#L43\n\nLong story short, I can get most of the functionality of a regular keyboard\nout of just one hand. All I have to do is just get used to putting my left\nhand through some very awkward and uncomfortable contortions until I get up to\nfull typing speed!\n\n[As I've written before][steamcontroller], I do really like odd input devices.\nBut, this got old fast. This isn't so much a practical peripheral as a thing I\ndid because I could. It gave me an excuse to explore the firmware more\nand to use Inkscape to design some legends for my nifty keycaps.\n\n[steamcontroller]: http://blog.lmorchard.com/2016/02/05/steam-controller/\n\n## Showing it off\n\nAnd just to wrap things up, this happened:\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I even have a project out in the <a href=\"https://twitter.com/i3Detroit\">@i3Detroit</a> tent at <a href=\"https://twitter.com/hashtag/MakerFaireDetroit?src=hash\">#MakerFaireDetroit</a> ! <a href=\"https://t.co/v0goD3DCBk\">pic.twitter.com/v0goD3DCBk</a></p>&mdash; Les Orchard (@lmorchard) <a href=\"https://twitter.com/lmorchard/status/759400946514427904\">July 30, 2016</a></blockquote>\n\nThis was the first summer I went to [Maker Faire Detroit][] as a Maker. I\nhelped for a bit at the [i3Detroit][] tent, mainly just standing and smiling\nat the front table as folks walked in. But, I had my little keyboard out there\non a table, with a project card and everything.\n\nIt and I were only there for a handful of hours, but it's pretty satisfying to\nhave actually gotten this thing done!\n\n[maker faire detroit]: http://www.makerfairedetroit.com/\n[laservideo]: https://www.flickr.com/photos/deusx/25839524664/\n[layoutpermalink]: http://www.keyboard-layout-editor.com/##@_name=gamechord&author=lmorchard;&@=1&=2&=3&=4&=5;&@=1&=2&=3&=4&=5;&@=1&=2&=3&=4&=5;&@_r:35&rx:2.5&ry:3.5&y:-1&x:1;&=a&=b&=c\n\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/08/29/gamechord",
    "summary": "<p><strong>TL;DR</strong>: I made a USB keypad that&apos;s good for gaming and typing entirely with\none hand.</p>\n"
  },
  {
    "title": "How I learned to love spreadsheets in space",
    "tags": [
      "gaming",
      "node",
      "apis",
      "eveonline",
      "eve"
    ],
    "thumbnail": "/blog.lmorchard.com/uploads/2016/spreadsheets-in-space/wallet.PNG",
    "year": "2016",
    "month": "04",
    "day": "17",
    "isDir": false,
    "slug": "spreadsheets-in-space",
    "date": "2016-04-17T12:00:00.000Z",
    "postName": "2016-04-17-spreadsheets-in-space",
    "html": "<p><strong>TL;DR</strong>: I thought it would be fun to fly internet space ships. Instead,\nit&#39;s proven more satisfying to write software and make internet space money.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<h2 id=\"looking-for-a-space-job\">Looking for a space job</h2>\n<p>I&#39;ve had an on-again, off-again relationship with EVE Online over the years.\nI was initially attracted by the opportunities to fly space ships, explore the\nuniverse, and occasionally shoot at things in the company of feral internet\nrandos. </p>\n<p>But, when you shoot at things, they often shoot back. Sometimes, you explode.\nSince space ships cost space money, you&#39;re going to need a steady space income.</p>\n<p>Unless you&#39;ve got disposable money IRL to blow on <a href=\"https://secure.eveonline.com/PLEX/howToUsePlex.aspx\">PLEX</a>, this\nmeans you need to <a href=\"http://wiki.eveuniversity.org/EVE_Careers_101\">find a space job</a>.</p>\n<p><a href=\"http://swiftandbitter.com/eve/wtd/\"><img class=\"fullwidth\" title=\"What to do in EVE Online\" src=\"/uploads/2016/spreadsheets-in-space/eve-wtd.jpg\"></a></p>\n<p>For the most part, I&#39;ve found that space jobs in EVE Online are machines\ndesigned to convert tolerance for tedium into small amounts of space money,\nwith scattered moments of panic to keep you paying attention. In fact, it\nreally seems like space jobs are a clever mechanism to position you as\ncontent for other players:</p>\n<ul>\n<li>Miners are stationary targets for long hours in asteroid fields.</li>\n<li>Mission runners hang out in dangerous space for long periods.</li>\n<li>Haulers travel predictable paths between markets.</li>\n<li>Explorers offer roaming targets in otherwise mostly empty space.</li>\n<li>Traders provide inputs into a lively market simulation.</li>\n</ul>\n<p>Much of EVE Online seems to be in discovering ways to generate fun from space\njobs despite the tedium, and players have been astonishingly creative in doing\nso.</p>\n<h2 id=\"wherein-i-found-the-spreadsheets-in-space\">Wherein I found the spreadsheets in space</h2>\n<p>But, I digress. There are reasons why EVE Online is synonymous with\n&quot;<a href=\"google\">spreadsheets in space</a>&quot; - every space station in EVE has a market.\nMost space jobs lead there: Loot, minerals, salvage, and stolen goods all get\nsold on the market. And, nearly everything you&#39;d want to buy with the proceeds\nof your space job come from the market.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/spreadsheets-in-space/transactions-1.PNG\">\n\n<p>This is where I discovered <a href=\"https://wiki.braveineve.com/public/dojo/wiki/station_trading_complete_guide\">station trading</a>: The price for\nbuying from the market is always higher than selling to the market. It&#39;s like\nretail vs wholesale pricing, but weirder. And, for various reasons, the spread\nbetween these prices can be quite large. So, without ever leaving the station,\nyou can perform <a href=\"https://en.wikipedia.org/wiki/Arbitrage\">arbitrage</a> - i.e. buy low, sell high, pocket the\ndifference.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/spreadsheets-in-space/history-3.PNG\">\n\n<p>One evening, I tried getting into station trading entirely off-the-cuff:</p>\n<ol>\n<li>Click through every item in the market.</li>\n<li>Eyeball the price spread and history.</li>\n<li>Assemble a list of all the items with a decent, stable margin.</li>\n<li>Put up buy orders, babysit them to ensure they&#39;re always slightly higher\nthan competitors. </li>\n<li>Put items up for sale as buy orders are fulfilled.</li>\n<li>Babysit sell orders to ensure they&#39;re always slightly lower than competitors. </li>\n<li>Profit!</li>\n</ol>\n<h2 id=\"this-looks-like-a-job-for-a-machine\">This looks like a job for a machine</h2>\n<p>As with most space jobs, there is a generous helping of tedium in trading.  It\nimmediately occurred to me that this would be better done by a computer. Why\nclick through all these items one-by-one, when an algorithm could zip through\nand serve up a list of high-margin items in seconds?</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/spreadsheets-in-space/shell.PNG\" style=\"width: 100%\">\n\n<p>Of course, in many games, this would be considered cheating. I remember the\ncontroversy back in the 80s &amp; 90s when &quot;<a href=\"https://www.google.com/search?q=%22tradewars+2002%22+helpers\">helpers</a>&quot; first started appearing for\n<a href=\"http://www.tradewars.com/default.html\">TradeWars 2002</a>, a game that many cite as an early inspiration for EVE\nOnline. And, indeed, fully automated market bots are a bannable offense in EVE\nOnline - that is, CCP want a human to manually enter all those buy &amp; sell\norders and keep on top of them. </p>\n<p>However, CCP only seem to consider the last mile of automation as\noff limits.  <a href=\"https://eve-central.com/home/develop.html\">Enterprising players</a> and <a href=\"https://eveonline-third-party-documentation.readthedocs.org/en/latest/\">even CCP themselves</a> have\nlong offered web service APIs for things like character and market data.  This\nmeans you can use Excel or Google Spreadsheets or even your own original\nsoftware to pull in this data, run calculations, scan for trade\nopportunities, etc. </p>\n<p>As I read up about all of this, it dawned on me: <strong>This is one of the first\nvideo games I&#39;ve played where software development and algorithms are\nintentionally supported ways to play</strong>!</p>\n<p>Holy crap.</p>\n<h2 id=\"sharpening-the-saw\">Sharpening the saw</h2>\n<p>I&#39;ve always loved writing software to solve problems. And, you can\ndescribe games as problem generators. So, it&#39;s been satisfying to play a\ngame through software development. And, it&#39;s been rewarding to measure that\nsoftware&#39;s effectiveness through my profits in space money.  It feels demented\nto say it, but most days I get more out of my wallet balance in station than\nfrom actually flying a ship.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/spreadsheets-in-space/code-3.PNG\">\n\n<p>It&#39;s had all the nerdy fun of working through puzzles, while also helping\nsharpen the saw on my tech skills. I wasn&#39;t all that familiar with node.js\nbeforehand, but now I&#39;m pretty sharp on it after having applied it to\npractical challenges. I learned a bit of MongoDB and Postgresql to get things\ndone. I&#39;ve played with some JS frameworks to build visualizations for\nmyself, and will probably poke at building some UI for myself in React at some\npoint.</p>\n<p>In the past, my &quot;Hello World&quot; for a new technology stack might have been\ningesting RSS &amp; Atom news feeds to build a River of News. I even used that\nhabit as fodder to write <a href=\"http://amzn.to/1T0lk0p\">my first book</a>. But, these days, I&#39;m finding\nmyself reaching for EVE Online data to provide the test bed for things I want\nto learn. Maybe I&#39;ll find some way to channel this enthusiasm into something\nlike another book or some conference talks. Who knows?</p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I thought it would be fun to fly internet space ships. Instead,\nit's proven more satisfying to write software and make internet space money.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n## Looking for a space job\n\nI've had an on-again, off-again relationship with EVE Online over the years.\nI was initially attracted by the opportunities to fly space ships, explore the\nuniverse, and occasionally shoot at things in the company of feral internet\nrandos. \n\nBut, when you shoot at things, they often shoot back. Sometimes, you explode.\nSince space ships cost space money, you're going to need a steady space income.\n\nUnless you've got disposable money IRL to blow on [PLEX][howplex], this\nmeans you need to [find a space job][spacejob].\n\n[spacejob]: http://wiki.eveuniversity.org/EVE_Careers_101\n[howplex]: https://secure.eveonline.com/PLEX/howToUsePlex.aspx\n\n[<img class=\"fullwidth\" title=\"What to do in EVE Online\" src=\"/uploads/2016/spreadsheets-in-space/eve-wtd.jpg\">](http://swiftandbitter.com/eve/wtd/)\n\nFor the most part, I've found that space jobs in EVE Online are machines\ndesigned to convert tolerance for tedium into small amounts of space money,\nwith scattered moments of panic to keep you paying attention. In fact, it\nreally seems like space jobs are a clever mechanism to position you as\ncontent for other players:\n\n* Miners are stationary targets for long hours in asteroid fields.\n* Mission runners hang out in dangerous space for long periods.\n* Haulers travel predictable paths between markets.\n* Explorers offer roaming targets in otherwise mostly empty space.\n* Traders provide inputs into a lively market simulation.\n\nMuch of EVE Online seems to be in discovering ways to generate fun from space\njobs despite the tedium, and players have been astonishingly creative in doing\nso.\n\n## Wherein I found the spreadsheets in space\n\nBut, I digress. There are reasons why EVE Online is synonymous with\n\"[spreadsheets in space](google)\" - every space station in EVE has a market.\nMost space jobs lead there: Loot, minerals, salvage, and stolen goods all get\nsold on the market. And, nearly everything you'd want to buy with the proceeds\nof your space job come from the market.\n\n[google]: https://www.google.com/search?q=spreadsheets+in+space\n\n<img class=\"fullwidth\" src=\"/uploads/2016/spreadsheets-in-space/transactions-1.PNG\">\n\nThis is where I discovered [station trading][stationtrading]: The price for\nbuying from the market is always higher than selling to the market. It's like\nretail vs wholesale pricing, but weirder. And, for various reasons, the spread\nbetween these prices can be quite large. So, without ever leaving the station,\nyou can perform [arbitrage][] - i.e. buy low, sell high, pocket the\ndifference.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/spreadsheets-in-space/history-3.PNG\">\n\nOne evening, I tried getting into station trading entirely off-the-cuff:\n\n1. Click through every item in the market.\n2. Eyeball the price spread and history.\n3. Assemble a list of all the items with a decent, stable margin.\n4. Put up buy orders, babysit them to ensure they're always slightly higher\n   than competitors. \n5. Put items up for sale as buy orders are fulfilled.\n6. Babysit sell orders to ensure they're always slightly lower than competitors. \n7. Profit!\n\n## This looks like a job for a machine\n\nAs with most space jobs, there is a generous helping of tedium in trading.  It\nimmediately occurred to me that this would be better done by a computer. Why\nclick through all these items one-by-one, when an algorithm could zip through\nand serve up a list of high-margin items in seconds?\n\n<img class=\"fullwidth\" src=\"/uploads/2016/spreadsheets-in-space/shell.PNG\" style=\"width: 100%\">\n\nOf course, in many games, this would be considered cheating. I remember the\ncontroversy back in the 80s & 90s when \"[helpers][]\" first started appearing for\n[TradeWars 2002][], a game that many cite as an early inspiration for EVE\nOnline. And, indeed, fully automated market bots are a bannable offense in EVE\nOnline - that is, CCP want a human to manually enter all those buy & sell\norders and keep on top of them. \n\n[helpers]: https://www.google.com/search?q=\"tradewars+2002\"+helpers\n[TradeWars 2002]: http://www.tradewars.com/default.html\n\nHowever, CCP only seem to consider the last mile of automation as\noff limits.  [Enterprising players][evecentral] and [even CCP themselves][eveapi] have\nlong offered web service APIs for things like character and market data.  This\nmeans you can use Excel or Google Spreadsheets or even your own original\nsoftware to pull in this data, run calculations, scan for trade\nopportunities, etc. \n\nAs I read up about all of this, it dawned on me: **This is one of the first\nvideo games I've played where software development and algorithms are\nintentionally supported ways to play**!\n\nHoly crap.\n\n## Sharpening the saw\n\nI've always loved writing software to solve problems. And, you can\ndescribe games as problem generators. So, it's been satisfying to play a\ngame through software development. And, it's been rewarding to measure that\nsoftware's effectiveness through my profits in space money.  It feels demented\nto say it, but most days I get more out of my wallet balance in station than\nfrom actually flying a ship.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/spreadsheets-in-space/code-3.PNG\">\n\nIt's had all the nerdy fun of working through puzzles, while also helping\nsharpen the saw on my tech skills. I wasn't all that familiar with node.js\nbeforehand, but now I'm pretty sharp on it after having applied it to\npractical challenges. I learned a bit of MongoDB and Postgresql to get things\ndone. I've played with some JS frameworks to build visualizations for\nmyself, and will probably poke at building some UI for myself in React at some\npoint.\n\nIn the past, my \"Hello World\" for a new technology stack might have been\ningesting RSS & Atom news feeds to build a River of News. I even used that\nhabit as fodder to write [my first book][book]. But, these days, I'm finding\nmyself reaching for EVE Online data to provide the test bed for things I want\nto learn. Maybe I'll find some way to channel this enthusiasm into something\nlike another book or some conference talks. Who knows?\n\n[book]: http://amzn.to/1T0lk0p\n\n[evecentral]: https://eve-central.com/home/develop.html\n[eveapi]: https://eveonline-third-party-documentation.readthedocs.org/en/latest/\n[arbitrage]: https://en.wikipedia.org/wiki/Arbitrage\n[stationtrading]: https://wiki.braveineve.com/public/dojo/wiki/station_trading_complete_guide\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/04/17/spreadsheets-in-space",
    "summary": "<p><strong>TL;DR</strong>: I thought it would be fun to fly internet space ships. Instead,\nit&apos;s proven more satisfying to write software and make internet space money.</p>\n"
  },
  {
    "title": "Building a USB controller for an IBM Model M",
    "tags": [
      "modelm",
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "year": "2016",
    "month": "02",
    "day": "21",
    "isDir": false,
    "slug": "modelm-controller",
    "date": "2016-02-21T12:00:00.000Z",
    "postName": "2016-02-21-modelm-controller",
    "html": "<p><strong>TL;DR</strong>: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>In my <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">previous post</a>, I wrote about my initial forays into\nkeyboard hacking. I got my hands on a few IBM Model M keyboards, and built a\nPS/2-to-USB converter with a <a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a> so I could use it with my\nMacBook Pro after remapping some keys via the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK keyboard firmware</a>.</p>\n<p>That was a pretty rewarding little hack. But, then, I found <a href=\"https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\">Lawrence Wu&#39;s\nnotes</a> on replacing the original controller inside the IBM\nModel M.  In a nutshell, it turns out you can find ribbon connectors that work\nwith the Model M membrane layers and fit on a breadboard. That makes it easy\nto build - and reversible if I decide to return the keyboard to its original\nstate.</p>\n<h2 id=\"initial-prototype\">Initial Prototype</h2>\n<p>So, I ordered a few of the <a href=\"http://www.mouser.com/ProductDetail/TE-Connectivity/6-520315-6/?qs=sGAEpiMZZMvYKGyZxp8jxkA16bSpREuh\">16-pin ribbon connectors from Mouser</a>\nand a <a href=\"https://www.pjrc.com/store/teensypp.html\">Teensy 2.0++</a>. My first stab at wiring things up was\npretty simple:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24987051026/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k\" title=\"Original prototype for replacement IBM Model M keyboard controller\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24987051026_0d0b1ac2a9_z.jpg\" alt=\"Original prototype for replacement IBM Model M keyboard controller\"></a></p>\n<p>The <a href=\"https://www.pjrc.com/store/teensypp.html\">Teensy 2.0++</a> has 20 pins per side, and I needed 16 for the\nfirst ribbon. So, it was convenient to just plonk both onto the breadboard and\ntake advantage of the built-in conductors. That&#39;s also why I upgraded from a\n<a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a>: I needed more pins. The second ribbon needed\n8 pins, so I cut some lengths of <a href=\"http://amzn.to/1oCuCJ1\">hook-up wire</a> to keep things neat\nand ran the connections over.</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24684318539/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"5.5mm nut driver needed for opening IBM Model M keyboards\"><img class=\"inset wide right\" src=\"/uploads/2016/modelm-controller/24684318539_4dde739235_n.jpg\" alt=\"5.5mm nut driver needed for opening IBM Model M keyboards\"></a></p>\n<h2 id=\"driving-me-nuts\">Driving Me Nuts</h2>\n<p>Then, I wanted to get inside the keyboard to start tinkering. As it turns out,\nopening up an IBM Model M is annoying: None of the tools I had on hand could\ndo it. </p>\n<p>The case is assembled using screws with 5.5mm nut heads, rather than\nsomething like a Phillips-head screw. And, the screws are down in deep wells\ntoo narrow to fit any of the socket wrench heads I had on hand.</p>\n<p>So, I had to order <a href=\"http://amzn.to/1RgjN8k\">a 5.5mm nut driver</a> with a very slim head.\nReading <a href=\"http://www.amazon.com/Dynamite-2803-Nut-Driver-5-5mm/product-reviews/B000BQ4XP6/ref=cm_cr_dp_see_all_summary?ie=UTF8&amp;showViewpoints=1&amp;sortBy=helpful\">the reviews</a>, I can see I&#39;m not alone in this.</p>\n<p>While that made its way to my house, I&#39;d read that <a href=\"https://deskthority.net/workshop-f7/model-m-disassembly-t1960.html#p34013\">some folks used a lighter\nand a pen</a> to form a makeshift nut driver. That was a terrible\nidea, but it worked. In hindsight, I really should have just waited for the\ndriver to show up. But, I was determined to get the thing open while I had\ntime to play with it.</p>\n<h2 id=\"the-original-controller\">The Original Controller</h2>\n<p>And, once open, this is the board I found inside:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/25046846995/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M original controller board\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/25046846995_c8dab2484c_z.jpg\" alt=\"IBM Model M original controller board\"></a></p>\n<p>I should have taken a picture of it in place, but oh well. The board has a\ngrounding strap that was screwed down to the steel plate under the keys.\nBeyond that, it just fit into plastic brackets in the case and wasn&#39;t\notherwise fastened down. And, in a weird coincidence, the board was almost the\nexact same dimensions as my breadboard. Maybe these things are standard sizes?</p>\n<h2 id=\"mapping-the-membranes\">Mapping the Membranes</h2>\n<p>With the keyboard membrane ribbons free from the original board, I hooked them up to\nmy prototype. From there, I wanted to start making the keys send the right\nsignals. There are three parts to this:</p>\n<ol>\n<li>Mapping Teensy pins to a 16 x 8 switch matrix</li>\n<li>Mapping the 16 x 8 switch matrix to physical key locations</li>\n<li>Mapping physical key locations to USB key codes</li>\n</ol>\n<p>To accomplish #1, <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/matrix.c#L163\">I set up pins in the firmware</a>. The way this works is\nthat the rows are set to input and the columns are set to output. By pulsing a\ncurrent for each column in turn and reading the rows, you can build up a\nmatrix of switch state where the circuit is completed. This is called\n<a href=\"https://www.massdrop.com/article/introduction-to-keyboard-programming\">scanning the keyboard</a>. There are problems in this process - <a href=\"http://blog.komar.be/how-to-make-a-keyboard-the-matrix/\">like\nghosting</a> - but I&#39;ll skip describing them for now.</p>\n<p>To double check that I had my matrix working, I threw together an initial\nkeymap and set every key to emit &quot;1&quot;.  I tapped each key and saw a &quot;1&quot; in my\nnotepad. Hooray, it worked! At least, electrically speaking.</p>\n<p>For step #2, I started googling for IBM Model M membrane matrix maps. Surely\nsomeone had done this before! Well, <a href=\"https://deskthority.net/workshop-f7/universal-model-m-controller-t9820.html#p207736\">it turns out someone had</a>.\nDeskthority user <a href=\"https://deskthority.net/idollar-u6930/\">idollar</a> had traced all the wires and annotated the\nmembranes with row &amp; column numbers in marker:</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9298.jpg\">\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9300.jpg\">\n\n<p>Just to be clear: These two are not my photos. I stand on the shoulders of\n<a href=\"https://deskthority.net/idollar-u6930/\">forum giants</a>. But, after awhile, I couldn&#39;t really read the\nhandwriting and started making mistakes. </p>\n<p>That&#39;s when I remembered <a href=\"https://github.com/tmk/tmk_keyboard#magic-commands\">the matrix debug mode in TMK</a>: After\nconfiguring just enough keys to enable it, I could just watch the debug\noutput to tell me the rows &amp; columns as I hit other keys.</p>\n<p>Thus equipped, I spent a Sunday morning over coffee mapping the keyboard:\nMethodically pressing keys, noting rows &amp; columns, and building up <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L34\">the KEYMAP\nmacro</a> that converts symbols for physical keys to logical matrix\npositions. Along the way, I also built up <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L54\">the initial\nkeymap</a> using that macro to assign keycodes to the physical\nkeys.</p>\n<h2 id=\"fitting-the-prototype\">Fitting the Prototype</h2>\n<p>After that, I had an initial stab at steps #2 &amp; #3 - the keyboard was pretty\nmuch working and I could start typing practically with it. But, because I was\nhacking on this from the couch, it was all super-awkward holding things\ntogether in my lap.</p>\n<p>I should mention that these ribbon connectors have short, fragile leads.\nThey&#39;re really meant for soldering into a PCB. They snap into the breadboard,\nbut just barely. They spring free at the slightest pressure - you know, like\nhooking up ribbons and moving the keyboard around. And, whenever I reinsert\nthem, invariably one pin or another gets bent up and then snaps off after the\n4th or 5th realignment. I&#39;m really glad I bought extras, because I&#39;m down to\nmy last two that still work.</p>\n<p>So, I got tired of things falling apart and started positioning my breadboard\ninto the case. Everything fit physically, but the parts were all in the wrong\nplace. With a sigh, I pulled everything out of the board, rewired it, and\nreassigned all the pins:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24742861610/in/dateposted-public/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24742861610_8c3c931768_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a></p>\n<p>That put the ribbon connectors in the right spots for the keyboard membranes\nto connect, as well as room for a USB connector I bought to loop around without\ntoo much bend. Oh, and I slightly rewired things again, because I discovered\nI&#39;d connected all the LEDs backward:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24945773791/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24945773791_b208614dd7_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a></p>\n<h2 id=\"my-keyboard-is-haunted\">My Keyboard is Haunted</h2>\n<p>After all the rewiring and reassigned pins, I fired things up again. This\ntime, I started getting mysterious spontaneous keystrokes. I thought it might\nbe a grounding issue with static electricity, because I could usually make it\nhappen by waving my hands over the keyboard. While a <a href=\"https://en.wikipedia.org/wiki/Theremin\">theremin</a>\nkeyboard might be fun, that&#39;s not actually what I was going for here.</p>\n<p>So, I ran a wire from the steel plate to the GND pin on the Teensy. That\ndidn&#39;t fix it.</p>\n<p>Finally, I realized that one of my new pins in use was D6 - and\nD6 is hardwired to an LED on the Teensy board. And, it so happens that LEDs\ncan do weird things when hooked up as an input - <a href=\"http://www.analog.com/library/analogdialogue/archives/48-08/raq_108.html\">such as detecting\nlight</a>. You know, maybe like the changing light from waving my\nhands over the keyboard.</p>\n<p>Thus, I was able to exorcise my keyboard ghost by bending up the pin at D6 to\ndisconnect it from the breadboard. Then, I ran a jumper over to D1 and\n<a href=\"https://github.com/lmorchard/tmk_keyboard/commit/f5b31e9d320d494a4d3fc75db614883b7225d332\">switched the pin assignments in the firmware</a>. No more spontaneous\nkeypresses.</p>\n<h2 id=\"secrets-of-2kro-matrices\">Secrets of 2KRO Matrices</h2>\n<p>After typing a bit, I realized I couldn&#39;t get certain key combinations to work -\nShift-T, for example.</p>\n<p>Now, I know that the IBM Model M isn&#39;t <a href=\"https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\">an NKRO keyboard</a>. That is, you\ncannot press any arbitrary combination of keys together. But, of course, a\nkeyboard is useless if you can&#39;t press at least <em>some</em> keys together - like, say,\nShift and T. In fact, I&#39;ve read that the IBM Model M is described as 2KRO -\ni.e. two-key rollover.</p>\n<p>So, I knew that the original controller supported Shift-T. Looking in the\nmatrix debug output, I noticed that I couldn&#39;t press any 2 keys in the same\nrow together - that included Left Shift and T.</p>\n<p>Scratching my head, I noticed that the membrane matrix had some interesting\nproperties: Pretty much all the modifier keys were in different columns than\nthe other keys I wanted to press along with them. So, my problem might be\nsolved by rotating the matrix - that is, <a href=\"https://github.com/lmorchard/tmk_keyboard/commit/afc4d0f23be23e8c69bc1dfbe127898a7fe82db7\">turning rows into columns and columns\ninto rows</a>.</p>\n<p>I don&#39;t entirely have my head wrapped around the design of the Model M\nmembrane layout, but I think this is part of it: After I rotated the matrix,\nthere are 8 columns per row. As far as I can tell, only one key can be pressed\nper row - so that means any given key has 7 others that cannot be pressed at\nthe same time. Practical key rollover, then, is implemented by putting keys\nyou&#39;re likely to press together in different rows.</p>\n<p>For example, modifiers like Left Shift and Right Shift share a row, and so\ncannot be pressed together. But, Left Shift &amp; T are found in different rows\nand can work together. However, some of the letters in the QWER &amp; ASDF cluster\nshare rows, so that can be trouble for gaming - directional keypresses and\nsuchlike might cancel each other out in the heat of the keymashing moment.\nBut, since this keyboard harkens to an era where keys were more for typing\nwords than for controlling games, the tradeoff makes sense.</p>\n<h2 id=\"the-result\">The Result</h2>\n<p><a data-flickr-embed=\"true\" data-header=\"false\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24422592514/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz\" title=\"IBM Model M keyboard with USB controller\"><img class=\"inset wide right\" id=\"thumbnail\" src=\"/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg\" alt=\"IBM Model M keyboard with USB controller\"></a></p>\n<p>So, after all the above and a few more random adventures in C programming,\nthis IBM Model M keyboard is now sitting on my desk with a USB cable plugged\ninto it.</p>\n<p>I ordered <a href=\"http://www.pckeyboard.com/page/category/Buttons\">some custom replacement keycaps from Unicomp</a> to reflect\nsome of the remapped keys I implemented - i.e. media control, Command (⌘),\nCaps Lock replaced by Ctrl. </p>\n<p>I&#39;ve been having some clicky-clacky fun with this thing, and it&#39;s been easy to\nreconfigure &amp; reflash along the way as needed. Experience with <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a> to\nconfigure my previous project really came in handy.</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24959916191/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M with USB controller upgrade\"><img class=\"inset wide left\" src=\"/uploads/2016/modelm-controller/24959916191_bfe3246ded_z.jpg\" alt=\"IBM Model M with USB controller upgrade\"></a></p>\n<p>The one part that could be considered irreversible with this project is that I\nended up drilling two small holes in the back to secure the USB port. I&#39;m just\nslightly sad about that. But, I guess if I ever sell this thing on eBay, I&#39;ll\ntry talking up the benefits of the new USB controller.</p>\n<p>But, otherwise, if I wanted to undo all this work, I could just open it back\nup and plonk the original controller back in. I&#39;ve currently got that board\nsitting in an anti-static bag in a drawer, taking a rest after decades of\nservice.\n<br style=\"clear: both\"></p>\n<h2 id=\"next-steps\">Next Steps</h2>\n<h3 id=\"breadboard-to-pcb\">Breadboard to PCB</h3>\n<p>Like I mentioned before, those ribbon connectors are fragile and meant to be\nsoldered to a PCB. I&#39;d also like to learn how to design PCBs, so this seems\nlike a super easy project to start with. The only things needed are places to\nsolder the connectors, a socket for a Teensy, and traces connecting everything\nproperly. I wouldn&#39;t even need to learn SMD soldering yet!</p>\n<h3 id=\"bluetooth\">Bluetooth</h3>\n<p>I saw <a href=\"https://learn.adafruit.com/convert-your-model-m-keyboard-to-bluetooth-with-bluefruit-ez-key-hid/overview\">a project on Adafruit to add Bluetooth support to an IBM Model\nM</a>. But, that was using the original controller board and\nconverting from PS/2. With my controller, I could hook a Bluetooth module\ndirectly up to Teensy pins and talk to it from <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a>. That should be\ninteresting.</p>\n<h3 id=\"alphanumeric-display\">Alphanumeric Display</h3>\n<p>I noticed that a backlit alphanumeric LCD display is pretty much the exact\ndimensions of the Num Lock / Scroll Lock / Caps Lock LED area on the keyboard\ncase. It would definitely be a destructive change, but it might be kind of\ncool to replace that section with a text readout. I&#39;m not really sure what it\nwould display, but it could be a fun little project like a retro-DIY version\nof <a href=\"http://amzn.to/1TuflVD\">a Logitech G15 keyboard</a>.</p>\n<h3 id=\"reset-button\">Reset button</h3>\n<p>Flashing the Teensy firmware usually requires pushing a button on the board.\nThere are also a couple of pins on the board that do the same when shorted, so\nI threaded some wires out of the case to do that. It&#39;s ugly.</p>\n<p>The <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a> firmware also supports a key combination that does the same thing,\nwhich would let me just toss the wires. But, after once or twice where I\nlocked the firmware and had to reopen the case, I don&#39;t think I can totally go\nwithout a reset button.</p>\n<p>So, I&#39;m considering where and how to mount an external reset / programming\nbutton that doesn&#39;t require any more holes to be drilled or anything else\ndestructive.</p>\n<h3 id=\"60-model-m\">60% Model M</h3>\n<p>On the topic of destructive changes: <a href=\"https://geekhack.org/index.php?action=profile;u=3412\">hasu</a>, the author of the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a>\nfirmware, <a href=\"https://geekhack.org/index.php?action=profile;u=3412\">literally carved up</a> an IBM Model M keyboard and <a href=\"https://geekhack.org/index.php?topic=29483.0\">reduced it\nto a 60% layout</a> more comparable to a Happy Hacking Keyboard.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/yROEN.jpg\">\n\n<p>That project took a bit of work reconstituting the membrane using copper tape\nand conductive ink, as well as work to join the plastic bits back together.\nBut, the electronics end up being simpler after discarding piles of keys.\nI know it would be a certain kind of sacriledge to Model M lovers, but I might\nattempt it once I get tired of just how huge this keyboard is on my desk.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This was a pretty fun project, and a bit of a step up from the PS/2 converter\nI just built. I learned a bit about the innards of this keyboard, and I&#39;ve got\nsome decent next steps to pursue in the future. All of this feels like it&#39;s\ngiving me some good foundational know-how for when I finally get all the parts\ntogether to try building my own DIY keyboard from the ground up.</p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nIn my [previous post][keyboard-hacking], I wrote about my initial forays into\nkeyboard hacking. I got my hands on a few IBM Model M keyboards, and built a\nPS/2-to-USB converter with a [Teensy 2.0][teensy] so I could use it with my\nMacBook Pro after remapping some keys via the [TMK keyboard firmware][tmk].\n\nThat was a pretty rewarding little hack. But, then, I found [Lawrence Wu's\nnotes][original-notes] on replacing the original controller inside the IBM\nModel M.  In a nutshell, it turns out you can find ribbon connectors that work\nwith the Model M membrane layers and fit on a breadboard. That makes it easy\nto build - and reversible if I decide to return the keyboard to its original\nstate.\n\n## Initial Prototype\n\nSo, I ordered a few of the [16-pin ribbon connectors from Mouser][connector]\nand a [Teensy 2.0++][teensy-plus]. My first stab at wiring things up was\npretty simple:\n\n[connector]: http://www.mouser.com/ProductDetail/TE-Connectivity/6-520315-6/?qs=sGAEpiMZZMvYKGyZxp8jxkA16bSpREuh\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24987051026/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k\" title=\"Original prototype for replacement IBM Model M keyboard controller\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24987051026_0d0b1ac2a9_z.jpg\" alt=\"Original prototype for replacement IBM Model M keyboard controller\"></a>\n\nThe [Teensy 2.0++][teensy-plus] has 20 pins per side, and I needed 16 for the\nfirst ribbon. So, it was convenient to just plonk both onto the breadboard and\ntake advantage of the built-in conductors. That's also why I upgraded from a\n[Teensy 2.0][teensy]: I needed more pins. The second ribbon needed\n8 pins, so I cut some lengths of [hook-up wire][hookup] to keep things neat\nand ran the connections over.\n\n[tmk]: https://geekhack.org/index.php?topic=41989.0\n[hookup]: http://amzn.to/1oCuCJ1\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24684318539/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"5.5mm nut driver needed for opening IBM Model M keyboards\"><img class=\"inset wide right\" src=\"/uploads/2016/modelm-controller/24684318539_4dde739235_n.jpg\" alt=\"5.5mm nut driver needed for opening IBM Model M keyboards\"></a>\n\n## Driving Me Nuts\n\nThen, I wanted to get inside the keyboard to start tinkering. As it turns out,\nopening up an IBM Model M is annoying: None of the tools I had on hand could\ndo it. \n  \nThe case is assembled using screws with 5.5mm nut heads, rather than\nsomething like a Phillips-head screw. And, the screws are down in deep wells\ntoo narrow to fit any of the socket wrench heads I had on hand.\n\nSo, I had to order [a 5.5mm nut driver][nut-driver] with a very slim head.\nReading [the reviews][reviews], I can see I'm not alone in this.\n\nWhile that made its way to my house, I'd read that [some folks used a lighter\nand a pen][driver-hack] to form a makeshift nut driver. That was a terrible\nidea, but it worked. In hindsight, I really should have just waited for the\ndriver to show up. But, I was determined to get the thing open while I had\ntime to play with it.\n\n[reviews]: http://www.amazon.com/Dynamite-2803-Nut-Driver-5-5mm/product-reviews/B000BQ4XP6/ref=cm_cr_dp_see_all_summary?ie=UTF8&showViewpoints=1&sortBy=helpful\n[driver-hack]: https://deskthority.net/workshop-f7/model-m-disassembly-t1960.html#p34013\n\n## The Original Controller\n\nAnd, once open, this is the board I found inside:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/25046846995/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M original controller board\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/25046846995_c8dab2484c_z.jpg\" alt=\"IBM Model M original controller board\"></a>\n\nI should have taken a picture of it in place, but oh well. The board has a\ngrounding strap that was screwed down to the steel plate under the keys.\nBeyond that, it just fit into plastic brackets in the case and wasn't\notherwise fastened down. And, in a weird coincidence, the board was almost the\nexact same dimensions as my breadboard. Maybe these things are standard sizes?\n\n## Mapping the Membranes\n\nWith the keyboard membrane ribbons free from the original board, I hooked them up to\nmy prototype. From there, I wanted to start making the keys send the right\nsignals. There are three parts to this:\n\n1. Mapping Teensy pins to a 16 x 8 switch matrix\n2. Mapping the 16 x 8 switch matrix to physical key locations\n3. Mapping physical key locations to USB key codes\n\nTo accomplish #1, [I set up pins in the firmware][pins]. The way this works is\nthat the rows are set to input and the columns are set to output. By pulsing a\ncurrent for each column in turn and reading the rows, you can build up a\nmatrix of switch state where the circuit is completed. This is called\n[scanning the keyboard][scanning]. There are problems in this process - [like\nghosting][ghosting] - but I'll skip describing them for now.\n\n[scanning]: https://www.massdrop.com/article/introduction-to-keyboard-programming\n[ghosting]: http://blog.komar.be/how-to-make-a-keyboard-the-matrix/\n\nTo double check that I had my matrix working, I threw together an initial\nkeymap and set every key to emit \"1\".  I tapped each key and saw a \"1\" in my\nnotepad. Hooray, it worked! At least, electrically speaking.\n\n[pins]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/matrix.c#L163\n\nFor step #2, I started googling for IBM Model M membrane matrix maps. Surely\nsomeone had done this before! Well, [it turns out someone had][matrix-map].\nDeskthority user [idollar][] had traced all the wires and annotated the\nmembranes with row & column numbers in marker:\n\n[idollar]: https://deskthority.net/idollar-u6930/\n[matrix-map]: https://deskthority.net/workshop-f7/universal-model-m-controller-t9820.html#p207736\n\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9298.jpg\">\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9300.jpg\">\n\nJust to be clear: These two are not my photos. I stand on the shoulders of\n[forum giants][idollar]. But, after awhile, I couldn't really read the\nhandwriting and started making mistakes. \n\nThat's when I remembered [the matrix debug mode in TMK][matrix-debug]: After\nconfiguring just enough keys to enable it, I could just watch the debug\noutput to tell me the rows & columns as I hit other keys.\n\n[matrix-debug]: https://github.com/tmk/tmk_keyboard#magic-commands\n\nThus equipped, I spent a Sunday morning over coffee mapping the keyboard:\nMethodically pressing keys, noting rows & columns, and building up [the KEYMAP\nmacro][keymap-macro] that converts symbols for physical keys to logical matrix\npositions. Along the way, I also built up [the initial\nkeymap][keymap-plain] using that macro to assign keycodes to the physical\nkeys.\n\n[keymap-macro]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L34\n[keymap-plain]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L54\n\n## Fitting the Prototype\n\nAfter that, I had an initial stab at steps #2 & #3 - the keyboard was pretty\nmuch working and I could start typing practically with it. But, because I was\nhacking on this from the couch, it was all super-awkward holding things\ntogether in my lap.\n\nI should mention that these ribbon connectors have short, fragile leads.\nThey're really meant for soldering into a PCB. They snap into the breadboard,\nbut just barely. They spring free at the slightest pressure - you know, like\nhooking up ribbons and moving the keyboard around. And, whenever I reinsert\nthem, invariably one pin or another gets bent up and then snaps off after the\n4th or 5th realignment. I'm really glad I bought extras, because I'm down to\nmy last two that still work.\n\nSo, I got tired of things falling apart and started positioning my breadboard\ninto the case. Everything fit physically, but the parts were all in the wrong\nplace. With a sigh, I pulled everything out of the board, rewired it, and\nreassigned all the pins:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24742861610/in/dateposted-public/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24742861610_8c3c931768_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a>\n\nThat put the ribbon connectors in the right spots for the keyboard membranes\nto connect, as well as room for a USB connector I bought to loop around without\ntoo much bend. Oh, and I slightly rewired things again, because I discovered\nI'd connected all the LEDs backward:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24945773791/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24945773791_b208614dd7_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a>\n\n## My Keyboard is Haunted\n\nAfter all the rewiring and reassigned pins, I fired things up again. This\ntime, I started getting mysterious spontaneous keystrokes. I thought it might\nbe a grounding issue with static electricity, because I could usually make it\nhappen by waving my hands over the keyboard. While a [theremin][]\nkeyboard might be fun, that's not actually what I was going for here.\n\n[theremin]: https://en.wikipedia.org/wiki/Theremin\n\nSo, I ran a wire from the steel plate to the GND pin on the Teensy. That\ndidn't fix it.\n\nFinally, I realized that one of my new pins in use was D6 - and\nD6 is hardwired to an LED on the Teensy board. And, it so happens that LEDs\ncan do weird things when hooked up as an input - [such as detecting\nlight][photodiode]. You know, maybe like the changing light from waving my\nhands over the keyboard.\n\nThus, I was able to exorcise my keyboard ghost by bending up the pin at D6 to\ndisconnect it from the breadboard. Then, I ran a jumper over to D1 and\n[switched the pin assignments in the firmware][d0-pin]. No more spontaneous\nkeypresses.\n\n[photodiode]: http://www.analog.com/library/analogdialogue/archives/48-08/raq_108.html\n[d0-pin]: https://github.com/lmorchard/tmk_keyboard/commit/f5b31e9d320d494a4d3fc75db614883b7225d332\n\n## Secrets of 2KRO Matrices\n\nAfter typing a bit, I realized I couldn't get certain key combinations to work -\nShift-T, for example.\n\nNow, I know that the IBM Model M isn't [an NKRO keyboard][nkro]. That is, you\ncannot press any arbitrary combination of keys together. But, of course, a\nkeyboard is useless if you can't press at least *some* keys together - like, say,\nShift and T. In fact, I've read that the IBM Model M is described as 2KRO -\ni.e. two-key rollover.\n\nSo, I knew that the original controller supported Shift-T. Looking in the\nmatrix debug output, I noticed that I couldn't press any 2 keys in the same\nrow together - that included Left Shift and T.\n\nScratching my head, I noticed that the membrane matrix had some interesting\nproperties: Pretty much all the modifier keys were in different columns than\nthe other keys I wanted to press along with them. So, my problem might be\nsolved by rotating the matrix - that is, [turning rows into columns and columns\ninto rows][matrix-swap].\n\nI don't entirely have my head wrapped around the design of the Model M\nmembrane layout, but I think this is part of it: After I rotated the matrix,\nthere are 8 columns per row. As far as I can tell, only one key can be pressed\nper row - so that means any given key has 7 others that cannot be pressed at\nthe same time. Practical key rollover, then, is implemented by putting keys\nyou're likely to press together in different rows.\n\nFor example, modifiers like Left Shift and Right Shift share a row, and so\ncannot be pressed together. But, Left Shift & T are found in different rows\nand can work together. However, some of the letters in the QWER & ASDF cluster\nshare rows, so that can be trouble for gaming - directional keypresses and\nsuchlike might cancel each other out in the heat of the keymashing moment.\nBut, since this keyboard harkens to an era where keys were more for typing\nwords than for controlling games, the tradeoff makes sense.\n\n[nkro]: https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\n[matrix-swap]: https://github.com/lmorchard/tmk_keyboard/commit/afc4d0f23be23e8c69bc1dfbe127898a7fe82db7\n\n## The Result\n\n<a data-flickr-embed=\"true\" data-header=\"false\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24422592514/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz\" title=\"IBM Model M keyboard with USB controller\"><img class=\"inset wide right\" id=\"thumbnail\" src=\"/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg\" alt=\"IBM Model M keyboard with USB controller\"></a>\n\nSo, after all the above and a few more random adventures in C programming,\nthis IBM Model M keyboard is now sitting on my desk with a USB cable plugged\ninto it.\n\nI ordered [some custom replacement keycaps from Unicomp][unicomp] to reflect\nsome of the remapped keys I implemented - i.e. media control, Command (⌘),\nCaps Lock replaced by Ctrl. \n\nI've been having some clicky-clacky fun with this thing, and it's been easy to\nreconfigure & reflash along the way as needed. Experience with [TMK][] to\nconfigure my previous project really came in handy.\n\n[unicomp]: http://www.pckeyboard.com/page/category/Buttons\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24959916191/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M with USB controller upgrade\"><img class=\"inset wide left\" src=\"/uploads/2016/modelm-controller/24959916191_bfe3246ded_z.jpg\" alt=\"IBM Model M with USB controller upgrade\"></a>\n\nThe one part that could be considered irreversible with this project is that I\nended up drilling two small holes in the back to secure the USB port. I'm just\nslightly sad about that. But, I guess if I ever sell this thing on eBay, I'll\ntry talking up the benefits of the new USB controller.\n\nBut, otherwise, if I wanted to undo all this work, I could just open it back\nup and plonk the original controller back in. I've currently got that board\nsitting in an anti-static bag in a drawer, taking a rest after decades of\nservice.\n<br style=\"clear: both\">\n\n[teensy]: https://www.pjrc.com/store/teensy.html\n[teensy-plus]: https://www.pjrc.com/store/teensypp.html\n[nut-driver]: http://amzn.to/1RgjN8k\n[keyboard-hacking]: http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\n[original-notes]: https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\n[photo-tag]: https://www.flickr.com/photos/tags/modelmcontroller\n\n## Next Steps\n\n### Breadboard to PCB\n\nLike I mentioned before, those ribbon connectors are fragile and meant to be\nsoldered to a PCB. I'd also like to learn how to design PCBs, so this seems\nlike a super easy project to start with. The only things needed are places to\nsolder the connectors, a socket for a Teensy, and traces connecting everything\nproperly. I wouldn't even need to learn SMD soldering yet!\n\n### Bluetooth\n\nI saw [a project on Adafruit to add Bluetooth support to an IBM Model\nM][Adafruit-Bluetooth]. But, that was using the original controller board and\nconverting from PS/2. With my controller, I could hook a Bluetooth module\ndirectly up to Teensy pins and talk to it from [TMK][]. That should be\ninteresting.\n\n[adafruit-bluetooth]: https://learn.adafruit.com/convert-your-model-m-keyboard-to-bluetooth-with-bluefruit-ez-key-hid/overview\n\n### Alphanumeric Display\n\nI noticed that a backlit alphanumeric LCD display is pretty much the exact\ndimensions of the Num Lock / Scroll Lock / Caps Lock LED area on the keyboard\ncase. It would definitely be a destructive change, but it might be kind of\ncool to replace that section with a text readout. I'm not really sure what it\nwould display, but it could be a fun little project like a retro-DIY version\nof [a Logitech G15 keyboard][g15].\n\n[g15]: http://amzn.to/1TuflVD\n\n### Reset button\n\nFlashing the Teensy firmware usually requires pushing a button on the board.\nThere are also a couple of pins on the board that do the same when shorted, so\nI threaded some wires out of the case to do that. It's ugly.\n\nThe [TMK][] firmware also supports a key combination that does the same thing,\nwhich would let me just toss the wires. But, after once or twice where I\nlocked the firmware and had to reopen the case, I don't think I can totally go\nwithout a reset button.\n\nSo, I'm considering where and how to mount an external reset / programming\nbutton that doesn't require any more holes to be drilled or anything else\ndestructive.\n\n### 60% Model M\n\nOn the topic of destructive changes: [hasu][], the author of the [TMK][]\nfirmware, [literally carved up][hbkb2] an IBM Model M keyboard and [reduced it\nto a 60% layout][hbkb] more comparable to a Happy Hacking Keyboard.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/yROEN.jpg\">\n\n[hasu]: https://geekhack.org/index.php?action=profile;u=3412\n[hbkb]: https://geekhack.org/index.php?topic=29483.0\n[hbkb2]: https://geekhack.org/index.php?action=profile;u=3412\n\nThat project took a bit of work reconstituting the membrane using copper tape\nand conductive ink, as well as work to join the plastic bits back together.\nBut, the electronics end up being simpler after discarding piles of keys.\nI know it would be a certain kind of sacriledge to Model M lovers, but I might\nattempt it once I get tired of just how huge this keyboard is on my desk.\n\n## Conclusion\n\nThis was a pretty fun project, and a bit of a step up from the PS/2 converter\nI just built. I learned a bit about the innards of this keyboard, and I've got\nsome decent next steps to pursue in the future. All of this feels like it's\ngiving me some good foundational know-how for when I finally get all the parts\ntogether to try building my own DIY keyboard from the ground up.\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/21/modelm-controller",
    "thumbnail": "/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg",
    "summary": "<p><strong>TL;DR</strong>: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.</p>\n"
  },
  {
    "title": "Keyboard hacking seems like fun",
    "tags": [
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "year": "2016",
    "month": "02",
    "day": "06",
    "isDir": false,
    "slug": "keyboard-hacking",
    "date": "2016-02-06T12:00:00.000Z",
    "postName": "2016-02-06-keyboard-hacking",
    "html": "<p><strong>TL;DR</strong>: I think I&#39;ve caught the DIY keyboard hacking bug, and I&#39;ll probably\nend up building something weird.</p>\n<!--more-->\n\n<p>I love tinkering and I love keyboards. But, I&#39;d never really tinkered with my\nkeyboards - at least, not beyond <a href=\"http://blog.lmorchard.com/2006/07/31/i-heart-my-filthy-happy-hacking-keyboard/\">disassembling &amp; cleaning them</a>.\nI&#39;d seen a smattering of crowdfunded projects over the years like the\n<a href=\"https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/\">ErgoDox</a> and <a href=\"http://shop.keyboard.io/\">Keyboardio</a>. But, those seemed like complex design\n&amp; manufacturing efforts - not like, you know, something I&#39;d do for fun.</p>\n<p>But then, last summer, I ran across <a href=\"https://www.massdrop.com/\">Massdrop</a> and saw the <a href=\"https://www.massdrop.com/buy/infinity-keyboard-kit\">Infinity 60%\nKeyboard Kit</a>. From there, I ran across &quot;<a href=\"https://www.massdrop.com/article/introduction-to-keyboard-programming\">Introduction to Keyboard\nProgramming</a>&quot; and some rusty gears turned over in my brain. I\ndiscovered <a href=\"https://geekhack.org/\">geekhack</a> and <a href=\"https://deskthority.net/\">Deskthority</a> and fell down a dangerous\nrabbit hole of <a href=\"https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\">switches</a> and <a href=\"https://geekhack.org/index.php?board=80.0\">caps</a>, <a href=\"https://geekhack.org/index.php?topic=47133\">layouts</a> and <a href=\"https://deskthority.net/workshop-f7/thkb-tiny-hacking-keyboard-40-t6455.html\">plates</a>,\n<a href=\"https://www.pjrc.com/teensy/\">microcontrollers</a> and <a href=\"https://geekhack.org/index.php?topic=41989.0\">firmware</a>.</p>\n<p>Turns out there are a bunch of folks doing this stuff as a hobby, along with a\nniche industry to support it.</p>\n<p>After a few months of absorbing information and spectating on projects in\nforums, it occurred to me that this did in fact seem like something I&#39;d have\nfun doing. But, rather than just dive in, I decided to start small:</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24832952956/\"><img class=\"fullwidth\" id=\"thumbnail\" src=\"/uploads/2016/teensy-ps2-adapter/minikey.jpg\"></a></p>\n<p>Last weekend, I ran to my local <a href=\"http://www.microcenter.com/site/stores/madison-heights.aspx\">Micro Center</a> and picked up a <a href=\"https://www.pjrc.com/teensy/\">Teensy\n2.0</a>. That seems to be the microcontroller board a lot of keyboard\nprojects have been using, so I figured getting acquainted with it would be\nhandy. After the traditional &quot;hello world&quot; project of <a href=\"https://www.pjrc.com/teensy/tutorial.html\">getting an LED to\nblink</a>, I wired up a pile of buttons on a breadboard and <a href=\"https://www.pjrc.com/teensy/td_keyboard.html\">built the\nfirmware to my first DIY USB keyboard</a>.</p>\n<p>Okay, so it was just a tutorial and no special effort on my part. But, the\nprocess was super easy, so the hacking possibilities started piling up in my\nhead.</p>\n<p>Then, I discovered the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK keyboard firmware</a> on the\n<a href=\"https://geekhack.org/\">geekhack</a> forums. Basically, all the software work had been done for me.\nThe TMK firmware is a ready-made pile of code for translating from basically any\nmatrix of switches or wire protocol to USB HID keyboard codes - complete with\nsupport for flexible key maps, mouse control, function-key layers, macros, and\na bunch of other things. </p>\n<p>My little 10-key breadboard toy wasn&#39;t all that practical. But, I discovered\nthat the TMK firmware also supported building keyboard <em>converters</em>. Of\nparticular interest was the <a href=\"https://github.com/tmk/tmk_keyboard/blob/master/converter/ps2_usb/README.md\">PS/2 to USB keyboard converter</a>, since I\njust happen to have a pile of older PS/2 keyboards lying around doing nothing.</p>\n<p>The converter only took 4 wires, so I sacrificed a PS/2 cable from the back of\na drawer and came up with this:</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24832952956/\"><img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/adapter.jpg\"></a></p>\n<p>Coincidentally, the day after I built this, I got some IBM Model M keyboards\nfrom <a href=\"https://nuxx.net/blog/\">a friend</a> of mine. I&#39;ve been wanting to fill my office with the\nsound of buckling springs for awhile, now. </p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24685464831/\"><img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/modelm.jpg\"></a></p>\n<p>This is all hooked up to a modern MacBook Pro, but the IBM Model M is\ndecidedly lacking in <a href=\"https://en.wikipedia.org/wiki/Command_key\">Command (⌘) keys</a>. So, the DIY converter\nproved its worth immediately. </p>\n<p>I put together <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/lmo-model-mac/converter/ps2_usb/keymap_modelmac.c\">my own simple keymap</a> and spent a day with it,\ntweaking as I went.  I set up <a href=\"https://github.com/alloy/kicker\">a file watcher</a> to rebuild the\nfirmware whenever I changed the source. Along with that, the <a href=\"https://www.pjrc.com/teensy/loader.html\">Teensy\nLoader</a> has an &quot;auto&quot; mode which reprograms the Teensy whenever I hit\nthe reset button. </p>\n<p>At this point, I&#39;ve replaced the Caps Lock key with Control and changed Alt keys\nto Command keys.  Then, I turned the Print Screen / Caps Lock / Pause trio\ninto volume control keys. After that, F10, F11, and F12 were pressed into\nservice as previous, next, &amp; pause buttons for music. It was all a bit fiddly,\nbut it&#39;s the kind of thing I enjoy.</p>\n<p>Overall, this all feels like a nice intro into a new hobby. Next, I&#39;m\nconsidering <a href=\"https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\">replacing the IBM Model M keyboard controller</a>\naltogether, which will embed the Teensy right in the case. </p>\n<p>After that, I&#39;m tempted to turn my screwdriver on that other keyboard on my\ndesk - the Happy Hacking Keyboard Professional. There&#39;s a <a href=\"https://geekhack.org/index.php?topic=12047.0\">Teensy-based\nalternative controller</a> option for it, also using the TMK firmware.</p>\n<p>Once I feel comfortable with all that, it might be time to build something of\nmy own! <a href=\"http://www.keyboard-layout-editor.com/##@_name=noisy%20fat%20hacker%20keyboard&amp;author=lmorchard&amp;switchMount=cherry&amp;switchBrand=cherry&amp;plate:true%3B&amp;@=Esc&amp;=!%0A1&amp;=%2F@%0A2&amp;=%23%0A3&amp;=$%0A4&amp;=%25%0A5&amp;=%5E%0A6&amp;=%2F&amp;%0A7&amp;=*%0A8&amp;=%28%0A9&amp;=%29%0A0&amp;=%2F_%0A-&amp;=+%0A%2F=&amp;=%7C%0A%5C&amp;=~%0A%60&amp;_x:0.25%3B&amp;=Insert&amp;=Home&amp;=PgUp%3B&amp;@_w:1.5%3B&amp;=Tab&amp;=Q&amp;=W&amp;=E&amp;=R&amp;=T&amp;=Y&amp;=U&amp;=I&amp;=O&amp;=P&amp;=%7B%0A%5B&amp;=%7D%0A%5D&amp;_a:0&amp;w:1.5%3B&amp;=Delete%0A%0A%0A%0ABS&amp;_x:0.25&amp;a:4%3B&amp;=Delete&amp;=End&amp;=PgDn%3B&amp;@_w:1.75%3B&amp;=Control&amp;=A&amp;=S&amp;=D&amp;=F&amp;=G&amp;=H&amp;=J&amp;=K&amp;=L&amp;=%2F:%0A%2F%3B&amp;=%22%0A%27&amp;_w:2.25%3B&amp;=Enter&amp;_x:0.25%3B&amp;=Op1&amp;=Op2&amp;=Op3%3B&amp;@_w:2.25%3B&amp;=Shift&amp;=Z&amp;=X&amp;=C&amp;=V&amp;=B&amp;=N&amp;=M&amp;=%3C%0A,&amp;=%3E%0A.&amp;=%3F%0A%2F%2F&amp;_w:2.75%3B&amp;=Shift&amp;_x:1.25%3B&amp;=%E2%86%91%3B&amp;@_w:1.25%3B&amp;=Fn&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-logo-apple-outline%27%3E%3C%2F%2Fi%3E&amp;_a:7&amp;w:6.25%3B&amp;=&amp;_a:4&amp;w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-logo-apple%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-Hamburger-Menu%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=Fn&amp;_x:0.25%3B&amp;=%E2%86%90&amp;=%E2%86%93&amp;=%E2%86%92\">I&#39;ve got a 75-key layout I&#39;m mulling over.</a> If I end up liking\nthat, I can get a case &amp; mounting plate <a href=\"http://builder.swillkb.com/\">designed</a> &amp;\n<a href=\"https://www.ponoko.com/\">fabricated</a>. Then, I can buy all the <a href=\"https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\">switches</a> and\n<a href=\"http://amzn.to/1UUHUu8\">diodes</a>. And last, but not least, I&#39;ll have to design a circuit board &amp;\n<a href=\"https://oshpark.com/\">get that fabricated</a>.</p>\n<p>Or, if I really want to go for that handcrafted artisan experience - which I\njust might, because I&#39;m a glutton for punishment - I&#39;ve got something like\nthis in my future:</p>\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/MrokZ1afnVg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I think I've caught the DIY keyboard hacking bug, and I'll probably\nend up building something weird.\n\n<!--more-->\n\nI love tinkering and I love keyboards. But, I'd never really tinkered with my\nkeyboards - at least, not beyond [disassembling & cleaning them][hhkbclean].\nI'd seen a smattering of crowdfunded projects over the years like the\n[ErgoDox][] and [Keyboardio][]. But, those seemed like complex design\n& manufacturing efforts - not like, you know, something I'd do for fun.\n\nBut then, last summer, I ran across [Massdrop][] and saw the [Infinity 60%\nKeyboard Kit][infinity60]. From there, I ran across \"[Introduction to Keyboard\nProgramming][kbprog]\" and some rusty gears turned over in my brain. I\ndiscovered [geekhack][] and [Deskthority][] and fell down a dangerous\nrabbit hole of [switches][] and [caps][], [layouts][] and [plates][],\n[microcontrollers][teensy] and [firmware][].\n\nTurns out there are a bunch of folks doing this stuff as a hobby, along with a\nniche industry to support it.\n\nAfter a few months of absorbing information and spectating on projects in\nforums, it occurred to me that this did in fact seem like something I'd have\nfun doing. But, rather than just dive in, I decided to start small:\n\n[kits]: http://www.geekhackers.org/products/jd40-jdcarpe-s-40-keyboard-kit-sorbothane-titanium-all-profits-go-to-the-nathan-j-walters-foundation-rip-smallfry\n[firmware]: https://geekhack.org/index.php?topic=41989.0\n[teensy]: https://www.pjrc.com/teensy/\n[plates]: https://deskthority.net/workshop-f7/thkb-tiny-hacking-keyboard-40-t6455.html\n[layouts]: https://geekhack.org/index.php?topic=47133\n[caps]: https://geekhack.org/index.php?board=80.0\n[switches]: https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\n[Deskthority]: https://deskthority.net/\n[geekhack]: https://geekhack.org/\n[infinity60]: https://www.massdrop.com/buy/infinity-keyboard-kit\n[keyboardio]: http://shop.keyboard.io/\n[ergodox]: https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/\n[key64]: http://www.key64.org/\n[hhkbclean]: http://blog.lmorchard.com/2006/07/31/i-heart-my-filthy-happy-hacking-keyboard/\n[kbprog]: https://www.massdrop.com/article/introduction-to-keyboard-programming\n[massdrop]: https://www.massdrop.com/\n\n[<img class=\"fullwidth\" id=\"thumbnail\" src=\"/uploads/2016/teensy-ps2-adapter/minikey.jpg\">](https://www.flickr.com/photos/deusx/24832952956/)\n\nLast weekend, I ran to my local [Micro Center][] and picked up a [Teensy\n2.0][teensy]. That seems to be the microcontroller board a lot of keyboard\nprojects have been using, so I figured getting acquainted with it would be\nhandy. After the traditional \"hello world\" project of [getting an LED to\nblink][blinky], I wired up a pile of buttons on a breadboard and [built the\nfirmware to my first DIY USB keyboard][keyboardtut].\n\nOkay, so it was just a tutorial and no special effort on my part. But, the\nprocess was super easy, so the hacking possibilities started piling up in my\nhead.\n\nThen, I discovered the [TMK keyboard firmware][firmware] on the\n[geekhack][] forums. Basically, all the software work had been done for me.\nThe TMK firmware is a ready-made pile of code for translating from basically any\nmatrix of switches or wire protocol to USB HID keyboard codes - complete with\nsupport for flexible key maps, mouse control, function-key layers, macros, and\na bunch of other things. \n\nMy little 10-key breadboard toy wasn't all that practical. But, I discovered\nthat the TMK firmware also supported building keyboard *converters*. Of\nparticular interest was the [PS/2 to USB keyboard converter][ps2usb], since I\njust happen to have a pile of older PS/2 keyboards lying around doing nothing.\n\nThe converter only took 4 wires, so I sacrificed a PS/2 cable from the back of\na drawer and came up with this:\n\n[ps2usb]: https://github.com/tmk/tmk_keyboard/blob/master/converter/ps2_usb/README.md\n[keyboardtut]: https://www.pjrc.com/teensy/td_keyboard.html\n[blinky]: https://www.pjrc.com/teensy/tutorial.html\n[micro center]: http://www.microcenter.com/site/stores/madison-heights.aspx\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/adapter.jpg\">](https://www.flickr.com/photos/deusx/24832952956/)\n\nCoincidentally, the day after I built this, I got some IBM Model M keyboards\nfrom [a friend][nuxx] of mine. I've been wanting to fill my office with the\nsound of buckling springs for awhile, now. \n\n[nuxx]: https://nuxx.net/blog/\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/modelm.jpg\">](https://www.flickr.com/photos/deusx/24685464831/)\n\nThis is all hooked up to a modern MacBook Pro, but the IBM Model M is\ndecidedly lacking in [Command (⌘) keys][command]. So, the DIY converter\nproved its worth immediately. \n\nI put together [my own simple keymap][lmotmk] and spent a day with it,\ntweaking as I went.  I set up [a file watcher][kicker] to rebuild the\nfirmware whenever I changed the source. Along with that, the [Teensy\nLoader][loader] has an \"auto\" mode which reprograms the Teensy whenever I hit\nthe reset button. \n\nAt this point, I've replaced the Caps Lock key with Control and changed Alt keys\nto Command keys.  Then, I turned the Print Screen / Caps Lock / Pause trio\ninto volume control keys. After that, F10, F11, and F12 were pressed into\nservice as previous, next, & pause buttons for music. It was all a bit fiddly,\nbut it's the kind of thing I enjoy.\n\nOverall, this all feels like a nice intro into a new hobby. Next, I'm\nconsidering [replacing the IBM Model M keyboard controller][ibmcontrol]\naltogether, which will embed the Teensy right in the case. \n\nAfter that, I'm tempted to turn my screwdriver on that other keyboard on my\ndesk - the Happy Hacking Keyboard Professional. There's a [Teensy-based\nalternative controller][hhkbalt] option for it, also using the TMK firmware.\n\nOnce I feel comfortable with all that, it might be time to build something of\nmy own! [I've got a 75-key layout I'm mulling over.][nfhkb] If I end up liking\nthat, I can get a case & mounting plate [designed][platebuilder] &\n[fabricated][ponoko]. Then, I can buy all the [switches][switches] and\n[diodes][]. And last, but not least, I'll have to design a circuit board &\n[get that fabricated][oshpark].\n\nOr, if I really want to go for that handcrafted artisan experience - which I\njust might, because I'm a glutton for punishment - I've got something like\nthis in my future:\n\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/MrokZ1afnVg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n[oshpark]: https://oshpark.com/\n[diodes]: http://amzn.to/1UUHUu8\n[ponoko]: https://www.ponoko.com/\n[platebuilder]: http://builder.swillkb.com/\n[hhkbalt]: https://geekhack.org/index.php?topic=12047.0\n[ibmcontrol]: https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\n[kicker]: https://github.com/alloy/kicker\n[loader]: https://www.pjrc.com/teensy/loader.html\n[lmotmk]: https://github.com/lmorchard/tmk_keyboard/blob/lmo-model-mac/converter/ps2_usb/keymap_modelmac.c\n[command]: https://en.wikipedia.org/wiki/Command_key\n[nfhkb]: http://www.keyboard-layout-editor.com/##@_name=noisy%20fat%20hacker%20keyboard&author=lmorchard&switchMount=cherry&switchBrand=cherry&plate:true%3B&@=Esc&=!%0A1&=%2F@%0A2&=%23%0A3&=$%0A4&=%25%0A5&=^%0A6&=%2F&%0A7&=*%0A8&=%28%0A9&=%29%0A0&=%2F_%0A-&=+%0A%2F=&=|%0A\\&=~%0A%60&_x:0.25%3B&=Insert&=Home&=PgUp%3B&@_w:1.5%3B&=Tab&=Q&=W&=E&=R&=T&=Y&=U&=I&=O&=P&={%0A[&=}%0A]&_a:0&w:1.5%3B&=Delete%0A%0A%0A%0ABS&_x:0.25&a:4%3B&=Delete&=End&=PgDn%3B&@_w:1.75%3B&=Control&=A&=S&=D&=F&=G&=H&=J&=K&=L&=%2F:%0A%2F%3B&=%22%0A%27&_w:2.25%3B&=Enter&_x:0.25%3B&=Op1&=Op2&=Op3%3B&@_w:2.25%3B&=Shift&=Z&=X&=C&=V&=B&=N&=M&=%3C%0A,&=%3E%0A.&=%3F%0A%2F%2F&_w:2.75%3B&=Shift&_x:1.25%3B&=%E2%86%91%3B&@_w:1.25%3B&=Fn&_w:1.25%3B&=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-logo-apple-outline%27%3E%3C%2F%2Fi%3E&_a:7&w:6.25%3B&=&_a:4&w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-logo-apple%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-Hamburger-Menu%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=Fn&_x:0.25%3B&=%E2%86%90&=%E2%86%93&=%E2%86%92\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/06/keyboard-hacking",
    "thumbnail": "/uploads/2016/teensy-ps2-adapter/minikey.jpg",
    "summary": "<p><strong>TL;DR</strong>: I think I&apos;ve caught the DIY keyboard hacking bug, and I&apos;ll probably\nend up building something weird.</p>\n"
  },
  {
    "title": "Review: Steam Controller",
    "tags": [
      "reviews",
      "gaming",
      "steam",
      "hardware"
    ],
    "year": "2016",
    "month": "02",
    "day": "05",
    "isDir": false,
    "slug": "steam-controller",
    "date": "2016-02-05T12:00:00.000Z",
    "postName": "2016-02-05-steam-controller",
    "html": "<p><strong>TL;DR</strong>: The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is an odd little duck. But, I&#39;m rooting\nfor it.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p><a href=\"https://www.flickr.com/photos/deusx/24726637531/in/dateposted/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/hhkb.jpg\"></a></p>\n<p>I&#39;ve long been a fan of unusual input devices, the more fiddly the better. </p>\n<p>It&#39;s been a little over 15 years since I last used a standard 104-key keyboard\non a PC, having been a <a href=\"http://amzn.to/1nQbo26\">Happy Hacking Keyboard</a> enthusiast ever since I\nfirst <a href=\"http://www.linuxjournal.com/article/3147\">read about it in Linux Journal</a>. </p>\n<p>And, as the gaming world has invested in <a href=\"http://icrontic.com/article/a4tech-v3-bloody-gun3-gaming-mouse-review\">increasingly complex gaming mice</a> over\nthe years, I&#39;ve been solidly in the trackball camp since the late 1990&#39;s when\nI played hours &amp; hours of Quake 2 and Unreal Tournament. </p>\n<p><a href=\"http://vgjunk.tumblr.com/post/63391681929/john-romero-wants-you-to-buy-a-mad-catz-panther-xl\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/panther-xl.jpg\"></a></p>\n<p>The <a href=\"http://assassin3d.squarespace.com/history-panther-xl/\">Mad Catz Panther XL</a> trackball-and-joystick combo\nwas my favorite for flight &amp; space sims like Freespace. I used a <a href=\"http://amzn.to/1nQby9D:\">Microsoft\nSidewinder Strategic Commander</a> to play Everquest one-handed. (The\nother hand was for tinkering with <a href=\"https://github.com/brainiac/showeq\">ShowEQ</a> on a nearby Linux machine, of course.)</p>\n<p>More recently, when I was playing a space trucker in EVE Online, I would often\nride a recumbent exercise bike and use a <a href=\"http://amzn.to/1NKn0bq\">One Finger Mouse</a> with my\nlaptop to align and warp between stations.</p>\n<p>Given all the above, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> looked completely relevant to my\ninterests when <a href=\"http://kotaku.com/valve-announces-the-steam-controller-a-new-way-to-cont-1411558137\">it was announced</a> way back in 2013. </p>\n<p>Fast forward to November 2015, and after many prototypes &amp; tweaks, <a href=\"http://www.theverge.com/2015/11/10/9705234/valve-steam-machines-controller-link-launch\">it finally\narrived</a>. I managed to wait a month or so, watching for red flags\nin early reviews. But, of course, I gave in and had it in time for my\ntraditional end-of-year holiday gaming binge. <br style=\"clear: both\"></p>\n<h2 id=\"ergonomics\">Ergonomics</h2>\n<img class=\"inset left\" src=\"/uploads/2016/steam-controller/couch-pc.jpg\">\n\n<p>At <a href=\"http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/\">my couch PC</a>, I use an Xbox 360 controller whenever I can. I don&#39;t\nwant to clutter the living room with big weird joysticks &amp; such.</p>\n<p>Besides that, having my hands in a neutral position in my lap seems to\nhelp quite a lot with keeping wrist pain at bay after a day in my office\nalready spent with trackball and keyboard. But, not every game supports a\ncontroller out of the box.</p>\n<p>So, it seemed really promising when I read Valve&#39;s claims that the <a href=\"http://amzn.to/1nQzE4f\">Steam\nController</a> would work with &quot;<a href=\"http://store.steampowered.com/app/353370/\">games from all genres</a>&quot;\nincluding titles typically bound to a keyboard and mouse.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24524584120\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/all-3-controllers.jpg\"></a></p>\n<p>Now that I&#39;ve got the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> in my hands, it makes my Xbox 360\ncontroller feel tiny. It reminds me a little of the original Xbox controller.\nThough, it&#39;s really unfair to take that comparison too far - I mean, that\nthing was bigger than some actual game consoles.</p>\n<p>The Xbox 360 handles taper down into rounded points that cover a third of my\npalm. But, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> bulges out at the bottoms and covers about\nhalf of my palm.  </p>\n<p>It&#39;s like the difference between a small chicken egg\nand a jumbo.  (Sorry, I&#39;ve been cooking today.) And where my fingers curl\ninward toward my palm with the 360 controller, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> has\nthem pointing more toward my chest to accomodate the thicker grips.\n<br style=\"clear: both\"></p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24206620773/in/datetaken/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/360-hands.jpg\"></a>\n<a href=\"https://www.flickr.com/photos/deusx/24740006121/in/datetaken/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/sc-hands.jpg\"></a></p>\n<p>(And, this is where I realize I was never destined to be a <a href=\"https://www.youtube.com/watch?v=PZxX3-rJoNI\">hand model</a>.)</p>\n<p>The Xbox 360 controller feels like curved handlebars between\nmy palms and the last three fingers, leaving just my index fingers and thumbs\nfree to move. It could be that I&#39;ve gotten used to it over the years, but the\ndesign of this controller feels like it naturally falls into my relaxed\nhands after I&#39;ve flopped them lazily into my lap. </p>\n<p>The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a>, though, seems to call for a more tense grip that I\ncan feel in my shoulders &amp; wrists after awhile. </p>\n<p>To keep things stable as I play, I find myself using some arm muscle &amp; elbow\npressure to wedge it between the bony first knuckles of my index fingers and\nthe bases of my thumbs.  Except for a little stabilization from my pinkies and\nring fingers, this leaves the rest of my fingers free to reach the thumbpads\nand buttons. <br style=\"clear: both\"></p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24726646081/in/dateposted-public/\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/sides.jpg\"></a>\n<a href=\"https://www.flickr.com/photos/deusx/24702264542/in/dateposted-public/\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/backs.jpg\"></a></p>\n<p>The face of the Xbox 360 controller follows a convex curve. When relaxed, my\nextended thumbs arch over that curve, their pads resting on the left stick and\nright button cluster.</p>\n<p>The face of the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is concave, almost the inverse of the\nother controller. My bent thumbs hover over a pair of circular trackpads,\nwhich are far better controlled with strokes from thumb tips than by swiping or\nrolling flat thumb pads across them.</p>\n<p>Overall, I can&#39;t say I&#39;m entirely comfortable with the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> in\nmy hands. That worries me a little after years of being unkind to my wrists.\nI&#39;m still adjusting my grip on the thing, though. Maybe I&#39;ll get used to it. \nAfter all, I spent years with the first NES gamepad - and it was no ergonomic\nmarvel.\n<br style=\"clear: both\"></p>\n<h2 id=\"hardware\">Hardware</h2>\n<p>In terms of input hardware, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> offers interesting\nimprovements over my trusty old Xbox 360 controller.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24525157630/in/photostream/\"><img id=\"thumbnail\" class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-top.jpg\"></a></p>\n<p>On the front, there&#39;s the &quot;Valve&quot; button flanked by a back &amp; start buttons.\nThere&#39;s also an analog clicky joystick and an X/Y/A/B button cluster. </p>\n<p>But, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a>&#39;s special sauce is the pair of trackpads at the\ntop of the controller. More detail about those when I get to writing about the\nsoftware.</p>\n<p>Beneath these trackpads are the <a href=\"http://www.precisionmicrodrives.com/vibrating-vibrator-vibration-motors/linear-resonant-actuator-lra-haptic-vibration-motors\">linear resonant actuators</a> used for haptic\nfeedback. Interestingly, I haven&#39;t found any games that can use these haptic actuators\nto generate in-game vibration. They seem limited to haptics for controller\nmodes, so far.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24820691505/in/dateposted/\"><img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back.jpg\"></a></p>\n<p>On the back, there&#39;s a pair of shoulder buttons and analog triggers that bottom\nout in clicks like a GameCube controller. Along the handgrips lie two more wide buttons under the\nmiddle &amp; ring fingers.  The plate for those buttons doubles as the battery\ndoor, and one AA battery hides inside each of the handgrips.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24727371301/in/dateposted/\"><img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back-open.jpg\"></a></p>\n<p>On the inside, there are gyro and accelerometer sensors to detect motion and\norientation of the controller. </p>\n<p>If you want to see more of the innards, \nconsult the folks at <a href=\"https://www.ifixit.com/\">iFixit</a>. They did <a href=\"https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\">a great job of documenting their Steam\nController teardown</a>, saving me from feeling like I\nshould open mine up for the sake of this post.</p>\n<p>(But, who am I kidding? I&#39;ll open it up at some point, because that&#39;s\nwhat I do with all my toys.)</p>\n<p>As for power, the controller can run tethered via a micro-USB cable, or\nwirelessly using an included a USB dongle and a pair of AA batteries. </p>\n<p>You can use rechargeables,\nbut the controller itself does not charge them while plugged in. I&#39;d like to\nsee Valve come up with a rechargeable pack at some point.\n<br style=\"clear: both\"></p>\n<h2 id=\"software\">Software</h2>\n<p>The physical design and laundry list of sensors is vaguely interesting. But,\nwhat really makes the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> shine - and sometimes stink - is\nthe software. And, that software is Steam in Big Picture Mode.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/big-picture-home.jpg\">\n\n<p>The only way to configure the Controller is via Big Picture mode.\nAnd, as far as I can tell, launching games (even non-Steam games) via Big\nPicture is the only way to load game-specific configurations. </p>\n<p>I understand that this thing was designed to be paired with a Steam Machine\nand played on a TV. But, I don&#39;t play in front of a TV - and I doubt many PC\ngamers do. I find Big Picture Mode clunky and occasionally crashy. A few\ntimes, the controller has gone non-responsive or got loaded with the wrong\nconfiguration. </p>\n<p>After <a href=\"http://store.steampowered.com/controller/update/dec15\">the firmware update in December</a>, my configuration changes\nare often reverted &amp; lost. Sometimes the Big Picture interface offers up\ndelays &amp; progress animations with no explanation of what&#39;s happening. I&#39;m\nhoping I can troll the forums for some fixes, but having to do that is a bit\ndisappointing.</p>\n<p>It&#39;s early days yet, so things could get better with future patches. Valve\nshows every indication that they plan to support this device for the long\nhaul.  Still, I&#39;d love it if Valve (or the community) released an &quot;expert&quot;\nconfiguration tool as a straightforward desktop Windows application.  Just let\nme quickly assign bindings in a solid, ugly, utilitarian interface and let me\nmanually save &amp; load configurations.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config.png\">\n\n<p>The awkwardness is frustrating, because configuration is the whole reason the\ncontroller exists: I put up with the annoying UI because the result is\ninteresting. With a little tweaking, it really can generate whatever inputs are\nneeded for any game I want to play.</p>\n<p>Except for the Valve button, there are 17 other buttons on the device available\nto generate any combination of keyboard &amp; mouse signals. That includes the\nclicky trackpads &amp; joystick - and I&#39;m counting the analog triggers twice,\nbecause you can set different inputs for both partial and full pulls.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/trackpad-config.png\">\n\n<p>And then, there are the trackpads: In a nutshell, either trackpad can be\nconfigured as a mouse, an analog joystick, a digital d-pad, a cluster of\nbuttons, or to summon up overlay menus triggering arbitrary inputs. There are 9\ndifferent modes covering slightly different simulations of these devices. Each\nmode comes with its own control panel offering an array of sliders, variants,\nand advanced settings.</p>\n<p>For button input, there are ways to define segments of the trackpad as virtual\nbuttons activated on touch or by clicking down the pad.  Joystick input comes\nin a few subtly different flavors I haven&#39;t yet fully explored. </p>\n<p>I&#39;ve also not played much with touch menus. These consist of Steam-generated\noverlays offering up to 16 buttons plus an alternate layer of 16 more.\nBetween both trackpads, this can add up to 64 different virtual buttons\ntriggering whatever keyboard, mouse, or gamepad combinations I&#39;d like.</p>\n<p>For pointer input, there&#39;s a mouse mode similar to a laptop trackpad, with\nvarious acceleration and sensitivity settings. To my personal delight, there&#39;s\na trackball mode: the pad signals momentum through haptic rasping that\ntrails off after your thumb has lifted from a swipe - and it stops immediately\nwhen your thumb returns to the pad. </p>\n<p>You can also enable scroll wheel inputs via the raised outer edges of the\ntrackpads. It feels like to the old click-wheel iPods. </p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config-import.png\">\n\n<p>If all this sounds overwhelming, Steam offers ready-made crowdsourced\nconfigurations.  These are created by game developers, Valve, and shared by\nthe community at large. This means that I don&#39;t have to wait for all the\ndevelopers in the world to get around to supporting this particular weird\ncontroller. Ideally, as time goes on, control schemes will arrive that hit a\nsweet spot for every game.</p>\n<p>Valve has certainly thrown a lot at the wall here. We&#39;ll see how much sticks.\nIt certainly scratches my itch for a fiddly input device, in any case.</p>\n<h2 id=\"compatibility\">Compatibility</h2>\n<p>In a nutshell, if it accepts mouse, keyboard, joystick, or gamepad - the\n<a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> works. In this, the marketing is correct and it does what\nit says on the tin.  The more pressing issue is whether the Controller is\ncompatible with <em>me</em> as an interface to <em>the games I like</em>.</p>\n<p>Of course, it should be noted that I&#39;m by no means a pro gamer. I&#39;m\nthe filthiest of casuals - whatever that means after playing video games avidly\nfor 30 years. I&#39;m in it for fun, couldn&#39;t care less about being competitive.</p>\n<p>I&#39;ve had the most luck in mouse-and-keyboard games like the ponderously-paced\n<a href=\"http://www.failbettergames.com/sunless/\">Sunless Sea</a> and even in the more frenetic <a href=\"http://us.battle.net/d3/en/\">Diablo III</a>. Of course, at\ntimes, I lose track of the pointer in Diablo when I&#39;m spazzing out with my\nthumb and flinging it around between targets and running away to kite things.\nThat seems to get better as I turn down acceleration and play with\nsensitivity. The newer Mouse Regions mode looks interesting, too, as it\nprovides a direct screen-to-trackpad map rather than mouse or trackball style\ninput. </p>\n<p>For what it&#39;s worth, <a href=\"http://kotaku.com/how-league-of-legends-enables-toxicity-1693572469\">I don&#39;t play a lot of MOBAs lately</a>, but I\ncan imagine the dynamics are similar to Diablo.</p>\n<p>I also played a bit of <a href=\"http://store.steampowered.com/app/440/\">Team Fortress 2</a>. As promised, I was able to use\na trackpad for steering &amp; coarse aiming and then tilt the controller itself to\nrefine my aim. Like many things with this device, it takes a bit of getting\nused to and kind of turns it into a new game. Fun-ish, but I&#39;m not great at it\nyet.</p>\n<p><a href=\"http://store.steampowered.com/app/252950/\">Rocket League</a> worked out pretty well - in that I was equally terrible both\nwith the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> and the Xbox 360 controller. I had a lot of fun\nand never felt like I could blame the controller. Again, I&#39;m just a filthy\ncasual.</p>\n<p>I didn&#39;t have as much luck with <a href=\"http://store.steampowered.com/app/323040/\">Laserlife</a>, a surreal rhythm game in the\ntradition of Rez where you guide twin laser trails through targets with analog\nsticks. Ideally, I should be able to use the two trackpads as analog sticks.\nBut, I did a lot better going back to the physical sticks on my Xbox 360\ncontroller. I think the spring resistance in the physical joysticks helped cue\nme into its position. </p>\n<p>The issue seems similar to how I rarely get along with on-screen\ncontrols in smartphone games. But, these trackpads have an advantage\nover virtual glass joysticks - i.e. tactile cues like their surface curve,\nraised edges, and the embossed d-pad shape. I&#39;d like to see if I can find\nworkable settings, because twin-stick shooters are one of my favorite genres.</p>\n<p><a href=\"https://www.elitedangerous.com/\">Elite Dangerous</a> offers a kind of bottomless pit of customization.  It&#39;s a\nwork in progress translating my mouse-and-keyboard controls to a comfortable\nscheme on the Controller. For example, it was stupid fun tying pitch and roll\nto the motion sensors and flying the controller around like a model spaceship.\n(I made zoomy-whoosh-pew-pew noises, too.) I&#39;ve seen other control schemes use\nthe gyro for looking around the cockpit, which is actually used to summon up\nvarious ship panels via gaze. This won&#39;t replace <a href=\"https://www.youtube.com/watch?v=AvAI3l0v62E\">a super-immersive HOTAS &amp;\nhead tracking setup</a>, but I think I can get it to an enjoyable\npoint.</p>\n<p>Overall, I&#39;ve had decent luck with the games I play. Where things\nhaven&#39;t quite worked out, I have a hunch that there&#39;s a workable control\nscheme somewhere inside the giant bag of options on offer. I&#39;ve seen some\nfolks describe the process a bit like getting accustomed to a new keyboard\nlayout like Dvorak. That&#39;s oddly interesting to me, so I&#39;m going to keep\npoking at it.</p>\n<h2 id=\"hackability\">Hackability</h2>\n<p>The Controller is a USB HID composite device - in other words, It <em>is</em> a mouse\n<em>and</em> a keyboard <em>and</em> a joystick <em>and</em> a gamepad, as far as USB is concerned.</p>\n<p>I&#39;ve gotten the sense that Steam does <em>something</em> with the Controller input,\nbut I&#39;m not sure if it analgous to things like <a href=\"http://joytokey.net/en/\">JoyToKey</a> or <a href=\"https://autohotkey.com/\">AutoHotKey</a>\nto translate things on the PC side. My guess is that it leans most heavily on\nprocessing in the controller itself to emit standard USB messages to\nachieve maximum compatibility in games.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24639522001/in/dateposted-public/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/teensy-keyboard.jpg\"></a></p>\n<p>Considering the things found in the <a href=\"https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\">iFixit teardown</a>,\nI&#39;m not seeing any particularly exotic parts. Valve stated early on that &quot;<a href=\"http://hackaday.com/2013/10/01/steam-controller-open-and-hackable/\">the\nSteam Controller was designed from the ground up to be hackable</a>&quot;.</p>\n<p>For example, from <a href=\"https://www.reddit.com/r/SteamControllerMods/comments/3p6d26/some_details_on_the_chips_in_the_controller_and/\">a Reddit thread</a>, I\nlearned that the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is built around the <a href=\"http://www.arm.com/products/processors/cortex-m/cortex-m0.php\">ARM\nCortex-M0</a>. That&#39;s similar to the <a href=\"http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php\">ARM Cortex-M0+</a>\nused in the <a href=\"https://www.pjrc.com/store/teensylc.html\">Teensy LC</a>. </p>\n<p>This is interesting, because I&#39;ve been reading up on how to build a custom\nkeyboard. (You know, as one does.) In the course of that, I&#39;ve been\nacquainting myself with the <a href=\"https://www.pjrc.com/teensy/\">Teensy line of USB development boards</a>.</p>\n<p>Lately, I&#39;ve been playing with the <a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a>. That seems to be\npopular in the DIY community for how easy it makes implementing \nUSB devices.  Granted, that&#39;s a different microcontroller (an <a href=\"http://www.atmel.com/devices/atmega32u4.aspx\">Atmel\nATmega32u4</a>), but I&#39;m hoping that general experience with things like the\nTeensy family of dev boards can eventually translate to some personal fun and\nsome community firmware to explore the potential of the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a>.</p>\n<p>As it is, someone&#39;s already figured out how to <a href=\"https://steamcommunity.com/app/353370/discussions/0/494632506573267894/\">play music through the haptic\nactuators</a> and they released the <a href=\"https://gitlab.com/Pilatomic/SteamControllerSinger\">source\ncode</a>.  That&#39;s more a function of decoding the \nprotocol from PC to Controller than messing around with the microcontrollers,\nbut it&#39;s still pretty cool.</p>\n<p>It would be great if Valve released more docs &amp; code around this thing. I\ncan understand that there might be some pressure to keep the Steam hardware &amp;\nsoftware ecosystem cohesive. But, for a weird little device like this, I\nimagine they&#39;d only get more sales by fully opening everything up and letting\nthe tinkering world pave the way for more uses - and maybe fix a few bugs for\nthem as clever folks scratch their own itches.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is an odd little duck. It&#39;s a bit awkward to hold\nand the software is not great. But, software can be fixed and the controls &amp;\nsensors onboard have so much great potential for PC gaming. </p>\n<p>This is clearly not a mature, finished product - which is disappointing,\nbecause I paid money for it - but I&#39;m really rooting for it. And I&#39;ve already\nused it for dozens of hours in games, so it&#39;s obviously worked for me in many\ncapacities. I&#39;m really hoping that Valve follows through on their promises to\nopen things up for tinkering - because it might be the thing that ultimately\nredeems the whole project.</p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: The [Steam Controller][] is an odd little duck. But, I'm rooting\nfor it.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/hhkb.jpg\">](https://www.flickr.com/photos/deusx/24726637531/in/dateposted/)\n\nI've long been a fan of unusual input devices, the more fiddly the better. \n\nIt's been a little over 15 years since I last used a standard 104-key keyboard\non a PC, having been a [Happy Hacking Keyboard][hhkb] enthusiast ever since I\nfirst [read about it in Linux Journal][hhkb-review]. \n\n[hhkb-review]: http://www.linuxjournal.com/article/3147\n[hhkb]: http://amzn.to/1nQbo26\n\nAnd, as the gaming world has invested in [increasingly complex gaming mice][gamingmice] over\nthe years, I've been solidly in the trackball camp since the late 1990's when\nI played hours & hours of Quake 2 and Unreal Tournament. \n\n[gamingmice]: http://icrontic.com/article/a4tech-v3-bloody-gun3-gaming-mouse-review\n\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/panther-xl.jpg\">](http://vgjunk.tumblr.com/post/63391681929/john-romero-wants-you-to-buy-a-mad-catz-panther-xl)\n\nThe [Mad Catz Panther XL][pantherxl] trackball-and-joystick combo\nwas my favorite for flight & space sims like Freespace. I used a [Microsoft\nSidewinder Strategic Commander][msssc] to play Everquest one-handed. (The\nother hand was for tinkering with [ShowEQ][] on a nearby Linux machine, of course.)\n\n[showeq]: https://github.com/brainiac/showeq\n\nMore recently, when I was playing a space trucker in EVE Online, I would often\nride a recumbent exercise bike and use a [One Finger Mouse][ofm] with my\nlaptop to align and warp between stations.\n\n[msssc]: http://amzn.to/1nQby9D:\n[pantherxl]: http://assassin3d.squarespace.com/history-panther-xl/ \n[ofm]: http://amzn.to/1NKn0bq\n\nGiven all the above, the [Steam Controller][] looked completely relevant to my\ninterests when [it was announced][scannounce] way back in 2013. \n\nFast forward to November 2015, and after many prototypes & tweaks, [it finally\narrived][screleased]. I managed to wait a month or so, watching for red flags\nin early reviews. But, of course, I gave in and had it in time for my\ntraditional end-of-year holiday gaming binge. <br style=\"clear: both\">\n\n[scannounce]: http://kotaku.com/valve-announces-the-steam-controller-a-new-way-to-cont-1411558137\n[screleased]: http://www.theverge.com/2015/11/10/9705234/valve-steam-machines-controller-link-launch\n[Steam Controller]: http://amzn.to/1nQzE4f\n\n## Ergonomics\n\n<img class=\"inset left\" src=\"/uploads/2016/steam-controller/couch-pc.jpg\">\n\nAt [my couch PC][couchpc], I use an Xbox 360 controller whenever I can. I don't\nwant to clutter the living room with big weird joysticks & such.\n\n[couchpc]: http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/\n\nBesides that, having my hands in a neutral position in my lap seems to\nhelp quite a lot with keeping wrist pain at bay after a day in my office\nalready spent with trackball and keyboard. But, not every game supports a\ncontroller out of the box.\n\nSo, it seemed really promising when I read Valve's claims that the [Steam\nController][] would work with \"[games from all genres][steamhardware]\"\nincluding titles typically bound to a keyboard and mouse.\n\n[steamhardware]: http://store.steampowered.com/app/353370/\n\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/all-3-controllers.jpg\">](https://www.flickr.com/photos/deusx/24524584120)\n\nNow that I've got the [Steam Controller][] in my hands, it makes my Xbox 360\ncontroller feel tiny. It reminds me a little of the original Xbox controller.\nThough, it's really unfair to take that comparison too far - I mean, that\nthing was bigger than some actual game consoles.\n\nThe Xbox 360 handles taper down into rounded points that cover a third of my\npalm. But, the [Steam Controller][] bulges out at the bottoms and covers about\nhalf of my palm.  \n\nIt's like the difference between a small chicken egg\nand a jumbo.  (Sorry, I've been cooking today.) And where my fingers curl\ninward toward my palm with the 360 controller, the [Steam Controller][] has\nthem pointing more toward my chest to accomodate the thicker grips.\n<br style=\"clear: both\">\n\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/360-hands.jpg\">](https://www.flickr.com/photos/deusx/24206620773/in/datetaken/)\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/sc-hands.jpg\">](https://www.flickr.com/photos/deusx/24740006121/in/datetaken/)\n\n(And, this is where I realize I was never destined to be a [hand model][].)\n\n[hand model]: https://www.youtube.com/watch?v=PZxX3-rJoNI\n\nThe Xbox 360 controller feels like curved handlebars between\nmy palms and the last three fingers, leaving just my index fingers and thumbs\nfree to move. It could be that I've gotten used to it over the years, but the\ndesign of this controller feels like it naturally falls into my relaxed\nhands after I've flopped them lazily into my lap. \n\nThe [Steam Controller][], though, seems to call for a more tense grip that I\ncan feel in my shoulders & wrists after awhile. \n\nTo keep things stable as I play, I find myself using some arm muscle & elbow\npressure to wedge it between the bony first knuckles of my index fingers and\nthe bases of my thumbs.  Except for a little stabilization from my pinkies and\nring fingers, this leaves the rest of my fingers free to reach the thumbpads\nand buttons. <br style=\"clear: both\">\n\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/sides.jpg\">](https://www.flickr.com/photos/deusx/24726646081/in/dateposted-public/)\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/backs.jpg\">](https://www.flickr.com/photos/deusx/24702264542/in/dateposted-public/)\n\nThe face of the Xbox 360 controller follows a convex curve. When relaxed, my\nextended thumbs arch over that curve, their pads resting on the left stick and\nright button cluster.\n\nThe face of the [Steam Controller][] is concave, almost the inverse of the\nother controller. My bent thumbs hover over a pair of circular trackpads,\nwhich are far better controlled with strokes from thumb tips than by swiping or\nrolling flat thumb pads across them.\n\n[dpbone]: https://en.wikipedia.org/wiki/Phalanx_bone#Distal_phalanx\n\nOverall, I can't say I'm entirely comfortable with the [Steam Controller][] in\nmy hands. That worries me a little after years of being unkind to my wrists.\nI'm still adjusting my grip on the thing, though. Maybe I'll get used to it. \nAfter all, I spent years with the first NES gamepad - and it was no ergonomic\nmarvel.\n<br style=\"clear: both\">\n\n## Hardware\n\nIn terms of input hardware, the [Steam Controller][] offers interesting\nimprovements over my trusty old Xbox 360 controller.\n\n[<img id=\"thumbnail\" class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-top.jpg\">](https://www.flickr.com/photos/deusx/24525157630/in/photostream/)\n\nOn the front, there's the \"Valve\" button flanked by a back & start buttons.\nThere's also an analog clicky joystick and an X/Y/A/B button cluster. \n\nBut, the [Steam Controller][]'s special sauce is the pair of trackpads at the\ntop of the controller. More detail about those when I get to writing about the\nsoftware.\n\nBeneath these trackpads are the [linear resonant actuators][lra] used for haptic\nfeedback. Interestingly, I haven't found any games that can use these haptic actuators\nto generate in-game vibration. They seem limited to haptics for controller\nmodes, so far.\n\n[lra]: http://www.precisionmicrodrives.com/vibrating-vibrator-vibration-motors/linear-resonant-actuator-lra-haptic-vibration-motors\n\n[<img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back.jpg\">](https://www.flickr.com/photos/deusx/24820691505/in/dateposted/)\n\nOn the back, there's a pair of shoulder buttons and analog triggers that bottom\nout in clicks like a GameCube controller. Along the handgrips lie two more wide buttons under the\nmiddle & ring fingers.  The plate for those buttons doubles as the battery\ndoor, and one AA battery hides inside each of the handgrips.\n\n[<img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back-open.jpg\">](https://www.flickr.com/photos/deusx/24727371301/in/dateposted/)\n\nOn the inside, there are gyro and accelerometer sensors to detect motion and\norientation of the controller. \n\nIf you want to see more of the innards, \nconsult the folks at [iFixit][]. They did [a great job of documenting their Steam\nController teardown][teardown], saving me from feeling like I\nshould open mine up for the sake of this post.\n\n(But, who am I kidding? I'll open it up at some point, because that's\nwhat I do with all my toys.)\n\nAs for power, the controller can run tethered via a micro-USB cable, or\nwirelessly using an included a USB dongle and a pair of AA batteries. \n\nYou can use rechargeables,\nbut the controller itself does not charge them while plugged in. I'd like to\nsee Valve come up with a rechargeable pack at some point.\n<br style=\"clear: both\">\n\n[teardown]: https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\n[ifixit]: https://www.ifixit.com/\n\n## Software\n\nThe physical design and laundry list of sensors is vaguely interesting. But,\nwhat really makes the [Steam Controller][] shine - and sometimes stink - is\nthe software. And, that software is Steam in Big Picture Mode.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/big-picture-home.jpg\">\n\nThe only way to configure the Controller is via Big Picture mode.\nAnd, as far as I can tell, launching games (even non-Steam games) via Big\nPicture is the only way to load game-specific configurations. \n\nI understand that this thing was designed to be paired with a Steam Machine\nand played on a TV. But, I don't play in front of a TV - and I doubt many PC\ngamers do. I find Big Picture Mode clunky and occasionally crashy. A few\ntimes, the controller has gone non-responsive or got loaded with the wrong\nconfiguration. \n\nAfter [the firmware update in December][scdecpatch], my configuration changes\nare often reverted & lost. Sometimes the Big Picture interface offers up\ndelays & progress animations with no explanation of what's happening. I'm\nhoping I can troll the forums for some fixes, but having to do that is a bit\ndisappointing.\n\n[scdecpatch]: http://store.steampowered.com/controller/update/dec15\n\nIt's early days yet, so things could get better with future patches. Valve\nshows every indication that they plan to support this device for the long\nhaul.  Still, I'd love it if Valve (or the community) released an \"expert\"\nconfiguration tool as a straightforward desktop Windows application.  Just let\nme quickly assign bindings in a solid, ugly, utilitarian interface and let me\nmanually save & load configurations.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config.png\">\n\nThe awkwardness is frustrating, because configuration is the whole reason the\ncontroller exists: I put up with the annoying UI because the result is\ninteresting. With a little tweaking, it really can generate whatever inputs are\nneeded for any game I want to play.\n\nExcept for the Valve button, there are 17 other buttons on the device available\nto generate any combination of keyboard & mouse signals. That includes the\nclicky trackpads & joystick - and I'm counting the analog triggers twice,\nbecause you can set different inputs for both partial and full pulls.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/trackpad-config.png\">\n\nAnd then, there are the trackpads: In a nutshell, either trackpad can be\nconfigured as a mouse, an analog joystick, a digital d-pad, a cluster of\nbuttons, or to summon up overlay menus triggering arbitrary inputs. There are 9\ndifferent modes covering slightly different simulations of these devices. Each\nmode comes with its own control panel offering an array of sliders, variants,\nand advanced settings.\n\nFor button input, there are ways to define segments of the trackpad as virtual\nbuttons activated on touch or by clicking down the pad.  Joystick input comes\nin a few subtly different flavors I haven't yet fully explored. \n\nI've also not played much with touch menus. These consist of Steam-generated\noverlays offering up to 16 buttons plus an alternate layer of 16 more.\nBetween both trackpads, this can add up to 64 different virtual buttons\ntriggering whatever keyboard, mouse, or gamepad combinations I'd like.\n\nFor pointer input, there's a mouse mode similar to a laptop trackpad, with\nvarious acceleration and sensitivity settings. To my personal delight, there's\na trackball mode: the pad signals momentum through haptic rasping that\ntrails off after your thumb has lifted from a swipe - and it stops immediately\nwhen your thumb returns to the pad. \n\nYou can also enable scroll wheel inputs via the raised outer edges of the\ntrackpads. It feels like to the old click-wheel iPods. \n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config-import.png\">\n\nIf all this sounds overwhelming, Steam offers ready-made crowdsourced\nconfigurations.  These are created by game developers, Valve, and shared by\nthe community at large. This means that I don't have to wait for all the\ndevelopers in the world to get around to supporting this particular weird\ncontroller. Ideally, as time goes on, control schemes will arrive that hit a\nsweet spot for every game.\n\nValve has certainly thrown a lot at the wall here. We'll see how much sticks.\nIt certainly scratches my itch for a fiddly input device, in any case.\n\n## Compatibility\n\nIn a nutshell, if it accepts mouse, keyboard, joystick, or gamepad - the\n[Steam Controller][] works. In this, the marketing is correct and it does what\nit says on the tin.  The more pressing issue is whether the Controller is\ncompatible with *me* as an interface to *the games I like*.\n\nOf course, it should be noted that I'm by no means a pro gamer. I'm\nthe filthiest of casuals - whatever that means after playing video games avidly\nfor 30 years. I'm in it for fun, couldn't care less about being competitive.\n\nI've had the most luck in mouse-and-keyboard games like the ponderously-paced\n[Sunless Sea][] and even in the more frenetic [Diablo III][]. Of course, at\ntimes, I lose track of the pointer in Diablo when I'm spazzing out with my\nthumb and flinging it around between targets and running away to kite things.\nThat seems to get better as I turn down acceleration and play with\nsensitivity. The newer Mouse Regions mode looks interesting, too, as it\nprovides a direct screen-to-trackpad map rather than mouse or trackball style\ninput. \n\nFor what it's worth, [I don't play a lot of MOBAs lately][mobatoxic], but I\ncan imagine the dynamics are similar to Diablo.\n\n[mobatoxic]: http://kotaku.com/how-league-of-legends-enables-toxicity-1693572469\n\nI also played a bit of [Team Fortress 2][tf2]. As promised, I was able to use\na trackpad for steering & coarse aiming and then tilt the controller itself to\nrefine my aim. Like many things with this device, it takes a bit of getting\nused to and kind of turns it into a new game. Fun-ish, but I'm not great at it\nyet.\n\n[tf2]: http://store.steampowered.com/app/440/\n\n[Rocket League][] worked out pretty well - in that I was equally terrible both\nwith the [Steam Controller][] and the Xbox 360 controller. I had a lot of fun\nand never felt like I could blame the controller. Again, I'm just a filthy\ncasual.\n\nI didn't have as much luck with [Laserlife][], a surreal rhythm game in the\ntradition of Rez where you guide twin laser trails through targets with analog\nsticks. Ideally, I should be able to use the two trackpads as analog sticks.\nBut, I did a lot better going back to the physical sticks on my Xbox 360\ncontroller. I think the spring resistance in the physical joysticks helped cue\nme into its position. \n\nThe issue seems similar to how I rarely get along with on-screen\ncontrols in smartphone games. But, these trackpads have an advantage\nover virtual glass joysticks - i.e. tactile cues like their surface curve,\nraised edges, and the embossed d-pad shape. I'd like to see if I can find\nworkable settings, because twin-stick shooters are one of my favorite genres.\n\n[Elite Dangerous][] offers a kind of bottomless pit of customization.  It's a\nwork in progress translating my mouse-and-keyboard controls to a comfortable\nscheme on the Controller. For example, it was stupid fun tying pitch and roll\nto the motion sensors and flying the controller around like a model spaceship.\n(I made zoomy-whoosh-pew-pew noises, too.) I've seen other control schemes use\nthe gyro for looking around the cockpit, which is actually used to summon up\nvarious ship panels via gaze. This won't replace [a super-immersive HOTAS &\nhead tracking setup][eliteimmersive], but I think I can get it to an enjoyable\npoint.\n\n[eliteimmersive]: https://www.youtube.com/watch?v=AvAI3l0v62E\n[Sunless Sea]: http://www.failbettergames.com/sunless/\n[Diablo III]: http://us.battle.net/d3/en/\n[Laserlife]: http://store.steampowered.com/app/323040/\n[Rocket League]: http://store.steampowered.com/app/252950/\n[Elite Dangerous]: https://www.elitedangerous.com/\n \nOverall, I've had decent luck with the games I play. Where things\nhaven't quite worked out, I have a hunch that there's a workable control\nscheme somewhere inside the giant bag of options on offer. I've seen some\nfolks describe the process a bit like getting accustomed to a new keyboard\nlayout like Dvorak. That's oddly interesting to me, so I'm going to keep\npoking at it.\n\n## Hackability\n\nThe Controller is a USB HID composite device - in other words, It *is* a mouse\n*and* a keyboard *and* a joystick *and* a gamepad, as far as USB is concerned.\n\nI've gotten the sense that Steam does *something* with the Controller input,\nbut I'm not sure if it analgous to things like [JoyToKey][] or [AutoHotKey][]\nto translate things on the PC side. My guess is that it leans most heavily on\nprocessing in the controller itself to emit standard USB messages to\nachieve maximum compatibility in games.\n\n[JoyToKey]: http://joytokey.net/en/\n[AutoHotKey]: https://autohotkey.com/\n\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/teensy-keyboard.jpg\">](https://www.flickr.com/photos/deusx/24639522001/in/dateposted-public/)\n\nConsidering the things found in the [iFixit teardown][teardown],\nI'm not seeing any particularly exotic parts. Valve stated early on that \"[the\nSteam Controller was designed from the ground up to be hackable][schackable]\".\n\nFor example, from [a Reddit thread][reddit-chips], I\nlearned that the [Steam Controller][] is built around the [ARM\nCortex-M0][cortex-m0]. That's similar to the [ARM Cortex-M0+][cortex-m0-plus]\nused in the [Teensy LC][teensylc]. \n\nThis is interesting, because I've been reading up on how to build a custom\nkeyboard. (You know, as one does.) In the course of that, I've been\nacquainting myself with the [Teensy line of USB development boards][teensy].\n\nLately, I've been playing with the [Teensy 2.0][teensy20]. That seems to be\npopular in the DIY community for how easy it makes implementing \nUSB devices.  Granted, that's a different microcontroller (an [Atmel\nATmega32u4][ATmega32u4]), but I'm hoping that general experience with things like the\nTeensy family of dev boards can eventually translate to some personal fun and\nsome community firmware to explore the potential of the [Steam Controller][].\n\nAs it is, someone's already figured out how to [play music through the haptic\nactuators][hapticmusic] and they released the [source\ncode][hapticmusicsource].  That's more a function of decoding the \nprotocol from PC to Controller than messing around with the microcontrollers,\nbut it's still pretty cool.\n\nIt would be great if Valve released more docs & code around this thing. I\ncan understand that there might be some pressure to keep the Steam hardware &\nsoftware ecosystem cohesive. But, for a weird little device like this, I\nimagine they'd only get more sales by fully opening everything up and letting\nthe tinkering world pave the way for more uses - and maybe fix a few bugs for\nthem as clever folks scratch their own itches.\n\n[ATmega32u4]: http://www.atmel.com/devices/atmega32u4.aspx\n[schackable]: http://hackaday.com/2013/10/01/steam-controller-open-and-hackable/\n[teensylc]: https://www.pjrc.com/store/teensylc.html\n[teensy]: https://www.pjrc.com/teensy/\n[teensy20]: https://www.pjrc.com/store/teensy.html\n[teardown]: https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\n[cortex-m0-plus]: http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php\n[cortex-m0]: http://www.arm.com/products/processors/cortex-m/cortex-m0.php\n\n[reddit-chips]: https://www.reddit.com/r/SteamControllerMods/comments/3p6d26/some_details_on_the_chips_in_the_controller_and/\n\n[hapticmusic]: https://steamcommunity.com/app/353370/discussions/0/494632506573267894/\n[hapticmusicsource]: https://gitlab.com/Pilatomic/SteamControllerSinger\n\n## Conclusion\n\nThe [Steam Controller][] is an odd little duck. It's a bit awkward to hold\nand the software is not great. But, software can be fixed and the controls &\nsensors onboard have so much great potential for PC gaming. \n\nThis is clearly not a mature, finished product - which is disappointing,\nbecause I paid money for it - but I'm really rooting for it. And I've already\nused it for dozens of hours in games, so it's obviously worked for me in many\ncapacities. I'm really hoping that Valve follows through on their promises to\nopen things up for tinkering - because it might be the thing that ultimately\nredeems the whole project.\n\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/05/steam-controller",
    "thumbnail": "/uploads/2016/steam-controller/sc-top.jpg",
    "summary": "<p><strong>TL;DR</strong>: The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is an odd little duck. But, I&apos;m rooting\nfor it.</p>\n"
  }
]