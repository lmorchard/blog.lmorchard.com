[
  {
    "title": "Building a USB controller for an IBM Model M",
    "tags": [
      "modelm",
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "year": "2016",
    "month": "02",
    "day": "21",
    "isDir": false,
    "slug": "modelm-controller",
    "date": "2016-02-21T12:00:00.000Z",
    "postName": "2016-02-21-modelm-controller",
    "html": "<p><strong>TL;DR</strong>: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p>In my <a href=\"http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\">previous post</a>, I wrote about my initial forays into\nkeyboard hacking. I got my hands on a few IBM Model M keyboards, and built a\nPS/2-to-USB converter with a <a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a> so I could use it with my\nMacBook Pro after remapping some keys via the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK keyboard firmware</a>.</p>\n<p>That was a pretty rewarding little hack. But, then, I found <a href=\"https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\">Lawrence Wu&#39;s\nnotes</a> on replacing the original controller inside the IBM\nModel M.  In a nutshell, it turns out you can find ribbon connectors that work\nwith the Model M membrane layers and fit on a breadboard. That makes it easy\nto build - and reversible if I decide to return the keyboard to its original\nstate.</p>\n<h2 id=\"initial-prototype\">Initial Prototype</h2>\n<p>So, I ordered a few of the <a href=\"http://www.mouser.com/ProductDetail/TE-Connectivity/6-520315-6/?qs=sGAEpiMZZMvYKGyZxp8jxkA16bSpREuh\">16-pin ribbon connectors from Mouser</a>\nand a <a href=\"https://www.pjrc.com/store/teensypp.html\">Teensy 2.0++</a>. My first stab at wiring things up was\npretty simple:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24987051026/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k\" title=\"Original prototype for replacement IBM Model M keyboard controller\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24987051026_0d0b1ac2a9_z.jpg\" alt=\"Original prototype for replacement IBM Model M keyboard controller\"></a></p>\n<p>The <a href=\"https://www.pjrc.com/store/teensypp.html\">Teensy 2.0++</a> has 20 pins per side, and I needed 16 for the\nfirst ribbon. So, it was convenient to just plonk both onto the breadboard and\ntake advantage of the built-in conductors. That&#39;s also why I upgraded from a\n<a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a>: I needed more pins. The second ribbon needed\n8 pins, so I cut some lengths of <a href=\"http://amzn.to/1oCuCJ1\">hook-up wire</a> to keep things neat\nand ran the connections over.</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24684318539/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"5.5mm nut driver needed for opening IBM Model M keyboards\"><img class=\"inset wide right\" src=\"/uploads/2016/modelm-controller/24684318539_4dde739235_n.jpg\" alt=\"5.5mm nut driver needed for opening IBM Model M keyboards\"></a></p>\n<h2 id=\"driving-me-nuts\">Driving Me Nuts</h2>\n<p>Then, I wanted to get inside the keyboard to start tinkering. As it turns out,\nopening up an IBM Model M is annoying: None of the tools I had on hand could\ndo it. </p>\n<p>The case is assembled using screws with 5.5mm nut heads, rather than\nsomething like a Phillips-head screw. And, the screws are down in deep wells\ntoo narrow to fit any of the socket wrench heads I had on hand.</p>\n<p>So, I had to order <a href=\"http://amzn.to/1RgjN8k\">a 5.5mm nut driver</a> with a very slim head.\nReading <a href=\"http://www.amazon.com/Dynamite-2803-Nut-Driver-5-5mm/product-reviews/B000BQ4XP6/ref=cm_cr_dp_see_all_summary?ie=UTF8&amp;showViewpoints=1&amp;sortBy=helpful\">the reviews</a>, I can see I&#39;m not alone in this.</p>\n<p>While that made its way to my house, I&#39;d read that <a href=\"https://deskthority.net/workshop-f7/model-m-disassembly-t1960.html#p34013\">some folks used a lighter\nand a pen</a> to form a makeshift nut driver. That was a terrible\nidea, but it worked. In hindsight, I really should have just waited for the\ndriver to show up. But, I was determined to get the thing open while I had\ntime to play with it.</p>\n<h2 id=\"the-original-controller\">The Original Controller</h2>\n<p>And, once open, this is the board I found inside:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/25046846995/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M original controller board\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/25046846995_c8dab2484c_z.jpg\" alt=\"IBM Model M original controller board\"></a></p>\n<p>I should have taken a picture of it in place, but oh well. The board has a\ngrounding strap that was screwed down to the steel plate under the keys.\nBeyond that, it just fit into plastic brackets in the case and wasn&#39;t\notherwise fastened down. And, in a weird coincidence, the board was almost the\nexact same dimensions as my breadboard. Maybe these things are standard sizes?</p>\n<h2 id=\"mapping-the-membranes\">Mapping the Membranes</h2>\n<p>With the keyboard membrane ribbons free from the original board, I hooked them up to\nmy prototype. From there, I wanted to start making the keys send the right\nsignals. There are three parts to this:</p>\n<ol>\n<li>Mapping Teensy pins to a 16 x 8 switch matrix</li>\n<li>Mapping the 16 x 8 switch matrix to physical key locations</li>\n<li>Mapping physical key locations to USB key codes</li>\n</ol>\n<p>To accomplish #1, <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/matrix.c#L163\">I set up pins in the firmware</a>. The way this works is\nthat the rows are set to input and the columns are set to output. By pulsing a\ncurrent for each column in turn and reading the rows, you can build up a\nmatrix of switch state where the circuit is completed. This is called\n<a href=\"https://www.massdrop.com/article/introduction-to-keyboard-programming\">scanning the keyboard</a>. There are problems in this process - <a href=\"http://blog.komar.be/how-to-make-a-keyboard-the-matrix/\">like\nghosting</a> - but I&#39;ll skip describing them for now.</p>\n<p>To double check that I had my matrix working, I threw together an initial\nkeymap and set every key to emit &quot;1&quot;.  I tapped each key and saw a &quot;1&quot; in my\nnotepad. Hooray, it worked! At least, electrically speaking.</p>\n<p>For step #2, I started googling for IBM Model M membrane matrix maps. Surely\nsomeone had done this before! Well, <a href=\"https://deskthority.net/workshop-f7/universal-model-m-controller-t9820.html#p207736\">it turns out someone had</a>.\nDeskthority user <a href=\"https://deskthority.net/idollar-u6930/\">idollar</a> had traced all the wires and annotated the\nmembranes with row &amp; column numbers in marker:</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9298.jpg\">\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9300.jpg\">\n\n<p>Just to be clear: These two are not my photos. I stand on the shoulders of\n<a href=\"https://deskthority.net/idollar-u6930/\">forum giants</a>. But, after awhile, I couldn&#39;t really read the\nhandwriting and started making mistakes. </p>\n<p>That&#39;s when I remembered <a href=\"https://github.com/tmk/tmk_keyboard#magic-commands\">the matrix debug mode in TMK</a>: After\nconfiguring just enough keys to enable it, I could just watch the debug\noutput to tell me the rows &amp; columns as I hit other keys.</p>\n<p>Thus equipped, I spent a Sunday morning over coffee mapping the keyboard:\nMethodically pressing keys, noting rows &amp; columns, and building up <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L34\">the KEYMAP\nmacro</a> that converts symbols for physical keys to logical matrix\npositions. Along the way, I also built up <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L54\">the initial\nkeymap</a> using that macro to assign keycodes to the physical\nkeys.</p>\n<h2 id=\"fitting-the-prototype\">Fitting the Prototype</h2>\n<p>After that, I had an initial stab at steps #2 &amp; #3 - the keyboard was pretty\nmuch working and I could start typing practically with it. But, because I was\nhacking on this from the couch, it was all super-awkward holding things\ntogether in my lap.</p>\n<p>I should mention that these ribbon connectors have short, fragile leads.\nThey&#39;re really meant for soldering into a PCB. They snap into the breadboard,\nbut just barely. They spring free at the slightest pressure - you know, like\nhooking up ribbons and moving the keyboard around. And, whenever I reinsert\nthem, invariably one pin or another gets bent up and then snaps off after the\n4th or 5th realignment. I&#39;m really glad I bought extras, because I&#39;m down to\nmy last two that still work.</p>\n<p>So, I got tired of things falling apart and started positioning my breadboard\ninto the case. Everything fit physically, but the parts were all in the wrong\nplace. With a sigh, I pulled everything out of the board, rewired it, and\nreassigned all the pins:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24742861610/in/dateposted-public/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24742861610_8c3c931768_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a></p>\n<p>That put the ribbon connectors in the right spots for the keyboard membranes\nto connect, as well as room for a USB connector I bought to loop around without\ntoo much bend. Oh, and I slightly rewired things again, because I discovered\nI&#39;d connected all the LEDs backward:</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24945773791/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24945773791_b208614dd7_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a></p>\n<h2 id=\"my-keyboard-is-haunted\">My Keyboard is Haunted</h2>\n<p>After all the rewiring and reassigned pins, I fired things up again. This\ntime, I started getting mysterious spontaneous keystrokes. I thought it might\nbe a grounding issue with static electricity, because I could usually make it\nhappen by waving my hands over the keyboard. While a <a href=\"https://en.wikipedia.org/wiki/Theremin\">theremin</a>\nkeyboard might be fun, that&#39;s not actually what I was going for here.</p>\n<p>So, I ran a wire from the steel plate to the GND pin on the Teensy. That\ndidn&#39;t fix it.</p>\n<p>Finally, I realized that one of my new pins in use was D6 - and\nD6 is hardwired to an LED on the Teensy board. And, it so happens that LEDs\ncan do weird things when hooked up as an input - <a href=\"http://www.analog.com/library/analogdialogue/archives/48-08/raq_108.html\">such as detecting\nlight</a>. You know, maybe like the changing light from waving my\nhands over the keyboard.</p>\n<p>Thus, I was able to exorcise my keyboard ghost by bending up the pin at D6 to\ndisconnect it from the breadboard. Then, I ran a jumper over to D1 and\n<a href=\"https://github.com/lmorchard/tmk_keyboard/commit/f5b31e9d320d494a4d3fc75db614883b7225d332\">switched the pin assignments in the firmware</a>. No more spontaneous\nkeypresses.</p>\n<h2 id=\"secrets-of-2kro-matrices\">Secrets of 2KRO Matrices</h2>\n<p>After typing a bit, I realized I couldn&#39;t get certain key combinations to work -\nShift-T, for example.</p>\n<p>Now, I know that the IBM Model M isn&#39;t <a href=\"https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\">an NKRO keyboard</a>. That is, you\ncannot press any arbitrary combination of keys together. But, of course, a\nkeyboard is useless if you can&#39;t press at least <em>some</em> keys together - like, say,\nShift and T. In fact, I&#39;ve read that the IBM Model M is described as 2KRO -\ni.e. two-key rollover.</p>\n<p>So, I knew that the original controller supported Shift-T. Looking in the\nmatrix debug output, I noticed that I couldn&#39;t press any 2 keys in the same\nrow together - that included Left Shift and T.</p>\n<p>Scratching my head, I noticed that the membrane matrix had some interesting\nproperties: Pretty much all the modifier keys were in different columns than\nthe other keys I wanted to press along with them. So, my problem might be\nsolved by rotating the matrix - that is, <a href=\"https://github.com/lmorchard/tmk_keyboard/commit/afc4d0f23be23e8c69bc1dfbe127898a7fe82db7\">turning rows into columns and columns\ninto rows</a>.</p>\n<p>I don&#39;t entirely have my head wrapped around the design of the Model M\nmembrane layout, but I think this is part of it: After I rotated the matrix,\nthere are 8 columns per row. As far as I can tell, only one key can be pressed\nper row - so that means any given key has 7 others that cannot be pressed at\nthe same time. Practical key rollover, then, is implemented by putting keys\nyou&#39;re likely to press together in different rows.</p>\n<p>For example, modifiers like Left Shift and Right Shift share a row, and so\ncannot be pressed together. But, Left Shift &amp; T are found in different rows\nand can work together. However, some of the letters in the QWER &amp; ASDF cluster\nshare rows, so that can be trouble for gaming - directional keypresses and\nsuchlike might cancel each other out in the heat of the keymashing moment.\nBut, since this keyboard harkens to an era where keys were more for typing\nwords than for controlling games, the tradeoff makes sense.</p>\n<h2 id=\"the-result\">The Result</h2>\n<p><a data-flickr-embed=\"true\" data-header=\"false\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24422592514/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz\" title=\"IBM Model M keyboard with USB controller\"><img class=\"inset wide right\" id=\"thumbnail\" src=\"/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg\" alt=\"IBM Model M keyboard with USB controller\"></a></p>\n<p>So, after all the above and a few more random adventures in C programming,\nthis IBM Model M keyboard is now sitting on my desk with a USB cable plugged\ninto it.</p>\n<p>I ordered <a href=\"http://www.pckeyboard.com/page/category/Buttons\">some custom replacement keycaps from Unicomp</a> to reflect\nsome of the remapped keys I implemented - i.e. media control, Command (⌘),\nCaps Lock replaced by Ctrl. </p>\n<p>I&#39;ve been having some clicky-clacky fun with this thing, and it&#39;s been easy to\nreconfigure &amp; reflash along the way as needed. Experience with <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a> to\nconfigure my previous project really came in handy.</p>\n<p><a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24959916191/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M with USB controller upgrade\"><img class=\"inset wide left\" src=\"/uploads/2016/modelm-controller/24959916191_bfe3246ded_z.jpg\" alt=\"IBM Model M with USB controller upgrade\"></a></p>\n<p>The one part that could be considered irreversible with this project is that I\nended up drilling two small holes in the back to secure the USB port. I&#39;m just\nslightly sad about that. But, I guess if I ever sell this thing on eBay, I&#39;ll\ntry talking up the benefits of the new USB controller.</p>\n<p>But, otherwise, if I wanted to undo all this work, I could just open it back\nup and plonk the original controller back in. I&#39;ve currently got that board\nsitting in an anti-static bag in a drawer, taking a rest after decades of\nservice.\n<br style=\"clear: both\"></p>\n<h2 id=\"next-steps\">Next Steps</h2>\n<h3 id=\"breadboard-to-pcb\">Breadboard to PCB</h3>\n<p>Like I mentioned before, those ribbon connectors are fragile and meant to be\nsoldered to a PCB. I&#39;d also like to learn how to design PCBs, so this seems\nlike a super easy project to start with. The only things needed are places to\nsolder the connectors, a socket for a Teensy, and traces connecting everything\nproperly. I wouldn&#39;t even need to learn SMD soldering yet!</p>\n<h3 id=\"bluetooth\">Bluetooth</h3>\n<p>I saw <a href=\"https://learn.adafruit.com/convert-your-model-m-keyboard-to-bluetooth-with-bluefruit-ez-key-hid/overview\">a project on Adafruit to add Bluetooth support to an IBM Model\nM</a>. But, that was using the original controller board and\nconverting from PS/2. With my controller, I could hook a Bluetooth module\ndirectly up to Teensy pins and talk to it from <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a>. That should be\ninteresting.</p>\n<h3 id=\"alphanumeric-display\">Alphanumeric Display</h3>\n<p>I noticed that a backlit alphanumeric LCD display is pretty much the exact\ndimensions of the Num Lock / Scroll Lock / Caps Lock LED area on the keyboard\ncase. It would definitely be a destructive change, but it might be kind of\ncool to replace that section with a text readout. I&#39;m not really sure what it\nwould display, but it could be a fun little project like a retro-DIY version\nof <a href=\"http://amzn.to/1TuflVD\">a Logitech G15 keyboard</a>.</p>\n<h3 id=\"reset-button\">Reset button</h3>\n<p>Flashing the Teensy firmware usually requires pushing a button on the board.\nThere are also a couple of pins on the board that do the same when shorted, so\nI threaded some wires out of the case to do that. It&#39;s ugly.</p>\n<p>The <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a> firmware also supports a key combination that does the same thing,\nwhich would let me just toss the wires. But, after once or twice where I\nlocked the firmware and had to reopen the case, I don&#39;t think I can totally go\nwithout a reset button.</p>\n<p>So, I&#39;m considering where and how to mount an external reset / programming\nbutton that doesn&#39;t require any more holes to be drilled or anything else\ndestructive.</p>\n<h3 id=\"60-model-m\">60% Model M</h3>\n<p>On the topic of destructive changes: <a href=\"https://geekhack.org/index.php?action=profile;u=3412\">hasu</a>, the author of the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK</a>\nfirmware, <a href=\"https://geekhack.org/index.php?action=profile;u=3412\">literally carved up</a> an IBM Model M keyboard and <a href=\"https://geekhack.org/index.php?topic=29483.0\">reduced it\nto a 60% layout</a> more comparable to a Happy Hacking Keyboard.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/yROEN.jpg\">\n\n<p>That project took a bit of work reconstituting the membrane using copper tape\nand conductive ink, as well as work to join the plastic bits back together.\nBut, the electronics end up being simpler after discarding piles of keys.\nI know it would be a certain kind of sacriledge to Model M lovers, but I might\nattempt it once I get tired of just how huge this keyboard is on my desk.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This was a pretty fun project, and a bit of a step up from the PS/2 converter\nI just built. I learned a bit about the innards of this keyboard, and I&#39;ve got\nsome decent next steps to pursue in the future. All of this feels like it&#39;s\ngiving me some good foundational know-how for when I finally get all the parts\ntogether to try building my own DIY keyboard from the ground up.</p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\nIn my [previous post][keyboard-hacking], I wrote about my initial forays into\nkeyboard hacking. I got my hands on a few IBM Model M keyboards, and built a\nPS/2-to-USB converter with a [Teensy 2.0][teensy] so I could use it with my\nMacBook Pro after remapping some keys via the [TMK keyboard firmware][tmk].\n\nThat was a pretty rewarding little hack. But, then, I found [Lawrence Wu's\nnotes][original-notes] on replacing the original controller inside the IBM\nModel M.  In a nutshell, it turns out you can find ribbon connectors that work\nwith the Model M membrane layers and fit on a breadboard. That makes it easy\nto build - and reversible if I decide to return the keyboard to its original\nstate.\n\n## Initial Prototype\n\nSo, I ordered a few of the [16-pin ribbon connectors from Mouser][connector]\nand a [Teensy 2.0++][teensy-plus]. My first stab at wiring things up was\npretty simple:\n\n[connector]: http://www.mouser.com/ProductDetail/TE-Connectivity/6-520315-6/?qs=sGAEpiMZZMvYKGyZxp8jxkA16bSpREuh\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24987051026/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k\" title=\"Original prototype for replacement IBM Model M keyboard controller\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24987051026_0d0b1ac2a9_z.jpg\" alt=\"Original prototype for replacement IBM Model M keyboard controller\"></a>\n\nThe [Teensy 2.0++][teensy-plus] has 20 pins per side, and I needed 16 for the\nfirst ribbon. So, it was convenient to just plonk both onto the breadboard and\ntake advantage of the built-in conductors. That's also why I upgraded from a\n[Teensy 2.0][teensy]: I needed more pins. The second ribbon needed\n8 pins, so I cut some lengths of [hook-up wire][hookup] to keep things neat\nand ran the connections over.\n\n[tmk]: https://geekhack.org/index.php?topic=41989.0\n[hookup]: http://amzn.to/1oCuCJ1\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24684318539/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"5.5mm nut driver needed for opening IBM Model M keyboards\"><img class=\"inset wide right\" src=\"/uploads/2016/modelm-controller/24684318539_4dde739235_n.jpg\" alt=\"5.5mm nut driver needed for opening IBM Model M keyboards\"></a>\n\n## Driving Me Nuts\n\nThen, I wanted to get inside the keyboard to start tinkering. As it turns out,\nopening up an IBM Model M is annoying: None of the tools I had on hand could\ndo it. \n  \nThe case is assembled using screws with 5.5mm nut heads, rather than\nsomething like a Phillips-head screw. And, the screws are down in deep wells\ntoo narrow to fit any of the socket wrench heads I had on hand.\n\nSo, I had to order [a 5.5mm nut driver][nut-driver] with a very slim head.\nReading [the reviews][reviews], I can see I'm not alone in this.\n\nWhile that made its way to my house, I'd read that [some folks used a lighter\nand a pen][driver-hack] to form a makeshift nut driver. That was a terrible\nidea, but it worked. In hindsight, I really should have just waited for the\ndriver to show up. But, I was determined to get the thing open while I had\ntime to play with it.\n\n[reviews]: http://www.amazon.com/Dynamite-2803-Nut-Driver-5-5mm/product-reviews/B000BQ4XP6/ref=cm_cr_dp_see_all_summary?ie=UTF8&showViewpoints=1&sortBy=helpful\n[driver-hack]: https://deskthority.net/workshop-f7/model-m-disassembly-t1960.html#p34013\n\n## The Original Controller\n\nAnd, once open, this is the board I found inside:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/25046846995/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M original controller board\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/25046846995_c8dab2484c_z.jpg\" alt=\"IBM Model M original controller board\"></a>\n\nI should have taken a picture of it in place, but oh well. The board has a\ngrounding strap that was screwed down to the steel plate under the keys.\nBeyond that, it just fit into plastic brackets in the case and wasn't\notherwise fastened down. And, in a weird coincidence, the board was almost the\nexact same dimensions as my breadboard. Maybe these things are standard sizes?\n\n## Mapping the Membranes\n\nWith the keyboard membrane ribbons free from the original board, I hooked them up to\nmy prototype. From there, I wanted to start making the keys send the right\nsignals. There are three parts to this:\n\n1. Mapping Teensy pins to a 16 x 8 switch matrix\n2. Mapping the 16 x 8 switch matrix to physical key locations\n3. Mapping physical key locations to USB key codes\n\nTo accomplish #1, [I set up pins in the firmware][pins]. The way this works is\nthat the rows are set to input and the columns are set to output. By pulsing a\ncurrent for each column in turn and reading the rows, you can build up a\nmatrix of switch state where the circuit is completed. This is called\n[scanning the keyboard][scanning]. There are problems in this process - [like\nghosting][ghosting] - but I'll skip describing them for now.\n\n[scanning]: https://www.massdrop.com/article/introduction-to-keyboard-programming\n[ghosting]: http://blog.komar.be/how-to-make-a-keyboard-the-matrix/\n\nTo double check that I had my matrix working, I threw together an initial\nkeymap and set every key to emit \"1\".  I tapped each key and saw a \"1\" in my\nnotepad. Hooray, it worked! At least, electrically speaking.\n\n[pins]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/matrix.c#L163\n\nFor step #2, I started googling for IBM Model M membrane matrix maps. Surely\nsomeone had done this before! Well, [it turns out someone had][matrix-map].\nDeskthority user [idollar][] had traced all the wires and annotated the\nmembranes with row & column numbers in marker:\n\n[idollar]: https://deskthority.net/idollar-u6930/\n[matrix-map]: https://deskthority.net/workshop-f7/universal-model-m-controller-t9820.html#p207736\n\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9298.jpg\">\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/DSC_9300.jpg\">\n\nJust to be clear: These two are not my photos. I stand on the shoulders of\n[forum giants][idollar]. But, after awhile, I couldn't really read the\nhandwriting and started making mistakes. \n\nThat's when I remembered [the matrix debug mode in TMK][matrix-debug]: After\nconfiguring just enough keys to enable it, I could just watch the debug\noutput to tell me the rows & columns as I hit other keys.\n\n[matrix-debug]: https://github.com/tmk/tmk_keyboard#magic-commands\n\nThus equipped, I spent a Sunday morning over coffee mapping the keyboard:\nMethodically pressing keys, noting rows & columns, and building up [the KEYMAP\nmacro][keymap-macro] that converts symbols for physical keys to logical matrix\npositions. Along the way, I also built up [the initial\nkeymap][keymap-plain] using that macro to assign keycodes to the physical\nkeys.\n\n[keymap-macro]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L34\n[keymap-plain]: https://github.com/lmorchard/tmk_keyboard/blob/bdde5f9413ce5c3ea627f201b04f04fe371806ce/keyboard/modelm/keymap.c#L54\n\n## Fitting the Prototype\n\nAfter that, I had an initial stab at steps #2 & #3 - the keyboard was pretty\nmuch working and I could start typing practically with it. But, because I was\nhacking on this from the couch, it was all super-awkward holding things\ntogether in my lap.\n\nI should mention that these ribbon connectors have short, fragile leads.\nThey're really meant for soldering into a PCB. They snap into the breadboard,\nbut just barely. They spring free at the slightest pressure - you know, like\nhooking up ribbons and moving the keyboard around. And, whenever I reinsert\nthem, invariably one pin or another gets bent up and then snaps off after the\n4th or 5th realignment. I'm really glad I bought extras, because I'm down to\nmy last two that still work.\n\nSo, I got tired of things falling apart and started positioning my breadboard\ninto the case. Everything fit physically, but the parts were all in the wrong\nplace. With a sigh, I pulled everything out of the board, rewired it, and\nreassigned all the pins:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24742861610/in/dateposted-public/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24742861610_8c3c931768_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a>\n\nThat put the ribbon connectors in the right spots for the keyboard membranes\nto connect, as well as room for a USB connector I bought to loop around without\ntoo much bend. Oh, and I slightly rewired things again, because I discovered\nI'd connected all the LEDs backward:\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24945773791/in/photolist-E52aJA-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz-Dzg18k/\" title=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"><img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/24945773791_b208614dd7_z.jpg\" alt=\"Teensy 2.0++ USB replacement controller for IBM Model M keyboard\"></a>\n\n## My Keyboard is Haunted\n\nAfter all the rewiring and reassigned pins, I fired things up again. This\ntime, I started getting mysterious spontaneous keystrokes. I thought it might\nbe a grounding issue with static electricity, because I could usually make it\nhappen by waving my hands over the keyboard. While a [theremin][]\nkeyboard might be fun, that's not actually what I was going for here.\n\n[theremin]: https://en.wikipedia.org/wiki/Theremin\n\nSo, I ran a wire from the steel plate to the GND pin on the Teensy. That\ndidn't fix it.\n\nFinally, I realized that one of my new pins in use was D6 - and\nD6 is hardwired to an LED on the Teensy board. And, it so happens that LEDs\ncan do weird things when hooked up as an input - [such as detecting\nlight][photodiode]. You know, maybe like the changing light from waving my\nhands over the keyboard.\n\nThus, I was able to exorcise my keyboard ghost by bending up the pin at D6 to\ndisconnect it from the breadboard. Then, I ran a jumper over to D1 and\n[switched the pin assignments in the firmware][d0-pin]. No more spontaneous\nkeypresses.\n\n[photodiode]: http://www.analog.com/library/analogdialogue/archives/48-08/raq_108.html\n[d0-pin]: https://github.com/lmorchard/tmk_keyboard/commit/f5b31e9d320d494a4d3fc75db614883b7225d332\n\n## Secrets of 2KRO Matrices\n\nAfter typing a bit, I realized I couldn't get certain key combinations to work -\nShift-T, for example.\n\nNow, I know that the IBM Model M isn't [an NKRO keyboard][nkro]. That is, you\ncannot press any arbitrary combination of keys together. But, of course, a\nkeyboard is useless if you can't press at least *some* keys together - like, say,\nShift and T. In fact, I've read that the IBM Model M is described as 2KRO -\ni.e. two-key rollover.\n\nSo, I knew that the original controller supported Shift-T. Looking in the\nmatrix debug output, I noticed that I couldn't press any 2 keys in the same\nrow together - that included Left Shift and T.\n\nScratching my head, I noticed that the membrane matrix had some interesting\nproperties: Pretty much all the modifier keys were in different columns than\nthe other keys I wanted to press along with them. So, my problem might be\nsolved by rotating the matrix - that is, [turning rows into columns and columns\ninto rows][matrix-swap].\n\nI don't entirely have my head wrapped around the design of the Model M\nmembrane layout, but I think this is part of it: After I rotated the matrix,\nthere are 8 columns per row. As far as I can tell, only one key can be pressed\nper row - so that means any given key has 7 others that cannot be pressed at\nthe same time. Practical key rollover, then, is implemented by putting keys\nyou're likely to press together in different rows.\n\nFor example, modifiers like Left Shift and Right Shift share a row, and so\ncannot be pressed together. But, Left Shift & T are found in different rows\nand can work together. However, some of the letters in the QWER & ASDF cluster\nshare rows, so that can be trouble for gaming - directional keypresses and\nsuchlike might cancel each other out in the heat of the keymashing moment.\nBut, since this keyboard harkens to an era where keys were more for typing\nwords than for controlling games, the tradeoff makes sense.\n\n[nkro]: https://deskthority.net/wiki/Rollover,_blocking_and_ghosting\n[matrix-swap]: https://github.com/lmorchard/tmk_keyboard/commit/afc4d0f23be23e8c69bc1dfbe127898a7fe82db7\n\n## The Result\n\n<a data-flickr-embed=\"true\" data-header=\"false\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24422592514/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz\" title=\"IBM Model M keyboard with USB controller\"><img class=\"inset wide right\" id=\"thumbnail\" src=\"/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg\" alt=\"IBM Model M keyboard with USB controller\"></a>\n\nSo, after all the above and a few more random adventures in C programming,\nthis IBM Model M keyboard is now sitting on my desk with a USB cable plugged\ninto it.\n\nI ordered [some custom replacement keycaps from Unicomp][unicomp] to reflect\nsome of the remapped keys I implemented - i.e. media control, Command (⌘),\nCaps Lock replaced by Ctrl. \n\nI've been having some clicky-clacky fun with this thing, and it's been easy to\nreconfigure & reflash along the way as needed. Experience with [TMK][] to\nconfigure my previous project really came in handy.\n\n[unicomp]: http://www.pckeyboard.com/page/category/Buttons\n\n<a data-flickr-embed=\"true\" data-footer=\"true\"  href=\"https://www.flickr.com/photos/deusx/24959916191/in/photolist-E1nBs8-DGrCJf-Dd9aTh-E2C6uB-DBgzUX-E7Yy31-EaiCZz/\" title=\"IBM Model M with USB controller upgrade\"><img class=\"inset wide left\" src=\"/uploads/2016/modelm-controller/24959916191_bfe3246ded_z.jpg\" alt=\"IBM Model M with USB controller upgrade\"></a>\n\nThe one part that could be considered irreversible with this project is that I\nended up drilling two small holes in the back to secure the USB port. I'm just\nslightly sad about that. But, I guess if I ever sell this thing on eBay, I'll\ntry talking up the benefits of the new USB controller.\n\nBut, otherwise, if I wanted to undo all this work, I could just open it back\nup and plonk the original controller back in. I've currently got that board\nsitting in an anti-static bag in a drawer, taking a rest after decades of\nservice.\n<br style=\"clear: both\">\n\n[teensy]: https://www.pjrc.com/store/teensy.html\n[teensy-plus]: https://www.pjrc.com/store/teensypp.html\n[nut-driver]: http://amzn.to/1RgjN8k\n[keyboard-hacking]: http://blog.lmorchard.com/2016/02/06/keyboard-hacking/\n[original-notes]: https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\n[photo-tag]: https://www.flickr.com/photos/tags/modelmcontroller\n\n## Next Steps\n\n### Breadboard to PCB\n\nLike I mentioned before, those ribbon connectors are fragile and meant to be\nsoldered to a PCB. I'd also like to learn how to design PCBs, so this seems\nlike a super easy project to start with. The only things needed are places to\nsolder the connectors, a socket for a Teensy, and traces connecting everything\nproperly. I wouldn't even need to learn SMD soldering yet!\n\n### Bluetooth\n\nI saw [a project on Adafruit to add Bluetooth support to an IBM Model\nM][Adafruit-Bluetooth]. But, that was using the original controller board and\nconverting from PS/2. With my controller, I could hook a Bluetooth module\ndirectly up to Teensy pins and talk to it from [TMK][]. That should be\ninteresting.\n\n[adafruit-bluetooth]: https://learn.adafruit.com/convert-your-model-m-keyboard-to-bluetooth-with-bluefruit-ez-key-hid/overview\n\n### Alphanumeric Display\n\nI noticed that a backlit alphanumeric LCD display is pretty much the exact\ndimensions of the Num Lock / Scroll Lock / Caps Lock LED area on the keyboard\ncase. It would definitely be a destructive change, but it might be kind of\ncool to replace that section with a text readout. I'm not really sure what it\nwould display, but it could be a fun little project like a retro-DIY version\nof [a Logitech G15 keyboard][g15].\n\n[g15]: http://amzn.to/1TuflVD\n\n### Reset button\n\nFlashing the Teensy firmware usually requires pushing a button on the board.\nThere are also a couple of pins on the board that do the same when shorted, so\nI threaded some wires out of the case to do that. It's ugly.\n\nThe [TMK][] firmware also supports a key combination that does the same thing,\nwhich would let me just toss the wires. But, after once or twice where I\nlocked the firmware and had to reopen the case, I don't think I can totally go\nwithout a reset button.\n\nSo, I'm considering where and how to mount an external reset / programming\nbutton that doesn't require any more holes to be drilled or anything else\ndestructive.\n\n### 60% Model M\n\nOn the topic of destructive changes: [hasu][], the author of the [TMK][]\nfirmware, [literally carved up][hbkb2] an IBM Model M keyboard and [reduced it\nto a 60% layout][hbkb] more comparable to a Happy Hacking Keyboard.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/modelm-controller/yROEN.jpg\">\n\n[hasu]: https://geekhack.org/index.php?action=profile;u=3412\n[hbkb]: https://geekhack.org/index.php?topic=29483.0\n[hbkb2]: https://geekhack.org/index.php?action=profile;u=3412\n\nThat project took a bit of work reconstituting the membrane using copper tape\nand conductive ink, as well as work to join the plastic bits back together.\nBut, the electronics end up being simpler after discarding piles of keys.\nI know it would be a certain kind of sacriledge to Model M lovers, but I might\nattempt it once I get tired of just how huge this keyboard is on my desk.\n\n## Conclusion\n\nThis was a pretty fun project, and a bit of a step up from the PS/2 converter\nI just built. I learned a bit about the innards of this keyboard, and I've got\nsome decent next steps to pursue in the future. All of this feels like it's\ngiving me some good foundational know-how for when I finally get all the parts\ntogether to try building my own DIY keyboard from the ground up.\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/21/modelm-controller",
    "thumbnail": "/blog.lmorchard.com/uploads/2016/modelm-controller/24422592514_d79da1882a_z.jpg",
    "summary": "<p><strong>TL;DR</strong>: I wired up a Teensy 2.0++ to an IBM Model M keyboard,\nwhich gave it a USB interface and custom firmware that can remap keys and do\nother interesting things.</p>\n",
    "prevPostPath": "2016/04/17/spreadsheets-in-space",
    "nextPostPath": "2016/02/06/keyboard-hacking"
  },
  {
    "title": "Keyboard hacking seems like fun",
    "tags": [
      "diy",
      "keyboards",
      "hardware",
      "teensy",
      "microcontrollers",
      "electronics"
    ],
    "year": "2016",
    "month": "02",
    "day": "06",
    "isDir": false,
    "slug": "keyboard-hacking",
    "date": "2016-02-06T12:00:00.000Z",
    "postName": "2016-02-06-keyboard-hacking",
    "html": "<p><strong>TL;DR</strong>: I think I&#39;ve caught the DIY keyboard hacking bug, and I&#39;ll probably\nend up building something weird.</p>\n<!--more-->\n\n<p>I love tinkering and I love keyboards. But, I&#39;d never really tinkered with my\nkeyboards - at least, not beyond <a href=\"http://blog.lmorchard.com/2006/07/31/i-heart-my-filthy-happy-hacking-keyboard/\">disassembling &amp; cleaning them</a>.\nI&#39;d seen a smattering of crowdfunded projects over the years like the\n<a href=\"https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/\">ErgoDox</a> and <a href=\"http://shop.keyboard.io/\">Keyboardio</a>. But, those seemed like complex design\n&amp; manufacturing efforts - not like, you know, something I&#39;d do for fun.</p>\n<p>But then, last summer, I ran across <a href=\"https://www.massdrop.com/\">Massdrop</a> and saw the <a href=\"https://www.massdrop.com/buy/infinity-keyboard-kit\">Infinity 60%\nKeyboard Kit</a>. From there, I ran across &quot;<a href=\"https://www.massdrop.com/article/introduction-to-keyboard-programming\">Introduction to Keyboard\nProgramming</a>&quot; and some rusty gears turned over in my brain. I\ndiscovered <a href=\"https://geekhack.org/\">geekhack</a> and <a href=\"https://deskthority.net/\">Deskthority</a> and fell down a dangerous\nrabbit hole of <a href=\"https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\">switches</a> and <a href=\"https://geekhack.org/index.php?board=80.0\">caps</a>, <a href=\"https://geekhack.org/index.php?topic=47133\">layouts</a> and <a href=\"https://deskthority.net/workshop-f7/thkb-tiny-hacking-keyboard-40-t6455.html\">plates</a>,\n<a href=\"https://www.pjrc.com/teensy/\">microcontrollers</a> and <a href=\"https://geekhack.org/index.php?topic=41989.0\">firmware</a>.</p>\n<p>Turns out there are a bunch of folks doing this stuff as a hobby, along with a\nniche industry to support it.</p>\n<p>After a few months of absorbing information and spectating on projects in\nforums, it occurred to me that this did in fact seem like something I&#39;d have\nfun doing. But, rather than just dive in, I decided to start small:</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24832952956/\"><img class=\"fullwidth\" id=\"thumbnail\" src=\"/uploads/2016/teensy-ps2-adapter/minikey.jpg\"></a></p>\n<p>Last weekend, I ran to my local <a href=\"http://www.microcenter.com/site/stores/madison-heights.aspx\">Micro Center</a> and picked up a <a href=\"https://www.pjrc.com/teensy/\">Teensy\n2.0</a>. That seems to be the microcontroller board a lot of keyboard\nprojects have been using, so I figured getting acquainted with it would be\nhandy. After the traditional &quot;hello world&quot; project of <a href=\"https://www.pjrc.com/teensy/tutorial.html\">getting an LED to\nblink</a>, I wired up a pile of buttons on a breadboard and <a href=\"https://www.pjrc.com/teensy/td_keyboard.html\">built the\nfirmware to my first DIY USB keyboard</a>.</p>\n<p>Okay, so it was just a tutorial and no special effort on my part. But, the\nprocess was super easy, so the hacking possibilities started piling up in my\nhead.</p>\n<p>Then, I discovered the <a href=\"https://geekhack.org/index.php?topic=41989.0\">TMK keyboard firmware</a> on the\n<a href=\"https://geekhack.org/\">geekhack</a> forums. Basically, all the software work had been done for me.\nThe TMK firmware is a ready-made pile of code for translating from basically any\nmatrix of switches or wire protocol to USB HID keyboard codes - complete with\nsupport for flexible key maps, mouse control, function-key layers, macros, and\na bunch of other things. </p>\n<p>My little 10-key breadboard toy wasn&#39;t all that practical. But, I discovered\nthat the TMK firmware also supported building keyboard <em>converters</em>. Of\nparticular interest was the <a href=\"https://github.com/tmk/tmk_keyboard/blob/master/converter/ps2_usb/README.md\">PS/2 to USB keyboard converter</a>, since I\njust happen to have a pile of older PS/2 keyboards lying around doing nothing.</p>\n<p>The converter only took 4 wires, so I sacrificed a PS/2 cable from the back of\na drawer and came up with this:</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24832952956/\"><img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/adapter.jpg\"></a></p>\n<p>Coincidentally, the day after I built this, I got some IBM Model M keyboards\nfrom <a href=\"https://nuxx.net/blog/\">a friend</a> of mine. I&#39;ve been wanting to fill my office with the\nsound of buckling springs for awhile, now. </p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24685464831/\"><img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/modelm.jpg\"></a></p>\n<p>This is all hooked up to a modern MacBook Pro, but the IBM Model M is\ndecidedly lacking in <a href=\"https://en.wikipedia.org/wiki/Command_key\">Command (⌘) keys</a>. So, the DIY converter\nproved its worth immediately. </p>\n<p>I put together <a href=\"https://github.com/lmorchard/tmk_keyboard/blob/lmo-model-mac/converter/ps2_usb/keymap_modelmac.c\">my own simple keymap</a> and spent a day with it,\ntweaking as I went.  I set up <a href=\"https://github.com/alloy/kicker\">a file watcher</a> to rebuild the\nfirmware whenever I changed the source. Along with that, the <a href=\"https://www.pjrc.com/teensy/loader.html\">Teensy\nLoader</a> has an &quot;auto&quot; mode which reprograms the Teensy whenever I hit\nthe reset button. </p>\n<p>At this point, I&#39;ve replaced the Caps Lock key with Control and changed Alt keys\nto Command keys.  Then, I turned the Print Screen / Caps Lock / Pause trio\ninto volume control keys. After that, F10, F11, and F12 were pressed into\nservice as previous, next, &amp; pause buttons for music. It was all a bit fiddly,\nbut it&#39;s the kind of thing I enjoy.</p>\n<p>Overall, this all feels like a nice intro into a new hobby. Next, I&#39;m\nconsidering <a href=\"https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\">replacing the IBM Model M keyboard controller</a>\naltogether, which will embed the Teensy right in the case. </p>\n<p>After that, I&#39;m tempted to turn my screwdriver on that other keyboard on my\ndesk - the Happy Hacking Keyboard Professional. There&#39;s a <a href=\"https://geekhack.org/index.php?topic=12047.0\">Teensy-based\nalternative controller</a> option for it, also using the TMK firmware.</p>\n<p>Once I feel comfortable with all that, it might be time to build something of\nmy own! <a href=\"http://www.keyboard-layout-editor.com/##@_name=noisy%20fat%20hacker%20keyboard&amp;author=lmorchard&amp;switchMount=cherry&amp;switchBrand=cherry&amp;plate:true%3B&amp;@=Esc&amp;=!%0A1&amp;=%2F@%0A2&amp;=%23%0A3&amp;=$%0A4&amp;=%25%0A5&amp;=%5E%0A6&amp;=%2F&amp;%0A7&amp;=*%0A8&amp;=%28%0A9&amp;=%29%0A0&amp;=%2F_%0A-&amp;=+%0A%2F=&amp;=%7C%0A%5C&amp;=~%0A%60&amp;_x:0.25%3B&amp;=Insert&amp;=Home&amp;=PgUp%3B&amp;@_w:1.5%3B&amp;=Tab&amp;=Q&amp;=W&amp;=E&amp;=R&amp;=T&amp;=Y&amp;=U&amp;=I&amp;=O&amp;=P&amp;=%7B%0A%5B&amp;=%7D%0A%5D&amp;_a:0&amp;w:1.5%3B&amp;=Delete%0A%0A%0A%0ABS&amp;_x:0.25&amp;a:4%3B&amp;=Delete&amp;=End&amp;=PgDn%3B&amp;@_w:1.75%3B&amp;=Control&amp;=A&amp;=S&amp;=D&amp;=F&amp;=G&amp;=H&amp;=J&amp;=K&amp;=L&amp;=%2F:%0A%2F%3B&amp;=%22%0A%27&amp;_w:2.25%3B&amp;=Enter&amp;_x:0.25%3B&amp;=Op1&amp;=Op2&amp;=Op3%3B&amp;@_w:2.25%3B&amp;=Shift&amp;=Z&amp;=X&amp;=C&amp;=V&amp;=B&amp;=N&amp;=M&amp;=%3C%0A,&amp;=%3E%0A.&amp;=%3F%0A%2F%2F&amp;_w:2.75%3B&amp;=Shift&amp;_x:1.25%3B&amp;=%E2%86%91%3B&amp;@_w:1.25%3B&amp;=Fn&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-logo-apple-outline%27%3E%3C%2F%2Fi%3E&amp;_a:7&amp;w:6.25%3B&amp;=&amp;_a:4&amp;w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-logo-apple%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=%3Ci%20class%2F=%27kb%20kb-Hamburger-Menu%27%3E%3C%2F%2Fi%3E&amp;_w:1.25%3B&amp;=Fn&amp;_x:0.25%3B&amp;=%E2%86%90&amp;=%E2%86%93&amp;=%E2%86%92\">I&#39;ve got a 75-key layout I&#39;m mulling over.</a> If I end up liking\nthat, I can get a case &amp; mounting plate <a href=\"http://builder.swillkb.com/\">designed</a> &amp;\n<a href=\"https://www.ponoko.com/\">fabricated</a>. Then, I can buy all the <a href=\"https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\">switches</a> and\n<a href=\"http://amzn.to/1UUHUu8\">diodes</a>. And last, but not least, I&#39;ll have to design a circuit board &amp;\n<a href=\"https://oshpark.com/\">get that fabricated</a>.</p>\n<p>Or, if I really want to go for that handcrafted artisan experience - which I\njust might, because I&#39;m a glutton for punishment - I&#39;ve got something like\nthis in my future:</p>\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/MrokZ1afnVg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: I think I've caught the DIY keyboard hacking bug, and I'll probably\nend up building something weird.\n\n<!--more-->\n\nI love tinkering and I love keyboards. But, I'd never really tinkered with my\nkeyboards - at least, not beyond [disassembling & cleaning them][hhkbclean].\nI'd seen a smattering of crowdfunded projects over the years like the\n[ErgoDox][] and [Keyboardio][]. But, those seemed like complex design\n& manufacturing efforts - not like, you know, something I'd do for fun.\n\nBut then, last summer, I ran across [Massdrop][] and saw the [Infinity 60%\nKeyboard Kit][infinity60]. From there, I ran across \"[Introduction to Keyboard\nProgramming][kbprog]\" and some rusty gears turned over in my brain. I\ndiscovered [geekhack][] and [Deskthority][] and fell down a dangerous\nrabbit hole of [switches][] and [caps][], [layouts][] and [plates][],\n[microcontrollers][teensy] and [firmware][].\n\nTurns out there are a bunch of folks doing this stuff as a hobby, along with a\nniche industry to support it.\n\nAfter a few months of absorbing information and spectating on projects in\nforums, it occurred to me that this did in fact seem like something I'd have\nfun doing. But, rather than just dive in, I decided to start small:\n\n[kits]: http://www.geekhackers.org/products/jd40-jdcarpe-s-40-keyboard-kit-sorbothane-titanium-all-profits-go-to-the-nathan-j-walters-foundation-rip-smallfry\n[firmware]: https://geekhack.org/index.php?topic=41989.0\n[teensy]: https://www.pjrc.com/teensy/\n[plates]: https://deskthority.net/workshop-f7/thkb-tiny-hacking-keyboard-40-t6455.html\n[layouts]: https://geekhack.org/index.php?topic=47133\n[caps]: https://geekhack.org/index.php?board=80.0\n[switches]: https://www.massdrop.com/buy/cherry-mx-red-key-switches-120-pack\n[Deskthority]: https://deskthority.net/\n[geekhack]: https://geekhack.org/\n[infinity60]: https://www.massdrop.com/buy/infinity-keyboard-kit\n[keyboardio]: http://shop.keyboard.io/\n[ergodox]: https://www.indiegogo.com/projects/ergodox-ez-an-incredible-mechanical-keyboard#/\n[key64]: http://www.key64.org/\n[hhkbclean]: http://blog.lmorchard.com/2006/07/31/i-heart-my-filthy-happy-hacking-keyboard/\n[kbprog]: https://www.massdrop.com/article/introduction-to-keyboard-programming\n[massdrop]: https://www.massdrop.com/\n\n[<img class=\"fullwidth\" id=\"thumbnail\" src=\"/uploads/2016/teensy-ps2-adapter/minikey.jpg\">](https://www.flickr.com/photos/deusx/24832952956/)\n\nLast weekend, I ran to my local [Micro Center][] and picked up a [Teensy\n2.0][teensy]. That seems to be the microcontroller board a lot of keyboard\nprojects have been using, so I figured getting acquainted with it would be\nhandy. After the traditional \"hello world\" project of [getting an LED to\nblink][blinky], I wired up a pile of buttons on a breadboard and [built the\nfirmware to my first DIY USB keyboard][keyboardtut].\n\nOkay, so it was just a tutorial and no special effort on my part. But, the\nprocess was super easy, so the hacking possibilities started piling up in my\nhead.\n\nThen, I discovered the [TMK keyboard firmware][firmware] on the\n[geekhack][] forums. Basically, all the software work had been done for me.\nThe TMK firmware is a ready-made pile of code for translating from basically any\nmatrix of switches or wire protocol to USB HID keyboard codes - complete with\nsupport for flexible key maps, mouse control, function-key layers, macros, and\na bunch of other things. \n\nMy little 10-key breadboard toy wasn't all that practical. But, I discovered\nthat the TMK firmware also supported building keyboard *converters*. Of\nparticular interest was the [PS/2 to USB keyboard converter][ps2usb], since I\njust happen to have a pile of older PS/2 keyboards lying around doing nothing.\n\nThe converter only took 4 wires, so I sacrificed a PS/2 cable from the back of\na drawer and came up with this:\n\n[ps2usb]: https://github.com/tmk/tmk_keyboard/blob/master/converter/ps2_usb/README.md\n[keyboardtut]: https://www.pjrc.com/teensy/td_keyboard.html\n[blinky]: https://www.pjrc.com/teensy/tutorial.html\n[micro center]: http://www.microcenter.com/site/stores/madison-heights.aspx\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/adapter.jpg\">](https://www.flickr.com/photos/deusx/24832952956/)\n\nCoincidentally, the day after I built this, I got some IBM Model M keyboards\nfrom [a friend][nuxx] of mine. I've been wanting to fill my office with the\nsound of buckling springs for awhile, now. \n\n[nuxx]: https://nuxx.net/blog/\n\n[<img class=\"fullwidth\" src=\"/uploads/2016/teensy-ps2-adapter/modelm.jpg\">](https://www.flickr.com/photos/deusx/24685464831/)\n\nThis is all hooked up to a modern MacBook Pro, but the IBM Model M is\ndecidedly lacking in [Command (⌘) keys][command]. So, the DIY converter\nproved its worth immediately. \n\nI put together [my own simple keymap][lmotmk] and spent a day with it,\ntweaking as I went.  I set up [a file watcher][kicker] to rebuild the\nfirmware whenever I changed the source. Along with that, the [Teensy\nLoader][loader] has an \"auto\" mode which reprograms the Teensy whenever I hit\nthe reset button. \n\nAt this point, I've replaced the Caps Lock key with Control and changed Alt keys\nto Command keys.  Then, I turned the Print Screen / Caps Lock / Pause trio\ninto volume control keys. After that, F10, F11, and F12 were pressed into\nservice as previous, next, & pause buttons for music. It was all a bit fiddly,\nbut it's the kind of thing I enjoy.\n\nOverall, this all feels like a nice intro into a new hobby. Next, I'm\nconsidering [replacing the IBM Model M keyboard controller][ibmcontrol]\naltogether, which will embed the Teensy right in the case. \n\nAfter that, I'm tempted to turn my screwdriver on that other keyboard on my\ndesk - the Happy Hacking Keyboard Professional. There's a [Teensy-based\nalternative controller][hhkbalt] option for it, also using the TMK firmware.\n\nOnce I feel comfortable with all that, it might be time to build something of\nmy own! [I've got a 75-key layout I'm mulling over.][nfhkb] If I end up liking\nthat, I can get a case & mounting plate [designed][platebuilder] &\n[fabricated][ponoko]. Then, I can buy all the [switches][switches] and\n[diodes][]. And last, but not least, I'll have to design a circuit board &\n[get that fabricated][oshpark].\n\nOr, if I really want to go for that handcrafted artisan experience - which I\njust might, because I'm a glutton for punishment - I've got something like\nthis in my future:\n\n<div class=\"video-container\"><iframe class=\"lazyload\" width=\"560\" height=\"315\" src=\"\" data-src=\"https://www.youtube.com/embed/MrokZ1afnVg\" frameborder=\"0\" allowfullscreen></iframe></div>\n\n[oshpark]: https://oshpark.com/\n[diodes]: http://amzn.to/1UUHUu8\n[ponoko]: https://www.ponoko.com/\n[platebuilder]: http://builder.swillkb.com/\n[hhkbalt]: https://geekhack.org/index.php?topic=12047.0\n[ibmcontrol]: https://github.com/antonizoon/archivis.me/wiki/IBM-Model-M-USB-Controller\n[kicker]: https://github.com/alloy/kicker\n[loader]: https://www.pjrc.com/teensy/loader.html\n[lmotmk]: https://github.com/lmorchard/tmk_keyboard/blob/lmo-model-mac/converter/ps2_usb/keymap_modelmac.c\n[command]: https://en.wikipedia.org/wiki/Command_key\n[nfhkb]: http://www.keyboard-layout-editor.com/##@_name=noisy%20fat%20hacker%20keyboard&author=lmorchard&switchMount=cherry&switchBrand=cherry&plate:true%3B&@=Esc&=!%0A1&=%2F@%0A2&=%23%0A3&=$%0A4&=%25%0A5&=^%0A6&=%2F&%0A7&=*%0A8&=%28%0A9&=%29%0A0&=%2F_%0A-&=+%0A%2F=&=|%0A\\&=~%0A%60&_x:0.25%3B&=Insert&=Home&=PgUp%3B&@_w:1.5%3B&=Tab&=Q&=W&=E&=R&=T&=Y&=U&=I&=O&=P&={%0A[&=}%0A]&_a:0&w:1.5%3B&=Delete%0A%0A%0A%0ABS&_x:0.25&a:4%3B&=Delete&=End&=PgDn%3B&@_w:1.75%3B&=Control&=A&=S&=D&=F&=G&=H&=J&=K&=L&=%2F:%0A%2F%3B&=%22%0A%27&_w:2.25%3B&=Enter&_x:0.25%3B&=Op1&=Op2&=Op3%3B&@_w:2.25%3B&=Shift&=Z&=X&=C&=V&=B&=N&=M&=%3C%0A,&=%3E%0A.&=%3F%0A%2F%2F&_w:2.75%3B&=Shift&_x:1.25%3B&=%E2%86%91%3B&@_w:1.25%3B&=Fn&_w:1.25%3B&=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-logo-apple-outline%27%3E%3C%2F%2Fi%3E&_a:7&w:6.25%3B&=&_a:4&w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-logo-apple%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27mss%20mss-Unicode-Option-3%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=%3Ci%20class%2F=%27kb%20kb-Hamburger-Menu%27%3E%3C%2F%2Fi%3E&_w:1.25%3B&=Fn&_x:0.25%3B&=%E2%86%90&=%E2%86%93&=%E2%86%92\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/06/keyboard-hacking",
    "thumbnail": "/blog.lmorchard.com/uploads/2016/teensy-ps2-adapter/minikey.jpg",
    "summary": "<p><strong>TL;DR</strong>: I think I&apos;ve caught the DIY keyboard hacking bug, and I&apos;ll probably\nend up building something weird.</p>\n",
    "prevPostPath": "2016/02/21/modelm-controller",
    "nextPostPath": "2016/02/05/steam-controller"
  },
  {
    "title": "Review: Steam Controller",
    "tags": [
      "reviews",
      "gaming",
      "steam",
      "hardware"
    ],
    "year": "2016",
    "month": "02",
    "day": "05",
    "isDir": false,
    "slug": "steam-controller",
    "date": "2016-02-05T12:00:00.000Z",
    "postName": "2016-02-05-steam-controller",
    "html": "<p><strong>TL;DR</strong>: The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is an odd little duck. But, I&#39;m rooting\nfor it.</p>\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n<p><a href=\"https://www.flickr.com/photos/deusx/24726637531/in/dateposted/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/hhkb.jpg\"></a></p>\n<p>I&#39;ve long been a fan of unusual input devices, the more fiddly the better. </p>\n<p>It&#39;s been a little over 15 years since I last used a standard 104-key keyboard\non a PC, having been a <a href=\"http://amzn.to/1nQbo26\">Happy Hacking Keyboard</a> enthusiast ever since I\nfirst <a href=\"http://www.linuxjournal.com/article/3147\">read about it in Linux Journal</a>. </p>\n<p>And, as the gaming world has invested in <a href=\"http://icrontic.com/article/a4tech-v3-bloody-gun3-gaming-mouse-review\">increasingly complex gaming mice</a> over\nthe years, I&#39;ve been solidly in the trackball camp since the late 1990&#39;s when\nI played hours &amp; hours of Quake 2 and Unreal Tournament. </p>\n<p><a href=\"http://vgjunk.tumblr.com/post/63391681929/john-romero-wants-you-to-buy-a-mad-catz-panther-xl\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/panther-xl.jpg\"></a></p>\n<p>The <a href=\"http://assassin3d.squarespace.com/history-panther-xl/\">Mad Catz Panther XL</a> trackball-and-joystick combo\nwas my favorite for flight &amp; space sims like Freespace. I used a <a href=\"http://amzn.to/1nQby9D:\">Microsoft\nSidewinder Strategic Commander</a> to play Everquest one-handed. (The\nother hand was for tinkering with <a href=\"https://github.com/brainiac/showeq\">ShowEQ</a> on a nearby Linux machine, of course.)</p>\n<p>More recently, when I was playing a space trucker in EVE Online, I would often\nride a recumbent exercise bike and use a <a href=\"http://amzn.to/1NKn0bq\">One Finger Mouse</a> with my\nlaptop to align and warp between stations.</p>\n<p>Given all the above, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> looked completely relevant to my\ninterests when <a href=\"http://kotaku.com/valve-announces-the-steam-controller-a-new-way-to-cont-1411558137\">it was announced</a> way back in 2013. </p>\n<p>Fast forward to November 2015, and after many prototypes &amp; tweaks, <a href=\"http://www.theverge.com/2015/11/10/9705234/valve-steam-machines-controller-link-launch\">it finally\narrived</a>. I managed to wait a month or so, watching for red flags\nin early reviews. But, of course, I gave in and had it in time for my\ntraditional end-of-year holiday gaming binge. <br style=\"clear: both\"></p>\n<h2 id=\"ergonomics\">Ergonomics</h2>\n<img class=\"inset left\" src=\"/uploads/2016/steam-controller/couch-pc.jpg\">\n\n<p>At <a href=\"http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/\">my couch PC</a>, I use an Xbox 360 controller whenever I can. I don&#39;t\nwant to clutter the living room with big weird joysticks &amp; such.</p>\n<p>Besides that, having my hands in a neutral position in my lap seems to\nhelp quite a lot with keeping wrist pain at bay after a day in my office\nalready spent with trackball and keyboard. But, not every game supports a\ncontroller out of the box.</p>\n<p>So, it seemed really promising when I read Valve&#39;s claims that the <a href=\"http://amzn.to/1nQzE4f\">Steam\nController</a> would work with &quot;<a href=\"http://store.steampowered.com/app/353370/\">games from all genres</a>&quot;\nincluding titles typically bound to a keyboard and mouse.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24524584120\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/all-3-controllers.jpg\"></a></p>\n<p>Now that I&#39;ve got the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> in my hands, it makes my Xbox 360\ncontroller feel tiny. It reminds me a little of the original Xbox controller.\nThough, it&#39;s really unfair to take that comparison too far - I mean, that\nthing was bigger than some actual game consoles.</p>\n<p>The Xbox 360 handles taper down into rounded points that cover a third of my\npalm. But, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> bulges out at the bottoms and covers about\nhalf of my palm.  </p>\n<p>It&#39;s like the difference between a small chicken egg\nand a jumbo.  (Sorry, I&#39;ve been cooking today.) And where my fingers curl\ninward toward my palm with the 360 controller, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> has\nthem pointing more toward my chest to accomodate the thicker grips.\n<br style=\"clear: both\"></p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24206620773/in/datetaken/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/360-hands.jpg\"></a>\n<a href=\"https://www.flickr.com/photos/deusx/24740006121/in/datetaken/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/sc-hands.jpg\"></a></p>\n<p>(And, this is where I realize I was never destined to be a <a href=\"https://www.youtube.com/watch?v=PZxX3-rJoNI\">hand model</a>.)</p>\n<p>The Xbox 360 controller feels like curved handlebars between\nmy palms and the last three fingers, leaving just my index fingers and thumbs\nfree to move. It could be that I&#39;ve gotten used to it over the years, but the\ndesign of this controller feels like it naturally falls into my relaxed\nhands after I&#39;ve flopped them lazily into my lap. </p>\n<p>The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a>, though, seems to call for a more tense grip that I\ncan feel in my shoulders &amp; wrists after awhile. </p>\n<p>To keep things stable as I play, I find myself using some arm muscle &amp; elbow\npressure to wedge it between the bony first knuckles of my index fingers and\nthe bases of my thumbs.  Except for a little stabilization from my pinkies and\nring fingers, this leaves the rest of my fingers free to reach the thumbpads\nand buttons. <br style=\"clear: both\"></p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24726646081/in/dateposted-public/\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/sides.jpg\"></a>\n<a href=\"https://www.flickr.com/photos/deusx/24702264542/in/dateposted-public/\"><img class=\"inset right\" src=\"/uploads/2016/steam-controller/backs.jpg\"></a></p>\n<p>The face of the Xbox 360 controller follows a convex curve. When relaxed, my\nextended thumbs arch over that curve, their pads resting on the left stick and\nright button cluster.</p>\n<p>The face of the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is concave, almost the inverse of the\nother controller. My bent thumbs hover over a pair of circular trackpads,\nwhich are far better controlled with strokes from thumb tips than by swiping or\nrolling flat thumb pads across them.</p>\n<p>Overall, I can&#39;t say I&#39;m entirely comfortable with the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> in\nmy hands. That worries me a little after years of being unkind to my wrists.\nI&#39;m still adjusting my grip on the thing, though. Maybe I&#39;ll get used to it. \nAfter all, I spent years with the first NES gamepad - and it was no ergonomic\nmarvel.\n<br style=\"clear: both\"></p>\n<h2 id=\"hardware\">Hardware</h2>\n<p>In terms of input hardware, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> offers interesting\nimprovements over my trusty old Xbox 360 controller.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24525157630/in/photostream/\"><img id=\"thumbnail\" class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-top.jpg\"></a></p>\n<p>On the front, there&#39;s the &quot;Valve&quot; button flanked by a back &amp; start buttons.\nThere&#39;s also an analog clicky joystick and an X/Y/A/B button cluster. </p>\n<p>But, the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a>&#39;s special sauce is the pair of trackpads at the\ntop of the controller. More detail about those when I get to writing about the\nsoftware.</p>\n<p>Beneath these trackpads are the <a href=\"http://www.precisionmicrodrives.com/vibrating-vibrator-vibration-motors/linear-resonant-actuator-lra-haptic-vibration-motors\">linear resonant actuators</a> used for haptic\nfeedback. Interestingly, I haven&#39;t found any games that can use these haptic actuators\nto generate in-game vibration. They seem limited to haptics for controller\nmodes, so far.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24820691505/in/dateposted/\"><img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back.jpg\"></a></p>\n<p>On the back, there&#39;s a pair of shoulder buttons and analog triggers that bottom\nout in clicks like a GameCube controller. Along the handgrips lie two more wide buttons under the\nmiddle &amp; ring fingers.  The plate for those buttons doubles as the battery\ndoor, and one AA battery hides inside each of the handgrips.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24727371301/in/dateposted/\"><img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back-open.jpg\"></a></p>\n<p>On the inside, there are gyro and accelerometer sensors to detect motion and\norientation of the controller. </p>\n<p>If you want to see more of the innards, \nconsult the folks at <a href=\"https://www.ifixit.com/\">iFixit</a>. They did <a href=\"https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\">a great job of documenting their Steam\nController teardown</a>, saving me from feeling like I\nshould open mine up for the sake of this post.</p>\n<p>(But, who am I kidding? I&#39;ll open it up at some point, because that&#39;s\nwhat I do with all my toys.)</p>\n<p>As for power, the controller can run tethered via a micro-USB cable, or\nwirelessly using an included a USB dongle and a pair of AA batteries. </p>\n<p>You can use rechargeables,\nbut the controller itself does not charge them while plugged in. I&#39;d like to\nsee Valve come up with a rechargeable pack at some point.\n<br style=\"clear: both\"></p>\n<h2 id=\"software\">Software</h2>\n<p>The physical design and laundry list of sensors is vaguely interesting. But,\nwhat really makes the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> shine - and sometimes stink - is\nthe software. And, that software is Steam in Big Picture Mode.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/big-picture-home.jpg\">\n\n<p>The only way to configure the Controller is via Big Picture mode.\nAnd, as far as I can tell, launching games (even non-Steam games) via Big\nPicture is the only way to load game-specific configurations. </p>\n<p>I understand that this thing was designed to be paired with a Steam Machine\nand played on a TV. But, I don&#39;t play in front of a TV - and I doubt many PC\ngamers do. I find Big Picture Mode clunky and occasionally crashy. A few\ntimes, the controller has gone non-responsive or got loaded with the wrong\nconfiguration. </p>\n<p>After <a href=\"http://store.steampowered.com/controller/update/dec15\">the firmware update in December</a>, my configuration changes\nare often reverted &amp; lost. Sometimes the Big Picture interface offers up\ndelays &amp; progress animations with no explanation of what&#39;s happening. I&#39;m\nhoping I can troll the forums for some fixes, but having to do that is a bit\ndisappointing.</p>\n<p>It&#39;s early days yet, so things could get better with future patches. Valve\nshows every indication that they plan to support this device for the long\nhaul.  Still, I&#39;d love it if Valve (or the community) released an &quot;expert&quot;\nconfiguration tool as a straightforward desktop Windows application.  Just let\nme quickly assign bindings in a solid, ugly, utilitarian interface and let me\nmanually save &amp; load configurations.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config.png\">\n\n<p>The awkwardness is frustrating, because configuration is the whole reason the\ncontroller exists: I put up with the annoying UI because the result is\ninteresting. With a little tweaking, it really can generate whatever inputs are\nneeded for any game I want to play.</p>\n<p>Except for the Valve button, there are 17 other buttons on the device available\nto generate any combination of keyboard &amp; mouse signals. That includes the\nclicky trackpads &amp; joystick - and I&#39;m counting the analog triggers twice,\nbecause you can set different inputs for both partial and full pulls.</p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/trackpad-config.png\">\n\n<p>And then, there are the trackpads: In a nutshell, either trackpad can be\nconfigured as a mouse, an analog joystick, a digital d-pad, a cluster of\nbuttons, or to summon up overlay menus triggering arbitrary inputs. There are 9\ndifferent modes covering slightly different simulations of these devices. Each\nmode comes with its own control panel offering an array of sliders, variants,\nand advanced settings.</p>\n<p>For button input, there are ways to define segments of the trackpad as virtual\nbuttons activated on touch or by clicking down the pad.  Joystick input comes\nin a few subtly different flavors I haven&#39;t yet fully explored. </p>\n<p>I&#39;ve also not played much with touch menus. These consist of Steam-generated\noverlays offering up to 16 buttons plus an alternate layer of 16 more.\nBetween both trackpads, this can add up to 64 different virtual buttons\ntriggering whatever keyboard, mouse, or gamepad combinations I&#39;d like.</p>\n<p>For pointer input, there&#39;s a mouse mode similar to a laptop trackpad, with\nvarious acceleration and sensitivity settings. To my personal delight, there&#39;s\na trackball mode: the pad signals momentum through haptic rasping that\ntrails off after your thumb has lifted from a swipe - and it stops immediately\nwhen your thumb returns to the pad. </p>\n<p>You can also enable scroll wheel inputs via the raised outer edges of the\ntrackpads. It feels like to the old click-wheel iPods. </p>\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config-import.png\">\n\n<p>If all this sounds overwhelming, Steam offers ready-made crowdsourced\nconfigurations.  These are created by game developers, Valve, and shared by\nthe community at large. This means that I don&#39;t have to wait for all the\ndevelopers in the world to get around to supporting this particular weird\ncontroller. Ideally, as time goes on, control schemes will arrive that hit a\nsweet spot for every game.</p>\n<p>Valve has certainly thrown a lot at the wall here. We&#39;ll see how much sticks.\nIt certainly scratches my itch for a fiddly input device, in any case.</p>\n<h2 id=\"compatibility\">Compatibility</h2>\n<p>In a nutshell, if it accepts mouse, keyboard, joystick, or gamepad - the\n<a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> works. In this, the marketing is correct and it does what\nit says on the tin.  The more pressing issue is whether the Controller is\ncompatible with <em>me</em> as an interface to <em>the games I like</em>.</p>\n<p>Of course, it should be noted that I&#39;m by no means a pro gamer. I&#39;m\nthe filthiest of casuals - whatever that means after playing video games avidly\nfor 30 years. I&#39;m in it for fun, couldn&#39;t care less about being competitive.</p>\n<p>I&#39;ve had the most luck in mouse-and-keyboard games like the ponderously-paced\n<a href=\"http://www.failbettergames.com/sunless/\">Sunless Sea</a> and even in the more frenetic <a href=\"http://us.battle.net/d3/en/\">Diablo III</a>. Of course, at\ntimes, I lose track of the pointer in Diablo when I&#39;m spazzing out with my\nthumb and flinging it around between targets and running away to kite things.\nThat seems to get better as I turn down acceleration and play with\nsensitivity. The newer Mouse Regions mode looks interesting, too, as it\nprovides a direct screen-to-trackpad map rather than mouse or trackball style\ninput. </p>\n<p>For what it&#39;s worth, <a href=\"http://kotaku.com/how-league-of-legends-enables-toxicity-1693572469\">I don&#39;t play a lot of MOBAs lately</a>, but I\ncan imagine the dynamics are similar to Diablo.</p>\n<p>I also played a bit of <a href=\"http://store.steampowered.com/app/440/\">Team Fortress 2</a>. As promised, I was able to use\na trackpad for steering &amp; coarse aiming and then tilt the controller itself to\nrefine my aim. Like many things with this device, it takes a bit of getting\nused to and kind of turns it into a new game. Fun-ish, but I&#39;m not great at it\nyet.</p>\n<p><a href=\"http://store.steampowered.com/app/252950/\">Rocket League</a> worked out pretty well - in that I was equally terrible both\nwith the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> and the Xbox 360 controller. I had a lot of fun\nand never felt like I could blame the controller. Again, I&#39;m just a filthy\ncasual.</p>\n<p>I didn&#39;t have as much luck with <a href=\"http://store.steampowered.com/app/323040/\">Laserlife</a>, a surreal rhythm game in the\ntradition of Rez where you guide twin laser trails through targets with analog\nsticks. Ideally, I should be able to use the two trackpads as analog sticks.\nBut, I did a lot better going back to the physical sticks on my Xbox 360\ncontroller. I think the spring resistance in the physical joysticks helped cue\nme into its position. </p>\n<p>The issue seems similar to how I rarely get along with on-screen\ncontrols in smartphone games. But, these trackpads have an advantage\nover virtual glass joysticks - i.e. tactile cues like their surface curve,\nraised edges, and the embossed d-pad shape. I&#39;d like to see if I can find\nworkable settings, because twin-stick shooters are one of my favorite genres.</p>\n<p><a href=\"https://www.elitedangerous.com/\">Elite Dangerous</a> offers a kind of bottomless pit of customization.  It&#39;s a\nwork in progress translating my mouse-and-keyboard controls to a comfortable\nscheme on the Controller. For example, it was stupid fun tying pitch and roll\nto the motion sensors and flying the controller around like a model spaceship.\n(I made zoomy-whoosh-pew-pew noises, too.) I&#39;ve seen other control schemes use\nthe gyro for looking around the cockpit, which is actually used to summon up\nvarious ship panels via gaze. This won&#39;t replace <a href=\"https://www.youtube.com/watch?v=AvAI3l0v62E\">a super-immersive HOTAS &amp;\nhead tracking setup</a>, but I think I can get it to an enjoyable\npoint.</p>\n<p>Overall, I&#39;ve had decent luck with the games I play. Where things\nhaven&#39;t quite worked out, I have a hunch that there&#39;s a workable control\nscheme somewhere inside the giant bag of options on offer. I&#39;ve seen some\nfolks describe the process a bit like getting accustomed to a new keyboard\nlayout like Dvorak. That&#39;s oddly interesting to me, so I&#39;m going to keep\npoking at it.</p>\n<h2 id=\"hackability\">Hackability</h2>\n<p>The Controller is a USB HID composite device - in other words, It <em>is</em> a mouse\n<em>and</em> a keyboard <em>and</em> a joystick <em>and</em> a gamepad, as far as USB is concerned.</p>\n<p>I&#39;ve gotten the sense that Steam does <em>something</em> with the Controller input,\nbut I&#39;m not sure if it analgous to things like <a href=\"http://joytokey.net/en/\">JoyToKey</a> or <a href=\"https://autohotkey.com/\">AutoHotKey</a>\nto translate things on the PC side. My guess is that it leans most heavily on\nprocessing in the controller itself to emit standard USB messages to\nachieve maximum compatibility in games.</p>\n<p><a href=\"https://www.flickr.com/photos/deusx/24639522001/in/dateposted-public/\"><img class=\"inset left\" src=\"/uploads/2016/steam-controller/teensy-keyboard.jpg\"></a></p>\n<p>Considering the things found in the <a href=\"https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\">iFixit teardown</a>,\nI&#39;m not seeing any particularly exotic parts. Valve stated early on that &quot;<a href=\"http://hackaday.com/2013/10/01/steam-controller-open-and-hackable/\">the\nSteam Controller was designed from the ground up to be hackable</a>&quot;.</p>\n<p>For example, from <a href=\"https://www.reddit.com/r/SteamControllerMods/comments/3p6d26/some_details_on_the_chips_in_the_controller_and/\">a Reddit thread</a>, I\nlearned that the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is built around the <a href=\"http://www.arm.com/products/processors/cortex-m/cortex-m0.php\">ARM\nCortex-M0</a>. That&#39;s similar to the <a href=\"http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php\">ARM Cortex-M0+</a>\nused in the <a href=\"https://www.pjrc.com/store/teensylc.html\">Teensy LC</a>. </p>\n<p>This is interesting, because I&#39;ve been reading up on how to build a custom\nkeyboard. (You know, as one does.) In the course of that, I&#39;ve been\nacquainting myself with the <a href=\"https://www.pjrc.com/teensy/\">Teensy line of USB development boards</a>.</p>\n<p>Lately, I&#39;ve been playing with the <a href=\"https://www.pjrc.com/store/teensy.html\">Teensy 2.0</a>. That seems to be\npopular in the DIY community for how easy it makes implementing \nUSB devices.  Granted, that&#39;s a different microcontroller (an <a href=\"http://www.atmel.com/devices/atmega32u4.aspx\">Atmel\nATmega32u4</a>), but I&#39;m hoping that general experience with things like the\nTeensy family of dev boards can eventually translate to some personal fun and\nsome community firmware to explore the potential of the <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a>.</p>\n<p>As it is, someone&#39;s already figured out how to <a href=\"https://steamcommunity.com/app/353370/discussions/0/494632506573267894/\">play music through the haptic\nactuators</a> and they released the <a href=\"https://gitlab.com/Pilatomic/SteamControllerSinger\">source\ncode</a>.  That&#39;s more a function of decoding the \nprotocol from PC to Controller than messing around with the microcontrollers,\nbut it&#39;s still pretty cool.</p>\n<p>It would be great if Valve released more docs &amp; code around this thing. I\ncan understand that there might be some pressure to keep the Steam hardware &amp;\nsoftware ecosystem cohesive. But, for a weird little device like this, I\nimagine they&#39;d only get more sales by fully opening everything up and letting\nthe tinkering world pave the way for more uses - and maybe fix a few bugs for\nthem as clever folks scratch their own itches.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is an odd little duck. It&#39;s a bit awkward to hold\nand the software is not great. But, software can be fixed and the controls &amp;\nsensors onboard have so much great potential for PC gaming. </p>\n<p>This is clearly not a mature, finished product - which is disappointing,\nbecause I paid money for it - but I&#39;m really rooting for it. And I&#39;ve already\nused it for dozens of hours in games, so it&#39;s obviously worked for me in many\ncapacities. I&#39;m really hoping that Valve follows through on their promises to\nopen things up for tinkering - because it might be the thing that ultimately\nredeems the whole project.</p>\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "body": "**TL;DR**: The [Steam Controller][] is an odd little duck. But, I'm rooting\nfor it.\n\n<!--more-->\n\n<nav role=\"navigation\" class=\"table-of-contents\"></nav>\n\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/hhkb.jpg\">](https://www.flickr.com/photos/deusx/24726637531/in/dateposted/)\n\nI've long been a fan of unusual input devices, the more fiddly the better. \n\nIt's been a little over 15 years since I last used a standard 104-key keyboard\non a PC, having been a [Happy Hacking Keyboard][hhkb] enthusiast ever since I\nfirst [read about it in Linux Journal][hhkb-review]. \n\n[hhkb-review]: http://www.linuxjournal.com/article/3147\n[hhkb]: http://amzn.to/1nQbo26\n\nAnd, as the gaming world has invested in [increasingly complex gaming mice][gamingmice] over\nthe years, I've been solidly in the trackball camp since the late 1990's when\nI played hours & hours of Quake 2 and Unreal Tournament. \n\n[gamingmice]: http://icrontic.com/article/a4tech-v3-bloody-gun3-gaming-mouse-review\n\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/panther-xl.jpg\">](http://vgjunk.tumblr.com/post/63391681929/john-romero-wants-you-to-buy-a-mad-catz-panther-xl)\n\nThe [Mad Catz Panther XL][pantherxl] trackball-and-joystick combo\nwas my favorite for flight & space sims like Freespace. I used a [Microsoft\nSidewinder Strategic Commander][msssc] to play Everquest one-handed. (The\nother hand was for tinkering with [ShowEQ][] on a nearby Linux machine, of course.)\n\n[showeq]: https://github.com/brainiac/showeq\n\nMore recently, when I was playing a space trucker in EVE Online, I would often\nride a recumbent exercise bike and use a [One Finger Mouse][ofm] with my\nlaptop to align and warp between stations.\n\n[msssc]: http://amzn.to/1nQby9D:\n[pantherxl]: http://assassin3d.squarespace.com/history-panther-xl/ \n[ofm]: http://amzn.to/1NKn0bq\n\nGiven all the above, the [Steam Controller][] looked completely relevant to my\ninterests when [it was announced][scannounce] way back in 2013. \n\nFast forward to November 2015, and after many prototypes & tweaks, [it finally\narrived][screleased]. I managed to wait a month or so, watching for red flags\nin early reviews. But, of course, I gave in and had it in time for my\ntraditional end-of-year holiday gaming binge. <br style=\"clear: both\">\n\n[scannounce]: http://kotaku.com/valve-announces-the-steam-controller-a-new-way-to-cont-1411558137\n[screleased]: http://www.theverge.com/2015/11/10/9705234/valve-steam-machines-controller-link-launch\n[Steam Controller]: http://amzn.to/1nQzE4f\n\n## Ergonomics\n\n<img class=\"inset left\" src=\"/uploads/2016/steam-controller/couch-pc.jpg\">\n\nAt [my couch PC][couchpc], I use an Xbox 360 controller whenever I can. I don't\nwant to clutter the living room with big weird joysticks & such.\n\n[couchpc]: http://blog.lmorchard.com/2013/01/21/gaming-from-the-orchard-house-couch/\n\nBesides that, having my hands in a neutral position in my lap seems to\nhelp quite a lot with keeping wrist pain at bay after a day in my office\nalready spent with trackball and keyboard. But, not every game supports a\ncontroller out of the box.\n\nSo, it seemed really promising when I read Valve's claims that the [Steam\nController][] would work with \"[games from all genres][steamhardware]\"\nincluding titles typically bound to a keyboard and mouse.\n\n[steamhardware]: http://store.steampowered.com/app/353370/\n\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/all-3-controllers.jpg\">](https://www.flickr.com/photos/deusx/24524584120)\n\nNow that I've got the [Steam Controller][] in my hands, it makes my Xbox 360\ncontroller feel tiny. It reminds me a little of the original Xbox controller.\nThough, it's really unfair to take that comparison too far - I mean, that\nthing was bigger than some actual game consoles.\n\nThe Xbox 360 handles taper down into rounded points that cover a third of my\npalm. But, the [Steam Controller][] bulges out at the bottoms and covers about\nhalf of my palm.  \n\nIt's like the difference between a small chicken egg\nand a jumbo.  (Sorry, I've been cooking today.) And where my fingers curl\ninward toward my palm with the 360 controller, the [Steam Controller][] has\nthem pointing more toward my chest to accomodate the thicker grips.\n<br style=\"clear: both\">\n\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/360-hands.jpg\">](https://www.flickr.com/photos/deusx/24206620773/in/datetaken/)\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/sc-hands.jpg\">](https://www.flickr.com/photos/deusx/24740006121/in/datetaken/)\n\n(And, this is where I realize I was never destined to be a [hand model][].)\n\n[hand model]: https://www.youtube.com/watch?v=PZxX3-rJoNI\n\nThe Xbox 360 controller feels like curved handlebars between\nmy palms and the last three fingers, leaving just my index fingers and thumbs\nfree to move. It could be that I've gotten used to it over the years, but the\ndesign of this controller feels like it naturally falls into my relaxed\nhands after I've flopped them lazily into my lap. \n\nThe [Steam Controller][], though, seems to call for a more tense grip that I\ncan feel in my shoulders & wrists after awhile. \n\nTo keep things stable as I play, I find myself using some arm muscle & elbow\npressure to wedge it between the bony first knuckles of my index fingers and\nthe bases of my thumbs.  Except for a little stabilization from my pinkies and\nring fingers, this leaves the rest of my fingers free to reach the thumbpads\nand buttons. <br style=\"clear: both\">\n\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/sides.jpg\">](https://www.flickr.com/photos/deusx/24726646081/in/dateposted-public/)\n[<img class=\"inset right\" src=\"/uploads/2016/steam-controller/backs.jpg\">](https://www.flickr.com/photos/deusx/24702264542/in/dateposted-public/)\n\nThe face of the Xbox 360 controller follows a convex curve. When relaxed, my\nextended thumbs arch over that curve, their pads resting on the left stick and\nright button cluster.\n\nThe face of the [Steam Controller][] is concave, almost the inverse of the\nother controller. My bent thumbs hover over a pair of circular trackpads,\nwhich are far better controlled with strokes from thumb tips than by swiping or\nrolling flat thumb pads across them.\n\n[dpbone]: https://en.wikipedia.org/wiki/Phalanx_bone#Distal_phalanx\n\nOverall, I can't say I'm entirely comfortable with the [Steam Controller][] in\nmy hands. That worries me a little after years of being unkind to my wrists.\nI'm still adjusting my grip on the thing, though. Maybe I'll get used to it. \nAfter all, I spent years with the first NES gamepad - and it was no ergonomic\nmarvel.\n<br style=\"clear: both\">\n\n## Hardware\n\nIn terms of input hardware, the [Steam Controller][] offers interesting\nimprovements over my trusty old Xbox 360 controller.\n\n[<img id=\"thumbnail\" class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-top.jpg\">](https://www.flickr.com/photos/deusx/24525157630/in/photostream/)\n\nOn the front, there's the \"Valve\" button flanked by a back & start buttons.\nThere's also an analog clicky joystick and an X/Y/A/B button cluster. \n\nBut, the [Steam Controller][]'s special sauce is the pair of trackpads at the\ntop of the controller. More detail about those when I get to writing about the\nsoftware.\n\nBeneath these trackpads are the [linear resonant actuators][lra] used for haptic\nfeedback. Interestingly, I haven't found any games that can use these haptic actuators\nto generate in-game vibration. They seem limited to haptics for controller\nmodes, so far.\n\n[lra]: http://www.precisionmicrodrives.com/vibrating-vibrator-vibration-motors/linear-resonant-actuator-lra-haptic-vibration-motors\n\n[<img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back.jpg\">](https://www.flickr.com/photos/deusx/24820691505/in/dateposted/)\n\nOn the back, there's a pair of shoulder buttons and analog triggers that bottom\nout in clicks like a GameCube controller. Along the handgrips lie two more wide buttons under the\nmiddle & ring fingers.  The plate for those buttons doubles as the battery\ndoor, and one AA battery hides inside each of the handgrips.\n\n[<img class=\"inset wide left\" src=\"/uploads/2016/steam-controller/sc-back-open.jpg\">](https://www.flickr.com/photos/deusx/24727371301/in/dateposted/)\n\nOn the inside, there are gyro and accelerometer sensors to detect motion and\norientation of the controller. \n\nIf you want to see more of the innards, \nconsult the folks at [iFixit][]. They did [a great job of documenting their Steam\nController teardown][teardown], saving me from feeling like I\nshould open mine up for the sake of this post.\n\n(But, who am I kidding? I'll open it up at some point, because that's\nwhat I do with all my toys.)\n\nAs for power, the controller can run tethered via a micro-USB cable, or\nwirelessly using an included a USB dongle and a pair of AA batteries. \n\nYou can use rechargeables,\nbut the controller itself does not charge them while plugged in. I'd like to\nsee Valve come up with a rechargeable pack at some point.\n<br style=\"clear: both\">\n\n[teardown]: https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\n[ifixit]: https://www.ifixit.com/\n\n## Software\n\nThe physical design and laundry list of sensors is vaguely interesting. But,\nwhat really makes the [Steam Controller][] shine - and sometimes stink - is\nthe software. And, that software is Steam in Big Picture Mode.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/big-picture-home.jpg\">\n\nThe only way to configure the Controller is via Big Picture mode.\nAnd, as far as I can tell, launching games (even non-Steam games) via Big\nPicture is the only way to load game-specific configurations. \n\nI understand that this thing was designed to be paired with a Steam Machine\nand played on a TV. But, I don't play in front of a TV - and I doubt many PC\ngamers do. I find Big Picture Mode clunky and occasionally crashy. A few\ntimes, the controller has gone non-responsive or got loaded with the wrong\nconfiguration. \n\nAfter [the firmware update in December][scdecpatch], my configuration changes\nare often reverted & lost. Sometimes the Big Picture interface offers up\ndelays & progress animations with no explanation of what's happening. I'm\nhoping I can troll the forums for some fixes, but having to do that is a bit\ndisappointing.\n\n[scdecpatch]: http://store.steampowered.com/controller/update/dec15\n\nIt's early days yet, so things could get better with future patches. Valve\nshows every indication that they plan to support this device for the long\nhaul.  Still, I'd love it if Valve (or the community) released an \"expert\"\nconfiguration tool as a straightforward desktop Windows application.  Just let\nme quickly assign bindings in a solid, ugly, utilitarian interface and let me\nmanually save & load configurations.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config.png\">\n\nThe awkwardness is frustrating, because configuration is the whole reason the\ncontroller exists: I put up with the annoying UI because the result is\ninteresting. With a little tweaking, it really can generate whatever inputs are\nneeded for any game I want to play.\n\nExcept for the Valve button, there are 17 other buttons on the device available\nto generate any combination of keyboard & mouse signals. That includes the\nclicky trackpads & joystick - and I'm counting the analog triggers twice,\nbecause you can set different inputs for both partial and full pulls.\n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/trackpad-config.png\">\n\nAnd then, there are the trackpads: In a nutshell, either trackpad can be\nconfigured as a mouse, an analog joystick, a digital d-pad, a cluster of\nbuttons, or to summon up overlay menus triggering arbitrary inputs. There are 9\ndifferent modes covering slightly different simulations of these devices. Each\nmode comes with its own control panel offering an array of sliders, variants,\nand advanced settings.\n\nFor button input, there are ways to define segments of the trackpad as virtual\nbuttons activated on touch or by clicking down the pad.  Joystick input comes\nin a few subtly different flavors I haven't yet fully explored. \n\nI've also not played much with touch menus. These consist of Steam-generated\noverlays offering up to 16 buttons plus an alternate layer of 16 more.\nBetween both trackpads, this can add up to 64 different virtual buttons\ntriggering whatever keyboard, mouse, or gamepad combinations I'd like.\n\nFor pointer input, there's a mouse mode similar to a laptop trackpad, with\nvarious acceleration and sensitivity settings. To my personal delight, there's\na trackball mode: the pad signals momentum through haptic rasping that\ntrails off after your thumb has lifted from a swipe - and it stops immediately\nwhen your thumb returns to the pad. \n\nYou can also enable scroll wheel inputs via the raised outer edges of the\ntrackpads. It feels like to the old click-wheel iPods. \n\n<img class=\"fullwidth\" src=\"/uploads/2016/steam-controller/controller-config-import.png\">\n\nIf all this sounds overwhelming, Steam offers ready-made crowdsourced\nconfigurations.  These are created by game developers, Valve, and shared by\nthe community at large. This means that I don't have to wait for all the\ndevelopers in the world to get around to supporting this particular weird\ncontroller. Ideally, as time goes on, control schemes will arrive that hit a\nsweet spot for every game.\n\nValve has certainly thrown a lot at the wall here. We'll see how much sticks.\nIt certainly scratches my itch for a fiddly input device, in any case.\n\n## Compatibility\n\nIn a nutshell, if it accepts mouse, keyboard, joystick, or gamepad - the\n[Steam Controller][] works. In this, the marketing is correct and it does what\nit says on the tin.  The more pressing issue is whether the Controller is\ncompatible with *me* as an interface to *the games I like*.\n\nOf course, it should be noted that I'm by no means a pro gamer. I'm\nthe filthiest of casuals - whatever that means after playing video games avidly\nfor 30 years. I'm in it for fun, couldn't care less about being competitive.\n\nI've had the most luck in mouse-and-keyboard games like the ponderously-paced\n[Sunless Sea][] and even in the more frenetic [Diablo III][]. Of course, at\ntimes, I lose track of the pointer in Diablo when I'm spazzing out with my\nthumb and flinging it around between targets and running away to kite things.\nThat seems to get better as I turn down acceleration and play with\nsensitivity. The newer Mouse Regions mode looks interesting, too, as it\nprovides a direct screen-to-trackpad map rather than mouse or trackball style\ninput. \n\nFor what it's worth, [I don't play a lot of MOBAs lately][mobatoxic], but I\ncan imagine the dynamics are similar to Diablo.\n\n[mobatoxic]: http://kotaku.com/how-league-of-legends-enables-toxicity-1693572469\n\nI also played a bit of [Team Fortress 2][tf2]. As promised, I was able to use\na trackpad for steering & coarse aiming and then tilt the controller itself to\nrefine my aim. Like many things with this device, it takes a bit of getting\nused to and kind of turns it into a new game. Fun-ish, but I'm not great at it\nyet.\n\n[tf2]: http://store.steampowered.com/app/440/\n\n[Rocket League][] worked out pretty well - in that I was equally terrible both\nwith the [Steam Controller][] and the Xbox 360 controller. I had a lot of fun\nand never felt like I could blame the controller. Again, I'm just a filthy\ncasual.\n\nI didn't have as much luck with [Laserlife][], a surreal rhythm game in the\ntradition of Rez where you guide twin laser trails through targets with analog\nsticks. Ideally, I should be able to use the two trackpads as analog sticks.\nBut, I did a lot better going back to the physical sticks on my Xbox 360\ncontroller. I think the spring resistance in the physical joysticks helped cue\nme into its position. \n\nThe issue seems similar to how I rarely get along with on-screen\ncontrols in smartphone games. But, these trackpads have an advantage\nover virtual glass joysticks - i.e. tactile cues like their surface curve,\nraised edges, and the embossed d-pad shape. I'd like to see if I can find\nworkable settings, because twin-stick shooters are one of my favorite genres.\n\n[Elite Dangerous][] offers a kind of bottomless pit of customization.  It's a\nwork in progress translating my mouse-and-keyboard controls to a comfortable\nscheme on the Controller. For example, it was stupid fun tying pitch and roll\nto the motion sensors and flying the controller around like a model spaceship.\n(I made zoomy-whoosh-pew-pew noises, too.) I've seen other control schemes use\nthe gyro for looking around the cockpit, which is actually used to summon up\nvarious ship panels via gaze. This won't replace [a super-immersive HOTAS &\nhead tracking setup][eliteimmersive], but I think I can get it to an enjoyable\npoint.\n\n[eliteimmersive]: https://www.youtube.com/watch?v=AvAI3l0v62E\n[Sunless Sea]: http://www.failbettergames.com/sunless/\n[Diablo III]: http://us.battle.net/d3/en/\n[Laserlife]: http://store.steampowered.com/app/323040/\n[Rocket League]: http://store.steampowered.com/app/252950/\n[Elite Dangerous]: https://www.elitedangerous.com/\n \nOverall, I've had decent luck with the games I play. Where things\nhaven't quite worked out, I have a hunch that there's a workable control\nscheme somewhere inside the giant bag of options on offer. I've seen some\nfolks describe the process a bit like getting accustomed to a new keyboard\nlayout like Dvorak. That's oddly interesting to me, so I'm going to keep\npoking at it.\n\n## Hackability\n\nThe Controller is a USB HID composite device - in other words, It *is* a mouse\n*and* a keyboard *and* a joystick *and* a gamepad, as far as USB is concerned.\n\nI've gotten the sense that Steam does *something* with the Controller input,\nbut I'm not sure if it analgous to things like [JoyToKey][] or [AutoHotKey][]\nto translate things on the PC side. My guess is that it leans most heavily on\nprocessing in the controller itself to emit standard USB messages to\nachieve maximum compatibility in games.\n\n[JoyToKey]: http://joytokey.net/en/\n[AutoHotKey]: https://autohotkey.com/\n\n[<img class=\"inset left\" src=\"/uploads/2016/steam-controller/teensy-keyboard.jpg\">](https://www.flickr.com/photos/deusx/24639522001/in/dateposted-public/)\n\nConsidering the things found in the [iFixit teardown][teardown],\nI'm not seeing any particularly exotic parts. Valve stated early on that \"[the\nSteam Controller was designed from the ground up to be hackable][schackable]\".\n\nFor example, from [a Reddit thread][reddit-chips], I\nlearned that the [Steam Controller][] is built around the [ARM\nCortex-M0][cortex-m0]. That's similar to the [ARM Cortex-M0+][cortex-m0-plus]\nused in the [Teensy LC][teensylc]. \n\nThis is interesting, because I've been reading up on how to build a custom\nkeyboard. (You know, as one does.) In the course of that, I've been\nacquainting myself with the [Teensy line of USB development boards][teensy].\n\nLately, I've been playing with the [Teensy 2.0][teensy20]. That seems to be\npopular in the DIY community for how easy it makes implementing \nUSB devices.  Granted, that's a different microcontroller (an [Atmel\nATmega32u4][ATmega32u4]), but I'm hoping that general experience with things like the\nTeensy family of dev boards can eventually translate to some personal fun and\nsome community firmware to explore the potential of the [Steam Controller][].\n\nAs it is, someone's already figured out how to [play music through the haptic\nactuators][hapticmusic] and they released the [source\ncode][hapticmusicsource].  That's more a function of decoding the \nprotocol from PC to Controller than messing around with the microcontrollers,\nbut it's still pretty cool.\n\nIt would be great if Valve released more docs & code around this thing. I\ncan understand that there might be some pressure to keep the Steam hardware &\nsoftware ecosystem cohesive. But, for a weird little device like this, I\nimagine they'd only get more sales by fully opening everything up and letting\nthe tinkering world pave the way for more uses - and maybe fix a few bugs for\nthem as clever folks scratch their own itches.\n\n[ATmega32u4]: http://www.atmel.com/devices/atmega32u4.aspx\n[schackable]: http://hackaday.com/2013/10/01/steam-controller-open-and-hackable/\n[teensylc]: https://www.pjrc.com/store/teensylc.html\n[teensy]: https://www.pjrc.com/teensy/\n[teensy20]: https://www.pjrc.com/store/teensy.html\n[teardown]: https://www.ifixit.com/Teardown/Steam+Controller+Teardown/52578\n[cortex-m0-plus]: http://www.arm.com/products/processors/cortex-m/cortex-m0plus.php\n[cortex-m0]: http://www.arm.com/products/processors/cortex-m/cortex-m0.php\n\n[reddit-chips]: https://www.reddit.com/r/SteamControllerMods/comments/3p6d26/some_details_on_the_chips_in_the_controller_and/\n\n[hapticmusic]: https://steamcommunity.com/app/353370/discussions/0/494632506573267894/\n[hapticmusicsource]: https://gitlab.com/Pilatomic/SteamControllerSinger\n\n## Conclusion\n\nThe [Steam Controller][] is an odd little duck. It's a bit awkward to hold\nand the software is not great. But, software can be fixed and the controls &\nsensors onboard have so much great potential for PC gaming. \n\nThis is clearly not a mature, finished product - which is disappointing,\nbecause I paid money for it - but I'm really rooting for it. And I've already\nused it for dozens of hours in games, so it's obviously worked for me in many\ncapacities. I'm really hoping that Valve follows through on their promises to\nopen things up for tinkering - because it might be the thing that ultimately\nredeems the whole project.\n\n\n<!-- vim: set wrap wm=5 syntax=markdown textwidth=78: -->\n",
    "parentPath": "../blog.lmorchard.com/posts",
    "path": "2016/02/05/steam-controller",
    "thumbnail": "/blog.lmorchard.com/uploads/2016/steam-controller/sc-top.jpg",
    "summary": "<p><strong>TL;DR</strong>: The <a href=\"http://amzn.to/1nQzE4f\">Steam Controller</a> is an odd little duck. But, I&apos;m rooting\nfor it.</p>\n",
    "prevPostPath": "2016/02/06/keyboard-hacking",
    "nextPostPath": "2015/10/28/catbearcoin"
  }
]